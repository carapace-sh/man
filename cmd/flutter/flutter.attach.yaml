# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: attach
description: Attach to a running app
flags:
    --app-id=: The package name (Android) or bundle identifier (iOS) for the app
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --dds-port=: When this value is provided, the Dart Development Service (DDS) will be bound to the provided port.
    --debug: Build a debug version of your app (default mode).
    --debug-uri=: The URL at which the observatory is listening.
    --device-timeout=: Time in seconds to wait for devices to attach.
    --device-user=: Identifier number for a user or work profile on Android only.
    --device-vmservice-port=: Look for vmservice connections only from the specified port.
    --host-vmservice-port=: When a device-side vmservice port is forwarded to a host-side port, use this value as the host port.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-track-widget-creation: Do not track widget creation locations.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --pid-file=: Specify a file to write the process ID to.
    --profile: Build a version of your app specialized for performance profiling.
    --track-widget-creation: Track widget creation locations.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter attach` is a Flutter development command used to attach a running Dart application in the IDE (Integrated Development Environment) with the Flutter engine for debugging and hot reloading. It connects your editor or IDE to the Flutter process, enabling you to set breakpoints, inspect variables, and view the console output directly within your development environment. This improves productivity and simplifies the debugging experience.'
    flag:
        app-id: '[AI] `flutter attach --app-id` is a command used in Flutter development to attach the Flutter debugger to a running Android or iOS app. The `--app-id` option specifies the Google Play or App Store Connect application identifier (Bundle ID for Android) of the target app. This command enables developers to debug and hot reload their app from the IDE, making it easier to identify and fix issues in real-time.'
        dart-define: '[AI] `flutter attach` is a command-line tool used in Flutter development to debug and hot reload running applications. The `--dart-define` option allows you to define key-value pairs that get passed as constants to the Dart VM when starting the application. This can be useful for overriding configuration values or defining custom constants during development and testing. For example, you might use `--dart-define="API_KEY=myKey"` to set an API key value without modifying your code directly.'
        dds-port: '[AI] `flutter attach --dds-port` is a command used in Flutter development for debugging and profiling applications. The `--dds-port` option specifies a port number to which the Dart DevTools Server should bind, enabling remote inspection and analysis of running Flutter applications using the Dart DevTools client.'
        debug: '[AI] `flutter attach --debug` is a command used in Flutter development to attach a running test, debugger, or hot reload to a currently running Dart application. The `--debug` option enables the debugger mode for the attached process. This allows developers to inspect and modify variables, step through code, and set breakpoints during runtime, facilitating effective debugging and problem-solving in their Flutter projects.'
        debug-uri: '[AI] `flutter attach --debug-uri` is a command used in Flutter development for debugging and running tests on an already running Flutter application on a device or emulator. It establishes a communication channel between the IDE (Integrated Development Environment) and the Flutter process, allowing the IDE to send debug messages, attach a debugger, and control the application''s execution. The `--debug-uri` flag specifies the URI that other tools, such as an IDE or a test runner, can use to connect to this process for debugging purposes.'
        device-timeout: '[AI] The `flutter attach` command is a development tool used in Flutter framework to connect a running Flutter application on a device or emulator with the Dart virtual machine for debugging and hot reloading. The `--device-timeout` option sets a maximum time in seconds (default is 60) that Flutter waits for a device to become available before giving up and reporting an error. If you''re experiencing issues with your device being detected, increasing this timeout value might help resolve the issue.'
        device-user: |-
            [AI] The `flutter attach` command is a tool provided by Flutter, a mobile app development framework, to connect a running Dart application with a specific device for debugging and hot reloading. The `--device-user` option modifies the user that the Flutter process will run as on the target Android or iOS device.

            Setting `--device-user` specifies a custom user ID for the Flutter process, instead of using the system default. This can be useful in certain development scenarios where multiple Flutter projects are running concurrently on the same device, and you want to isolate each project's data and resources. The user ID argument should follow the format `<username>:<groupname>`.

            For example:
            ```
            flutter attach --device-user myappuser:myappgroup
            ```
            This command connects your Flutter app to a specific device, making sure that the application's data and resources are stored under the given user and group.
        device-vmservice-port: '[AI] `flutter attach --device-vmservice-port` is a command used in Flutter development for debugging and running applications on physical devices. The option `--device-vmservice-port` specifies the port number through which the VM Service (Virtual Machine Service) communicates with the Flutter development tools. This port allows the debugger to attach to the running Flutter application on the device, enabling features like hot reloading and debugging.'
        help: |-
            [AI] `flutter attach` is a command-line tool provided by Flutter, a mobile application development framework. The `--help` option is used to display detailed help information about the `attach` command. Here's what you can expect:

            1. Description: A brief explanation of what the `attach` command does - it allows attaching a Dart debugger to a running Flutter application on a device or emulator.
            2. Usage: Instructions on how to use the command, including required arguments and optional flags. For example, you'll need to specify the target application, the type of device or emulator, and possibly additional options.
            3. Options: A list of available options with brief descriptions - for instance, `--no-sound-null-checks` disables sound null checks during debugging.
            4. Examples: Concrete usage examples to help you get started. For example, you can learn how to attach the debugger to a running application on an Android device using the command line.
            5. Troubleshooting: Information about common issues and their solutions when using the `attach` command.
        host-vmservice-port: |-
            [AI] `flutter attach --host-vmservice-port` is a command used in Flutter development. It allows Dart code running in a Flutter project to be debugged and controlled from another application, typically the IDE (Integrated Development Environment) or the terminal.

            The `--host-vmservice-port` option specifies the port number that the Virtual Machine Service (VMS) listens on for remote debugging connections. When this command is run, it connects the running Flutter application to the specified VMS instance, enabling debugging and other development tools like hot reload and live editing to work across multiple processes.

            It's important to note that using `--host-vmservice-port` can increase security risks as it exposes a network port to potential attackers. Therefore, it is recommended to use this command only in trusted development environments and with caution.
        no-null-assertions: '[AI] The `flutter attach` command is a tool provided by Flutter to attach a Dart virtual machine to an already running application for debugging or hot reloading. The `--no-null-assertions` flag disables the null safety feature introduced in Dart 2.12. When this option is used, the Dart runtime will no longer throw a NullPointerException when trying to access a property or call a method on a null object. Instead, it will return null and continue executing the program. This can be useful for debugging older codebases that do not use null safety, but it should be noted that using this flag could potentially lead to runtime errors due to null values.'
        no-track-widget-creation: '[AI] `flutter attach --no-track-widget-creation` is a command used in Flutter development to attach the Dart VM and debugger to an already running Flutter application without automatically tracking or creating new widgets when hot reloading the code. This can be useful in certain scenarios where manual control over widget rebuilds is desired, such as during complex UI refactorings or fixing deep-rooted bugs.'
        null-assertions: '[AI] The `flutter attach --null-assertions` command is a Dart development tool used in Flutter projects. It allows running a test or a hot reload of a Dart application from the command line, with an additional option to enable null safety exceptions being treated as warnings instead of errors (--null-assertions flag). This can be helpful during development when dealing with legacy code that may contain potential null reference issues. However, it''s important to note that this option could potentially hide runtime errors and should be used with caution, especially before deploying the application.'
        pid-file: '[AI] `flutter attach --pid-file` is a command used in Flutter development to attach the Dart Virtual Machine (Dart VM) to an already running Flutter application. The `--pid-file` option specifies a file where the process ID (PID) of the running Flutter application is written. By providing this file, `flutter attach` can identify and connect to the correct application instance instead of launching a new one. This allows developers to apply hot reloads or debug their code without interrupting the user experience of the currently running app.'
        profile: '[AI] `flutter attach --profile` is a command used in Flutter development for profiling and performance analysis of a running Flutter application. The `--profile` option tells the Flutter DevTools to start profiling the selected process and open it in the devtools interface for further inspection. This can help developers identify and resolve performance bottlenecks in their code.'
        target: '[AI] `flutter attach --target` is a command used in Flutter development to attach the Dart Virtual Machine (DVM) to a running Flutter application on an Android or iOS device or emulator. The `--target` option specifies which application or process to attach to, based on its name or PID. This allows developers to debug and inspect their app in real-time while it''s running.'
        track-widget-creation: |-
            [AI] The `flutter attach --track-widget-creation` command is a development tool used in Flutter, a UI toolkit from Google for building natively compiled applications for mobile, web, and desktop from a single codebase.

            This command attaches the Dart Virtual Machine (VM) to an already running Flutter application on a device or emulator, allowing live editing of the Dart code without having to rebuild the entire app each time. The `--track-widget-creation` flag enables real-time tracking and rebuilding of widgets whenever they are created in the app's user interface, ensuring that any changes made to the code are instantly reflected on the device or emulator. This results in faster development cycles and more effective debugging.
