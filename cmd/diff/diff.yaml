# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: diff
description: compare files line by line
flags:
    --GTYPE-group-format?: format GTYPE input groups with GFMT
    --LTYPE-line-format?: format LTYPE input lines with LFMT
    --changed-group-format=: set changed group format
    --color?: colorize the output
    --from-file?: compare FILE1 to all operands
    --help: display this help and exit
    --horizon-lines?: keep NUM lines of the common prefix and suffix
    --ignore-file-name-case: ignore case when comparing file names
    --left-column: output only the left column of common lines
    --line-format?: format all input lines with LFMT
    --new-group-format=: set new group format
    --new-line-format=: set new line format
    --no-dereference: don't follow symbolic links
    --no-ignore-file-name-case: consider case when comparing file names
    --normal: output a normal diff (the default)
    --old-group-format=: set old group format
    --old-line-format=: set old line format
    --palette?: the colors to use when --color is active
    --strip-trailing-cr: strip trailing carriage return on input
    --suppress-blank-empty: suppress space or tab before empty output lines
    --suppress-common-lines: do not output common lines
    --tabsize=: tab stops every NUM (default 8) print columns
    --to-file?: compare all operands to FILE2
    --unchanged-group-format=: set unchanged group format
    --unchanged-line-format=: set unchanged line format
    -B, --ignore-blank-lines: ignore changes where lines are all blank
    -C=: output NUM (default 3) lines of copied context
    -D, --ifdef?: output merged file with '#ifdef NAME' diffs
    -E, --ignore-tab-expansion: ignore changes due to tab expansion
    -F, --show-function-line?: show the most recent line matching RE
    -H, --speed-large-files: assume large files and many scattered small changes
    -I, --ignore-matching-lines?: ignore changes where all lines match RE
    -L, --label=: use LABEL instead of file name and timestamp
    -N, --new-file: treat absent files as empty
    -P, --unidirectional-new-file: treat absent first files as empty
    -S, --starting-file?: start with FILE when comparing directories
    -T, --initial-tab: make tabs line up by prepending a tab
    -U=: output NUM (default 3) lines of unified context
    -W, --width?: output at most NUM (default 130) print columns
    -X, --exclude-from?: exclude files that match any pattern in FILE
    -Z, --ignore-trailing-space: ignore white space at line end
    -a, --text: treat all files as text
    -b, --ignore-space-change: ignore changes in the amount of white space
    -c, --context?: output NUM (default 3) lines of copied context
    -d, --minimal: try hard to find a smaller set of changes
    -e, --ed: output an ed script
    -f, --forward-ed: output a reversed ed script
    -i, --ignore-case: ignore case differences in file contents
    -l, --paginate: pass output through 'pr' to paginate it
    -n, --rcs: output an RCS format diff
    -p, --show-c-function: show which C function each change is in
    -q, --brief: report only when files differ
    -r, --recursive: recursively compare any subdirectories found
    -s, --report-identical-files: report when two files are the same
    -t, --expand-tabs: expand tabs to spaces in output
    -u, --unified?: output NUM (default 3) lines of unified context
    -v, --version: output version information and exit
    -w, --ignore-all-space: ignore all white space
    -x, --exclude?: exclude files that match PAT
    -y, --side-by-side: output in two columns
documentation:
    command: |-
        [AI] `diff` is a command-line utility in Unix and Unix-like operating systems used to compare and show the differences between two files textually. It outputs the differences between files in various formats, including side-by-side, unidiff (context), or context (three-way). The basic syntax for using `diff` is:

        ```bash
        diff [OPTION]... FILE1 FILE2
        ```

        By default, it will display the differences between the files in the terminal. You can use options such as --side-by-side or --context to change the output format. For example, `diff --side-by-side file1 file2` will show the contents of both files side by side with their differences highlighted.
    flag:
        C: '[AI] `diff -C` is a command in Unix and Unix-like operating systems for comparing two files and displaying the differences between them. The `-C` option, also known as context diff, provides more context around the differences by showing a few lines of context before and after each changed line. This can help understand the impact of the changes in the files.'
        GTYPE-group-format: |-
            [AI] The `diff --git` command in Git is used to show the differences between two versions of a file. The `--GTYPE-group-format` option modifies how Git formats the output for binary and text files when there are grouped changes (additions, deletions, or both) between the revisions.

            The default format shows each hunk (a contiguous block of added or deleted lines) with its context before and after the change. With `--GTYPE-group-format`, Git groups these hunks under a label indicating the type of change: "A" for additions, "D" for deletions, and "M" for modifications. This can make it easier to understand the overall structure of the changes at a glance, especially when dealing with large or complex files.
        LTYPE-line-format: |-
            [AI] The `diff --L` (or `--loorist`) option in Git or other version control systems is used to produce a side-by-side format for displaying differences between files. The `--ltype-text` (or `--ll`) and `--line-numbers` options can be combined with it to add line type indicators and line numbers, respectively, making the output clearer and easier to understand.

            The `--LTYPE-line-format` is an extension to this format, which allows users to customize how specific types of differences (like added or deleted lines) are displayed. Users can define their own line formats by specifying a string argument for this option. For example, `--LTYPE-line-format='+b "%s" -e "%s"'` will display added lines in blue and deleted lines in red.
        U: '[AI] `diff -U` is a command in Unix-based systems used for comparing and displaying the differences between two text files. The `-U` option tells `diff` to use an unified context diff format, which means it shows the common context of the lines surrounding the changed lines, making it easier to understand the changes made. The output displays each file''s lines with an indication of added (+), deleted (-), or modified (~) content along with their corresponding context.'
        brief: '[AI] `diff --brief` is a command in version control systems, such as Git, for displaying the differences between two files or sets of files in a concise and summary format. It lists file names with only those that have been modified, deleted, or added, followed by the number of changes made to each file. This format saves space and is often used when dealing with large numbers of files. For example, `git diff --brief origin/master..HEAD` will display a list of modified, added, or deleted files between the current branch and the ''origin/master'' branch.'
        changed-group-format: |-
            [AI] The `--changed-group-format` option is a flag used with the `git diff` command in Git version control system. This flag modifies the output format of the diff command, specifically for the grouping of changed files and hunks (sections of changed code within a file).

            By default, Git groups changes based on the files they are made to and then further groups changes within each file by their location in the file. With `--changed-group-format`, you can customize how these groups are displayed. The format string argument specifies how the output for each group should be formatted.

            For example, if you set the format as "%s", Git will display the name of the changed file or group of files for each change group in the diff output. Other possible formats include "%h %s" to display the abbreviated commit hash and file name or "%C(auto)%h%d%C(reset) %s" for more complex customizations.

            In summary, `--changed-group-format` is a powerful option in Git's diff command that enables you to customize how the change groups are displayed in the output based on your preference or automation needs.
        color: '[AI] The `diff --color` command is a feature in version control systems like Git, which displays the difference between files or between the current and previous versions of a file with colored syntax highlighting for added clarity. It makes it easier to identify what has been added, modified, or deleted by displaying each change in a distinct color. This can be particularly useful when working on large codebases or complex text files, as it saves time by allowing the user to quickly spot the changes at a glance.'
        context: |-
            [AI] The `diff --context` command is a utility in Git for comparing and displaying the differences between two files or two versions of the same file. It provides a more enhanced view of the changes by showing the context, or the surrounding lines, around the differences.

            The output includes:

            1. A header with file names and versions being compared
            2. Context before and after the change (default is 3 lines before and 3 lines after)
            3. Added lines marked as "+" and deleted lines marked as "-"
            4. New context lines indented under additions, outdented under deletions
            5. A final empty line to separate the changes of different hunks.

            This format helps to understand the meaning and impact of each change more effectively when reviewing or resolving merge conflicts.
        ed: '[AI] `diff --ed` is a Unix/Linux command used to compare and display the differences between two text files. The `--ed` option puts the output in the ed script format, which allows the user to easily apply the changes using the ed editor. Each line starting with ''+'' or ''-'' represents an addition or deletion respectively, while lines without markers indicate changes within the lines. The context of the differences can be controlled by specifying a number after `--ed`. For instance, `diff --ed file1 file2 > patchfile` will generate a patch file (patchfile) that contains the differences between file1 and file2.'
        exclude: '[AI] The `diff --exclude` command is a utility in version control systems, such as Git, for comparing and showing the differences between files. The `--exclude` option allows you to specify one or more patterns to exclude from the comparison. This means that any file or directory matching the given pattern will be ignored during the diff process. It can be useful when dealing with large projects where certain files or directories always remain unchanged and clutter the output of the `diff` command. For example, `diff --exclude=''*.log'' file1 file2` will ignore any differences between files with a ''.log'' extension when comparing `file1` and `file2`.'
        exclude-from: '[AI] The `diff --exclude-file` or `--exclude-from` option in Git or other version control systems is used to exclude specific files or patterns from a diff comparison. This means that when running a diff command between two revisions, certain files or directories will not be included in the output. The file containing the exclusion list should be provided as an argument with `--exclude-from` and must exist beforehand. It can contain one exclusion pattern per line, with paths relative to the working directory. This option is particularly useful for ignoring common, unchanged files or directories across multiple revisions.'
        expand-tabs: '[AI] `diff --expand-tabs` is a command used in version control systems, such as Git, to compare and show the differences between two files. The `--expand-tabs` option expands all tabs in the output to be equal to 8 spaces each for better readability when viewing the differences. This can make it easier for developers to understand and apply changes when resolving merge conflicts or reviewing code modifications.'
        forward-ed: |-
            [AI] The `diff --forward-ed` command is a version control difference displayer in Git. It shows the differences between two files with forward-looking diff output (also known as "unified" or "context" format).

            The `--forward` option displays only forward-looking differences, meaning it shows changes that have been added or modified in the second file compared to the first one. The `--ed` option enables the external diff editor to be used for the conflict resolution. When a merge conflict occurs, this option opens the conflicted files in an external editor for manual editing before committing the changes.
        from-file: '[AI] The `diff --from-file` command is a utility in version control systems, such as Git, that shows the differences between two files with the same name but possibly different content. Its main purpose is to highlight the changes made between the current file and a specified file (the "from-file"). It does not make any changes to the files, it only displays the differences for review. The output can be in various formats like unified format or context format.'
        help: |-
            [AI] The `diff --help` command is a part of GNU Diffutils, which is used to compare and show the differences between two files or directories. When you run `diff --help`, it displays the help message that explains various options and usage for this utility. Here's a brief summary of the help message:

            * `diff` compares files line-by-line or character-by-character, showing the differences between them.
            * The main options are:
              * `--brief` or `-b`: Display only a summary of differences.
              * `--context` or `-c`: Show context (surrounding lines) for each difference.
              * `--side-by-side` or `-y`: Display differences side by side.
              * `--ignore-blank-at-eol` or `-B`: Ignore blank lines at end of files when comparing.
              * `--ignore-case` or `-i`: Ignore case differences.
              * `--label` or `--file-identifier-prefix`: Add a label to each file name for clarity.
            * Additional features include handling binary files, merging changes, and the ability to compare directories recursively.
        horizon-lines: '[AI] The `diff --horizontal-lines` command is a tool used in version control systems, such as Git, to compare and show the differences between two files or sets of text. The `--horizontal-lines` option adds a line indicating which lines have been added, modified, or deleted in each file. This makes it easier for users to identify what has changed between the two versions of the file. In essence, it provides a more visually clear representation of differences by adding distinctive horizontal lines.'
        ifdef: |-
            [AI] The `diff --ifdef` command is a difference finding tool in Git, specifically used to show changes between two files with a focus on tracking modifications made to specific ifdef (conditional compilation) directives.

            When you run `diff --ifdef old-ifdef new-ifdef file1 file2`, it will display the differences only for lines that include the specified `old-ifdef` and `new-ifdef` in files `file1` and `file2`. This is particularly useful when working on large codebases, where focusing on ifdef changes can help identify conditional compilation differences more effectively.
        ignore-all-space: '[AI] The `diff --ignore-all-space` command is a comparison tool in Git that shows the differences between two files or sets of files. The `--ignore-all-space` option tells diff to ignore any whitespace differences when comparing lines, effectively treating all white space as invisible during the comparison process. This can be useful when dealing with text files where formatting, such as indentation or trailing spaces, may differ between versions but should not affect the meaning of the content.'
        ignore-blank-lines: '[AI] The `diff --ignore-blank-lines` command is a comparison tool in Unix and Git that shows the differences between two files. With the `--ignore-blank-lines` option, it ignores blank lines when displaying the differences. This can be useful when comparing configuration files or code where blank lines may not indicate changes but are instead used for formatting purposes.'
        ignore-case: '[AI] The `diff --ignore-case` command is a utility in version control systems, such as Git, that compares and shows the differences between two files. The `--ignore-case` option tells diff to ignore case differences when comparing files. This means that differences caused only by capitalization or letter casing will be ignored, allowing users to focus on the actual changes in the content.'
        ignore-file-name-case: '[AI] `diff --ignore-file-name-case` is a command in version control systems, such as Git, to compare and show the differences between two files. The `--ignore-file-name-case` option tells diff to ignore differences in file name capitalization when determining what parts of the files have changed. This means that files named "File1.txt" and "file1.txt" will be considered as the same file by the diff command, and only differences in their contents will be shown.'
        ignore-matching-lines: '[AI] The `diff --ignore-matching-lines` command is a feature in Git and other version control systems for comparing files. It ignores differences between lines that match a specific pattern, as defined by a regular expression, across the two files being compared. This can be useful when dealing with files where certain common lines or sections should not affect the comparison result. By default, `diff` highlights added, deleted, and modified lines, but with this option, only unmatched lines are displayed. The option takes a regular expression argument, allowing you to customize which matching lines to ignore.'
        ignore-space-change: '[AI] The `diff --ignore-space-change` command is a feature in Git and other version control systems that modifies the output of a diff to ignore changes in the number of spaces between columns, while still showing differences in the addition or removal of lines and changes to the content itself. This can be useful when working with files where white space formatting may vary but the semantic meaning of the text remains the same.'
        ignore-tab-expansion: '[AI] The `diff --ignore-tab-expansion` is a command used in version control systems, particularly Git, to compare and show the differences between two files. The `--ignore-tab-expansion` flag tells Git to ignore changes caused by text editors expanding tabs into spaces while editing files. This helps ensure that tab versus space formatting differences are not incorrectly marked as modifications when they are just a matter of preference.'
        ignore-trailing-space: '[AI] The `diff --ignore-trailing-space` command is a comparison tool in Git and other version control systems. It''s used to show the differences between two files or sets of files. This specific option, `--ignore-trailing-space`, instructs diff to ignore trailing whitespace when displaying differences. Trailing whitespaces are spaces at the end of lines that do not affect the meaning of the text but can cause issues when merging changes. By ignoring them during comparison, it makes the merge process smoother and reduces unnecessary conflicts.'
        initial-tab: '[AI] The `diff --initial-tab` command is a Unix/Linux utility used to compare and show the differences between two files or directories. The `--initial-tab` option specifically sets the tab character as the common indentation for both files being compared, ensuring consistent tab alignment when viewing the differences. It''s particularly useful when comparing configuration files or code files with similar indentation structures.'
        label: '[AI] The `diff --label` command is a utility in Git for comparing and showing the differences between two files or two versions of the same file. The `--label` option is used to specify custom labels for each side of the diff, making it easier to identify which parts correspond to which files. This can be useful when working with multiple branches or merging code changes. For example, `diff --label A:old_file --label B:new_file old_file new_file` will show the differences between `old_file` and `new_file`, with the labels "A" and "B" appearing next to their respective lines.'
        left-column: '[AI] The `diff --left-column` command is a version control comparison tool in Git. It shows the differences between two files or two versions of the same file in a unidirectional left-aligned format, with the older version displayed on the left side of the output. This layout makes it easier to review and understand the changes made between the two revisions.'
        line-format: |-
            [AI] The `diff --line-format` option in Git or other version control systems specifies how the output of a `diff` command should be formatted when showing the differences between two files.

            The default format is `context`, which shows the context of the changes, including the surrounding lines before and after the changed lines. However, you can customize this format by using various options. For example:

            * `unified` (similar to `context`, but with a configurable number of context lines)
            * `patch` (shows the patch format as used in the UNIX `diff` command)
            * `numbers` (only shows line numbers where changes occurred)

            For instance, if you want to see only the line numbers where changes occurred and suppress the context, you can use:
            ```bash
            git diff --line-format=numbers HEAD^ HEAD
            ```
        minimal: '[AI] `diff --minimal` is a command used in version control systems, primarily Git, to show the differences between two files in a minimal and readable way. The output consists of only the lines that have been added or deleted, with no context or unnecessary whitespace. It''s particularly useful for identifying small changes between files while keeping the output clean and easy to understand.'
        new-file: '[AI] The `diff --new-file` command is a utility in version control systems like Git, used to show the differences between two files. When this specific option is used, it produces an output where a new file is shown on the right side of the comparison, indicated by ">>>". The left side represents the existing file. This option helps identify and merge changes when introducing a new file into your project.'
        new-group-format: '[AI] The `diff --new-group-format` is a format option in GNU Diff to change how new groups (e.g., new files or new contexts) are displayed when comparing two sets of files. Instead of prepending a ''+'' or ''-'' sign followed by the file name for additions and deletions respectively, this option groups changes in a more readable way using a custom format. The exact format can be specified using `--new-group-format` followed by a format string. For instance, `--new-group-format=''%B %h''` displays the branch name (if under Git) and the file hash for new files. This option is especially useful when dealing with large or complex differences where grouping new elements can make the output more manageable.'
        new-line-format: |-
            [AI] The `diff --new-file-format` option in Git is used when comparing files with different line ending types, such as LF (Unix) and CRLF (Windows). With this option, the output of `git diff` will be formatted in a way that allows both types of line endings to be correctly displayed and merged.

            Instead of showing the differences between lines as additions (+) or deletions (-), the output will include context lines before and after the changes, with each line ending type preserved. This makes it easier to merge changes between files with different line ending types without introducing unwanted line ending inconsistencies.
        no-dereference: '[AI] The `diff --no-dereference` command is a utility in Git for comparing and showing the differences between two directories or files. The `--no-dereference` option prevents `diff` from following symbolic links when comparing directories, keeping the comparison at the link level rather than the content level of the linked files. This can be useful when comparing directories that contain symbolic links and you want to see the differences in the links themselves rather than the contents they point to.'
        no-ignore-file-name-case: '[AI] The `diff --no-ignore-file-name-case` command is a utility in Git and other version control systems that shows the differences between two files or directories. The `--no-ignore-file-name-case` option disables case sensitivity when comparing file names during the difference analysis. This means that files with different capitalization but identical content will be identified as different files, whereas without this option, Git would consider them as the same file.'
        normal: '[AI] `diff --normal` is a command used in version control systems, such as Git, to compare and show the differences between two files. The `--normal` option specifies that the output should be displayed in a conventional, human-readable format with added context lines for easier understanding of the changes made. It''s often referred to as the "default" or "unified" format, where each hunk (a chunk of changes) is prefixed with a header containing information about the location and number of lines affected.'
        old-group-format: '[AI] The `diff --old-group-format` option is used with the diff command in version control systems, such as Git, to customize the output format of a diff. Specifically, it changes how the group headers in the old file''s context are displayed. Instead of the default format ("------- file1.ext -------"), it sets the group header to match the format used for new files, typically including author, date, and commit message information. This can make the output of a diff more consistent when comparing multiple files or commits.'
        old-line-format: '[AI] The `diff --old-line-format` option is used in Unix diff commands to preserve the format of lines in the input files being compared, especially useful when dealing with text files with specific line ending formats (like Windows text files with CRLF line endings). With this option, the output of `diff` will keep the same format for each line between the old and new versions. This way, when applying the patch generated by `diff`, the target file''s formatting will be preserved.'
        paginate: '[AI] `diff --paginate` is a command in Git or other version control systems, which is used to display the difference between two files in a human-friendly format. The `--paginate` option causes the output to be sent to a pager (such as less or more), making it easier to scroll through large differences and review changes line by line. The primary function of this command is to present the differences between files in an organized and manageable way.'
        palette: |-
            [AI] The `diff --palette` command is a feature of GNU Diff, a tool used to compare and show the differences between two files. This option generates a text-based palette of colors representing the types of changes in a diff output.

            When used, each type of change (insertions, deletions, text modifications) is highlighted with a specific color, making it easier for humans to visually identify and understand the differences between the two files. The actual colors used depend on the terminal's support for ANSI escape codes.
        rcs: '[AI] The `diff --rcs` command is a version control comparison command used in Git and other systems. The `--rcs` option stands for three-way merge with repository as third input. This means that `diff` compares two branches or commits, and also brings in the common ancestor version to perform a three-way merge. This is useful when merging branches that have both local changes and remote changes. The output is a merged file that can be used to resolve any conflicts.'
        recursive: '[AI] The `diff --recursive` command is a utility in version control systems, such as Git, for comparing and showing the differences between two directories and their subdirectories recursively. When used with the `--recursive` option, `diff` will compare not only files but also sub-directories, handling them recursively, meaning it will apply the comparison operation to each sub-directory separately and display any differences in a tree format. This is useful when comparing large or complex projects with multiple levels of subdirectories.'
        report-identical-files: '[AI] The `diff --report-identical-files` command is a utility from the GNU Difftools used to compare and show the differences between two files or directories. When this specific option is used, diff will only output the names of the files that are identical in both input sets without showing any difference. This can be useful when dealing with large sets of files where most remain unchanged between comparisons.'
        show-c-function: '[AI] The `diff --show-c-function` command is a way to display the difference between two files using the diff utility with a context of showing functions in the source code. It presents the added, deleted, or modified lines in their original context within their respective functions. This is particularly useful when comparing programming code files to identify changes at a granular function level.'
        show-function-line: '[AI] `diff --show-functions` is a command in Git or other version control systems that provides a more detailed output when comparing files. The `--show-function-line` option refines this further by only showing the lines that contain function declarations or calls, making it easier to identify changes related to functions between two file versions.'
        side-by-side: '[AI] `diff --side-by-side` is a command used in version control systems, such as Git, to display the differences between two files in a side-by-side format. This means that the output will show the corresponding lines or sections of each file next to one another, making it easier to visually compare and understand the changes made. It can be particularly useful when merging branches or resolving conflicts.'
        speed-large-files: '[AI] `diff --speed-large-files` is a command used in version control systems like Git, to show the differences between two files or two versions of a file. The `--speed-large-files` option is specifically designed to handle large binary files more efficiently. Instead of comparing the entire content of the files, it compares the file metadata and checks for blocks that have changed. This method significantly reduces the time required to compare large binary files without sacrificing accuracy.'
        starting-file: '[AI] The `diff --starting-file` command is a utility in version control systems like Git, used to show the differences between two files with a common ancestor. By providing the option `--starting-file`, you indicate that the first file given as an argument should be considered as the base or reference file against which the second file''s changes are compared. This can help identify exactly what has changed in the second file when dealing with conflicts or merging branches.'
        strip-trailing-cr: '[AI] The `diff --strip-trailing-whitespace` command is a difference utility in Git and other version control systems, used to show the differences between two files. The `--strip-trailing-whitespace` option removes trailing whitespaces at the end of lines during the comparison process. This can be helpful when working with text files and ensuring consistency across different versions.'
        suppress-blank-empty: |-
            [AI] The `diff --suppress-blank-empty` command is a version control difference detector used in Git and other systems. It's designed to highlight the differences between two files, showing what has been added, removed, or changed.

            The `--suppress-blank-empty` option specifically suppresses the output of empty lines that are either added or deleted. Empty lines often don't contain meaningful changes and can make the diff output cluttered and harder to read. So, this flag helps keep the diff output more focused on the actual code changes.
        suppress-common-lines: '[AI] The `diff --suppress-common-lines` command is a feature of Git and other version control systems that compares two files and shows the differences between them. The `--suppress-common-lines` option suppresses the output of lines that are common to both files, i.e., lines that have not been modified. This can be useful when dealing with large files where most of the content remains unchanged but specific sections need to be compared and edited. By hiding the common lines, the output becomes more focused on the changes, making it easier to identify and address the differences between the files.'
        tabsize: '[AI] The `diff --tabsize=<tabs>` command is used in Unix-based systems to compare two files and display the differences between them. The `--tabsize` option sets the number of spaces a tab represents in the output, with the default being typically eight. This helps ensure consistent formatting when merging changes made to different versions of a file.'
        text: '[AI] `diff --text` is a command-line utility used to compare and show the differences between two text files. The `--text` option specifies that it should treat both files as text files, displaying the differences in an easy-to-read side-by-side format with added context lines for better understanding of the changes.'
        to-file: '[AI] `diff --to-file` is a command in version control systems like Git, which compares two files and displays the differences between them as if one file was the desired output of modifying the other. The `--to-file` option tells diff to produce the output in the context diff format that can be applied with `git apply`, preserving the original file metadata (author, commit message, etc.) instead of just showing the differences as text.'
        unchanged-group-format: |-
            [AI] The `--unchanged-group-format` flag is an option for the `git diff` command in Git version control system. This flag modifies the output format of the diff, specifically for groups of files or lines that have not been changed between two commits or branches.

            By default, Git's `diff` command shows changes side-by-side, with unchanged parts suppressed unless requested with an additional option. With the `--unchanged-group-format` flag, Git groups and displays all unchanged lines together, making it easier to identify which files or sections haven't been modified between the compared revisions.

            The format string argument, if provided, is used to specify how the unchanged parts should be displayed in the diff output. It consists of placeholders like `%h`, `%s`, and `%b` that are replaced with hashes, filenames, and the actual content, respectively, during output generation.

            Here's an example format string for showing the filename only:
            ```
            -- %s --
            ```
            This will display a line containing just the filename when the file is unchanged between the revisions.
        unchanged-line-format: '[AI] The `--unchanged-line-format` flag is an option used with the `diff` command in version control systems like Git. It specifies how unchanged lines should be displayed during a diff comparison. By default, unchanged lines are not shown at all in the output. However, when this option is set, unchanged lines will follow the format specified by the user. This can be useful for maintaining a consistent output format or for easier review of the diff results. The format string can include placeholders for various types of information such as line numbers and context. For example, `%d %l` would display the delete flag (%d) followed by the unchanged line (%l).'
        unidirectional-new-file: |-
            [AI] The `diff --unified=new-file` command is a way to show the differences between two files or directories using the Unified Diff format. It highlights the changes made in a file by marking the added, deleted, and modified lines with indicators like "+" for additions, "-" for deletions, and ">" or "<" for context lines moved.

            However, when dealing with new files that do not exist in one of the compared versions, `diff` may behave unexpectedly and not show any output related to those new files. To address this issue, the `--unidirectional-new-file` option can be used. It makes `diff` treat unmatched new files as if they were added in the forward direction only (from the second file to the first one), showing them as new files with a "???" prefix in the output. This helps to identify and compare the contents of newly created files more effectively.
        unified: '[AI] `diff --unified` is a command in version control systems like Git, used to show the differences between two files or two versions of the same file. The `--unified` option formats the output as a unified context diff, which means it displays the differences with a common context (usually the first few lines) that shows where each change occurred. This makes it easier to understand and apply the changes manually if needed.'
        version: '[AI] `diff --version` is a command used in Unix-like operating systems to display the differences between two files. The `--version` option is not a common usage; instead, it''s used to check the version or the installed Git for Git diff. When you run `diff --version`, it returns the version information of the diff utility itself, providing details such as the name, version number, and other relevant information.'
        width: '[AI] The `diff --width` command is a utility in version control systems, primarily Git, for comparing and displaying differences between two files. The `--width` option sets the maximum width of the output to fit within a specific terminal window size. It helps ensure that the diff output fits nicely on the screen without requiring horizontal scrolling.'
