# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bundle
description: Bundle module and dependencies into single file
flags:
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --watch: 'UNSTABLE: Watch for file changes and restart process automatically'
    -c, --config=: Load configuration file
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno bundle` is a command provided by Deno, a modern JavaScript runtime, used for bundling and transpiling TypeScript code into JavaScript with deno''s built-in ES Module support. It generates an optimized single file or directory structure from your input files, ready for deployment. This simplifies the process of building an application in Deno and ensuring it runs efficiently.'
    flag:
        cert: '[AI] The `deno bundle --cert` command is a utility provided by Deno, a modern and secure TypeScript runtime. This specific command is used for bundling TypeScript projects into a single file that can be run in the Deno environment. The `--cert` flag is an option added to this command for specifying a PEM-encoded X.509 certificate file as input. The purpose of providing a certificate with the bundle command is to enable secure HTTPS communication when running the bundled script, particularly useful for producing web applications that require encryption.'
        config: '[AI] `deno bundle --config` is a command used in Deno, a modern and secure TypeScript runtime. The `bundle` sub-command is responsible for bundling multiple TypeScript modules into a single executable file. The `--config` flag instructs Deno to use a specific configuration file named `deno.jsonc` or `deno.mts`, where project settings such as input files, output format, and other options can be defined. This flag allows for customizing the bundling process according to the needs of your Deno project.'
        import-map: |-
            [AI] The `deno bundle` command is a tool provided by Deno, a modern and secure runtime for JavaScript and TypeScript. It's used to generate bundled JavaScript output from TypeScript files.

            The `--import-map` option creates an import map file along with the bundled output. An import map is a JSON file that records how the modules were imported in the original source code, enabling runtime module resolution for dynamic imports and external dependencies. This is particularly useful when dealing with projects consisting of multiple entry points or when using different build configurations.
        lock: '[AI] `deno bundle --lock` is a command provided by Deno, a modern and secure TypeScript runtime. This command bundles an application into a single executable file with its dependencies locked at specific versions. The `--lock` flag ensures that the output file will contain the exact dependencies and their versions specified in the project''s `deno.jsonc` or `package.json` file, thus ensuring consistency across different environments.'
        lock-write: '[AI] `deno bundle` is a Deno command for bundling TypeScript projects into standalone JavaScript files with their dependencies. The `--lock-write` flag instructs Deno to generate or update the `deno.lock` file, which records the exact versions of packages used during the build process and helps ensure consistency across builds.'
        no-check: '[AI] `deno bundle` is a command-line tool in Deno, a modern JavaScript runtime. The `--no-check` flag is an option used to bypass type checking during bundling process. It means that the Deno type system analysis will not be performed before generating the output JavaScript file(s). This can save time when working on larger projects or when experimenting with code, but it may introduce potential type errors into the output code.'
        no-remote: '[AI] `deno bundle` is a command-line tool in Deno, a modern JavaScript runtime. The `--no-remote` option disables remote fetches during bundling. In other words, it only uses local files for building the application instead of downloading any dependencies from online registries like npm or Deno''s own registry (deno.land). This can be useful when working offline or when developing an application with all necessary dependencies already included in the project directory.'
        reload: |-
            [AI] `deno bundle --reload` is a command used in Deno, a modern and secure TypeScript runtime. This command performs two main tasks: bundling and development server reloading.

            1. Bundling: It compiles and packages multiple TypeScript files into a single JavaScript file (or multiple files if desired), including their dependencies. The output is optimized for production usage.

            2. Development Server Reloading: After the bundle is created, `--reload` starts the Deno development server which continuously monitors your project's source files for changes. When it detects an update, it automatically recompiles and restarts the application without requiring a separate build command. This significantly streamlines the development process, reducing time spent on manual builds.
        watch: '[AI] `deno bundle --watch` is a command in Deno, a modern JavaScript runtime. It bundles and transpiles TypeScript or JavaScript files using Deno''s ES modules system. The `--watch` flag enables the live reloading feature, which automatically re-bundles and reloads the browser when file changes are detected. This allows for efficient development of larger projects by minimizing the time spent on manual recompilation and refreshing the page.'
