# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: log
description: Show the `git log` for <formula> or <cask>, or show the log for the Homebrew repository if no formula or cask is provided
group: main
flags:
    --cask: Treat all named arguments as casks.
    --debug: Display any debugging information.
    --formula: Treat all named arguments as formulae.
    --help: Show this message.
    --max-count: Print only a specified number of commits.
    --oneline: Print only one line per commit.
    --patch: Also print patch from commit.
    --quiet: Make some output more quiet.
    --stat: Also print diffstat from commit.
    --verbose: Make some output more verbose.
    "-1": Print only one commit.
documentation:
    command: '[AI] The `brew log` command is used with Homebrew, a popular package manager for macOS, to view the installation history of packages and their corresponding versions. It displays a list of all previously installed Homebrew packages along with the date, version number, and installation or removal reason. This can be helpful in tracking down when a particular package was installed or to revert to a previous version.'
    flag:
        "1": '[AI] The command `brew log -1` in Homebrew (a popular package manager for macOS) retrieves and displays the details of the most recent installation or update event in the Homebrew logs. These logs keep track of all the packages installed, their versions, and the time and date of the installation or update. This command can be useful for troubleshooting, keeping a record of past installations, or replicating specific installations.'
        cask: '[AI] `brew log --cask` is a command used with Homebrew, a popular package manager for macOS. This command displays the installation history of Cask packages, which are packages that install and manage applications, not just command line tools. The output shows when each package was installed or updated, along with its name and version. It helps in tracking changes to installed applications managed by Homebrew.'
        debug: '[AI] The `brew log --debug` command is used in Homebrew, a popular package manager for macOS, to generate debug output when running certain brew commands. This can be helpful for troubleshooting issues or understanding what a specific command does in detail. When you run this command followed by another command (e.g., `brew install <package> --debug`), Homebrew will print extensive information about the various steps it takes to process and execute that command, making it easier to diagnose any potential problems.'
        formula: '[AI] `brew log --formula` is a command used with Homebrew, a popular package manager for macOS. This command generates a log of all the formulae (Homebrew''s term for recipes) that have been installed or updated in the system. The output shows details like the formula name, author, homepage URL, and version number. It helps in tracking and managing software packages installed via Homebrew.'
        help: |-
            [AI] `brew log --help` is a command used in Homebrew, a popular package manager for macOS. This command displays detailed help information about the `brew log` sub-command.

            `brew log` itself is used to view a history of all Homebrew installations and updates on your system. The `--help` option provides information on how to use this command effectively, including available options such as `--on-screen`, `--quiet`, or `--json`. It also explains the output format and provides examples for common usage scenarios.
        max-count: '[AI] The `brew log --max-homebrew-count N` command is used in Homebrew, a popular package manager for macOS, to view the installation history of Homebrew and its installed packages. The `--max-homebrew-count N` option limits the number of Homebrew installations displayed to `N`. By default, it displays the 10 most recent installations.'
        oneline: '[AI] `brew log --oneline` is a command used in Homebrew, a popular package manager for macOS. This command displays a list of installed packages and their versions in a single line format. It allows users to quickly check the current state of their Homebrew installations without having to parse multiple lines for each package.'
        patch: '[AI] `brew log --patch` is a command used with Homebrew, a popular package manager for macOS. This command displays the patch, or difference between the current and previous version, of a Homebrew formula. It can be useful when you want to understand what changes were made in an update before deciding whether to apply it. By default, it shows the patch for the most recently installed or updated formula. The patch is displayed in the terminal using a diff-like format.'
        quiet: '[AI] The `brew log --quiet` command is a function in Homebrew, a popular package manager for macOS. This command is used to display a quiet or minimal output of the brew logs, which are records of past Homebrew installations, upgrades, and removals. By using the `--quiet` flag, only essential information will be displayed without any extra messages. This can be helpful when running multiple commands in a script or looking for specific log entries with less interference from other output.'
        stat: '[AI] `brew log --stat` is a command used in Homebrew, a popular package manager for macOS. This command generates a statistics report based on the installation and update history of Homebrew packages. The output displays the number of installations, upgrades, and removals for each unique formula (package name) over a specified time range or since the beginning. This information can be useful for understanding usage trends and managing package versions in a Homebrew environment.'
        verbose: '[AI] `brew log --verbose` is a command used in Homebrew, a popular package manager for macOS. This command displays a verbose log of Homebrew''s recent activities, including installed packages, updates, and errors if any. It provides detailed information about each action, such as the exact commands executed, installation paths, and error messages (if applicable). This level of detail helps in troubleshooting and understanding what Homebrew has been doing behind the scenes.'
