# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: check-attr
description: Display gitattributes information
group: low-level helper
flags:
    --cached: use .gitattributes only from the index
    --source=: which tree-ish to check attributes at
    --stdin: read file names from stdin
    -a, --all: report all attributes set on file
    -z: terminate input and output records by a NUL character
documentation:
    command: '[AI] `git check-attr` is a Git command used to manually check or modify the attributes (also known as file modes) of specific files in your Git repository. These attributes include read-only, executable, and other permissions. The basic syntax is: `git check-attr [--][<file>…] [<new-attribute>…]`. You can use it to set or unset file attributes. For example, `git check-out -- <file> -- <new-attribute>` would unset the specified attribute on the given file.'
    flag:
        all: |-
            [AI] `git check-attr --all` is a Git command used to display or modify the file attributes (also known as file permissions or attributes) for all files in the current repository. The `--all` option is used to apply the operation to every file, both tracked and untracked, in the current repository.

            This command allows you to view the current attributes of all files (using no arguments), or set/change the attributes using specific options like `--set-filemode=<perms>` to change file permissions, or `--set-bufsize=<size>=<buffer>` to set file buffers.

            In summary, `git check-attr --all` is a powerful command for managing file attributes across the entire Git repository.
        cached: '[AI] `git check-attr` is a Git command used to manage file attributes (also known as file permissions or file flags) in the index, before committing changes. The `--cached` option specifies that you want to operate on the files as they are staged for the next commit. By using `git check-attr --cached <file>`, you can view, change, or remove the file attributes (e.g., read-only flags) for the specified file in the index before committing them to the repository.'
        source: '[AI] `git check-attr` is a Git command used to manipulate and inspect file attributes, such as permissions and the "git" attribute. The `--source` option is used with this command to compare the current attribute settings of a file or a directory with those recorded in the Git repository. This allows you to see the differences between the current and previous state of the attributes, making it useful for comparing changes made to file attributes over commits.'
        stdin: |-
            [AI] `git check-attr` is a Git command used to manage and inspect named file attributes, also known as "git attributes". The `--stdin` option is an input argument that allows you to read the attributes from standard input instead of specifying them in the command line. This can be useful when processing large numbers of attributes or when integrating with other scripts or tools.

            The full command, `git check-attr --stdin`, reads git attributes data from standard input and displays the current values for each attribute, allowing you to manipulate and update git file attributes in a flexible way.
        z: '[AI] `git check-attr` is a Git command used to manage file attributes, such as making a file read-only or setting up a custom attribute. The `-z` option is used to clear or unset an attribute for one or more files. When using this option, Git does not modify the content of the files but only updates the index with the change in attribute status. This command does not affect the working directory or the current branch unless you also use a commit to make the changes permanent.'
