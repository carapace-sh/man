# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: foreach
description: Run a command on all workspaces
flags:
    --exclude=: An array of glob pattern idents; matching workspaces won't be traversed
    --from=: An array of glob pattern idents from which to base any recursion
    --include=: An array of glob pattern idents; only matching workspaces will be traversed
    --no-private: Avoid running the command on private workspaces
    --since: Only include workspaces that have been changed since the specified ref.
    --topological-dev: Run the command after all workspaces it depends on (regular + dev) have finished
    -A, --all: Run the command on all workspaces of a project
    -R, --recursive: Find packages via dependencies/devDependencies instead of using the workspaces field
    -i, --interlaced: Print the output of commands in real-time instead of buffering it
    -j, --jobs=: The maximum number of parallel tasks that the execution will be limited to; or unlimited
    -p, --parallel: Run the commands in parallel
    -t, --topological: Run the command after all workspaces it depends on (regular) have finished
    -v, --verbose: Prefix each output line with the name of the originating workspace
documentation:
    command: '[AI] `yarn workspaces foreach` is a Yarn command used to iterate over all the packages in a Yarn workspace and run a script or command in each package directory. The general syntax is `yarn workspace foreach <script>`. The `<script>` can be any valid npm script, such as `test`, `build`, or a custom script. This command is useful for performing consistent tasks across multiple packages within a Yarn workspace.'
    flag:
        all: |-
            [AI] `yarn workspaces foreach --all` is a Yarn command used in multi-package projects, also known as monorepos. This command allows you to run a script or command across all the packages within a Yarn Workspace simultaneously.

            When you use `--all`, it means that the command will be executed for every package listed in your `package.json` files under `workspaces:` key, regardless of their individual dependencies and build configurations. It's an efficient way to perform tasks like version updates, testing, or linting across all packages at once.
        exclude: '[AI] `yarn workspace foreach --exclude` is a command used in Yarn, a popular JavaScript package manager. This command allows iterating through all projects within a Yarn workspace and running a specified script or command, except for those listed under the `--exclude` option. The `--exclude` flag accepts a list of workspace names or project globs as arguments to exclude from the iteration process. This can be useful when you want to perform an action across all projects in your workspace, but exclude certain ones that may have different requirements or should not be affected by the command.'
        from: '[AI] `yarn workspaces foreach --from` is a command used in Yarn, a popular JavaScript package manager. This command allows you to iterate over all the projects in a Yarn workspace and apply a script or command to each one. The `--from` option specifies the starting point for the iteration. If you use `--from start`, the iteration will begin with the root project, moving through each nested project in a depth-first order. If you use `--from end`, the iteration will begin with the last (deepest) project and move backwards to the root project. In both cases, all projects within the workspace are visited once.'
        include: '[AI] `yarn workspaces foreach --include` is a command used in Yarn, a popular JavaScript package manager. This command allows iterating through all packages within a Yarn workspace and applying a given command to each of them. The `--include` option specifies a list of package names or globs that determine which packages the command will be applied to. The command itself can be any valid Yarn command, such as installing dependencies (`install`), running tests (`test`), or building the project (`build`).'
        interlaced: |-
            [AI] `yarn workspaces foreach --interlaced` is a command used in Yarn, a popular JavaScript package manager. This command runs a script or command across multiple projects within a Yarn workspace concurrently with interleaved parallelism.

            In other words, it processes one project after another, but not strictly one at a time. Instead, it starts the next project while the current one is still running, thus taking advantage of available CPU cores for maximum efficiency. This can significantly reduce build times when working on larger monorepos.
        jobs: '[AI] `yarn workspaces foreach --jobs` is a command used in Yarn, a popular JavaScript package manager. It allows running a script or command in parallel across multiple projects within a Yarn workspace. The `--jobs` flag specifies the number of jobs to run concurrently. This can be useful for performing tasks such as testing or building projects in multiple packages at once, increasing productivity and reducing overall build time.'
        no-private: '[AI] `yarn workspaces foreach --no-privates` is a command used in Yarn, a popular JavaScript package manager. This command iterates through all projects within a Yarn workspace and runs a given script or command with the `--no-private` flag. The `--no-private` flag ensures that only packages from external registries (not from local or private registries) are installed during the process, providing better control over dependencies.'
        parallel: |-
            [AI] `yarn workspaces foreach --parallel` is a command used in Yarn, a popular JavaScript package manager. This command allows you to run a script or command in parallel across all projects in a Yarn workspace. The `--parallel` option enables the execution of multiple tasks simultaneously to improve build time efficiency.

            The `foreach` part of the command specifies that the script or command will be applied to each project within the workspace individually. For example, you can use it to run tests across all projects by having a test script in each project and then using this command to execute that script for each project.
        recursive: '[AI] `yarn workspaces foreach --recursive` is a command used in Yarn, a popular JavaScript package manager. This command allows you to run a script across all projects within a Yarn workspace (a collection of related projects) recursively. The `--recursive` flag ensures that the script is executed not only in the root project but also in all sub-projects located at any depth level within the workspace. This can be useful for performing consistent tasks, such as linting or testing, across your entire codebase.'
        since: '[AI] `yarn workspaces foreach --since` is a command used in Yarn, a popular JavaScript package manager. This command allows you to iterate over every workspace (independent projects within a single Yarn installation) that has experienced a change since a specific commit or tag in the version control system. The `--since` option specifies the commit or tag reference. It can be helpful for running tests, building projects, or performing other tasks across multiple related projects in a monorepo setup.'
        topological: |-
            [AI] `yarn workspaces foreach --topological` is a command used in Yarn, a popular JavaScript package manager. This command iterates through all the packages in a multi-package project (Yarn Workspaces) following the topological order of their dependencies.

            By using the `--topological` option, you ensure that the order of iteration respects the dependency graph. This is useful when performing an operation across multiple packages that might have circular or transitive dependencies. The command applies a given script to each package in the correct order, ensuring consistency and avoiding potential conflicts due to unmet dependencies.
        topological-dev: '[AI] `yarn workspaces foreach --topological-dev` is a command used in Yarn, a popular JavaScript package manager. This command allows you to execute a script or command across all the projects in a Yarn workspace with a top-down dependency order. The `--topological-dev` flag ensures that only the direct dependencies of each project are considered for execution. In other words, it processes projects based on their position in the dependency graph (topology), ensuring that a project''s devDependencies are executed before its peers that depend on them. This command is useful when you need to perform an operation across multiple projects in your workspace while considering and respecting their dependencies.'
        verbose: '[AI] `yarn workspaces foreach --verbose` is a command used in Yarn, a popular JavaScript package manager. This command iterates through every workspace (projects) in a multi-package project managed by Yarn and runs a specified command with increased output verbosity. The `--verbose` flag instructs the command to print detailed information about each step it takes during execution.'
