# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ll
description: List installed packages
flags:
    --depth=: depth to ge when recursing packages
    --json: output as json
    --link: output only packages that are linked
    --omit*=: omit dependency types
    --package-lock-only: only use the package-lock.json
    --unicode: output unicode characters
    --workspaces: Enable running a command in the context fo all workspaces
    -a, --all: show all outdated or installed packages
    -g, --global: operate in global mode
    -l, --long: show extended information
    -p, --parseable: output parseable results
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] The `npm ls` or `npm ll` command is used in Node.js projects to list the dependencies and their corresponding versions in the package tree. It shows a hierarchical view of all installed packages and their sub-dependencies, recursively, which can be helpful for understanding the project''s dependency structure.'
    flag:
        all: |-
            [AI] `npm ll --all` is a command used in Node.js package management with npm (Node Package Manager). This command is an alias for `npm ls --depth=infinity --recursive`.

            The `ll` shortcut stands for "long listing". The `--all` option makes npm list all packages in the current project and its subdirectories recursively, showing detailed information about each package including its version number, installation location, and dependencies.
        depth: '[AI] `npm ls --depth` is a command used in Node.js package management with npm (Node Package Manager). It recursively lists all the packages and their dependencies, showing the tree-like hierarchy up to a specified depth. The flag `--depth` followed by an integer specifies the maximum depth level to display. A depth of 0 shows only the current package and its direct dependencies; increasing the depth number will show more levels of nested dependencies.'
        global: '[AI] `npm ll --global` is a command used in Node.js package management with npm (Node Package Manager). The `ll` stands for "list" and `--global` option indicates that the list should include only globally installed packages. So, this command displays a tree-like output of the directory structure of all globally installed npm packages along with their dependencies.'
        json: '[AI] `npm ll --json` is a command used in Node.js package management with npm (Node Package Manager). This command displays a tree-like output of the project''s dependency structure in JSON format. It lists all installed packages, their versions, and the dependencies they in turn have. This can be helpful for analyzing the dependency structure of a Node.js project or for generating input for other scripts or tools that require this information in JSON format.'
        link: '[AI] `npm ll --link` is a command used in Node.js package management with npm (Node Package Manager). This command links packages at a specified depth in the directory tree, meaning it creates hard links between packages and their dependencies instead of installing new copies. This results in smaller disk usage and faster installation times for dependent packages that have not been modified. The `--link` flag enables creating symbolic links (on Unix-based systems) or hard links (on Windows) during the installation process. This command is useful when working on a large project with many interconnected dependencies, as it can help reduce disk space usage and improve build times.'
        long: '[AI] `npm ll --long` is a command used in Node.js package management with npm (Node Package Manager). The `ll` short for "list" is used to display tree-like listing of the project''s dependency tree. The `--long` flag increases the output verbosity, providing more detailed information about each dependency including its version number, install location, and size.'
        omit: '[AI] `npm ll --omit` is a command used in Node.js package management with npm (Node Package Manager). The `ll` stands for "long listing," which displays detailed information about installed packages and their dependencies. The `--omit` option filters out the node_modules directories from the output, making the listing cleaner and more concise.'
        package-lock-only: '[AI] The `npm ll --package-lock-file` command is used in Node.js package management with npm (Node Package Manager). This command, when run in a project directory with npm lock file presence, displays tree structure output of the packages and their versions based on the package-lock.json file. The `--package-lock-only` option limits the output to only show the packages and versions as recorded in the package-lock.json file without installing or modifying the project''s dependencies.'
        parseable: '[AI] `npm ll --parseable` is a command used in Node.js package management with npm (Node Package Manager). The `ll` (list) command is used to list packages and their dependencies, while the `--parseable` option makes the output machine-readable and easier for scripts to parse. This format includes detailed information about each package, such as its name, version, and dependencies, with columns aligned for easy processing by other tools or scripts.'
        unicode: '[AI] `npm ll --unicode` is a command used in Node.js package management with npm (Node Package Manager). The `ll` stands for "list" and is followed by the option `--unicode` to display filenames in Unicode format. This means that non-ASCII characters in file names will be displayed correctly without encoding issues. This command can help ensure consistency and readability, especially when working with projects containing files with internationalized or special characters in their names.'
        workspace: '[AI] `npm run ll --workspace` is a command used in Node.js projects managed with npm (Node Package Manager). It runs a script named `ll` (short for linting, a common practice to check code quality) across all projects listed in the `package.json` files within the current workspace using the `--workspace` option. This command is helpful when dealing with multi-package projects where different packages need specific linting configurations.'
        workspaces: '[AI] `npm run ll --workspaces` is a command used in Node.js projects with multiple packages managed by npm (Node Package Manager). The `--workspaces` option enables the management of multiple packages within a single root directory as a monorepo, allowing easy navigation and execution of commands across all packages using the Lockfile (package-lock.json or yarn.lock) generated by npm 5.2.0 or higher. The `ll` stands for "list" and displays information about the projects in the workspace, including their names, versions, and statuses.'
