# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: sdkmanager
description: Android SDK manager
flags:
    --channel?: Include packages in channels up to <channelId>
    --help: show help
    --include_obsolete: show obsolete packages in the package listing
    --install: installs or updates packages
    --licenses: show and offer the option to accept licenses for all available packages
    --list: all installed and available packages are printed out
    --list_installed: all installed packages are printed out
    --no_https: Force all connections to use http rather than https
    --package_file?: 'package file to use '
    --proxy?: Connect via a proxy of the given type
    --proxy_host?: IP or DNS address of the proxy to use
    --proxy_port?: Proxy port to connect to
    --sdk_root?: Use the specified SDK root instead of the SDK containing this tool
    --uninstall: uninstall the listed packages
    --update: all installed packages are updated to the latest version
    --verbose: Enable verbose output.
    --version: prints the current version of sdkmanager
documentation:
    command: '[AI] `sdkmanager` is a command-line tool for Android Studio or Gradle projects, used to download and manage multiple Android SDK packages and components from Google''s repositories. It simplifies the process of keeping your development environment updated with the latest SDK tools, platforms, and system images. To use it, you invoke it in a terminal or command prompt, and specify which components you want to install or update. For example: `sdkmanager "platforms;android-29"` would download and install Android API level 29.'
    flag:
        channel: |-
            [AI] `sdkmanager` is a command-line tool used to install and manage multiple Android SDK (Software Development Kit) packages, including different channels and components. The option `--channel` allows users to specify which SDK channel to use for the installation or update process.

            Android SDK channels represent different versions or branches of the SDK platform, including stable releases, betas, and previews. By specifying a particular channel with the `--channel` flag, users can ensure they have access to the latest features or bug fixes, depending on their development needs. For instance, using the `--channel=canary` option would install the latest Android SDK preview releases.
        help: '[AI] `sdkmanager --help` is a command used in Android Studio or Command Line Interface (CLI) for managing various components, such as SDK platforms, system images, and Android NDK tools. The `--help` flag displays detailed information about the available commands and their usage. It provides a comprehensive list of sub-commands, each with a brief description, to help users understand what they can do with sdkmanager and how to use it effectively.'
        include_obsolete: '[AI] The `sdkmanager` command is a tool used in Android Studio or command line development to manage and download SDK components, including platforms, add-ons, and system images. The option `--include_obsolete` instructs the SDK manager to also install any deprecated or obsolete packages that are required by other dependencies. By default, the SDK manager does not install such packages unless explicitly requested with this flag. Enabling it might help ensure compatibility with older projects or libraries that still rely on those outdated components.'
        install: '[AI] `sdkmanager --install` is a command-line tool for Android Studio or command-line development using the Android SDK Manager. It installs specific components, packages, or tools from the Android SDK platform based on user''s selection, updating them if already installed and ensuring they are up-to-date.'
        licenses: '[AI] `sdkmanager --licenses` is a command-line utility used with the Android Studio SDK Manager. It displays a list of all accepted licenses for installed Android SDK packages. The command verifies that the local copies of the accepted licenses match those on the Google servers, and if not, it will download and update them. This command ensures that your development environment remains compliant with the required licenses for using the Android SDK.'
        list: '[AI] `sdkmanager --list` is a command-line tool provided by Android Studio or the Android SDK (Software Development Kit) to display a list of installed packages, including Android SDK platforms, add-ons, and tools. The output shows the package name, version number, and installation status for each item in the list. It helps developers keep track of their installed packages and ensures they have the required versions for their projects.'
        list_installed: '[AI] `sdkmanager --list_installed` is a command-line tool used with Android Studio or the Android SDK to display a list of all installed packages, components, and SDKs on your system. It allows you to check which specific versions and components of the Android SDK are currently installed in your development environment. This information can be useful for debugging issues related to SDK compatibility and version management.'
        no_https: '[AI] The command `sdkmanager --no_https` is a tool from the Android Studio SDK Manager that disables HTTPS verification during the download and installation of Android platform images and other SDK components. This option can be used when dealing with self-signed certificates or when the system''s certificate store is not trusted on the development machine. Disabling HTTPS verification might introduce security risks, so it should only be used in controlled environments.'
        package_file: '[AI] `sdkmanager --package_file` is a command used with the Android Studio SDK Manager. This command allows users to install an Android application package (APK) or Android Library (AAR) file directly, by specifying the path to the file using the `--package_file` option. The SDK Manager will then download and install any necessary dependencies required for building or running the specified package. This can be useful when needing to manage and install specific libraries or apps that are not available in the default SDK repositories.'
        proxy: '[AI] `sdkmanager --proxy` is a command-line option used with the Android Studio SDK Manager. It allows users to specify a proxy server to be used when downloading SDK packages and components. This can be useful in environments where internet access is controlled or restricted, as it enables users to route their SDK downloads through a designated proxy server. The format is `sdkmanager --proxy <proxy_address>:<port>` where `<proxy_address>` is the address of the proxy server and `<port>` is the port number used by the proxy.'
        proxy_host: '[AI] `sdkmanager --proxy_host` is a command-line option used with the Android Studio SDK Manager. It allows users to specify a proxy server to be used when downloading SDK packages. This can be useful in organizations that use a proxy server for internet traffic or have restricted access to external sources. The argument `--proxy_host` takes the IP address or hostname of the proxy server, along with other necessary authentication details if required.'
        proxy_port: '[AI] `sdkmanager --proxy_port` is a command-line option used with the Android Studio SDK Manager. It allows users to specify a custom port number for an HTTP proxy server that will be used when downloading SDK packages. This can be useful in cases where a network requires the use of a specific proxy server for accessing external content. The flag takes the port number as its argument. For example, `sdkmanager --proxy_port 8080` would configure the SDK Manager to use a proxy server listening on port 8080.'
        sdk_root: '[AI] `sdkmanager` is a command-line tool used to manage SDKs (Software Development Kits) and tools in Android Studio or other Android development projects. The option `--sdk_root` specifies the directory path where all downloaded SDK packages will be stored. When you run `sdkmanager "install <package>"` commands, the SDKs are installed to this root directory, allowing them to be easily accessed by your development projects.'
        uninstall: '[AI] `sdkmanager --uninstall` is a command used with the Android Studio SDK Manager. It is utilized to uninstall specific packages or components that have been previously installed. The command takes the name of the package or component as an argument, and when executed, it will remove the associated files from your system. For instance, `sdkmanager "platform-tools" --uninstall` would uninstall the Android Platform Tools package.'
        update: '[AI] `sdkmanager --update` is a command-line utility used in Android Studio or other development environments that work with the Android SDK. This command updates the installed Android SDK components to their latest versions, ensuring you have the most recent tools and APIs for your development projects. It may require an internet connection to download and install updates.'
        verbose: '[AI] `sdkmanager --verbose` is a command used in the Android Studio or Command Line tools to manage SDK components downloaded from Google''s Platforms and Add-ons repository. The `--verbose` option increases the amount of output displayed during the operation, providing detailed information about each step taken, including the progress of downloading and installing specific SDK packages. This can be helpful in troubleshooting or understanding the details of the SDK installation process.'
        version: '[AI] `sdkmanager --version` is a command used with the Android Studio SDK Manager tool. This command is utilized to check and display the current version of the Android SDK Manager and its integrated components, such as the Android SDK, Android NDK, and other tools installed in your development environment. It helps ensure that you have the latest versions of these essential tools for building and testing Android applications.'
