# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [OPTIONS] CONFIG file|-
description: Create a config from a file or STDIN
flags:
    --template-driver=: Template driver
    -l, --label=: Config labels
documentation:
    command: |-
        [AI] `docker config create` is a Docker command used to create or update a `docker-compose.yml` file or any other custom configuration files in JSON format, by creating or updating the specified key-value pairs. The command doesn't directly interact with containers, images, or networks but rather modifies the configuration files that define them.

        Example usage:
        ```bash
        $ docker config create --add key=value myapp/config.yml
        ```
        This command creates a new file named `myapp/config.yml` and adds the specified key-value pair to it, if it already exists it updates the value for the given key.
    flag:
        label: |-
            [AI] `docker config create` is a Docker command used to create or update a `docker-compose.yml` file or a custom label for an existing service or image. The `--label` option sets one or more key=value pairs as metadata labels for the corresponding service or image, which can be useful for adding descriptive information or identifying specific configurations. For example:

            ```bash
            docker config create my_service --label app=myapp my_image:latest
            ```

            In this command, a new configuration named `my_service` is created from the existing image `my_image:latest`, and the label `app=myapp` is set for it.
        template-driver: '[AI] `docker config create` is a Docker command used to create or update a Docker configuration file, which defines various settings for Docker containers and services. The `--template-driver` option specifies that the configuration file should be generated based on a template provided by the Docker Compose file format. This allows users to define complex configurations with multiple containers and services using YAML syntax, and then generate the individual configuration files using this command. These generated files can then be used with `docker-machine`, `docker-compile` or other tools that support the Docker Compose file format.'
