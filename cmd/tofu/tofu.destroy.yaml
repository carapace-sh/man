# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: destroy [options]
description: Destroy previously-created infrastructure
group: main
flags:
    -compact-warnings: Show warnings in a more compact form that includes only the summary messages.
    -destroy: Select the "destroy" planning mode.
    -detailed-exitcode: Return detailed exit codes when the command exits.
    -input?: Ask for input for variables if not directly set.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
    -no-color: If specified, output won't contain any color.
    -out?: Write a plan file to the given path.
    -parallelism?: Limit the number of concurrent operations.
    -refresh: Skip checking for external changes to remote objects while creating the plan.
    -refresh-only: Select the "refresh only" planning mode.
    -replace?: Force replacement of a particular resource instance using its resource address.
    -state?: A legacy option used for the local backend only.
    -target?: Limit the planning operation to only the given module, resource.
    -var-file?: Load variable values from the given file.
    -var=: Set a value for one of the input variables in the root module of the configuration.
documentation:
    command: '[AI] The command "tofu destroy" is not a standard Linux or Unix command, and it has no specific meaning without additional context. It may be a typo, a misinterpretation of another command, or an internal command for a specific software application. To provide a helpful answer, more information about the context in which this command was encountered would be required.'
    flag:
        compact-warnings: |-
            [AI] The `tofu destroy -compact-warnings` command is used in Kubernetes to delete resources and their associated volumes while compacting warnings. Tofu (Temporary Objects For Usable Namespace) is a utility for managing ephemeral objects in Kubernetes, such as empty directory volumes.

            The `destroy` subcommand deletes the specified resources, including their associated volumes. The `-compact-warnings` flag ensures that all warnings related to the deleted resources are compacted and removed from the cluster once the deletion is complete. This can help keep the Kubernetes dashboard cleaner and make it easier to manage the cluster over time.
        destroy: |-
            [AI] The `tofu destroy -destroy` command is a hypothetical instruction often used in discussions about Kubernetes, a container orchestration platform. It's not an actual command found in any real configuration file or software.

            This command can be thought of as a metaphor for forcefully removing a running Kubernetes resource, like a deployment or a replicaset, and all its associated resources (replica pods). When executed, it would terminate the running instances and remove the corresponding configurations, releasing the underlying compute and storage resources. It's important to use such commands with caution since they may cause downtime or data loss if not carefully planned.
        detailed-exitcode: '[AI] The `tofu destroy --detailed-exitcode` is a command used in Tofu, a popular security testing framework for Kubernetes, to delete resources with detailed exit codes. When this command is executed, Tofu will delete all the resources it has created during a test run, and it will provide detailed exit codes indicating the status of each resource deletion. This level of detail can be helpful in debugging and understanding the outcome of a test run.'
        input: '[AI] The command `tofu destroy -input` is a part of Tofu, a data masking tool for Kubernetes. This specific command is used to destroy previously created input masks in Tofu. It doesn''t affect the data itself but only the masks that define how sensitive data should be treated (e.g., encrypted or redacted). By providing the `-input` flag, you specify that you want to target a particular input mask instead of all of them.'
        lock: |-
            [AI] The `tofu destroy -lock` command is a Linux utility used in version control systems like Git. The `tofu` part refers to the TOTF (Tree Object File), which is a data structure representing a snapshot of the project's files in Git.

            The `destroy` subcommand is used to remove a specific tree object, and the `-lock` option ensures that no other processes are modifying the tree object concurrently during its destruction. This is done by acquiring an exclusive lock on it, preventing any other processes from destroying or accessing it. Once the lock is acquired, the tree object can be safely destroyed.
        lock-timeout: '[AI] The `tofu destroy --lock-timeout` command is a flag used in Tofu, a Git worktree management tool. It forces the destruction of a locked worktree, ignoring any lock that might be currently set. The `--lock-timeout` option specifies the timeout duration after which the force destruction will be executed if a lock is detected. This can be useful when dealing with stuck or problematic locks to enable continued development workflow.'
        no-color: '[AI] The `tofu destroy --no-color` is a command in Linux or Unix-based systems used to delete files or directories with the same name but different file extensions or colors in the terminal output. The `--no-color` option disables the use of colored text in the output, making it monochrome. This can be helpful when working in environments where color is not desired or supported, such as scripts or terminal sessions with limited capabilities. When used with the `rm` command, for instance, it would delete files without displaying their names in different colors, ensuring a more consistent and predictable output.'
        out: '[AI] The `tofu` command is a popular version control system for Git repositories written in Rust programming language. The `tofu destroy --out <file>` sub-command is used to remove local changes made to a specific file or directory while keeping the changes in the Git history. This can be useful when accidentally committing unfinished or unwanted modifications, allowing users to discard those local changes and revert back to the latest commit.'
        parallelism: '[AI] "tofu destroy -parallelism" is not a widely recognized term or flag in computing or technology. It seems to be an obscure reference, potentially related to the Tofu destructive testing framework in software development, which may support parallel testing execution for increased test throughput. However, without more context, it''s hard to provide a definitive explanation. If this is indeed a flag for Tofu or another parallelism-related tool, its purpose would be to enable parallel processing of tests during the destructive testing phase.'
        refresh: |-
            [AI] The command `tofu destroy --refresh` is a CLI (Command Line Interface) command used in Tofu, an open-source Kubernetes admission controller for securing your clusters. It's designed to delete and recreate Tofu's custom resources with new configurations or after modifications to ensure the desired security policies are enforced correctly.

            Here's a breakdown of each part:

            1. `tofu`: The command is related to the Tofu admission controller.
            2. `destroy`: This subcommand instructs Tofu to delete custom resources it has previously created.
            3. `--refresh`: This option triggers an automatic replacement of the deleted resources with new ones based on the latest configuration. It ensures the cluster maintains a desired state as defined by your policies.
        refresh-only: '[AI] The `tofu destroy --refresh-only` command is a flag used in Tofu, a Kubernetes admission controller. This flag instructs Tofu to delete and recreate only the specified resources that have undergone changes, without affecting their dependencies. It''s often used for updating resources with minimal disruption to the running application.'
        replace: |-
            [AI] The `tofu replace` command in Git is used to replace specific text in the commit messages or file content of a Git repository with another text across all commits. The `--destroy` option, if used, will permanently delete any commits containing the original text and replace them with new ones, effectively "destroying" the history of those commits.

            It's important to note that using this command should be done carefully as it can result in losing commit history. It's generally recommended to create a backup or branch before running such commands, and consult with your team members or project maintainers if applicable.
        state: '[AI] The `tofu destroy -state` command is specific to the Tofu intrusion prevention system, which is used to secure Kubernetes clusters. This command is used to delete all objects in a specified state (e.g., `running`, `pending`) in Tofu''s internal data store. The flag `-state` specifies which state to target. By deleting the objects, Tofu effectively removes them from the Kubernetes cluster, helping to maintain security and compliance by eliminating unintended or malicious resources.'
        target: '[AI] `tofu destroy --target` is a command used in Tofu, a Ruby library for mocking and stubbing, to delete all existing mocks and stubs (also known as "tofu") for the specified target or object. This can be useful when you want to reset your test environment before running tests again.'
        var: '[AI] The command `tofu destroy -var` is a part of Tofu, a Kubernetes Secret and ConfigMap management tool. This specific command is used to delete a variable or key-value pair from a Kubernetes Secret managed by Tofu. The `-var` flag indicates that only the specified variable should be deleted, leaving other variables in the Secret untouched.'
        var-file: '[AI] The `tofu destroy -var-file` command is a part of the Tofu Secrets Manager in Kubernetes. It''s used to remove a secret file from the Kubernetes cluster. The `-var-file` flag specifies the path to a file containing variable references for the secret. When this command is executed, Tofu decrypts the secret using the specified variables and then permanently deletes it from the cluster.'
