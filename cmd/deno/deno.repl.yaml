# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: repl
description: Read Eval Print Loop
flags:
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --eval=: Evaluates the provided code when the REPL starts.
    --import-map=: Load import map file
    --inspect-brk?: Activate inspector on host:port and break at start of user script
    --inspect?: 'Activate inspector on host:port (default: 127.0.0.1:9229)'
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --seed=: Seed Math.random()
    --v8-flags?: 'Set V8 command line options (for help: --v8-flags=--help'
    -c, --config=: Load configuration file
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno repl` is a Deno command used to start the Deno REPL (Read-Evaluate-Print Loop) session. In simpler terms, it''s an interactive environment where you can write, run, and test Deno code directly without the need for creating a new file or building a project. This command opens the Deno console and allows users to interactively experiment with their code.'
    flag:
        cached-only: '[AI] The `deno repl --cached-only` command is used in Deno, a modern and secure runtime for JavaScript and TypeScript. This specific flag instructs the Deno REPL (Read-Evaluate-Print Loop) to only load cached modules instead of fetching them from the network or local filesystem each time you run the REPL. This can provide faster startup times if you frequently work on a project with stable dependencies.'
        cert: |-
            [AI] `deno repl --cert` is a command used in Deno, a modern and secure TypeScript runtime. The `repl` part stands for "REPL," which means "Read-Evaluate-Print Loop." This command starts the Deno REPL with additional security features enabled by providing the `--cert` flag.

            The `--cert` option requires a PEM or PKCS8-encoded private key file and its corresponding public certificate file in PEM format to be provided as arguments. With this flag, Deno sets up an secure TLS connection between the REPL and any remote servers that are accessed during runtime. This adds an extra layer of security to the REPL session and helps prevent man-in-the-middle attacks when working with sensitive data or applications.
        config: '[AI] `deno repl --config` is a command used in Deno, a modern JavaScript runtime. It launches Deno''s REPL (Read-Evaluate-Print Loop) with an additional configuration file specified. This command starts the interactive Deno environment and loads the given config file for customized settings or plugins. It allows users to set up their development environment effectively by managing project-specific configurations easily.'
        eval: '[AI] `deno repl --eval` is a command used in Deno, a TypeScript-based runtime for building secure and modern web applications. This command starts Deno''s REPL (Read-Evaluate-Print Loop) mode with an inline expression to be evaluated immediately upon launching the application. In simpler terms, it runs a piece of TypeScript code directly from the command line without creating a separate file.'
        import-map: '[AI] The `--import-map` flag in Deno, a modern and secure TypeScript runtime, is used to specify an import map file during program execution. An import map is a JSON file that redefines the origin of modules imported by your Deno application, allowing for flexible module resolution and source of execution isolation. By providing this flag with the path to an import map file, you can override the default Deno module resolution behavior, making it useful in complex projects or when working with external dependencies.'
        inspect: '[AI] `deno repl --inspect` is a command used in Deno, a modern and secure TypeScript runtime. This command starts Deno''s REPL (Read-Evaluate-Print Loop) with the Inspect mode enabled. The inspect mode allows attaching a debugger to the running script for real-time debugging and examination of variables, data structures, and execution flow within the Deno environment.'
        inspect-brk: '[AI] `deno repl --inspect-brk` is a command used in Deno, a modern and secure TypeScript runtime. This command starts Deno''s REPL (Read-Evaluate-Print Loop) with the debugger attached at the beginning of the execution. The `--inspect-brk` flag enables source mapping and sets a breakpoint at the beginning of the script for remote debugging using Inspector protocol, allowing developers to inspect and modify code while it''s running.'
        location: '[AI] `deno repl --location` is a command-line argument used with Deno, a modern and secure TypeScript runtime. This option sets the location mode in the REPL (Read-Evaluate-Print Loop) environment, allowing the user to specify the file path or URL from where to load the code before running it. For instance, `deno repl --location=path/to/file.ts` loads and runs the code from the given file location. Similarly, `deno repl --location=https://example.com/script.mts` fetches and runs a TypeScript module over the network. This feature is useful for debugging and testing code snippets in various locations without having to save them as separate files first.'
        lock: '[AI] The `deno repl --lock` command is used in Deno, a TypeScript-based runtime, to create or update a `lock.json` file when working with the REPL (Rapid Evaluation and Development Platform) mode. This file records the exact versions of all dependencies used for a project, ensuring consistency across different builds and collaborators. It''s important for managing the project dependencies in a deterministic way.'
        lock-write: |-
            [AI] The `--lock-write` flag is used with Deno, a modern and secure TypeScript runtime. This flag modifies the Deno REPL (Read-Evaluate-Print Loop) behavior to acquire an exclusive write lock on the project's `deno.jsonc` file before executing any code.

            This locking mechanism ensures that multiple instances of Deno don't interfere with each other when managing dependencies in a shared project. It helps maintain the consistency and integrity of your Deno project by preventing conflicts during the installation or updating of packages.
        no-check: '[AI] The `deno repl --no-check` command is used to start Deno''s REPL (REplain LOading) mode with disabled type checking. This means that Deno will not perform automatic type checking while running the code in the REPL, allowing for more interactive and exploratory development without the interruption of compilation errors. However, it''s important to note that manually writing types is still recommended for larger projects, as this command only disables Deno''s built-in type checking feature.'
        no-remote: |-
            [AI] `deno repl --no-remote` is a command used in Deno, a modern and secure TypeScript runtime. The `repl` part stands for "REPL", which means "Read-Eval-Print Loop" in programming terminology. This command starts the Deno REPL (interactive shell).

            The `--no-remote` flag is an optional argument that disables remote Deno modules loading. In other words, when using this flag, the Deno REPL will only use local modules for importing and executing code, rather than fetching them from a remote deno.land registry or any other remote URLs. This can be useful in secure environments where you want to ensure that only trusted local code is executed.
        reload: '[AI] `deno repl --reload` is a command used in Deno, a modern and secure TypeScript runtime. It starts the Deno REPL (Read-Evaluate-Print Loop) with the `--reload` flag enabled. This flag automatically reloads the current Deno project when any file is saved, allowing for quick iterations during development without manually reloading the console.'
        seed: '[AI] `deno repl --seed` is a command used in Deno, a modern JavaScript runtime. This command starts the Deno REPL (Read-Evaluate-Print Loop) with a specified seed file. The seed file is an optional argument that specifies which TypeScript or JavaScript module to load first when starting the REPL. For example, `deno repl --seed=my_project/main.ts` will start the REPL and automatically import and execute the code in "my\_project/main.ts". This can be useful for quickly testing or exploring parts of your Deno project.'
        v8-flags: '[AI] `deno repl --v8-flags` is a command used in Deno, a modern and secure TypeScript runtime. This command starts the Deno REPL (Read-Evaluate-Print Loop) with additional V8 flags passed as an argument. V8 is Google''s open-source JavaScript and WebAssembly engine. The flags modify its behavior, such as improving performance or enabling specific features. These flags can be useful for developers to optimize their Deno projects or debugging specific issues.'
