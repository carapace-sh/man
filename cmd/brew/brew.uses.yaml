# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: uses
description: Show formulae and casks that specify <formula> as a dependency; that is, show dependents of <formula>
group: main
flags:
    --cask: Include only casks.
    --debug: Display any debugging information.
    --eval-all: Evaluate all available formulae and casks, whether installed or not, to show their dependents.
    --formula: Include only formulae.
    --help: Show this message.
    --include-build: Include formulae that specify <formula> as a `:build` dependency.
    --include-optional: Include formulae that specify <formula> as an `:optional` dependency.
    --include-test: Include formulae that specify <formula> as a `:test` dependency.
    --installed: Only list formulae and casks that are currently installed.
    --missing: Only list formulae and casks that are not currently installed.
    --quiet: Make some output more quiet.
    --recursive: Resolve more than one level of dependencies.
    --skip-recommended: Skip all formulae that specify <formula> as a `:recommended` dependency.
    --verbose: Make some output more verbose.
documentation:
    command: '[AI] The `brew uses` command is a part of Homebrew, a popular package manager for macOS. This command displays information about packages that are currently being used by your system, including which formulae (Homebrew packages) are installed and which ones are linked into the system. It helps users understand which packages are actively in use and can be valuable for managing dependencies and keeping track of installed software.'
    flag:
        cask: '[AI] `--cask` is a command-line option for Homebrew, a popular package manager for macOS. It allows users to install applications that are distributed as bundled packages, rather than command line tools or system libraries. These types of packages are referred to as "Casks." By using `brew install --cask <package>`, users can easily download and install these graphical user interface (GUI) applications directly from Homebrew, simplifying the installation process and keeping their system up-to-date with the desired software.'
        debug: '[AI] The `--debug` flag is a command-line option used with Homebrew, a popular package manager for macOS and Linux. When invoked with this option, Homebrew will run in debug mode, which increases the amount of output it generates during the installation or updating of packages. This can be helpful for troubleshooting issues or gaining more insight into what Homebrew is doing behind the scenes.'
        eval-all: '[AI] `--eval-all` is a flag used in Homebrew, a popular package manager for macOS and Linux. It allows users to apply a series of Homebrew commands as if they were written in a script file. When the `--eval-all` flag is provided with a string argument containing multiple Homebrew commands separated by semicolons (;), Homebrew executes each command as it is read. This flag can simplify running multiple related Homebrew commands at once from the command line.'
        formula: '[AI] `brew uses --formula` is a command used in Homebrew, a popular package manager for macOS. This command lists all the installed Homebrew Formulae, which are recipes that define how to build and install software packages using Homebrew. When you run `brew uses --formula`, Homebrew displays a list of the formula names associated with the currently installed packages. This command can be helpful when you want to see which Homebrew formulas are being used by the installed packages on your system.'
        help: '[AI] `brew help` is a command used in Homebrew, a popular package manager for macOS. It displays detailed help information about Homebrew and its various sub-commands. The output includes a brief description of each command''s functionality, along with usage examples and available options. Using this command can assist users in understanding how to effectively use Homebrew to manage software packages on their Mac systems.'
        include-build: '[AI] The `--include-build` flag is a command-line option used with Homebrew, a popular package manager for macOS and Linux. This option extends the list of packages to be installed by including dependencies required to build those packages from source. In other words, it ensures that all necessary components are installed before attempting to compile software from source through Homebrew.'
        include-optional: '[AI] The `--include-optional` flag is a command-line option used with Homebrew, a popular package manager for macOS and Linux. This option expands the list of formulas that Homebrew installs to include those that have optional dependencies marked in their recipes. Optional dependencies are packages or libraries that are not required for the base functionality of the primary formula being installed but may provide additional features or enhancements. By using `--include-optional`, Homebrew will install these optional dependencies along with the main formula, giving a more complete installation.'
        include-test: '[AI] The `--include-test` flag is a command-line option used with Homebrew, a popular package manager for macOS and Linux. When building or installing a package with Homebrew, this flag instructs Homebrew to also build and install any tests associated with the package. This helps ensure that the software functions correctly and reliably by running the tests as part of the installation process.'
        installed: '[AI] The `--installed` flag is a command-line option used with Homebrew, a popular package manager for macOS and Linux. When using Homebrew to list installed packages or software, the `--installed` flag filters the output to only show the currently installed packages. This can be useful when working with a large number of installed packages and wanting to quickly identify which ones are currently in use.'
        missing: '[AI] The `--missing` flag is a command-line option used in Homebrew, a popular package manager for macOS and Linux. It is used to install only the missing dependencies or formulae (Homebrew calls them "formulae" or "packages") that are required by a specific formula or dependency. In other words, it helps install only the necessary packages without affecting the existing installed ones. This can be useful when you want to ensure that only the required dependencies are updated or installed without changing other parts of your system.'
        quiet: '[AI] The `--quiet` flag in Homebrew, a popular package manager for macOS, instructs it to run commands with minimal output. In other words, it suppresses informational messages during the installation or updating of packages, providing a quieter and more focused terminal session.'
        recursive: '[AI] The `--recursive` flag used in Homebrew, a popular package manager for macOS, instructs it to install not only the specified package but also all of its dependencies recursively. This means that if a package has dependencies of its own, and those dependencies have their own dependencies, Homebrew will install them all in one go, ensuring that every required component is installed before the main package. This can save time and effort by avoiding the need to manually install each dependency separately.'
        skip-recommended: '[AI] The `--skip-recommended` flag in Homebrew, a popular package manager for macOS, instructs it to exclude installing recommended packages during the installation or upgrade of a specific package. This means that only the requested package will be installed without any additional recommended software being added. It can help keep the system leaner and simplify the installation process by avoiding unnecessary dependencies.'
        verbose: '[AI] `--verbose` is a flag used in Homebrew, a popular package manager for macOS, that increases the amount of output and information displayed during the installation or updating of software packages. It provides more detailed and real-time progress reports, helping users understand the steps being taken and troubleshoot any potential issues.'
