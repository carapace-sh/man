# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [OPTIONS] IMAGE [COMMAND] [ARG...]
description: Create a new container
flags:
    --add-host=: Add a custom host-to-IP mapping (host:ip)
    --blkio-weight-device=: Block IO weight (relative device weight)
    --blkio-weight=: Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
    --cap-add=: Add Linux capabilities
    --cap-drop=: Drop Linux capabilities
    --cgroup-parent=: Optional parent cgroup for the container
    --cgroupns=: Cgroup namespace to use (host|private)
    --cidfile=: Write the container ID to the file
    --cpu-count=: CPU count (Windows only)
    --cpu-percent=: CPU percent (Windows only)
    --cpu-period=: Limit CPU CFS (Completely Fair Scheduler) period
    --cpu-quota=: Limit CPU CFS (Completely Fair Scheduler) quota
    --cpu-rt-period=: Limit CPU real-time period in microseconds
    --cpu-rt-runtime=: Limit CPU real-time runtime in microseconds
    --cpus=: Number of CPUs
    --cpuset-cpus=: CPUs in which to allow execution (0-3, 0,1)
    --cpuset-mems=: MEMs in which to allow execution (0-3, 0,1)
    --device-cgroup-rule=: Add a rule to the cgroup allowed devices list
    --device-read-bps=: Limit read rate (bytes per second) from a device
    --device-read-iops=: Limit read rate (IO per second) from a device
    --device-write-bps=: Limit write rate (bytes per second) to a device
    --device-write-iops=: Limit write rate (IO per second) to a device
    --device=: Add a host device to the container
    --disable-content-trust: Skip image verification
    --dns-opt=: Set DNS options
    --dns-option=: Set DNS options
    --dns-search=: Set custom DNS search domains
    --dns=: Set custom DNS servers
    --domainname=: Container NIS domain name
    --entrypoint=: Overwrite the default ENTRYPOINT of the image
    --env-file=: Read in a file of environment variables
    --expose=: Expose a port or a range of ports
    --gpus=: GPU devices to add to the container ('all' to pass all GPUs)
    --group-add=: Add additional groups to join
    --health-cmd=: Command to run to check health
    --health-interval=: Time between running the check (ms|s|m|h) (default 0s)
    --health-retries=: Consecutive failures needed to report unhealthy
    --health-start-period=: Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
    --health-timeout=: Maximum time to allow one check to run (ms|s|m|h) (default 0s)
    --help: Print usage
    --init: Run an init inside the container that forwards signals and reaps processes
    --io-maxbandwidth=: Maximum IO bandwidth limit for the system drive (Windows only)
    --io-maxiops=: Maximum IOps limit for the system drive (Windows only)
    --ip=: IPv4 address (e.g., 172.30.100.104)
    --ip6=: IPv6 address (e.g., 2001:db8::33)
    --ipc=: IPC mode to use
    --isolation=: Container isolation technology
    --kernel-memory=: Kernel memory limit
    --label-file=: Read in a line delimited file of labels
    --link-local-ip=: Container IPv4/IPv6 link-local addresses
    --link=: Add link to another container
    --log-driver=: Logging driver for the container
    --log-opt=: Log driver options
    --mac-address=: Container MAC address (e.g., 92:d0:c6:0a:29:33)
    --memory-reservation=: Memory soft limit
    --memory-swap=: 'Swap limit equal to memory plus swap: ''-1'' to enable unlimited swap'
    --memory-swappiness=: Tune container memory swappiness (0 to 100)
    --mount=: Attach a filesystem mount to the container
    --name=: Assign a name to the container
    --net-alias=: Add network-scoped alias for the container
    --net=: Connect a container to a network
    --network-alias=: Add network-scoped alias for the container
    --network=: Connect a container to a network
    --no-healthcheck: Disable any container-specified HEALTHCHECK
    --oom-kill-disable: Disable OOM Killer
    --oom-score-adj=: Tune host's OOM preferences (-1000 to 1000)
    --pid=: PID namespace to use
    --pids-limit=: Tune container pids limit (set -1 for unlimited)
    --platform=: Set platform if server is multi-platform capable
    --privileged: Give extended privileges to this container
    --pull=: Pull image before creating ("always", "|missing", "never")
    --read-only: Mount the container's root filesystem as read only
    --restart=: Restart policy to apply when a container exits
    --rm: Automatically remove the container when it exits
    --runtime=: Runtime to use for this container
    --security-opt=: Security Options
    --shm-size=: Size of /dev/shm
    --stop-signal=: Signal to stop the container
    --stop-timeout=: Timeout (in seconds) to stop a container
    --storage-opt=: Storage driver options for the container
    --sysctl=: Sysctl options
    --tmpfs=: Mount a tmpfs directory
    --ulimit=: Ulimit options
    --userns=: User namespace to use
    --uts=: UTS namespace to use
    --volume-driver=: Optional volume driver for the container
    --volumes-from=: Mount volumes from the specified container(s)
    -P, --publish-all: Publish all exposed ports to random ports
    -a, --attach=: Attach to STDIN, STDOUT or STDERR
    -c, --cpu-shares=: CPU shares (relative weight)
    -e, --env=: Set environment variables
    -h, --hostname=: Container host name
    -i, --interactive: Keep STDIN open even if not attached
    -l, --label=: Set meta data on a container
    -m, --memory=: Memory limit
    -p, --publish=: Publish a container's port(s) to the host
    -q, --quiet: Suppress the pull output
    -t, --tty: Allocate a pseudo-TTY
    -u, --user=: 'Username or UID (format: <name|uid>[:<group|gid>])'
    -v, --volume=: Bind mount a volume
    -w, --workdir=: Working directory inside the container
documentation:
    command: '[AI] The `docker container create` command is used to create a new Docker container from an image without actually running it. It takes one required argument, which is the name of the Docker image to use, followed by any optional arguments specifying container configuration such as name, ports, environment variables, or volumes. For example: `docker container create --name my_container my_image:latest`. After executing this command, you will have a new container object in the Docker daemon waiting for a start command.'
    flag:
        add-host: '[AI] The `--add-host` option in the `docker create` command is used to add a custom hostname and IP address mapping between the Docker host and the container. This can be useful when you need to access a specific service or resource from within the container that isn''t accessible through the default Docker network, or if you''re working with legacy applications that rely on hard-coded IP addresses. The format is `--add-host <alias>:<IP>`. For example, `--add-host mydb:192.168.0.5` would map the alias "mydb" to the IP address 192.168.0.5 inside the container.'
        attach: '[AI] The `docker create` command is used to create a new Docker container without starting it. The `--attach` option changes the default behavior of detaching the container after creation and instead attaches standard input, output, and error streams to the current terminal session. This allows you to interact with the container as it''s being created and see its output in real-time.'
        blkio-weight: '[AI] The `--blkio-weight` option in the `docker create` command is used to set the block I/O (BM) weight for a Docker container. This option allows you to configure the relative share of BM resources that a container can consume compared to other containers running on the same host. A higher value indicates a greater proportion of BM resources allocated to that container, ensuring better performance for I/O-intensive applications in a multi-container environment.'
        blkio-weight-device: |-
            [AI] The `docker create` command with the `--blkio-weight-device` option is used to configure Block I/O (BIo) weighting for a Docker container. This allows you to prioritize I/O access between containers running on the same host.

            With this flag, you can specify a block device used by a container and assign a corresponding weight value, indicating the importance of that device's I/O operations relative to other containers. A higher weight value means more priority for that device's I/O operations. This can be helpful when managing containers with significant I/O requirements or when preventing contention on shared resources.
        cap-add: '[AI] The `--cap-add` flag in Docker is used to grant specific Linux capabilities to a container. Capabilities are special permissions that allow a process to perform certain privileged actions on the host system. For example, `CAP_NET_ADMIN` allows controlling network interfaces, and `CAP_SYS_ADMIN` provides administrative privileges. By adding desired capabilities when creating a Docker container using this flag, you can extend the container''s functionality beyond what is typically allowed in a secure environment. Be cautious while using this feature as it may introduce potential security risks if misused.'
        cap-drop: |-
            [AI] The `--cap-drop` flag in Docker is used to remove specific Linux capabilities from the container at creation time. Capabilities are permissions that give a container more control over the underlying host system. By default, a Docker container gets all capabilities except for a few restricted ones.

            Using `--cap-drop`, you can remove specified capabilities from the container to limit its privileges and enhance security. For example, `--cap-drop=ALL` will drop all capabilities for the container. You can also specify specific capabilities by their names like `--cap-drop=SYS_ADMIN`.

            This flag is particularly useful when creating containers that need restricted access to system resources or when addressing specific security concerns.
        cgroup-parent: '[AI] The `--cgroup-parent` flag in the `docker container create` command is used to specify the CGroup (Control Group) parent for the new Docker container. CGroups are a Linux kernel feature that allows limiting, accounting, and isolating the resource usage of a process or a group of processes. By specifying a CGroup parent, you can control which resources the new container will share with other containers or processes in the system. This flag helps in managing container resource usage efficiently and maintaining isolation between them.'
        cgroupns: '[AI] The `--cgroupns` option when creating a Docker container with the `docker create` command is used to specify that the container should be created in a new Control Group (cGroup) hierarchy, isolated from the host and other containers. This can be useful for managing container resource usage more granularly or for compliance reasons where containers need to run with their own cGroups. The flag creates a new namespaced cGroup for the container, meaning it gets its own hierarchy of control groups for CPU, memory, block I/O, network, and other resources. This allows better isolation and resource management between containers.'
        cidfile: '[AI] The `docker create` command is used to create a new Docker container, but not start it. The `--cidfile` option tells Docker to write the container ID to the specified file instead of printing it on the console. This can be useful for automation scripts where you want to store the created container ID for further use.'
        cpu-count: '[AI] The `--cpu-count` option in the `docker create` command is used to set the number of CPU cores that a Docker container should be configured to use. This can help ensure that containers are properly allocated system resources and optimize their performance. By specifying a specific number of CPUs, you can configure containers to utilize resources efficiently and prevent contention or overload on the host machine.'
        cpu-percent: '[AI] The `--cpu-percent` flag in the `docker create` command is used to set the CPU resource limit for a Docker container as a percentage of the total available host CPU resources. This means that you can specify how much CPU capacity you want your container to have out of the overall host CPU capacity. For example, `--cpu-percent 50` sets the container''s CPU usage limit to 50% of the available host resources. By default, Docker containers do not have any specific CPU limits set.'
        cpu-period: '[AI] The `--cpu-period` flag is a command-line option for Docker''s `create` command, which is used to create a new Docker container from an image. This option sets the maximum amount of CPU time that the container can use in nanoseconds per period. The period is the length of a time slice, typically measured in microseconds or milliseconds. By default, there is no limit on CPU usage for containers. Setting this flag can help ensure that resource-intensive containers do not monopolize system resources.'
        cpu-quota: '[AI] The `--cpu-quota` option in the `docker create` command sets a limit on the amount of CPU resources that a Docker container can use. This is useful for controlling the resource usage and ensuring that containers running on a host system don''t consume more than their allocated share of CPU resources, preventing potential performance issues or denial-of-service situations. The value specified with this option is in Shares, where 1024 Shares correspond to 1 CPU core.'
        cpu-rt-period: '[AI] The `--cpu-rt-period` flag in the `docker create` command is used to set the Realtime (RT) CPU period for a Docker container. This flag allows you to specify the maximum amount of CPU time that the container''s RT tasks are guaranteed to get within a given time period, measured in nanoseconds. Setting this value can be useful for containers running real-time or hard real-time applications where predictable and consistent CPU usage is required. For example, `docker create --cpu-rt-period 100000 my_container` sets the RT CPU period to 100 microseconds (100000 nanoseconds).'
        cpu-rt-runtime: |-
            [AI] The `--cpu-rt-runtime` flag is used when creating a Docker container to specify the real-time (RT) Linux kernel scheduling policy for the container's CPU resources. By default, Docker containers run with the Completely Fair Scheduler (CFS), which is a non-RT scheduler that aims at distributing CPU resources evenly among all tasks.

            However, some applications may require real-time processing or have hard real-time constraints and therefore need to run with an RT scheduler. In such cases, the `--cpu-rt-runtime` flag can be used to create a container with an RT Linux kernel scheduler. When this option is specified, Docker creates a container that runs with an RT Linux kernel thread and a dedicated CPU core for the container, ensuring that the container's processes get priority over other non-RT tasks in the system. This flag improves the predictability and responsiveness of the containerized application by ensuring it gets sufficient CPU resources to meet its real-time requirements.
        cpu-shares: '[AI] The `--cpu-shares` option in the `docker container create` command is used to configure CPU resource sharing between containers running on the same host. It specifies a relative share of CPU resources that a container is entitled to consume compared to other containers. A value closer to 1024 indicates a higher priority for the container''s CPU usage, while values closer to 0 indicate lower priority. This option helps manage CPU resources efficiently and prevent resource contention between containers.'
        cpus: '[AI] The `docker create` command is used to create a new Docker container from an image without starting it. The `--cpus` option sets the number of CPU units allocated to the container. This can be useful for limiting resource usage or optimizing performance for resource-intensive applications. For example, `docker create --image myimage:latest --cpus 1 mycontainer` creates a new container from image "myimage:latest" with one CPU allocation.'
        cpuset-cpus: '[AI] The `--cpuset-cpus` flag in the `docker create` command is used to specify which CPUs a Docker container can use on the host system. This flag takes a comma-separated list of CPU socket or core numbers, allowing you to allocate container workloads to specific CPUs for better resource utilization and improved container isolation. For example, `--cpuset-cpus=0,3` would bind the container to CPUs 0 and 3 on the host system.'
        cpuset-mems: '[AI] The `--cpuset-mems` flag in the `docker create` command is used to specify which CPU cores and memory nodes a Docker container can use. This allows for better control over container resource usage on systems with multiple CPUs or non-uniform memory architectures (NUMA). By assigning specific CPUs and memory nodes to a container, you can help ensure that it receives the resources it needs to run efficiently without interfering with other containers or host processes.'
        device: '[AI] The `--device` flag when using the `docker create` command allows you to bind a specific host device or character device to a Docker container during its creation. This can be useful when working with containers that require access to specialized hardware, such as graphics cards or USB devices. By binding these devices, you enable the container to interact with them as if they were running directly on the host system. This flag helps in extending container functionalities and making them more capable.'
        device-cgroup-rule: '[AI] `docker container create --device-cgroup-rule` is a command used in Docker to create a new container with customized Linux Control Group (cGroup) rules for device access. By using this option, you can assign specific devices to the container''s cGroup hierarchy, controlling their resource usage and prioritization. This can be useful when working with applications that require special access to hardware devices or when managing container resource allocation. The syntax is `docker create [OPTIONS] IMAGE [COMMAND] [ARG...] --device-cgroup-rule=rULE`, where `RULE` is a string in the format `p <parent>, h <hierarchy_value>`. For example, to assign device /dev/ttyUSB0 to the default root cGroup: `--device-cgroup-rule=p /docker/, h 10:/23`.'
        device-read-bps: '[AI] The `--device-read-bps` flag is a Docker option when creating a container. It specifies the maximum number of bytes per second that can be read from a device by the container. This can be useful when creating a container that requires access to devices with high data transfer rates, such as video or audio streams, to ensure sufficient bandwidth is allocated.'
        device-read-iops: '[AI] The `--device-read-iops` flag in the `docker create` command is used to set the maximum read Input/Output Operations Per Second (IOPS) limit for a Docker container''s access to a specific device. This flag is often used in conjunction with binding a host device to a container using the `--device` flag. By setting these limits, you can control and optimize the performance of I/O-intensive applications running inside containers.'
        device-write-bps: |-
            [AI] The `--device-read-bps` and `--device-write-bps` flags are options for the `docker create` command when creating a new Docker container.

            These flags allow you to limit the maximum number of I/O bytes per second (IOPS) that can be read from or written to a specific device within the container. The `--device-write-bps` flag specifically sets the limit for data being written to the device. These limits can be useful in managing resource usage and preventing potential performance issues caused by excessive I/O operations on devices.
        device-write-iops: '[AI] The `--device-write-iops` flag is an option used with the `docker create` command in Docker. It allows setting a specific write Input/Output Per Second (IOPS) limit for a container''s block I/O device. This can be useful for optimizing container performance and ensuring predictable I/O behavior, especially when dealing with high-throughput or latency-sensitive workloads that rely on disk I/O. The flag takes an integer value representing the number of IOPS. For example, `--device-write-iops 1000` sets a write IOPS limit of 1000 for the container''s device. Keep in mind that exceeding this limit could result in performance degradation or even failure to write data.'
        disable-content-trust: '[AI] The `--disable-content-trust` option in the `docker create` command disables Docker''s content trust verification for the image being used to create a new container. Content trust is a security feature in Docker that ensures the authenticity and integrity of images. When disabled, Docker will not verify the digital signatures on the image before using it to create a container. This can bypass important security checks and potentially expose your system to risks. It''s generally recommended to keep content trust enabled for enhanced security.'
        dns: '[AI] The `--dns` option in the `docker container create` command is used to set custom DNS servers for the created container. By default, Docker uses the host''s DNS server. However, with `--dns` you can specify one or more IP addresses or domain names of DNS servers that the container should use instead. This can be useful in various networking scenarios such as when working with isolated networks or DNS caching solutions. For example, `--dns 8.8.8.8 --dns 8.8.4.4` sets the Docker container to use Google''s public DNS servers for its name resolution needs.'
        dns-opt: '[AI] The `--dns-opt` option in the `docker create` command is used to configure custom DNS options for the created container. It allows you to specify various DNS settings such as nameservers, search domains, or optionally set up a DNS proxy server inside the container. This can be useful when you want to customize the DNS behavior of your containers for specific use cases like accessing internal DNS services or resolving hostnames in multi-container environments.'
        dns-option: |-
            [AI] `docker container create --dns-option` is a command used in Docker to set custom DNS options when creating a new container. The `--dns-option` flag allows you to specify DNS server addresses or other options, such as search domains, to be used within the container's network environment.

            For example, `docker container create --name my_container --dns-option="dns=8.8.8.8,8.8.4.4" my_image` sets the DNS servers for the new container to 8.8.8.8 and 8.8.4.4 when it is started. This can be useful when you want to ensure that specific DNS servers are used by your container for name resolution, instead of relying on the default settings of the Docker host or network.
        dns-search: '[AI] `docker container create --dns-search` is a command used in Docker to set custom search domains for the DNS resolver inside a container. This option allows specifying multiple domains separated by commas, which will be appended to the standard search list when performing DNS lookups within the container. It helps in cases where you need to access services or applications on specific domains within your network that are not part of the standard DNS search list.'
        domainname: |-
            [AI] The `--domainsname` option in the `docker container create` command is used to set a custom hostname for the created Docker container. This can be useful when you want to map a specific hostname to your container, allowing you to access it more easily using that name instead of its container ID or IP address.

            Keep in mind that setting a domainname does not automatically create or configure any DNS records, so you would still need to manually set up the DNS resolution for the given hostname if it's not part of an existing domain. The flag sets only the container's internal hostname within the Docker network.
        entrypoint: '[AI] The `docker create` command with the `--entrypoint` option allows you to specify the primary CLI command that Docker should run when starting a new container. In other words, it sets the default command for the container image. For example, if you have an image with multiple commands defined in its Dockerfile but don''t want to run them all at once, you can use `--entrypoint` to specify which one to execute instead. This is useful when you want more control over the container''s startup behavior or when using custom entrypoints for specific use cases.'
        env: |-
            [AI] The `docker create` command with the `--env` flag is used to create a new Docker container and set environment variables for it. The syntax is as follows:

            ```bash
            docker create --name <container_name> --env="VARIABLE_NAME=VALUE" <image_name>:<tag>
            ```

            The `--name` flag sets the name of the container, and the `--env` flag followed by the variable name and value assigns an environment variable to the container. For example, the command below creates a new container with the name "mycontainer" based on image "nginx:latest", sets the environment variable `APP_KEY=abc123`, and starts the container in detached mode (`-d` flag):

            ```bash
            docker create --name mycontainer --env="APP_KEY=abc123" -d nginx:latest
            ```
        env-file: '[AI] `docker container create --env-file` is a command used in Docker to create a new container with environment variables defined in a file instead of specifying them directly on the command line. The `--env-file` flag takes the path to a file containing key-value pairs, where each line represents an environment variable. This can be useful for managing and maintaining consistent environment variables across multiple containers or environments.'
        expose: '[AI] The `--expose` flag in the `docker create` command is used to inform Docker that the container''s ports should be published to the host, but it does not actually publish them. This means that while the ports are exposed and can be accessed from other containers on the same network, they are not accessible from outside the host system by default. The actual publishing of the ports to the host can be done using `docker run` with the `-p` or `--publish` flag, or using Docker networks.'
        gpus: '[AI] `docker container create --gpus` is a command used in Docker to create a new container with explicit GPU (Graphics Processing Unit) access. This flag allows the container to be connected to specific GPUs on the host system for intensive GPU-accelerated workloads. It''s essential when running applications that require significant computational power, such as machine learning or data processing tasks, which can benefit from using GPUs instead of the CPU. The flag takes an optional argument to specify the index or name of the GPU(s) to be assigned to the container. For example: `--gpus all` or `--gpus 0`.'
        group-add: |-
            [AI] The `--group-add` option in the `docker create` command is used to add a new group to the container when it's created. This can be helpful for managing container access and permissions, as you can assign specific users or groups to the container's group ID (GID) for fine-grained control over who has access to its resources.

            When using this option, you need to provide the GID of the group you want to add to the container. For example:

            ```sh
            $ docker create --group-add=<GID>:<groupname> <image>:<tag> <container_name>
            ```

            Replace `<GID>` with the numerical GID of the group, and `<groupname>`, `<image>`, `<tag>`, and `<container_name>` as appropriate for your specific use case. This command will create a new container with the specified image and tag, and add the given group to the container when it's created.
        health-cmd: '[AI] The `--healthcheck` flag when using the `docker container create` command allows you to configure Docker to periodically check the health of a container. The `--health-cmd` option specifies the command that Docker should use to determine if the container is healthy or not. If the command returns a non-zero exit code, Docker marks the container as unhealthy and may restart it depending on other settings. This feature can be useful for ensuring that critical services are always running in your containers.'
        health-interval: '[AI] The `--health-interval` flag in the `docker container create` command is used to configure Docker''s built-in healthcheck functionality. It sets the time interval (in seconds) between two consecutive health checks of a running container. If the container fails to pass the health check, Docker can automatically restart it to keep it in a healthy state.'
        health-retries: '[AI] The `--health-retries` flag in the `docker create` command sets the number of times Docker will attempt to perform a container''s specified health check before considering it as unhealthy. This flag helps ensure that containers are running correctly and are responsive, by automatically restarting them if they fail a predefined health check. The default value is three retries.'
        health-start-period: '[AI] The `--health-start-period` flag in Docker''s `container create` command sets the length of time (in seconds) that a container is given to become healthy and start sending responses to the Docker host''s `HEALTHCHECK` before it''s considered failed. If a container does not respond within this period, Docker considers it unhealthy and may take action such as restarting the container. This flag helps ensure that only containers that are running properly are kept in the cluster.'
        health-timeout: '[AI] The `--health-check` flag in the `docker run` or `docker create` command is used to configure Docker to periodically check the status of a container and report its health to the Swarm or Docker Server. The `--health-timeout` parameter sets the duration, in seconds, that Docker should wait before considering a container unresponsive during a health check. If the check fails, Docker can automatically restart the container. This can help ensure that containers remain running and responsive.'
        help: |-
            [AI] The `docker container create --help` command displays the help information for creating a new Docker container using the `docker create` command. Here's a brief explanation of the options:

            - `--name=<name>`: Assigns a name to the container.
            - `-d|--detach=false`: Runs the container in detached mode (in the background). By default, it's set to false and runs the container in foreground.
            - `-p|--publish=<host>:<container>`: Publishes a container port to the host.
            - `--restart=<none|any|on-failurure>`: Sets the container restart policy.
            - `--image=<image:tag>`: Specifies the Docker image to use when creating the container.
            - `--network=<network>`: Connects the container to a specific network.
            - `--rm`: Automatically removes the container when it stops.
            - `--volume=<host>:<container>|<bind-mount>|<named>`: Sets up one or more volume mounts for the container.

            These are just some of the most common options. You can get a complete list by running the command with no arguments.
        hostname: '[AI] The `--hostname` option when creating a Docker container with the `docker create` command sets a custom hostname for the container instead of using the default one generated by Docker. This can be useful in specific use cases, such as setting up containers that need to communicate with each other using their hostnames or integrating them into a larger system where hostnames are used for identification.'
        init: '[AI] The `docker container create --init` command is used to create a new Docker container from an image without running it immediately. The `--init` flag ensures that a PID 1 process (usually named `tini`) is run in the container to initiate and manage the primary process, providing proper process management and forwarding of signals, such as SIGTERM, to the application inside the container. This flag is important when running containers that have an entrypoint but no command specified, or when you want to ensure that your container starts reliably.'
        interactive: '[AI] The `docker create` command with the `--interactive` flag is used to create a new Docker container in an interactive mode. This means that the container will run in the foreground and will be attached to your terminal, allowing you to interact with it using commands like `cat`, `top`, or `tail`. In this way, you can see the output of the container''s processes and interactively manage the container without having to detach and attach to it repeatedly. This flag is particularly useful when testing applications inside a container or for debugging purposes.'
        io-maxbandwidth: '[AI] The `--io-maxbandwidth` flag is a Docker option used when creating a container. It sets a maximum I/O (Input/Output) bandwidth for the container''s network connections. This can help ensure that containers do not monopolize available network resources, preventing potential bottlenecks and improving overall system performance. The value is specified in bytes per second (bps). For instance, `--io-maxbandwidth 10m` sets a limit of 10 megabits per second or 80 Mbps.'
        io-maxiops: '[AI] The `--io-maxiops` flag is an option used with the `docker create` command for creating Docker containers. It sets the maximum I/O operations per second (IOPS) limit for the container''s storage volume or device. This can be useful for managing resource usage and ensuring predictable performance in environments where I/O-intensive workloads are being run. Setting a higher limit may improve the responsiveness of I/O-bound applications but could potentially lead to contention and degraded performance for other containers sharing the same physical storage. The exact value set with `--io-maxiops` depends on the specific requirements of your application and infrastructure.'
        ip: '[AI] The `--ip` option in the `docker create` command is used to set a custom IP address for a new Docker container. By default, Docker assigns an IP address from the private network automatically. But with the `--ip` flag, you can specify an IP address that will be assigned to the container when it''s created. This can be useful in certain network configurations where you need more control over the IP addresses of your containers.'
        ip6: '[AI] `docker container create --ipv6` is a command used to create a new Docker container with IPv6 network stack support. When creating a container, you can enable IPv6 networking by passing the `--ipv6` flag. This means that the container will be able to communicate over IPv6 networks and can also receive an IPv6 address assigned from the Docker daemon or the host system, depending on the networking configuration.'
        ipc: |-
            [AI] The `--ipc` option in the `docker create` command is used to configure the Docker networking and inter-process communication (IPC) mode for the container.

            By default, containers share the same IPC namespace with the host system, meaning that they can communicate with each other via named pipes, shared memory, and semaphore files just like processes on the host.

            The `--ipc` flag allows you to customize this behavior by creating a new IPC namespace for the container or linking it to an existing one. This can be useful in specific use cases where fine-grained control over inter-container communication is required, such as when running multiple containers that need to coordinate with each other through shared resources.

            For example, `--ipc="host"` sets the IPC mode to "host" which makes the container use the IPC namespace of the host system, while `--ipc="container:<container_name>"` links the new container's IPC namespace to an existing one with the specified name. Other possible values include "shareable," which creates a new shared IPC namespace, and "none," which makes the container use its own isolated IPC namespace.
        isolation: |-
            [AI] The `--isolation` flag in the `docker create` command is used to specify the isolation level for the new Docker container. Isolation levels define how isolated a container is from the host system and other containers.

            There are three isolation levels:

            1. **Default (no option)**: This is the traditional container execution mode, where the container shares the kernel with the host system and other containers. This offers less isolation than other modes.
            2. **User Namespace**: In this mode, the container runs in its own user namespace, which isolates processes and users within the container from those on the host system.
            3. **Namespace (mTLS)**: This is the most isolated mode and requires a mutual TLS (mTLS) setup between the containers and the Docker daemon. In this mode, the container runs in its own network namespace, PID namespace, user namespace, and other namespaces, making it completely isolated from the host system and other containers.

            In summary, the `--isolation` flag in the `docker create` command is used to set the desired level of isolation for the new container by choosing one of the available isolation modes (default, user namespace, or namespace with mTLS).
        kernel-memory: '[AI] The `docker container create` command is used to create a new Docker container without starting it. The `--kernel-memory` flag is an optional argument that allows setting the kernel memory limit for the container. This flag sets the maximum amount of memory that the Linux kernel will make available to the container''s processes. By default, Docker containers have no explicit memory limit set by the kernel. Setting a memory limit can help prevent Out-of-Memory errors in the container and improve system stability. The format for specifying the memory limit is `<size>[k|M|G]`, where `<size>` is the amount of memory, and `k`, `M`, or `G` is the unit (kilobytes, megabytes, or gigabytes, respectively). For example, `--kernel-memory=512M` sets a kernel memory limit of 512 megabytes for the container.'
        label: '[AI] `docker container create --label` is a command used to create a new Docker container with metadata in the form of key-value pairs attached as labels. The `--label` option followed by the label key and value, allows you to assign custom metadata when creating a container. This can be helpful for organizing and managing containers with additional information beyond their names. Multiple labels can be added using multiple `--label` options or a single `--label-key=value1,value2` format.'
        label-file: '[AI] The `--label-file` option in the `docker create` command is used to apply labels to a Docker container from a file instead of specifying them individually as key-value pairs. The file should contain one label per line, in the format `KEY=VALUE`. This can be useful for managing and organizing containers with large numbers of labels or when applying consistent labels across multiple containers.'
        link: '[AI] The `--link` option in the `docker create` command is used to create a link between containers. With this option, you can publish a service on one container and access it from another container as if it was a host service. This allows for easier communication between containers, without the need for explicit IP addresses or host port mappings. When using `--link`, Docker creates an entry in the linked container''s `/etc/hosts` file to map the link name to the source container''s IP address.'
        link-local-ip: |-
            [AI] The `--link` flag when creating a Docker container allows linking the created container to one or more existing containers, creating a network connection between them. With the introduction of Docker networks in version 1.9, the use of `--link` is generally discouraged as it creates a hard-coded dependency between containers and can lead to network address conflicts.

            However, there is a variant called `--link-local-ip`, which is used to link containers using their local IP addresses instead of their Docker internal network names. This option was introduced in Docker version 1.7. It allows the linked container to access the services exposed by the linked container directly without requiring knowledge of the internal network name or needing to set up additional networking configurations.

            For example, `docker create --link my-linked-container:inner my-new-container --link-local-ip` creates a new container called "my-new-container" and links it to an existing container called "my-linked-container". The new container can then access the services of the linked container using the local IP address of the linked container.
        log-driver: '[AI] The `docker container create --log-driver` option in Docker is used to specify a custom logging driver for the container being created. When creating a container with this option, Docker does not start the container immediately but instead builds an image with the specified logging driver configuration. This allows for more control over how container logs are handled and processed, enabling various use cases such as forwarding logs to external systems or using specific log formats. The logging drivers can be configured locally or remotely and come built-in with Docker or custom developed.'
        log-opt: '[AI] The `--log-opt` option in the `docker create` command is used to configure logging settings for the newly created Docker container. It allows you to specify various log options such as max-size, max-file, and labels, which can help manage and organize your container logs effectively. For instance, `--log-opt max-size=10m` sets the maximum size of the log files to 10 megabytes or `--log-opt label=app=myapp` adds a custom label to the logs for easier identification.'
        mac-address: |-
            [AI] The `--mac-address` option in the `docker create` command allows you to set a custom MAC address for the virtual Ethernet adapter of a new Docker container. This can be useful in specific networking scenarios, such as when you need to ensure that containers have unique MAC addresses or when integrating with third-party tools that rely on MAC addresses for identification.

            When you use this option, you must provide a valid MAC address in the format `xx:xx:xx:xx:xx:xx`. For example:

            ```
            docker create --name my-container --mac-address 02:45:60:8D:01:23 image:latest
            ```

            This creates a new container named "my-container" using the specified Docker image, and sets its virtual Ethernet adapter MAC address to `02:45:60:8D:01:23`. Keep in mind that setting custom MAC addresses for containers might not be supported by all Docker network drivers or hosting providers. Always consult the documentation of your specific use case before using this option.
        memory: '[AI] The `docker container create` command is used to create a new Docker container from an image without immediately starting it. The `--memory` option sets the limit on the amount of memory that can be allocated to the container. This value is specified in bytes (for example, "50m" for 50 megabytes). By using this flag, you can ensure that containers have sufficient memory to run without overwhelming the host system and potentially causing performance issues or even crashes.'
        memory-reservation: '[AI] `docker container create --memory-reservation` is a command used to create a new Docker container with a pre-allocated memory limit. This option allows you to reserve a specific amount of memory for the container at the time of creation, ensuring that the container has enough memory available to run effectively without being affected by other resource-hungry containers in the host system. By specifying `--memory-reservation <size>`, you can allocate a fixed amount of memory (in bytes) for the container. This can help improve the overall performance and stability of your Docker environment.'
        memory-swap: |-
            [AI] The `docker create` command is used to create a new Docker container, but not start it. The `--memory-swap` option sets both the container's RAM and swap limit in bytes.

            For example, `docker create --memory=2g --memory-swap=4g myimage:latest` creates a container with a RAM limit of 2GB and a swap limit of 4GB. This can help ensure that containers have sufficient resources for their intended workloads.
        memory-swappiness: '[AI] The `--memory-swappiness` option in the `docker create` command is used to set the memory swappiness level for a Docker container. Swappiness is a Linux kernel parameter that determines how aggressively the system will swap data from RAM to the disk, and vice versa. A value closer to 0 means the system will try to keep as much data in RAM as possible, while a value closer to 100 means the system will more readily swap data out to make room for other processes. By default, Docker containers inherit this setting from their host system. However, setting `--memory-swappiness` allows you to specify a different level for the container, with values ranging from 0 (least swapping) to 100 (most swapping). This can be useful in managing memory usage and performance for specific containers.'
        mount: |-
            [AI] `docker container create --mount` is a command used to create a new Docker container with specific mount options. The `--mount` flag allows you to define how the container's filesystem will be connected to the host filesystem or other containers.

            You can use various sub-options under `--mount` like:

            1. `type=bind`: Bind a volume from the host filesystem to a container, making them share the same file.
            2. `type=volume`: Create or reuse a Docker volume.
            3. `src=<host_path|src_container:src_path>`, `dst=<container_path>`: Bind a host directory or a source container's directory to a container path.
            4. `readonly=true/false`: Set read-only access for the container filesystem.
            5. `defaultMode=<mode>`: Set default file permission (octal number) for containers created from an image.

            By using the appropriate mount options with `--mount`, you can control how data is shared and accessed between the host, Docker volumes or other containers.
        name: |-
            [AI] The `docker container create` command is used to create a new Docker container with the specified configuration. The `--name` option sets the name for the container. Once the container is created, you can start it using the `docker start` command. For example:

            ```bash
            $ docker container create --name my_container image:latest
            ```

            This command creates a new container named "my\_container" from the "image:latest" image. After running this command, you'll have a new container that can be started using `docker start my_container`.
        net: |-
            [AI] `docker create` is a command used to create a new Docker container from an image without starting it. The `--net` flag is used to configure the networking mode for the container.

            There are different networking modes in Docker:

            1. Bridge network: This is the default mode when no networking flag is specified. Each container connected to the bridge network is accessible via the host's IP address and a unique port. Containers on the same bridge network can communicate with each other directly.
            2. Host network: In this mode, containers share the network stack of the Docker daemon. They have the same IP addresses and are directly reachable from the host and other containers without requiring extra ports. This is useful for testing or when working in a trusted environment.
            3. Macvlan network: This provides each container with a unique MAC address and IP address within a subnet, allowing communication between them using their container names as hosts. This mode does not require the containers to be on the same host as it creates a new virtual switch for the network.
            4. Overlay network: In this mode, multiple Docker hosts can communicate with each other by creating an overlay network that is virtualized across multiple hosts. Containers within an overlay network can have multiple interfaces, and the routing table on the host determines how traffic flows between containers.
            5. Custom networks: You can also create your own custom networks using Docker Compose files or networking plugins for advanced use cases like Kubernetes networks.

            By using the `--net` flag with `docker create`, you can specify which of these networking modes to use for your new container.
        net-alias: '[AI] The `docker create` command is used to create a new Docker container, but not start it. The `--net-alias` option allows you to assign a custom name to the container''s network interface in the Docker network. This can be useful for simplifying network communications between containers or for easier reference when working with complex networking setups. For example, `docker create --name myapp --net-alias my-app-network myimage:latest` would create a new container called "myapp" and assign the network interface the alias "my-app-network".'
        network: '[AI] The `docker create` command with the `--network` flag is used to create a new Docker container and specify a custom network for it to join during container creation. This can be useful when creating multiple containers that need to communicate with each other without exposing their ports to the host or to the outside world. The specified network can be an existing network, or a new one can be created using other Docker network commands. When the `--network` flag is used, no container is started immediately; instead, only the container image is pulled and the container is created but not run. This allows you to configure additional settings for the container before starting it. The final step would be running the container using the `docker start` command.'
        network-alias: '[AI] The `--network-alias` option when creating a Docker container with the `create` command sets a custom hostname or alias for the container within the Docker network. This can be useful for simplifying service discovery and communication between containers. For instance, instead of using IP addresses to communicate between containers, you can use their aliases as if they were separate machines on the network.'
        no-healthcheck: '[AI] The `docker create` command with the `--no-healthcheck` flag instructs Docker not to set up a container health check when creating a new container. A health check is a process run periodically in a container to assess its status and report back to Docker Swarm or Docker Compose. This flag can be used when you want to manage the container''s health monitoring yourself.'
        oom-kill-disable: '[AI] The `--oom-kill-disable` flag in the `docker create` command is used to prevent Docker from killing a container when it runs out of memory. By default, Docker will automatically kill a container that exceeds its memory limit to free up resources for other containers. However, this flag can be used to override that behavior and keep the container running even if it''s using more memory than allocated. It should be noted that keeping a memory-hungry container running indefinitely without adequate resources may lead to performance issues or crashes.'
        oom-score-adj: |-
            [AI] The `docker container create` command is used to create a new Docker container from an image without immediately starting it. The option `--oom-score-adj` allows you to adjust the Out of Memory (OOM) scoring for the container.

            This score determines in what order OOM killer will target containers when system memory is running low. A lower score indicates that a container will be killed before containers with higher scores, thus prioritizing containers with higher scores for keeping their resources during memory pressure situations. By default, Docker sets this value to 0 for newly created containers. You can use `--oom-score-adj` to set a custom value from -1000 (highest priority) to +1000 (lowest priority).
        pid: '[AI] The `--pid` option when using the `docker container create` command instructs Docker to use the host''s PID namespace for the newly created container instead of creating a new one. This means that the containers'' processes will be integrated into the host''s process table, sharing the same PID number space. As a result, containers created with this option will not have their own separate process tables and are more tightly integrated with the host system.'
        pids-limit: '[AI] The `--pids-limit` flag in the `docker create` command is used to set a limit on the maximum number of processes that can be created within a container. This can be useful for limiting the resource usage or managing the process isolation of a container. When you run `docker create --pids-limit <number> <image>`, Docker will create a new container with the specified limit on the maximum number of processes that can be spawned within it. By default, there is no limit on the number of processes in a container.'
        platform: '[AI] The `--platform` option in the `docker create` command is used to specify the target platform for creating a new Docker container. This can be useful when building multi-platform Docker images, where you want to create containers that will run on specific operating systems and architectures. By using `--platform <OS> <ARCH>`, you can set the desired OS (operating system) and architecture (32 or 64-bit) for the container. For example, `--platform linux/amd64` would create a container for a 64-bit Linux system. This option helps ensure that containers are created with the appropriate settings to run efficiently on their intended platforms.'
        privileged: '[AI] The `--privileged` flag when using the `docker create` command grants the container the most privileged level of access to the host system. This means that the container can perform any operation on the host, including changing the host''s file system, setting up raw sockets and devices, and managing other containers or the Docker daemon itself. It should be used with caution as it effectively bypasses many of the security features provided by Docker, and is typically only needed for specific use cases, such as running legacy applications that require root access to function properly.'
        publish: '[AI] The `--publish` flag in the `docker create` command is used to publish a container''s port(s) to the host machine. This means that any traffic sent to the published port on the host will be forwarded to the corresponding port inside the container, allowing external access to services running inside the container. The flag accepts one or more pairs of port numbers in the format `<host_port>:<container_port>`. For example, `--publish 80:80` would publish container port 80 to host port 80.'
        publish-all: '[AI] The `--publish-all` option in the `docker create` command is used to publish all exposed ports of a Docker container to the host system randomly at container creation. This means that the Docker daemon selects an available port on the host for each exposed port in the container and maps them accordingly without requiring explicit configuration. For instance, if a container has two exposed ports (e.g., 80 and 443), the Docker daemon will randomly assign two open ports on the host and map those ports to the container''s ports (80 and 443) when the container is run. This command simplifies the process of making containers accessible from the host by automatically handling port mapping.'
        pull: |-
            [AI] The `docker container create --pull` command is used to create a new Docker container from an image, pulling the latest version of that image from a registry if it doesn't already exist locally. Here's a brief explanation of each part:

            * `docker container create`: This is the base command for creating a new Docker container.
            * `--pull`: The `--pull` option tells Docker to automatically pull the latest image from the registry if it doesn't already exist locally before creating the container.

            So, in summary, `docker container create --pull` creates a new container using an image that is pulled from the registry if it isn't already available on the local system.
        quiet: '[AI] The `docker container create --quiet` command is used to create a new Docker container in quiet mode, which means that it will run without any output or progress messages being displayed in the terminal. This can be useful for automating container creation as part of a script or pipeline, where you don''t want the extra output cluttering up the console.'
        read-only: '[AI] The `--read-only` flag when using the `docker create` command instructs Docker to create a new container with a read-only file system. This means that any changes made to the file system within the container will not be persisted once the container is stopped or removed. It''s often used for containers that serve as immutable base images or run applications where data should not be modified.'
        restart: |-
            [AI] The `--restart` option in the `docker create` command sets the policy for what action Docker should take when a container stops or is killed. There are several restart policies available, such as:

            * `always` (default): Always start the container when it stops or is killed.
            * `on-failures:` Only start the container if it fails to run.
            * `unless-stopped`: Only stop the container if it is explicitly stopped by the user.
            * `when-not-started`: Start the container only once, when it is first created or brought back up after being stopped.

            For example, `docker create --name mycontainer image:tag --restart always` would set the policy for container `mycontainer` to start automatically whenever it stops or is killed.
        rm: '[AI] The `--rm` flag used with the `docker container create` command tells Docker to automatically remove the container once it has stopped running and its processes have finished exiting. This can be useful for disposable containers, such as those used in continuous integration or testing scenarios, where you don''t need to keep the container around after it has served its purpose. It simplifies container management by automatically removing the container and its associated files when it is no longer needed.'
        runtime: '[AI] The `--runtime` option in the `docker container create` command is used to specify which runtime engine should be used to run the container. Docker by default uses its own built-in runtime, called "docker-container-engine" or "docker-runc". However, you can choose to use other runtime engines like containerd, CRI-O, etc., by providing their names as an argument to this option. This can be useful when working with different container runtimes for various reasons such as compatibility with specific container images or performance optimizations.'
        security-opt: |-
            [AI] The `--security-opt` flag in the `docker container create` command is used to set various Security Options for a Docker container. These options help improve the security of the container by controlling things like:

            1. Seccomp (Security Compute Capability): It allows you to restrict the system calls a container can make, helping prevent potential exploits and attacks.
            2. AppArmor or SELinux: These are Mandatory Access Control (MAC) frameworks that control processes based on defined rules, helping ensure that they only access the resources they need.
            3. Capabilities: It allows you to specify which Linux capabilities a container can use, reducing the attack surface of the container.
            4. Networking: By default, Docker containers have access to all the host's network interfaces. With `--security-opt`, you can change this behavior by configuring options like `--network-mode`, `--privileged` or `--link`.
            5. User Namespace: It allows you to isolate a container's user ID namespace, making it impossible for a process inside the container to gain access to another user on the host system.

            By using these security options effectively, you can help minimize potential risks and enhance the overall security of your Docker containers.
        shm-size: '[AI] The `--shm-size` flag in the `docker create` command is used to set the size of the Docker container''s shared memory (also known as Temporary Filesystem). Shared memory is a type of inter-process communication used by Docker to allow containers to share large amounts of data quickly and efficiently. The default size for this memory is typically 64MB, but it can be increased using this flag. For example, `--shm-size=1g` sets the shared memory size to 1GB. This can be useful for applications that require a large amount of shared memory, such as databases or media servers.'
        stop-signal: '[AI] The `--stop-signal` flag when using the `docker create` command allows you to specify the signal Docker should send to a container to initiate graceful termination. By default, Docker uses the SIGTERM signal (number 15). However, with this flag, you can change it to another signal such as SIGKILL (number 9), which does not allow the container to perform any graceful shutdown actions. The purpose of using different signals is that some applications may have specific shutdown behaviors when they receive certain signals, ensuring a more controlled and orderly termination process.'
        stop-timeout: '[AI] The `--stop-timeout` flag in the `docker container create` command sets a timeout for how long Docker should wait before forcefully stopping a container if it''s not responding. Once the specified time elapses, Docker sends a SIGTERM signal to the container and waits for a graceful shutdown. If no response is received within this period, Docker sends a SIGKILL signal to the container to terminate it forcefully. The default value for `--stop-timeout` is 10 minutes (600 seconds). This flag can be useful when creating containers that may take longer than usual to start or have issues that require manual intervention.'
        storage-opt: '[AI] The `docker create` command is used to create a new Docker container but not start it. The `--storage-opt` option is used to pass custom storage options when creating the container. This allows for more advanced configuration of the container''s storage settings, such as setting up persistent volumes or using specific storage drivers. For example, `--storage-opt docker.storage.backend=azurefile --storage-opt docker.storage.azure.account.key=<KEY>` can be used to configure a Docker container to use Azure File for its data storage.'
        sysctl: |-
            [AI] The `docker create` command is used to create a new Docker container, but not start it. The `--sysctl` option allows you to set custom sysctls (Linux kernel parameters) for the container at creation time.

            For example, `docker create --sysctl net.core.rmem_max=65536 --sysctl net.ipv4.tcp_tw_reuse=1 myimage:latest` creates a new container based on `myimage:latest`, and sets the `net.core.rmem_max` and `net.ipv4.tcp_tw_reuse` sysctls to 65536 and 1, respectively. These settings persist for the container once it is started.

            Using this option can help optimize network performance or security in your containers, among other things.
        tmpfs: '[AI] The `--tmpfs` option in the `docker create` command is used to mount a temporary filesystem (`tmpfs`) as a volume or file system inside a Docker container. A `tmpfs` filesystem is an in-memory file system that does not persist data when the container is stopped or removed. This can be useful for storing data that is not meant to be kept between container runs, such as caches or build artifacts. When used with `docker create`, this option sets up the `tmpfs` mount during container creation, making it available once the container is run.'
        tty: '[AI] The `docker create` command is used to build a new Docker container from an image without actually starting it. The option `--tty` allocates a pseudo-TTY (teletype) for the container, which allows for interactive use of the container''s standard input, output, and error streams. In simpler terms, it makes the container''s console accessible when running interactive applications inside the container.'
        ulimit: '[AI] The `docker create` command is used to create a new Docker container, but not start it. The `--ulimit` option sets custom Ulimit (Uniform Limits in File Systems) settings for the container. Ulimits are limits on various resources such as CPU usage, memory, number of open files, and more that can be applied to a container or process. With `--ulimit`, you can set specific resource limitations at the time of container creation, using the format `<resource> <type> <value>`. For example: `--ulimit STACK=5000` sets a stack size limit of 5000 bytes for the container. Other resources include CORE (CPU), DATA (data segment size), FASZC (file size), NOFILE (maximum number of open files), NPROC (maximum number of processes), and RLIMIT_AS (memory usage).'
        user: '[AI] The `--user` option in the `docker create` command sets the User Namespace for the new Docker container. This allows specifying a custom UID and GID (User ID and Group ID) for the container''s main process, providing enhanced security or functionality for specific use cases. By default, containers run with the root user (0:0).'
        userns: |-
            [AI] `docker container create --userns` is a command used in Docker to create a new container with a custom User Namespace. This option allows assigning a specific user or group ID for the container, isolating it from the host system and other containers at a finer level than just using UIDs and GIDs.

            This can be useful in scenarios where you want to run a container as a specific non-root user or group, enhancing security by limiting container capabilities. When using `--userns`, Docker creates a new Namespace for the container's PID namespace, network stack, and UID/GID mappings, providing better isolation between the host and containers.
        uts: '[AI] The `docker create` command is used to create a new Docker container, but not start it. The `--uts` option sets up the container''s utility and time-sharing (UTS) namespace, making the container share the same UTS namespaces with the host system or another container. This means that they will have the same /etc/passwd, /etc/group, and other related files. It can be useful for maintaining consistency across containers or reducing network traffic for certain applications.'
        volume: '[AI] The `docker create` command with the `--volume` flag is used to create a new Docker container but with an additional volume mounted inside. A volume is a way to persist data generated or used by a container beyond its lifetime. With `--volume`, you can specify one or more directories on the host machine that will be made available inside the container. These volumes can be named, anonymous, or external (using a Docker volume). The flag takes value in the format `<host-dir>:<container-dir>` and creates the specified directory in the container if it doesn''t already exist. This command alone does not start the container; you need to use the `docker start <container-name>` command to run the container.'
        volume-driver: |-
            [AI] The `--volume-driver` option in the `docker create` command is used to specify which volume driver to use when creating a Docker volume as part of container creation. A Docker volume is a data container that can be accessed and shared by one or more containers. Volume drivers are plugins that provide different ways to manage data volumes, such as using local filesystems, networked storage, or cloud services like Amazon EFS or Google Persistent Disks. By default, Docker uses the `local` volume driver, but you can choose another available driver by using this option. For example:

            ```bash
            docker create --volume-driver=awselsfuse my_image -v my_volume:/data aws://account/region/my_bucket:/path
            ```

            This command creates a container named `my_image` and mounts a Docker volume named `my_volume` using the AWS Elastic NFS-Fuse (awselsfuse) volume driver, which allows you to mount EFS volumes as Docker volumes.
        volumes-from: '[AI] `docker create` is a command used to create a new Docker container from an image, but not start it. The `--volumes-from` option allows binding the volumes from one container to another at creation time. This means that any data stored in the source container''s volumes will be accessible in the new container. It helps in sharing data between containers without using external volumes or networks.'
        workdir: '[AI] The `--workdir` option in the `docker create` command sets the working directory for containers at runtime. It specifies the initial working directory for any processes running in the container. When an image is used to create a container, this option allows you to set the default working directory for the application within that container. This can be useful for ensuring that your applications start up in the correct directory or for maintaining consistency across containers based on the same image.'
