# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: makepkg
description: make packages compatible for use with pacman
flags:
    --allsource: Generate a source-only tarball including downloaded sources
    --asdeps: Install packages as non-explicitly installed
    --check: Run the check() function in the PKGBUILD
    --config=: Use an alternate config file (instead of '/etc/makepkg.conf')
    --holdver: Do not update VCS sources
    --key=: Specify a key to use for gpg signing instead of the default
    --needed: Do not reinstall the targets that are already up to date
    --noarchive: Do not create package archive
    --nocheck: Do not run the check() function in the PKGBUILD
    --noconfirm: Do not ask for confirmation when resolving dependencies
    --noprepare: Do not run the prepare() function in the PKGBUILD
    --noprogressbar: Do not show a progress bar when downloading files
    --nosign: Do not create a signature for the package
    --packagelist: Only list package filepaths that would be produced
    --printsrcinfo: Print the generated SRCINFO and exit
    --sign: Sign the resulting package with gpg
    --skipchecksums: Do not verify checksums of the source files
    --skipinteg: Do not perform any verification checks on source files
    --skippgpcheck: Do not verify source files with PGP signatures
    --verifysource: Download source files (if needed) and perform integrity checks
    -L, --log: Log package build process
    -R, --repackage: Repackage contents of the package without rebuilding
    -S, --source: Generate a source-only tarball without downloaded sources
    -V, --version: Show version information and exit
    -c, --clean: Clean up work files after build
    -d, --nodeps: Skip all dependency checks
    -e, --noextract: Do not extract source files (use existing $srcdir/ dir)
    -f, --force: Overwrite existing package
    -g, --geninteg: Generate integrity checks for source files
    -h, --help: Show this help message and exit
    -i, --install: Install package after successful build
    -m, --nocolor: Disable colorized output messages
    -o, --nobuild: Download and extract files only
    -p=: Use an alternate build script (instead of 'PKGBUILD')
    -r, --rmdeps: Remove installed dependencies after a successful build
    -s, --syncdeps: Install missing dependencies with pacman
documentation:
    command: '[AI] `makepkg` is a utility package in Arch Linux and other Arch-based distributions, used to create local RPM-like packages from source code installations. It automatically builds and compiles the software, creates a .pkg.tar.zst file, and optionally signs it with GPG keys for added security. The resulting package can be installed using standard package managers like `pacman`.'
    flag:
        allsource: |-
            [AI] `makepkg --asource` is a command used in Arch Linux and other Arch-based distributions to download, compile, and build packages from source. The `--asource` option tells `makepkg` to also download the source code of the package instead of using a pre-existing package file.

            When you run `makepkg --asource`, it will first fetch the source code from the official Arch Linux repositories or other specified sources, then extract and prepare the source files. After that, it will apply any necessary patches, build the package, and finally create a PKGBUILD file, which is used to install the package using `pacman`.

            This command is often used when you want to compile a specific version of a software or when the pre-built package in the repository does not meet your requirements. The resulting PKGBUILD file can then be added to your local package database and installed like any other Arch Linux package.
        asdeps: |-
            [AI] `makepkg --asdeps` is a command used in Arch Linux and other Arch-based distributions for building and installing packages from source. The option `--asdeps` (short for "automatic dependencies") automatically downloads and builds required dependencies that are not already installed on the system, making the build process smoother and more self-contained.

            This command retrieves the necessary source code of dependencies and compiles them with the same build flags as the main package being installed, ensuring compatibility between different packages. The resulting PKGBUILD files for the dependencies are saved in `/var/cache/pkg/` directory before installing them as regular packages.
        check: '[AI] `makepkg --check` is a command used in the Arch Linux packaging system to perform a dry run or simulation of a package build and installation process. It checks the integrity of the PKGBUILD file, verifies that all necessary dependencies are installed, and performs other preliminary checks without actually building or installing anything. This helps ensure the success and validity of a package build before executing the full `makepkg` command.'
        clean: '[AI] `makepkg --clean` is a command used in the Pacman package manager for the Arch Linux distribution. This command cleans up the build directory created during the installation or compilation of a package using Makefiles, removing unnecessary files and leaving the directory ready for a fresh build. It helps save disk space and reduce clutter while maintaining the option to rebuild packages easily without having to download their contents again.'
        config: '[AI] `makepkg --config` is a command used in the Arch Linux package management system, specifically with the makepkg utility. This command displays and allows modification of various configuration options for the current build process. It opens the Pacman keyfile editor, which contains settings like the repository URLs, signature keys, and other relevant parameters. The changes made will persist across builds unless explicitly overridden by individual package options. In summary, `makepkg --config` is a command that lets users customize the build process for Arch Linux packages by editing configuration files.'
        force: |-
            [AI] `makepkg --force` is a command used in Arch Linux and other Arch-based distributions to build and install packages from source. The `--force` option is used when there are conflicts or missing dependencies between the required system packages and the package being built, forcing the installation anyway.

            When `makepkg --force` is run, it will attempt to build the source package as usual. If it encounters dependency issues, it will try to install the missing dependencies using the system's package manager (usually Pacman). If some or all of the dependencies cannot be installed due to conflicts or other issues, `makepkg --force` will continue with the installation of the source package despite these unmet dependencies.

            It is important to note that using `--force` can potentially result in an unstable system and may introduce conflicts between packages. It should be used with caution and only when necessary.
        geninteg: '[AI] `makepkg --geninteg` is a command used in the Arch Linux package management system, specifically with the Makefile-based package building process. This command generates Integrity checks (also known as checksums) for the built package files. The generated integrity checks include MD5 and SHA256 hashes, which can be verified during installation to ensure the package''s authenticity and integrity. These checks help maintain the security of the system by ensuring that only trusted packages are installed.'
        help: '[AI] `makepkg --help` is a command used in the Arch Linux packaging system. It prints out detailed help information about the `makepkg` utility. The options and usage for building and installing packages from source are displayed, including flags like `-i`, which interactsively prompts for user input during the build process, or `-s`, which specifies a separate installation directory. Other topics covered include dependencies resolution, signing packages, and cleaning up after the build.'
        holdver: '[AI] `makepkg --holdver` is a command used in Arch Linux and its derivatives to build and install packages with their dependencies, while keeping previously installed versions of the same packages that are being upgraded as backups. This can be useful for testing new package versions before making them permanent or rolling back to previous working versions if an update causes issues. The `--holdver` flag ensures that the installed versions of dependent packages that are being updated are not overwritten, maintaining a consistent package version tree.'
        install: '[AI] `makepkg --install` is a command used in Arch Linux and other Arch-based distributions to build and install packages from source using the `makepkg` utility. The `--install` flag instructs `makepkg` to not only build the package but also install it after the build process is completed. This command streamlines the process of installing source packages by combining both steps into one command.'
        key: '[AI] The `makepkg --key` command is used in the Arch Linux package management system to generate or import GPG keys for use in signing packages during the build process. By default, it creates a new key pair using OpenSSL. If a key file is provided instead, it imports that specific key for signing. This added security measure helps ensure the integrity of locally built packages.'
        log: '[AI] `makepkg --log` is a command used in the Arch Linux packaging system, specifically when building packages from source. This command generates and displays a log file while building and installing the package. The log provides detailed information about the build process, including any errors or warnings that may occur. It helps users to understand what happens during the package build and installation, making it easier to troubleshoot issues if necessary.'
        needed: '[AI] `makepkg --needed` is a command used in the Arch Linux package management system. It generates a list of packages that are required to build a specific package, but does not download or install them. The output can be used to plan dependencies for offline builds or to verify if all needed packages are already installed before attempting a build.'
        noarchive: '[AI] `makepkg --noarchive` is a command used in Arch Linux and other Arch-based distributions to build and install local packages from source files without creating an Arch User Repository (AUR) package archive or uploading it to the AUR for others to use. Instead, the built package will be installed directly on the local system. This can be useful when you want to build and install a package locally without making it publicly available in the AUR.'
        nobuild: '[AI] `makepkg --nobuild` is a command used in Arch Linux and similar distributions to build and package software from source, but without actually building or installing the software itself. The `--nobuild` option instructs `makepkg` not to run the build process, meaning that only the package files will be generated, which can then be installed later using other tools like `pacman`. This method is useful for creating local packages, testing package builds, or when you don''t want the built software to interfere with your system.'
        nocheck: '[AI] `makepkg --nocheck` is a command used in Arch Linux and similar distributions to build and package software from source code. The `--nocheck` option disables the GPG signature check during the installation of the built package. This means that the authenticity of the package cannot be verified using this command, increasing the risk of installing potentially malicious software. It is generally recommended to only use `makepkg --nocheck` for trusted sources or when dealing with personal projects where security is less of a concern.'
        nocolor: '[AI] `makepkg --nocolor` is a command used in Arch Linux and other Arch-based distributions for building and packaging software from source using the Makefile provided with the source code. The `--nocolor` option disables colored output during the build process. It is useful for scripts or automated builds where colorful output may not be desired, or when running in terminal environments that do not support color.'
        noconfirm: '[AI] `makepkg --noconfirm` is a command used in Arch Linux and other Arch-based distributions for building and installing Pacman packages from source. The `--noconfirm` option skips the confirmation prompt before installing the package, allowing the process to run automatically without user intervention. This can be useful for scripts or automated build processes.'
        nodeps: '[AI] `makepkg --nodeps` is a command used in the Arch Linux distribution for building and packaging software from source. The `--nodeps` option disables the installation of dependencies required to build the package, which can be useful in certain situations like having specific versions of dependencies installed or when the dependencies are already available in the system. By using this option, the build process will only install the package itself, without pulling in any new dependencies.'
        noextract: '[AI] `makepkg --noextract` is a command used in Arch Linux and other Arch-based distributions for building and packaging software from source. The option `--noextract` tells makepkg not to extract the source tarball or download it if it''s already present in the working directory. Instead, makepkg assumes the source tarball is ready and proceeds with the build and packaging process. This can be useful when dealing with large downloads or when the source tarball has been obtained externally.'
        noprepare: '[AI] `makepkg --noprepare` is a command used in Arch Linux and other Arch-based distributions to build and package software from source. The `--noprepare` flag instructs `makepkg` not to perform the preparation stage, which includes downloading and checking the integrity of the package''s dependencies. This can be useful when you have already installed the required dependencies manually or want to avoid unnecessary network access. The build process itself will still run, creating a PKGBUILD file (if it doesn''t exist), compiling the source code, and producing the package files.'
        noprogressbar: '[AI] `makepkg` is a command-line tool used in the Arch Linux distribution to build and install software packages from source. The option `--noprogressbar` disables the progress bar during the package build process. This can be useful for users who prefer not to have a progress bar displayed, or for scripts that run multiple package builds in parallel without the need to monitor individual progress bars. The flag does not affect the actual building or installation of the packages; it only modifies the output to hide the progress bar.'
        nosign: '[AI] `makepkg --nosign` is a command used in Arch Linux and other Arch-based distributions to build and package software from source. The `--nosign` option tells the Makefile of the packaged software not to sign the resulting PKGBUILD file or package using GPG keys. This means that the generated package won''t have a signed signature, which can be useful for testing and local use, but it may not be suitable for distribution in repositories where signed packages are required for security reasons.'
        p: '[AI] `makepkg -p` is a command used in Arch Linux and other Arch-based distributions to build and prepare Pacman packages for local installation or distribution. The `-p` flag tells `makepkg` to generate only the package files without installing them, allowing easier transfer or manual installation using `pacman`. In essence, it''s a convenient way to build customized packages for specific system configurations or create distributions of software packages.'
        packagelist: |-
            [AI] `makepkg --packagelist` is a command used in Arch Linux and other Arch-based distributions for generating a list of installed packages that can be easily rebuilt or shared with others. It's part of the 'makepkg' utility, which is used to build and package software from source.

            When you run `makepkg --packagelist`, it scans your system for all installed packages managed by the Pacman package manager, then creates a file named 'package-list.txt' in the current directory that contains the complete list of those packages with their respective version numbers. This list can be used to recreate an identical set of installed packages on another system or to share it with others for synchronization purposes.
        printsrcinfo: '[AI] `makepkg --printsrcinfo` is a command used in the Pacman package manager for Arch Linux and related distributions. It generates metadata about an installed PKGBUILD package, displaying source package information such as the name, version, description, size, and download URLs of the source files. This command can be helpful when managing local packages or building packages from source.'
        repackage: '[AI] `makepkg --repackage` is a command used in Arch Linux and other Pacman-based distributions to create or update local PKGBUILD packages. The `--repackage` option rebuilds existing installed packages with the latest version available in the repositories, without changing their original PKGBUILD files. This results in updated packages being created as new versions, keeping the original package configuration.'
        rmdeps: |-
            [AI] `makepkg --rmdeps` is a command used in the Pacman package manager for Arch Linux and other Arch-based distributions. This command is used during the process of building a local PKGBUILD package from source code.

            When you run `makepkg`, it will build the package, install its dependencies, compile the source code, and create a binary package file. However, sometimes these installed dependencies are no longer needed once the package has been built.

            `--rmdeps` option is used to remove those unnecessary dependencies after building the package. This helps keep your system lean and reduces disk usage as well as potential security vulnerabilities from unused packages. It is recommended to use `--asmver` or `--syncdeps` when using `--rmdeps` to ensure all dependencies are correctly handled.
        sign: '[AI] `makepkg --sign` is a command used in Arch Linux and its derivatives to create locally signed packages from source. When you build a package using `makepkg`, it generates an `PKGBUILD` file, which contains metadata about the package. The `--sign` option adds GPG signatures to this `PKGBUILD` file and the resulting PKG files, ensuring authenticity and integrity of the package during installation. This helps protect against potential attacks or tampering with the package files.'
        skipchecksums: '[AI] The `makepkg --skipchecksums` command is used in the Pacman package manager for Arch Linux and its derivatives to build and install a local PKGBUILD package without checking the package''s checksums during the installation process. This option can be useful when trusting the source of the PKGBUILD file but wanting to skip the time-consuming checksum verification, which may occur if the downloaded PKGBUILD is large or the connection speed is slow. However, using this flag comes with the risk of installing potentially compromised or incorrect packages. It''s essential to understand and trust the source of the PKGBUILD file before using `--skipchecksums`.'
        skipinteg: '[AI] `makepkg --skipinteg` is a command used in Arch Linux and other Arch-based distributions for building and installing packages from source. The `--skipinteg` option disables package integrity checks during the installation process. This means that `makepkg` will not verify the checksums of downloaded files or the generated PKGBUILD script against its upstream database. It''s often used when building and installing custom packages, but it may increase the risk of installing corrupted or malicious software. Always ensure the source is trusted before using this flag.'
        skippgpcheck: '[AI] `makepkg --skippgpcheck` is a command used in Arch Linux and other PKGBUILD-based distributions to build and package software from source without checking the GPG signatures of the downloaded source files. This flag bypasses the verification step, which can be useful when dealing with trusted sources or when offline and unable to access the keys online. However, it''s important to note that using this option can pose a potential security risk as the authenticity of the downloaded files cannot be confirmed.'
        source: '[AI] `makepkg --source` is a command used in Arch Linux and its derivatives for building and installing packages from source tarballs. This command does not directly install the package, instead it downloads the latest version of the specified package''s source code from the web if needed, compiles it with provided flags, creates a PKGBUILD file (if necessary), and generates an .pkg.tar.zst or .pkgfile package that can be installed using `pacman` or other package managers. The generated package includes the compiled binaries, header files, and other necessary components.'
        syncdeps: '[AI] `makepkg --syncdeps` is a command used in Arch Linux and its derivatives to update the package database (i.e., synchronize it with the remote repositories) before building or installing a local Pacman package using `makepkg`. The `--syncdeps` option itself only fetches dependencies'' metadata, not their actual files. Once the dependency information is updated, `makepkg` can effectively build and install the desired package along with its prerequisites.'
        verifysource: '[AI] `makepkg --verifysource` is a command used in the Arch Linux package management system, Pacman. This command verifies the integrity of downloaded source packages before building and installing them. By running this command, it performs checks on the package''s signature using GPG keys to ensure that the downloaded source matches the original one from the repository. This helps maintain the security and authenticity of installed software in your system.'
        version: '[AI] `makepkg --version` is a command used in the Arch Linux distribution to check the version of the `makepkg` package builder tool. When executed, it will print out the version number of `makepkg`, allowing users to verify they have the latest version or troubleshoot potential issues with specific versions.'
