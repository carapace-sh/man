# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: merge-tree
description: Perform merge without touching index or working tree
group: interrogator
flags:
    --allow-unrelated-histories: Override common history check check and make the merge proceed anyway.
    --merge-base=: Specify a merge-base for the merge
    --messages: Write any informational messages such as "Auto-merging <path>" or CONFLICT notices to the end of stdout
    --name-only: In the Conflicted file info section
    --no-messages: Do not write any informational messages such as "Auto-merging <path>" or CONFLICT notices to the end of stdout
    -z: Do not quote filenames in the <Conflicted file info> section
documentation:
    command: '[AI] `git merge-tree` is a low-level Git command used for creating a new tree object based on two existing trees. It takes three arguments: the parent tree objects (these can be commit hashes or tree hashes), and optionally, a list of file changes to apply when creating the new tree. This command does not perform a merge in the traditional sense, but rather allows for manually specifying how to combine the contents of trees. It''s typically used for advanced use cases, such as creating a custom merge base or implementing non-fast-forward merges.'
    flag:
        allow-unrelated-histories: '[AI] `git merge-tree` is a low-level Git command used to create a new commit tree from two or more existing trees. The `--allow-unrelated-histories` option allows merging trees with completely unrelated histories, which means the trees do not share any common ancestors. This is useful in cases where you want to merge branches that have been developed independently for a long time, and a regular merge might not be possible due to conflicting changes. The resulting commit will have two parent commits instead of one, representing the merged histories.'
        merge-base: '[AI] The `git merge-tree` command is a low-level Git plumbing tool used to compute and create a new tree object representing the result of a three-way merge between two branches or commits. The `--merge-base` option specifies which of the two trees or commits to use as the base for the merge. It calculates the common ancestor of the two trees/commits, then merges the differences from each tree onto the base. The resulting new tree object represents the merged changes.'
        messages: '[AI] `git merge-tree` is a command used to create a new tree object in Git, representing the state of a merge between two branches or commits. The `--messages` option causes Git to show the commit messages associated with each parent commit during the merge process, in addition to creating the new merge commit. This can be helpful for understanding the context and changes introduced by the merge.'
        name-only: '[AI] `git merge-tree` is a Git command used to generate a new tree object representing the result of a hypothetical merge commit. The `--name-only` option is used with this command to print only the names (hashes and branches or commits) of the trees being merged instead of creating a new tree object. Essentially, it provides information about the trees to be merged without actually performing the merge.'
        no-messages: '[AI] `git merge-tree` is a low-level Git command used to create a new tree object that represents the result of a hypothetical merge commit. The `--no-messages` option is passed to suppress the generation and recording of any commit messages associated with this merge operation. In other words, it allows you to create the merge tree without actually creating or committing a merge commit. This command can be useful for scripts and automation tasks that need to perform a merge but don''t require an actual commit.'
        z: '[AI] `git merge-tree` is a Git command used to generate a tree object that represents the state of a repository after a merge commit. The `-z` option modifies this output by replacing regular newline characters with null bytes (ASCII character 0), effectively encoding the tree data as a single binary blob in a Git commit message. This is useful for creating sparse or binary files as part of a custom merge commit.'
