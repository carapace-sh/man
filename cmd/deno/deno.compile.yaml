# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: compile
description: Compile the script into a self contained executable
flags:
    --allow-env?: Allow environment access
    --allow-ffi?: Allow loading dynamic libraries
    --allow-hrtime: Allow high resolution time measurement
    --allow-net?: Allow network access
    --allow-read?: Allow file system read access
    --allow-run?: Allow running subprocesses
    --allow-write?: Allow file system write access
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --prompt: Fallback to prompt if required permission wasn't passed
    --seed=: Seed Math.random()
    --target=: 'Target OS architecture [possible values: x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin, aarch64-apple-darwin]'
    --unsafely-ignore-certificate-errors?: 'DANGER: Disables verification of TLS certificates'
    --v8-flags?: 'Set V8 command line options (for help: --v8-flags=--help'
    -A, --allow-all: Allow all permissions
    -c, --config=: Load configuration file
    -o, --output=: Output file (defaults to $PWD/<inferred-name>)
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno compile` is a command used in Deno, a modern and secure TypeScript runtime. It compiles TypeScript or JavaScript code into executable Deno modules or binaries without requiring external setup or configuration files. This allows developers to easily share and run their code within the Deno ecosystem. The command takes one or more input file(s) as an argument and outputs the corresponding compiled output in the Deno module format (`.ts` or `.mjs`) or a standalone executable (`.exe` for Windows, `.app` for macOS, or `.out` for other platforms).'
    flag:
        allow-all: '[AI] `deno compile --allow-all` is a command used in Deno, a modern JavaScript runtime. This command disables all file and import permissions checks during compilation. In other words, it allows all imports and access to all files without any restrictions. It''s often used for testing or development purposes when you want to bypass the strict type checking and access control Deno provides, but be aware that using `--allow-all` can lead to potential security risks.'
        allow-env: '[AI] `deno compile` is a command-line tool for Deno, a modern and secure TypeScript runtime. The `--allow-env` flag enables reading of environment variables in the compiled Deno script. Without it, the script would run with a restricted environment. By using `--allow-env`, you allow specified environment variables to be accessible in the script, enhancing its flexibility and functionality.'
        allow-ffi: '[AI] `deno compile` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--allow-ffi` flag enables Foreign Function Interface (FFI) calls in the compiled script. FFI allows calling C functions or working with raw binary data from Deno, expanding its capabilities beyond pure TypeScript code. Be aware that using FFI comes with additional security risks and should be used with caution.'
        allow-hrtime: '[AI] The `deno compile` command is used to transpile and bundle TypeScript code into JavaScript using Deno, a modern runtime for JavaScript and TypeScript. The option `--allow-hrtime` is a permission flag that enables the use of the Node.js `performance.hrtime()` function in Deno. This function returns an array with the elapsed high-resolution time since the Unix epoch as a 64-bit floating point number, allowing for more precise timing measurements than Deno''s built-in `DateTime.now()`.'
        allow-net: '[AI] The `deno compile --allow-net` command is used in Deno, a modern and secure TypeScript runtime. It''s a flag that grants permissions to Deno scripts during compilation for interacting with the network using the Fetch API or other network modules. By including this flag when running the compiler, Deno acknowledges and accepts that the resulting script may access the internet, which could potentially pose security risks. This flag ensures that these actions are deliberate and explicitly allowed by the developer, promoting safety and control in the development process.'
        allow-read: '[AI] The `deno compile` command is a tool from Deno, a modern JavaScript runtime. The `--allow-read` flag is an optional argument that specifies which files or directories the compiled TypeScript or JavaScript code is allowed to read during execution. Without this flag, Deno enforces a strict access control policy by default and does not allow reading files except those imported in the source code. By including `--allow-read` followed by the paths or glob patterns, you''re granting permissions for your code to read those specific files, making it more flexible for working with external data.'
        allow-run: '[AI] `deno compile --allow-run` is a command used in Deno, a modern and secure TypeScript runtime. This command compiles TypeScript code into JavaScript using Deno''s built-in compiler. The `--allow-run` flag specifies that the output JavaScript file can be run directly without additional permission checks, bypassing Deno''s default safety measures. It is recommended to use this flag with caution, as it could potentially introduce security vulnerabilities if used with untrusted code.'
        allow-write: |-
            [AI] The `deno compile` command is a tool in Deno, a modern JavaScript runtime, used to compile TypeScript or JavaScript code into executable files. The option `--allow-write` is a part of Deno's security model, allowing the compiled script to write files during its execution.

            By default, Deno scripts run with minimal permissions and are not allowed to write files for security reasons. However, the `--allow-write` flag grants write access to specific directories or files by providing a JSON-like allow list in the script's imports section, such as:

            ```typescript
            import { permitWrite } from "https://deno.land/std@0.132.0/permissions/mod.ts";

            await permitWrite("/path/to/write");
            ```

            Using the `compile` command with the `--allow-write` flag will compile the code and include this allow list, enabling the script to write files when executed:

            ```bash
            deno compile --allow-write=["/path/to/write"] your_script.ts
            ```

            It's essential to be cautious while using the `--allow-write` flag as it can potentially introduce security vulnerabilities if not used correctly.
        cached-only: '[AI] The `deno compile` command is a tool provided by Deno, a modern and secure TypeScript runtime. The `--cached-only` flag is an option that instructs Deno to only check if the cache for the specified modules or files is up-to-date without actually recompiling them. This can save time in development workflows where frequent builds are not necessary, as it skips the compilation process but still checks for updates in the dependency tree.'
        cert: '[AI] `deno compile --cert` is a command used in Deno, a type-safe and secure runtime for JavaScript and TypeScript. This command is responsible for compiling TypeScript or JavaScript files into deno-compatible wasm (WebAssembly) modules with included SSL certificates. The `--cert` flag specifies that the given directories or files contain the SSL certificate(s) to be embedded in the generated wasm binary. Embedding certificates is useful for creating self-contained applications without depending on external certificates.'
        config: '[AI] The `deno compile` command is a tool from Deno, a modern and secure TypeScript runtime. The `--config` option is used to specify a `deno.json` configuration file for Deno projects. This file contains metadata about the project such as input files, flags for compilation, and environment variables. By using `--config`, you''re telling Deno to read the specified configuration file before starting the compile process, ensuring that the build is set up according to the project''s defined requirements.'
        import-map: '[AI] `deno compile` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--import-map` option is used to specify an import map file during compilation. An import map is a JSON file that defines custom module resolution rules for a Deno project. This can be useful in managing dependencies with unpublished or external packages not registered on deno.land, or when using multiple versions of the same package within one project. The import map file tells Deno how to locate and load these modules during runtime.'
        location: '[AI] `deno compile` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--location` flag is an optional argument for this command. When used, it generates a source map file alongside the compiled output. Source maps help in mapping the transformed code back to its original location during debugging. This flag enhances the debugging experience by providing accurate line numbers and positions.'
        lock: '[AI] `deno compile --lock` is a command used in Deno, a modern JavaScript runtime. It compiles TypeScript or JavaScript source code and generates an isolated executable, along with a deterministic lockfile containing the exact versions of third-party dependencies used during the build process. This lockfile ensures consistency between different runs of the application, preventing potential dependency conflicts.'
        lock-write: '[AI] `deno compile --lock-write` is a command used in Deno, a modern and secure TypeScript runtime. This command compiles TypeScript code into JavaScript and generates or updates the `deno.lock` file with the exact dependencies used during compilation. The `--lock-write` flag ensures that the latest dependency versions are locked down in this file to ensure consistent builds across different environments.'
        no-check: '[AI] The `deno compile` command is a part of Deno, a typescript-based runtime for building and running web applications and services. The `--no-check` flag is an option that can be passed to this command to disable type checking during compilation. By default, Deno performs strict type checking as part of its compilation process to help catch potential errors before running the code. However, using the `--no-check` flag will bypass this check and directly compile the TypeScript code into JavaScript without performing any type checks, which can save time but may introduce runtime errors if the code contains type issues that would have been caught during type checking.'
        no-remote: '[AI] `deno compile --no-remote` is a command used in Deno, a TypeScript-based runtime for building and running web applications. The `--no-remote` flag disables Deno from downloading any external dependencies during the compilation process. It assumes that all required modules are already installed locally or available through the project''s `deno.json` configuration file. This can result in faster build times when working on projects with minimal external dependencies.'
        output: '[AI] The `deno compile` command is a part of Deno, a modern and secure TypeScript runtime. The `--output` option specifies the name and location of the output file that will be generated after compiling a TypeScript project or a single file with Deno. For example, `deno compile --output=main.js main.ts` will compile the `main.ts` file into a JavaScript file named `main.js`.'
        prompt: '[AI] `deno compile --prompt` is a command used in Deno, a modern and secure TypeScript runtime. This command is used to compile Deno projects with interactive REPL (Read-Evaluate-Print Loop) support. The `--prompt` flag enables the Deno REPL after compilation, allowing users to interactively test their code without the need for repeated manual file saves and reloads.'
        reload: '[AI] `deno compile --reload` is a command used in Deno, a modern and secure TypeScript runtime. This command is used to compile and run TypeScript code with live reloading capabilities. The `--compile` flag triggers the compilation process, while the `--reload` flag enables automatic file watching and restarts the server when changes are detected, allowing for faster development iterations.'
        seed: '[AI] `deno compile --seed` is a command used in Deno, a TypeScript-based runtime for building and executing JavaScript and TypeScript applications. This specific command is for initiating a new Deno project with a given seed file. The seed file is an optional starting point for the new project, usually containing some initial setup or configuration code. When you run `deno compile --seed`, Deno will create a new directory for your project and copy the specified seed file into it before compiling the project.'
        target: '[AI] `deno compile` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--target` flag specifies the output format for the compiled code. Supported targets include: `es2015`, `mjs`, `cjs`, `asm`, and `bfc`. For example, `deno compile --target=es2015 my_script.ts` compiles `my_script.ts` into an ES2015 compatible JavaScript file.'
        unsafely-ignore-certificate-errors: '[AI] The `--unsafely-ignore- certificate-errors` flag for Deno''s `compile` command disables certificate validation during SSL connection when downloading dependencies or fetching other resources. It is considered "unsafe" because it bypasses the standard security checks that verify the authenticity and trustworthiness of the SSL certificates, potentially exposing your system to man-in-the-middle attacks and other security risks. This flag should be used with caution only when you trust the remote server and have verified their certificate manually.'
        v8-flags: '[AI] `deno compile --v8-flags` is a command used in Deno, a modern and secure TypeScript runtime. The `--v8-flags` option allows passing flags directly to V8, the JavaScript engine that Deno uses under the hood. These flags can be used for optimizing the compiled output or enabling specific features. Examples include `--no-turbo` to disable TurboFan compilation, `--allow-natives-syntax` for using C++ in Deno scripts, or `--max-old-space-size=<size>` to set the maximum old generation heap size. The exact flags and their effects depend on V8''s capabilities.'
