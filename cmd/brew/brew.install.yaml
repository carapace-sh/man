# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Install a <formula> or <cask>
group: main
flags:
    --HEAD: If <formula> defines it, install the HEAD version, aka. main, trunk, unstable, master.
    --adopt: Adopt existing artifacts in the destination that are identical to those being installed. Cannot be combined with `--force`.
    --appdir=: 'Target location for Applications (default: `/Applications`).'
    --audio-unit-plugindir=: 'Target location for Audio Unit Plugins (default: `~/Library/Audio/Plug-Ins/Components`).'
    --binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --bottle-arch: Optimise bottles for the specified architecture rather than the oldest architecture supported by the version of macOS the bottles are built on.
    --build-bottle: Prepare the formula for eventual bottling during installation, skipping any post-install steps.
    --build-from-source: Compile <formula> from source even if a bottle is provided. Dependencies will still be installed from bottles if they are available.
    --cask: Treat all named arguments as casks.
    --cc: Attempt to compile using the specified <compiler>, which should be the name of the compiler's executable, e.g. `gcc-7` for GCC 7. In order to use LLVM's clang, specify `llvm_clang`. To use the Apple-provided clang, specify `clang`. This option will only accept compilers that are provided by Homebrew or bundled with macOS. Please do not file issues if you encounter errors while using this option.
    --colorpickerdir=: 'Target location for Color Pickers (default: `~/Library/ColorPickers`).'
    --debug: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.
    --debug-symbols: Generate debug symbols on build. Source will be retained in a cache directory.
    --dictionarydir=: 'Target location for Dictionaries (default: `~/Library/Dictionaries`).'
    --display-times: Print install times for each package at the end of the run.
    --dry-run: Show what would be installed, but do not actually install anything.
    --fetch-HEAD: Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository's HEAD will only be checked for updates when a new stable or development version has been released.
    --fontdir=: 'Target location for Fonts (default: `~/Library/Fonts`).'
    --force: Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).
    --force-bottle: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.
    --formula: Treat all named arguments as formulae.
    --git: Create a Git repository, useful for creating patches to the software.
    --help: Show this message.
    --ignore-dependencies: An unsupported Homebrew development option to skip installing any dependencies of any kind. If the dependencies are not already present, the formula will have issues. If you're not developing Homebrew, consider adjusting your PATH rather than using this option.
    --include-test: Install testing dependencies required to run `brew test` <formula>.
    --input-methoddir=: 'Target location for Input Methods (default: `~/Library/Input Methods`).'
    --interactive: Download and patch <formula>, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.
    --internet-plugindir=: 'Target location for Internet Plugins (default: `~/Library/Internet Plug-Ins`).'
    --keep-tmp: Retain the temporary files created during installation.
    --keyboard-layoutdir=: 'Target location for Keyboard Layouts (default: `/Library/Keyboard Layouts`).'
    --language: Comma-separated list of language codes to prefer for cask installation. The first matching language is used, otherwise it reverts to the cask's default language. The default value is the language of your system.
    --mdimporterdir=: 'Target location for Spotlight Plugins (default: `~/Library/Spotlight`).'
    --no-binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --no-quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --only-dependencies: Install the dependencies with specified options but do not install the formula itself.
    --overwrite: Delete files that already exist in the prefix while linking.
    --prefpanedir=: 'Target location for Preference Panes (default: `~/Library/PreferencePanes`).'
    --qlplugindir=: 'Target location for Quick Look Plugins (default: `~/Library/QuickLook`).'
    --quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --quiet: Make some output more quiet.
    --require-sha: Require all casks to have a checksum.
    --screen-saverdir=: 'Target location for Screen Savers (default: `~/Library/Screen Savers`).'
    --servicedir=: 'Target location for Services (default: `~/Library/Services`).'
    --skip-cask-deps: Skip installing cask dependencies.
    --skip-post-install: Install but skip any post-install steps.
    --verbose: Print the verification and post-install steps.
    --vst-plugindir=: 'Target location for VST Plugins (default: `~/Library/Audio/Plug-Ins/VST`).'
    --vst3-plugindir=: 'Target location for VST3 Plugins (default: `~/Library/Audio/Plug-Ins/VST3`).'
    --zap: For use with `brew reinstall --cask`. Remove all files associated with a cask. *May remove files which are shared between applications.*
documentation:
    command: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS. It downloads and installs software packages from Homebrew''s extensive repository, managing dependencies and handling updates. The command takes one or more package names as arguments, e.g., `brew install node`. Upon execution, Homebrew fetches the specified packages, installs them, and their required dependencies, ready for use.'
    flag:
        HEAD: '[AI] `brew install --HEAD` is a command used in Homebrew, a popular package manager for macOS. This command instructs Homebrew to install software from the master branch of a Git repository instead of the latest stable release. The `--HEAD` option tells Homebrew to use the tip of the Git branch, which may include the latest features and development changes, but could also be less stable than the released version. It''s often used by developers or power users who want the most up-to-date software.'
        adopt: '[AI] `brew install --adopt` is a command used in Homebrew, a package manager for macOS. The `--adopt` option tells Homebrew to install software from pre-built binary files instead of building it from source. This can save time and resources as binary files are often faster to download and install compared to building software from scratch. Additionally, using `--adopt` ensures that the installed software will have the same dependencies and versions as those managed by Homebrew itself, which can help prevent conflicts and ensure compatibility with other packages.'
        appdir: '[AI] `brew install` is a command used in Homebrew, a popular package manager for macOS. This command installs software from Homebrew''s repositories. The `--appdir` option is an installer flag that specifies where the application should be installed. By default, Homebrew installs software into `/usr/local/Cellar`. However, using `--appdir` allows you to choose a different directory path, such as `/Applications`, for example, which may be preferred for installing applications that are meant to be used directly by the user.'
        audio-unit-plugindir: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS. This command initiates the installation of software packages managed by Homebrew. The `--audio-unit-plugindir` option specifies the directory where Audio Unit plug-ins (a type of audio extension) will be installed after the installation is complete. This allows the installed software to interact with various digital audio workstations and synthesizers, enhancing their functionality for audio production and processing.'
        binaries: '[AI] `brew install --binaries` is a command used with Homebrew, a popular package manager for macOS. This specific command instructs Homebrew to install software from precompiled binary files instead of building it from source code. This can save time and resources as the binary files have already been compiled. The "--binaries" flag accelerates the installation process by avoiding the compilation step, which may require additional dependencies or longer processing times for larger projects.'
        bottle-arch: '[AI] `brew install --bottle-arch` is a command used in Homebrew, a popular package manager for macOS. This specific command instructs Homebrew to download the required formula for a software package from its repository, compile it with specific arch flags (for building 64-bit binaries on a 64-bit system), bottle (package) the installation files, and save them in Homebrew''s Cellar directory. When you run `brew install` without the `--bottle-arch` flag, Homebrew will directly install packages using precompiled bottles if available or build from source, while this command forces a rebuild with specific arch flags even if a bottled version exists.'
        build-bottle: '[AI] `brew install` is a command used in Homebrew, a popular package manager for macOS. This command initiates the installation of a specific software package from Homebrew''s repositories. The `--build-bottle` option is an additional flag that is added to this command for the purpose of creating a bottle for the formula. A bottle is a self-contained, pre-compiled binary package for Homebrew that includes all required dependencies and libraries. This option ensures that the installed software can run on different macOS versions and environments by providing a consistent and reproducible build environment. In summary, `brew install --build-bottle` installs a package with the added step of creating a bottle for it, ensuring a consistent build and compatibility across various macOS systems.'
        build-from-source: '[AI] `brew install --build-from-source` is a command used in Homebrew, a popular package manager for macOS. This command instructs Homebrew to download the source code of a software from its upstream repository, compile it, and install the built package. This allows users to install the latest version or a specific feature branch of the software, and also ensures that the software is compiled specifically for their system. It may take longer than installing a pre-compiled binary package but provides more control and flexibility over the installation process.'
        cask: |-
            [AI] `brew install --cask` is a command used in Homebrew, a popular package manager for macOS. The `--cask` option installs software that comes in the form of a macOS application bundle, often referred to as "Casks." These are usually GUI applications or frameworks that aren't managed by Homebrew by default but still widely used in the macOS ecosystem.

            When you run `brew install --cask <package-name>`, Homebrew downloads the specified Cask package, verifies its integrity, and installs it for you, placing a wrapper around the application bundle that integrates it into Homebrew's management system. This allows easier updates and uninstalls of the software in the future.
        cc: '[AI] The command `brew install --cc` is used with Homebrew, a popular package manager for macOS. The `--cc` option specifies that Homebrew should use a specific C compiler instead of the default one. When you run `brew install`, Homebrew will download and install the specified software package, and if `--cc` is provided, it will be compiled using the specified C compiler. This can be useful when you have multiple compilers installed or when you want to force the use of a specific compiler for compatibility reasons.'
        colorpickerdir: '[AI] `brew install` is a command-line utility used to manage software installations on macOS using Homebrew. It downloads, verifies, and installs software packages from the Homebrew repository. The `--colorpickerdir` option is not a standard flag for this command. If present, it might be indicating a custom directory path where Homebrew should look for color pickers for interactive prompts. However, without further context or documentation from the Homebrew project confirming this usage, it''s impossible to say for sure.'
        debug: '[AI] `brew install --debug` is a command used with Homebrew, a popular package manager for macOS. This command installs software using Homebrew with additional debug output. The debug information provides more detailed and verbose messages during the installation process, which can be helpful in troubleshooting issues or understanding the underlying steps of the installation.'
        debug-symbols: '[AI] `brew install --debug-symbols` is a command used with Homebrew, a popular package manager for macOS. This command installs a package and its dependencies with debug symbols enabled. Debug symbols are additional information that can be used during debugging to help locate issues in software. Enabling debug symbols results in larger binary files and can increase installation time, but provides valuable debugging information for developers.'
        dictionarydir: '[AI] `brew install --dictionarydir` is a command used with Homebrew, a popular package manager for macOS. This specific command is used to install Homebrew packages from a custom dictionary directory instead of the default one. The `--dictionarydir` option specifies the path to this custom directory. Once installed, the packages can be accessed using Homebrew''s `brew` command just like regular packages.'
        display-times: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS, to install software from its repository. The option `--display-times` is used to show the installation times for each formula (package) being installed. This can help provide visibility into the progress of the installation process and identify any potential performance issues or delays.'
        dry-run: '[AI] `brew install --dry-run` is a command used in Homebrew, a popular package manager for macOS. This command performs a simulation of an installation, meaning it will show you what would be installed without actually downloading or installing anything. It helps prevent unintended changes to your system by allowing you to review the actions that would be taken before executing the installation in real life.'
        fetch-HEAD: '[AI] `brew install --fetch-HEAD` is a command used in Homebrew, a popular package manager for macOS. This command is used to install software from the Git head of its repository instead of the latest released version. By using `--fetch-HEAD`, Homebrew will pull the most recent changes from the Git repository before building and installing the software, ensuring that you have the very latest version. It''s especially useful when dealing with rapidly developing projects or if you want to be on the bleeding edge.'
        fontdir: '[AI] `brew install` is a command used with Homebrew, a package manager for macOS. It installs software from the Homebrew repository. The `--fontdir` option is not a standard Homebrew option. If you meant to use `--with-font-cache`, this option instructs Homebrew to install fonts into the system''s FontBook library instead of the default Homebrew location, making them accessible system-wide. Without the specifics of the software being installed, it''s impossible to provide a more precise explanation.'
        force: '[AI] `brew install --force` is a command used in Homebrew, a popular package manager for macOS. This command with the `--force` flag is used to forcefully install or reinstall a specific package without raising any warnings or errors that might be caused by dependency conflicts, incorrect permissions, or other potential issues. It is often used when attempting to resolve installation failures or when updating packages to their latest versions.'
        force-bottle: '[AI] `brew install --force-bottle` is a command used in Homebrew, a popular package manager for macOS. This command attempts to install or upgrade a formula with precompiled binary bottles if they are available, and forces Homebrew to use these bottles even if there''s a newer version available in the tap. The primary advantage of using this command is that it can help avoid building packages from source code which could lead to longer installation times, potential dependencies conflicts, or issues related to the specific system configuration.'
        formula: '[AI] `brew install --formula` is a command used with Homebrew, a popular package manager for macOS. The `--formula` option specifies that you want to install a Homebrew-managed software package, which comes in the form of a Formula file. This command retrieves and installs the software from Homebrew''s repository, manages its dependencies, and sets up any necessary configuration files.'
        git: '[AI] `brew install --git` is a command used with Homebrew, a popular package manager for macOS. The `--git` option tells Homebrew to install software from a Git repository instead of a pre-built package. When you run `brew install <repository-url> --git`, Homebrew will clone the specified Git repository, check out the desired branch or tag, build and install the software from the source code, and manage dependencies accordingly. This command can be used to install the latest version or a specific commit of software that is not yet available as a pre-compiled package in the Homebrew repositories.'
        help: '[AI] `brew install --help` is a command used with Homebrew, a popular package manager for macOS. The `--help` option is appended to the `install` command to display detailed information about how to use it. This includes the syntax of the command, a brief description of what it does (installs software), any required arguments or options, and examples of usage. In summary, this command provides guidance on using the `install` function in Homebrew to install new software packages.'
        ignore-dependencies: '[AI] The `brew install --ignore-dependencies` command is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to install the specified package without installing any dependencies that may also be required by those dependencies. In other words, it installs only the specified package and skips installing any optional or indirect dependencies. This can be useful when you want to manually manage some dependencies or when there are conflicts with existing system configurations. However, note that ignoring dependencies might result in incomplete installation or potential compatibility issues with the installed package.'
        include-test: '[AI] The `brew install --include-test` command is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to install the specified software package along with its test suite. The test suite helps ensure the software functions correctly and properly integrates with other system components before use. This can help identify and address potential issues early on in the installation process.'
        input-methoddir: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS, to install software from the Homebrew repository. The `--input-methoddir` option, if provided, specifies a custom directory path for input methods (keyboard layouts) related to some installed packages. This option can be useful when you need to set up specific input methods not available in the default installation. Overall, it''s an advanced option that allows users to customize their installations further.'
        interactive: '[AI] `brew install --interactive` is a command used in Homebrew, a popular package manager for macOS. This command installs a package or formula with interactive prompts. The flag `--interactive` allows the user to confirm each step of the installation process before it''s executed, providing more control over the installation and preventing unintended changes.'
        internet-plugindir: |-
            [AI] The command `brew install --internet-plugindir` is not a valid Brew (Homebrew) command. Homebrew is a popular package manager for macOS. The correct syntax to install a package using Homebrew is `brew install <package-name>`.

            If you meant to install a package that includes an internet plugin directory, the correct command would be `brew install <package-name> --with-internet-plugin` or `brew install <package-name> --with-options=--enable-internet-plugin`, depending on the specific package and its installation options.

            The `--with-internet-plugin` (or `--with-options=--enable-internet-plugin`) flag instructs Homebrew to enable the installation of an internet plugin when installing the specified package. The exact functionality of the internet plugin depends on the specific package.
        keep-tmp: |-
            [AI] `brew install` is a command used in Homebrew, a popular package manager for macOS. It downloads and installs software from various sources based on the given formula or package name. The `--keep-tmp` flag is an optional argument that modifies the installation process.

            The main purpose of using `--keep-temp` is to prevent Homebrew from deleting temporary files during the installation process. This can be useful when debugging or troubleshooting an issue, as it allows you to examine these files for potential errors or issues. By default, Homebrew removes temporary files after a successful installation to keep the system clean.
        keyboard-layoutdir: '[AI] `brew install` is a command used in Homebrew, a popular package manager for macOS. This command initiates the installation of a specific package or software using Homebrew. The option `--keyboard-layoutdir` is not a common argument to use with this command. If included, it might be specifying an custom directory where Homebrew should install keyboard layout files instead of the default location. However, for most users, there''s no need to provide this flag unless they have a specific reason to do so, such as managing multiple keyboard layouts or dealing with certain compatibility issues.'
        language: '[AI] The command `brew install --language` is used with Homebrew, a popular package manager for macOS. This command installs software that is specifically written in a particular programming language. The `--language` option filters the search results to packages that match the specified language. For example, `brew install --language python` would install Python and any related tools or dependencies.'
        mdimporterdir: |-
            [AI] The command `brew install --mdimporterdir` is not a valid Brew (Homebrew) installation command.

            The `brew install` command is used to install software packages managed by Homebrew on macOS. It downloads the necessary files from the official Homebrew repositories or remote taps, verifies their integrity, and installs them into your system.

            Adding the option `--mdimporterdir` is not recognized by Homebrew. If you meant to create or set a custom directory for managing markdown import tasks in Homebrew using some other tool, please clarify the command with proper context and usage documentation.
        no-binaries: '[AI] The `brew install --no-binaries` command is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to download and compile the software source code instead of installing precompiled binary packages. By using `--no-binaries`, users can ensure they get the latest version of the software and have control over the compilation process, but it may take longer than installing binaries.'
        no-quarantine: '[AI] `brew install --no-quarantine` is a command used with Homebrew, a popular package manager for macOS. This command installs software from the regular Homebrew repository without checking for Apple''s notarization or quarantine status. The `--no-quarantine` flag bypasses Gatekeeper, allowing installation of software that may not be officially approved by Apple but is still trusted and safe to use in many cases. It''s important to use this command with caution, as it may install software that could potentially pose a security risk.'
        only-dependencies: '[AI] `brew install --only-dependencies` is a command used in Homebrew, a popular package manager for macOS. This command installs only the dependencies of a specific formula (package), without installing the formula itself. Dependencies are packages that other packages require to function correctly. By running this command, you can install just the necessary dependencies and avoid duplicating or updating packages that might already be installed.'
        overwrite: '[AI] `brew install --overwrite` is a command used with Homebrew, a popular package manager for macOS. This command is used to install or update a specific package and replace any existing files in the system with the new version. The `--overwrite` flag allows force installation even if the new version may override existing user-modified files. It''s essential to use this command with caution, as it might unwillingly discard modifications made to files.'
        prefpanedir: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS. It installs software from the Homebrew repository using the given formula or package name. The `--prefpanedir` option is not a standard flag for this command and does not seem to exist in Homebrew''s documentation. If you meant to use other common options like `--cellar`, `--no-cask`, or `--force`, those would affect the installation process in different ways (like installing software into a separate cellar directory, disabling the use of Cask for managing graphical applications, or forcefully reinstalling software). If you intended to use `--prefpanedir` with a specific software package, please double-check its documentation for any unique installation options.'
        qlplugindir: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS, to install software packages. The `--qlplugindir` option appends a directory to Homebrew''s list of directories searched when looking for plugins (QuickLook generators) installed via Homebrew. Plugins extend the functionality of Finder and other applications by displaying custom previews and metadata in QuickLook.'
        quarantine: '[AI] `brew install --quarantine` is a command used in Homebrew, a popular package manager for macOS. This specific command installs the software using Homebrew but also sets a special attribute on the installed binary, known as "quarantined". This attribute marks the file as coming from an external source and may trigger additional security checks by macOS'' Gatekeeper. It helps in maintaining system security by allowing Gatekeeper to scan and verify the installer before executing it.'
        quiet: '[AI] `brew install --quiet` is a command used with Homebrew, a popular package manager for macOS. The `--quiet` flag reduces the amount of output during the installation process. It suppresses the progress bar and success messages, providing a quieter and more minimalist installation experience.'
        require-sha: '[AI] The `brew install --require-sha` command is used with Homebrew, a package manager for macOS. This specific command installation method requires that the downloaded package matches a specific SHA-1 checksum to ensure authenticity and integrity of the software before it''s installed. By using this option, Homebrew will verify that the downloaded package from the specified URL indeed has the given hash value before proceeding with the installation process. This adds an extra layer of security to prevent potential man-in-the-middle or malicious attacks.'
        screen-saverdir: |-
            [AI] The `brew install` command is used to install software packages using Homebrew, a popular package manager for macOS. The option `--screen-saverdir` specifies a custom directory where Homebrew will install screen savers.

            For example, if you want to install the "Desktop Saver" screen saver, you can run:

            ```bash
            brew install --screen-saverdir=~/Library/Screen Savers Desktop\ Saver
            ```

            This command will download and install the "Desktop Saver" package from Homebrew's repository, and place it in the specified directory `~/Library/Screen Savers`. After installation, you can enable the screen saver by going to System Preferences > Screensaver > choose the newly installed screen saver.
        servicedir: '[AI] `brew install --servicedir` is a command used with Homebrew, a popular package manager for macOS. This specific command installs a Homebrew formula and sets up the formula''s service component, which is designed to run at system startup or on demand. The `--servicedir` option specifies a custom directory where the service files will be installed. After installation, the service can be managed using the Homebrew Service manager.'
        skip-cask-deps: '[AI] `brew install --skip-cask-deps` is a command used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to install the specified package without installing any dependencies that are in the form of Cask applications. The `--skip-cask-deps` flag ensures that only the core components of the package are installed.'
        skip-post-install: '[AI] The `brew install` command is used to install software packages using Homebrew, a popular package manager for macOS. The `--skip-post-install` option skips running any post-install scripts or hooks that are typically executed after the installation process completes. This can be useful when you want to manually handle post-installation steps yourself or if you suspect that there might be issues with the default scripts. However, keep in mind that skipping these scripts may prevent certain features or dependencies from functioning correctly.'
        verbose: '[AI] `brew install --verbose` is a command used in Homebrew, a popular package manager for macOS. The `--verbose` flag increases the amount of output from the installation process, providing more detailed information about each step Homebrew takes to install the desired software or package. This can help users troubleshoot issues and gain insight into the behind-the-scenes workings of Homebrew.'
        vst-plugindir: '[AI] `brew install` is a command used in Homebrew, a popular package manager for macOS, to install software from its repository. The `--vst-plugindir` option specifies a custom directory where the installed software (in this case, likely a VST plugin) will be placed. In other words, it allows you to choose a specific location for Homebrew to install the plugins created by various Virtual Studio Technology (VST) developers.'
        vst3-plugindir: '[AI] `brew install` is a command used in Homebrew, a popular package manager for macOS. It installs software from various sources, typically in the form of packages or Formulae. The `--vst3-plugindir` flag is an optional argument that specifies a custom directory where VST3 audio plugins will be installed. In other words, it instructs Homebrew to install the software into this specific folder when using a formula that includes VST3 plugins.'
        zap: '[AI] `brew install` is a command used with Homebrew, a popular package manager for macOS. It downloads and installs software from Homebrew''s repository. The `--zap` option, when used with `brew install`, will remove any previously installed version of the same package before installing the new one. This ensures that there are no conflicting versions of the software on your system. For example, if you want to upgrade or reinstall a package called "my-package", you can use `brew install my-package --zap`.'
