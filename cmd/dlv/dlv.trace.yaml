# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: trace
description: Compile and begin tracing program.
flags:
    --ebpf: Trace using eBPF (experimental).
    --output=: Output path for the binary.
    -e, --exec=: Binary file to exec and trace.
    -p, --pid=: Pid to attach to.
    -s, --stack=: Show stack trace with given depth. (Ignored with -ebpf)
    -t, --test: Trace a test binary.
documentation:
    command: '[AI] `dlv trace` is a command used in Divergence Debugger (DLV), a debugging tool for Datalog and other logic programming languages. This command initiates a new tracing session, allowing users to inspect the execution of DLV programs step by step. It records all the inference steps, including the applied rule and the updated facts, which can be later analyzed to understand the reasoning process behind the results.'
    flag:
        ebpf: '[AI] `dlv trace --ebpf` is a command used with the Dynamic Language Debugger (DLV), specifically for executing a Trace event action with Extended BPF (eBPF) probes. This command initiates a tracing session, allowing you to inspect the system call behavior and performance by attaching eBPF programs as probes. The data collected during this trace is then displayed in real-time or saved for later analysis.'
        exec: '[AI] `dlv trace --exec` is a command used in Delve debugger (dlv), which is a debugging tool for Go programs. This specific command initiates a new tracing session. It attaches to the running process and records detailed execution information, such as function calls, variable values, and CPU profiles. The `--exec` flag specifies the Go expression or command to be executed within the debugger context, allowing users to perform tasks like setting breakpoints, inspecting variables, or executing custom code on-the-fly during tracing.'
        output: '[AI] `dlv trace --output` is a command used with the Delve debugger (dlv) for Go programs. This command initiates a new tracing session where the debugger records the execution of the program, saving the output to a file instead of displaying it in real-time in the terminal. The resulting trace file can be later analyzed using other tools or visualizers to gain deeper insights into the program''s behavior.'
        pid: '[AI] `dlv trace --pid` is a command used with the Delve debugger (dlv) for tracing Go programs. This command specifically initiates process tracing on a running Go program identified by its Process ID (PID). Tracing records all executed instructions and provides detailed execution information, including function calls, goroutine scheduling, and memory accesses. It''s helpful for profiling complex systems, investigating performance issues, or simply understanding the runtime behavior of a Go application.'
        stack: '[AI] `dlv trace --stack` is a command used in Delve (dlv), a debugger for Go, to start tracing and recording the stack at specific goroutines or threads. The `--stack` option requests that the full stack trace be recorded for each event in the trace output. This can be useful for profiling and debugging performance issues in Go programs.'
        test: '[AI] `dlv trace --test` is a command used with the Delve debugger (dlv) for Go programming language. This command initiates a test run under delve''s control, recording a trace of executed functions and their arguments into a file named `dlv.trace`. The `--test` flag is used to specify that you want to debug a test case instead of the main application. While the test runs, delve will pause execution at breakpoints or when hitting specific conditions like entering a certain function or reaching a line of code, allowing you to inspect variables and step through the code. This can be useful for debugging tests, identifying test coverage, and understanding the flow of your Go code during testing.'
