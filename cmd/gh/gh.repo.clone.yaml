# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clone <repository> [<directory>] [-- <gitflags>...]
description: Clone a repository locally
group: Targeted commands
flags:
    -u, --upstream-remote-name=: Upstream remote name when cloning a fork
documentation:
    command: '[AI] `gh repo clone` is a GitHub CLI (Command Line Interface) command used to clone a repository from GitHub directly into your local machine. The syntax is as follows: `gh repo clone <username>/<repository>`. This command will create a new local directory with the same name as the repository and populate it with all the files and branches in that repository, ready for you to work on locally.'
    flag:
        upstream-remote-name: |-
            [AI] `git clone` is a Git command used to create a local copy of a remote repository. The option `--repo` followed by `gh` specifies that the repository should be cloned using GitHub's command-line tool, gh, instead of the default Git workflow. The option `clone` tells Git to clone the repository.

            The option `--upstream-remote-name` sets the name of the upstream remote repository to `origin`. By default, this name is `origin`, but you can change it using this option if you have multiple remotes for the same repository and want to distinguish between them.

            So, in summary, `git clone --repo=gh user/repository.git --upstream-remote-name=my_remote` clones the specified GitHub repository using gh and sets the name of the upstream remote to `my_remote`.
