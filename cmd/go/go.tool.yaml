# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tool
description: run specified go tool
flags:
    -C=: Change to dir before running the command
    -n: only print the command that would be executed
documentation:
    command: |-
        [AI] `go tool` is a command-line utility in the Go programming language used to build and manipulate various artifacts related to Go projects. It provides several sub-commands for performing specific tasks, such as:

        1. `go tool compile`: Compiles Go source files into machine code.
        2. `go tool vet`: Performs static analysis of Go source code to detect potential errors and security vulnerabilities.
        3. `go tool pprof`: Analyzes and profiles Go programs for performance issues using CPU or memory profiles.
        4. `go tool dist`: Manages the downloading, building, and caching of third-party packages required by a project.
        5. `go tool build`: Builds Go projects and their dependencies.
        6. `go tool install`: Installs and registers new or updated Go packages within your GOPATH environment.

        These sub-commands can be invoked as part of the larger `go build`, `go test`, and other build commands or used independently to address specific needs.
    flag:
        C: '[AI] `go tool` is a command-line utility in the Go programming language. The `-C` flag, when used with `go tool`, compiles the Go source files specified in the arguments into a single executable file or archive (forGo packages), respecting build constraints if present. It performs static and dynamic linking, producing an executable ready to run. This is particularly useful for creating standalone binaries from Go code without the need of setting up a full Go workspace or using `go build` in a complex project structure.'
        "n": '[AI] `go tool -n` is a command-line tool provided by the Go programming language for computing and printing the import graph of Go source files. It reads one or more Go source files, resolves all dependencies recursively, and outputs the list of packages imported in the order they are used. This information can be useful for understanding the dependencies between different parts of a larger Go codebase.'
