# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: library
description: Creates a new, generic library project in the current workspace
flags:
    --entry-file=: The path at which to create the library's public API file
    --skip-install: Do not install dependency packages.
    --skip-package-json: Do not add dependencies to the "package.json" file.
    --skip-ts-config: Do not update "tsconfig.json" to add a path mapping for the new library.
    -p, --prefix=: A prefix to apply to generated selectors.
documentation:
    command: '[AI] `ng generate library` is a command used in Angular CLI (Angular Command Line Interface) for creating a new Angular Library project. This command sets up a new library project with proper file structure, configurations and dependencies ready to be used as a shareable Angular component or module within other applications or projects. It generates files like `package.json`, `tsconfig.json`, and angular.json, and creates necessary folders for source code, tests, and documentation. The library can later be published to the npm registry or used locally within other Angular projects.'
    flag:
        entry-file: '[AI] The `ng generate library --entry-file` command is used in Angular to create a new Angular library project, with an entry file different from the default `index.ts`. This flag instructs Angular CLI to create the new library using a custom entry file name specified after `--entry-file`. For instance, `--entry-file myLibrary.entry.ts` would create the new library with `myLibrary.entry.ts` as its main file instead of the default `index.ts`. This feature is particularly useful when developing libraries that have specific bootstrapping or initialization logic, which need to be handled by a custom entry file.'
        prefix: '[AI] The `ng generate library --prefix` command is used with Angular CLI to create a new Angular library project. The `--prefix` option specifies a string that will be prefixed to all output files and component selectors within the library. This is useful when creating a library that will be consumed by other projects, as it helps prevent naming conflicts. For example, if you set the prefix to "my-lib", all generated files and components in the library will have this prefix added to their names.'
        skip-install: '[AI] `ng generate library --skip-install` is a command used in Angular to create a new Angular library project without installing dependencies during the generation process. This command is useful when you want to set up the library structure manually or have specific dependency versions that need to be installed separately. The `--skip-install` flag prevents the automatic installation of new packages during the library creation process.'
        skip-package-json: '[AI] The `ng generate library --skip-package-json` command is used with Angular CLI to create a new Angular library project without generating a `package.json` file in the newly created library. This can be useful when you already have a `package.json` file for your library in a separate location, or when you want to manually configure the library''s dependencies and other settings. The rest of the command creates a new Angular library project with the default structure and configurations.'
        skip-ts-config: |-
            [AI] The `ng generate library` command is used in Angular to create a new Angular library project. This command generates a new Angular library package, which can be consumed by other Angular applications.

            The `--skip-ts-config` flag is an optional argument that can be passed with this command. It instructs Angular CLI not to generate a `tsconfig.json` file for the newly created library project. This flag might be useful when you already have a `tsconfig.json` file in place or when you don't need one for your specific use case. In general, most Angular projects require a `tsconfig.json` file to define compilation options, so skipping it should be done with caution.
