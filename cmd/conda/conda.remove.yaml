# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: remove
aliases:
    - uninstall
description: Remove a list of packages from a specified conda environment
flags:
    --all: Remove all packages, i.e., the entire environment.
    --dev: Use `sys.executable -m conda` in wrapper scripts instead of CONDA_EXE.
    --features: Remove features (instead of packages).
    --force: Forces removal of a package without removing packages that depend on it.
    --force-remove: Forces removal of a package without removing packages that depend on it.
    --json: Report all output as json.
    --no-pin: Ignore pinned file.
    --offline: Offline mode. Don't connect to the Internet.
    --override-channels: Do not search default or .condarc channels.
    --repodata-fn=: Specify name of repodata on remote server.
    --use-local: Use locally built packages.
    -C, --use-index-cache: Use cache of channel index files, even if it has expired.
    -c, --channel=: Additional channel to search for packages.
    -d, --dry-run: Only display what would have been done.
    -h, --help: Show this help message and exit.
    -k, --insecure: Allow conda to perform "insecure" SSL connections and transfers.
    -n, --name=: Name of environment.
    -p, --prefix=: Full path to environment location (i.e. prefix).
    -q, --quiet: Do not display progress bar.
    -v, --verbose: Once for INFO, twice for DEBUG, three times for TRACE.
    -y, --yes: Do not ask for confirmation.
documentation:
    command: |-
        [AI] `conda remove` is a Command Line Interface (CLI) command used in Anaconda and Miniconda distribution of Python for managing dependencies and environments. This command is used to uninstall or remove packages, specifications or environments from the conda environment. The basic syntax for this command is:

        `conda remove <package_name> [<environment_name>]`

        The `<package_name>` can be a package name or a package specification (for example, `pandas=1.2.3`) that you want to uninstall. The optional argument `<environment_name>` indicates the specific environment where the removal should take place. If not provided, the removal will occur in the default environment.
    flag:
        all: '[AI] `conda remove --all` is a command used in Anaconda or Miniconda environments to remove all packages and their dependencies installed in the current environment. This command does not ask for confirmation before removing each package, so use it with caution. It leaves the base environment unaffected.'
        channel: '[AI] The `conda remove` command with the `--channel` option is used to remove packages installed in Anaconda or Miniconda environments. The `--channel` argument specifies one or more channels from which to uninstall the packages. This can be useful when you want to remove packages installed from specific channels that are no longer needed, allowing for a cleaner and more streamlined environment.'
        dev: '[AI] `conda remove --dev` is a command used in Anaconda or Miniconda distributions to uninstall packages marked as development dependencies. These are packages that were installed along with other packages, but are not required for the base functionality of those packages. Using `--dev` option ensures only the development dependencies are removed and leaves the core packages intact.'
        dry-run: '[AI] `conda remove --dry-run` is a command used in Anaconda or Miniconda distribution of Python for creating a simulated environment modification without actually making any changes to the current environment. It allows users to preview the intended actions, including which packages will be removed and their respective versions before executing the command in a real environment. This can help prevent unintended consequences from taking place.'
        features: '[AI] The `conda remove` command with the `--features` option is used to remove specific features or packages installed in Anaconda or Miniconda environments. The `--features` argument allows you to specify a list of features or packages to be removed. For example, `conda remove --features my_package1 my_package2` will remove both `my_package1` and `my_package2`. This command does not uninstall the base environment itself but only removes the mentioned features/packages from the current environment.'
        force: '[AI] The `conda remove --force` command is used in Anaconda or Miniconda distribution of Python for forcefully removing a specific package and all its dependencies from the conda environment, even if those dependencies have conflicting dependencies. This command overrides any dependency conflicts and removes the specified package along with its dependents, regardless of the dependency tree. However, it''s important to note that force removal might lead to breaking the functionality of your environment, so use this command with caution.'
        force-remove: '[AI] The `conda remove` command with the `--force-remove` flag is used to forcibly remove a package and its dependencies from the Anaconda or Miniconda distribution environment in Python. If the specified package has dependencies that cannot be uninstalled without causing conflicts, `--force-remove` will attempt to remove them as well, potentially causing breakage in the environment. Use this option with caution, as it may lead to an inconsistent or non-functional environment. It is generally recommended to create a new environment or use `conda env export` and `conda env create` to preserve the state of your current environment before performing such operations.'
        help: |-
            [AI] `conda remove` is a command in Anaconda's Conda package manager used to remove packages and their dependencies from the environment. The `--help` option provides detailed usage information for this command. Here's a brief explanation:

            - `conda remove`: This is the base command to remove packages.
            - `--name <env_name>` (optional): Specifies the name of the environment where the removal will take place. If not provided, it defaults to the active environment.
            - `<package_name>`: The name of the package you want to remove.
            - `--all` (optional): Removes both the specified package and all its dependencies recursively.
            - `--force` (optional): Forces the removal of packages even if they are still in use or if their removal would leave essential packages missing. Use with caution!

            For example: `conda remove --name myenv --all numpy` will remove numpy along with all its dependencies from the "myenv" environment.
        insecure: '[AI] `conda remove --insecure` is a command used in Anaconda or Miniconda distribution of Python and its packages management system called conda. This command is used to remove specified packages from the current environment, ignoring any security warnings or checks. The flag `--insecure` overrides conda''s built-in safety measures that prevent installing or removing packages that have known vulnerabilities or outdated dependencies. By using this command, you acknowledge the potential risks and proceed with the removal regardless.'
        json: '[AI] `conda remove --json` is a command in Anaconda''s Conda package manager for creating a JSON-formatted output of packages to be removed. When executed, it generates a file containing package names, version specifications, and other metadata. This command does not actually remove the packages; it only prepares the information for automation or scripting purposes.'
        name: '[AI] The `conda remove` command is used to uninstall packages in Anaconda or Miniconda distribution of Python. The `--name` option specifies the name of the environment or the package to be removed. For example, `conda remove --name myenv` removes the environment named "myenv", while `conda remove --name package_name` removes a specific package named "package\_name".'
        no-pin: '[AI] `conda remove --no-pin` is a command used in Anaconda or Miniconda distribution of Python and its packages manager, Conda. This command is used to uninstall a specific package or multiple packages from the environment without regard to the pinned versions. By default, Conda maintains locked versions (pins) for packages to ensure reproducibility across different environments. The `--no-pin` flag disables this behavior and allows the removal of any version of the package that is currently installed. This command does not affect the dependency packages or other environment settings unless explicitly mentioned with additional flags.'
        offline: '[AI] `conda remove --offline` is a command used in Anaconda distribution for managing packages and environments in Conda. This command downloads metadata for specified packages from the Conda stores, but does not install or delete them on your local system yet. Instead, it caches the metadata locally so that you can install these packages offline, without internet connection. The flag `--offline` enables this offline mode of operation.'
        override-channels: '[AI] `conda remove --override-flags=channel --name <package>` is a command used in Anaconda or Miniconda distribution of Python for managing packages. The `--override-flags=channel` option allows the user to forcefully remove a package from all channels, including those where the package may have dependencies that could cause conflicts. This can be useful when dealing with complex environments or resolving dependency issues. Be cautious as using this command may result in breaking your environment if used incorrectly.'
        prefix: '[AI] The `conda remove` command is used to remove packages installed in the Anaconda/Miniconda distribution managed by the Conda package manager. The `--prefix` option specifies the installation prefix, which is the root directory of a specific Conda environment. When using this option, you can remove all packages and their dependencies within that environment. For example: `conda remove --prefix /path/to/environment`.'
        quiet: '[AI] `conda remove --quiet` is a command used in Anaconda or Miniconda distribution of Python for quiet removal of packages and their dependencies from the environment. The `--quiet` option suppresses the output of progress messages during package removal, making the process run in the background without interfering with other terminal activities.'
        repodata-fn: '[AI] `conda remove --repodata-fn` is a command used in Anaconda''s package manager, Conda. This command is used to remove packages from the current environment while updating the local Conda metadata file (repodata) with the latest repository information. The option `--repodata-fn` allows specifying a custom filename for the new metadata file. This command helps keep your Conda installation up-to-date and ensures you have access to the most recent package versions when installing or removing packages.'
        use-index-cache: '[AI] The `conda remove` command with the `--use-index-cache` option is used to remove packages in Anaconda or Miniconda environments without connecting to any remote servers or re-downloading packages that are already available locally in the index cache. This can significantly speed up the removal process, especially when dealing with large installations or slow internet connections.'
        use-local: '[AI] The `conda remove --use-local` command is used in Anaconda or Miniconda distribution of Python for managing dependencies and packages installed in the local environment. This command specifically tells Conda to look for locally installed packages before checking the remote conda-forge and default channels for a matching package. If a locally installed version of the requested package is found, it will be removed from the environment. Using this command can help ensure that only specific versions or packages that have been installed manually are included in your Conda environment.'
        verbose: '[AI] `conda remove --verbose` is a command used in Anaconda''s Conda package manager for Linux and Windows systems. It instructs Conda to remove specified packages with enhanced verbosity, displaying detailed information about the removal process, including dependencies affected, files and directories being deleted, and progress updates. This can be useful for users who want a better understanding of what Conda is doing during the package removal process.'
        "yes": '[AI] `conda remove --yes` is a command used in Anaconda distribution for removing packages and their dependencies from the conda environment. The `--yes` option is used to confirm that you really want to proceed with the removal without any further prompts. It is a force flag that assumes affirmative response for all confirmation queries.'
