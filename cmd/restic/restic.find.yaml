# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: find
description: Find a file, a directory or restic IDs
flags:
    --blob: pattern is a blob-ID
    --pack: pattern is a pack-ID
    --path*=: only consider snapshots which include this (absolute) `path`, when no snapshot-ID is given
    --show-pack-id: display the pack-ID the blobs belong to (with --blob or --tree)
    --tag*=: only consider snapshots which include this `taglist`, when no snapshot-ID is given
    --tree: pattern is a tree-ID
    -H, --host*=: only consider snapshots for this `host`, when no snapshot ID is given (can be specified multiple times)
    -N, --newest=: newest modification date/time
    -O, --oldest=: oldest modification date/time
    -i, --ignore-case: ignore case for pattern
    -l, --long: use a long listing format showing size and mode
    -s, --snapshot*=: snapshot `id` to search in (can be given multiple times)
documentation:
    command: '[AI] The `restic find` command is used in the data backup and synchronization tool, `restic`. It is utilized for searching specific data or files within backed up repositories. This command filters the backups based on file paths or other search criteria, allowing users to locate and restore specific data easily.'
    flag:
        blob: '[AI] `restic find --blob` is a command from the backup tool `restic`. This command is used to search for specific blobs (individual files) within a `restic` repository. The `--blob` option tells `restic` to only return information about the blobs that match the search criteria, such as a filename or content hash. The output will typically include the blob''s ID and size.'
        host: '[AI] `restic find --host` is a command used in the data backup tool called `restic`. The `find` subcommand is used to search for specific data within backups, while `--host` is an option that specifies which remote host or storage location to search in. This command searches for data across all hosts or repositories configured in `restic`, making it useful when dealing with multiple backups spread across different machines or locations.'
        ignore-case: '[AI] `restic find` is a command from the `restic` backup program to search for specific files in backups. The option `--ignore-case` tells `restic find` to perform case-insensitive searches, meaning that the search term can match files with any combination of upper and lower case letters in their filenames.'
        long: '[AI] `restic find --long` is a command in Restic data backup and recovery tool. This command is used to search for specific files or directories within the backed up data using long output format. The long output format displays each matching entry with its relative path, size, creation and modification times.'
        newest: '[AI] The `restic find --newest` command is used in the data backup tool `restic`. It searches for the newest version of a specific file or set of files across all backups and returns their locations. This can be helpful when you need to recover the most recent state of a particular file or group of files from your backups. The `--newest` option tells restic to return only the backup that was created most recently for each file.'
        oldest: '[AI] `restic find --oldest` is a command used in the backup tool "restic" to locate and print the path of the oldest backuppiece for a given snapshot or archive. The `find` subcommand filters backups based on specific criteria, such as file name or content hash, while `--oldest` sorts the results by their creation time and returns the earliest one.'
        pack: '[AI] `restic find --pack` is a command used in the data backup tool `restic`. It searches for specific data inside packed backups and returns their hashes. The `--pack` option tells restic to look for data within the packed (compressed and deduplicated) backups instead of the original source files. This can be useful when you want to restore specific data from previously created backups without having to unpack the entire backup first.'
        path: |-
            [AI] The `restic find --path` command is a part of the `restic` data backup and sync tool. This specific command is used to search for specific files or paths within backups created using `restic`.

            When you run `restic find --path <path>`, it searches through all the backed-up revisions for the given path (specified by `<path>`). The result is a list of commits that contain the specified path, along with some additional metadata such as the file size and modification time. This command can be helpful when you need to locate specific files across multiple backup snapshots.
        show-pack-id: '[AI] `restic find --show-pack-id` is a command used in the data backup tool, `restic`. This command is used to search for specific data within backups and returns the ID of the pack (a collection of backed up files) that contains the searched data. It helps in quickly locating the backup where particular data is stored without having to restore the entire pack.'
        snapshot: '[AI] `restic find --snapshot` is a command used in the data backup tool called ''restic''. This command helps to search for specific data or files across all available snapshots of a backed-up repository. By using the `--snapshot` option, restic filters the results only to the data that exists in the specified snapshot(s) rather than the latest version or all versions. This is useful when you want to restore data from a particular point in time.'
        tag: '[AI] `restic find --tag` is a command in the `restic` data backup and sync tool. It''s used to search for specific data based on tags assigned to backups. The command takes zero or more tags as arguments, which are labels given to individual backup sets. By using this command, you can quickly locate and recover specific backups without having to browse through all available versions.'
        tree: '[AI] `restic find --tree` is a command in the backup tool `restic`. This command is used to search for specific files or directories within the backups created by restic, displaying the results as a tree structure. The option `--tree` is responsible for presenting the output in this hierarchical format, allowing users to easily navigate and understand the relationship between backed-up items.'
