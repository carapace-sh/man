# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: lock
description: Execute a command holding a lock
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --child-exit-code: Exit 2 if the child process exited with an error if this is true.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --monitor-retry=: Number of times to retry if Consul returns a 500 error while monitoring the lock.
    --name=: Optional name to associate with the lock session.
    --pass-stdin: Pass stdin to the child process.
    --shell: Use a shell to run the command.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --timeout=: Maximum amount of time to wait to acquire the lock.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
    --verbose: Enable verbose (debugging) output.
documentation:
    command: '[AI] `consul lock` is a Command Line Interface (CLI) command provided by Hashicorp''s Consul service discovery and configuration management tool. This command facilitates acquiring and releasing distributed locks using the Consul Key-Value store. When you use `consul lock acquire <key>`, it attempts to obtain an exclusive lock on the given key, waiting if necessary for any existing locks to expire or release. Conversely, `consul lock release <key>` command releases a previously acquired lock. These commands help coordinate access to shared resources in distributed systems and prevent data inconsistencies.'
    flag:
        ca-file: '[AI] `consul lock --ca-file` is a command-line option used with Consul, an open-source tool for service discovery and configuration management. This option is utilized when implementing distributed locks to coordinate access to shared resources among multiple Consul agents or clients. The `--ca-file` flag specifies the path to a PEM-encoded Certificate Authority (CA) file. By providing this file, it allows Consul to validate the TLS certificates of other Consul agents involved in the locking process, ensuring secure communication between them.'
        ca-path: '[AI] The `--ca-path` flag in the `consul lock` command is used to specify the path to a directory containing the CA (Certificate Authority) certificates that will be used to sign the Consul Lock''s TLS certificate. This is important for securing communication between nodes in a Consul cluster and ensuring data consistency through the Consul Lock service. When you run `consul lock`, it generates a new TLS certificate and key pair, signs them with one of your CA certificates, and starts the Consul Lock server using this secured configuration.'
        child-exit-code: '[AI] The `--child-exit-code` flag is a configuration option for Consul''s locking mechanism, which is used to manage the exclusive access to resources or processes. When this flag is set, Consul will honor the child process exit code if the lock is released due to its termination. This means that the parent process can obtain the lock status based on the child process''s exit status, allowing for more granular control and error handling in multi-process systems.'
        client-cert: '[AI] The `consul lock --client-cert` command is used in Consul, a connectivity and service discovery tool, to acquire a distributed lock using a client certificate for authentication. This command ensures that only the holder of the valid client certificate can obtain the lock, adding an extra layer of security to prevent concurrent modifications on shared resources.'
        client-key: |-
            [AI] The `consul lock --client-key` command is used in Consul, a distributed coordination and service discovery tool. This command sets or acquires a distributed lock using Consul's Key Value Store (KVS), which ensures that only one client can hold the lock at a time.

            The `--client-key` flag specifies the unique identifier of the client holding the lock, allowing other clients to check if they need to wait before attempting to acquire the lock. If another client tries to acquire a lock with the same key that is already held by another client, it will fail and return an error message.

            In summary, `consul lock --client-key` helps prevent race conditions in multi-threaded applications or distributed systems by ensuring that only one client can perform a critical operation at any given time.
        datacenter: |-
            [AI] The `consul lock --datacenter` command is used in Hashicorp Consul, a distributed, highly available key-value store and service discovery solution. This command is related to Consul's built-in locking feature, which can be utilized to ensure that only one agent or process can make updates to shared data concurrently, preventing conflicts or inconsistencies.

            The `--datacenter` flag is used to specify the datacenter name for lock acquisition and release operations in a multi-datacenter Consul setup. When using multiple datacenters, it's essential to ensure that locks are acquired and released consistently across all participating datacenters to maintain data consistency. By specifying the datacenter name with the `--datacenter` flag, you ensure that locking operations are performed within the specified datacenter only.
        http-addr: '[AI] The `--http-addr` flag in the Consul Locking API is used to specify the HTTP address where the locking service will listen for requests. When starting a Consul agent with the Locking service, you can set this flag to bind the locking API to a specific IP address and port number (in the format `<IP_ADDRESS>:<PORT_NUMBER>`). This allows multiple Consul agents to run in the same datacenter while ensuring that only one agent manages the locks for a particular resource. For example, if you set `--http-addr 192.168.0.5:8500`, then other agents will not be able to acquire or release locks using this address.'
        monitor-retry: '[AI] The `consul lock --monitor-retry` command is a feature of Consul, a distributed, highly available, and data center aware toolchain for service discovery, configuration, and orchestration. This specific command sets up a Consul lock, which allows multiple processes to coordinate access to a shared resource in a consistent and conflict-free manner. The `--monitor-retry` option enables the lock to automatically retry if it detects that the resource is no longer available due to failure or eviction from the Consul cluster. This feature helps ensure high availability of applications that depend on the locked resource by enabling them to recover gracefully in case of failures.'
        name: '[AI] The `consul lock --name` command is a part of Consul, a distributed, highly available, and data center aware toolchain for configuring and managing applications and their associated infrastructure. This specific command creates or obtains a distributed lock under the given name in the Consul Key Value Store. The flag `--name` specifies the unique identifier for the lock, allowing multiple locks with distinct names to exist simultaneously. When a process acquires a lock, it will hold ownership of that lock until it is explicitly released, ensuring mutual exclusion and coordination among different processes attempting to access shared resources.'
        pass-stdin: |-
            [AI] `consul lock` is a command-line tool provided by Consul, a distributed, open source, and easy-to-use key-value store and service registration platform. The `--pass-stdin` flag is an option used to pass input data to the command through standard input instead of specifying it directly in the command line arguments. This can be useful when the input data is large or complex and easier to provide as a stream rather than inline. When using `consul lock` with this flag, you would typically read the input data from a file and pipe it to the command:

            ```bash
            cat lockfile > consul lock --pass-stdin < unlockfile
            ```

            This way, both the lock file and the unlock file are handled as separate files while keeping the input data itself within the standard input stream.
        shell: '[AI] The `consul lock --shell` command is used with the Consul service discovery and configuration tool to acquire a distributed lock in a scripting environment such as Shell. This command ensures that only one process can modify a resource concurrently by acquiring and releasing a lock on it. The flag `--shell` specifies that the lock should be acquired and managed interactively using the Shell, making it suitable for scripts or manual operations where fine-grained control over lock acquisition is required.'
        stale: '[AI] `consul lock --stale` is a command used in Hashicorp Consul, a distributed, highly-available key-value and configuration management store. This command attempts to acquire a lock on a given key in the Consul KeyValue store with the stale option enabled. When using the `--stale` flag, Consul will return an acquired lock even if the data under the key has changed since the acquisition attempt began. In other words, this command allows acquiring locks on potentially stale data. This behavior can be useful when dealing with rapidly changing data or when updating configurations where a brief delay in processing is acceptable. However, using stale locks may lead to inconsistencies and potential data conflicts. Always consider the implications of using `--stale` before implementing it into your workflows.'
        timeout: |-
            [AI] The `consul lock --timeout` command is used in Consul, a distributed coordination and service discovery tool. This command sets a lease or acquisition timeout for obtaining and releasing locks within the Consul KeyValue store.

            When using the `consul lock` command to acquire a lock on a specific key, you can set a timeout parameter. The `--timeout` flag specifies how long Consul should wait before giving up and releasing the lock if it cannot be acquired within that time. This is useful for preventing deadlocks or infinite loops when trying to obtain a lock indefinitely. The timeout value is specified in seconds, making the command look like this: `consul lock <key> --timeout <seconds>`.
        tls-server-name: '[AI] The `--tls-server-name` flag is a configuration option used with Consul''s Locking API. It specifies the TLS server name that Consul should use when establishing secure connections for locking operations. This can be important in environments where multiple Consul servers exist and you want to ensure that clients connect to the correct server for lock acquisition and release. Setting this flag appropriately helps maintain data consistency within your distributed system.'
        token: '[AI] The `consul lock --token` is a command used in the Consul distributed key-value store and service registration platform. It creates or obtains a new lock token, which can be used to ensure atomicity when performing multiple related operations that might conflict with each other. This command helps prevent data corruption by ensuring that only one agent can perform certain actions at a time. The `--token` option specifies the Consul key under which the lock will be stored in the key-value store, and it returns the token value as output.'
        token-file: |-
            [AI] The `consul lock --token-file` command is a part of Consul, a connectivity and service coordination tool from Hashicorp. This specific command is used to obtain and manage locks in a distributed system using Consul's built-in locking mechanism.

            The `--token-file` flag indicates that the token for authentication should be read from the specified file instead of being provided directly on the command line. It helps ensure secure access to the lock by not exposing the token publicly in the command. This is particularly useful when running scripts or automation tools where sensitive information should be kept confidential.
        verbose: '[AI] `consul lock --verbose` is a command used in the Consul distributed key-value store and coordination service. It sets a lock on a given key, preventing other processes from modifying it until the lock is released. The `--verbose` flag increases the output level of details, providing more information about the locking process, such as the lock ID, the process ID that acquired the lock, and the start and end timestamps.'
