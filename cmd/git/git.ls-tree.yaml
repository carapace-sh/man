# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ls-tree
description: List the contents of a tree object
group: low-level interrogator
flags:
    --abbrev=: use <n> digits to display SHA-1s
    --full-name: use full path names
    --full-tree: list entire tree; not just current directory (implies --full-name)
    --name-only: list only filenames
    --name-status: list only filenames
    -d: only show trees
    -l, --long: include object size
    -r: recurse into subtrees
    -t: show trees when recursing
    -z: terminate entries with NUL byte
documentation:
    command: '[AI] `git ls-tree` is a Git command used to display the tree structure of a specific commit or a tree object. It shows the mode (file type), size, and SHA-1 checksum for each file in the tree, along with its blob''s SHA-1 checksum. The output can be further formatted using various options like `--full-name-status` for displaying full file paths or `--sha-nostat` to exclude the SHA-1 checksums from the output.'
    flag:
        abbrev: '[AI] `git ls-tree --abbrev` is a Git command used to show the tree objects in a commit, with abbreviated tree object hashes. The `--abbrev` option shortens the output by displaying only the first 7 or 8 characters of the hash instead of the full 40-character hash. This can make the output easier to read and work with when dealing with large repositories. The command, without additional options, lists each file under the tree with its size and mode.'
        d: '[AI] `git ls-tree -d` is a Git command used to list the tree objects in a Git repository, but in this specific case, it''s asked to display only the top-level tree (i.e., the root tree) and not any of its child trees or blobs. The `-d` option stands for "display only the tree object hashes" and is used instead of the more common `-R` (recursive) option when you''re specifically interested in the root tree hash alone.'
        full-name: '[AI] `git ls-tree --full-name` is a Git command used to show the complete tree object names and their corresponding tree structures. The `--full-name` option makes Git print the full SHA-1 hash of each commit or tree object, along with its name (the tree''s parent hash). This command provides detailed information about the Git tree structure for debugging, scripting, or other advanced uses.'
        full-tree: '[AI] `git ls-tree --full-tree` is a Git command used to display the entire tree structure of a specific commit, showing all files and subdirectories along with their blob SHA1 checksums and mode permissions. The `--full-tree` option ensures that the output includes the full tree structure, not just the differences since the last commit.'
        long: '[AI] `git ls-tree --long` is a Git command used to show the tree object representations in a long format. The tree objects represent the files and directories at a specific commit in a Git repository, including their mode (file permissions), size, SHA-1 hash, and tree entry hashes for child nodes if any. This command can be useful when analyzing or traversing Git history for debugging or other purposes. It provides detailed information about the tree structure at a given commit.'
        name-only: '[AI] `git ls-tree --name-only` is a Git command used to list the names of files and directories in a specific tree or commit. It displays only the file and directory names, without any other details like blob hashes or mode information. This can be useful for getting a quick overview of the files changed in a particular commit or branch without having to navigate through diff output or file contents.'
        name-status: '[AI] `git ls-tree --name-status` is a Git command used to display the tree status of named trees or commit objects. The `--name-status` option makes Git show the names of the files in each committed state (added, modified, deleted, or unchanged) alongside the tree hash. It provides a quick way to review the changes made in a specific commit without having to navigate to the individual file diffs.'
        r: '[AI] `git ls-tree -r` is a Git command used to recursively show the tree objects in a repository, displaying all the blobs and trees, including their commit messages and SHA-1 hashes. It''s often employed to get an overview of the entire directory structure within a specific Git commit or branch. The `-r` option signifies a recursive traverse.'
        t: '[AI] The `git ls-tree -t` command is used to display the tree object corresponding to the current commit''s tip in a Git repository. The `-t` option tells Git to output only the raw tree object hash instead of the usual tree structure with hashes of its children and their mode and name. This command is often used to obtain the root tree object hash for other Git operations.'
        z: '[AI] `git ls-tree -z` is a Git command used to list tree objects in a compressed format, with each tree object represented as a series of zero-terminated strings. The `-z` option causes Git to output the tree data in a format that can be processed directly by other programs using the NUL character as a delimiter between fields. This command is often used for input to other commands or scripts that require raw tree data, such as `awk`, `sed`, or other data processing tools.'
