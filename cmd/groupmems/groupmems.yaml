# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: groupmems
description: administer members of a user's primary group
flags:
    -R, --root=: directory to chroot into
    -a, --add=: add username to the members of the group
    -d, --delete=: remove username from the members of the group
    -g, --group=: change groupname instead of the user's group
    -h, --help: display this help message and exit
    -l, --list: list the members of the group
    -p, --purge: purge all members from the group
documentation:
    command: '[AI] The `GROUPMEMS` command in Discord.py, a popular Discord library for Python, is used to retrieve the list of members in a given discord.Guild object. It returns an async iterable of Member objects representing each member in the specified guild. This command can be useful for various tasks such as managing roles or permissions, or simply getting a count of the number of members in a server. For usage, you can call it as `guild_object.members` or use `async for member in guild_object.members:` to iterate through each member individually.'
    flag:
        add: |-
            [AI] `groupmems --add` is a command used in Discord.js, a popular Node.js library for interacting with the Discord API. This command adds one or more members to a specific Discord server's text or voice channel based on their IDs. The general syntax is:

            ```javascript
            client.groups.cache.get(<GuildID>).members.cache.get(<MemberID1>)
              .add([<ChannelName1>, <ChannelID1>], [<MemberID2>, <ChannelName2>, <ChannelID2>], ...)
            ```

            Here:

            - `client.groups.cache.get(<GuildID>)`: Fetches the server object from Discord's cache using its ID.
            - `members.cache.get(<MemberID1>)`: Retrieves the member object related to their Discord ID.
            - `add()`: Adds members to a specified channel. It accepts multiple sets of arguments, each containing MemberID, ChannelName (optional), and ChannelID.
            - The command updates the members' roles and permissions within the added channels accordingly.
        delete: '[AI] `groupmems --delete` is a command used in Telegram bots to remove members from a specific group chat. The command takes the chat ID and member IDs as arguments, for example: `--chatid <chat_id> --memberids <member_id_1, member_id_2, ...>`. When executed, this command will remove the specified members from the given group chat. It is often used to manage group memberships programmatically in bot applications.'
        group: '[AI] `groupmems --group` is a command used in Discord.js, a popular Discord bot library for Node.js. This command allows retrieving the list of members in a given Disord group or server. The `--group` option specifies that only the name and ID of the group (i.e., category) should be excluded from the response, returning only the user IDs and user tags of the members within the specified group.'
        help: |-
            [AI] `groupmems --help` is a command used in Discord.js, a popular Node.js library for interacting with the Discord API. This specific command is related to handling and managing members of a Discord server or group.

            When you run `groupmems --help` in your terminal or command prompt while using Discord.js, it will display a help message that explains the various options and functionalities of the `groupmems` module. Here's what you can typically expect from this help message:

            1. **Description**: A brief overview of what the `groupmems` module does.
            2. **Options**: Detailed explanations of various functions, such as:
               * `fetch(guildID[, cache])`: Retrieves a collection of members from a specific server.
               * `add(member)`: Adds a new member to the cache.
               * `setBans(guildID, bans)`: Sets the bans for a given guild.
               * etc.
            3. **Events**: Information about events that are emitted when specific actions occur related to managing server members, such as `memberUpdate`, `memberRemove`, etc.
            4. **Related classes and interfaces**: References to various classes and interfaces that you may use for managing members in your bot code, like `ClientUser`, `GuildMemberManager`, etc.
            5. **Example usage**: Code examples demonstrating how to use different functions within the `groupmems` module effectively.

            Keep in mind that the exact help message might vary depending on the version of Discord.js and its documentation updates.
        list: '[AI] The `groupmems --list` command is used in Telegram bots to retrieve a list of users or chat IDs that are members of a specific group chat. This command is typically used with the Telegram Bot API and requires providing the chat ID as an argument. The output will be a JSON array containing the user IDs, and can be accessed by making an HTTP request to the bot''s API endpoint. It''s important to note that in order to use this command, the bot must have the necessary permissions to manage group members in the specified chat.'
        purge: '[AI] The `--purge` option in the Discord.js library''s `groupMems` command is used to permanently delete a specified member from a Discord server''s member list and also remove all of their data related to that server, including messages they have sent, roles they had, and any data stored in server-side databases. This action cannot be undone as it completely removes the user''s presence from the server with no record left behind.'
        root: '[AI] `groupmems --root` is a command-line utility in Telegram OpenNetwork (TON) blockchain environment, specifically for the TON-Core node implementation. This command is used to list all members of a given Telegram group or chat, but with the `--root` flag, it returns the information for the root admin of the group instead of the entire member list. So, this command provides the ID of the bot or user that created and has full control over the specified Telegram group.'
