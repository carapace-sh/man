# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: compile
description: Compile a QMK Firmware
flags:
    --keyboard=: The keyboard to build a firmware for.
    --keymap=: The keymap to build a firmware for.
    -c, --clean: Remove object files before compiling.
    -e, --env=: Set a variable to be passed to make.
    -h, --help: show this help message and exit
    -j, --parallel=: Set the number of parallel make jobs.
    -n, --dry-run: Don't actually build, just show the make command to be run.
documentation:
    command: '[AI] `qmk compile` is a command used in the QMK (Quantum Mechanical Keyboard) firmware to build and flash custom keyboard layouts and configurations onto keyboards. It compiles the source code of your keymap and other configuration files written in the QMK programming language, generating optimized machine code for your specific keyboard hardware. After successful compilation, the generated hex file can be flashed using an AVR ISP programmer or an Arduino IDE to upload the new firmware onto your keyboard.'
    flag:
        clean: '[AI] `qmk compile --clean` is a command used in the QMK (Quantum Mechanical Keyboard) firmware project to clean and recompile the keyboard firmware from scratch. The `--clean` option ensures that all generated files are deleted before compiling, which can help resolve build issues caused by previous compilation errors or outdated files.'
        dry-run: '[AI] `qmk compile --dry-run` is a command used in the QMK firmware building process. It performs a simulation of the actual compilation and flashing steps without actually making any changes to the hardware. This can be useful for verifying the correctness of keymap or other configuration file modifications before applying them to the physical keyboard. The output displays what files would be compiled, linked, and used during the actual build process.'
        env: '[AI] `qmk compile --env` is a command used in the QMK keyboard firmware project. It compiles and builds the keyboard firmware using a specific environment or configuration file passed through the `--env` option. This allows users to easily build custom firmware setups tailored to their unique keyboards, while ensuring consistent and reliable builds across projects.'
        help: '[AI] `qmk compile --help` is a command used in the QMK (Quantum Mechanical Keyboard) firmware project to display help information about the compilation process. It doesn''t actually compile anything, but rather provides detailed instructions on how to use the `qmk compile` command with various options for building and flashing custom keyboard firmware. These options include specifying the keyboard layout, selecting a keymap, choosing a compiler, setting build flags, and more.'
        keyboard: '[AI] `qmk compile --keyboard` is a command used in the QMK (Quantum Mechanical Keyboard) firmware project to build and generate the custom binary file for a specific keyboard layout. The `--keyboard` option specifies which keyboard''s layout and configuration files should be compiled. When you run this command, QMK processes your keyboard''s keymap, action handlers, and other configurations to create an optimized firmware image that can be flashed onto your keyboard using an appropriate programmer or bootloader.'
        keymap: '[AI] `qmk compile --keymap` is a command used in the QMK firmware for keyboard projects. It compiles and builds a specific keymap within the QMK project. A keymap defines how keys on a keyboard are programmed to function, including what keycodes they represent and what actions they perform when pressed. By using `--keymap` followed by the name of the desired keymap file, this command generates the custom firmware for that specific layout or configuration.'
        parallel: '[AI] `qmk compile --parallel` is a command used in the QMK (Quantum Mechanical Keyboard) firmware platform for compiling and flashing custom keyboard layouts. The `--parallel` option enables parallel compilation, which allows multiple keys files to be compiled at the same time on multi-core systems, reducing the overall compile time. This can save significant time when working with large or complex projects involving multiple key maps.'
