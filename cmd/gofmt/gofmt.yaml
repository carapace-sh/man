# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gofmt
description: format Go source code
flags:
    --cpuprofile=: write cpu profile to this file
    -d: display diffs instead of rewriting files
    -e: report all errors (not just the first 10 on different lines)
    -l: list files whose formatting differs from gofmt's
    -r=: rewrite rule
    -s: simplify code
    -w: write result to (source) file instead of stdout
documentation:
    command: '[AI] `gofmt` is a command-line tool in Go programming language used to apply a consistent coding style to Go source code files. It reads Go source code files, parses them, and then formats the code according to the Go coding conventions. The primary goal of gofmt is to ensure uniformity in formatting across different projects or within a team, which makes the codebase easier to read and maintain.'
    flag:
        cpuprofile: |-
            [AI] `gofmt` is a command-line tool in Go programming language used for formatting source code with a consistent style. The `--cpuprofile` flag is an optional argument that enables CPU profiling while running gofmt on one or more Go source files.

            When this option is set, gofmt generates a CPU profile file named `pprof.cpuprof` in the current directory. This file can be used with other profiling tools like `pprof`, which helps to identify performance bottlenecks by analyzing the distribution of CPU usage across functions and source code locations.

            Keep in mind that this feature is mainly intended for large projects or when optimizing code, as formatting your code may not typically require extensive CPU profiling.
        d: '[AI] `gofmt -d` is a command-line tool in Go programming language used to apply a consistent format to Go source code files. The `-d` flag stands for "dot" or "dump," which outputs the formatted Go code to standard output (STDOUT) instead of writing it to a file. In other words, it formats and prints the Go code directly to the terminal without saving it in a file.'
        e: '[AI] `gofmt -e` is a command-line tool in Go programming language used to format Go source code files according to the Go style guide. The `-e` flag stands for "in-place editing," which means it modifies the original source file directly instead of outputting formatted code to a new file. So, using `gofmt -e <file.go>` will apply the Go style rules to the specified file and save the changes in place.'
        l: '[AI] `gofmt -l` is a command-line tool in Go programming language used to check and format source code files according to the Go style guidelines. The `-l` flag is an option that provides only the list of files that need formatting, without actually formatting them. This is useful when you want to identify files with inconsistent formatting before applying the formatter across multiple files.'
        r: '[AI] `gofmt -r` is a command-line tool in Go programming language used to reformat Go source code files. The `-r` flag stands for "recursive." When used, it will not only format the current file but also all Go files in the same directory and any nested subdirectories. This is useful when you want to ensure consistent formatting across an entire project.'
        s: '[AI] `gofmt -s` is a command-line tool in Go programming language used to format source code with a consistent style. The `-s` flag stands for "compile and fix" or "single source." It does the same formatting job as the regular `gofmt` command but also compiles the source file. This means that errors, if any, will be reported at the end of the process rather than requiring separate compilation with `go build`.'
        w: '[AI] `gofmt -w` is a command-line tool in Go programming language. The `-w` flag is used to reformat all Go source files in the current directory and subdirectories recursively, saving the results back to their original files. This means it can be used to enforce a consistent coding style across multiple files or an entire project.'
