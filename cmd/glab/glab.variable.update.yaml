# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update <key> <value>
description: Update an existing project or group variable
flags:
    -g, --group=: Set variable for a group
    -m, --masked: Whether the variable is masked
    -p, --protected: Whether the variable is protected
    -s, --scope=: The environment_scope of the variable. All (*), or specific environments
    -t, --type=: 'The type of a variable: {env_var|file}'
    -v, --value=: The value of a variable
documentation:
    command: |-
        [AI] The `glab` command `variable update` is used to update values for GitLab CI/CD project variables in a YAML format file (`.gitlab-ci.yml` or `.gitlab-workflow.yml`). It allows users to modify variable values without modifying the entire YAML file, improving collaboration and maintaining the integrity of the configuration file. The command takes variable key and new value as arguments. For example:

        ```bash
        glab var update <PROJECT_NAME> <VARIABLE_KEY>="<NEW_VALUE>"
        ```
    flag:
        group: '[AI] The `flag "glab variable update --group"` is a command used in GitLab''s CLI (Command Line Interface) tool, Glab. This command is used to update variables for a specific group within a GitLab project''s CI/CD (Continuous Integration/Continuous Delivery) configuration. By specifying the `--group` flag followed by the name of the desired group, you can modify the values of variables that are scoped to that particular group''s jobs and stages in your pipeline. This command is particularly useful when working with multi-stage pipelines or projects where different environments require unique variable configurations.'
        masked: '[AI] `flag "glab variable update --masked"` is a command in GitLab''s CLI (Command-Line Interface) tool, called Glab. This command is used to update local GitLab-managed variables with new values while keeping the current value hidden from the command output and from being stored in the `.gitlab-ci.yml` file. The `--masked` flag ensures that sensitive information, such as tokens or keys, is not displayed on the screen when running the command in an unsecured environment. This feature helps maintain security by preventing accidental exposure of sensitive data during development.'
        protected: '[AI] The `flag "glab variable update --protected"` is a command used in GitLab, specifically with Glab (GitLab CLI), to update a protected variable. Protected variables are GitLab project or group variables that have been locked down with access restrictions to prevent unintended modifications. By using the `update` command with the `--protected` flag, you ensure that only users with the appropriate permissions can modify the variable. This command takes the new value as an argument and sets the protected variable accordingly, maintaining its security.'
        scope: '[AI] The `glab` command is a Git interface for the Kubernetes `kubectl` tool, allowing users to manage Kubernetes resources using Git operations. The `flag --scope` used with `glab variable update` specifies the scope of the Kubernetes object where the variable update will be applied. This flag can take values like `namespace/name` or `--all`, indicating that the change should be made in all namespaces or in a specific namespace and object. For example, `glab variable update myvar --scope myns/mypod` updates the variable `myvar` in the `mypod` resource located in the `myns` namespace.'
        type: |-
            [AI] The `flag "glab variable update --type"` is used with GitLab's CLI tool, Glab. This command updates a specific variable in a GitLab project or repository. Here's a breakdown of the flag:

            - `variable`: Replaces the existing variable with a new value.
            - `update`: Indicates that you want to update an existing variable instead of creating a new one.
            - `--type`: Specifies the type of the variable being updated. It can be either a secret (encrypted) or a non-secret variable.

            Example usage: `glab secrets update MY_VARIABLE --type secret VALUE` or `glab variables update MY_VARIABLE VALUE`.
        value: '[AI] `flag "glab variable update --value"` is a command in GitLab''s CLI tool (Glab) used to update the value of a GitLab CI/CD variable. The command takes the name of the variable as an argument, followed by the new value to be set. For example: `glab variable update MY_VAR --value my_new_value`. This command modifies the configuration file (.gitlab-ci.yml) in your local repository and pushes the changes back to GitLab, updating the variable''s value in the CI/CD pipeline.'
