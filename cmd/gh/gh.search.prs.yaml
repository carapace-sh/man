# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: prs [<query>]
description: Search for pull requests
flags:
    --app=: Filter by GitHub App author
    --archived: Restrict search to archived repositories
    --assignee=: Filter by assignee
    --author=: Filter by author
    --checks=: 'Filter based on status of the checks: {pending|success|failure}'
    --closed=: Filter on closed at `date`
    --commenter=: Filter based on comments by `user`
    --comments=: Filter on `number` of comments
    --created=: Filter based on created at `date`
    --draft: Filter based on draft state
    --interactions=: Filter on `number` of reactions and comments
    --involves=: Filter based on involvement of `user`
    --json*=: Output JSON with the specified `fields`
    --label*=: Filter on label
    --language=: Filter based on the coding language
    --locked: Filter on locked conversation status
    --match*=: 'Restrict search to specific field of issue: {title|body|comments}'
    --mentions=: Filter based on `user` mentions
    --merged: Filter based on merged state
    --merged-at=: Filter on merged at `date`
    --milestone=: Filter by milestone `title`
    --no-assignee: Filter on missing assignee
    --no-label: Filter on missing label
    --no-milestone: Filter on missing milestone
    --no-project: Filter on missing project
    --order=: 'Order of results returned, ignored unless ''--sort'' flag is specified: {asc|desc}'
    --owner*=: Filter on repository owner
    --project=: Filter on project board `number`
    --reactions=: Filter on `number` of reactions
    --review-requested=: Filter on `user` or team requested to review
    --review=: 'Filter based on review status: {none|required|approved|changes_requested}'
    --reviewed-by=: Filter on `user` who reviewed
    --sort=: 'Sort fetched results: {comments|reactions|reactions-+1|reactions--1|reactions-smile|reactions-thinking_face|reactions-heart|reactions-tada|interactions|created|updated}'
    --state=: 'Filter based on state: {open|closed}'
    --team-mentions=: Filter based on team mentions
    --updated=: Filter on last updated at `date`
    --visibility*=: 'Filter based on repository visibility: {public|private|internal}'
    -B, --base=: Filter on base branch name
    -H, --head=: Filter on head branch name
    -L, --limit=: Maximum number of results to fetch
    -R, --repo*=: Filter on repository
    -q, --jq=: Filter JSON output using a jq `expression`
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
    -w, --web: Open the search query in the web browser
documentation:
    command: '[AI] The `gh search prs` command is used with the GitHub CLI (gh) to search for pull requests on GitHub based on given keywords or criteria. It returns a list of matching pull requests, displaying relevant information such as title, author, and status.'
    flag:
        app: '[AI] `gh search prs --app` is a command used with GitHub''s command-line tool, `gh`. This command searches for Pull Requests (prs) within a specific GitHub application instead of a repository. The results returned will include the title, description, and other relevant information about each pull request. It can help users manage or triage PRs across multiple applications in their GitHub account.'
        archived: '[AI] `gh search prs` is a GitHub CLI command used to search for Pull Requests (PRs) on GitHub. The `--archived` flag limits the search results to include only archived repositories. In other words, it searches for PRs in both public and private repositories, including those that have been archived (i.e., no longer receiving regular updates but not yet deleted).'
        assignee: '[AI] The command `gh search prs --assignee` is used in GitHub''s command-line interface (CLI) tool, `gh`, to search for pull requests (PRs) where the assignee is specified. The flags `search` and `prs` tell `gh` to search for PRs specifically, while `--assignee` restricts the search results to PRs that have been assigned to a particular user.'
        author: '[AI] The `gh search prs --author` command is used in GitHub''s CLI (Command Line Interface) tool, `gh`, to search for pull requests (PRs) that were created by a specific author. The `search` subcommand is used to initiate the search query, and the `prs` flag specifies that we are looking for PRs specifically. The `--author` flag filters the results to only show PRs created by the specified GitHub username or email address.'
        base: '[AI] The `gh search prs --base` command is used in GitHub''s command-line tool (gh) to search for pull requests (PRs) with a specific base branch. The base branch is the branch that will be merged into when the PR is applied. This command allows users to find PRs related to a particular base branch, which can be helpful when working on large projects or collaborating with multiple teams.'
        checks: '[AI] `gh search prs --checks` is a GitHub CLI command used to search for pull requests (PRs) based on specific check statuses. The `--checks` option filters the results to show only PRs that have passed, failed, or errored during continuous integration (CI) or other automated checks in GitHub. This command can help developers quickly find PRs needing attention based on their check status.'
        closed: '[AI] The command `gh search prs --closed` is a GitHub CLI (Command Line Interface) query used to search for closed pull requests in a specific repository. The `gh` is the GitHub CLI tool, `search` is the command used to run queries, `prs` specifies that we want to search for pull requests, and `--closed` filters the results to only show pull requests that have been merged or closed (but not necessarily merged).'
        commenter: '[AI] `gh search prs --commenter` is a GitHub CLI command used to search for pull requests (PRs) where a specific user has left comments. The `gh` tool is a command-line interface for interacting with the GitHub API, and this particular command searches for PRs that match the given query, which in this case includes the flag `--commenter`, specifying the username of the commenter to filter the results by.'
        comments: '[AI] `gh search prs` is a GitHub CLI command used to search for pull requests. The `--comments` flag filters the search results to only show pull requests with comments associated with them. This can help users quickly find pull requests where they have previously left feedback or need to check the discussion history.'
        created: '[AI] The `gh search prs --created` command is used in GitHub''s command-line tool, `gh`. This command searches for pull requests (PRs) that have been created on a specific GitHub repository. The `--created` flag filters the results to only show PRs that were created after a certain point in time. The output of this command includes various information about each PR, such as its number, title, author, and creation date.'
        draft: '[AI] `gh search prs --draft` is a GitHub CLI command that searches for draft pull requests in your repositories. Draft pull requests are those which have not been opened with the `create pull request` action and can be edited before merging or discarding them. This command helps users to find, manage and collaborate on these draft pull requests more efficiently.'
        head: |-
            [AI] The command `gh search prs --head` is a GitHub CLI (Command Line Interface) query used to search for pull requests with the most recent commit as their head commit. Here's what each part of the command means:

            1. `gh`: This stands for GitHub CLI, which is a tool that enables users to interact with GitHub using command-line commands.
            2. `search`: This is the command used to search for specific items on GitHub, like issues, pull requests, or repositories.
            3. `prs`: Abbreviated for pull requests. It specifies that you want to search for pull requests.
            4. `--head`: This option filters the search results to show only those pull requests whose most recent commit is their head commit (i.e., they don't have any merged branches).
        interactions: |-
            [AI] `gh search prs --interactions` is a GitHub CLI command used to search for pull requests with interaction history. The command uses the `gh` tool, which is a GitHub client for the command line.

            The `search` subcommand is used to query GitHub's REST API for specific results based on given filters. Here, we are searching for `prs` (pull requests). Additionally, we use the `--interactions` flag to retrieve pull request interactions such as comments, reviews, and reactions. This flag returns both direct and mentioned interactions. The output will include a list of pull requests with their respective interaction data.
        involves: '[AI] `gh search prs --involves` is a command used in GitHub''s command-line interface (CLI), `gh`, to search for pull requests involving a specific user or repository. The `--involves` flag filters the search results to only show pull requests where the specified user has contributed or where the specified repository is involved (either as the base branch or the head branch).'
        jq: '[AI] `gh search prs` is a command using GitHub''s CLI (Command Line Interface) tool, gh. This command searches for pull requests on GitHub based on given query parameters. The `--jq` flag enables the use of jq (JSON processor) to filter and transform the JSON output of the command. Therefore, `gh search prs --jq` is used to search and process pull request data as JSON.'
        json: '[AI] `gh search prs` is a GitHub CLI command used to search for pull requests (PRs) on GitHub. The `--json` flag instructs the command to return the search results in JSON format, which can be easily parsed and processed by scripts or other applications. The complete command `gh search prs --json` searches for PRs as JSON data.'
        label: '[AI] `gh search prs` is a command used in GitHub''s CLI (Command Line Interface) tool, Ghq, to search for pull requests (prs). The `--label` option filters the results based on labels attached to the pull requests. For instance, running `gh search prs --label="bugfix"` would return only pull requests labeled with "bugfix".'
        language: '[AI] The command `gh search prs --language` is used in GitHub''s command-line interface (cli), called GitHub CLI (GH). This command searches for pull requests (prs) that match a given query, filtered by the specified programming language. For instance, if you want to find pull requests related to Python language, run `gh search prs --language python`. This will return a list of PRs with titles and descriptions containing the searched term and written in Python.'
        limit: '[AI] The command `gh search prs --limit` is used with GitHub''s CLI (Command Line Interface) tool, gh, to search for pull requests (PRs) on GitHub. The `--limit` flag sets the maximum number of results returned by the search operation. By default, `gh search prs` returns up to 10 results; using the `--limit` flag allows you to specify a different limit, such as `--limit 25` to return up to 25 PRs.'
        locked: '[AI] The `gh search prs --locked` command is used with GitHub''s CLI (Command-Line Interface) tool, `gh`. This specific search command looks for locked pull requests within a repository or across your organizations'' repositories. A pull request is "locked" when its merge has been restricted by repository administrators to prevent unwanted merges, ensuring code review and maintaining control over changes in the project.'
        match: '[AI] The `gh search prs --match` command is used in GitHub''s command-line tool (Git Hub for Desktop or GitHub CLI) to search for pull requests (PRs) that match a specific pattern in their titles or descriptions. The `--match` option specifies a regular expression pattern to filter the search results. For example, `gh search prs --match "feature"` would return PRs with titles or descriptions containing the word "feature".'
        mentions: '[AI] `gh search prs --mentions` is a command used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for Pull Requests (PRs) that have been mentioned in specific issues or discussions on GitHub. The search results will include the PR number, title, and other relevant information.'
        merged: '[AI] The command `gh search prs --merged` is used in GitHub''s command-line interface (cli) tool, called `gh`. This command searches for merged pull requests (prs) within a repository or across multiple repositories. The `--merged` flag filters the results to only display pull requests that have already been merged into their respective branches or mainlines.'
        merged-at: '[AI] The `gh search prs --merged-at` command is a GitHub CLI (Command Line Interface) query that searches for merged pull requests (PRs) on a specific GitHub repository based on the given date or range. The `--merged-at` option filters the results to only display PRs that have been merged at or before the specified time. This can be useful for finding historical merged PRs, such as those from a particular milestone or release cycle.'
        milestone: '[AI] The command `gh search prs --milestone` is a GitHub CLI (Command Line Interface) command used to search for pull requests (PRs) that have been assigned a specific milestone on GitHub. The `gh` is the name of the GitHub CLI tool, `search` is the subcommand used for searching, `prs` specifies that we want to search for pull requests, and `--milestone` is an option that filters the results to only show PRs associated with the specified milestone.'
        no-assignee: '[AI] `gh search prs` is a GitHub CLI command used to search for pull requests (PRs) in an organization or user''s repository. The `--no-assignee` flag refines the search results to show only those PRs that currently do not have an assignee assigned. In summary, it searches and lists PRs without any designated owner or maintainer for further review or collaboration.'
        no-label: '[AI] The `gh search prs --no-label` command is a GitHub CLI (Command Line Interface) command used to search for pull requests without displaying their labels. The `gh` is the GitHub CLI tool, `search` is the action, `prs` stands for pull requests, and `--no-label` is an option that instructs the command not to show the labels associated with each pull request in the search results.'
        no-milestone: '[AI] `gh search prs` is a GitHub CLI command to search for pull requests. The `--no-milestone` option restricts the search results to pull requests that do not have an associated milestone. In other words, it returns only the open pull requests which are not assigned to any milestone.'
        no-project: '[AI] The command `gh search prs --no-project` is a GitHub CLI (Command Line Interface) command used to search for Pull Requests (PRs) across all public repositories. The `--no-project` flag is optional and instructs the command not to limit the search results to a specific project or organization. In other words, it expands the search scope to include all PRs in all public GitHub projects instead of just those within a specified project or organization.'
        order: '[AI] `gh search prs` is a command from GitHub''s CLI (Command Line Interface) tool, which searches for pull requests in a repository or across all of your organizations. The `--order` flag specifies the sorting order for the search results. For example, `--order=created` will return the results in ascending order based on when they were created. Without this flag, the default sorting order may vary.'
        owner: '[AI] The command `gh search prs --owner` is used in GitHub''s command-line tool (GitHub CLI or gh for short) to search for pull requests (prs) that have been opened with a specific owner. The `search` subcommand is used to look up items on GitHub, and the `prs` argument specifies that we want to find pull requests. The `--owner` flag filters the search results to only show pull requests that have been opened by a specified user.'
        project: '[AI] `gh search prs --project` is a command used in GitHub''s CLI (Command-Line Interface) tool, called `gh`. This command searches for pull requests (PRs) within a specific project. The `--project` flag is used to specify the name or the ID of the target project. The search results will include PRs that match the given query, which by default is an empty string, meaning all PRs in the specified project will be returned.'
        reactions: '[AI] `gh search prs` is a GitHub CLI command used to search for pull requests (PRs) on GitHub. The `--reactions` option filters the search results to show PRs with specific reactions, such as "thumbs up" or "thumbs down". So, the whole command `gh search prs --reactions` returns a list of PRs having reactions applied by users.'
        repo: |-
            [AI] The command `gh search prs --repo` is a GitHub CLI (Command Line Interface) command used to search for pull requests (PRs) in specific repositories on GitHub. The `gh` prefix indicates the use of GitHub's CLI tool.

            The `search` subcommand initiates a search query, while `prs` is the argument specifying that we are looking for pull requests. The `--repo` option follows, which is used to limit the search scope to only the specified repository or repositories (you can provide multiple repository names separated by spaces). So, in summary, this command searches for pull requests within the given repository(ies).
        review: '[AI] The command `gh search prs --review` is a GitHub CLI (Command-Line Interface) query used to search for pull requests (PRs) that have been labeled as "review" in the GitHub repository or organization. This command utilizes GitHub''s contextual search functionality with the `gh` tool, making it easier for users to find and manage PRs requiring their review attention.'
        review-requested: '[AI] The `gh search prs --review-requested` command is used with GitHub''s command-line tool, `gh`. This command searches for Pull Requests (PRs) that have the review request status. PRs are merge requests that developers submit to propose changes to a repository. The `--review-requested` flag filters the search results to only show PRs where someone has requested reviews from other team members or maintainers before merging the proposed changes. This command helps streamline the code review process by making it easier to find and focus on PRs that need attention.'
        reviewed-by: '[AI] The `gh search prs --reviewed-by` command is used in GitHub to search for pull requests (PRs) that have been reviewed by a specific user. The `gh` is a command-line tool for interacting with GitHub, and the `search` subcommand is used to find PRs based on certain criteria. In this case, we''re using the `--reviewed-by` option to filter results only for PRs where the specified user has left a review. This can be helpful in finding PRs that need further action from that user, or to see all PRs they have reviewed for a particular project.'
        sort: |-
            [AI] The `gh search prs --sort` command is used in GitHub's CLI (Command Line Interface) tool, `gh`, to search for pull requests (PRs) and sort the results based on some criteria. The `search` subcommand is followed by the type of items to search for, which in this case is PRs (pull requests). The `--sort` option specifies how the search results should be ordered. Possible values for sorting include "created", "updated", or "comments":

            * `created`: Sorts the results by the date and time when each pull request was created.
            * `updated`: Sorts the results by the date and time when each pull request was last updated, regardless of whether the update was made to the code or to the PR's metadata like comments or labels.

            The final result is a list of pull requests that match your search query, ordered according to the chosen sorting method.
        state: '[AI] `gh search prs --state` is a command used in GitHub''s CLI (Command Line Interface) tool, `gh`. The command searches for Pull Requests (PRs) within a repository or across an organization. The `--state` flag specifies the state filter for the search results, which can be set to "open" or "closed". For example, `gh search prs --state open` would return a list of all open PRs in the specified scope.'
        team-mentions: '[AI] `gh search prs` is a GitHub CLI command used to search for pull requests (PRs). The option `--team-mentions` filters the search results to include only PRs that mention a specific GitHub team in their description or comments. This can be useful for teams looking to manage and track PRs related to their projects or initiatives.'
        template: '[AI] `gh search prs` is a command used in GitHub''s CLI (Command Line Interface) tool, which is called `gh`. This command searches for pull requests (PRs) on GitHub based on given parameters. The `--template` option specifies the format of the output. It allows you to customize the display of search results using Mustache templates. By combining `gh search prs --template`, you can create and save custom views of your search results, making it easier to filter, compare, or analyze PR data based on your specific needs.'
        updated: '[AI] The command `gh search prs --updated` is used in GitHub''s command-line tool (Git Hub for Desktop or Git Hub CLI) to search for pull requests that have been recently updated. The `prs` argument specifies that the search should be limited to pull requests, while the `--updated` flag filters the results to only show those pull requests that have had changes since a certain point in time. This can help developers keep track of relevant and active pull requests for their projects.'
        visibility: '[AI] `gh search prs --visibility` is a GitHub CLI command used to search for pull requests (PRs) with specific visibility settings. The `--visibility` flag filters the search results to show PRs that are either `public` or `private`, depending on your preference. By default, this command returns PRs that belong to any repository you have access to.'
        web: '[AI] `gh search prs` is a GitHub CLI command to search for pull requests (PRs) on GitHub. The `--web` option opens the search results in a web browser instead of displaying them in the terminal. So, `gh search prs --web` searches for PRs on GitHub and opens the search results in a web browser.'
