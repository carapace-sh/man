# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit
description: edit go.work from tools or scripts
flags:
    -dropreplace*=: drop a replacement
    -dropuse*=: drop a use directive
    -fmt: reformat the go.work file without making other changes
    -go=: set the expected Go language version
    -json: print the final go.work in JSON format
    -print: print the final go.work in its text format
    -replace*=: add a replacement
    -use*=: add a use directive
documentation:
    command: '[AI] The `go work edit` command is a part of Go Mod, which is a tool for managing dependencies in Go projects. This specific command is used to modify the `go.mod` file in your project directly within your terminal or command prompt. When you run this command with an editing tool specified as an argument (for example, "go work edit -i"), it opens the `go.mod` file for editing in that tool. After making modifications to the file, save and close it, and then you can update your dependencies using the `go get` or `go mod tidy` commands. This streamlines the process of managing dependencies, as it allows you to edit the `go.mod` file without having to manually modify its contents outside of your IDE.'
    flag:
        dropreplace: |-
            [AI] The command `go work edit -dropreplace` is a Sub-command under the `go work` tool, used in the Go programming language to manage multiple projects and their dependencies.

            This specific command is for editing and dropping (removing) replaced dependencies in the Go Modules file (go.mod). When you use `edit`, it opens the current module's go.mod file in your default text editor for modification. After making changes, save and close the file. The `-dropreplace` option then removes any replaced dependencies mentioned in the go.sum file, effectively undoing a previous dependency replacement with the `go get` command.
        dropuse: '[AI] The `go work edit -dropuse` command is used in Gitleks, a Git client for Kubernetes configurations, to update an existing configuration file and drop any unused dependencies. This command retrieves the latest version of the specified configuration file from the remote repository, applies local edits to it, and then pushes the updated file back with any dropped dependencies that are no longer being used in the current deployment. This can help keep your Kubernetes configurations lean and efficient by removing unneeded resources.'
        fmt: '[AI] `go work edit -fmt` is a command used with Go Mod, the Go module system. The `edit` subcommand opens an editor with the selected Go modules'' go.mod files for editing. The `-fmt` flag specifies that the editor should be prepopulated with the standard Go format (usually `gofmt`) to ensure a consistent coding style across the project.'
        go: |-
            [AI] The command `go work edit -go` is used in the Go programming language's `go` tool for managing multi-module projects. This specific command does two things:

            1. `edit`: It opens the current module in an external text editor or IDE for editing. The `$EDITOR` environment variable determines which editor to use.
            2. `-go`: It sets up the Go environment and configuration files within the opened editor, enabling features like syntax highlighting and code completion. This is also known as "Go mod init" or "Go mod open".
        json: '[AI] The command `go work edit -json` is a sub-command from the Go Mod tool (`go mod`) used in the Go programming language for managing dependencies. This specific command is designed to edit and manipulate the `Go.mod` file, which defines the module''s direct and transitive dependencies, in JSON format. It''s often used when you want to make changes to your project''s dependency tree using an external tool or script, before committing them back into the repository.'
        print: '[AI] The command `go work edit -print` is used with the Go Mod tool in Go programming language for managing dependencies. This command retrieves and displays the current state of the go.mod file in the terminal without making any changes to it, providing a printout of the file''s content for review. It does not open an editor or perform any modifications automatically.'
        replace: |-
            [AI] `go` is a command-line tool used primarily for managing and building projects written in the Go programming language. The command `go work` is part of the Go Workspace Summarizer, which provides information about the modules and dependencies in a Go project.

            The `edit` argument is an instruction to open the editor interface provided by Go Workspace Summarizer. This allows users to interactively modify the go.mod file, which lists the project's direct and transitive dependencies.

            `-replace` is a command-line flag used with the `go get` or `go module` commands. When combined with `edit`, it enables in-place replacement of a dependency version during editing. This means that the user can directly edit the go.mod file to change a specific dependency's version, and Go will automatically apply the changes when saving the file.
        use: |-
            [AI] `go work edit` is a command from the Go Modules workflow in Go programming language. It opens the current module's go.mod file in the default text editor for editing.

            The `-use` option, if provided, updates the go.sum file when you save the changes in the editor to reflect the new dependencies or their versions. This ensures that the project uses the specified dependencies when it is built.
