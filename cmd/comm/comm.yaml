# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: comm
description: compare two sorted files line by line
flags:
    --check-order: check that the input is correctly sorted
    --help: display this help and exit
    --nocheck-order: do not check that the input is correctly sorted
    --output-delimiter=: separate columns with STR
    --total: output a summary
    --version: output version information and exit
    "-1": suppress column 1 (lines unique to FILE1)
    "-2": suppress column 2 (lines unique to FILE2)
    "-3": suppress column 3 (lines that appear in both files)
    -z, --zero-terminated: line delimiter is NUL, not newline
documentation:
    command: '[AI] The `comm` command is a Unix utility used to compare two sorted files line by line and display the common, unique, and missing lines between them. Its basic syntax is `comm -C [file1] [file2]`, where `-C` option shows the common lines in each column. The output consists of three columns: first column contains common lines, second column displays only lines unique to file1, and third column shows only lines unique to file2.'
    flag:
        "1": '[AI] The `comm -1` command is a Unix utility that is used to find and print common lines between two files. However, when used with the option `-1`, it is instructed to print only the first common line instead of all common lines.'
        "2": '[AI] The command `comm -2 <file1> <file2 > output.txt` is used in Unix or Linux systems to find and display the common lines between two files. The `-2` option tells `comm` to only display the common lines without any additional context such as indices or counts. The output is saved in a file named `output.txt`.'
        "3": '[AI] The `comm -3` command in Unix-based operating systems is used to find common lines between two files. However, the `-3` option is specific to display only the first three common lines instead of the default behavior which is to print all common lines.'
        check-order: '[AI] `comm --check-order` is a Git command used to check the order of commits in a branch or between two branches for potential issues. It ensures that the parent-child relationship between commits is correct and respects the commit history''s chronological order. The main use cases are merging conflicts resolution, checking rebase progress, or verifying if a series of commits can be safely squashed before creating a merge commit.'
        help: '[AI] `comm --help` is a command used in Unix-like operating systems to display help information about the `comm` utility. The `comm` command compares two sorted files line by line and displays the common elements, the elements unique to each file, and the number of occurrences for each element. The `--help` option provides detailed explanations of the available command-line options, usage examples, and other relevant information.'
        nocheck-order: '[AI] The `--nocheck-order` flag is an option used with Git''s `commit` command. It disables the check that ensures commits are ordered logically, meaning that a new commit can be created even if it comes before other commits in the commit history according to the local repository. This could potentially result in inconsistent or confusing commit histories and is generally discouraged unless you have a specific reason for doing so.'
        output-delimiter: '[AI] The `--output-delimiter` option in GNU `cmd`, such as `find` or `sed`, is used to specify a character that will be used as the output delimiter between records. This means that each record in the output will be separated by this character, allowing for easy parsing and manipulation of the data in subsequent steps. For example, if you use `--output-delimiter="\t"` (tab character), then each output line will have tab-separated fields.'
        total: '[AI] The `comm --total` flag is used with the Unix `comm` command, which compares two sorted files line by line and prints the differences between them. The `--total` option produces an extra header line that displays the number of common, unique, and missing lines in each file. This information summarizes the output of the `comm` command, making it easier to understand the comparison results.'
        version: '[AI] The `comm --version` command is used with the `comm` utility in Unix-like operating systems to display version information about the comm command itself. When executed, it prints out the version number and possibly other relevant information such as the compilation date and author details. This can help users determine if they have the latest version of the command or not, and is useful for troubleshooting and compatibility checks.'
        zero-terminated: '[AI] The `--zero-terminated` flag is a command-line option used with tools like `git`, `find`, and other Unix utilities. It modifies the output format, making it suitable for processing by other programs that expect null-terminated strings as input. With this option, each output line ends with a null character (ASCII code 0). This can be useful in pipeline constructions or when dealing with data exchange between different applications.'
