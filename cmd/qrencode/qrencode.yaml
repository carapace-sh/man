# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: qrencode
description: Encode input data in a QR Code and save as a PNG or EPS image
flags:
    --background=: specify foreground/background color in hexadecimal notation.
    --foreground=: specify foreground/background color in hexadecimal notation.
    --inline: only useful for SVG output, generates an SVG without the XML tag.
    --rle: enable run-length encoding for SVG.
    --strict-version: disable automatic version number adjustment.
    --svg-path: use single path to draw modules for SVG.
    --verbose: display verbose information to stderr.
    -8, --8bit: encode entire data in 8-bit mode. -k, -c and -i will be ignored.
    -M, --micro: encode in a Micro QR Code.
    -S, --structured: make structured symbols.
    -V, --version: display the version number and copyrights of the qrencode.
    -c, --casesensitive: encode lower-case alphabet characters in 8-bit mode.
    -d, --dpi=: specify the DPI of the generated PNG.
    -h, --help: display the help message.
    -i, --ignorecase: ignore case distinctions and use only upper-case characters.
    -k, --kanji: assume that the input text contains kanji (shift-jis).
    -l, --level=: specify error correction level from L (lowest) to H (highest).
    -m, --margin=: specify the width of the margins.
    -o, --output=: write image to FILENAME.
    -r, --read-from=: read input data from FILENAME.
    -s, --size=: specify module size in dots (pixels).
    -t, --type=: specify the type of the generated image.
    -v, --symversion=: specify the minimum version of the symbol.
documentation:
    command: '[AI] `qrencode` is a command-line tool for generating QR code images. It reads data from standard input or a file, and outputs a portable bitmap (PBM) format image that can be easily displayed or embedded in other applications. The size, error correction level, and other options of the generated QR code can be specified using various command line arguments.'
    flag:
        8bit: '[AI] The `qrencode --8bit` command is used to generate QR code images with 8-bit color mode. In an 8-bit color mode, each pixel can have 256 different colors, allowing for a greater range of visual data and design possibilities in the generated QR code image compared to a black-and-white (1-bit) or low-color depth (4-bit) mode. The `qrencode` is a popular QR code generator library with this command line option available in its toolkit.'
        background: '[AI] `qrencode --background` is a command-line option used with the QR code generation tool, qrencode. It sets the background color of the generated QR code image. When used without any argument, it sets the background to be transparent. However, you can specify a color by providing an argument in the RGB or hexadecimal format (e.g., --background #RRGGBB or --background rgb:RR,GG,BB). This option customizes the visual appearance of the generated QR code image.'
        casesensitive: '[AI] `qrencode --casesensitive` is a command-line argument used with the QR code generation library, qrencode. This option ensures that the generated QR code is casesensitive when encoding text data. This means that uppercase characters are distinguished from lowercase characters in the encoded data, preserving the original case of the input text.'
        dpi: '[AI] `qrencode --dpi` is a command-line option used with QR code generator libraries like `qrencode`. `--dpi` stands for "dots per inch" and is related to the output resolution of the generated QR code image. A higher dpi value results in a clearer, more detailed QR code image when it is printed or displayed at larger sizes.'
        foreground: '[AI] `qrencode --foreground` is an option used with the QR code generation tool, `qrencode`. It specifies the color of the foreground (or data area) of the generated QR code image. By default, this is set to black. However, using `--foreground` with a valid color value, such as a hexadecimal code or a named color like "red" or "blue", allows you to create QR codes with a custom foreground color.'
        help: '[AI] `qrencode --help` is a command used with the QRCode encoding library, qrencode, to display help information about how to use the tool. The output includes various options for generating QR codes from text, binary data, or files. Some common options include specifying the output file type (e.g., PNG, JPG), setting the output file size, and adding a border around the code. Other advanced features include error correction level selection, mask pattern customization, and symbol shape adjustment.'
        ignorecase: '[AI] `qrencode --ignorecase` is a command-line option for the QR code generator library, qrencode. This option instructs the library to perform case-insensitive decoding when scanning a QR code. By default, QR codes are decoded in a case-sensitive manner. However, with this option enabled, uppercase and lowercase letters will be treated as equivalent during decoding. This can be useful for generating QR codes containing text that may include both uppercase and lowercase characters but should be read identically.'
        inline: '[AI] `qrencode --inline` is a command-line option used with the QR code generation tool, `qrencode`. It instructs the tool to embed the data directly into the QR code symbol instead of providing an external file containing the data. This results in a self-contained QR code image that includes the encoded information without requiring an additional file for context.'
        kanji: '[AI] `qrencode --kanji` is a command-line tool for generating QR codes using the `qrencode` library. The `--kanji` option enables the encoding of Kanji characters in the QR code, in addition to ASCII and other character sets. This feature expands the potential uses of QR codes by allowing them to encode Japanese text, which can be essential for certain applications in Japan or for reaching a primarily Japanese-speaking audience.'
        level: '[AI] The `--level` option in QRCode generation using `qrencode` is used to set the error correction level for the generated QRCode. A higher level results in a larger and more robust code, capable of correcting more errors, but also taking up more space. Commonly used levels are L (7%), M (15%), P (25%), and H (30-40%). The default is usually set to M for a good balance between size and error correction.'
        margin: '[AI] `qrencode --margin` is a command-line option used with the QR code generation tool, qrencode. It sets the width of the margin around the QR code symbol. A larger margin results in more space between the code and any surrounding elements, reducing the risk of errors when scanning. The margin is specified in modules: one module is equal to the side length of a single QR code data cell.'
        micro: '[AI] The `qrencode --micro` is a command-line tool for generating QR codes using the QRcode library. The `--micro` option specifically modifies the output to create micro QR codes, which are smaller in size compared to standard QR codes. Micro QR codes can store less data (up to 185 numbers or 25 alphanumeric characters) but are useful for small labels or items that require minimal information encoding. The generated micro QR code can be saved as an image file, typically in PNG format.'
        output: '[AI] `qrencode --output` is a command-line option used with the QR code generation tool `qrencode`. The `--output` option specifies the file name and output format for the generated QR code image. For instance, `qrencode --output myQRCode.png myData` generates a QR code image named `myQRCode.png` from the data `myData`. If no file extension is provided with the option, the output will be written to standard output as raw binary data instead of a file.'
        read-from: '[AI] `qrencode --read-from` is a command-line option for the QR code encoding and decoding tool "qrencode." It instructs the tool to read the QR code data from a file instead of generating a new QR code image. The specified file should contain a QR code as an image that has been saved in a format supported by qrencode (such as PNG or JPG). When used with this option, qrencode decodes the data from the file and outputs it to the terminal.'
        rle: '[AI] `qrencode --rle` is a command-line option for the QR Code generation tool `qrencode`. The `--rle` option stands for Run Length Encoding. With this option enabled, QR codes generated from the tool will use Run Length Encoding (RLE) for representing data blocks in the code. RLE is a data compression technique that allows encoding multiple identical bytes with a single byte and a count, resulting in more compact QR codes.'
        size: '[AI] `qrencode --size` is a command-line option used with the QR code generation tool, qrencode. It sets the size of the generated QR code in pixels (e.g., `--size 100` for a 100x100 pixel QR code). The larger the size, the more error correction data is added, making the code more robust against damage but also taking up more space.'
        strict-version: '[AI] `qrencode --strict-version` is a command used with the QR code generation library, qrencode. The `--strict-version` option ensures that the library uses only the specific version of QR code encoding rules specified, without any extensions or deviations. This can be important for applications requiring strict adherence to the official QR code standard.'
        structured: '[AI] `qrencode --structured` is a command-line option for the QRCode generation library, qrencode. This option generates structured QR codes that follow the Structured Apps Part 1: Depth Information format (also known as Data Matrix QR Code). Structured QR codes enable storing larger amounts of data by using multiple data layers with different meanings. These codes are commonly used in applications where complex data needs to be encoded, such as URLs with query parameters or JSON structures.'
        svg-path: '[AI] `qrencode --svg-path` is a command-line tool for generating QR Code images using the `qrencode` library. The `--svg-path` option specifically instructs the tool to output the QR Code image in Scalable Vector Graphics (SVG) format, which can be scaled infinitely without losing quality, and can be easily edited using vector graphics editors. This is useful for creating high-resolution QR Code images or integrating them into vector designs.'
        symversion: '[AI] `qrencode --symversion` is a command-line option used with the QR code generation library, qrencode. This option requests the library to output a symbol version number along with the generated QR code data. The version number indicates the specific QR code standard (level) used in encoding the data, which can help ensure proper scanning and decoding by compatible devices or software.'
        type: |-
            [AI] `qrencode --type` is a command-line option used with the QR code generation tool, qrencode. The `--type` option specifies the type of data encoded in the QR code. Supported types include:

            * Numbers (N)
            * Alphanumeric strings (AN)
            * Byte sequences (B)
            * Kanji symbols (K)
            * URLs (URL)
            * Matrix codes (M)

            For example, to generate a QR code for a URL, use `qrencode --type url [URL]`.
        verbose: '[AI] `qrencode --verbose` is a command-line option used with the QR code generation tool, qrencode. The "--verbose" option increases the amount of output information generated during the encoding process. This can include details such as the actual data being encoded, the error correction level used, and other diagnostic information. It''s useful for debugging or for those who want a more detailed understanding of the QR code generation process.'
        version: '[AI] `qrencode --version` is a command used with the QR code generation library named QRcode. When executed in a terminal or command prompt, it returns the version information of the installed QRcode library, including the major and minor release numbers. This can be helpful for checking which version of the library is currently being used and ensuring compatibility with other software or applications.'
