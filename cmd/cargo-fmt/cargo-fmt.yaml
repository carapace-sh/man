# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-fmt
description: format all bin and lib files of the current crate
flags:
    --all: Format all packages (only usable in workspaces)
    --manifest-path=: Specify path to Cargo.toml
    --message-format=: 'Specify message-format: short|json|human'
    --version: Print rustfmt version and exit
    -h, --help: Prints help information
    -p, --package=: Specify package to format (only usable in workspaces)
    -q, --quiet: No output printed to stdout
    -v, --verbose: Use verbose output
documentation:
    command: '[AI] `cargo-fmt` is a command-line tool built on top of Rust''s package manager, Cargo. Its main purpose is to ensure code formatting consistency across projects or within the same project. It automatically formats your Rust source files according to the standard style guide (currently `rustfmt`) and makes adjustments as needed. By running `cargo fmt`, you can keep your project''s Rust codebase clean, readable, and adherent to the chosen style guidelines.'
    flag:
        all: '[AI] `cargo-fmt --all` is a command used in Rust programming language projects managed with Cargo build system. This command invokes the `cargo-fmt` tool, which is a formatter for Rust code. The `--all` flag specifies that the format should be applied to all sources in the project, not just the current file. It aims to keep all the source files consistent with the project''s coding style.'
        help: |-
            [AI] `cargo-fmt` is a Cargo subcommand that helps enforce and maintain a consistent code style within Rust projects. The `--help` flag provides information about how to use this command, including:

            * Description of the command's purpose and function
            * Usage examples with required and optional arguments
            * Long and short flag options along with their descriptions
            * Information on where to find more detailed help and resources

            Here is a brief summary of the output when you run `cargo-fmt --help`:

            ```text
            cargo-fmt 0.2.4
            A tool for formatting Rust code according to the official style guide.

            USAGE:
                cargo fmt [<path>..] [-- [<FLAGS>]]

            ARGS:
                <path>...    Paths to search for and format Rust files in

            OPTIONS:
            --check       Check formatting only, without writing any files
            --cfg <KEY=VALUE>  Custom configuration values
            --help          Prints help information
            --locked         Only check formatting for unmodified files
            --manifest-path <PATH>  The path to the Cargo.toml file
            --quiet         Suppress progress messages
            --verbose       Show extra information during each format operation
            --write-stdin   Write formatted code to stdout, instead of writing files
            ```
        manifest-path: '[AI] `cargo-fmt` is a Cargo subcommand for automatically formatting source code following Rust''s style guide, `rustfmt`. The option `--manifest-path` specifies the path to the `Cargo.toml` file in your project, which tells `cargo-fmt` where to find your source files and apply the formatting rules accordingly.'
        message-format: |-
            [AI] `cargo-fmt` is a tool for formatting Rust source code according to the widely used Rust style guide, `edition2018`. The `--message-format` flag specifies how diagnostic messages should be output during the formatting process.

            There are three message formats available: `json`, `stderr`, and `none`. Here's what each does:

            1. `json`: This format outputs all diagnostics as JSON objects, which can then be parsed and processed by other tools or scripts. It is particularly useful when integrating `cargo-fmt` into continuous integration workflows.
            2. `stderr`: This is the default message format. Diagnostics are printed to standard error (`stderr`) stream along with a summary of how many files were formatted and how many issues were found.
            3. `none`: With this format, no diagnostics are shown during formatting. It's an option for users who want to suppress warnings and errors while they manually address the issues in their codebase.
        package: '[AI] `cargo-fmt` is a Cargo subcommand that helps enforce a consistent coding style in Rust projects using the `rustfmt` formatter. The `--package` option specifies the name of the package for which to format the source code, allowing you to apply formatting rules consistently across multiple packages within a workspace. It takes the form `--package <workspace-members>/<package-name>`.'
        quiet: '[AI] `cargo-fmt --quiet` is a command used in Rust programming language''s build system, Cargo. The `--quiet` flag reduces the output of the `cargo-fmt` tool to error messages only, making the terminal session less cluttered when running automated tests or builds. It formats your Rust code according to the standard style guidelines without printing success messages.'
        verbose: '[AI] `cargo-fmt --verbose` is a command used with the Cargo build tool in Rust programming language. The `--verbose` flag increases the level of output provided during the execution of the `cargo-fmt` subcommand. This flag enables more detailed information to be displayed, which can help in debugging and understanding the formatting process that `cargo-fmt` applies to the Rust codebase.'
        version: '[AI] `cargo-fmt --version` is a command used in Rust programming language''s Cargo build system. It executes the `cargo-fmt` tool, which is responsible for formatting the source code according to the Rust community''s preferred style. The `--version` flag is an optional argument that requests the tool to display its current version number instead of performing the actual code formatting task.'
