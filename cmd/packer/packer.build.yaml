# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
description: build image(s) from template
flags:
    -color: Enable color output
    -debug: Debug mode enabled for builds.
    -except=: Run all builds and post-processors other than these.
    -force: Force a build to continue if artifacts exist, deletes existing artifacts.
    -machine-readable: Produce machine-readable output.
    -on-error=: 'If the build fails do: clean up (default), abort, ask, or run-cleanup-provisioner.'
    -only=: Build only the specified builds.
    -parallel-builds=: 'Number of builds to run in parallel. 1 disables parallelization. 0 means no limit (Default: 0)'
    -timestamp-ui: Enable prefixing of each ui output with an RFC3339 timestamp.
    -var*=: Variable for templates, can be used multiple times.
    -var-file=: JSON or HCL2 file containing user variables.
documentation:
    command: '[AI] `packer build` is a command used by Packer, an open-source tool for building machine images, virtual machines (VMs), and container images. It triggers Packer to provision and create an image based on the configuration files in its working directory. These configurations specify the infrastructure, such as AWS, Azure, Google Cloud Platform, or other providers, and the machine type and operating system to be used. Once the infrastructure is ready, Packer installs and configures the software stack as defined in the configurations, and then saves the image for future use.'
    flag:
        color: '[AI] `packer build -color` is a command used by Packer, an open-source tool for building machine images, to start a new build with color output. The `build` subcommand initiates the creation of a new machine image using the defined provisioners and configs in a Packer file. The `-color` flag enables colored output for better readability and clarity during the build process.'
        debug: '[AI] `packer build -debug` is a command used in Packer, an open-source tool for building machine images, to initiate a debug run of a Packer build file. The `-debug` flag enables detailed output and debugging information during the execution of the command. This can help in diagnosing issues or understanding the steps Packer takes to build an image.'
        except: '[AI] `packer build --except` is a command used in Packer, an open-source tool for building machine images. The `--except` option allows you to exclude specific builder types or machines from being provisioned and built during the build process. For instance, if you have multiple builder configurations defined in your Packer file, and you want to build all but one of them, you can use the `--except` flag followed by the name or index of the builder configuration to skip. This command is useful when you need to build multiple machine images but don''t want to include all builders in a single run.'
        force: '[AI] `packer build -force` is a command used by Packer, an open-source tool for building machine images, to forcefully rebuild an existing image despite any previously successful builds. The `-force` flag overrides the default behavior of Packer, which checks if an image already exists before starting a new build, potentially saving time and resources. Be cautious when using this option as it could lead to unnecessary rebuilds or potential errors if something went wrong during the previous build that hasn''t been resolved.'
        machine-readable: '[AI] `packer build -machine-readable` is a command used by Packer, an open-source tool for building machine images, to create machine images with machine-readable output files. The `-machine-readable` flag instructs Packer to generate output files in a format that can be easily parsed by other tools or scripts, such as JSON or HCL (Hashicorp Configuration Language). This allows for more automated and programmatic use of the generated machine images.'
        on-error: '[AI] `packer build --on-error` is a command used with Hashicorp''s Packer tool to build machine images or configure cloud resources. The `--on-error` option is a flag that instructs Packer to stop running further builds if an error occurs during the execution of any individual build step. This ensures that only successful builds are produced, reducing the potential for inconsistent or failed infrastructure.'
        only: '[AI] `packer build -only` is a command used with Packer, an open-source tool for building machine images, to build only a specific machine image or builder configuration that has already been defined in your Packer file. The `-only` flag allows you to specify the name of the image or builder to build without having to build all the definitions in the Packer file. This can save time when you only need to update a specific image or builder.'
        parallel-builds: '[AI] `packer build` is a command from Hashicorp''s Packer tool used to build machine images, typically for cloud providers like Amazon Web Services (AWS) or Microsoft Azure. The `-parallel-builds` flag is an optional argument that enables Packer to execute multiple builds in parallel. This can significantly reduce the overall build time by distributing the workload across multiple CPU cores or machines. The exact number of parallel builds can be specified using the `-count` option.'
        timestamp-ui: '[AI] `packer build -timestamp-ui` is a command used in Packer, an open-source tool for building machine images, to trigger a new image build with a unique timestamp appended to the UI output. The `build` subcommand initiates the creation of a new machine image based on a Packer configuration file. The `-timestamp` option adds a timestamp to the user interface while constructing the image. This is useful for tracking and managing multiple image builds in an automated environment.'
        var: '[AI] `packer build -var` is a command used in Packer, an open-source tool for building machine images, to initiate image construction using a specific configuration file. The `-var` option allows passing variables to the configured builders and provisioners. These variables can be used in the Packfile (configuration file) to customize the behavior of the automated process. For instance, you might pass access keys or endpoint URLs as variables for authentication purposes during image creation.'
        var-file: '[AI] `packer build -var-file` is a command used in Packer, an open-source tool for building machine images. The `-var-file` flag specifies a file that contains variable values to be passed to the Packer builds. This allows for customization and configuration of the build process without hardcoding sensitive information directly into the Packer files. Variables can include things like access keys, passwords, or other environment-specific data. By using a separate file, this information remains secure and can easily be managed and updated.'
