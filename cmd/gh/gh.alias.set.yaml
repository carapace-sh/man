# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set <alias> <expansion>
description: Create a shortcut for a gh command
flags:
    --clobber: Overwrite existing aliases of the same name
    -s, --shell: Declare an alias to be passed through a shell interpreter
documentation:
    command: |-
        [AI] `gh alias set` is a GitHub CLI (Command Line Interface) command used to create or update an alias for a GitHub repository, branch, or user. It modifies your local Git configuration to automate common tasks with shorthand names. For example:

        ```bash
        $ gh alias set myrepo origin git@github.com:username/myrepo.git
        ```

        This command sets the alias 'myrepo' for the given repository URL. Now, you can pull or push to that repository using:

        ```bash
        $ git fetch myrepo
        $ git push myrepo master
        ```

        Instead of:

        ```bash
        $ git fetch origin git@github.com/username/myrepo.git
        $ git push origin master
        ```
    flag:
        clobber: '[AI] The `gh` flag `alias set --clobber` is used to create or update a GitHub-specific alias with the given name, replacing any existing alias with the same name without asking for confirmation. The `--clobber` option overwrites any existing alias without prompting for confirmation, making it useful when you''re certain about the changes you want to make to your aliases.'
        shell: |-
            [AI] The `gh` flag `alias set --shell` is used to configure `gh`, a GitHub command-line tool, with a new alias or modify an existing one for a specific shell environment (e.g., bash, zsh, fish). This command sets the default shell interaction behavior when using GitHub's CLI to manage your repositories. By defining aliases, you can make interactions with `gh` more efficient and convenient. For instance, you might create an alias for `push`, `pull`, or `clone`. The general syntax for this command is:

            ```bash
            gh alias set <alias> <command> [<shell-specific-options>]
            ```

            Replace `<alias>` with the desired name for your new alias, `<command>` with the corresponding GitHub CLI command, and `[<shell-specific-options>]` with any optional settings specific to your shell environment. For example, to create an alias called 'gcp' that is equivalent to 'git push', you would use:

            ```bash
            gh alias set gcp push
            ```
