# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]
description: Display one or many resources
group: basic intermediate
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --chunk-size=: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.
    --field-selector=: Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
    --ignore-not-found: If the requested object does not exist the command will return exit code 0.
    --no-headers: When using the default or custom-column output format, don't print headers (default print headers).
    --output-watch-events: Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.
    --raw=: Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
    --server-print: If true, have the server return the appropriate table output. Supports extension APIs and CRDs.
    --show-kind: If present, list the resource type for the requested object(s).
    --show-labels: When printing, show all labels as the last column (default hide labels column)
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --sort-by=: If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
    --subresource=: If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is beta and may change in the future.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --watch-only: Watch for changes to the requested object(s), without listing/getting first.
    -A, --all-namespaces: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
    -L, --label-columns*=: Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].'
    -w, --watch: After listing/getting the requested object, watch for changes.
documentation:
    command: '[AI] `kubectl get` is a command-line tool used with Kubernetes to retrieve information from the cluster. It makes REST requests to the Kubernetes API server and returns data in various formats like JSON, YAML or custom templates. You can use it to check the current state of resources such as pods, services, deployments, etc., by specifying the resource type and name. For instance, `kubectl get pod my-pod-name` will return information about the specified pod. By default, it shows only the name, status, and age of each resource but can be customized using flags to show more details.'
    flag:
        all-namespaces: '[AI] `kubectl get --all-namespaces` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command retrieves information for all resources in all namespaces within a Kubernetes cluster. The `--all-namespaces` flag includes resources from every namespace in the output, providing a comprehensive view of the entire cluster''s state.'
        allow-missing-template-keys: '[AI] `kubectl get --allow-missing-templates-keys` is a command used with Kubernetes'' `kubectl` tool to retrieve information from the Kubernetes cluster, specifically YAML manifests or custom resource definitions (CRDs). The `--allow-missing-template-keys` flag allows the output of this command to include missing keys in templates or CRD schemas without causing an error. This can be useful when dealing with incomplete or work-in-progress resources within a cluster, as it provides more comprehensive information instead of only returning resources that are fully defined and valid.'
        chunk-size: '[AI] The `kubectl get` command is used to retrieve information from a Kubernetes cluster. The `--chunk-size` flag is an optional argument that allows you to control the size of each chunk of output returned by the command. This can be useful when dealing with large amounts of data, as it helps prevent memory issues and makes the output more manageable by displaying it in smaller chunks. The default value for `--chunk-size` is 10 items per chunk. You can set a custom size by specifying a number followed by the `--output` flag to indicate the desired format of the output (such as `json`, `yaml`, or `table`). For example, `kubectl get pods --chunk-size=5 --output=json`.'
        field-selector: '[AI] `kubectl get` is a command-line tool for managing resources in Kubernetes clusters. The `--field-selector` option filters the output of the `get` command based on the specified expression. It selects only the fields that match the given expression, reducing the amount of output and making it easier to work with large sets of data. For example, `kubectl get pods --field-selector status.phase=Running`. This command returns only the information about the running pods.'
        filename: '[AI] The `kubectl get` command is used to fetch information from a Kubernetes cluster. The option `--filename` or `-o yaml/json` is used to save the output of the `get` command into a file instead of printing it on the terminal. For example, `kubectl get pods --filename=my-pod.yaml` will fetch information about all pods in the current namespace and save it as a YAML file named "my-pod.yaml".'
        ignore-not-found: '[AI] The `kubectl get` command is used to retrieve information from a Kubernetes cluster. When we add the `--ignore-not-found` flag, it instructs the command to return empty output for objects that do not exist in the cluster instead of displaying an error message. This can be useful when iterating over resources and checking if they exist, as the absence of an object won''t halt the script execution.'
        kustomize: '[AI] `kubectl get --kustomize` is a command used with Kubernetes'' `kubectl` tool to retrieve one or more resources from a Kubernetes cluster, applying customizations using Kustomize before displaying the result. In simpler terms, it allows you to fetch resource configurations along with any applied customizations defined in a `kustomization.yaml` file, providing a more comprehensive view of the actual objects in the cluster.'
        label-columns: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The `--label-columns` option modifies the output format by displaying all object labels as separate columns instead of key-value pairs in each row. This can be useful for easily comparing and analyzing multiple labels across different objects.'
        no-headers: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The `--no-headers` flag is an optional argument that tells `kubectl get` not to display column headers with the output. This can be useful when processing the output with other tools, such as `awk`, `sed`, or `grep`. In summary, `kubectl get --no-headers` retrieves the raw data from the specified Kubernetes resource without printing the header row.'
        output: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The `--output` flag modifies the output format of the command. It supports several formats like json, yaml, table, and gotemplate. By specifying an output format, the command will display the result in that format rather than the default tabular output. For example, `kubectl get pods --output=json` returns the list of pods as a JSON object.'
        output-watch-events: '[AI] `kubectl get --output-watch-events` is a command used with the Kubernetes command-line interface (CLI) tool to stream events in real time for the described resources. When you execute this command, it sets up a watcher on the Kubernetes API server. The output will show each event as it occurs, providing detailed information about the type of event, the affected resource, and other relevant metadata. This command is useful for monitoring live updates to your applications or infrastructure in a Kubernetes cluster.'
        raw: '[AI] `kubectl get --raw` is a command used with Kubernetes'' `kubectl` tool to retrieve the raw representation of the specified Kubernetes resource in YAML or JSON format from the current cluster. The `--raw` flag is used to output the result directly, without formatting or additional metadata like status messages. This can be useful for programmatically manipulating Kubernetes resources using scripts or other automated tools.'
        recursive: '[AI] `kubectl get --recursive` is a command used in Kubernetes to retrieve information from the cluster with a recursive approach. This means that it will not only return the desired resource and its immediate children but also their sub-resources. The output includes the resource name, namespace, kind, and status. By default, it displays only one level of embedded objects, but the `--recursive` flag enables displaying multiple levels of embedded objects, making it useful for getting detailed information about complex Kubernetes objects with nested resources.'
        selector: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The `--selector` option filters the results based on a label query expression. For example, `kubectl get pods --selector app=myapp`, retrieves information about all pods with the label "app" equal to "myapp". This can be used to selectively retrieve and manage resources in a Kubernetes cluster.'
        server-print: |-
            [AI] `kubectl get --server=<address>:<port> --output json --raw /apis/{group}/{version}/{plural} | jq '.server'` or `kubectl config view --minify --raw | grep server: | sed -e 's/[:{]//g' | awk '{print $2}' | xargs printf '--server=%s:' -- <address>:<port> | xargs kubectl get --output json --raw /apis/{group}/{version}/{plural} | jq '.metadata.name'

            The `kubectl get` command with the `--server-print` flag is used to retrieve the API server information of a Kubernetes cluster. This includes the address and port number of the API server. The output is in the form of a YAML file that can be processed further using various tools like jq, awk, sed, etc., to extract the required details.

            The command shown above uses `jq` for parsing JSON output. It retrieves the server information and prints only the name of the resource being queried using the `kubectl get` command. Replace `<address>` and `<port>`, `{group}`, `{version}`, and `{plural}` with appropriate values for your Kubernetes setup.
        show-kind: '[AI] `kubectl get --show-kind` is a command used with Kubernetes'' `kubectl` tool to retrieve information about resources in a Kubernetes cluster. The `--show-kind` flag specifically requests that the output include the resource kind for each item. For example, if you run `kubectl get pods --show-kind`, the output will include a column indicating whether each listed item is a Pod or not. This can be helpful when dealing with multiple types of resources in a complex environment.'
        show-labels: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The specific command `kubectl get --show-labels` retrieves the details of all objects in the current namespace, displaying their labels in addition to standard output fields such as name and kind. Labels are key-value pairs attached to objects that provide additional metadata for selection, filtering, and organization within Kubernetes.'
        show-managed-fields: '[AI] `kubectl get --show-managed-fields` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`, to retrieve information from the Kubernetes cluster. This specific command option, `--show-managed-fields`, returns the fields in an object that have been managed by the Kubernetes API server, i.e., those fields with custom metadata like `metadata.annotations` or `spec.template.spec.containers.[container_name].imagePullPolicy`. It helps to identify which fields have undergone any change and are being tracked by Kubernetes, providing a way to understand the current state and previous configurations of your cluster objects.'
        sort-by: '[AI] `kubectl get` is a command-line tool used to retrieve information from a Kubernetes cluster. The `--sort-by` flag is an optional argument that allows you to sort the output of the `get` command based on one or more keys. For example, `kubectl get pods --sort-by=name` will return a list of pods sorted alphabetically by their names. You can also specify multiple keys using `--sort-by=key1,key2` to sort first by key1 and then by key2.'
        subresource: '[AI] `kubectl get` is a command-line tool for interacting with Kubernetes clusters. The `--subresource` flag modifies the behavior of this command to retrieve specific sub-resources under a given resource. For example, `kubectl get pods NAME --subresource=events` retrieves events related to a specific pod named "NAME". This can be useful for fetching detailed information about a particular aspect of a Kubernetes resource.'
        template: '[AI] `kubectl get --template` is a command in Kubernetes using the `kubectl` CLI tool to retrieve information from a cluster, with the added functionality of applying a custom template to manipulate and output the data in a specific format. This feature allows users to extract exactly what they need for further processing or analysis without requiring additional scripts or tools. It uses Go-text templates and supports filtering based on labels, namespaces, and other selectors. The command returns the raw output of the template rendering against the API resources, making it an effective tool for automating Kubernetes data processing tasks.'
        watch: '[AI] `kubectl get --watch` is a command used with Kubernetes'' `kubectl` tool to fetch and display real-time information about resources in a cluster. The `--watch` flag enables the output to be streamed and automatically updated as changes occur. This is particularly useful for monitoring dynamic resources such as Pods or Services, allowing you to observe the effects of rolling updates or other events in near real-time.'
        watch-only: '[AI] `kubectl get --watch-only` is a command in Kubernetes using the `kubectl` tool to retrieve real-time information about resources in a cluster. The `--watch-only` flag enables the watch mode, which continuously streams events related to specified resources. It allows you to monitor changes without actually modifying or creating new resources, making it useful for observing the state of your Kubernetes applications and infrastructure over time.'
