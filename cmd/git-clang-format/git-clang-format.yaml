# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: git-clang-format
description: run clang-format on lines that differ
flags:
    --Cached,: format lines in the stage instead of the working dir
    --binary=: path to clang-format
    --commit=: default commit to use if none is specified
    --diff: print a diff instead of applying the changes
    --diffstat: print a diffstat instead of applying the changes
    --extensions=: comma-separated list of file extensions to format
    --staged: format lines in the stage instead of the working dir
    --style=: passed to clang-format
    -f, --force: allow changes to unstaged files
    -h, --help: show this help message and exit
    -p, --patch: select hunks interactively
    -q, --quiet: print less information
    -v, --verbose: print extra information
documentation:
    command: '[AI] `git-clang-format` is a Git command-line tool for applying the Clang-Format configuration to source files in a repository. It automates formatting of source code according to a specified Clang-Format style, ensuring consistent coding styles across the project. When used with Git, it can be employed for enforcing a uniform code appearance during commits or pull requests.'
    flag:
        Cached,: '[AI] `git-clang-format --cached` is a command used in version control systems, specifically Git, to apply Clang Format rules to files in the index (staging area) without modifying their working directories. This can be useful when preparing a commit that includes format changes while keeping the original code unaltered. The `--cached` flag tells Git to only apply the format changes to the indexed files, not the working directories.'
        binary: '[AI] `git-clang-format --binary` is a command used to apply the Clang Format style consistently across multiple C++ source files under version control using Git. The `--binary` option ensures that the Clang Format tool performs its formatting in binary mode, meaning it writes output directly to files instead of printing it to the console. This is particularly useful when applying format changes across a large number of files. The changes made by Clang Format are recorded as Git patches, which can then be committed to the repository.'
        commit: '[AI] `git-clang-format --commit` is a command used to reformat source code files in a Git repository using Clang Format, and then commit those changes automatically. This command first applies the Clang Format rules to all C++ source files in the current branch or the current directory, if no files are specified. Once formatting is completed, it automatically commits the formatted changes with an informative message like "Update code format". This can be useful for ensuring consistent coding styles across a team or project.'
        diff: '[AI] `git clang-format --diff` is a Git command that applies Clang-Format formatting rules to files in a Git repository and generates a diff showing the changes. This command allows developers to ensure consistent coding styles across their projects, making code reviews more efficient and easier to read. When you run this command, Git will compare the current state of formatted files with the unformatted ones, displaying the differences between them, so developers can review and apply these changes using standard Git commands like `git apply` or `git cherry-pick`.'
        diffstat: '[AI] `git-clang-format --diffstat` is a command used to apply the Clang-Format style conventions to your source code and show a diffstat of the changes made. In simple terms, it reformats your code according to the specified Clang-Format rules and displays the differences between the original and reformatted files. This can be useful for enforcing consistent coding styles across a project or team.'
        extensions: |-
            [AI] `git-clang-format` is a command-line tool that helps enforce a consistent coding style for your C++ or related projects using Clang's format engine. The `--extensions` option is used to specify the file extensions for which the code formatting rules should be applied.

            For example, if you have a project with both C++ (`.cpp`) and header files (`.h`), you can apply the format checks and adjustments using:

            ```bash
            git clang-format --diff --extensions=*.cpp *.h
            ```

            This command will only check and format `.cpp` and `.h` files in the current directory, leaving other files untouched.
        force: '[AI] `git clang-format --force` is a command used in Git version control system to reformat source code files using Clang Format, ensuring a consistent coding style across a project. The `--force` option overwrites any local changes in the files without asking for confirmation.'
        help: '[AI] `git-clang-format --help` displays the help information for the `git-clang-format` command. This tool is used to reformat source code following the rules specified by the Clang-Format configuration file. The help output includes information about command line options, such as how to specify a file or directory to format, how to use custom Clang-Format styles, and other advanced usage details.'
        patch: '[AI] `git clang-format --patch` is a command used in Git version control to apply the Clang-Format code formatter to files in a commit or patch. When you run this command, it checks out the specified commit or patch into a new working directory and then applies Clang-Format to all source files in that directory using the default settings. The output is then displayed as a diff, showing the changes made by Clang-Format, which can be applied with `git apply` or other tools for code review or merging back into the main branch.'
        quiet: '[AI] `git-clang-format --quiet` is a command used to reformat source code following Clang-Format style guidelines in a quiet or non-interactive mode. This means it will not display any messages or progress bars during the formatting process, making it ideal for use in automated build systems or scripts. The `--quiet` flag ensures that no output other than error messages is displayed.'
        staged: '[AI] `git clang-format --staged` is a Git command that applies the Clang-Format code formatter to files with changes tracked in the Git index (staging area). This command configures Git to automatically run Clang-Format on the staged files before committing, ensuring consistent coding styles across your project.'
        style: '[AI] `git-clang-format --style` is a command used to apply the Clang-Format styling rules to source code files under version control using Git. The `--style` option specifies which built-in or custom Clang-Format style to apply, ensuring consistent coding styles across a project. This command improves readability and maintainability of the source code by enforcing a uniform code formatting convention.'
        verbose: '[AI] `git-clang-format --verbose` is a command used to apply the Clang-Format coding style consistently across multiple C++ source files under version control using Git. The `--verbose` option increases the amount of output information provided by Git Clang Format during the formatting process, allowing users to better understand which files are being processed and any issues encountered during formatting.'
