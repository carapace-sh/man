# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: version
description: Bump a package version
flags:
    --allow-same-version: prevent error when same version as the current one is used
    --commit-hooks: run git commit hooks
    --git-tag-version: tag the commit
    --json: output as json
    --prerelease-id=: prerelease identififer
    --sign-git-tag: sign with gpg signature
    --workspaces: Enable running a command in the context fo all workspaces
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm version` is a command used in Node.js projects to automate the process of updating the project''s `package.json` file with a new version number. It uses Semantic Versioning rules and bumps the major, minor or patch number based on the type of change specified (e.g., `npm version patch` for a patch release). The command also generates Git tags and commits the changes to the repository. This is commonly used in continuous delivery workflows and helps maintain consistent versioning across multiple packages and repositories.'
    flag:
        allow-same-version: |-
            [AI] The `npm version --allow-next-major` and `--allow-same-version` flags are used with npm's versioning command to automate the process of incrementing a project's semantic version number.

            The `--allow-same-version` flag, when passed, allows running `npm version` even if there are no changed files since the last commit. By default, `npm version` requires that there be some change in files for it to run. With this flag, you can override that requirement and still increment the version number.

            It's important to note that using this command without making any actual changes to your codebase may not be following best practices and could potentially lead to releasing an unintended update or bugfix. It should be used with caution, and preferably in conjunction with a good understanding of the project's current state and future plans.
        commit-hooks: '[AI] `npm version --commit-hooks` is a command used in npm (Node Package Manager) to create a new version of an npm package with git hooks applied. When you run this command, it will increment the semantic version number based on the given Git flow workflow and commit the changes to your repository. Additionally, it will apply any commit hooks that are registered with npm''s `commit-msg` or `prepare` actions, ensuring consistency and automation in your release process.'
        git-tag-version: '[AI] The `npm version` command with the `--git-tag-version` flag is used to create a new Git tag and increase the version number in both package.json file and the existing Git tag following semantic versioning rules (major.minor.patch or major.minor.patch.pre.x). This makes it easy to manage and release new versions of an npm package, automating the process of updating the version number and creating a new Git tag for each release.'
        json: '[AI] `npm version --json` is a command used in Node.js package management with npm (Node Package Manager). It creates a new version of the current package, bumps the version number according to semantic rules, and generates a new `package.json` file with updated version information in JSON format. This command helps automate versioning and update the metadata for publishing or distribution purposes.'
        prerelease-id: '[AI] The `npm version` command is a common way to manage semantic versioning in Node.js projects using npm. The `--prerelease-id` option sets the identifier for the prerelease version, appended as a suffix after the patch or minor version number. For example, `npm version --prerelease-id beta` would increment the patch version and append "beta" as a suffix, resulting in a version number like "1.2.0-beta". This is useful for releasing pre-stable versions to test with users before making them stable and increasing the major version number.'
        sign-git-tag: '[AI] The `npm version --sign-git-tag` command is used in Node.js projects managed with npm (Node Package Manager). It creates a new Git tag for the current committed version, signs it with your GPG key, and pushes it to the remote repository. This process ensures that the Git history of your project maintains its integrity and authenticity by digitally signing the tags. This command facilitates an automated workflow for handling versioning and managing your Node.js project''s Git history.'
        workspace: '[AI] `npm version --workspace` is a command used in Node.js projects with multiple packages under one `npm` workflow. It automatically bumps versions of every package in the workspace, updates their `package.json` files, and commits the changes using Git (if configured). It simplifies versioning across related projects.'
        workspaces: '[AI] `npm version --workspaces` is a command used in npm, a popular package manager for JavaScript projects. This command facilitates managing versions across multiple packages within a monorepo (monotonic repository), which includes several related projects. The flag `--workspaces` enables npm to traverse the entire workspace and handle version updates concurrently for each independent package. It automates tasks like updating the package.json file with a new version number, creating a Git tag, and updating the readme file, providing consistency across the entire project.'
