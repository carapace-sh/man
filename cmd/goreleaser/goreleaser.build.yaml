# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
aliases:
    - b
description: Builds the current project
flags:
    --clean: Remove the dist folder before building
    --deprecated&: Force print the deprecation message - tests only
    --id*=: Builds only the specified build ids
    --rm-dist&: Remove the dist folder before building
    --single-target: Builds only for current GOOS and GOARCH, regardless of what's set in the configuration file
    --skip*=: 'Skip the given options (valid options are: before, post-hooks, pre-hooks, validate)'
    --skip-before&: Skips global before hooks
    --skip-post-hooks&: Skips all post-build hooks
    --skip-validate&: Skips several sanity checks
    --snapshot: Generate an unversioned snapshot build, skipping all validations
    --timeout=: Timeout to the entire build process
    -f, --config=: Load configuration from file
    -o, --output=: Copy the binary to the path after the build. Only taken into account when using --single-target and a single id (either with --id or if configuration only has one build)
    -p, --parallelism=: 'Amount tasks to run concurrently (default: number of CPUs)'
documentation:
    command: '[AI] `goreleaser build` is a command used with GoReleaser, a tool for packaging and releasing Go projects as stand-alone binaries for multiple platforms. It initiates the build process by taking the current Git repository state, setting up the build environment, running tests if configured, and creating the output artifacts (binaries) for each defined platform. The resulting files are saved in the `$GOPATH/bin/` directory or other user-defined output directories, depending on the configuration.'
    flag:
        clean: '[AI] `goreleaser build` is a command from the Goreleaser tool, used for packaging and releasing Go projects. The `--clean` flag is an optional argument that instructs Goreleaser to delete any previous build artifacts before starting a new build. This ensures that the build process starts with a clean slate and reduces the risk of using stale or incorrect artifacts.'
        config: '[AI] `goreleaser build --config` is a command used with the Go Release (goreleaser) tool for creating production-ready binaries and packages from Go projects. This specific command invokes the build process using a custom configuration file. The configuration file, typically named `gorelease.yml` or `gorelease.toml`, contains various settings such as build contexts, platforms to target, and publishing details for the resulting artifacts. By passing `--config` followed by the path to the config file, you instruct goreleaser to use those settings during the build process.'
        deprecated: '[AI] `goreleaser` is a popular tool used in the Go programming language ecosystem for simplifying the release process. The command `goreleaser build --deprecated` is used to trigger a build using an older version of `goreleaser`. The `--deprecated` flag indicates that the user intends to use a deprecated version of `goreleaser`, which might no longer be supported or recommended for new projects. This command does not create any releases, but only builds the artifacts from the source code.'
        id: '[AI] `goreleaser build --id` is a command from Goreleaser, a popular release tool for Go projects. This command initiates the creation of a new build using the specified ID as a label or version tag. It retrieves the latest code changes, builds the project, and prepares it for various platforms (binary files) with the configured output formats. The `--id` flag sets this custom label/version tag to facilitate better organization and tracking of different releases in the Git history.'
        output: '[AI] `goreleaser build` is a command from the Goreleaser tool used for simplifying the process of creating releases for Go projects. The `--output` flag specifies an output directory where the built artifacts will be saved, including the final executable or binary file and associated metadata files like versions, checksums, and manifests. This command builds your project using your specified build configuration and saves the output to the given directory for easy distribution or deployment.'
        parallelism: '[AI] `goreleaser build` is a command from the GoReleas CI tool used for packaging and releasing Go applications. The `--parallelism` option specifies the maximum number of builds that can run in parallel. This allows developers to speed up their release process by building multiple artifacts simultaneously, reducing the overall build time. For instance, if you have four CPUs, setting `--parallelism 4` will utilize all available resources for building your Go project.'
        rm-dist: '[AI] `goreleaser build` is a command from Goreleaser, a popular continuous delivery tool for Go projects. It triggers the build process of your Go application using the specified build configuration in `goreleaserc.yml`. The `--rm-dist` flag is an optional argument that tells Goreleaser to remove the previously built artifacts from the remote distribution directory (like GitHub Releases or Amazon S3) before starting a new build. This ensures that only the latest and most up-to-date version of your application will be available for download.'
        single-target: '[AI] `goreleaser build` is a command from the GoReleas tool, used to build and prepare releases for various platforms. The `--single-target` option specifies that only a single target should be built instead of building all defined targets in the project''s `releasercfg.yml` file. This can save time and resources when working on a specific platform or target.'
        skip: '[AI] `goreleaser build --skip` is a command used with Goreleaser, a popular tool for packing, releasing, and publishing Go projects. The `build` subcommand triggers the building process of your project, while the `--skip` flag instructs Goreleaser to skip actually running the built binary or container in Docker. This is useful when you only want to create artifacts without executing them.'
        skip-before: '[AI] `goreleaser build` is a command used in Go development for creating production-ready binary packages and releasing them. The `--skip-before` option is a custom flag that allows you to skip running specific pre-build scripts defined in the `gorelease.yml` file. By using this flag, you can exclude certain tasks from the build process if needed. For instance, if you don''t want to run linting checks before building your project, you can use `--skip-before="lint"`. This will skip the execution of any pre-build scripts defined in the `gorelease.yml` under that key.'
        skip-post-hooks: '[AI] `goreleaser build` is a command from the GoReleaser tool used for managing the release process of Go projects. The `--skip-post-hooks` option skips the execution of post-build hooks during the build process. Post-hooks are scripts or commands that run after a build is completed, often used to perform additional tasks such as versioning, packaging, or deploying the built artifacts. By skipping these hooks, the build process may complete faster but some post-processing steps might be missed.'
        skip-validate: '[AI] `goreleaser build --skip-validate` is a command used with the Go release tool, goreleaser. This command initiates the build process without running the validation step. Validation in this context refers to checks performed by goreleaser to ensure that the package being released meets certain criteria, such as passing tests and having no vulnerabilities. By using `--skip-validate`, you can override this check if needed, for instance, when working on a local development environment or when dealing with temporary issues.'
        snapshot: '[AI] `goreleaser build --snapshot` is a command from the Goreleaser tool, which is used for simplifying the release process of Go projects. The `build` subcommand triggers a new build of your project using your defined workflow (for example Docker or make). The `--snapshot` flag instructs Goreleaser to create a snapshot build artifact instead of creating a regular release. A snapshot is an interim build that can be used for testing or pre-release validation before publishing a stable release.'
        timeout: '[AI] `goreleaser build` is a command from the Goreleaser tool, which simplifies the process of creating releases for Go projects. The `--timeout` flag sets a time limit for the build process to prevent it from running indefinitely. If the build takes longer than the specified time, `goreleaser` will cancel the process and print an error message. The flag accepts time durations in seconds (e.g., `--timeout 30s`) or minutes (e.g., `--timeout 5m`).'
