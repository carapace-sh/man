# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: move [OPTIONS] <--from <FROM>|--to <TO>> [PATHS]...
description: Move changes from one revision into another
flags:
    --from=: Move part of this change into the destination
    --to=: Move part of the source into this change
    -h, --help: Print help (see more with '--help')
    -i, --interactive: Interactively choose which parts to move
documentation:
    command: '[AI] The `jj move` command is specific to the Vim text editor and doesn''t exist in a generic sense. In Vim, `jj` is a keyboard shortcut for the "previous Japanese kanji" key (if your terminal supports it) or the equivalent of two quick key presses (usually `Esc` followed by `J`). However, when used with the `move` command, it would result in an incorrect combination as `move` is not a valid argument for `jj`. If you meant to use `j` for moving the cursor down one line and `j j` for moving down two lines, then that''s correct. But in this case, there seems to be some confusion about the command since `move` isn''t mentioned anywhere.'
    flag:
        from: '[AI] `jj move --from` is a command in the Jira Git Integration Tool (JGIT) for JetBrains IDEs, such as IntelliJ IDEA and GitHub Desktop. This command is used to move a specific commit from one branch to another in Git. The `--from` option specifies the name of the branch containing the commit that needs to be moved. For example, `jj move --from my_branch my_destination_branch` would move the latest commit from `my_branch` to `my_destination_branch`. The command also allows you to specify the commit hash instead of using the latest one by adding `--commit-hash <commit_hash>` option.'
        help: '[AI] `jj move --help` is a command used in the Jupyter Notebook editor, Jupyter-Jequetta. This command displays the help documentation for the "move" subcommand of Jupyter-Jequetta. The "move" command allows users to navigate through their notebook cells and edit them efficiently. The `--help` option provides detailed information on how to use this command, including available options and keybindings.'
        interactive: '[AI] `jj move --interactive` is a command used in Vim or Vi, text editors, to navigate and manipulate text interactively using jj (double-j) as a shortcut for entering the "Jump Mode" or "Intelligent Jump" feature. In this mode, pressing ''move'' keys like ''j'', ''k'', ''h'', or ''l'' will take you to the next occurrence of a specific character or word instead of just moving the cursor by one position. This can be useful for quickly navigating through repetitive text or code with similar elements.'
        to: '[AI] The `jj move --to` command is a part of Vim, a popular text editor. This command enables continuous motion in Vim using the jj keys. It allows users to quickly move through their text in incremental steps without having to press the movement keys multiple times. When you press ''jj'', your cursor will move down by one line. This can be useful for navigating large files or making repetitive edits more efficiently.'
