# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [<name>]
aliases:
    - new
description: Create a new repository
group: General commands
flags:
    --add-readme: Add a README file to the new repository
    --disable-issues: Disable issues in the new repository
    --disable-wiki: Disable wiki in the new repository
    --enable-issues&: Enable issues in the new repository
    --enable-wiki&: Enable wiki in the new repository
    --include-all-branches: Include all branches from template repository
    --internal: Make the new repository internal
    --private: Make the new repository private
    --public: Make the new repository public
    --push: Push local commits to the new repository
    -c, --clone: Clone the new repository to the current directory
    -d, --description=: Description of the repository
    -g, --gitignore=: Specify a gitignore template for the repository
    -h, --homepage=: Repository home page `URL`
    -l, --license=: Specify an Open Source License for the repository
    -p, --template=: Make the new repository based on a template `repository`
    -r, --remote=: Specify remote name for the new repository
    -s, --source=: Specify path to local repository to use as source
    -t, --team=: The `name` of the organization team to be granted access
    -y, --confirm&: Skip the confirmation prompt
documentation:
    command: '[AI] `gh repo create` is a GitHub CLI (Command Line Interface) command used to create a new repository on GitHub. It takes one or more arguments which specify the name, description, and optionally, the public or private visibility of the repository. For example, `gh repo create my-repo --description "My test repository" --public` would create a new public repository named "my-repo" with the given description.'
    flag:
        add-readme: '[AI] `gh repo create --add-readme` is a command used in GitHub''s `git-hub` CLI (Command Line Interface) tool. It creates a new repository on GitHub and adds a default README file to the main branch of the newly created repository. In simple terms, it sets up a new GitHub repository with an initial README file.'
        clone: |-
            [AI] The `gh repo create --clone` command is a GitHub CLI (Command Line Interface) command used to create a new repository on GitHub and clone it locally in one step. Here's how it works:

            1. Create a new repository on GitHub with the desired name, description, and other settings using the `--name`, `--description`, and optional parameters.
            2. Clone the newly created repository to your local machine using the `--clone` flag, which automatically sets up the remote origin and fetches the initial commit.
            3. This command saves time by combining two common GitOps workflows into one step: creating a new repository and cloning it locally.
        confirm: |-
            [AI] The `gh repo create --confirm` command is used with GitHub's CLI (Command Line Interface) tool, `gh`, to create a new repository within your GitHub account. The `--confirm` flag is an optional argument that requires you to provide explicit confirmation before creating the repository, making it useful for preventing accidental creation of repositories.

            When you run this command without the `--confirm` flag, GitHub will immediately create the new repository based on the provided repository name and description. However, with the `--confirm` flag, GitHub will display a confirmation message asking you to enter the repository's name and confirm its creation before proceeding. This additional step helps ensure that you intentionally create each repository.
        description: '[AI] `gh repo create --description` is a GitHub CLI command used to create a new repository in your GitHub account. The `--description` argument is optional and allows you to provide a description for the repository at the time of creation. This description will be displayed on the repository''s page, helping users understand what the repository is about. If no description is provided, the repository will be created without one.'
        disable-issues: '[AI] The `gh repo create --disable-issues` command is a GitHub CLI (Command Line Interface) command used to create a new GitHub repository with issues disabled. The `--disable-issues` flag disables the creation of an issue tracker for the repository during its creation, which means that users won''t be able to open, view or manage issues associated with this repository. This might be useful when creating a private repository where you prefer not to use issues or don''t want your team to have access to an issue tracker.'
        disable-wiki: '[AI] The `gh repo create --disable-wiki` command is used with GitHub''s `git-hub` CLI tool to create a new repository on GitHub with the wiki feature disabled. When you run this command, GitHub will create a new repository without setting up the default wiki page. This might be useful if you don''t plan to use a wiki for your project or prefer to manage your documentation elsewhere.'
        enable-issues: '[AI] The `gh repo create --enable-issues` command is used with the GitHub CLI (git-hub) to create a new repository on GitHub and enable issues tracking for it in a single step. This means that users can submit and view issues related to the project, making it easier for collaborators to report and discuss bugs or feature requests.'
        enable-wiki: '[AI] `gh repo create --enable-wiki` is a GitHub CLI command to create a new repository with the GitHub Wiki enabled. The `--enable-wiki` option sets up a new wiki for the repository, which allows users to collaborate and create documentation within the repository itself. This can be useful for project documentation or knowledge base articles.'
        gitignore: |-
            [AI] The `gh` command you provided is a part of the GitHub CLI (Command Line Interface) tool, specifically the `repo create` sub-command with the `--gitignore` option.

            This command creates a new repository on GitHub. The `--gitignore` option generates and sets up a `.gitignore` file for the newly created repository based on common file patterns for the selected language or project template. This helps developers ignore certain files or directories that are not meant to be committed, making their projects cleaner and easier to manage.
        homepage: '[AI] `gh repo create --homepage` is a command used with GitHub''s Git CLI (github-cli) to create a new repository within GitHub. The `--homepage` option sets the default page for the repository, typically a website or documentation site, to be the main URL people visit when they look up the repository. This flag helps in making that URL publicly accessible and serves as the entry point to the project.'
        include-all-branches: '[AI] The `gh repo create --include-all-branches` command is used with GitHub''s `gh` CLI (Command Line Interface) tool to create a new repository on GitHub. The `--include-all-branches` flag indicates that all existing branches in the local or source repository should be created as branches in the new repository on GitHub as well. This can be useful when creating a GitHub mirror or backup of an existing repository with multiple active branches.'
        internal: '[AI] `gh repo create --internal` is a GitHub CLI (Command-Line Interface) command used to create a new internal GitHub repository. An internal repository is a private repository created for GitHub''s own use and cannot be publicly accessed or shared with others outside of the organization. This command creates an empty repository with no initial files, and it doesn''t generate any access tokens by default. It''s important to note that you need appropriate permissions to create internal repositories within your organization.'
        license: '[AI] The `gh repo create --license` command is used with the GitHub CLI (Command Line Interface) tool to create a new repository on GitHub while specifying a license for the project. The "--license" option allows you to set a license template as the default one for your repository from a list of available templates provided by GitHub or by providing a custom license file. This helps ensure that the project''s source code is distributed under the desired open-source license.'
        private: '[AI] `gh repo create --private` is a GitHub CLI command used to create a new private repository in your GitHub account. The `--private` flag indicates that the newly created repository should have restricted access and not be publicly visible or searchable by others on GitHub. Only collaborators invited to the repository will be able to access it.'
        public: '[AI] `gh repo create --public` is a GitHub CLI command used to create a new public repository. The `--public` option makes the repository discoverable and accessible to everyone, allowing others to find, clone, or contribute to it without requiring an invitation or access token. This command creates a new repository with the specified name and sets its visibility level to public in your GitHub account.'
        push: '[AI] `gh repo create --push` is a GitHub CLI (Command Line Interface) command used to create a new GitHub repository and push an initial commit at the same time. This command takes any desired repository name as its argument, creates it on GitHub, generates necessary authentication keys for Git access, sets up the remote origin, and pushes an empty `.gitignore` file or another initial commit to the newly created repository.'
        remote: '[AI] `git hub repo create --remote` is a Git command used to create a new repository on GitHub with a remote connection already set up in your local Git configuration. The `create` subcommand creates a new repository, while the `--remote` option sets the upstream remote repository for the local Git repository to the newly created GitHub repository. This command simplifies the workflow of creating and linking repositories between local and remote Git environments.'
        source: '[AI] `gh repo create --source` is a command used in the GitHub CLI (git-hub) to create a new repository on GitHub with an existing project as its initial content. The `--source` option specifies the local or remote URL of the source directory or repository that you want to use as the starting point for your new GitHub repository.'
        team: '[AI] `gh repo create --team` is a command used in the GitHub CLI (github-cli) to create a new repository with team settings. The `--team` flag specifies that this repository will be created as a team repository, meaning that it will be automatically added to the specified team and members of the team will have write access by default. This command creates a new repository in your GitHub account and sets the desired team membership for the repo.'
        template: '[AI] `gh repo create --template` is a command used in GitHub''s Command Line Interface (CLI) tool, `gh`. This command creates a new GitHub repository using a specified template. The `--template` option specifies the name or slug of the desired template to use as a starting point for the new repository. This can be useful when creating repositories with specific structures or configurations, such as those for new projects, documentation sites, or other common GitHub project types.'
