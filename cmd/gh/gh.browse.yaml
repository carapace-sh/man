# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: browse [<number> | <path> | <commit-SHA>]
description: Open the repository in the browser
group: core
flags:
    -b, --branch=: Select another branch by passing in the branch name
    -c, --commit?: Select another commit by passing in the commit SHA, default is the last commit
    -n, --no-browser: Print destination URL instead of opening the browser
    -p, --projects: Open repository projects
    -r, --releases: Open repository releases
    -s, --settings: Open repository settings
    -w, --wiki: Open repository wiki
persistentflags:
    -R, --repo=: Select another repository using the `[HOST/]OWNER/REPO` format
documentation:
    command: '[AI] `gh browse` is a GitHub CLI (Command Line Interface) command used to open a specific file or repository in a web browser directly from the terminal. When you run this command followed by the repository URL, a file path within that repository, or even just a file name if it''s unique within the repo, GitHub will open the associated page in your default web browser for easier exploration and collaboration.'
    flag:
        branch: '[AI] `gh browse --branch` is a command used in GitHub''s command-line tool, `gh`. This command opens your default web browser and navigates to the specified branch of a repository hosted on GitHub. The `--branch` option specifies the name of the desired branch. For example, `gh browse --branch my-feature-branch` would open the browser to display the files in the "my-feature-branch" branch of your currently authenticated GitHub repository.'
        commit: '[AI] `gh browse --commit` is a command used in GitHub''s `gh` CLI tool to open a file or files directly in GitHub''s web-based code editor, Atom, or in the file viewer with the specified commit as the context. The command takes one or more commit hashes as its argument and initiates the browsing experience by opening the corresponding files within the chosen application. This can be helpful for reviewing changes made to specific files at a particular point in the project''s history.'
        no-browser: '[AI] `gh browse --no-browser` is a command used in GitHub''s command-line tool (Git Hub for Desktop or gh cli). This command opens a terminal window with the file content of a specific GitHub repository or file URL, instead of opening it in a web browser. The `--no-browser` flag ensures that the operation is carried out entirely within the terminal environment.'
        projects: '[AI] The `gh browse --projects` command is a GitHub CLI (Command Line Interface) command used to open the web browser and display a list of your projects or repositories hosted on GitHub. The `--projects` flag filters the results to only show the projects, hiding any personal repositories or other types of GitHub resources. This can be useful for quickly accessing and managing multiple projects from the command line.'
        releases: '[AI] `gh browse --releases` is a command used in GitHub''s `gh` CLI tool. It opens your default web browser to view the releases page of a specific GitHub repository, displaying all available tags and their corresponding release notes.'
        settings: '[AI] `gh browse --settings` is a command used in GitHub''s command-line tool (Git Hub for Desktop, or gh for short). This command opens the default web browser and navigates to the user settings page on GitHub.com. It allows users to easily access and modify their account settings directly from the terminal.'
        wiki: '[AI] `gh browse --wiki` is a command used in GitHub''s command-line interface (CLI) tool, `gh`. This specific command opens the associated Wiki page for the active repository or file in your default web browser.'
