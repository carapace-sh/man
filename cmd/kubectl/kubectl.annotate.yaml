# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]
description: Update the annotations on a resource
group: settings
flags:
    --all: Select all resources, in the namespace of the specified resource types.
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --field-selector=: Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
    --list: If true, display the annotations for a given resource.
    --local: If true, annotation will NOT contact api-server but run locally.
    --overwrite: If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --resource-version=: If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -A, --all-namespaces: If true, check the specified action in all namespaces.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to update the annotation
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl annotate` is a command used with Kubernetes to add or update annotations on Kubernetes objects such as Pods, Services, and ConfigMaps. Annotations provide metadata associated with an object and are key-value pairs stored in the object''s metadata field. This command can be useful for customizing object behavior, marking objects for special treatment by other components, or providing additional information to users or tools. The general syntax is `kubectl annotate <object-kind>/<object-name> --annotate-key=<annotation-key> --annotate-value=<annotation-value> [--overwrite] [namespace/] <cluster|context>`. For example, to add an annotation named "color" with value "red" to a Pod named "mypod" in the "default" namespace, use `kubectl annotate pod mypod --annotate-key color --annotate-value red [default]`.'
    flag:
        all: |-
            [AI] `kubectl annotate --all` is a command used in Kubernetes to update or add annotations across all objects of a specific kind within a cluster. Annotations are key-value pairs added as metadata to Kubernetes resources, and they can be used for various purposes such as adding custom labels, enabling features like auto-scaling, or providing additional information about the resource.

            The `--all` flag is used to apply the annotation update to all instances of the specified resource kind. For example, `kubectl annotate deployment my-deployment --all --overwrite=true key1=value1 key2=value2`. This command would add or update the specified annotations for all deployments with the name `my-deployment` in the cluster. The `--overwrite=true` flag is optional and allows for updating existing annotations if they already exist on the resources.
        all-namespaces: '[AI] `kubectl annotate --all-namespaces` is a command used with Kubernetes'' `kubectl` tool for managing and configuring clusters or applications running on the platform. This specific command appends or updates annotations in all namespaces across the cluster. Annotations are key-value pairs that can be attached to Kubernetes objects, such as pods or services, providing additional information that is not part of the primary data model. By using `--all-namespaces`, you apply the annotation modification to all namespaces in the cluster rather than just a specific one.'
        allow-missing-template-keys: |-
            [AI] `kubectl annotate` is a command-line tool used to add, update, or delete annotations in Kubernetes objects' metadata. The `--allow-missing-template-keys` flag modifies the behavior of `kubectl apply` and `kubectl annotate` when processing YAML files.

            By default, if a YAML file contains template keys that do not exist in the current object, an error will be thrown. However, when using the `--allow-missing-template-keys` flag, Kubernetes will allow these missing keys and continue processing the YAML file, applying the given annotations even if there are missing template keys.

            This flag is particularly useful when updating YAML files incrementally or dealing with evolving schema in a declarative manner. By allowing missing keys, you can simplify the process of adding new features, without having to update all existing keys first. However, it's essential to be aware that using this flag may result in warnings and unexpected behaviors if not used carefully.
        dry-run: '[AI] `kubectl annotate --dry-run` is a command used with the Kubernetes `kubectl` tool to simulate the addition of annotations to Kubernetes objects without actually making the change. Annotations are key-value pairs added to objects to store additional metadata that can be used by custom controllers or tools. The `--dry-run` flag outputs what would be done if the command were run without this flag, allowing users to review the changes before applying them in a production environment.'
        field-manager: '[AI] `kubectl annotate` is a command in Kubernetes used to add, update, or delete annotations on Kubernetes objects such as Pods, Services, and ConfigMaps. The `--field-manager` flag is an optional argument that can be used with this command to specify a custom controller or manager that will handle the annotation update. This flag allows users to decouple the creation or modification of annotations from the object''s lifecycle, enabling more fine-grained control over the state of Kubernetes resources.'
        field-selector: |-
            [AI] `kubectl annotate` is a command used with the Kubernetes CLI (kubectl) to update or add annotations on existing Kubernetes objects, such as pods or services. The `--field-selector` option filters the selection of objects based on specific label key-value pairs to apply the annotation only to those matching objects. For instance:

            ```sh
            kubectl annotate --field-selector app=myapp (<resource>: <annotations>) [<resource>]
            ```

            In this example, `--field-selector app=myapp` specifies that the annotation should be applied only to objects having the label key 'app' with value 'myapp'. Replace `<resource>` and `<annotations>` with the desired resource name and annotations respectively.
        filename: '[AI] `kubectl annotate` is a command-line utility used with Kubernetes for managing and configuring clusters and applications. The `--filename` option specifies the file path containing key-value pairs of annotations to be added to a resource, such as a deployment or a pod. When this command is executed, Kubectl will read the specified file, apply the given annotations to the selected resource, and update its metadata accordingly.'
        kustomize: |-
            [AI] `kubectl annotate --kustomize` is a command used with the Kubernetes command-line tool, `kubectl`. This command is used to update existing Kubernetes objects by adding or modifying annotations using custom Kustomize files.

            Annotations are key-value pairs that can be added to Kubernetes resources as metadata. They can be used for various purposes such as setting labels selectors, configuration overrides, and custom behaviors.

            The `--kustomize` flag instructs `kubectl` to apply a set of Kustomize files instead of directly manipulating YAML files or Kubernetes objects. Kustomize is a configuration management tool for Kubernetes that allows managing declarative configurations in a more efficient way by using customized patches and templates, rather than editing each resource file individually.

            When using `kubectl annotate --kustomize`, you provide the path to one or multiple Kustomize files containing the desired annotation updates. The command will then read these files and apply the changes to the specified objects in your Kubernetes cluster. This way, you can manage complex configurations with ease and minimize errors that come from directly editing YAML files.
        list: '[AI] `kubectl annotate --list` is a command used with Kubernetes'' `kubectl` tool to list all objects in a Kubernetes cluster along with their attached annotations. Annotations are key-value pairs added to customize the behavior of resources in the cluster, often used for labeling or configuration purposes. This command provides a way to easily view and manage these annotations across multiple resources without having to inspect each object individually.'
        local: '[AI] `kubectl annotate --local` is a command used with the Kubernetes CLI (kubectl) to add or update annotations on existing Kubernetes resources, such as Pods or Services, locally in your current working copy of your Kubernetes configuration files. The `--local` flag indicates that only the local configuration files will be modified and not any remote cluster state. This is useful for making temporary changes before committing them to a repository or applying them to the cluster using `kubectl apply`. Annotations are key-value pairs that can be used to store custom metadata on resources in Kubernetes.'
        output: |-
            [AI] `kubectl annotate` is a command-line tool used with Kubernetes to add or update metadata annotations on objects such as pods, services, and config maps. The `--output` flag specifies the format for the output of the command. By default, it will not produce any visible output, but you can choose to display YAML or json formats by using `json` or `yaml` values with this flag, respectively.

            For example:
            ```bash
            kubectl annotate my-pod my-namespace --annotation key=value --output yaml
            ```
            This command would add or update the 'key' annotation on 'my-pod' in 'my-namespace' and output the YAML representation of the updated pod object.
        overwrite: '[AI] `kubectl annotate --overwrite` is a command used with the Kubernetes `kubectl` tool to update existing annotations on a Kubernetes resource, such as a Pod or a Deployment, without modifying other fields in the resource. The `--overwrite` flag ensures that only the specified annotation key-value pairs are updated and all other annotations remain unchanged. This can be useful when you want to modify specific annotations on a resource without disturbing other metadata.'
        record: '[AI] `kubectl annotate --record` is a command used with Kubernetes'' `kubectl` tool to update or create annotations on existing Kubernetes objects, such as Pods or Services. Annotations are key-value pairs added to resource metadata that can be used for custom tagging and filtering. The `--record` flag indicates that the change should be versioned, meaning it will create a new revision in the object''s history, making the change trackable. This command does not modify the actual data of the object but only its metadata, allowing you to maintain the immutable nature of Kubernetes objects while still being able to label and annotate them for various purposes.'
        recursive: '[AI] `kubectl annotate --recursive` is a command used in Kubernetes to add, update, or delete annotations on objects within a Kubernetes cluster recursively. Annotations are key-value pairs that can be attached to any Kubernetes object to store arbitrary metadata. By using the `--recursive` flag, the annotation operation will not only affect the specified object but also all of its descendants in the Kubernetes object hierarchy. For example, if you want to add an annotation to a deployment and its associated replicas, running `kubectl annotate --recursive <deployment-name> <annotationKey>=<annotationValue>` would update both the deployment and all of its replicas with the specified annotation.'
        resource-version: '[AI] `kubectl annotate` is a command-line utility used with Kubernetes to update or add annotations to existing Kubernetes objects, such as Pods, Services, or ConfigMaps. The `--resource-version` flag is optional and specifies the version of the resource to be updated. Annotation data is stored in metadata associated with Kubernetes objects. When using `kubectl annotate` with this flag, it ensures that only resources with a specific version are modified to prevent unintended updates on newer versions or rollbacks to older ones.'
        selector: '[AI] `kubectl annotate` is a command-line tool used with Kubernetes to add or update annotations on resources in a cluster. Annotations are key-value pairs that can be attached to objects in Kubernetes, providing additional metadata or custom labels. The `--selector` option filters which resources the `kubectl annotate` command acts upon by specifying a label selector. This allows you to apply annotations only to specific resources based on their labels. For example: `kubectl annotate deployment my-deployment --selector=app=my-app -l my-annotation=value`. In this case, the `--selector` option is set to `app=my-app`, meaning that only the deployments with `app=my-app` label will be affected by the command.'
        show-managed-fields: '[AI] `kubectl annotate --show-managed-fields` is a command used with Kubernetes'' `kubectl` tool to view the managed fields of a resource object in a cluster. Managed fields are metadata annotations maintained by the Kubernetes API manager to track and record the history of field updates to objects, ensuring that no unintended overwrites occur during concurrent updates. The `--show-managed-fields` flag displays these annotations along with other standard metadata when querying a resource.'
        template: '[AI] `kubectl annotate` is a command-line tool used in Kubernetes to update or add annotations to Kubernetes objects such as Pods, Services, or ConfigMaps. The `--template` option allows you to use a template file (usually written in Go''s `text/template` language) instead of providing the raw annotation values directly. This provides a more flexible and dynamic way to manage annotations, enabling you to define common patterns or variables that can be easily modified across multiple objects. When used with `kubectl annotate`, the template file is processed, and the resulting annotation value is applied to the specified object.'
