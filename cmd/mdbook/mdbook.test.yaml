# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
description: Tests that a book's Rust code samples compile
flags:
    -L, --library-path=: 'A comma-separated list of directories to add to '
    -V, --version: Prints version information
    -d, --dest-dir=: Output directory for the book
    -h, --help: Prints help information
documentation:
    command: '[AI] `mdbook test` is a command used in the `mdBook` book builder for Rust programming language. This command runs tests defined within an `mdBook` project, using Rust''s built-in testing framework, `xunit`. It checks the correctness and reliability of various aspects of the project, such as code snippets, examples, and other project components. The test results provide valuable feedback for development and ensuring the quality of the generated book documentation.'
    flag:
        dest-dir: '[AI] `mdbook test --dest-dir` is a command used with the Mdbook book generator for Rust. It runs tests defined in the Md files within an Mdbook project, and writes the test output to the specified directory (`--dest-dir`) instead of building the HTML output. This allows testing the project''s Markdown files and Rust code without producing additional files that are not part of the testing process.'
        help: |-
            [AI] `mdbook test` is a command used in the Mdbook documentation generator to run tests on your Markdown files and the generated HTML output. The `--help` flag provides detailed information about how to use this command effectively. Here's a brief explanation:

            When you execute `mdbook test --help`, it displays a help message that includes:

            1. A short description of what the command does: "Run tests on your Mdbook project."
            2. Detailed usage information, including the format for the command with its options: `mdbook test [<project-dir>] [--test] [--watch]`
            3. Explanation of each available option and their purpose:
               * `<project-dir>`: The directory containing your Mdbook project (optional, defaults to the current directory).
               * `--test`: Run tests only against the Markdown files (default).
               * `--watch`: Continuously run tests as new files are added or modified.
            4. Examples of how to use the command with different options.
            5. Information about available test frameworks and their setup requirements.
        library-path: '[AI] `mdbook test --library-path` is a command used with the Mdbook documentation generator. The `test` subcommand is used to run tests on an Mdbook project, while the `--library-path` option specifies the path to a directory containing Rust libraries that are required for those tests to run. By providing this option, Mdbook can locate and use the necessary dependencies during the testing process.'
        version: '[AI] `mdbook test --version` is a command used with the MDBook book generation tool to check its version. When run, it will display the version number of the installed MDBook instance and any accompanying build information. This can be helpful for ensuring that you''re using the latest version or for troubleshooting issues related to specific versions.'
