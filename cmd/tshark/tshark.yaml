# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tshark
description: Dump and analyze network traffic
flags:
    --capture-comment=: set the capture file comment
    --color: color output text similarly to the Wireshark GUI
    --disable-heuristic=: disable dissection of heuristic protocol
    --disable-protocol=: disable dissection of proto_name
    --elastic-mapping-filter=: put only the specified protocols within the mapping file
    --enable-heuristic=: enable dissection of heuristic protocol
    --enable-protocol: <proto_name>   enable dissection of proto_name
    --export-objects=: save exported objects for a protocol to a directory
    --list-time-stamp-types: print list of timestamp types for iface and exit
    --no-duplicate-keys: merge duplicate keys in an object into a single key
    --time-stamp-type=: timestamp method for interface
    "-2": perform a two-pass analysis
    -B, --buffer-size=: size of kernel buffer
    -C=: start with specified configuration profile
    -D, --list-interfaces: print list of interfaces and exit
    -E=: set options for output
    -F=: set the output file type
    -G=: dump one of several available reports and exit
    -H=: read a list of entries from a hosts file
    -I, --monitor-mode: capture in monitor mode, if available
    -J=: top level protocol filter
    -K=: keytab file to use for kerberos decryption
    -L, --list-data-link-types: print list of link-layer types of iface and exit
    -M=: perform session auto reset
    -N=: enable specific name resolution
    -O=: Only show packet details of these protocols
    -P, --print: print packet summary even when writing to a file
    -Q: only log true errors to stderr
    -S=: the line separator to print between packets
    -T=: format of text output
    -U=: PDUs export mode, see the man page for details
    -V: add output of packet tree
    -W=: Save extra information in the file, if supported.
    -X*=: eXtension options, see the man page for details
    -a, --autostop*=: 'specify stop criterion '
    -b, --ring-buffer*=: run in 'multiple files' mode
    -c=: 'stop after n packets (def: infinite)'
    -d*=: specify layer type dissection
    -e=: field to print
    -f=: packet filter in libpcap filter syntax
    -g: enable group read access on the output file(s)
    -h, --help: display this help and exit
    -i, --interface=: name or idx of interface
    -j=: protocols layers filter
    -l: flush standard output after each packet
    -n: 'disable all name resolutions (def: all enabled)'
    -o*=: override preference setting
    -p, --no-promiscuous-mode: don't capture in promiscuous mode
    -q: be more quiet on stdout
    -r, --read-file=: set the filename to read from
    -s, --snapshot-length=: packet snapshot length
    -t=: output format of time stamps
    -u=: output format of seconds
    -v, --version: display version info and exit
    -w=: write packets to a pcapng-format file named "outfile"
    -x: add output of hex and ASCII dump (Packet Bytes)
    -y, --linktype=: link layer type
    -z=: various statistics, see the man page for details
documentation:
    command: '[AI] `tshark` is a powerful packet capture and display utility included in Wireshark''s TShark API. It allows users to filter, decode, and analyze network traffic data in real time from the command line. With its rich filters, statistics, and export capabilities, it is widely used for network troubleshooting, analysis, and learning about network protocols.'
    flag:
        "2": '[AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data in real time or offline. The option `-2` is used to set the display filter mode to "Field list 2" or "Fields format 2". In this mode, the output shows the packet headers in a tabular format with fields aligned by column instead of the default tree view. This can be useful for analyzing large data sets or for scripting and automation purposes.'
        C: '[AI] `tshark` is a packet capture and display utility of Wireshark TShark Command-Line Switches (options) is used to customize various aspects of its operation. The option `-C` sets the capture filter or displays captured packets according to a given display filter. In other words, it configures the capture with a specific filter expression or applies a filter to the displayed packets. This flag helps in focusing on specific network traffic while capturing or analyzing the data.'
        E: '[AI] `tshark` is a packet capture and display utility of Wireshark TShark GUI-less command-line tool. The option `-E` (or `--display-filter-expression`) is used to apply a display filter expression on the captured packets before they are displayed. It helps in filtering specific traffic based on various criteria like protocol, source/destination IP or port number, etc., in real-time. This can be useful for analyzing network traffic more efficiently and focusing on the desired data.'
        F: '[AI] The `tshark` is a command-line tool from Wireshark, used for capturing and displaying network packets in real time or saving them to a file for later analysis. The option `-F` (uppercase F) is a filtering flag. It allows users to apply display filters while capturing or reading packet data. For instance, `tshark -i eth0 -F "tcp port 80" -w output.pcap` will capture packets on interface eth0 that match the TCP port 80 filter and write them to a file named output.pcap.'
        G: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `-G` is used to generate statistics and reports based on captured packets. Specifically, it outputs data in a format suitable for further processing by external tools such as Excel,awk, or Unix utilities like grep, sed, etc. The output can include various statistical information like number of packets, bytes, errors, collisions, etc., based on filters applied to the capture data.'
        H: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `-H` or `--help` displays a brief help message that lists all available command line options, their short and long flags, and a description of what each option does. This can be useful when you''re unsure about how to use `tshark` correctly or want to check the syntax for a specific command.'
        J: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `-J` is used to generate JSON output format for the captured packets. With this flag, each packet will be printed as a JSON object in the console or saved to a file, instead of the default text-based output. This feature enables developers and scripts to parse and analyze the data more efficiently using JSON tools.'
        K: '[AI] `tshark` is a command-line tool from Wireshark for capturing and displaying network traffic data in real time. The option `-K` or `--display-filter-file` allows you to specify a file containing filter expressions to be applied to the captured packets. In other words, it processes packet data based on the filter rules defined in the file.'
        M: '[AI] The `-M` option in Wireshark''s TShark command line tool specifies the capture filter to apply during packet capture or display. It takes a BPF-style expression as its argument, allowing users to define complex and custom filters for capturing or analyzing network traffic. This flag is essential in TShark as it enables users to selectively focus on particular packets based on specific criteria such as source or destination IP addresses, protocol types, port numbers, or other relevant fields.'
        "N": '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `-N` or `--display-filter-list` is used to apply a display filter expression to the packets in real time as they are captured or displayed. This allows filtering traffic based on various criteria like protocol, source/destination IP address, port number, etc., without saving the packets to a capture file.'
        O: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `-O` sets the output format. It can be used to specify various output formats like `-O json`, `-O csv`, `-O pcap-ng`, etc. This allows users to save the capture data in different formats for further processing or analysis.'
        Q: '[AI] The `tshark` command with the option `-Q` is a query language used in Wireshark (of which tshark is a part) to filter and display packets based on specific criteria. It returns information about packets that match the given filter expression, without actually displaying the packet data itself. This can be useful for getting statistics or performing complex queries without having to manually scroll through captured traffic.'
        S: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `-S` or `--display-filter-script` is used to apply a display filter script to the captured packets. This flag does not directly show any flags or their meanings; instead, it processes and displays only the packets that match the specified filter expression. The filter can be defined using various filters such as protocol, source or destination IP addresses, port numbers, etc. The output will show the packets based on the filter criteria.'
        T: '[AI] The `tshark` is a packet capture and display utility from Wireshark. The option `-T` followed by `decodeas:` or `displayfilter:` specifies the output format and filter, respectively. For instance, `tshark -T decodedump -i eth0` displays captured packets in a human-readable decoded format, while `tshark -T find, "frame. Protocol == 80" -i eth0` uses a display filter to search for and show packets with the protocol equal to HTTP (TCP port 80).'
        U: '[AI] The `tshark` is a command-line tool from Wireshark, used to capture and display packets in real time or read previously saved packet captures (pcap files). The option `-U` stands for "Upper layer protocol decoding update". When used with this flag, tshark will download the latest packet dissectors and display files from the Wireshark repository to decode and interpret the captured packets, ensuring the most up-to-date decoding capabilities.'
        V: '[AI] `tshark -V` is a command used in Wireshark, a popular network protocol analyzer tool. The `-V` option is used to display the version information of Wireshark and its components, such as the TShark packet capture library and the protocol dissectors. It provides details like the version number, build number, compilation date, operating system, and other relevant information.'
        W: '[AI] The `tshark` is a command-line packet analyzer tool from Wireshark. The option `-W` or `--display-filter-list` is used to apply a display filter list to the captured packets before they are displayed. This allows users to focus on specific traffic by filtering out unwanted packets based on various criteria such as protocol, source/destination IP addresses, port numbers, etc. The filter expression is provided as an argument to `-W`.'
        X: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `-X` is used to enable extensive display filters, also known as TcpStream or Expert Info filters. These filters provide detailed information about the traffic beyond the standard display fields. For instance, you can use it to filter on specific HTTP response codes or examine TCP stream conversations in detail.'
        autostop: '[AI] `tshark` is a packet capture and display utility of Wireshark. The `--autostop` option is used to automatically stop the capture after a specific number of packets or bytes have been captured. This can be useful for quickly analyzing a specific network issue or to limit the amount of data being captured for storage or analysis purposes. Once the defined limit is reached, the capture will automatically stop and the output file can be saved for further analysis.'
        buffer-size: '[AI] The `tshark` is a packet capture and display utility from Wireshark development. The `--buffer-size` option sets the maximum amount of data to be captured before writing it to a file or displaying it on the console. This can help limit memory usage when capturing large packets or high traffic volumes. The value can be specified in various units such as bytes, kilobytes (K), megabytes (M), and gigabytes (G).'
        c: '[AI] `tshark` is a command-line tool from Wireshark for capturing and displaying network traffic data. The option `-c` or `--configure-file` is used to specify a configuration file that defines filters, displays, and other capture settings. This flag allows users to customize their packet capture and analysis according to their specific requirements.'
        capture-comment: '[AI] `tshark` is a packet capture and display utility of Wireshark, a popular network protocol analyzer. The option `--capture-comment` allows you to add descriptive comments or annotations to the captured packets in the .pcapng or .cap file format. These comments can be useful for providing additional context or metadata about the captured data, making it easier to understand and analyze later.'
        color: '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `--color` enables colorization of packet information in the terminal output for better visibility and understanding of network data. Different types of packets or fields are displayed in distinct colors, making it easier to identify trends or anomalies.'
        d: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `-d` stands for "display filter" and is used to apply a filter expression to the captured packets before displaying them. With this option, you can specify various filters based on different packet fields like protocol, source/destination IP address or port number, etc., to narrow down the data displayed for analysis.'
        disable-heuristic: '[AI] The `tshark` is a packet capture and display utility of Wireshark, a popular network protocol analyzer. The option `--disable-heuristic` disables heuristic dissectors in `tshark`. Heuristic dissectors are used to identify and decode protocols based on their contents rather than their signatures. Disabling these dissectors may improve performance when analyzing large packets or specific network traffic where the use of heuristics is not necessary or desired.'
        disable-protocol: |-
            [AI] The `tshark` is a packet capture and display utility from Wireshark development team. The option `--disable-protocol` is used to prevent specific protocols from being decoded and displayed during the packet analysis.

            When you run `tshark` with this flag followed by the name of the desired protocol(s), it disables the decoding of those protocols, which can be useful for various reasons such as:

            1. Performance improvement: Disabling unnecessary protocols can help reduce memory and processing usage, especially when dealing with large capture files or limited system resources.
            2. Focused analysis: By excluding specific protocols from the analysis, you can concentrate on the protocols of interest to gain a better understanding of their behavior in a given network environment.
            3. Troubleshooting and debugging: Disabling certain protocols can help eliminate potential issues related to those protocols while isolating and addressing specific problems within a captured packet data.
        e: '[AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data in real time or saving it to a file for later analysis. The option `-e` or `--display-filter-expression` is used to apply a filter expression on the captured packets. It allows users to selectively view only the packets that match specific criteria, such as protocol, source/destination IP address, port number, etc., making it easier to analyze large amounts of data.'
        elastic-mapping-filter: '[AI] `tshark` is a packet capture and display utility from Wireshark, a popular network protocol analyzer. The option `--elastic-mapping-filter` (short form: `-X`) is used to apply a filter expression that supports elastic queries, which allows analyzing traffic with dynamic filter conditions based on certain fields'' values. This feature is particularly useful when dealing with large packet captures, allowing for more efficient and flexible analysis. The filter expression can include logic operators, string matching, and other conditional statements using field names and values.'
        enable-heuristic: '[AI] `tshark` is a packet capture and display utility from Wireshark development. The option `--enable-heuristic` is not actually a flag for tshark itself but rather a build-time configuration option. It enables the dynamic dissection of protocols in the packet captures, also known as heuristic dissection or "on-the-fly" analysis. With this option enabled, tshark can identify and display the contents of newly defined or unknown protocols based on their header structure and data content patterns, without requiring a predefined dissector for that specific protocol. This makes `tshark --enable-heuristic` an essential feature for analyzing and troubleshooting emerging or custom protocols.'
        enable-protocol: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `--enable-protocol` is used to enable the decoding of specific protocols during packet analysis. When this option is used with the command, it tells tshark to parse and display packets of the specified protocol(s) only. For example, `tshark --enable-protocol tcp` will decode and display only TCP packets in the capture file. Multiple protocols can be enabled by separating their names with commas. This option is useful when analyzing traffic for specific protocols without cluttering the output with irrelevant data.'
        export-objects: |-
            [AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data. The `--export-objects` option is used to export specific protocol data units (PDUs) or fields from captured packets to files.

            The basic syntax is: `tshark -i interface_name -Y expression -e field_name -o -C delimiter -x filename output_type [options]`

            Here's a breakdown of the options used with `--export-objects`:

            - `expression`: A BPF (Berkeley Packet Filter) expression to filter packets based on certain conditions.
            - `field_name`: The name of the data field to be exported from each packet.
            - `output_type`: Defines the format of the exported data, such as CSV (comma-separated values), JSON or Hex dump.

            For example, to export the source and destination IP addresses from packets matching a specific TCP port number, you can use this command:

            ```sh
            tshark -i interface_name -Y tcp port 80 -e ip.src.addr -e ip.dst.addr -o -C "," -x output.csv
            ```

            This command captures packets with TCP traffic on interface `interface_name` that match the specified port number, then exports the source and destination IP addresses to a CSV file named `output.csv`.
        f: '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `-f` is used to specify a capture filter. It allows users to define what data they want to see in their capture, such as traffic from a specific host or protocol. For example, `tshark -i eth0 -f "host 192.168.1.1"` would capture packets to or from the IP address 192.168.1.1 on interface eth0.'
        g: '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `-G` or `--display-filter-graph` generates a graph of display filters. This flag allows you to visualize the relationship between various display filters, making it easier to understand complex filtering expressions. You can save this graph as an image file for future reference.'
        help: '[AI] `tshark --help` is a command used in Wireshark''s TShark tool, which is a command-line version of Wireshark for network data capture and display. This command displays a help message that describes the various options and usage of TShark. The help message includes information on how to filter packet data based on various criteria like protocol, source/destination IP address, port number, etc., as well as options for writing captured packets to files or displaying them in real-time. It also provides examples for using these features.'
        interface: '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `--interface <interface-name>` specifies which network interface to use for capturing packets. For example, `tshark --interface wlan0` will start capturing packets on the Wi-Fi interface named "wlan0". This option is important for specifying the correct interface when performing network analysis or troubleshooting.'
        j: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `-j` is used to specify a capture filter, also known as a display filter, for the output. It tells `tshark` to only show the selected fields when displaying the captured packets. For example, `tshark -i eth0 -j xml:/path/to/output.xml` will save the captured packets in XML format with only the specified fields displayed.'
        l: '[AI] `tshark` is a command-line tool from Wireshark, used to capture and display packets in real time. The option `-l` or `--list-headers` displays a list of the headers (columns) that will be displayed when capturing packets. It provides information about the types of data that will be captured, such as the name, type, and direction of each column. This can be useful for understanding what data will be captured and displayed during packet analysis.'
        linktype: '[AI] The `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data in real time. The option `--linktype` is used to filter traffic based on the link layer type. This can be specified as a protocol name (e.g., "Ethernet", "802.11"), a protocol number (e.g., "1" for Ethernet, "65" for ARP), or a combination of both. For example, `tshark --linktype ethernet filter.pcap` will capture and display only Ethernet traffic in the file `filter.pcap`.'
        list-data-link-types: '[AI] `tshark` is a packet capture and display utility of Wireshark, which is used to interactively browse and filter the data in real time or save it to a file for later analysis. The command `tshark --list-data-link-types` lists all available data link types that can be used with Wireshark/TShark. Data link types define the lowest layer of the OSI model, responsible for the physical transmission of data between nodes on a network. Understanding these types is essential to analyze and troubleshoot various networks effectively. The output will provide information such as name, alias, description, and encapsulation type for each data link type.'
        list-interfaces: '[AI] `tshark` is a packet capture and display utility from Wireshark, a popular network protocol analysis tool. The command `tshark --list-interfaces` is used to display information about the available network interfaces on a system. It lists the name, description, hardware address (MAC address), status (up or down), and type of each interface. This information can be useful for identifying which interface to use for capturing packets or for troubleshooting network connectivity issues.'
        list-time-stamp-types: '[AI] `tshark` is a packet capture and display utility of Wireshark. The command `--list-time-stamp-types` is used to display a list of time stamp types supported by the tool. Time stamps indicate the time at which each packet was captured or generated. Knowing the available time stamp types can help in selecting the most appropriate one for analysis based on the specific use case and data source. Examples of time stamp types include `ntp`, `tcp-ts`, `rtp`, among others. Each type represents a different method or standard for time stamping packets.'
        monitor-mode: '[AI] `tshark` is a packet capture and display utility from Wireshark. The `--monitor-mode` option is used to put `tshark` into monitor mode, also known as Promiscuous Mode or Sniffing Mode. In this mode, `tshark` can receive and display all traffic on a network interface without filtering by specific protocols or addresses. This is useful for analyzing network activity in real-time. Note that using monitor mode requires root privileges due to security concerns.'
        "n": '[AI] `tshark` is a packet capture and display utility from Wireshark. The option `-n` disables DNS lookups and name resolution in output. This means that instead of displaying hostnames or domain names, it will show IP addresses instead. It helps to analyze network traffic with a focus on IP addresses without the potential performance impact of DNS lookups.'
        no-duplicate-keys: '[AI] The `tshark` is a command-line tool from Wireshark for capturing and displaying network traffic. The option `--no-duplicate-keys` is used to suppress the display of duplicate packet headers with identical fields in the capture output. This can be useful when dealing with large packet captures to reduce redundant data and improve performance.'
        no-promiscuous-mode: '[AI] The `tshark` is a packet capture and display utility from Wireshark. The option `--no-promiscuous-mode` tells `tshark` not to put the network interface into promiscuous mode during the capture process. In normal operation, a sniffer in promiscuous mode receives all packets on a network segment, including those not intended for the local machine. By disabling promiscuous mode, `tshark` will only capture packets addressed to its IP address or those sent using its MAC address. This can be useful when analyzing specific traffic without interfering with other network activity.'
        o: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `-o` followed by an output file name is used to write the capture results into a file instead of displaying them live in the terminal. For example, `tshark -i eth0 -o output.pcap` will save all packets captured from interface eth0 into a file named "output.pcap".'
        print: '[AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data. The option `--print` is used to output the captured packet data in various formats such as fields, hex, ASCII, or JSON. It provides raw packet information without graphical decoding. This can be useful for scripting and analysis purposes, allowing users to process the data using other tools or scripts.'
        q: '[AI] `tshark` is a command-line tool from Wireshark, used to capture and display packet data. The option `-q` is used to suppress various types of output and make the capture run more quietly. It stands for "quiet," reducing the amount of text displayed on the terminal during the capture process.'
        read-file: '[AI] `tshark --read-file` is a command used in Wireshark, a popular network protocol analyzer. The `--read-file` option instructs Wireshark''s TShark tool to read and display the contents of a previously saved capture file (pcapng or pcap format) instead of actively capturing packets in real time. This is useful for offline analysis, reviewing past network activities or troubleshooting based on stored data.'
        ring-buffer: |-
            [AI] The `tshark` is a packet capture and display utility from Wireshark, a popular network protocol analysis tool. The `--ring-buffer` option is used to enable or configure the ring buffer capture feature in `tshark`.

            When capturing packets with `tshark`, you can use the ring buffer mode to continuously capture packets into a circular buffer without writing them to a file. The `--ring-buffer` option allows you to specify the size of the ring buffer and the number of packets it should hold before overwriting old data. For example, `tshark --ring-buffer=size=10M,count=10000` sets up a ring buffer with a capacity of 10 Megabytes and room for 10,000 packets.

            This option is useful when performing live packet analysis or when you want to analyze captured data without having to write the packets to a file first. It also makes it possible to use `tshark` in scenarios where writing files may not be practical due to resource limitations or other constraints.
        snapshot-length: '[AI] The `tshark` is a packet capture and display utility from Wireshark, a popular network protocol analysis tool. The option `--snapshot-length <length>` sets the maximum length of each captured packet in bytes. By default, it captures the entire packet. This option allows specifying a limit for efficiency reasons when dealing with large packets or high-speed networks.'
        t: '[AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic data. The option `-t` is used to set the display filter time format. It can be set to various formats such as `s`, `ms`, `us`, `ns`, or `relative` to specify how the time values are displayed in the output. For example, using `-t ns` will display the timestamps in nanoseconds.'
        time-stamp-type: '[AI] `tshark` is a packet capture and display utility of Wireshark. The option `--time-stamp-type` is used to specify the format of the time stamps displayed in the capture file or on the screen. It accepts various options such as `"raw.time"` for raw binary time stamps, `"datetime"` for human-readable datetime strings, or custom formats defined using `"strftime"` directives. For example, `--time-stamp-type nano` displays timestamps in nanoseconds format. This option helps customize the display of time information according to specific requirements.'
        u: |-
            [AI] `tshark` is a command-line tool from Wireshark, used for capturing and displaying network traffic in real time or saving it to a file for later analysis. The option `-u` sets the user interface mode:

            1. `-U` (uppercase) displays a list of available capture interfaces and their capabilities. No packets are captured or displayed.
            2. `-u` (lowercase) specifies the type of display filter to be used. For instance, `-u dot11` will show only Wi-Fi traffic in the output.
        version: '[AI] `tshark --version` is a command used in Wireshark, a popular network protocol analyzer. This command is run in the terminal or command prompt to display the version information of Wireshark''s packet capture tool, TShark. The output will show the version number and build details such as the compilation timestamp and operating system.'
        w: '[AI] `tshark` is a command-line packet analyzer tool in Wireshark. The option `-w` or `--capture-filter-list` followed by a filter expression is used to set the capture filter(s) for the ongoing packet capture. It specifies the protocols, sources, destinations, or any other filtering criteria to be applied to the captured packets. Only the packets matching the given filter will be displayed and saved in the result file.'
        x: '[AI] `tshark` is a packet analyzer tool from Wireshark. The option `-x` or `--hex-dump` is used to display the hexadecimal dump of packets in addition to their decoded form. This can be useful for low-level analysis, such as investigating specific byte sequences in network traffic.'
        z: |-
            [AI] `tshark` is a packet capture and display utility from Wireshark, a popular network protocol analyzer. The command `tshark -z` is used to perform displays filters or statistical queries against the captured packets without having to open the full graphical interface of Wireshark.

            The flag `-z` enables the output of various statistics and information about the packet data in the terminal, such as displaying packet counts with specific filter conditions (e.g., `-z count ip.addr == 192.168.0.1`) or performing statistical analysis on captured packets' fields (e.g., `-z summary -g ip.addr,frame_size`). The output format can be customized with additional flags and options for better readability and analysis.
