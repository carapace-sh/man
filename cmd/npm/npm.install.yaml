# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Install a package
flags:
    --audit: Conduct security audit
    --bin-links: Create symlinks for package executables
    --dry-run: Only report changes
    --fund: Display funding message
    --global-style: Use global layout
    --ignore-scripts: Disable scripts
    --legacy-bundling: Use legacy bundling
    --no-save: Prevents saving to `dependencies`
    --omit=: Exclude package
    --package-lock: Only update package-lock.json
    --save-dev: Package will appear in your `devDependencies`
    --save-optional: Package will appear in your `optionalDependencies`
    --save-peer: Package will appear in your `peerDependencies`
    --save-prod: Package will appear in your `dependencies`.
    --strict-peer-deps: Fail and abort for any conflicting `peerDependencies`
    --workspaces: Enable running a command in the context fo all workspaces
    -E, --save-exact: Save exact package version
    -S, --save: Package will appear in your `dependencies`
    -g, --global: operate in global mode
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm install` is a command used in Node.js projects for installing new packages and managing dependencies listed in the `package.json` file. When run, npm (Node Package Manager) downloads and saves the specified packages and their required dependencies to the local project folder. This ensures that all necessary libraries are available for the application to function properly.'
    flag:
        audit: '[AI] `npm install --audit` is a command used in Node.js projects to check for known vulnerabilities in the project''s dependencies and lockfile (package-lock.json or yarn.lock). It runs an audit scan using the built-in npm auditor tool, which searches for known security weaknesses in the installed packages. If any vulnerabilities are found, it outputs the details along with recommended actions to mitigate the risks. The --audit flag is optional as this functionality is enabled by default when running `npm install`.'
        bin-links: '[AI] `npm install --bin-links` is a command used in Node.js package management with npm (Node Package Manager). This command instructs npm to create symbolic links instead of copying executable files when installing packages that have a `bin` field in their `package.json`. These binaries are often global CLI tools, like `create-react-app`, `express`, or `nodemon`. By using `--bin-links`, npm creates these symbolic links in the system''s PATH (for Unix systems) or in the `%APPDATA%\npm` folder (for Windows), making it easier to use these tools without having to manage multiple installations. This can be particularly useful when using different Node.js versions on a single machine.'
        dry-run: '[AI] `npm install --dry-run` is a command used in Node.js package management with npm (Node Package Manager). This command simulates an installation of new packages without actually downloading or modifying any files. It provides a preview of which packages would be installed, their versions, and the resulting dependencies tree. This can help avoid unintended changes or conflicts before running the actual installation.'
        fund: |-
            [AI] `npm install --fund` is not a valid npm command. The correct syntax for installing packages using npm with funding from an NPM registry token is:

            ```bash
            npm install --registry=https://registry.npmjs.org/ --access-token YOUR_TOKEN_HERE
            ```

            Replace `YOUR_TOKEN_HERE` with your NPM registry token, which you can get from the npm website under your account settings. This command installs packages from the public npm registry and pays for them using the provided token.
        global: '[AI] `npm install --global` is a command used in Node.js package management with npm (Node Package Manager). This command installs a package globally, which means it''s available for use across your entire system instead of just within one project. The installation is done system-wide in the user''s home directory, typically under `~/.npm`. This command downloads and saves the package in your npm cache, and then links or installs the executable files to be accessible from anywhere.'
        global-style: '[AI] `npm install --global-style` is a command used in Node.js package management with npm (Node Package Manager). This command installs packages globally with a specific configuration for style-related packages such as `create-react-app`, `express-generator`, and others, which modify the user''s global `package.json` file to include a `--save-dev --save-exact` prescription for the installed package. This results in having these packages available across different projects without the need of individually installing them each time.'
        ignore-scripts: '[AI] The `npm install --ignore-scripts` command is used when installing packages via npm (Node Package Manager) to bypass the execution of scripts mentioned in the `scripts` section of package.json files during the installation process. This can be helpful if you want to install dependencies without running additional scripts, for example, when preparing a development environment or building a project manually.'
        legacy-bundling: '[AI] `npm install --legacy-bundling` is a command used in Node.js projects during package installation with npm (Node Package Manager). This option is employed when working with older libraries or projects that use outdated bundlers, such as browserify or watchify, which are no longer supported in the latest versions of React and other popular libraries. By using `--legacy-bundling`, you can override npm''s default modern bundle configuration and install packages using the legacy bundlers instead. This is necessary when encountering compatibility issues between newer library versions and your legacy project setup.'
        no-save: '[AI] `npm install --no-save` is a command used in Node.js projects when working with npm (Node Package Manager). This command installs specified packages from node_modules folder without adding them to the package.json file''s dependency list. It''s often used for development dependencies or when sharing code without including unnecessary dependencies.'
        omit: |-
            [AI] `npm install --omit` is a command used in Node.js package management with npm (Node Package Manager). This command is used to install all the specified packages in your project's `package.json` file except for those listed in the `--omit` flag. The `--omit` option takes one or more package names as arguments, which will be excluded from installation. This can help manage dependencies and avoid unintended installations. For example:

            ```
            npm install react react-dom --omit express
            ```

            This command would install 'react' and 'react-dom', but exclude 'express' from being installed.
        package-lock: '[AI] The command `npm install --package-lock` is used in Node.js package management with npm (Node Package Manager). It instructs npm to install specified packages from the project''s `package-lock.json` file instead of regenerating a new one based on current `package.json`. This ensures that previously installed packages are reinstalled exactly as they were before, maintaining the consistency of the dependency tree.'
        save: '[AI] `npm install --save` is a command used in Node.js projects for managing dependencies with npm (Node Package Manager). The `--save` option tells npm to add the installed packages as dev or production dependencies in the "package.json" file, which gets saved automatically. This way, the added dependencies will be included when the project is built or installed on another machine.'
        save-dev: '[AI] `npm install --save-dev` is a command used in Node.js projects for managing dependencies. This specific command installs packages with the `--save-dev` flag, which signifies that the packages are development dependencies. Development dependencies are packages required to develop and build the project, but not necessary for its production runtime. These dependencies will be listed in `devDependencies` section of the `package.json` file instead of `dependencies`.'
        save-exact: '[AI] The `npm install --save-exact` command is used when installing packages via Node Package Manager (npm) with a specific version number in the package.json file. The `--save-exact` flag ensures that the exact specified package version will be saved as a dependency in the package.json file, preventing any automatic version updates during npm install or build processes. This can help maintain consistency across different development environments and ensure that your project depends on a specific version of a package.'
        save-optional: '[AI] `npm install --save-optional` is a command used in Node.js package management with npm (Node Package Manager). This command allows you to install a package as a devDependency but without adding it to the `dependencies` section of your `package.json` file. Instead, it gets added to the optional `optionalDependencies` or `peerDependencies` section. This can be useful when a library is not required for the project to run but is needed for certain features or development tasks.'
        save-peer: '[AI] The `npm install --save-dev --save-exact <package> <version>` command is used in Node.js projects to install a specific package along with saving it as a devDependency in the package.json file. This means that the package will not be included in the built bundle or distributed to users, but it''s required for development. The `--save-peer` flag is similar, but saves the dependency as a peerDependency instead. A peerDependency is a package that your project depends on, but it is not directly installed as a devDependency or productionDependency of your project. Instead, it is expected to be found in the same environment as your project and will be installed automatically when someone installs your package as a dependency.'
        save-prod: '[AI] `npm install --save-prod` is a command used in Node.js projects managed with npm (Node Package Manager). It installs specified packages from npm registry as production dependencies, meaning these packages will be included in the final bundle or not transitive by default. The `--save-prod` flag modifies the package-lock.json file instead of adding an entry to the regular dependencies array in package.json. This makes the installed packages available during the build process without being included as runtime dependencies in the source code or development dependencies, leading to a smaller bundle size and improved performance for production environments.'
        strict-peer-deps: |-
            [AI] The `npm install --strict-peer-deps` command is used when running `npm install` in a Node.js project to enforce peer dependencies specified in a package's `package.json` file. Peer dependencies are packages that your project depends on, but are not directly listed as dependencies. Instead, they are marked as "peer" dependencies and must be present for certain functionalities of the package to work.

            When this flag is used, npm will check if all required peer dependencies are installed in the project, and throw an error if any are missing. This can help prevent potential compatibility issues that may arise from missing or outdated peer dependencies.
        workspace: '[AI] `npm install --workspace` is a command used in Node.js package management with npm (Node Package Manager). This command installs dependencies for all projects within a single workspace, which is defined in a `package.json` file with a `workspaces` key. It''s useful when managing multiple related packages under one project, allowing developers to install dependencies once across the entire workspace instead of individually per project.'
        workspaces: '[AI] `npm install --workspaces` is a command used in npm (Node Package Manager) when working with multiple packages in a single Git repository, also known as a monorepo. The `--workspaces` flag enables npm to install dependencies across all the projects within that repository using symlinks or yarn workspaces for faster installation and better caching of dependencies. This command allows developers to manage their projects as one cohesive unit rather than managing each project individually.'
