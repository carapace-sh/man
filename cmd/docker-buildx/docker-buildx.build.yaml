# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build [OPTIONS] PATH | URL | -
aliases:
    - b
description: Start a build
flags:
    --add-host*=: 'Add a custom host-to-IP mapping (format: "host:ip")'
    --allow*=: Allow extra privileged entitlement (e.g., "network.host", "security.insecure")
    --build-arg*=: Set build-time variables
    --build-context*=: Additional build contexts (e.g., name=path)
    --cache-from*=: External cache sources (e.g., "user/app:cache", "type=local,src=path/to/dir")
    --cache-to*=: Cache export destinations (e.g., "user/app:cache", "type=local,dest=path/to/dir")
    --cgroup-parent=: Optional parent cgroup for the container
    --compress: Compress the build context using gzip
    --cpu-period=: Limit the CPU CFS (Completely Fair Scheduler) period
    --cpu-quota=: Limit the CPU CFS (Completely Fair Scheduler) quota
    --cpuset-cpus=: CPUs in which to allow execution ("0-3", "0,1")
    --cpuset-mems=: MEMs in which to allow execution ("0-3", "0,1")
    --force-rm: Always remove intermediate containers
    --iidfile=: Write the image ID to the file
    --isolation=: Container isolation technology
    --label*=: Set metadata for an image
    --load: Shorthand for "--output=type=docker"
    --memory-swap=: 'Swap limit equal to memory plus swap: "-1" to enable unlimited swap'
    --metadata-file=: Write build result metadata to the file
    --network=: Set the networking mode for the "RUN" instructions during build
    --no-cache: Do not use cache when building the image
    --no-cache-filter*=: Do not cache specified stages
    --platform*=: Set target platform for build
    --progress=: Set type of progress output ("auto", "plain", "tty"). Use plain to show container output
    --pull: Always attempt to pull all referenced images
    --push: Shorthand for "--output=type=registry"
    --rm: Remove intermediate containers after a successful build
    --secret*=: 'Secret to expose to the build (format: "id=mysecret[,src=/local/secret]")'
    --security-opt*=: Security options
    --shm-size=: Size of "/dev/shm"
    --squash: Squash newly built layers into a single new layer
    --ssh*=: 'SSH agent socket or keys to expose to the build (format: "default|<id>[=<socket>|<key>[,<key>]]")'
    --target=: Set the target build stage to build
    --ulimit=: Ulimit options
    -c, --cpu-shares=: CPU shares (relative weight)
    -f, --file=: 'Name of the Dockerfile (default: "PATH/Dockerfile")'
    -m, --memory=: Memory limit
    -o, --output*=: 'Output destination (format: "type=local,dest=path")'
    -q, --quiet: Suppress the build output and print image ID on success
    -t, --tag*=: 'Name and optionally a tag (format: "name:tag")'
documentation:
    command: |-
        [AI] `docker buildx` is a feature of Docker Engine that allows building images using multiple buildx contexts and builds workers, enabling parallel builds and accelerated image construction. The `docker buildx build` command is used to execute a build using one or more specified buildx contexts and/or build workers.

        The syntax for the command is:
        ```css
        docker buildx build [OPTIONS] PROJECT-PATH [@Dockerfile | --files-from FILE] [--build-arg=ARGS...] [--cache-from CACHE] [--label=LABEL] [--target TARGET] [--push] [BUILD-CONTEXT]
        ```
        - `PROJECT-PATH`: The local path to the project directory, containing the Dockerfile.
        - `[@Dockerfile | --files-from FILE]` (optional): Specify an alternative file path for the Dockerfile or a list of files to be used in the build.
        - `--build-arg=ARGS...` (optional): Set custom build arguments.
        - `--cache-from CACHE` (optional): Use an existing cache as a base for the new build.
        - `--label=LABEL` (optional): Set metadata labels for the image being built.
        - `--target TARGET` (optional): Build an alternate target instead of the default one.
        - `[BUILD-CONTEXT]` (optional): The build context, which can be a local directory or a remote buildx context. If not specified, it defaults to the current context.

        The command starts the build process using the specified buildx contexts and workers, if any are defined. If the `--push` flag is used, the built image will also be pushed to a registry after successful construction.
    flag:
        add-host: '[AI] `docker buildx` is a Docker extension for building and producing multistage images using multiple buildx contexts, each with its own set of build workers and caches. The `--add-host` flag is used to add a custom hostname and IP address to the buildx context for connecting to remote builds or services. For example, `docker buildx build --add-host my-remote:192.168.0.5:my-remote-alias .` will create a new buildx context named `my-remote` and assign it the IP address `192.168.0.5` with the alias `my-remote-alias`. This allows you to access remote resources during your build process by referring to `my-remote-alias` in your Dockerfile or build commands.'
        allow: '[AI] `docker buildx` is a Docker extension for building and producing production-ready images using multiple buildx contexts. The `--allow` flag is used when invoking a `docker buildx build` command to grant permission to build artifacts in a specific context or registry. It takes one or more arguments that specify the context or registry name, allowing you to control which resources are used for building your images. For example: `docker buildx build --allow-write mycontext:. --push myregistry:5000`.'
        build-arg: |-
            [AI] `docker buildx` is an extension of Docker Buildx, which enables building containers from multiple sources. The `--build-arg` option sets a build argument to be used during the build process. It allows passing custom variables as arguments to the Dockerfile or multi-stage builds, enabling better configuration and customization for the container image being built. For example:

            ```sh
            docker buildx build --build-arg MY_APP_VERSION=1.0 . -t myapp:$MY_APP_VERSION
            ```

            This command sets the value of `MY_APP_VERSION` to `1.0`, and then builds a container image using that variable as part of the image tag. This makes it easier to create multiple versions of the same image with different configurations or features.
        build-context: '[AI] `docker buildx` is a Docker extension that enables building container images using multiple build contexts and sources. The command `docker buildx build` triggers a build using `buildx`. The option `--build-context` specifies the root directory on the host machine for the source code and configuration files of the application to be built into an image. Multiple contexts can be defined and combined in one build, enabling complex projects with multiple components to be built as a single cohesive image. This command executes the build process in parallel across different build nodes or workers, improving the overall build time efficiency.'
        cache-from: '[AI] `docker buildx` is a Docker extension for building and producing production-ready images using multiple buildx drivers. The `--cache-from` option in a `docker buildx build` command is used to specify a Docker image or a context as the source of the build cache. This allows reusing previously built layers and artifacts, reducing the time it takes to build subsequent identical images. In other words, it speeds up the build process by leveraging existing cached contents.'
        cache-to: |-
            [AI] `docker buildx` is a command-line tool introduced in Docker Desktop version 3.0 and above, which extends the classic `docker build` command to support multi-stage builds, caching builds across multiple machines, and other advanced features.

            The `--cache-to` flag in this context specifies where Docker should store the built image layers and cache data for future builds. By default, Docker stores these artifacts locally on the machine executing the build command. However, if you set `--cache-to`, it allows you to store the data in a remote Docker registry or another buildx worker, which can then be used by other workers or machines when they perform builds based on those images. This can improve build performance and reduce network bandwidth usage during the build process.
        cgroup-parent: '[AI] `docker buildx` is a Docker extension that enables building images using multiple buildx contexts, each with its own separate CGroup parent. The command `docker-buildx build --cgroup-parent <cgparent>` instructs `docker buildx` to create or use an existing buildx context and set the container cgroup parent for all containers in that context to the specified `cgparent`. This allows for better isolation of resource usage among different builds or projects.'
        compress: '[AI] `docker buildx` is a Docker extension that enables building containers using multiple buildx drivers for extended features like build caches and parallel builds. The command `docker buildx build --compress` triggers the "compress" builder driver during the container build process, which compresses the final container image using gzip or other compression methods to reduce its size without losing data, thus saving storage and bandwidth when transferring or pushing the image.'
        cpu-period: |-
            [AI] The `docker buildx` command with the `--cpu-period` flag is used to control the CPU quota for a multi-stage Docker buildx build. This means that you can limit the amount of CPU resources consumed by the build process to prevent interference with other running tasks on your system.

            The `--cpu-period` option sets the time duration (in nanoseconds) for which the container can use 100% of a single CPU core. For example, `--cpu-period=10000000` would allow the container to use 100% CPU for 10 milliseconds before being interrupted, and this cycle would repeat.

            By default, Docker does not apply any CPU limits during the build process, so specifying a `--cpu-period` value can help ensure that other important tasks on your system have sufficient resources.
        cpu-quota: '[AI] `docker buildx` is a Docker extension that enables building containers using multiple nodes or workers in a cluster. The command `docker-buildx build --cpu-quota <quota>` specifies a CPU quota for the container build process running on the worker nodes. This option ensures that each worker node does not exceed the specified CPU usage while performing container builds, helping manage resources efficiently within the build cluster.'
        cpu-shares: '[AI] `docker buildx` is a Docker extension that enables multi-context builds, allowing you to define, create, and switch between multiple build environments. The command `docker buildx build --cpu-shares` is used to initiate a build process with specific CPU shares allocation for the containers running during the build process. CPU shares specify the proportion of available system resources a container can use compared to other containers or the host itself. By including this flag, you can control resource consumption during the build process and ensure that important builds do not get starved of resources while less critical builds are being run concurrently.'
        cpuset-cpus: '[AI] The `docker buildx` command with the `--cpuset-cpus` option is used to constrain which CPUs a Docker buildx build process can use. This flag takes a comma-separated list of CPU socket or core numbers, allowing for fine-grained control over which resources are allocated to the containerized application build. By specifying `--cpuset-cpus`, you can ensure that critical builds run on dedicated hardware and minimize contention with other resource-intensive processes.'
        cpuset-mems: |-
            [AI] `docker buildx` is a Docker extension that enables building and distributing Docker images using multiple nodes or cloud services. The command `docker buildx build --cpuset-mems` is used to control which CPUs and memory nodes can be used during the image build process.

            The option `--cpuset-mems` specifies a comma-separated list of memory nodes that should be used for the build. CPUs are allocated automatically based on available resources, but this flag allows you to limit the amount of memory each node can use during the build process. This can help ensure that critical system resources remain available while the build is running and prevent potential performance issues or out-of-memory errors.
        file: '[AI] `docker buildx` is a Docker extension for building and producing production-ready images using multiple buildx contexts, each with its own unique set of buildx plugins and Dockerfiles. The command `docker buildx build --file <Dockerfile_path>` triggers a build using the specified `Dockerfile` located at `<Dockerfile_path>`, within an existing buildx context. This command doesn''t explicitly mention which context to use, so it builds using the active or default context. The output of this command is a production-ready image that can be further tagged and pushed to a registry for sharing with other developers or teams.'
        force-rm: '[AI] `docker buildx` is a Docker extension that enables builds to use multiple nodes or clouds with different operating systems and architectures, enabling you to build multi-arch images. The command `docker buildx build --force-rm` is used to trigger a new build using the `buildx` tool. The `--force-rm` flag indicates that after the container building process is complete, all containers created during the build should be automatically removed (i.e., their images are saved but the containers are deleted). This can help keep your system clean and reduce unnecessary resource usage.'
        iidfile: '[AI] `docker buildx` is a feature in Docker that enables building and producing images using multiple buildx contexts, each with its own separate set of build caches and build artifacts. The `--iidfile` flag is used to specify a file where the image digest (ID) will be saved after the build process is completed. This can be useful when automating builds or when you want to ensure that you''re using a specific image digest in your deployment pipeline.'
        isolation: |-
            [AI] `docker buildx` is a Docker extension that enables building container images using multiple buildx drivers and platforms in a single build. The `--isolation` option specifies the isolation mode for the build process.

            There are two available isolation modes: `default` (using the same kernel and init system as the host) and `docker` (using a lightweight container as the build environment). The `--isolation docker` flag instructs `docker buildx` to use a Docker container as the build environment for the image construction process, providing an additional layer of security and isolation.
        label: '[AI] `docker buildx` is a Docker extension for building and producing production-ready images using multiple buildx contexts. The `--label` option sets metadata labels on the resulting Docker image. It allows you to assign key-value pairs as labels, providing additional information about the image for cataloging or filtering purposes. For example, `--label version=1.0.0 --label maintainer="John Doe <john.doe@example.com>"` sets two custom labels on the built image.'
        load: '[AI] `docker buildx` is a Docker extension for building containers from multiple sources, including multiple contexts, multiple Dockerfiles in a single build and caching intermediate results between builds. The command `docker buildx build --load` loads an existing build graph or cache into the current context for further manipulation or to continue building. This allows for resuming previously interrupted builds or for sharing build graphs across teams or projects.'
        memory: '[AI] `docker buildx` is a Docker extension that enables builds to use multiple nodes or workers for parallel and distributed building. The command `docker buildx build` initiates a build process using `buildx`. The option `--memory` limits the amount of memory each worker can utilize during the build process. It takes an integer value followed by the memory unit, such as `--memory 2g` for setting a limit of 2 gigabytes. This can help prevent workers from consuming excessive resources during the build.'
        memory-swap: '[AI] `docker buildx` is a Docker extension that enables building container images using multiple build nodes, which can be local or remote. The command `docker buildx build` with the `--memory-swap` flag instructs `buildx` to allocate additional swap memory during the build process. This flag allows larger builds that might otherwise fail due to insufficient memory by using the specified amount of swap memory in addition to the available RAM. For example, `docker buildx build --memory-swap 5g` sets the limit for both RAM and swap space to 5 gigabytes for the build process.'
        metadata-file: '[AI] `docker buildx` is an extension of Docker Buildx, which enables building containers from multiple sources including files, Git repositories, and Dockerfiles in other Docker registries. The `--metadata-file` flag specifies a file to store custom metadata for the resulting image during the build process. This metadata can include information like author, description, and license, and can be used to add additional context or information about the image that is not part of its contents.'
        network: |-
            [AI] `docker buildx` is a Docker extension that enables building containers from multiple sources, including remote repositories and files spread across different directories or machines. The `--network` option specifies which network mode to use when building the image.

            Here are some common network modes:

            * **bridge**: Build in a private network with Docker, accessible only to the build context.
            * **host**: Build without using a network interface, containers are run directly on the host machine.
            * **none**: Build without starting any containers; this is useful when you want to use custom Dockerfiles or build caches.

            The command `docker-buildx build --network my_custom_network` instructs `docker buildx` to create and use a custom network named "my\_custom\_network" while building the image. This can be useful when you need to build an image that interacts with other services running on the same Docker daemon or swarm.
        no-cache: '[AI] `docker buildx` is a Docker extension for building containers using multiple buildx workers, which can run on different machines and use parallelism to improve build times. The command `docker buildx build --no-cache` instructs `buildx` to start a new build without using any previously cached build artifacts (images or other components). This option can be useful when you want to ensure that the latest sources are used for building, and that no previously built intermediate images are reused. The `--no-cache` flag overrides the default caching behavior of Docker.'
        no-cache-filter: '[AI] `docker buildx` is a Docker extension for building images using multiple buildx contexts, which can include different buildx runtimes and caches. The command `docker buildx build --no-cache-filter` instructs `docker buildx` to start a new build without using any previously cached results. In other words, it forces a clean build by skipping any cached intermediates or artifacts from previous builds, ensuring that all the build steps are executed from scratch. This can be useful in cases where you want to ensure reproducibility of the build or when dealing with complex builds that may have dependency issues with cached intermediates.'
        output: '[AI] `docker buildx` is a Docker extension that enables building images using multiple buildx drivers, including remote builders. The `--output` option specifies where to save the built image(s) once they''re completed. It accepts a file or a URL as an argument, such as a Docker registry or a local directory. For example, `--output type=docker,dest=myregistry:5000/mynamespace/image` would push the image to the given registry upon build completion.'
        platform: '[AI] `docker buildx` is a Docker extension for building and producing multi-arch images using multiple buildx workers. The `--platform` option specifies which platforms or architectures to target during the build process. For example, `docker buildx build --platform linux/amd64,linux/arm64 .` would build an image that runs on both x86\_64 (AMD64) and ARMv7 (AArch64) architectures. This command does not actually create or run a Docker container; it only builds the images for specified platforms.'
        progress: '[AI] `docker buildx` is a Docker extension that enables building and testing multi-context Dockerfiles using multiple buildx buildslaves (workers). The command `docker buildx build --progress` is used to initiate a new build with the progress option enabled. This means that you will see real-time build progress updates in your terminal as the buildslave processes the Dockerfile and builds the image. It does not specify which context or project to build, so you would need to provide that information separately (for example, by using `--platform` or `--push` options with a specific context name).'
        pull: |-
            [AI] `docker buildx` is a component of Docker Desktop that enables building Docker images using multiple buildx drivers. The command `docker buildx build --pull` does the following:

            1. It triggers a new build with `docker buildx`, which can utilize multiple build nodes for parallel builds and other advanced features.
            2. The `--pull` option instructs Docker to pull any missing base images from remote registries before starting the build process. This ensures that all required base images are available locally during the build, avoiding potential errors due to missing dependencies.
        push: |-
            [AI] `docker buildx` is a Docker extension that enables building and pushing images using multiple buildx drivers, including `docker-container`, `docker-compile`, and `docker-buildx-dockerfile`. The command `docker buildx build --push` instructs Docker to:

            1. Use `buildx` to build one or more Docker images based on a `Dockerfile`.
            2. Once built, `buildx` automatically pushes the images to a registry specified in the `docker login` configuration or through the use of the `--push-image-as-buildx` flag and an authenticated TLS client certificate.
            3. If multiple drivers are used, Docker will build each image in parallel using different drivers. This can improve build performance on multi-architecture images by utilizing various backends like container runtimes or compilers.
        quiet: '[AI] `docker buildx` is a Docker extension that enables building images using multiple buildx drivers, each with its own specific builder. The `--quiet` flag is used to suppress most of the output during the build process and only display the final result, such as the image name, status, and any errors if they occur. This can be useful when running automated builds or when wanting a clean output in scripts or logs.'
        rm: '[AI] `docker buildx` is a Docker extension for building containers using multiple buildx contexts, each with its own set of build caches and Dockerfiles. The command `docker buildx build --rm <context-name>` tells Docker to use the specified context for building an image or multiple images from the given Dockerfiles. The `--rm` flag indicates that the containers created during the build process should be automatically removed once they are no longer needed. In summary, this command builds and removes containers within a specific context using `docker buildx`.'
        secret: '[AI] `docker buildx` is a Docker extension that enables building and producing production-ready images using multiple build nodes in parallel, along with other advanced features. The command `docker-buildx build --secret` creates or manages a secret used to encrypt sensitive build information, such as Dockerfile source code or environment variables, before sharing it between build nodes for secure multi-node building. This helps maintain the confidentiality of your build data during the remote construction process.'
        security-opt: '[AI] `docker buildx` is a command-line tool from Docker for building and producing artifacts using multiple buildx contexts or build nodes, which can help improve build performance and resource utilization. The option `--security-opt` is used to apply security policies during the build process. It allows specifying different Linux capabilities or seccomp profiles to restrict the actions that the container running during the build can perform. This can enhance the security of the build environment by limiting the potential attack surface. For instance, `--security-opt label=app:myapp:rov --security-opt seccomp=docker/default` can be used to apply a read-only file system label and the default seccomp profile to the container during the build process.'
        shm-size: |-
            [AI] `docker buildx` is a Docker extension that enables building containers from multiple sources, including multiple contexts and remote repositories. The command `docker buildx build` is used to initiate a build process using `buildx`.

            The option `--shm-size` sets the size of the shared memory (SHM) allocation for Docker build workers. It allows specifying an exact size in bytes or using predefined sizes like "small", "medium" or "large". For instance, `--shm-size large` sets a larger SHM allocation for the build process to run efficiently when dealing with large builds.
        squash: '[AI] `docker buildx` is a Docker extension that enables builds to use multiple contexts and buildx-specific builds types like "squash." The command `docker buildx build --squash <context> <image:tag|@Dockerfile>` creates a new image by building an existing image or using a Dockerfile, then running `docker commit` with the `--ignore-history` flag to squash all the intermediate containers into a single container in the final image. This results in a smaller image size as it eliminates redundant layers in the build history.'
        ssh: '[AI] `docker buildx` is an extension of Docker Buildx, a powerful multi-context builder for Docker. The `--ssh` flag is used to specify an SSH key or config file when building an image from a remote source, such as a Git repository. This allows you to authenticate and access the required codebase for your Dockerfile without having to manually copy it to your local machine first. In summary, `docker-buildx build --ssh` is used to build a Docker image using a remote source (like a Git repo) and authenticating via SSH.'
        tag: '[AI] `docker buildx` is a Docker extension that enables building container images using multiple buildx drivers, including remote builders. The command `docker buildx build --tag <image:tag>` instructs `docker buildx` to use the specified builder (implicitly the default one if no builder is provided), and then builds a new image with the given tag `<image:tag>`. This command does not specify a context or Dockerfile location, assuming they are in the current working directory. Once built, the new image can be used to run containers or further customize using additional Docker commands.'
        target: '[AI] `docker buildx` is a Docker extension that enables building Docker images using multiple buildx backends like buildsKitD, qemu, and others. The `--target` option specifies which builder to use for the build process. For instance, `docker-buildx build --target=qemu-user-static .` tells Docker to build the image using the qemu backend. This can be useful when you need to build images for different architectures or environments.'
        ulimit: |-
            [AI] `docker buildx` is a Docker extension that enables building Docker images using multiple buildx drivers, including `docker-container`, `docker-machine`, and `docker-buildx-dind`. The command `docker-buildx build --ulimit` is used to set resource limits for the build process.

            The `--ulimit` option allows you to specify resource limitations (CPU, memory, or I/O) for a Docker buildx build. For example, `--ulimit cpu=4,mem.limit=8G` sets CPU and memory limits for the build. This can be useful when building large or complex images, as it prevents the build process from consuming excessive resources on the host machine.
