# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: analyze
description: Analyze toit files
flags:
    --sdk=: the default SDK path to use
    --toitc=: the default toit compiler to use
    -v, --verbose: ""
documentation:
    command: '[AI] `toit lsp analyze` is a command used in Toit, a modern object-oriented programming language. This command invokes the Language Server Protocol (LSP) analysis feature. LSP is a standardized way for editors and IDEs to communicate with external code intelligence engines. The `analyze` function call requests the language server to perform various analyses on the current codebase, such as type checking, error reporting, and autocompletion suggestions. This helps developers write code more effectively by providing real-time feedback and insights.'
    flag:
        sdk: '[AI] `toit lsp analyze --sdk` is a command used in the Toit programming language''s LSP (Language Server Protocol) implementation. This command specifically asks for an analysis of the code using the specified SDK (Software Development Kit). The SDK provides the necessary tools and libraries for compiling and checking the code, enabling diagnostics, autocompletion, and other features in an IDE or text editor.'
        toitc: '[AI] The `toit lsp analyze --toitc` command is used in Toit programming language development environment. It starts the Language Server Protocol (LSP) analysis for a Toit project using the Toit compiler (`toitc`). This operation provides enhanced editing features, such as code completion, error checking, and formatting suggestions, within an Integrated Development Environment (IDE) or text editor that supports LSP. The result is a more efficient and productive development experience.'
        verbose: '[AI] `toit lsp analyze --verbose` is a command used in the Toit programming language''s Language Server Protocol (LSP) implementation. The `analyze` subcommand requests the LSP to perform various code analyses, such as type checking and error reporting. The `--verbose` flag increases the amount of output produced during analysis, providing more detailed information about each step and potential issues found in the code.'
