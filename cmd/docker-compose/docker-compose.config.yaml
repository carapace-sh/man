# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: config [OPTIONS] [SERVICE...]
aliases:
    - convert
description: Parse, resolve and render compose file in canonical format
flags:
    --format=: 'Format the output. Values: [yaml | json]'
    --hash=: Print the service config hash, one per line.
    --images: Print the image names, one per line.
    --no-consistency: 'Don''t check model consistency - warning: may produce invalid Compose output'
    --no-interpolate: Don't interpolate environment variables.
    --no-normalize: Don't normalize compose model.
    --no-path-resolution: Don't resolve file paths.
    --profiles: Print the profile names, one per line.
    --resolve-image-digests: Pin image tags to digests.
    --services: Print the service names, one per line.
    --volumes: Print the volume names, one per line.
    -o, --output=: Save to file (default to stdout)
    -q, --quiet: Only validate the configuration, don't print anything.
documentation:
    command: '[AI] `docker-compose config` is a command used with Docker Compose files to check and display the configuration of services defined in the file. It does not make or update any running containers, but instead provides a way to validate the syntax and structure of the Compose file before using `docker-compose up`. This can help prevent potential errors when deploying applications with Docker Compose.'
    flag:
        format: '[AI] `docker-compose config --format` is a command used with Docker Compose files to generate output in various formats, such as YAML or HCL (Hashicorp Configuration Language). The `--format` option specifies the desired format for the output. This can be useful for programmatically accessing the configuration data without running containers, or for converting between different file formats.'
        hash: '[AI] `docker-compose`''s `config --hash` command generates a hash value for the current Compose file, which can be used to check if the file content has changed since the last time the hash was obtained. This can be useful when integrating Compose files into a version control system or continuous integration pipeline to ensure that changes in the file trigger a new build or deployment.'
        images: '[AI] The `docker-compose config --images` command is used to display the current images that are specified in the `docker-compose.yml` file, without building or starting any containers. It shows the image names and their corresponding Docker tags or digests, helping users to verify if they have the correct images before running the application with Docker Compose.'
        no-consistency: '[AI] The `docker-compose config --no-consistency` command is used to display the current configuration of a Docker Compose file without checking for consistency. This means that even if there are errors or inconsistencies in the configuration, Docker Compose will still attempt to show the state of each service as defined in the YAML file. The `--no-consistency` flag overrides the default behavior of Docker Compose, which is to exit with an error message when it detects inconsistencies or invalid configurations. This command can be helpful for troubleshooting issues with complex Compose files or for comparing the current state of a configuration file against its desired state.'
        no-interpolate: '[AI] `docker-compose config --no-interpolate` is a command used in Docker Compose to generate the raw YAML configuration files based on the current service definitions without interpolating any variable values. This means that when you run this command, you will get the exact YAML representation of your services and configurations as they are defined, with no variables expanded or replaced by their values. It can be useful for manually editing the Compose files or for reviewing the structure and format of the configuration.'
        no-normalize: '[AI] `docker-compose config --no-normalize` is a command used with Docker Compose files to display the raw configuration without applying any normalization or validation rules. This means that any syntax errors, duplications, or inconsistencies in the YAML file will not be automatically corrected. It''s useful when you want to manually inspect or modify complex configurations before applying them to your environment.'
        no-path-resolution: '[AI] The `docker-compose config --no-path-resolution` command is used with Docker Compose to load and display the configuration of a specified project, but without resolving any path directives in the file. This means that any `build`, `context`, or `volume` directives will be shown as absolute paths relative to the location of the `docker-compose.yml` file, rather than being resolved to their actual file or directory locations. This can be helpful when troubleshooting configuration issues or working with multiple projects that share similar configuration structures.'
        output: '[AI] `docker-compose config --output` is a command used with Docker Compose to generate the raw configuration for services defined in a `docker-compose.yml` file. The `--output` option specifies the format of the output, which can be `yaml` (the default), `json`, or `none` (no output on terminal). This command does not make or update any containers; it only generates the configuration files that define how those services would be configured if they were to be run.'
        profiles: '[AI] `docker-compose config --profiles` is a command used in Docker Compose to manage and select different configuration profiles for a multi-stage or complex application. Profiles allow you to define different sets of Compose files and override specific configurations for each one, without having to duplicate the entire Compose file. This can be useful when dealing with various environments (e.g., development, staging, production) or different service versions. By using profiles, you can easily switch between them while maintaining a consistent application structure.'
        quiet: '[AI] `docker-compose config --quiet` is a command used with Docker Compose files to display only the names and changes made during a configuration check. This can be useful for quickly identifying which services or configurations have been modified without displaying all the details of each service''s configuration.'
        resolve-image-digests: '[AI] `docker-compose config --resolve-image-digests` is a command used with Docker Compose to update the image hashes in your docker-compose.yml file based on the current images in your local Docker environment. When you run this command, Docker Compose will check for updates to the specified images and write their corresponding digital signatures (image digests) into your compose file, ensuring that your application will use the most up-to-date versions when it''s built or started.'
        services: '[AI] `docker-compose config --services` is a command used with Docker Compose to display the configuration of one or more services defined in a Compose file. When you run this command without any service name specified, it will show the configuration for all services. However, if you provide one or more service names as arguments, it will only display the configuration for those specific services. This can be useful when you want to double-check the settings of a particular service or troubleshoot issues related to its configuration.'
        volumes: '[AI] `docker-compose config --volumes` is a command used with Docker Compose files to display volumes configuration. This command shows the currently defined volumes for each service in the Compose file, including external volumes mounted from the host system and named volumes used internally by containers. It helps in understanding how data is persisted between container restarts and ensures proper data management within the application.'
