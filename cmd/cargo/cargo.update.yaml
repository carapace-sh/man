# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update
description: Update dependencies as recorded in the local lock file
group: manifest
flags:
    --aggressive: Force updating all dependencies of SPEC as well when used with -p
    --dry-run: Don't actually write the lockfile
    --manifest-path=: Path to Cargo.toml
    --precise=: Update a single dependency to exactly PRECISE when used with -p
    -h, --help: Print help
    -p, --package*=: Package to update
    -q, --quiet: Do not print cargo log messages
    -w, --workspace: Only update the workspace packages
documentation:
    command: '[AI] `cargo update` is a command used in Rust programming language''s package manager, Cargo. It scans the project''s `Cargo.toml` file for dependencies with available updates and downloads their latest versions. This helps keep your project up-to-date with the latest libraries and their improvements or fixes.'
    flag:
        aggressive: '[AI] `cargo update --aggressive` is a command used in Rust programming projects managed with Cargo build system. This command performs an aggressive update of all dependencies listed in the project''s `Cargo.toml` file. It checks for newer versions, downloads and installs them if available, and also updates local dependency caches. It may force you to recompile your project due to dependency version changes. In essence, it ensures that your project uses the latest stable dependencies, maximizing compatibility and potential improvements.'
        dry-run: '[AI] `cargo update --dry-run` is a command used in Rust programming language projects managed with Cargo build system. This command performs a simulation of the updating process without actually making any changes to the dependencies listed in the `Cargo.toml` file. It shows what would be updated, and helps prevent unintended consequences or conflicts before running the actual update command.'
        help: '[AI] `cargo update --help` is a command used in Rust programming language''s package manager, Cargo. This command displays detailed help information about the `cargo update` sub-command. It is used to fetch and install the latest version of dependencies mentioned in the project''s `Cargo.toml` file. Running this command provides details on various options and usage related to the `cargo update` command, such as --background and --offline flags, among others.'
        manifest-path: '[AI] `cargo update --manifest-path` is a command used in Rust programming language''s package manager, Cargo. This command updates the dependencies listed in the given manifest file (specified by `--manifest-path`) to their latest versions without changing the current workspace''s code or lockfile. The updated dependency versions are recorded in the new lockfile that is generated automatically.'
        package: '[AI] `cargo update --package` is a command used in Rust programming language''s build tool, Cargo. This command triggers an automatic update of the specified package''s dependencies to their latest available versions within the project''s Cargo.toml file. By default, it updates all packages; using `--package <package-name>` limits the update to only that package.'
        precise: '[AI] `cargo update --precise` is a command used in Rust programming language''s Cargo build tool. This command updates the dependencies mentioned in the project''s `Cargo.toml` file to their exact specified versions, ensuring consistency and reproducibility across builds.'
        quiet: '[AI] `cargo update --quiet` is a command used in Rust programming language''s build tool, Cargo. It updates all outdated dependencies in your project to their latest versions without displaying any informational messages or progress bars during the process. This can be useful for automation and continuous integration workflows where silent updates are desired.'
        workspace: '[AI] `cargo update --workspace` is a command used in Rust programming language''s build system, Cargo. This command updates the dependencies of all projects under the current workspace to their latest versions. The `--workspace` flag tells Cargo to consider the lockfile from the workspace metadata file, allowing dependency updates across multiple projects within the workspace.'
