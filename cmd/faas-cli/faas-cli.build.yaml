# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
description: Builds OpenFaaS function containers
flags:
    --build-label*=: Add a label for Docker image (LABEL=VALUE)
    --copy-extra*=: Extra paths that will be copied into the function build context
    --disable-stack-pull: Disables the template configuration in the stack.yml
    --envsubst: Substitute environment variables in stack.yml file
    --handler=: Directory with handler for function, e.g. handler.js
    --image=: Docker image name to build
    --lang=: Programming language template
    --name=: Name of the deployed function
    --no-cache: Do not use Docker's build cache
    --parallel=: Build in parallel to depth specified.
    --quiet: Perform a quiet build, without showing output from Docker
    --shrinkwrap: Just write files to ./build/ folder for shrink-wrapping
    --squash: 'Use Docker''s squash flag for smaller images [experimental] '
    --tag=: Override latest tag on function Docker image, accepts 'latest', 'sha', 'branch', or 'describe'
    -b, --build-arg*=: Add a build-arg for Docker (KEY=VALUE)
    -o, --build-option*=: Set a build option, e.g. dev
documentation:
    command: '[AI] `faas-cli build` is a command used in FaaS (Function-as-a-Service) development with the Faas-Netesix CLI tool. It builds and packages your serverless functions written in various programming languages, such as Node.js, Go, or Python, along with their dependencies into deployable artifacts or containers ready for deployment on a FaaS platform like OpenFaas or OpenWhisk.'
    flag:
        build-arg: '[AI] `faas-cli build --build-arg` is a command used with the FaaS (Function-as-a-Service) CLI tool to pass custom build-time arguments to the Docker image build process. The `--build-arg` option sets the key-value pair of an environment variable that will be available inside the container built from the image. For example, `faas-cli build --build-arg MY_ARG=my_value .` will create a new Docker image with an environment variable named `MY_ARG` set to `my_value`. These arguments can be used during the build process for setting up dependencies or configuring the function.'
        build-label: |-
            [AI] The `faas-cli build --build-label` command is used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command builds and packages a Faas function using the provided code, but with an added feature: it sets or updates a custom label for the built image.

            The `--build-label` flag takes a key-value pair as its argument to set the label. For instance, `--build-label app=myapp,version=1.0.0`, would assign the labels "app=myapp" and "version=1.0.0" to the built function image. This can be helpful for better organization and management of your functions within a container orchestration system like Kubernetes.
        build-option: |-
            [AI] `faas-cli build --build-option` is a command used in the FaaS (Function-as-a-Service) toolchain, specifically with the FaaS CLI (Command Line Interface). The `build` subcommand initiates the process of building a Faas function, preparing it for deployment.

            The `--build-option` flag is an additional parameter that can be passed to customize the build process. It allows users to specify specific options or settings for the build, depending on the underlying technology stack of their FaaS function (e.g., Node.js, Go, Python, etc.).

            For instance, in a Node.js function, you may pass `--build-option nodejs=12` to set the Node.js version used during the build process. Similarly, in a Go function, you might use `--build-option go:buildflags=-mod=vendor` for setting specific build flags for the Go compiler.

            In summary, `faas-cli build --build-option` is an essential command that helps users customize the FaaS function building process by providing extra options and settings through the `--build-option` flag.
        copy-extra: '[AI] `faas-cli build --copy-extra` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This option instructs the build process to copy additional files or directories, besides the function code and its dependencies, to the output artifact when building a Faas function. These extra files can include configuration files, static assets, or other resources that are necessary for the function''s execution in the target FaaS platform.'
        disable-stack-pull: '[AI] The `faas-cli build --disable-stack-pull` command is used in the FaaS (Function-as-a-Service) context with the FaaS CLI tool. It disables the pulling of Stack files during the build process. Stacks are collections of functions, APIs, and infrastructure resources used to deploy and manage multiple functions as a single unit. By disabling stack pull, only the function code will be built and packaged without fetching any associated stacks or their dependencies. This can save time and network bandwidth in cases where the same function image is being built multiple times with no changes to the stack.'
        envsubst: '[AI] `faas-cli build --envsubst` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command builds and packages a Faas function using its source code and Dockerfile, replacing placeholders in environment variables specified in `.env` files with their actual values. The resulting package can then be deployed to a FaaS platform like OpenFaas or CloudEvents. It automates the process of preparing an environment-specific container image for your function.'
        handler: '[AI] `faas-cli build --handler` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command builds and packages your function code along with its dependencies into a deployable ZIP or Docker image. The `--handler` option specifies the handler (entry point) of your function, which is the file containing the main logic that will be executed when the function is triggered.'
        image: '[AI] `faas-cli build --image` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command triggers the building of a new Docker image for your function code, using the specified image name as the output. The resulting image can then be deployed to a FaaS provider like AWS Lambda or OpenFaas.'
        lang: '[AI] `faas-cli build --lang` is a command used in Function-as-a-Service (FaaS) development with the FaaS CLI tool. This command initiates the build process of an Faas function, specifying the programming language used in the function''s source code using the `--lang` option. For example, `faas-cli build --lang nodejs` is used to build a Node.js FaaS function. The resulting built artifact is then ready for deployment on a FaaS platform such as OpenFaas or AWS Lambda.'
        name: '[AI] `faas-cli build --name` is a command used in Faas (Function as a Service) technology with the FaaS CLI (Command Line Interface) tool. This command is responsible for building a new function image using the provided Dockerfile and assigning it a given name with the `--name` flag. The resulting image can then be deployed to a Faas server or platform for execution as needed.'
        no-cache: '[AI] `faas-cli build --no-cache` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command instructs the Faas-cli to build Docker images for the specified functions without using any previously cached images. The `--no-cache` flag ensures that all dependencies are re-pulled and rebuilt from scratch each time, which can be useful when there have been updates to the dependencies or when working on a new machine.'
        parallel: '[AI] `faas-cli build --parallel` is a command used in the FaaS (Function-as-a-Service) development with Faas-cli, an open-source toolchain for building and deploying serverless functions. This specific command instructs Faas-cli to build multiple functions in parallel using available system resources, improving the overall build time efficiency.'
        quiet: '[AI] `faas-cli build --quiet` is a command used in Faas (Function as a Service) technology to build Docker containers for FaaS functions with minimum output. The `--quiet` flag suppresses the standard output and error messages during the container building process, making it suitable for use in automated or headless environments where detailed logs may not be necessary.'
        shrinkwrap: |-
            [AI] `faas-cli build --shrinkwrap` is a command used in the FaaS (Function-as-a-Service) development with Faas-netes or other similar tools. The command's primary purpose is to optimize the size of Docker images containing FaaS functions by merging and deduplicating common dependencies and libraries among functions.

            The `--shrinkwrap` flag instructs the Faaas-cli to create a `Dockerfile.shrink` in the output directory, which contains an optimized multi-stage Docker build definition based on the input directory's contents. Using this optimized Dockerfile, you can rebuild the image and achieve a smaller size than before.
        squash: '[AI] `faas-cli build --squash` is a command used in Function-as-a-Service (FaaS) development with the FaaS CLI tool. This command optimizes and builds Docker images for FaaS functions by merging all the function containers into a single image, thereby reducing image size and improving deployment efficiency. It achieves this by applying the `--squash` flag during image building, which flattens the final image to have only one layer.'
        tag: '[AI] `faas-cli build --tag` is a command used in Faas (Function as a Service) technology to build Docker containers for FaaS functions. The `--tag` option allows you to specify a tag or label for the container image being built. This helps manage different versions of your function and keeps your environment organized. Once built, you can deploy these images using a Faas platform like OpenFaas or AWS Lambda.'
