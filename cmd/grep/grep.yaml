# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: grep
description: print lines that match patterns
flags:
    --binary-files=: assume that binary files are TYPE;
    --color?: ""
    --colour?: use markers to highlight the matching strings;
    --exclude-dir=: skip directories that match GLOB
    --exclude-from=: skip files that match any file pattern from FILE
    --exclude=: skip files that match GLOB
    --help: display this help text and exit
    --include=: search only files that match GLOB (a file pattern)
    --label=: use LABEL as the standard input file name prefix
    --line-buffered: flush output on every line
    --no-ignore-case: do not ignore case distinctions (default)
    --silent: suppress all normal output
    -A, --after-context=: print NUM lines of trailing context
    -B, --before-context=: print NUM lines of leading context
    -C, --context=: print NUM lines of output context
    -D, --devices=: how to handle devices, FIFOs and sockets;
    -E, --extended-regexp: PATTERNS are extended regular expressions
    -F, --fixed-strings: PATTERNS are strings
    -G, --basic-regexp: PATTERNS are basic regular expressions
    -H, --with-filename: print file name with output lines
    -I: equivalent to --binary-files=without-match
    -L, --files-without-match: print only names of FILEs with no selected lines
    -P, --perl-regexp: PATTERNS are Perl regular expressions
    -R, --dereference-recursive: likewise, but follow all symlinks
    -T, --initial-tab: make tabs line up (if needed)
    -U, --binary: do not strip CR characters at EOL (MSDOS/Windows)
    -V, --version: display version information and exit
    -Z, --null: print 0 byte after FILE name
    -a, --text: equivalent to --binary-files=text
    -b, --byte-offset: print the byte offset with output lines
    -c, --count: print only a count of selected lines per FILE
    -d, --directories=: how to handle directories;
    -e, --regexp=: use PATTERNS for matching
    -f, --file=: take PATTERNS from FILE
    -h, --no-filename: suppress the file name prefix on output
    -i, --ignore-case: ignore case distinctions in patterns and data
    -l, --files-with-matches: print only names of FILEs with selected lines
    -m, --max-count=: stop after NUM selected lines
    -n, --line-number: print line number with output lines
    -o, --only-matching: show only nonempty parts of lines that match
    -q, --quiet: suppress all normal output
    -r, --recursive: like --directories=recurse
    -s, --no-messages: suppress error messages
    -v, --invert-match: select non-matching lines
    -w, --word-regexp: match only whole words
    -x, --line-regexp: match only whole lines
    -z, --null-data: a data line ends in 0 byte, not newline
documentation:
    command: '[AI] `grep` is a powerful text searching tool in Unix-based systems. It searches for patterns or regular expressions in files and displays matching lines. Its name is an acronym for Global Regular Expression Print. Users can use it with various options to modify search behavior, such as case-sensitivity, recursive search through subdirectories, or displaying line numbers. The basic syntax is `grep ''pattern'' file` or `grep ''pattern'' file1 file2 ...`.'
    flag:
        I: '[AI] The `grep` command in Unix-based systems is used for searching text files for specific patterns or regular expressions. The option `-I` (case insensitive) instructs `grep` to perform a search ignoring the case of characters, meaning it will match both lower and upper-case versions of the search term. For example, `grep -I "pattern" file.txt` will find lines in `file.txt` containing "pattern" or "Pattern".'
        after-context: '[AI] The `--after-context` option in `grep`, a popular text searching tool, is used to display a specified number of lines after matching patterns in the output. It helps in understanding the context of the match by providing the surrounding non-matching context from the file being searched. This option is particularly useful when dealing with larger data sets or files where the match may not be clear without additional context. The default value for the number of lines displayed after a match is 3, but it can be changed using the `n` argument where `n` is the desired number of lines to display.'
        basic-regexp: '[AI] The `grep` command is a text searching tool in Unix and Unix-like operating systems. The `--basic-regexp` option is an argument that modifies the regular expression search in `grep`. It specifies that only basic regular expressions, also known as POSIX regular expressions, should be used for pattern matching. These are simpler and less powerful than extended or Perl-compatible regular expressions, but they are widely supported across various systems. Basic regexps do not support features like lookahead, lookbehind, backreferences, etc.'
        before-context: '[AI] The `--before-context` option in `grep`, a popular text search tool, displays lines of context before matching lines in the output. Specifically, it shows a user-defined number of lines (default is 2) from the beginning of the file where a match was found. This helps to provide more context when searching for patterns within files.'
        binary: '[AI] The `grep` command with the `--binary` option is used to perform a binary file search for specified patterns without interpreting or processing the content as text. It reads and compares data in binary format, byte by byte, making it suitable for searching within large binary files like executables, compressed files, or hex dumps. By doing so, it increases efficiency and reduces potential false positives that might arise from text-based pattern matching in binary data.'
        binary-files: '[AI] The `--binary-files` option in `grep` is used to only output the names of files that contain binary data and match the search pattern. When a file contains binary data, `grep` may not be able to display the matching lines correctly due to the non-text nature of the data. By using this option, you can identify and handle these files separately.'
        byte-offset: '[AI] `grep` is a command-line utility in Unix and Unix-like operating systems for searching plain-text data sets for lines that match a regular expression. The option `--byte-offset` (or simply `-b`) is used with `grep` to display the byte offsets along with the matching lines. When you run `grep --byte-offset <regex> <file>`, it will output the byte offset of each line in the file that matches the regular expression, preceded by the number of bytes from the start of the file. For instance, if the command is executed on a line starting at byte offset 10 and containing the match, the output will be something like `10: <match>`, where `<match>` represents the matched text.'
        color: '[AI] `grep` is a command-line utility for searching text files for specified patterns. The option `--color` or `-C` enables colored output in the terminal, making it easier to distinguish between different types of matched text, such as matching lines and non-matching lines. It enhances the readability of the search results.'
        colour: '[AI] The `grep` command is a powerful text search tool in Unix-like operating systems. The `--color` (or `-C`) option is used to display matched lines with colors in the output, making it easier to identify which lines contain the searched pattern. This option improves readability and enhances the user experience when dealing with large text files.'
        context: '[AI] `grep` is a command-line utility for searching text files for specific patterns. The `--context` option, also written as `-C`, is used to display a context of lines before and after each matching line. It helps in understanding the context in which the match appears. For example, if you search for the pattern "error" in a log file using `grep --context 3 filename`, it will show three lines before and one line after the matching line. This can be useful for quick troubleshooting and analysis of log files.'
        count: '[AI] The `grep` command is a popular text search utility in Unix-like operating systems. The option `--count` (short form: `-c`) is used with `grep` to display only the number of matching lines instead of the matching lines themselves. For example, `grep -c ''pattern'' filename` will print the number of occurrences of the given pattern in the specified file.'
        dereference-recursive: |-
            [AI] `grep` is a command-line utility in Unix and Unix-like operating systems for searching text files. The options `--dereference` and `--recursive` are used together to perform a recursive file name search with symbolic links followed.

            With `--dereference`, grep will follow the symbolic links (symlinks) as if they were the files they point to, allowing you to search for specific patterns in the actual content of the linked files instead of the symlinks themselves. When used with the `-r` or `--recursive` option, it searches for the pattern recursively in all files and directories within the given path, including those reached by symlinks.

            Therefore, the command `grep --dereference-recursive <pattern> <path>` will search for the specified pattern in all files and their content, following symbolic links recursively.
        devices: |-
            [AI] The `grep` command is a text searching tool in Unix-like operating systems. The option `--devices` (or just `-o /dev`) is not a standard `grep` option, but an extension provided by some implementations like GNU `grep`. It's used to print only the device names of matching files or input streams.

            When you use `grep --devices <pattern> <file>`, it searches for the specified `<pattern>` in the given `<file>`. If a match is found, instead of printing the entire line as usual, it prints just the name of the device associated with the file from which the matching line was read. This can be useful for finding files that match a specific pattern and are located on particular devices or file systems.
        directories: '[AI] The `grep` command with the `--directories` option is used to search for the output of the `find` command or regular expressions in the output of the `find` command that match the given pattern and returns only the directory names. This option filters the output of `find` to show only the directories where a search pattern occurs in the pathnames. It does not search inside directories; it only lists the directories themselves.'
        exclude: '[AI] The `grep` command with the `--exclude` option is used in Unix-based systems for searching files that match a pattern, excluding specific files or directories from the search. The syntax is `grep -rnw --exclude=''PATTERN'' PATH`. Here, ''PATTERN'' specifies the files or directories to exclude, using shell globbing patterns. The search is recursive (-r), follows symlinks (-h), and shows the file names with the matching lines (-n). This option can be useful when you want to search for a pattern in most but not all files within a directory hierarchy.'
        exclude-dir: '[AI] `grep` is a command-line utility for searching text files for specific patterns. The option `--exclude-dir` is used to exclude one or more directories from being searched by `grep`. This means that if you have a search pattern and a list of directories to exclude, `grep` will only search the files inside the remaining directories and not the excluded ones. It''s useful when you want to limit your search scope to specific locations while excluding others.'
        exclude-from: '[AI] `grep` is a powerful text search utility in Unix-like operating systems. The option `--exclude-from=FILE` allows specifying a file containing regular expressions or glob patterns, which will be used as a list of files to exclude from the search. This can be useful when you want to search for a pattern in all files under a directory, but exclude certain ones, such as logs or binary files. The excluded files are skipped during the search process, making the results more focused on the desired matches.'
        extended-regexp: |-
            [AI] `grep` is a command-line utility for searching text files or input streams for patterns. The option `--extended-regexp` (or just `-E`) is used with `grep` to enable the use of extended regular expressions.

            Extended regular expressions offer more advanced and complex pattern matching capabilities than basic regular expressions, including:

            1. Multiple patterns can be specified using the `|` (OR) operator.
            2. Parentheses can be used for grouping and creating capturing subpatterns.
            3. The use of lookahead and lookbehind assertions to match patterns based on what comes before or after a pattern, respectively.
            4. Support for backreferences to previously defined capture groups.

            By using the `--extended-regexp` option, you can take advantage of these more advanced regular expression features when using the `grep` command.
        file: '[AI] The `grep` command is a powerful text search tool in Unix-based systems. The option `--files-with-matches=<FILE>` or simply `-lf` is used with `grep`. This option instructs `grep` to produce only a list of the file names that match the given pattern instead of displaying the actual matching lines. So, `grep --file <pattern> <directory>` will search for the given pattern in all files under the specified directory and print only the names of the files containing matches.'
        files-with-matches: '[AI] `grep --files-with-matches` is a command used in Unix-based systems for searching files with specific patterns using the grep utility. The `--files-with-matches` option causes grep to print only the names of files that contain the searched pattern, instead of displaying the matching lines inside the files. This can be useful when you want to quickly find out which files in a directory hierarchy contain a particular search string without having to manually inspect each file.'
        files-without-match: '[AI] `grep --files-without-match` is a command used in Unix-based systems for searching files with the `grep` utility. This specific option lists file names that do not contain a given pattern when searched within the files or directories specified. It takes a regular expression as an argument and searches recursively through the specified directories by default. If no file path is provided, it searches in the current directory. The output displays only the file names without any matching patterns.'
        fixed-strings: '[AI] `grep` is a command-line utility tool in Unix and Unix-like operating systems used for searching text files for patterns. The `--fixed-strings` option (or simply `-F`) instructs `grep` to search for fixed strings instead of regular expressions. In other words, it looks for exact matches of the specified strings in each line of the input file(s).'
        help: |-
            [AI] `grep` is a powerful text search utility in Unix-like operating systems. The command `grep --help` displays the help information for the grep utility, providing an overview of its functionality and various options that can be used to customize the search process.

            The output includes:

            1. A brief description of what grep does, which is searching plain-text data sets for lines that match a regular expression.
            2. Usage instructions on how to use grep in the command line, including the base syntax (`grep [OPTIONS] PATTERN [FILE]...`).
            3. A comprehensive list of available options:
               * `-c`, with an optional number `N`, which only prints the count of matching lines for each file.
               * `-i`, case insensitive search.
               * `-l`, print only names of files with matching lines, without printing the lines themselves.
               * `-v`, print non-matching lines.
               * `--color=auto` or `--color=never` for displaying matches in color.
            4. Examples of usage scenarios and their expected outputs.
        ignore-case: '[AI] The `grep` command is a powerful text search tool in Unix and Linux systems. The option `--ignore-case` (often abbreviated as `-i`) modifies its behavior to perform case-insensitive searches, meaning it matches patterns regardless of their case when comparing against the input data. For instance, using `grep -i "pattern" file` will find lines in `file` that have `Pattern`, `PatTeRn`, or any other variant as long as the characters within the quotes form the search pattern.'
        include: '[AI] The `grep` command is a powerful text search utility in Unix-like operating systems. The option `--include <pattern-list>` is used to search for specific patterns only in files that match certain filename patterns listed in the `<pattern-list>`. For instance, `grep --include ''*.txt'' /path/to/search/ *` will search for a specified pattern within all files under `/path/to/search/` that have the extension ''.txt''. This can be useful when dealing with large directories containing various types of files and you want to limit your search to specific file formats.'
        initial-tab: '[AI] The `grep` command is a powerful text search utility in Unix and Linux systems. The option `--initial-tab` (or just `-T`) is used to modify the output format of `grep`. Instead of printing the matching lines, it will print the filenames where the match was found, preceded by a tab character. This can be useful when searching for a specific pattern across multiple files.'
        invert-match: '[AI] `grep` is a command-line utility for searching text files or input streams for lines that match a regular expression pattern. The `--invert-match` option inverts the sense of the search, meaning it will print lines that do not match the pattern instead of the usual lines that match it. For example, `grep --invert-match ''pattern'' file.txt` will output lines from `file.txt` that don''t contain ''pattern''.'
        label: |-
            [AI] The `grep` command with the `--label` option is used in Unix-based systems for searching files or input data for specific patterns. However, instead of printing the matching lines, it labels the input file names based on whether they contain any matching lines or not.

            The syntax is: `grep --label <option> *file_pattern* <search_term>`

            For instance, running `grep --label . *.txt search_term` will print file names with a label "`search_term:`" for files containing the search term and a label "`--`" for those that do not. This can be useful when working with multiple files to quickly identify those requiring further attention.
        line-buffered: |-
            [AI] The `grep` command with the `--line-buffered` option is used to process input one line at a time instead of reading the entire input into memory before searching for a pattern. This can be useful when dealing with large input files or limited system resources, as it reduces memory usage and allows the processing to continue in real-time.

            The `--line-buffered` option tells `grep` to read the input line by line, instead of using the default behavior of reading entire blocks of data from standard input into a buffer before searching for the pattern. This can result in faster processing times and lower memory usage.
        line-number: '[AI] `grep` is a command-line utility in Unix and Unix-like operating systems for searching text files for specified patterns. The option `--line-number` (or just `-n`) when used with `grep`, displays not only the matching lines but also the line numbers where each match was found. This can help users quickly locate the specific parts of a file that contain the searched-for pattern.'
        line-regexp: '[AI] `grep` is a command-line utility for searching text files or input streams for specific patterns. The `--line-regexp` option, also written as `-P`, tells `grep` to use Perl-compatible regular expressions (PCRE) instead of the default basic regular expressions. This allows more complex and powerful search patterns. With `--line-regexp`, you can perform global searches (with the `-g` option) or print only matching lines (default behavior). For example, `grep --line-regexp ''[\w]+@[\w.-]+\.[a-z]{2,}'' inputfile.txt` would search for valid email addresses in the file `inputfile.txt`.'
        max-count: '[AI] The `--max-count` option in `grep`, a popular text search utility, specifies the maximum number of matching lines to be displayed for each regular expression match in the output. By default, `grep` shows all lines that match the pattern. However, with `--max-count N`, only the first `N` lines per match will be displayed. This option can help reduce the amount of output when dealing with large files or numerous matches.'
        no-filename: '[AI] The `grep` command with the `--no-filename` option is used to search for a specific pattern in one or more files, but without printing the file names preceding the matching lines in the output. This can be useful when dealing with large numbers of files and only wanting to focus on the matching content, rather than being distracted by the file names.'
        no-ignore-case: '[AI] `grep` is a command-line utility in Unix and Unix-like operating systems used for searching text files. The option `--no-ignore-case` (or simply `-i`) instructs `grep` to perform case-insensitive searches, meaning it will match patterns regardless of the case of the characters in the search text. Without this option, by default, `grep` performs case-sensitive searches.'
        no-messages: '[AI] `grep` is a command-line utility for searching text files or input streams for specified patterns. The option `--no-messages` or `-q` suppresses `grep`''s output, meaning it will only return a success or failure status (0 for success, 1 for failure). This can be useful when you want to use `grep` in scripts without displaying the matching lines.'
        "null": '[AI] The `grep` command is a popular text searching tool in Unix-like operating systems. The `--null` option is an output flag used with `grep`. When this flag is used, `grep` separates matching lines with a null character (ASCII NUL \x00) instead of the default newline character (\n). This can be useful when processing input and output in specific ways, such as in pipe-lined scripts or when dealing with filenames containing special characters.'
        null-data: '[AI] The `grep` command is a powerful text search tool in Unix and Linux systems. The `--null-data` option is an argument that can be passed to `grep` to modify its output behavior. When used, this option ensures that the output contains only null characters (ASCII code 0) as separators between fields instead of using other delimiters such as tabs or newlines. This can be particularly useful when processing data in specific applications or scripts where null characters are required as delimiters.'
        only-matching: '[AI] `grep` is a command-line utility for searching text files or input streams for lines that match a regular expression pattern. The `--only-matching` (or `-o`) option changes the output to only show the part of a line that matches the pattern, rather than the whole line. This can be useful when you are only interested in extracting specific substrings from files.'
        perl-regexp: '[AI] `grep` is a command-line utility for searching text files for specific patterns. The `--perl-regexp` option tells `grep` to use Perl-compatible regular expressions instead of the default basic regular expressions. Perl regular expressions offer more powerful and flexible pattern matching capabilities than basic regular expressions, allowing the use of various advanced features such as lookahead/lookbehind assertions, capturing groups, backreferences, and more complex character classes.'
        quiet: '[AI] The `grep` command with the `--quiet` or `-q` option is used to search for a pattern in one or more files and only prints an empty output if the pattern is found. In other words, it returns a success status code (0) if a match is found, and fails (non-zero status code) otherwise. This option is useful when performing automated tasks where you only need to know whether a search was successful or not, without displaying any matching lines.'
        recursive: '[AI] `grep` is a command-line utility in Unix and Unix-like operating systems for searching text files for specified patterns. The `--recursive` or `-r` option tells `grep` to search not only the named file but also any files that it refers to, recursively descending into subdirectories. This is useful when looking for a specific pattern across an entire directory hierarchy.'
        regexp: |-
            [AI] The `grep` command with the `--regexp` option is used in Unix or Linux systems for searching text files for regular expression patterns instead of simple fixed strings. The `--regexp` flag enables the use of regular expressions, which are more complex and powerful search queries than simple text strings. With this option, `grep` can perform more sophisticated searches, such as searching for multiple patterns at once or searching for patterns with special characters or complex structures. For example:

            ```bash
            $ grep --regexp 'pattern|another_pattern' file.txt
            ```

            This command will search `file.txt` for lines containing either `'pattern'` or `'another_pattern'`.
        silent: '[AI] The `grep` command is a popular text search tool in Unix-like operating systems. The option `--silent`, or `-s`, changes the default behavior, making `grep` run quietly without printing the filenames or the matching lines on the terminal when there''s a match. Instead, it only outputs the exit status (0 for success and non-zero values for failure).'
        text: '[AI] The `grep` command with the `--text` option is used in Unix or Linux systems for searching plain text files for specific patterns. The `--text` flag instructs `grep` to treat the input as plain text, meaning it will not apply any encoding or decoding filters and assumes the file does not contain binary data. This can be useful when dealing with text-only files to ensure accurate search results.'
        version: '[AI] `grep --version` is a command used in Unix-like operating systems to search text files for specified patterns. The `--version` option is used to display the version information of the `grep` utility installed on the system, including its name, version number, and compilation details. This command provides essential information about the `grep` implementation being used, helping users ensure they have the latest updates or troubleshoot any compatibility issues.'
        with-filename: '[AI] The `--with-filename` option used with the `grep` command in Unix or Linux environments is utilized to display the names of files, along with the matching lines, when searching for a pattern. This can be helpful when dealing with multiple files, as it allows users to quickly identify which file contains the desired output.'
        word-regexp: '[AI] The `grep` command is a popular text searching tool in Unix and Linux systems. The option `--word-regexp` (or `-W` for short) modifies the way `grep` interprets regular expressions during search. With this flag, `grep` will only find matches that occur as whole words, meaning the pattern must match an entire word in the input file, rather than a substring within a word. For instance, using `grep -w ''pattern'' file` will only display lines containing the exact word ''pattern''.'
