# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: token SERVICE_ACCOUNT_NAME
description: Request a service account token
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --audience*=: Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.
    --bound-object-kind=: Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.
    --bound-object-name=: Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.
    --bound-object-uid=: UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.
    --duration=: Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create token` is a command used in Kubernetes to generate and print a new authentication token (also known as a service account token or cluster-wide token). This token can be used to authenticate and grant administrative access to specific resources within a Kubernetes cluster. The token''s output is typically in the form of a long string, which should be saved securely and not shared publicly. It''s important to note that using this command may require appropriate RBAC permissions, as creating tokens is generally an administrative task.'
    flag:
        allow-missing-template-keys: '[AI] The `kubectl create token` command generates a new token for authentication in Kubernetes, which can be used to create and manage resources programmatically or through APIs. The option `--allow-missing-template-keys` is used when creating a service account token with a YAML file that may not have all required keys defined. When this flag is set, Kubectl will still generate the token even if some template keys are missing in the YAML file. This can be useful when working with partially defined YAML files or templates.'
        audience: '[AI] `kubectl create token --audience` is a command used to generate a new Kubernetes service account token with a specific audience. The audience refers to the entity or entities that are authorized to use the token for API access. This command creates a new token, saves it to stdout (by default), and sets the appropriate permissions based on the given audience. This is often used when creating dynamic clients such as automated scripts or tools that need to make API requests on behalf of a specific service account. The audience is specified using a string in the format `<client-name>/<namespace>` where `<client-name>` is the name of the client and `<namespace>` is the namespace in which the client exists in the Kubernetes cluster.'
        bound-object-kind: '[AI] The `kubectl create token` command is used to generate a new authentication token in Kubernetes. When you include the `--bound-object-kind` flag, you are specifying that the token should be associated with a specific type of object (like a ClusterRole or Role) when it is created. This allows for fine-grained access control and helps ensure that the token has only the necessary permissions to perform the intended tasks within the cluster. The resulting token can then be distributed securely to users, services, or other components to grant them access to Kubernetes resources.'
        bound-object-name: '[AI] `kubectl create token` is a command used in Kubernetes to generate and print a new authentication token. The `--bound-object-name` flag specifies a name for the object that the token will be bound to, such as a service account or a cluster role. The generated token can then be used to authenticate and grant specific permissions to a client application or user in Kubernetes.'
        bound-object-uid: '[AI] The `kubectl create token` command is used to generate a new authentication token in a Kubernetes cluster. The `--bound-object-uid` flag specifies the UID (Universally Unique Identifier) of an object in the cluster, such as a ServiceAccount or ClusterRole, to which the generated token will be bound. This allows for fine-grained control over what resources a user or process can access with the token. When used, this command creates a new token and prints it to the console, along with the UID of the object it is bound to.'
        duration: '[AI] `kubectl create token` is a command used in Kubernetes to generate a new authentication token for use with `kubefed` or other clients that authenticate via tokens. The `--duration` flag sets the duration for which the token is valid before it expires. By default, the token does not expire (lasts forever). Setting a duration with `--duration=<number>` will create a token that lasts for the specified number of hours. For example, `--duration=8h` would create a token that is valid for 8 hours.'
        output: '[AI] `kubectl create token` is a command used in Kubernetes to generate and output a new authentication token. This token can be used to authenticate and authorize API requests to the Kubernetes cluster. The `--output` flag is used to specify the format of the output. For example, `--output=json` will return the token as a JSON object or `--output=plaintext` will print the token as plain text. It''s important to note that this command should be run with care, as the generated token grants access to the cluster and can potentially grant unauthorized access if compromised.'
        show-managed-fields: '[AI] `kubectl create token --show-managed-fields` is a command used in Kubernetes to generate a new token for authentication and create or update a Secret object with that token. The `--show-managed-fields` flag displays the managed fields, which are the fields in the Secret that Kubernetes automatically manages, such as `token`, `expirationTime`, and `type`. These fields should not be manually modified to ensure security and proper functionality of the token.'
        template: '[AI] `kubectl create token --template` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command generates a new token and its corresponding client certificate for managing resources in a Kubernetes cluster. The `--template` flag is an optional argument that returns the output in a template format, which can be further processed by other tools or scripts. It''s often used when creating automation workflows where tokens need to be generated frequently and managed programmatically. The generated token and client certificate can then be used to create, delete, or modify cluster resources through `kubectl` or other tools like `helm` or `kops`.'
