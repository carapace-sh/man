# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-upgrade
description: Update dependencies as recorded in the local lock file
flags:
    --all: '[deprecated in favor of `--workspace`]'
    --allow-prerelease: Include prerelease versions when fetching from crates.io (e.g. 0.6.0-alpha')
    --dry-run: Print changes to be made without making them
    --exclude=: Crates to exclude and not upgrade
    --manifest-path=: Path to the manifest to upgrade
    --offline: Run without accessing the network
    --skip-compatible: Only update a dependency if the new version is semver incompatible
    --to-lockfile: Upgrade all packages to the version in the lockfile
    --workspace: Upgrade all packages in the workspace
    -V, --version: Prints version information
    -h, --help: Prints help information
    -p, --package=: Package id of the crate to add this dependency to
documentation:
    command: '[AI] `cargo-upgrade` is a command-line tool that helps manage Rust project dependencies by upgrading or downgrading packages described in the project''s `Cargo.toml` file to specified versions. It is not an intrinsic Rust command but rather an external tool built on top of Cargo, Rust''s package manager. By default, it searches for available updates across crates.io and installs the latest compatible versions, but it also supports specifying exact versions. This tool simplifies maintaining project dependencies up-to-date while reducing potential version conflicts.'
    flag:
        all: '[AI] `cargo-upgrade --all` is a command used in Rust programming language''s Cargo build tool. This command performs an automatic update of all dependencies listed in the project''s Cargo.toml file to their latest versions. It also updates the lockfile (Cargo.lock) accordingly, ensuring that future builds will use these updated dependencies. Using this command ensures that your project stays up-to-date with the latest version of its dependencies, reducing potential vulnerabilities and improving compatibility.'
        allow-prerelease: '[AI] `cargo-upgrade` is a Cargo sub-command used to update Rust dependencies in a project. The `--allow-prereleases` flag allows the installation of dependencies with prerelease versions. These are development versions that may not be stable or fully tested yet, but can provide new features or bug fixes that are not available in the latest stable release. Using this flag carries some risk, as there''s a possibility of introducing compatibility issues or other unintended consequences. It should be used with caution and only when necessary.'
        dry-run: '[AI] `cargo-upgrade` is a Cargo subcommand for Rust projects, used to update dependencies in the project''s `Cargo.toml`. The `--dry-run` flag is an optional argument. When using this flag, `cargo-upgrade` will simulate the dependency updates without actually modifying the `Cargo.toml` file or downloading any new packages. This allows users to preview the changes that would be made before running the command with no flags (i.e., performing the actual update).'
        exclude: |-
            [AI] `cargo-upgrade` is a Cargo subcommand used to automatically update dependencies in a Rust project to their latest versions. The `--exclude` option allows excluding specific dependency crates or packages from being updated.

            For example, you might have a dependency that's causing compatibility issues with other parts of your project and want to keep it at a specific version: `cargo-upgrade --exclude my_dependency`. This command will update all dependencies except for `my_dependency`.
        help: |-
            [AI] `cargo-upgrade` is a Cargo subcommand for managing Rust dependency updates. The `--help` option provides information about how to use this command.

            The output includes:

            1. A brief description of the command, which is "Perform safe and reproducible dependency updates in your Cargo.toml."
            2. Usage instructions, such as `cargo upgrade [flags] [dependencies...]`, where `[dependencies...]` are the package names to be updated.
            3. A list of available options:
               - `--crates-only`: Upgrade only the dependencies listed in Cargo.toml under `[dependencies]` but not the ones in `[dev-dependencies]`.
               - `--features`: Upgrade specific features.
               - `--no-deps`: Don't update any dependencies, only check for possible updates.
               - `--offline`: Perform the upgrade offline.
               - `--locked`: Only use locked dependencies from Git repositories instead of checking for new releases.
               - `--manifest-path <path>`: Specify a custom Cargo.toml file path.
            4. An explanation of how to see a list of available updates using `cargo upgrade --verbose`.
            5. An example command: `$ cargo upgrade --crates-only my_dependency`.
        manifest-path: '[AI] `cargo-upgrade` is a Cargo subcommand for Rust projects, used to update dependencies in the project''s Cargo.toml manifest file to their latest available versions. The `--manifest-path` flag specifies the path to the Cargo manifest file instead of using the default one located in the current project directory. This is useful when working with multiple Cargo projects and wanting to update a specific project''s dependencies.'
        offline: '[AI] `cargo-upgrade --offline` is a command used with Cargo, Rust''s package manager. This command performs an offline upgrade of Rust dependencies mentioned in a project''s `Cargo.toml` file without needing to connect to the internet. It reads and upgrades the dependencies from the local cache, making it useful when there is no network access or for ensuring reproducibility of builds.'
        package: '[AI] `cargo-upgrade` is a Cargo subcommand for Rust programming language projects that helps manage and update dependencies in the project''s `Cargo.toml` file. The `--package` option specifies the name of a specific package to update or check for new versions without affecting other packages in the project. For instance, `cargo-upgrade --package my_dependency` would only upgrade that particular dependency while keeping others unchanged.'
        skip-compatible: '[AI] `cargo-upgrade` is a Cargo subcommand for Rust programming language projects, which facilitates updating dependencies to their latest versions. The `--skip-compatible` flag modifies this process by skipping the check for compatible dependency versions. This means that even if there are incompatible version discrepancies between the current project and its dependencies, `cargo-upgrade` will proceed with the update without raising a warning or error. Using this flag could potentially lead to compatibility issues, so it''s essential to use it cautiously and verify that the updated dependencies will work correctly with the project.'
        to-lockfile: '[AI] `cargo-upgrade` is a Cargo subcommand used to manage and update dependencies in a Rust project''s `Cargo.toml`. The `--to-lockfile` flag instructs `cargo-upgrade` to generate a new `Cargo.lock` file instead of directly updating the dependencies. By creating a `Cargo.lock` file, you ensure that specific version numbers for each dependency are locked in and can be reproduced across builds. This is particularly useful when collaborating with others on projects or deploying applications, as it helps maintain consistency and prevent unexpected dependency version conflicts.'
        version: '[AI] `cargo-upgrade --version` is a command used with Cargo, the Rust package manager. This command is utilized to check and print out the current version of `cargo-upgrade`, which is a Cargo workflow that automates updating dependencies in a Rust project''s `Cargo.toml` file. This command helps you keep track of the latest available version for your tool, ensuring optimal functionality when managing project dependencies.'
        workspace: '[AI] `cargo-upgrade --workspace` is a command used with Cargo, Rust''s package manager. This command upgrades all dependencies in every project within a Cargo workspace to their latest versions. By using the `--workspace` flag, Cargo understands that you want to upgrade dependencies across multiple projects instead of just the current one. This is useful when managing complex applications built with multiple Rust projects.'
