# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: help
description: Display help information about Git
group: interrogator
flags:
    --developer-interfaces: Print list of file formats, protocols and other developer interfaces documentation
    --no-aliases: Exclude the listing of configured aliases
    --no-external-commands: Exclude the listing of external "git-*" commands found in the $PATH
    --user-interfaces: Prints a list of the repository, command and file interfaces documentation
    --verbose: Print description for all recognized commands
    -a, --all: Prints all the available commands on the standard output
    -c, --config: List all available configuration variables
    -g, --guides: Prints a list of the Git concept guides on the standard output
    -i, --info: Display manual page for the command in the info format
    -m, --man: Display manual page for the command in the man format
    -w, --web: Display manual page for the command in the web (HTML) format
documentation:
    command: '[AI] `git help` is a command used in Git version control system to display help information about Git commands, configuration variables, or other related topics. It searches for and displays documentation about the given Git topic. For instance, you can use it to get more information about a specific Git command like this: `git help <command-name>` (e.g., `git help commit`). You can also use it without any argument to display a list of available help topics.'
    flag:
        all: '[AI] `git help --all` is a Git command used to display help information for all installed Git commands and their associated subcommands. It provides a comprehensive list of available Git functions, along with usage examples and detailed explanations, in one convenient location. This can be useful when you''re unsure about the capabilities of installed Git tools or need a quick reference for various Git-related tasks.'
        config: '[AI] `git help --config` displays help information about Git configuration files and the git config command. It explains how to use git config to set, view, and edit Git''s user-level and system-wide configuration variables. These configurations can include items like the user name and email address for committed code, default branch names, and merging strategies. This command provides a detailed description of each option, along with examples of their usage.'
        developer-interfaces: '[AI] `git help --developer-interfaces` displays help information about Git''s developer interfaces, which are low-level mechanisms for building applications that interact with Git repositories. These interfaces include the Git API, libgit2, and the GIT_PROTOCOL over SSH or HTTP. They provide access to Git''s core functionality for advanced users or developers who want to build tools on top of Git.'
        guides: '[AI] `git help --guides` is a Git command that displays a list of available interactive tutorials, or guides, for using Git. These guides cover various aspects of Git, from basic usage to more advanced features and workflows. They are designed to provide hands-on experience with Git through interactive sessions. The guides can be run locally in the terminal or accessed online at Git''s official website.'
        info: '[AI] The `git help --info` command is used to display detailed information about Git commands and their usage. It shows the synopsis, a short description, and options for a specific Git command. For example, `git help --info git push` would provide information on how to use the `git push` command to send commits to a remote repository. This command is useful when you need a quick reference or want to learn about a new Git feature.'
        man: '[AI] The `git help --man` command displays the Git manual page, which is a detailed and comprehensive description of all Git''s functions and options, written in a format called "manual page" or "man page" for short. Man pages are a common way of documenting Unix-based software, and they typically include sections on usage, options, examples, and other details to help users understand and effectively use the software. In Git''s case, the manual page provides an extensive reference for developers and power users looking to master the intricacies of this powerful version control system.'
        no-aliases: '[AI] `git help --no-aliases` is a Git command used to display help information for a specific Git command or subcommand without using any aliases set up in your Git configuration file. By using the `--no-aliases` option, you ensure that the help message displayed will be the one defined in the Git source code and not an alias with possibly different meaning. This can be useful when you want to understand exactly what a specific command does without being influenced by any custom aliases.'
        no-external-commands: '[AI] The `--no-external-commands` flag is a command-line option for Git, a popular version control system. This option is used when running Git in an environment where external commands (like those that might be defined in the user''s PATH) could pose a security risk. By setting this flag, Git will only execute commands that are built into Git itself, reducing the potential for external command execution.'
        user-interfaces: |-
            [AI] The `git help --user-interfaces` command provides information about Git's built-in user interfaces, including:

            1. `gitk`: A standalone graphical Git GUI. It shows a single branch or multiple branches in a tree or graph view, allows for easy file comparison and patch viewing, and supports simple operations like checking out files and committing changes.
            2. `git gui`: A graphical user interface for making local Git commits and resolving merge conflicts. Its main strength is its simplicity, with a clear, user-friendly layout for visualizing changes and committing them in stages.
            3. `git-cvsserver`: Git's built-in CVS server, allowing you to work with Git repositories as if they were traditional CVS repositories. This is useful for teams that prefer using CVS client tools, such as TortoiseCVS or AnkhSVN.
            4. `git-flow-gui`: A graphical user interface for the popular GitFlow branching model. It provides an easy way to create and manage GitFlow branches and releases, including hotfixes, feature branches, and release branches.
            5. `git-credential-store`: A command-line tool for managing your Git credentials securely. Instead of having to remember or enter your username and password each time you interact with a remote repository, you can store them securely in a keychain or other credential store supported by Git.
        verbose: '[AI] `git help --verbose` is a Git command used to display detailed and comprehensive information about Git commands, their usage, and available options. When you run this command followed by a specific Git command (e.g., `git help git push --verbose`), Git will output extensive documentation on the given Git subcommand, including examples and explanations of each option.'
        web: '[AI] `git help --web` is not a specific Git command, but rather an option to access Git documentation through a web browser instead of the terminal. When you use `git help` followed by a command or topic, Git will search for and display the corresponding help text in your terminal. However, the `--web` option will open the Git documentation website in your default web browser, allowing you to explore the extensive documentation Git offers more interactively.'
