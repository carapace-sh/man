# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: lazygit
description: simple terminal UI for git commands
flags:
    --print-config-dir: Print the config directory
    --use-config-dir=: override default config directory with provided directory
    --use-config-file=: Comma seperated list to custom config file(s)
    -c, --config: Print the default config
    -d, --debug: Run in debug mode with logging (see --logs flag below). Use the LOG_LEVEL env var to set the log level (debug/info/warn/error)
    -f, --filter=: Path to filter on in `git log -- <path>`.
    -g, --git-dir=: equivalent of the --git-dir git argument
    -h, --help: Displays help with available flag, subcommand, and positional value parameters.
    -l, --logs: Tail lazygit logs (intended to be used when `lazygit --debug` is called in a separate terminal tab)
    -p, --path=: Path of git repo.
    -v, --version: Print the current version
    -w, --work-tree=: equivalent of the --work-tree git argument
documentation:
    command: '[AI] "Lazygit" is not a recognized Git command. It seems to be a mis typo of "lazy git", which is not an official Git term but rather a name given to workflows or extensions that aim to simplify or automate common Git tasks with less effort and keystrokes compared to the standard Git commands. However, there''s no specific command called "lazygit" in Git. If you meant a particular lazy git extension like FzFgit (fzf) or LazyGit (an RStudio addin), please clarify for more accurate information.'
    flag:
        config: '[AI] `lazygit --config` is a command used in LazyGit, a graphical Git user interface for Windows, to open the configuration file. The "--config" option instructs LazyGit to display or edit the Git configuration settings stored in the .gitconfig file located in the user''s home directory. These settings can include the user name and email address, default branches, and other Git preferences.'
        debug: '[AI] `lazygit --debug` is a command used in Git, a popular version control system. The `--debug` flag enables debug mode for the given Git command, which produces more detailed output and can help diagnose issues or provide additional information when using a Git command. The specific command `lazygit` is likely a custom alias or script built on top of Git that provides an easier interface to common Git operations, but with `--debug`, it will run with more extensive logging and potentially reveal more information about the underlying Git processes.'
        filter: |-
            [AI] `lazygit` is a Git client for Node.js, allowing users to interact with Git repositories using the command line. The `--filter` option is a modifier used in conjunction with various `lazygit` commands. It allows filtering results based on specific criteria or patterns.

            For example, when used with `lazygit log`, `--filter` can be employed to only display commits that match a particular branch name or message pattern. Similarly, when used with `lazygit diff`, it can be utilized to limit the displayed differences between files based on their names or modifications.

            In summary, the `--filter` option in `lazygit` helps users narrow down results by applying custom filters to commands, making it easier to navigate and manage Git repositories.
        git-dir: '[AI] The `lazygit --git-dir` command is a custom script or alias in Git, which modifies the default behavior of Git to use a different directory as its database instead of the usual `.git` hidden subdirectory. The `--git-dir` option specifies an alternative location for the Git repository''s root directory, making it possible to have multiple Git repositories with the same working directory but separate Git directories. This can be useful in specific use cases like versioning large files or collaborating on projects where sharing the entire project folder is not desirable.'
        help: '[AI] `lazygit --help` is a command used in Git, a version control system. The `--help` flag is a standard option that displays detailed help information about the given Git command or subcommand. In this case, `lazygit` is likely a custom name for a Git alias or script, so the help message would provide an explanation of what `lazygit` does and how to use it with various options. The exact contents of the help message will depend on the specific implementation of `lazygit`.'
        logs: '[AI] `lazygit --logs` is a command used in LazyGit, a graphical Git user interface for the terminal. This command displays the commit history of a Git repository in a text-based format, showing each commit''s hash, author, date, and message. It allows users to easily view the log of committed changes without leaving the terminal or navigating through complex menus.'
        path: '[AI] The `--path` option in the `lazygit` command-line Git client relates to specifying a particular local or remote repository path as an argument. It helps users navigate and manage multiple repositories easily by allowing them to work on different projects while keeping their workspace organized. Using this flag enables users to clone, pull, push, or fetch from/to the specified repository path without having to constantly switch between directories.'
        print-config-dir: '[AI] The `lazygit` is a lightweight Git client for Node.js, and `--print-config-dir` is an option that can be passed to the CLI (Command Line Interface) of lazygit to display the directory path where its configuration files are located. In other words, it reveals the folder containing the user''s `lazygit.yml` file, which stores personal configuration settings for lazygit.'
        use-config-dir: '[AI] `lazygit` is a Git client written in Rust-language, providing a simple and lightweight interface for Git operations. The option `--use-config-dir` tells lazygit to look for Git configuration files in a custom directory instead of the default system or user location. This can be useful when working with multiple projects with different Git configurations.'
        use-config-file: '[AI] `lazygit` is a Git wrapper written in Rust language, providing a simple and user-friendly interface for Git commands. The option `--use-config-file` instructs `lazygit` to read the configuration settings from a custom file instead of the system or default one. This can be useful when multiple projects have different Git workflow requirements, allowing users to maintain separate config files and easily switch between them.'
        version: '[AI] The `lazygit --version` command is used to check the version information of LazyGit, a graphical Git user interface for Windows and macOS. When executed in a terminal or command prompt, it will print out the specific version number of LazyGit that is currently installed, along with any additional build information such as the commit hash and compilation date.'
        work-tree: '[AI] The `--work-tree` option in Git is used to specify a subdirectory within a repository as the top-level directory for the working directory. This can be useful when dealing with large or complex projects where you want to keep the source code separate from the rest of your project files. By setting the work tree to a subdirectory, you can keep that area of the repository clean and focused on the code changes without having other unrelated files cluttering the workspace. This can improve organization and efficiency when working on Git projects.'
