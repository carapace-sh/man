# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: api <endpoint>
description: Make an authenticated GitHub API request
flags:
    --cache=: Cache the response, e.g. "3600s", "60m", "1h"
    --hostname=: The GitHub hostname for the request (default "github.com")
    --input=: The `file` to use as body for the HTTP request (use "-" to read from standard input)
    --paginate: Make additional HTTP requests to fetch all pages of results
    --silent: Do not print the response body
    --verbose: Include full HTTP request and response in the output
    -F, --field*=: Add a typed parameter in `key=value` format
    -H, --header*=: Add a HTTP request header in `key:value` format
    -X, --method=: The HTTP method for the request
    -f, --raw-field*=: Add a string parameter in `key=value` format
    -i, --include: Include HTTP response status line and headers in the output
    -p, --preview*=: GitHub API preview `names` to request (without the "-preview" suffix)
    -q, --jq=: Query to select values from the response using jq syntax
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
documentation:
    command: '[AI] `gh api` is a command-line interface for the GitHub API, provided by GitHub for interacting with its platform using Terminal or Shell scripts. It requires authentication via a personal access token (PAT) or SSH key. You can make various types of requests, such as fetching repositories, issues, pull requests, and more. The command is typically followed by the specific API endpoint and any necessary parameters. For example: `gh api repos <username>/<repository>`.'
    flag:
        cache: '[AI] The `--cache` flag for the `gh api` command in GitHub''s command-line interface (CLI) tool is used to control the caching behavior of the CLI. Specifically, it instructs the CLI to reuse previously downloaded and stored data instead of downloading it again from the server. This can help improve performance and reduce network usage when working with frequently accessed resources such as repositories or organizations. The flag accepts various options like `--cache-dir`, `--cache-max-size` and `--global` to configure the cache directory, maximum size of the cache, and whether to use a global or local cache respectively.'
        field: '[AI] The `--field` option is a command-line argument used with the `gh` API (GitHub''s command-line interface) to specify which particular fields or data from an API response should be displayed or returned. For example, when making a request to view user information, you can use `--field=login,email,public_repos` to only display the ''login'', ''email'', and ''public_repos'' fields of the response. This helps in reducing the amount of data received, which may improve performance and security.'
        header: |-
            [AI] `gh api` is a command-line interface tool for GitHub's API. The `--header` option is used to pass custom HTTP headers alongside API requests. These headers can contain authentication tokens, data format preferences or other metadata that may be required for specific API operations. For example:

            ```bash
            gh api [command] --header "Authorization: Bearer [token]" --header "Accept: application/vnd.github+json"
            ```

            In this case, the `--header` option is used to set the 'Authorization' header with a GitHub token and the 'Accept' header to specify the desired response format.
        hostname: |-
            [AI] The `gh api --hostname` command is a part of the GitHub CLI (Command Line Interface) tool, `gh`. This specific command is used to display or set the hostname of the GitHub instance being used. By default, it connects to GitHub.com. However, you can use this command with an alternative GitHub Enterprise Server URL for private instances. For example, to set a custom hostname:

            ```sh
            gh config api-host <your_github_enterprise_server_url>
            ```

            To check the current API hostname:

            ```sh
            gh api --hostname
            ```
        include: '[AI] The `--include` option is a flag used with GitHub''s REST API. It instructs the API to return not only the requested resource, but also any related resources that match the given inclusion filter. This can be used to retrieve linked data in a single request instead of making multiple requests. For example, using `--include files` would return the repository along with all its files.'
        input: '[AI] The `gh api --input` is a command used in the GitHub CLI (Command Line Interface) tool. It makes an API request to GitHub with a provided input file, usually in JSON or YAML format, and returns the response as output in the terminal. This command allows users to interact with GitHub''s API programmatically for various tasks such as managing repositories, creating issues, and more, while maintaining the ease of handling files locally.'
        jq: '[AI] The command `gh api` is used to interact with GitHub''s API using the GitHub CLI (Command Line Interface) tool. The `--jq` option passes the output of the previous command to the `jq` query language processor for filtering and transforming JSON data. So, a command like `gh api /repos <username>/<repo> --jq ''.name''` would return just the name of the specified repository from the API response.'
        method: |-
            [AI] `gh api` is a command-line interface tool for GitHub's REST API. The `--method` option specifies the HTTP method to be used in the API request, such as GET, POST, PUT or DELETE. For example:

            ```bash
            gh api --method GET user
            ```

            This command uses the GET method to retrieve information about the authenticated user's GitHub profile. Similarly, you can use other methods like POST for creating new resources, PUT for updating existing resources and DELETE for removing resources.
        paginate: '[AI] The `--paginate` flag is a command-line option used with GitHub''s `api` (usually through tools like `gh` or `curl`) to automatically add pagination to API requests that return multiple pages of results. When this flag is provided, the API response will include links for navigating between pages, allowing you to fetch subsequent pages by making repeated requests with the appropriate links until all desired data has been retrieved.'
        preview: '[AI] The `gh api --preview` command is a tool from GitHub''s Command Line Interface (CLI) package, gh. This command is used to create or update a resource in GitHub with preview functionality enabled. Preview allows you to test changes before they are made live for the public. When you run `gh api --preview`, it generates a URL where you can view the preview of your change. Once you''re satisfied, you can publish the update using another command.'
        raw-field: '[AI] `gh api` is a command-line interface tool for interacting with GitHub''s REST API. The `--raw-field` option is used to specify that you only want to retrieve the raw value of a specific field in the response, rather than processing it further. For example, if you use `gh api REPOSITORY owner/repo --raw-field description`, you will receive only the description field''s raw value, not processed or formatted in any way. This can be useful when working with scripts that require specific data formats.'
        silent: '[AI] The command `gh api` followed by the flag `--silent` (`-s`) is used with the GitHub API to suppress the output of HTTP responses. This means that only error messages will be displayed and no other response data will be shown in the terminal. This can be useful when automating tasks or running scripts where you don''t need to see the full response from the API.'
        template: '[AI] The `gh api --template` command is used with GitHub''s Command Line Interface (CLI) tool, gh, to create or modify resources on GitHub using templates. The `--template` option specifies the name of a file containing the template in JSON format. This command does not directly return any output, but instead generates new files based on the specified template and prompts for user input when necessary. These newly generated files can then be reviewed and committed to a GitHub repository.'
        verbose: '[AI] The `gh api --verbose` command is used with GitHub''s Command Line Interface (CLI) tool, gh. This command sets the verbose mode for gh API interactions. In other words, it increases the level of detail and output provided when making API requests to GitHub. With this flag, you will receive more comprehensive information about the progress and results of your API operations. This can be helpful for troubleshooting or gaining a deeper understanding of what''s happening during an API interaction.'
