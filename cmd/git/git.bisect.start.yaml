# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: start
description: reset bisect state and start bisection
flags:
    --first-parent: follow only the first parent commit upon seeing a merge commit
    --no-checkout: do not checkout the new working tree at each iteration
    --term-bad=: set term for new/bad
    --term-good=: set term for old/good
    --term-new=: set term for new/bad
    --term-old=: set term for old/good
documentation:
    command: '[AI] `git bisect` is a Git feature used to find the commit that introduced a regression. The `git bisect start` command initiates a bisect session. It takes as an argument the commit message or hash of the good commit (the last known version where something worked), and the bad commit (where the issue was introduced). After running this command, Git will automatically find and checkout commits between the two that may have caused the regression. The process continues with `git bisect good` or `git bisect bad`, depending on whether the issue is present in the checked-out commit.'
    flag:
        first-parent: '[AI] `git bisect start --first-parent` is a Git command used to perform a binary search for the commit that introduced a regression in a project''s history. The `--first-parent` option restricts the search to commits on the current branch''s main line of development, following only the first parent commit pointer. This can be useful when you want to find the commit responsible for introducing a regression in a feature branch that was merged into the main branch using a fast-forward merge.'
        no-checkout: '[AI] `git bisect start --no-checkout` is a Git command used to start a bisect session without checking out a new commit. When you run this command, Git sets up a series of commands to help you find the commit that introduced a bug or regression. The `--no-checkout` option prevents Git from automatically checking out the first good commit found during the bisect process. Instead, it leaves you in your current branch to continue the investigation manually.'
        term-bad: '[AI] `git bisect start --term-bad` is a Git command used for finding the commit that introduced a bug into a project''s codebase. The `--term-bad` option is passed to specify the state of the project where the bug is clearly present, often referred to as the "bad" state. Once started, Git will perform an automatic binary search using good and bad commits marked by successful and failed build or test results respectively. The process continues until the offending commit is identified.'
        term-good: |-
            [AI] `git bisect start --terminal-poll` is a Git command used to start a bisect session with interactive terminal output. Bisect is a Git feature that helps find the commit causing a regression by automatically checking intermediate commits.

            When you run `git bisect start --terminational-poll`, Git will begin searching for the commit responsible for introducing a bug or regression. It will test commits interactively in the terminal, allowing you to confirm whether each one is "good" (has the fix) or "bad" (introduces the issue). The `--terminal-poll` option enables the terminal polling mode, which provides real-time updates on the bisect progress.
        term-new: '[AI] `git bisect start --term-new` is a Git command used to begin an interactive revisions squashing session in the terminal. This command initializes a git bisect operation, which is a tool for finding the commit that introduced a bug. The `--term-new` option opens a new terminal for each child process during the bisecting process, which can be useful when working with large or complex projects and wanting to keep the terminal output organized.'
        term-old: '[AI] `git bisect start --terminal` is a Git command used to initiate a git bisect session in the terminal mode. This command starts a bisect process, which is a way to find the commit that introduced a specific bug or regression by automatically checking out and testing commits in between two good commits. The `--terminal` option turns on more detailed output for the command, making it suitable for terminal usage.'
