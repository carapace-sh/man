# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pm
description: More commands for managing packages
flags:
    --backend=: Platform-specific optimizations for installing dependencies
    --cache-dir=: Store & load cached data from a specific directory path
    --cwd=: Set a specific cwd
    --dry-run: Don't install anything
    --help: Print this help menu
    --ignore-scripts: Skip lifecycle scripts in the project's package.json
    --link-native-bins=: Link "bin" from a matching platform-specific "optionalDependencies" instead
    --lockfile=: Store & load a lockfile at a specific filepath
    --no-cache: Ignore manifest cache entirely
    --no-progress: Disable the progress bar
    --no-save: Don't save a lockfile
    --no-summary: Don't print a summary
    --no-verify: Skip verifying integrity of newly downloaded packages
    --silent: Don't log anything
    --verbose: Excessively verbose logging
    -c, --config=: Load config
    -f, --force: Always request the latest versions from the registry & reinstall all dependencies
    -g, --global: Install globally
    -p, --production: Don't install devDependencies
    -y, --yarn: Write a yarn.lock file
documentation:
    command: '[AI] `bun pm` is a command used with BUN, a lightweight Node.js package manager. The `pm` stands for "package manager" and this specific command is used to install or manage dependencies listed in a project''s `package.json` file. When you run `bun pm install <dependency>`, it downloads and saves the required package in your project''s `node_modules` folder, ready to be imported and used in your code.'
    flag:
        backend: '[AI] The `bun pm --backend` command is used with Bun, a lightweight JavaScript bundler and package manager. The `--backend` option specifies which backend server to use for package management. Bun supports multiple backends such as npm, Yarn, or none (local filesystem). So, running `bun pm --backend npm` would configure Bun to use NPM as its package manager backend.'
        cache-dir: '[AI] The `--cache-dir` option in the `bun pm` command is used to specify a custom directory for storing npm cache data. Npm, which is used by Bun as its package manager, caches downloaded packages and their dependencies locally to speed up installation times for subsequent uses. By default, npm stores this cache in a hidden folder in the user''s home directory. However, you can override this location using the `--cache-dir` flag when running the `bun pm install` command. This can be useful if you want to store the cache on a network drive or in a specific location for easier backup and sharing across multiple projects.'
        config: '[AI] The `bun pm --config` command is used with Bun, a modern JavaScript package manager. This specific command is for displaying or modifying Bun''s configuration file (usually located at `.bunrc` in the project root directory). By providing this command in your terminal, you can either view the current configuration settings with no additional arguments, or update them by passing new key-value pairs as arguments. For instance, `bun pm --config key value` would set or update the specified key with the provided value in the config file.'
        cwd: '[AI] The command `bun pm --cwd` is a command used in BUN (Bundler for Unix Nodes), a package manager for Node.js projects. This specific command is used to list the packages installed in the current working directory (represented by `--cwd` flag). It provides information about the name, version, and dependencies of each installed package within that directory.'
        dry-run: '[AI] The `bun` is a JavaScript package manager, and the command `pm --dry-run` is used to simulate the installation or updating of packages without actually making any changes to your project. The `--dry-run` flag enables this simulated mode, allowing you to preview the effects of your command before executing it in real life, which can help avoid potential errors and unexpected side effects.'
        force: '[AI] The `bun pm --force` command is used in BUN, a popular JavaScript package manager. It forces the installation or update of a specific package, regardless of any conflicting dependencies or version mismatches. This can be helpful when encountering inconsistencies within your project''s dependencies. However, using `--force` should be done with caution, as it may introduce unintended side effects and potential breakages to your project.'
        global: |-
            [AI] The `flag "bun pm --global"` is related to BUN (Bundler for Unicode Node.js), a package manager for Node.js projects. This specific command is used with the BUN CLI (Command Line Interface) and includes two parts:

            1. `pm`: Short for Package Manager, indicating that this command is related to managing packages or dependencies within a Node.js project.
            2. `--global`: A flag that instructs BUN to install the specified package(s) globally. Global packages are installed system-wide and can be accessed from any Node.js project without having to install them individually in each project.
        help: '[AI] The command `bun pm --help` is used with Bun, a JavaScript package manager. The `--help` flag is an option that displays detailed information about how to use Bun and its packages manager features. It provides a list of available commands, along with their descriptions and usage examples, helping users to understand how to install, publish, or manage packages using Bun.'
        ignore-scripts: '[AI] The `bun pm` command with the flag `--ignore-scripts` is used in the Bun packaging system. This flag instructs Bun to not download and install npm scripts when installing packages. By ignoring scripts, users can reduce the amount of downloaded data and potentially speed up installation times.'
        link-native-bins: '[AI] `bun pm` is a package manager for Node.js projects using Bun, an alternative Node.js runtime. The command `bun pm run --link-native-bins` links native binary dependencies of a project directly to the system PATH instead of bundling them within the project package. This allows native binaries to be used without installing them separately, improving the installation and execution performance for projects that depend on multiple native tools.'
        lockfile: '[AI] The `bun pm --lockfile` command is used with Bun, a JavaScript package manager similar to npm or Yarn. The `--lockfile` option generates or updates a `package-lock.json` file, which records the exact versions of dependencies in use for a project at that point in time. This ensures consistency across different machines and prevents version conflicts when installing or updating packages.'
        no-cache: '[AI] The `bun pm --no-cache` command is related to Bun, a JavaScript package manager and bundler. The `pm` part refers to Bun''s package management functionality. The `--no-cache` flag instructs Bun not to use its cache when installing or updating packages. This can be useful when you want to ensure that you always get the latest version of packages without being affected by any previously cached versions.'
        no-progress: '[AI] The `bun pm` command with the `--no-progress` flag is used in the BUN package manager for Node.js projects to install dependencies without displaying progress updates during the installation process. In other words, it runs the installation silently and without showing any percentage or dot indicators on the console.'
        no-save: '[AI] The `bun pm` command with the flag `--no-save` is used in the Bun packaging manager for Node.js projects. This flag prevents the installation of a package from being added to the `package.json` file''s `dependencies` or `devDependencies`. In other words, it installs packages without saving them to the project''s dependency list. This can be useful when temporarily testing or using packages that are not meant to be permanently installed in the project.'
        no-summary: '[AI] The `bun pm` command with the `--no-summary` flag is used in the Bun packaging manager for Node.js projects. This specific flag disables the output of the summary information that is usually displayed after running a command, such as installing or updating packages. It''s helpful for those who prefer a cleaner console output without the summary.'
        no-verify: '[AI] The `bun pm` command with the `--no-verify` flag is a utility from Bun, a JavaScript module bundler and package manager. This flag disables the verification of downloaded packages before installing them. By default, Bun checks the integrity of packages using cryptographic hashes to ensure the authenticity and integrity of the downloaded code. However, when `--no-verify` is used, this check is bypassed, potentially allowing for the installation of compromised or malicious packages. It''s important to note that using this flag increases the risk of security vulnerabilities in your project and should only be used in trusted environments or for specific use cases where the added security risk is acceptable.'
        production: '[AI] The `flag "bun pm --production"` is used with the Bunning (BUN) package manager for Node.js projects. This flag is employed during the build process to signal that an application is being prepared for production deployment. It optimizes the output by enabling various production-specific settings, such as minification and tree shaking, resulting in a smaller bundle size and improved performance.'
        silent: '[AI] The command `bun pm --silent` is used with Bun, a JavaScript package manager. The `--silent` option instructs Bun to run without displaying any informational messages or progress bars during the installation or build process. It''s particularly useful when running automated scripts or continuous integration workflows where unnecessary output can cause confusion or interfere with other processes.'
        verbose: '[AI] `bun pm --verbose` is a command used in Bún, a lightweight JavaScript package manager. The `--verbose` flag turns on detailed output mode, providing more information about the ongoing package installation or update process. This can be helpful for debugging and understanding what actions Bún is taking behind the scenes.'
        yarn: '[AI] The command `bun pm --yarn` is used with Bun, a Node.js package manager. The `pm` part of the command stands for package manager. The `--yarn` option instructs Bun to use Yarn as the backend dependency resolver instead of its built-in resolver. This allows projects that rely on Yarn for their dependencies to be managed consistently with Bun while still leveraging Yarn''s features.'
