# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: web
description: Build a web application bundle
flags:
    --csp: Disable dynamic generation of code in the generated output.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --native-null-assertions: Enables additional runtime null checks in web applications.
    --no-native-null-assertions: Disables additional runtime null checks in web applications.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-source-maps: Do not generate a sourcemap file.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --pwa-strategy: val                    The caching strategy to be used by the PWA service worker.
    --release: Build a release version of your app (default mode).
    --source-maps: Generate a sourcemap file.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    --web-renderer=: The renderer implementation to use when building for the web.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build web` is a Flutter CLI command used to build and generate static files for deploying a Flutter application as a Progressive Web App (PWA). It compiles the Dart code, generates necessary assets like images and icons, bundles JavaScript and CSS using web technologies like dArtSass or Webpack, optimizes the output and produces an `out/web` directory containing all the static files ready to be deployed.'
    flag:
        csp: '[AI] `flutter build web` is a command-line tool provided by Flutter framework to build a web application from a Dart project. The `--csp` option is used to specify a Content Security Policy (CSP) file for the generated HTML files. A CSP is a security feature that helps prevent Cross-Site Scripting (XSS) and other code injection attacks by restricting the sources of scripts, stylesheets, images, etc. The specified CSP file will be applied to all generated HTML files during the build process.'
        dart-define: '[AI] `flutter build web` is a command used in Flutter to build a web application from a Flutter project. The `--dart-define` option that follows it allows you to define constants as environment variables for the Dart VM during the compilation process. This can be useful when working with libraries that require specific configurations at compile time. For example, if you have a third-party library that needs to know the base URL of your web application at build time, you can define this constant using `--dart-define` and make it available to the Dart code during compilation. This way, the library will be able to use this value without requiring it to be set dynamically at runtime.'
        help: |-
            [AI] `flutter build web --help` is a command used in the Flutter framework to generate a production-ready web application. The `--help` argument displays detailed information about this specific command and its available options. Here's a brief description:

            This command builds your Flutter project for the web platform, meaning it compiles the Dart code, creates optimized images and bundles them along with other assets (CSS, JavaScript, HTML) into a single deployable package (index.html, main.js, assets folder). It uses various optimization techniques like tree shaking, code splitting, and minification to ensure efficient and fast loading of the application.

            When you run `flutter build web --help`, it will output the detailed usage information along with the list of available options that can be used in conjunction with this command, such as:

            - `--base-href`: The base directory for the generated static files (default: "/")
            - `--deploy-to`: Location to deploy the built web application after the build is completed
            - `--release`: Builds a release version instead of a debug one, resulting in smaller and more optimized output.
        native-null-assertions: |-
            [AI] `flutter build web --native-null-assertions` is a command used in Flutter development to build a web application with the option of enabling null safety assertions at the JavaScript interop layer.

            When building for web, Dart code is transpiled into JavaScript. By default, the null-aware operator (`?`) is not available in JavaScript, so Dart's null safety checks are disabled during the build process to generate valid JavaScript. However, enabling `--native-null-assertions` while building will allow these null-safety checks to be included in the generated JavaScript, thus providing stricter type checking and avoiding potential runtime errors related to null values.

            It is important to note that using this option may lead to larger output files as a result of the additional null safety checks. In cases where performance is critical or if there are compatibility issues with older web browsers, it might be necessary to disable this flag for production builds.
        no-native-null-assertions: '[AI] `flutter build web` is a command used in Flutter to build web applications from Dart code. The `--no-native-null-assertions` option disables the use of null safety features for native code in the project. This means that Flutter will not enforce null checks at the C/C++ level when interfacing with platform channels, allowing potential null pointer dereferencing and other null-related issues. This option should be used with caution as it can lead to runtime errors and security vulnerabilities if not handled properly in your application code.'
        no-null-assertions: '[AI] `flutter build web` is a command used in Flutter to build web applications from Dart code. The `--no-null-assertions` flag disables the null safety feature introduced in Flutter 2.12. This means that the compiler will not enforce checking for potential null values, allowing null values to propagate at runtime. Using this option can help avoid errors during development but may introduce potential null pointer exceptions in production. It''s essential to ensure proper handling of null values manually when building without null assertions.'
        no-pub: '[AI] `flutter build web --no-pub` is a command used in Flutter development to build a web application from the project''s existing Flutter codebase. The `--no-pub` flag disables running `pub get` during the build process. This means that the builder assumes you have already run `pub get` locally, which might be necessary if your project depends on external packages and you have already fetched them using `pub get`. When executed successfully, this command generates static web assets in the `build/web` directory.'
        no-source-maps: '[AI] `flutter build web --no-source-maps` is a command used in Flutter development to build a web application from the project''s Dart code. The `--no-source-maps` flag instructs the build process not to generate source maps during compilation, which are files that map the compiled code back to its original source form for use in debugging tools. Disabling source maps can lead to smaller bundle sizes and faster build times.'
        no-tree-shake-icons: '[AI] The `flutter build web --no-tree-shake-icons` command is used to build a Flutter application for web deployment, but with the option `--no-tree-shake-icons` disabled. Tree shaking is a technique used during Flutter''s web compilation process to exclude unused code from the final bundle. However, this technique does not apply to icons by default due to their size being small and the potential overhead of parsing icon usage at compile time being greater than the saved data size. By using `--no-tree-shake-icons`, all icons in the application will be included in the web build even if they are not used, ensuring that all icons are available for potential use during runtime.'
        null-assertions: '[AI] `flutter build web --no-root-check --release --web-renderer=canvaskit --dart-define=FLUTTER_WEB_NULL_SAFE=false` is a command used in Flutter to build a web application for production deployment. The `--null-assertions` (or `--no-null-safety`) flag indicates that the Dart codebase does not use null safety checks, allowing potential null pointer errors to go unchecked during runtime. This option is useful when migrating legacy codebases or working with third-party packages that may still have nullable types. It should be used with caution as it can potentially introduce runtime errors and make the application more susceptible to bugs.'
        profile: '[AI] `flutter build web --profile` is a command used in Flutter development to generate an optimized production build for web projects. The `--profile` option enables Flutter DevTools to profile the application during runtime and provides detailed performance reports. This can help developers identify and fix performance issues in their web applications.'
        pub: '[AI] `flutter build web --pub` is a command used in Flutter development to generate optimized static files for publishing a Flutter application as a Progressive Web App (PWA). It combines the output of `flutter build web` with the dependencies managed by `pubspec.yaml`, which is accomplished by including the `--pub` flag. This command produces artifacts ready for deployment to a web server.'
        pwa-strategy: |-
            [AI] `flutter build web --pprogressive-web-app` is a command used in Flutter to build a Progressive Web App (PWA) for the web. It compiles and bundles your Flutter application's code into static assets, ready for deployment on the web. The `--pwa-strategy` flag enables several features that make the app a PWA, such as:

            1. Service Workers: Enables offline support by caching assets.
            2. Manifest File: Generates a manifest file (`manifest.json`) for better app discovery and installability.
            3. App Icons: Generates multiple sizes of app icons for the browser's home screen.
            4. Start URL: Specifies the index HTML file to be used as the start page.
            5. Cache Strategies: Utilizes efficient caching strategies, ensuring faster load times and offline availability.
        release: '[AI] `flutter build web --release` is a command used in Flutter development to generate an optimized production-ready version of a web application. It compiles the Dart code into JavaScript, creates optimized images and bundles them with their corresponding CSS and HTML files using webpack. The resulting bundle is minified, reducing the file size for faster loading times and improved performance. This command should be used before deploying an application to a production environment.'
        source-maps: '[AI] `flutter build web --source-maps` is a command used in Flutter development to build web applications with source map support enabled. Source maps help developers debug their Dart code in the browser by mapping the compiled JavaScript back to the original Dart sources. This results in more accurate and effective error messages during debugging.'
        target: '[AI] The `flutter build web --target` command is used to build a Flutter application for the web platform. The `--target` option specifies the output directory where the generated files will be placed. This command compiles the Dart code into JavaScript, generates HTML and CSS files, and creates necessary assets directories. The resulting build artifacts can then be deployed on various web hosting platforms to make the application publicly accessible.'
        tree-shake-icons: '[AI] `flutter build web` is a command used in Flutter to build web applications. The `--tree-shake-icons` option is a feature that helps reduce the size of the output by tree shaking unused icons from the generated bundle. This means that only the icons actually used in your application will be included in the final build, resulting in smaller file sizes and faster loading times.'
        web-renderer: '[AI] The `flutter build web --web-renderer` command is used to build a Flutter application for the web using the Canvas rendering engine. This is one of the available rendering options in Flutter for web development, along with the Skia and AngularDart alternatives. The Canvas renderer is based on HTML5 Canvas and JavaScript, which provides good cross-browser compatibility but may have limitations compared to other rendering engines in terms of performance and features. This command generates static HTML, CSS, and JavaScript files that can be deployed directly to a web server or hosting platform.'
