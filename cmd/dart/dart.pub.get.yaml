# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: get
description: Get the current package's dependencies
flags:
    --no-offline: Do not use cached packages instead of accessing the network.
    --no-precompile: Do not precompile executables in immediate dependencies.
    --offline: Use cached packages instead of accessing the network.
    --precompile: Precompile executables in immediate dependencies.
    -h, --help: Print this usage information.
    -n, --dry-run: Report what dependencies would change but don't change any.
documentation:
    command: '[AI] `dart pub get` is a command used in Dart programming language for dependency management. It retrieves and saves the necessary dependencies and their respective packages from the Dart Package Cloud (pub.dev) into the `pubspec.yaml` file''s `flutter` or `dependencies` section. This ensures that your project has all the required packages to run effectively.'
    flag:
        dry-run: '[AI] `dart pub get --dry-run` is a command used in Dart programming language for testing the effects of running `pub get` without actually downloading or installing any new dependencies. It shows what packages would be fetched and their corresponding versions if the command was run without the `--dry-run` flag. This can help in understanding the impact of updates to your project''s dependencies before applying them.'
        help: '[AI] `dart pub get --help` is a command used in Dart programming language for retrieving and managing dependencies for a Dart project. The `--help` option displays detailed usage information about this specific `pub get` command. This command fetches the latest versions of packages specified in the `pubspec.yaml` file, resolves any dependency conflicts, and saves them to the `.dart_tool/cache` directory within your project. By providing `--help`, you receive clear instructions on how to effectively utilize this command to manage dependencies in your Dart project.'
        no-offline: '[AI] The `dart pub get --no-offline` command is used in Dart programming to retrieve and install packages from the Dart Package Cloud repository without using the locally cached packages. This option overrides the default behavior of `pub get` which tries to use locally cached packages first to save time by minimizing network traffic. By adding `--no-offline` flag, you ensure that all dependencies are downloaded and installed afresh from the server.'
        no-precompile: '[AI] `dart pub get --no-precompile` is a command used in Dart programming language for dependency management with `pub.dev`. It fetches and installs dependencies listed in the `pubspec.yaml` file, without performing source code precompilation. The `--no-precompile` option is passed to disable the precompilation process, which builds the Dart-to-JavaScript (Dart2JS) output ahead of time for improved application startup performance. This command is useful when testing or developing an application and you don''t want to spend extra time on precompiling code.'
        offline: '[AI] `dart pub get --offline` is a command used in Dart programming language for installing and updating packages from the Dart Package Cloud, while working offline. This means that the command will use any locally cached packages to fulfill package dependencies instead of downloading new ones online. If a required package isn''t present in the local cache, the command will fail. It''s useful when you have limited or no network connectivity.'
        precompile: '[AI] `dart pub get --precompile` is a command used in Dart programming language for fetching and installing dependencies from the Dart Package Manager (pub) and then precompiling those packages into single-file Dart code. This process can improve the build time and reduce the amount of runtime code loading when running your Dart application. The `--precompile` flag is optional with `dart pub get`, but it''s often used to boost performance for larger projects.'
