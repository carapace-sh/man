# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: linters
description: List current linters configuration
flags:
    --allow-parallel-runners: Allow multiple parallel golangci-lint instances running. If false (default) - golangci-lint acquires file lock on start.
    --allow-serial-runners: "Allow multiple golangci-lint instances running, but serialize them\taround a lock. If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start."
    --build-tags*=: Build tags
    --deadline&=: Deadline for total work
    --disable-all: Disable all linters
    --dupl.threshold&=: 'Dupl: Minimal threshold to detect copy-paste'
    --enable-all: Enable all linters
    --errcheck.check-blank&: 'Errcheck: check for errors assigned to blank identifier: _ = errFunc()'
    --errcheck.check-type-assertions&: 'Errcheck: check for ignored type assertion results'
    --errcheck.exclude&=: Path to a file containing a list of functions to exclude from checking
    --errcheck.ignore&=: Comma-separated list of pairs of the form pkg:regex. The regex is used to ignore names within pkg
    --exclude-case-sensitive: If set to true exclude and exclude rules regular expressions are case sensitive
    --exclude-use-default: 'Use or not use default excludes:'
    --fast: Run only fast linters from enabled linters set (first run won't be fast)
    --fix: Fix found issues (if it's supported by the linter)
    --go=: Targeted Go version
    --goconst.ignore-calls&: 'Goconst: ignore when constant is not used as function argument'
    --goconst.match-constant&: 'Goconst: look for existing constants matching the values'
    --goconst.max&=: maximum value, only works with goconst.numbers
    --goconst.min&=: minimum value, only works with goconst.numbers
    --goconst.min-len&=: 'Goconst: minimum constant string length'
    --goconst.min-occurrences&=: 'Goconst: minimum occurrences of constant string count to trigger issue'
    --goconst.numbers&: 'Goconst: search also for duplicated numbers'
    --gocyclo.min-complexity&=: Minimal complexity of function to report it
    --gofmt.simplify&: 'Gofmt: simplify code'
    --golint.min-confidence&=: 'Golint: minimum confidence of a problem to print it'
    --govet.check-shadowing&: 'Govet: check for shadowed variables'
    --internal-cmd-test&: Option is used only for testing golangci-lint command, don't use it
    --issues-exit-code=: Exit code when issues were found
    --lll.tab-width&=: 'Lll: tab width in spaces'
    --maligned.suggest-new&: 'Maligned: print suggested more optimal struct fields ordering'
    --max-issues-per-linter=: Maximum issues count per one linter. Set to 0 to disable
    --max-same-issues=: Maximum count of issues with the same text. Set to 0 to disable
    --modules-download-mode=: Modules download mode. If not empty, passed as -mod=<mode> to go tools
    --new-from-patch=: Show only new issues created in git patch with file path `PATH`
    --new-from-rev=: Show only new issues created after git revision `REV`
    --no-config: Don't read config
    --out-format=: 'Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate|html|junit-xml|github-actions|teamcity'
    --path-prefix=: Path prefix to add to output
    --print-issued-lines: Print lines of code with issue
    --print-linter-name: Print linter name in issue line
    --print-resources-usage: Print avg and max memory usage of golangci-lint and total time
    --print-welcome&: Print welcome message
    --skip-dirs*=: Regexps of directories to skip
    --skip-dirs-use-default: 'Use or not use default excluded directories:'
    --skip-files*=: Regexps of files to skip
    --sort-results: Sort linter results
    --tests: Analyze tests (*_test.go)
    --timeout=: Timeout for total work
    --uniq-by-line: Make issues output unique by line
    --whole-files: Show issues in any part of update files (requires new-from-rev or new-from-patch)
    -D, --disable*=: Disable specific linter
    -E, --enable*=: Enable specific linter
    -c, --config=: Read config from file path `PATH`
    -e, --exclude*=: Exclude issue by regexp
    -n, --new: 'Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.'
    -p, --presets*=: Enable presets (bugs|comment|complexity|error|format|import|metalinter|module|performance|sql|style|test|unused) of linters. Run 'golangci-lint linters' to see them. This option implies option --disable-all
documentation:
    command: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The command `golangci-lint run` or simply `golangci-lint` without any argument, when invoked in a directory containing Go source files, performs linters checks on those files based on rules defined in `.golangci.yml` file (or the default configuration if none is provided). The result will show potential issues and suggestions for improvements. This tool aims to help developers maintain code quality by enforcing consistency and adherence to best practices.'
    flag:
        allow-parallel-runners: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint <file/directory> --allow-parallel-runners` instructs the tool to perform linting checks on the specified Go source files or directories in parallel using multiple workers. This option improves the efficiency of the linting process by distributing the tasks across multiple processes, reducing the overall time taken for the analysis.'
        allow-serial-runners: |-
            [AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The `--allow-serial-runners` flag is an option used when running multiple instances of `golangci-lint` in serial, meaning one after another on the same codebase.

            This flag allows the consecutive runs to not check the files that have already been linted in the previous run. This can save time and resources as it avoids redundant analysis of unchanged files. However, it may increase the chances of missing newly introduced issues if new files are added or existing ones modified between runs.

            It's important to note that this flag should be used with caution and only when running `golangci-lint` on a stable codebase where minimal changes are expected. It can help improve performance for large projects, but it may not ensure the highest level of code quality if new issues could be introduced between runs.
        build-tags: |-
            [AI] `gołangci-lint` is a popular static code analysis tool for the Go programming language. The `--build-tags` option is used when building or running Go projects, specifically with the `go build` or `go run` commands.

            When you set `--build-tags`, you're enabling specific extra features or optimizations for your project by defining custom build tags. These tags can be associated with various properties or requirements, such as specific dependencies, targets, or configurations.

            In the context of `gołangci-lint`, using the `--build-tags` flag means that you want to apply additional linting rules, checks, or behaviors that may not be included in the default configuration. This can help ensure higher code quality and consistency across your Go projects.

            For example: `go build -o myapp . --tags fast,experimental` will enable the "fast" and "experimental" tags during the build process for `myapp`, which could enable faster linting or experimental lint checks provided by `gołangci-lint`.

            Keep in mind that using custom build tags may result in additional runtime or resource requirements, so it's essential to test your projects thoroughly and ensure they meet performance and reliability expectations.
        config: '[AI] `golangci-lint` is a popular static code analysis tool for Go (Golang) programming language. The command `golangci-lint lint --config` is used to run Golangci Linter with a custom configuration file. The `--config` option specifies the path to the configuration file, allowing users to define their own custom rules or modify existing ones. This command checks the codebase against these rules and provides suggestions for improvements, ensuring adherence to coding standards and best practices.'
        deadline: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--deadline` flag is an option used to set a soft deadline for the linter. When this option is provided, any violation of coding standards or potential issues detected by the linter that cannot be automatically fixed will be reported with a warning instead of an error. This allows developers to prioritize and address the more critical issues first before the deadline passes. If no deadline is set, all violations are reported as errors by default.'
        disable: '[AI] `golangci-lint --disable` is a command used with the Golang static code analysis tool, golangci-lint. The `--disable` flag is used to explicitly turn off specific lint rules that are otherwise enabled by default. This can be useful in cases where there''s a known issue or false positive with a particular rule for your project. You can specify one or more rules to disable by providing their names as arguments to the flag. For example, `golangci-lint run --disable="unused" --disable="nounderscore"` would disable unused and unused import rules.'
        disable-all: '[AI] `golangci-lint --disable-all` is a command used to run Golang static code analysis with golangci-lint, but with all checks disabled. This means that no rules or linting checks will be applied during the analysis process. It''s often used when developers want to temporarily suppress certain warnings or checks for specific use cases without modifying the configuration files.'
        dupl.threshold: '[AI] `golangci-lint` is a static analyzer for Go code. The `--dupl.threshold` option is used to configure the duplicate rules in `golangci-lint`. It sets the minimum number of lines for considering a duplicate locus as an issue. For example, `--dupl.threshold=5` means that only duplicate loci with at least 5 identical lines will be reported as errors. The threshold can be set to any positive integer value or disabled by using zero.'
        enable: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint --enable` instructs this tool to perform checks on one or more Go source files, enabling all available linters by default. These linters help detect potential issues, improve code quality, and adhere to coding standards. By running this command in a terminal, you can identify and fix errors or inconsistencies before executing the code, ultimately ensuring better maintainability and fewer bugs.'
        enable-all: '[AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The command `golangci-lint lint --enable-all` requests that all available checks be run against the Go source files in the current directory or specified by argument. This helps ensure adherence to coding standards, identifies potential issues, and improves code quality by catching errors early in the development process.'
        errcheck.check-blank: |-
            [AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint run --errcheck.check-blank` performs checks using the `errcheck` rule from `golangci-lint`. The option `--errcheck.check-blank` specifically enables checks related to blank errors.

            In Go, an error is a value that signals an error occurred during program execution. When working with functions that can return errors, it's essential to handle the errors appropriately to prevent unexpected application crashes or incorrect behavior. The `errcheck` rule helps ensure that developers check for errors and handle them correctly by checking if errors are being checked at function calls and if they are handled properly, such as being returned from a function or assigned to a variable.

            The option `--check-blank` is used with `errcheck` to specifically look for blank error checks. A blank error check occurs when developers forget to handle an error explicitly by checking its value or ignoring it altogether. The flag `--check-blank` helps identify such cases and suggests improvements to avoid potential runtime errors and improve code maintainability.
        errcheck.check-type-assertions: '[AI] `golangci-lint` is an open-source tool for static analysis of Go code. The option `--errcheck.check-type-assertions` enables a specific linter rule within `golangci-lint`. This rule, called `errcheck`, checks if errors are being handled properly in Go programs. With the `check-type-assertions` suboption enabled, the linter also verifies that type assertions on errors follow good practices to avoid potential runtime errors or unexpected behavior.'
        errcheck.exclude: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--errcheck.exclude` flag is an option that can be passed to the tool when running it. This flag is used to exclude specific packages or files from being checked by the `errcheck` linter, which is responsible for checking errors handling in the Go codebase. By excluding certain packages or files using this flag, developers can focus on checking errors handling in the relevant parts of their code while ignoring areas that they consider less important or already covered by other checks. For instance, if a team has a well-defined error handling policy for a specific package, they might choose to exclude it from `errcheck` scanning to avoid unnecessary warnings and false positives.'
        errcheck.ignore: '[AI] `golangci-lint` is a popular static analyzer tool for the Go programming language. The `--errcheck.ignore` option is a flag used when running `golangci-lint` to disable specific errcheck checks in your Go source code. Errcheck is one of several linters provided by `golangci-lint`, and it focuses on checking error handling practices. By ignoring certain errcheck checks with this flag, you can suppress warnings or errors related to specific error handling styles that you prefer not to change in your codebase. However, keep in mind that disabling checks may lead to potential issues in your code and should be used with caution.'
        exclude: '[AI] `golangci-lint` is a popular static analyzer tool for Go language. The `--exclude` flag is used to exclude specific directories or files from being lint checked during analysis. This can be helpful when you want to focus on specific parts of your codebase, or when dealing with large projects where not all the code needs to be checked at once. With this flag, you can specify a list of globs or paths as arguments to exclude from the analysis. For example: `--exclude ''**/tests/*''` would exclude all files under directories named "tests".'
        exclude-case-sensitive: |-
            [AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The command `golangci-lint lint --exclude-case-sensitive` is used to run linters with case-insensitive exclusion of files or directories from the linting process.

            The flag `--exclude-case-insensitive` (short form: `-x`) is used to define a list of globs to exclude from linting, but it matches the patterns in a case-insensitive way. The flag `--exclude-case-sensitive` (short form: `-X`) follows the same behavior but with case sensitivity preserved, meaning the excluded files or directories must match exactly the given glob patterns.

            So, using the command `golangci-lint lint --exclude-case-sensitive` means that you want to exclude certain files or directories from the linting process while preserving the case sensitivity of the globs in the exclusion list.
        exclude-use-default: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The command `golangci-lint lint --exclude-use-default` instructs it to perform linting checks on Go source files, but explicitly excludes the "use default" rule from being applied during the check. This means that any unused constants or variables initialized with the default value (e.g., zero values for numeric types) will not be flagged as errors by the tool.'
        fast: '[AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The command `golangci-lint linters --fast` is used to perform a fast check of your Go source code files for potential issues and errors. The `--fast` flag speeds up the linting process by only checking syntax and basic rules, skipping more complex analysis like unused imports or cyclic dependencies. This command is useful for quick checks during development or when working with large codebases to identify low-hanging fruit problems without waiting for extensive analysis.'
        fix: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint --fix` performs a static code analysis of one or more Go source files and provides suggestions to fix identified issues automatically, if possible. It checks the code against a set of rules (linters) and reports any deviations. The `--fix` flag enables the automated correction of some linting issues directly in the editor or terminal, improving the overall code quality.'
        go: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The `--go` flag is used to specify that the input to be checked are Go source files. When you run `golangci-lint linters --go`, it will perform linting checks on the specified Go files, looking for potential issues such as syntax errors, unused variables, or insecure coding practices, and reporting any findings. The goal is to improve code quality and adherence to best practices.'
        goconst.ignore-calls: '[AI] `golangci-lint` is a static code analysis tool for Go language. The option `--goconst.ignore-calls` is a sub-rule under the `go:const` linter category. It is used to ignore const calls that are made within the body of other functions or methods. In other words, it allows certain functions or methods to call other functions or methods that have been marked as constants with Go''s `const` keyword, even if those called functions/methods modify their state. This can be useful in cases where the called function is intended to be a constant but has side effects, or when refactoring code and temporarily needing to suppress const warnings.'
        goconst.match-constant: '[AI] `golangci-lint` is a static code analysis tool for Go language. The `--goconst.match-constant` option is one of its linters. This linter checks for potential issues related to constant definitions in Go source code. Specifically, it looks for constants that are defined multiple times with the same value or with slightly different values but similar names, which could lead to inconsistencies or errors in the codebase. By enabling this linter, developers can ensure that their constant definitions are consistent and reduce potential conflicts within their projects.'
        goconst.max: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--goconst.max` flag is one of its linters that checks the maximum number of constant values in a single file. This linter helps to enforce consistency and maintainability by limiting the number of constants per file, making it easier to understand and manage larger Go projects. Using this flag with `golangci-lint run` command will check all files in the project and report any violations.'
        goconst.min: '[AI] `golangci-lint` is a popular static analyzer tool for the Go programming language. The option `--goconst.min` is a sub-rule under the larger `go` rule in its configuration file, specifically related to the `goconst` linter. This rule sets a minimum constant value for Go identifiers that are compared with constants during static analysis. By setting this flag to a specific value (e.g., `--goconst.min 10`), `golangci-lint` will only report issues where the compared constant value is less than the specified one. This helps enforce consistency in your codebase and catches potential errors that could lead to unexpected behavior.'
        goconst.min-len: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint --goconst.min-len` specifies running checks related to constant declarations using the `goconst` sub-linter within `golangci-lint`. The option `--goconst.min-len` sets a minimum length threshold for detected constant names. If a constant name is shorter than the specified length, a warning or error will be emitted to encourage longer and more descriptive constant names for improved code readability and maintainability.'
        goconst.min-occurrences: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The flag `--goconst.min-occurrences` is used to specify a minimum number of occurrences for constant values defined in Go source files. This helps ensure consistency and reduces the risk of errors caused by using different constants with the same name but different values. For example, `--goconst.min-occurrences=3` would flag any constant defined less than 3 times in the codebase.'
        goconst.numbers: '[AI] `golangci-lint` is a popular static analyzer tool for Go language. The command `golangci-lint run --goconst.numbers` performs linting checks specifically focused on constant definitions in Go source code files, using the sub-rule `--goconst.numbers`. It ensures that all constants defined are initialized correctly and follow consistent naming conventions for numbers.'
        gocyclo.min-complexity: |-
            [AI] `golangci-lint` is a popular static code analysis tool for Go programming language. It includes multiple linters that help enforce coding conventions and identify potential issues in the codebase. One of these linters is `gocyclo`, which focuses on detecting excessive cyclomatic complexity, or overly complex methods or functions, potentially leading to harder-to-maintain code.

            The option `--gocyclo.min-complexity` sets a threshold for the maximum allowed cyclomatic complexity. If a method or function exceeds this limit, `golangci-lint` will report it as an issue, encouraging developers to simplify the logic and improve readability and maintainability of their codebase.
        gofmt.simplify: |-
            [AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The command `golangci-lint lint --gofmt.simplify` performs two tasks in one go:

            1. **Linting**: It checks your Go source code against a set of rules to identify potential issues, bugs, and coding style inconsistencies. These checks help maintain code quality and enforce a consistent coding standard.
            2. **Gofmt Simplification**: The `--gofmt.simplify` flag instructs `golangci-lint` to automatically format your Go source code using the Go's official golang.org/x/tools/golfmt formatter before running the linter checks. This ensures that all code is formatted consistently, making it easier to identify issues and follow coding conventions.
        golint.min-confidence: |-
            [AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The `--golint.min-confidence` flag is an option that can be passed to this tool when running lint checks.

            This flag sets the minimum confidence level required for golint to report issues in your Go source code. By default, golint reports all issues regardless of their confidence score. However, you can use `--golint.min-confidence` to filter out potentially false positive or less critical warnings and errors.

            Confidence scores are a measure of how certain the linter is that an issue is valid and needs attention in your code. Higher scores mean more confidence in the reported issues. For example, you might set `--golint.min-confidence=5` to only show issues with a confidence score of 5 or higher (out of a possible maximum of 10). This can help reduce the noise from potentially misleading warnings while still catching most real issues in your codebase.
        govet.check-shadowing: '[AI] `golangci-lint` is a static code analysis tool for Go programming language. The command `golangci-lint lint --govet.check-shadowing` specifies running the `govet` sub-linter within `golangci-lint`. This sub-linter checks for variable and type shadowing, which refers to declaring a new local variable or type with the same name as an existing one in the current or parent scope. Shadowing can lead to unintended consequences and potential bugs. By running this command, developers ensure that they avoid such issues in their Go codebase.'
        internal-cmd-test: '[AI] `golangci-lint` is a static code analysis tool for Go language. The command `golangci-lint linters --internal-cmd-test` runs Golangci Lint with the linters option to check the source code for potential issues or errors, and the internal-cmd-test flag is used to test the internal commands of the project being analyzed. This helps in ensuring that the custom lint rules defined within the project are working as expected.'
        issues-exit-code: |-
            [AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--issues-exit-code` option changes the exit code of the tool based on the number and severity of linting issues found in the source code being analyzed. Here's a brief explanation:

            * By default, when `golangci-lint` finds any issues, it sets the exit code to 1.
            * With `--issues-exit-code`, the exit code is set as follows:
              * An exit code of 0 means no issues were found.
              * An exit code between 1 and n (where n is the maximum number of issues) is proportional to the number of issues found. The more issues, the higher the exit code.
            * This option can be useful in continuous integration systems to determine if a Go project passes or fails based on its linting status.
        lll.tab-width: '[AI] `golangci-lint` is a static analyzer for Go code. The option `--lll.tab-width` is related to the LLL format, which is an alternative Go source code format that uses a fixed width for columns and tabs instead of the standard Go source code format''s flexible column widths. The option sets the tab width used in the LLL format. For example, `--lll.tab-width=4` would set the tab width to 4 spaces.'
        maligned.suggest-new: '[AI] `golangci-lint` is a popular static analyzer tool for Go language. Its `--maligned.suggest-new` flag enables suggesting new lint rules during the analysis. This means that if you have written a custom lint rule and want to propose it to be included in `golangci-lint`, running the tool with this flag will make it consider your new rule as well. It''s a way to contribute and extend the capabilities of the tool.'
        max-issues-per-linter: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--max-issues-per-linter` option sets the maximum number of issues each linter can report before it is considered as an error and stops further checking. This helps users prioritize and address critical issues first while still allowing lesser issues to be reported but not stopping the overall analysis process.'
        max-same-issues: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--max-same-issues N` option, where N is a positive integer, sets a limit on the maximum number of identical issues reported in a single file or across multiple files. This helps to avoid being overwhelmed with redundant warnings and focus on critical issues first.'
        modules-download-mode: |-
            [AI] `gołangci-lint` is a popular static code analysis tool for Go programming language. The option `--modules-download-mode` is used to configure how modules should be downloaded when running the linter.

            There are three available modes:

            1. `on`: Automatically download missing modules before checking the code. This mode ensures that the linter always checks against the latest version of dependencies, but it may take longer to run due to network latency and download times.
            2. `off`: Do not download any missing modules and only check against locally available packages. This mode is faster as there's no network dependency involved, but might miss issues related to newer versions of the dependencies that are not yet installed.
            3. `download`: Similar to 'on', but it also caches the downloaded modules so that they can be reused in subsequent runs. This mode provides a balance between being up-to-date and having fast execution times by only downloading missing modules once and then using the cached versions for future checks.

            Overall, this option is essential when working with Go projects that rely on external dependencies, as it ensures code consistency and helps developers avoid potential issues related to outdated packages or missing dependencies.
        new: '[AI] `golangci-lint linters --new` is a command used to create a new Golang project with integrated static code analysis using GolangCI-Lint, a popular linter tool for the Go programming language. When you run this command in your terminal inside an empty directory, it sets up your project structure with necessary configuration files and initializes the required dependencies in your `go.mod` file. This ensures that your new project follows best practices and adheres to the coding standards set by the community. From then on, each time you build or test your code, GolangCI-Lint automatically checks for potential issues and suggests improvements.'
        new-from-patch: '[AI] `golangci-lint linters --new-from-patch` is a command used to apply new lint rules or rule changes introduced in a patch file to the existing Golang codebase using golangci-lint, a popular static analyzer for Go. This command fetches and applies the new rules or changes to the local configuration, allowing developers to check their code against the updated linting standards.'
        new-from-rev: '[AI] `golangci-lint linters --new-from-rev` is a command used with Golang''s static analysis tool, golangci-lint. The `--new-from-rev` flag instructs the tool to check the code against the latest rules in a specific Git revision instead of using the currently installed rules. This allows users to apply new or updated lint rules before they are officially released.'
        no-config: '[AI] `golangci-lint` is a popular static analyzer for Go code. The command `golangci-lint run --no-config` tells it to check the current Go project for linting issues without using any custom config files. This means it will use the default linting rules provided by `golangci-lint`.'
        out-format: '[AI] `golangci-lint` is a popular static code analysis tool for the Go programming language. The `--out-format` flag is an option that specifies the output format of the linting results. Supported formats include JSON, TSV (Tab-Separated Values), and human-readable text. When you run `golangci-lint` with this option set, it generates the linting reports in the specified format instead of the default human-readable format. This can be useful for integrating `golangci-lint` output into other tools or workflows that require specific data structures.'
        path-prefix: '[AI] `golangci-lint` is a static code analysis tool for Go language. The `--path-prefix` option specifies the prefix of the file paths to be checked. For example, `--path-prefix="./myproject/"` will only check files under the directory `myproject`. It helps in reducing the scope of linting and improves performance by limiting the number of files scanned.'
        presets: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The `--presets` option is used to apply predefined sets of lint rules instead of configuring each rule individually. By using presets, you can enforce a consistent coding style and adhere to widely accepted best practices in the Go community. Commonly used presets include `standard`, `goop`, and `gosec`. Applying a preset with `--presets <preset-name>` option will enable all the rules defined by that preset.'
        print-issued-lines: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint --print-issued-lines` instructs the tool to perform a code check on one or more Go files, and if any issues are found, print out only the line numbers where those issues occur. This can help developers quickly identify and address specific problems in their code without having to wade through extensive reports.'
        print-linter-name: '[AI] `golangci-lint` is a static code analysis tool for Go language. The command `golangci-lint linters --print-linter-name` is used to list the names of all enabled linters that are being run during the analysis. In other words, it provides a report of which linters are being applied in the linting process.'
        print-resources-usage: '[AI] `golangci-lint` is a static analyzer for Go code. The command `golangci-lint lint --print-resources-usage` asks it to perform a lint check on the specified Go files or packages, in addition to outputting information about the usage of resources such as I/O, CPU, and memory. This can help developers identify potential performance issues or resource leaks early in the development process.'
        print-welcome: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The command `golangci-lint linters --print-welcome` is used to display a welcome message from the tool when run in your terminal. This message usually includes information about the version of golangci-lint being used, and a brief description of what the tool does and how to use it effectively in your Go projects. The `--print-welcome` flag explicitly requests this welcome message to be displayed before any other analysis or output is generated.'
        skip-dirs: '[AI] `golangci-lint --skip-dirs` is a command used with the Golang static code analysis tool, golangci-lint. The `--skip-dirs` option is used to exclude specific directories from being lint checked during the analysis process. This can be useful when working on large projects or when certain directories contain code that should not be subjected to linting rules for various reasons, such as legacy code or third-party packages. The directories to be excluded are provided as arguments to the `--skip-dirs` option, separated by commas. For example: `golangci-lint run --skip-dirs="dir1,dir2"`.'
        skip-dirs-use-default: '[AI] `golangci-lint` is a static analyzer for Go code. The command `golangci-lint lint --skip-dirs-use-default` skips applying default configuration to certain directories during the linting process. This means that the linter will not enforce rules or apply config files located in those specified directories unless explicitly overridden by custom config files present in those directories. It is useful when dealing with project structures where some directories may have different linting requirements than others, allowing for a more flexible and customizable linting experience.'
        skip-files: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The `--skip-files` option is used to exclude specific files or directories from being lint checked during a scan. By providing a list of files or globs as arguments, you can instruct `golangci-lint` to bypass those files during its analysis, allowing for customization in the linting process.'
        sort-results: '[AI] `golangci-lint` is a popular static analyzer tool for the Go programming language. The command `golangci-lint lint --sort-results` runs all available checks provided by `golangci-lint` and returns the results sorted by the severity level of each issue detected, from highest to lowest priority. This can help developers prioritize and address potential issues in their codebase more effectively.'
        tests: '[AI] `golangci-lint` is a popular static analyzer for Go code. The command `golangci-lint linters --tests` runs all available linters defined in your Go project''s configuration file (`.golangci.yml`) and checks the tests folders as well. This ensures that not only the main application code but also test files adhere to the desired coding standards, increasing overall code quality.'
        timeout: '[AI] `golangci-lint` is a popular static code analysis tool for Go language. The command `golangci-lint lint <file> --timeout <duration>` runs the Golangci linter against the specified Go file(s) with a timeout limit of `<duration>`. This means that if the linting process takes longer than the given duration, the tool will stop executing and report the errors or warnings found up to that point. It helps in avoiding infinite linting processes due to complex codebases or network issues.'
        uniq-by-line: '[AI] `golangci-lint` is a static code analysis tool for the Go programming language. The `--uniq-by-line` option is one of its linters. This linter ensures that no two checks in the same file produce identical output on the same source code line. By enforcing uniqueness across lines, it helps maintain a more consistent and easier-to-read codebase.'
        whole-files: '[AI] `golangci-lint` is a popular static code analysis tool for Go programming language. The command `golangci-lint lint --whole-files` instructs it to perform a thorough analysis of every Go file in the current directory (and its subdirectories by default) without considering the Go modules or vendor directories. This means that all errors and suggestions found will be related solely to the code written within those files. The goal is to improve code quality, readability, and maintainability.'
