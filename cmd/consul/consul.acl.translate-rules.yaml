# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: translate-rules
description: Translate the legacy rule syntax into the current syntax
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-accessor: Specifies that the TRANSLATE argument refers to a ACL token AccessorID.
    --token-file=: File containing the ACL token to use in the request.
    --token-secret: Specifies that the TRANSLATE argument refers to a ACL token SecretID.
    --token=: ACL token to use in the request.
documentation:
    command: '[AI] `consul acl translate-rules` is a Consul command used to translate Access Control List (ACL) rules between different formats, specifically between JSON and HCL (HashiCorp Configuration Language). This command enables seamless interoperability between different Consul ACL management tools that may use different input formats. By using this command, users can convert their ACL rules from one format to another, ensuring consistency and compatibility within their Consul ecosystem.'
    flag:
        ca-file: '[AI] The `consul acl translate-rules` command is used to translate Access Control List (ACL) rules from an external format, such as JSON or HCL, into Consul''s internal ACL rule representation. The `--ca-file` option specifies the path to a PEM-encoded certificate authority file that will be used for TLS client authentication when communicating with the Consul server. This helps ensure secure communication between the command and the Consul server while managing ACL rules.'
        ca-path: '[AI] `consul acl translate-rules --ca-path` is a command used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command is related to Access Control Lists (ACLs) in Consul and translates rules from external certificates into internal Consul ACL format using the provided Certificate Authority (CA) path as reference. The `--ca-path` flag indicates the location of the CA certificate file on the system. This command is helpful when managing secure access to Consul resources across different certifying authorities.'
        client-cert: '[AI] The `consul acl translate-rules --client-cert` command is used with the Consul Access Control List (ACL) tool to translate and apply security rules from X.509 client certificates to Consul''s access control policy. When you provide a client certificate using the `--client-cert` flag, Consul reads the certificate to extract information such as the entity ID, groups, and permissions, and then translates these into Consul policies or roles. The resulting policy rules are printed out for review, allowing you to apply fine-grained access control based on your X.509 infrastructure.'
        client-key: |-
            [AI] The `consul acl translate-rules` command is used in Consul, an open-source distributed config management and service discovery tool, to translate Access Control Lists (ACLs) from one format to another. Specifically, this command translates between the ACL policy language and the access control rules format.

            The `--client-key` option is a flag that provides a client token or key for authentication purposes. It ensures that only authorized clients can execute certain Consul API actions, including running the `translate-rules` command. This adds an extra layer of security by restricting access to sensitive ACL data.
        datacenter: |-
            [AI] The `consul acl translate-rules --datacenter` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command translates Access Control List (ACL) rules across datacenters in a Consul cluster.

            Consul uses the concept of "datacenters" to group clusters of servers that are geographically or logically close to each other. When applying ACL rules, it's essential to ensure they are consistently applied across all datacenters in the cluster to maintain security.

            The `translate-rules --datacenter` command translates ACL rules from one datacenter to another by mapping local identifiers to their respective counterparts in the target datacenter. This way, you can apply and manage consistent access control policies across your entire Consul cluster.
        http-addr: |-
            [AI] The `consul acl translate-rules --http-addr` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command is related to the Access Control List (ACL) feature of Consul.

            The purpose of this command is to translate and apply security rules defined in one format (usually JSON) into another format (Consul's native ACL rule syntax). The `--http-addr` option specifies the HTTP address of a Consul server instance to which these translated rules will be sent for application.

            In summary, this command is used to translate and send security rules from one format to a Consul server for enforcement.
        stale: '[AI] The `consul acl translate-rules --stale` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command translates Access Control Lists (ACLs) from the legacy format to the new format while accepting potentially outdated or stale ACL rules. In other words, it helps update the ACL rules in a Consul datacenter while allowing for some degree of inconsistency in the input data.'
        tls-server-name: '[AI] The `consul acl translate-rules --tls-server-name` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. It translates Access Control Lists (ACL) rules from using TLS server names based access control to using X.509 certificates based access control. The `--tls-server-name` flag specifies the TLS server name to be translated into a certificate common name or subject alternative name in the new ACL rules.'
        token: '[AI] The `consul acl translate-rules --token` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command translates Access Control List (ACL) rules from the Consul''s high-level policy language to a lower-level format (JSON) that can be applied directly on the Consul API. The `--token` argument provides an authentication token to ensure secure access to the Consul server.'
        token-accessor: '[AI] The `consul acl translate-rules --token-accessor` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command translates Access Control Lists (ACLs) rules from JSON format into the Consul ACL policy format using a token accessor function. The token accessor function is a custom script that returns a Consul token to be used in the translated rules for granting permissions. By default, Consul uses built-in policies like "bind", "write", and "read" but with this command, you can create more complex policies using your own token accessor function.'
        token-file: |-
            [AI] The `consul acl translate-rules` command is used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command translates Access Control List (ACL) rules from the Consul's ACL policy language to another format, such as JSON or HCL (HashiCorp Configuration Language).

            The `--token-file` flag is an option provided with this command that specifies the path to a file containing a valid Consul token. This token grants the required permissions for the user running the command to access and modify the ACL rules in the Consul server.

            In summary, the `consul acl translate-rules --token-file` command translates the Access Control List (ACL) rules using the specified token file for authentication.
        token-secret: |-
            [AI] The `consul acl translate-rules --token-secret` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command translates Access Control List (ACL) rules from one format to another using a token with secret access rights.

            The `--token-secret` option specifies the name of the Consul key that stores the token with secret access rights. The user running this command must have the necessary permissions to read and use this token. This command translates ACL rules from an external format, such as JSON or HCL, into a format that can be applied in Consul's ACL policy. It is particularly useful when managing complex security policies across multiple services and applications.
