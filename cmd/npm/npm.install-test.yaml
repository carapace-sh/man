# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install-test
description: Install package(s) and run tests
flags:
    --audit: Conduct security audit
    --bin-links: Create symlinks for package executables
    --dry-run: Only report changes
    --fund: Display funding message
    --global-style: Use global layout
    --ignore-scripts: Disable scripts
    --legacy-bundling: Use legacy bundling
    --no-save: Prevents saving to `dependencies`
    --omit*=: Exclude package
    --package-lock: Only update package-lock.json
    --save-dev: Package will appear in your `devDependencies`
    --save-optional: Package will appear in your `optionalDependencies`
    --save-peer: Package will appear in your `peerDependencies`
    --save-prod: Package will appear in your `dependencies`.
    --strict-peer-deps: Fail and abort for any conflicting `peerDependencies`
    --workspaces: Enable running a command in the context fo all workspaces
    -E, --save-exact: Save exact package version
    -S, --save: Package will appear in your `dependencies`
    -g, --global: operate in global mode
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: |-
        [AI] The `npm install-test` command is not a standard npm (Node Package Manager) command. It seems like there might be some confusion with the syntax or the name of this command.

        The correct command to install and run tests for an npm project would typically be one of the following:

        1. `npm test` - runs the tests defined in your package.json file using the test command specified there.
        2. `npm run test:` or `yarn test:` - runs custom scripts for testing, as defined in the script section of package.json.

        For more information about managing packages and their tests with npm, visit: https://docs.npmjs.com/cli/test
    flag:
        audit: '[AI] `npm install-test --audit` is a command used in Node.js projects to run automated tests and perform a security audit of the project''s dependencies. The `install-test` part runs tests by installing the required test packages and running them. The `--audit` option enables the security audit feature of npm, which checks the project''s package.json file against the latest vulnerabilities database to identify any known security risks in the dependencies. It outputs a report with details about any potential issues found, helping developers maintain a secure dependency tree for their projects.'
        bin-links: |-
            [AI] `npm install-test --bin-links` is a command used in Node.js package management with npm (Node Package Manager). This command is used to install and link test dependencies as binaries under `./node_modules/.bin`.

            When you run tests using a test framework like Mocha or Jest, they usually require certain dependencies. Instead of manually installing these dependencies in every project and adding them to the scripts section of `package.json`, you can use `--bin-links` flag during testing installation.

            By using this flag, npm links the dependencies as binaries (executable files) under `./node_modules/.bin`. This means that when you run tests using these test frameworks, they can easily access the required dependencies without needing to be installed separately. It simplifies the setup process for testing and allows a more consistent experience across different projects.
        dry-run: '[AI] `npm install-test --dry-run` is a command used in Node.js projects with npm (Node Package Manager). This command runs the `install-test` script, which typically installs testing dependencies for a project. The `--dry-run` option is used to perform a simulated run of the command without actually making any changes to the file system or installing packages. It provides an overview of what would be installed if the command were executed without any risks involved in the actual installation process.'
        fund: '[AI] `npm install-test --save-dev` is a command used in Node.js projects during package installation with npm (Node Package Manager). It installs and adds a test-related package to the project''s `node_modules` directory, listed as a "development dependency" in the `package.json` file under `devDependencies`. This means that the package is only installed when running `npm install` with the `--save-dev` flag and is not included in the production build by default.'
        global: '[AI] `npm install-test --global` is a command used in Node.js programming to install and make globally accessible the "mocha" and "chai" testing frameworks and their assertion library, respectively, via npm (Node Package Manager). The "--global" flag indicates that these packages should be installed for global use across projects rather than within a specific project folder.'
        global-style: '[AI] `npm install-test` is a command used in Node.js projects for installing testing frameworks and tools as dependencies. The `--global-style` option, if present, instructs npm to install the test packages as Dev Dependencies with a saved `devDependencies` entry in the `package.json` file, rather than as Development Dependencies with an `optionalDevDependencies` entry or as part of the project''s Production Dependencies. The primary difference between these dependency types lies in their lifecycle during npm installations and builds. Dev Dependencies are installed only during development and testing phases, while optional Dev Dependencies are installed if present but can be omitted without affecting the core functionality of the project. Production Dependencies are required for running the application in its intended environment.'
        ignore-scripts: '[AI] `npm install-test --ignore-scripts` is a command used in Node.js projects to run tests during the installation of new packages via npm. The `--ignore-scripts` option is used to bypass the execution of scripts mentioned in the packages'' `package.json` files, which can help prevent unintended side effects or conflicts during the installation process. The primary goal is to ensure that tests are run consistently across different environments and setups.'
        legacy-bundling: |-
            [AI] `npm install-test --legacy-bundling` is a command used in Node.js package management with npm (Node Package Manager). This command does two things:

            1. Installs the test packages listed in the `devDependencies` section of the `package.json` file using `npm install`.
            2. Enables "legacy bundling" mode when running tests using `jest`, a popular testing framework, with `--legacy-bundling` flag. This option is necessary for running tests in projects that use older libraries or Babel configurations which don't support modern ECMAScript features out of the box. It ensures proper test execution and reporting.
        no-save: '[AI] `npm install-test --no-save` is a command used in Node.js projects with npm (Node Package Manager). This command installs a test package, specifically the `mocha` and `chai` testing frameworks which are commonly used together, without adding them to the `package.json` file''s dependencies or devDependencies sections. The `--no-save` flag is used to prevent automatic saving of the new packages in the project''s dependency list. This command helps in running tests locally without including the packages in the version control system or making them part of the published package.'
        omit: |-
            [AI] `npm install-test --omit` is a command used in Node.js projects for managing dependencies and running tests.

            `npm` is the Node Package Manager, and `install-test` is a script provided by some test runners like Mocha or Jest to install and run tests as part of the development workflow. The `--omit` flag modifies the behavior of this command: it tells npm not to install any new packages that are listed as dependencies of the test dependencies.

            This can help reduce the number of installed packages, save bandwidth during development and speed up the installation process if you have already installed those packages before. It can also help in environments where package installations are restricted.
        package-lock: '[AI] `npm install-test` is a command used in Node.js projects with npm (Node Package Manager). It runs the tests defined in the `package.json` file under the "tests" key, or in a `testing.yml` or `testing.json` file if available. The `--package-lock` flag ensures that the installation process uses the previously saved package-lock.json file for consistency and reproducibility of the project dependencies. This is particularly useful when working on a team or when moving between development environments.'
        save: |-
            [AI] `npm install-test --save` is a command used in Node.js projects for managing dependencies. This specific command:

            1. Installs the "test" package from npm (Node Package Manager).
            2. Saves it as a development dependency, meaning it's needed for testing but not for production use.
            3. Updates the `package.json` file to include or modify the "test" package entry.
        save-dev: '[AI] `npm install-test --save-dev` is a command used in Node.js projects with npm (Node Package Manager). It installs the "mocha" and "chai" testing frameworks, along with their required dependencies, as devDependencies in your package.json file. This means these packages will not be included in the production build but are essential for running tests locally during development.'
        save-exact: |-
            [AI] `npm install-test --save-exact` is a command used in Node.js package management with npm (Node Package Manager). This command does two things:

            1. Installs a specific test package, such as "mocha" or "jest", into your project's node_modules directory.
            2. Saves the exact specified version of the package in package.json under dependencies with a `save-exact` tag, meaning that version will be installed and not updated automatically when running `npm install`.
        save-optional: '[AI] `npm install-test --save-optional` is a command used in Node.js programming for installing the `jest` testing framework and saving it as an optional dependency in the `package.json` file. When you run this command in your terminal or command prompt, npm (Node Package Manager) will download and install Jest along with its peer dependencies, if any. The `--save-optional` flag indicates that the package is not required for the project to run but can be optionally used, so it won''t be added as a "devDependency" but rather an "optionalDependency." This can save development time by allowing projects to use Jest or other optional packages if they choose.'
        save-peer: '[AI] `npm install-test --save-peer` is a command used in Node.js package management with npm (Node Package Manager). This command installs a testing framework, such as Mocha or Jest, as a peer dependency. A peer dependency is a package that your project depends on, but it''s not a direct dependency of the package you are installing. It means both packages can be installed independently but work together in the same application. The `--save-peer` option adds the installed package to the `peerDependencies` section in the `package.json` file so it gets included when other developers run `npm install`.'
        save-prod: |-
            [AI] `npm install-test --save-prod` is a command used in Node.js projects for managing dependencies with npm (Node Package Manager). This specific command does the following:

            1. Installs a testing framework or library named "test" as a devDependency using npm.
            2. Saves the installed package as a production dependency with `--save-prod` flag instead of a development dependency by default. This means that the package will be included in the final bundle when building for production, unlike devDependencies which are only used during development and testing.
        strict-peer-deps: |-
            [AI] The command `npm install-test --strict-peer-deps` is used in Node.js projects during testing. It runs `npm install` with the added flag `--strict-peer-deps`.

            When running `npm install`, packages and their dependencies are installed. `--strict-peer-deps` is an optional flag that ensures all direct and peer dependencies (packages listed in "peerDependencies" in package.json) are installed and compatible. If not, it will throw an error. This is useful when developing or testing a project to ensure the correct version of each dependency is present.
        workspace: '[AI] `npm install-test` is a script provided by Node Package Manager (npm) used for running tests in a Node.js project. The `--workspace` flag is an option for the npm CLI that specifies the current project as part of a workspace, allowing it to install and run tests concurrently across multiple packages within the workspace. This command will install test dependencies for each package and run their respective tests in parallel.'
        workspaces: '[AI] `npm install-test` is a script used for running tests in multiple packages within a single NPM workspace using npm version 5 or above. The `--workspaces` flag enables the execution of the command across all workspaces defined in the `package.json` files at the root level, rather than just the current package. This allows for easier testing of entire projects with multiple packages.'
