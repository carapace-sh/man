# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: serviceaccount NAME [--dry-run=server|client|none]
aliases:
    - sa
description: Create a service account with the specified name
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create serviceaccount` is a command used to create a new ServiceAccount in Kubernetes. A ServiceAccount is an API object that manages access for a process or application to Kubernetes clusters. It includes a default secret that can be used to authenticate with the Kubernetes API server. When you run `kubectl create serviceaccount [NAME]`, it creates a new ServiceAccount named `[NAME]` in your current namespace, along with a corresponding default secret. You can specify additional properties such as labels or annotations using flags or YAML manifest files.'
    flag:
        allow-missing-template-keys: |-
            [AI] The `kubectl create serviceaccount` command is used to create a new ServiceAccount object in a Kubernetes cluster. The option `--allow-missing-template-keys` enables the creation of the ServiceAccount even if some required keys are missing from the YAML manifest file.

            Normally, Kubernetes requires that all required keys be present for the creation of an object. But with this flag set, Kubernetes will create the ServiceAccount without checking for missing keys and will log a warning instead. This can be useful when creating manifests dynamically or when migrating resources from older versions where some keys may not be present.
        dry-run: '[AI] `kubectl create serviceaccount --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool `kubectl`. This command is used to create a ServiceAccount object in the current cluster, but it will not actually apply or create the object. Instead, it only outputs what the YAML definition of the ServiceAccount would look like if it were created. This can be useful for reviewing or testing the configuration of a new ServiceAccount before applying it to the cluster.'
        field-manager: '[AI] `kubectl create serviceaccount` is a command used to create a new ServiceAccount object in Kubernetes using the `kubectl` tool. The `--field-manager` flag is an optional argument that allows you to use Custom Resource Definitions (CRDs) and manage fields that are not directly supported by the Kubernetes API. With this flag, you can specify custom schema extensions and manipulate fields beyond the standard Kubernetes object schema. This flag enables advanced users to create, update, or delete complex objects in a more fine-grained way. For simple ServiceAccount creation without using custom extensions, you don''t need to use the `--field-manager` flag.'
        output: '[AI] `kubectl create serviceaccount --output` is a command used in Kubernetes to create a new ServiceAccount object. The `--output` flag specifies the format for the output of the command. This can be set to json or yaml, depending on the user''s preference. For example, `kubectl create serviceaccount my-serviceaccount --output=json` will create and output the new ServiceAccount in JSON format. Similarly, `kubectl create serviceaccount my-serviceaccount --output=yaml` will create and output it in YAML format. This command does not create any resources or perform any other actions besides generating the configuration for a new ServiceAccount.'
        save-config: '[AI] `kubectl create serviceaccount --save-config` is a command used with Kubernetes'' `kubectl` tool to create a new ServiceAccount resource in a cluster. The `--save-config` flag instructs `kubectl` to save the output of the creation operation as a YAML file on the local machine, typically named `serviceaccount-<serviceaccount-name>.yaml`. This allows users to easily reapply the configuration later or apply it to other clusters. The command creates the ServiceAccount with default settings, but you can specify additional properties in the command if needed.'
        show-managed-fields: '[AI] `kubectl create serviceaccount --show-managed-fields` is a command used in Kubernetes to create a new ServiceAccount resource, but with an additional flag `--show-managed-fields`. This flag causes the output of the `create` operation to include an extra section titled "Managed Fields" in the created object''s YAML representation. The Managed Fields is a feature that records the history of field updates for Kubernetes API objects, helping to understand who changed what and when. It does not affect the creation or functionality of the ServiceAccount itself.'
        template: '[AI] `kubectl create serviceaccount --template` is a command used in Kubernetes to create a new ServiceAccount resource using a given template. The `--template` option instructs `kubectl` to generate the YAML definition of the resource based on a provided template file instead of creating it directly from user input or an existing file. This allows for dynamic generation of Kubernetes resources with customized configurations.'
        validate: '[AI] The `kubectl create serviceaccount --validate` command is used to check the validity of the provided YAML configuration for creating a new ServiceAccount resource in a Kubernetes cluster, without actually creating it. It performs syntax validation and ensures that all required fields are present and correct. If the configuration is valid, no error message will be displayed; if not, an error message will indicate where the issues lie. This command is useful for catching potential mistakes before applying changes to the live environment.'
