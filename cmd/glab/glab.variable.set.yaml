# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set <key> <value>
aliases:
    - new
    - create
description: Create a new project or group variable
flags:
    -g, --group=: Set variable for a group
    -m, --masked: Whether the variable is masked
    -p, --protected: Whether the variable is protected
    -s, --scope=: The environment_scope of the variable. All (*), or specific environments
    -t, --type=: 'The type of a variable: {env_var|file}'
    -v, --value=: The value of a variable
documentation:
    command: |-
        [AI] `glab` is a Git client tool by GitLab that provides an interface for common Git operations with added features specific to GitLab. The `glab variable set` command is used to set or update environment variables locally, which can be used in your terminal or scripting sessions to interact with GitLab and other GitLab tools more efficiently. This allows you to avoid having to enter long access tokens, project IDs, or other sensitive data every time you use the `glab` command. Instead, you can set these variables once and have them automatically included in your `glab` commands. For example:

        ```bash
        glab variable set GIT_TERMINAL_PROMPT="My Custom Prompt"
        glab variable set PERSONAL_ACCESS_TOKEN=<your_access_token>
        ```

        This sets the custom Git terminal prompt and your personal access token as environment variables for `glab`. These variables can then be referenced in your commands or scripts to make them more user-friendly and secure.
    flag:
        group: |-
            [AI] The `glab` is a Git interface tool for the Kubernetes ecosystem, used to manage Git repositories that are connected to Kubernetes clusters. The command `glab variable set --group` is used to set or update the values of variables in a Kubernetes `Values.yaml` file at the specified group level.

            Here's a brief explanation of the flags:

            * `variable`: Specifies the name of the variable to be set or updated.
            * `set`: Instructs `glab` to set the value of the variable.
            * `--group`: Defines the group level (namespace) where the `Values.yaml` file is located in the Git repository. This flag helps to differentiate between variables that have the same name but belong to different groups or namespaces.
        masked: |-
            [AI] The `glab` command is a Git interface tool for the `traeffic` and `lazygit` projects. The `flag --masked` used with the `glab variable set` command refers to hiding sensitive data in the terminal output.

            When you set a new environment variable using `glab variable set`, by default, its value is displayed in plain text. However, if you want to hide the value for security reasons, you can use the `--masked` flag. With this flag, Glab will replace the sensitive data with masked characters like asterisks (*) or dots (.).

            In summary, the `glab variable set --masked` command sets a new environment variable and hides its value in the terminal output by masking the characters with * or .
        protected: |-
            [AI] The `flag "glab variable set --protected"` is a command used in GitLab CI/CD to set or update a protected variable with Glab (GitLab CLI). Protected variables are environment variables that can only be set or modified using secure methods, such as through the GitLab web interface, API tokens, or by members of specific groups. This command sets or updates a protected variable in a GitLab project's `.gitlab-ci.yml` file, ensuring that sensitive information is kept secure. It follows the syntax:

            ```bash
            glab variable set <NAME> <VALUE> --protected [--project <PROJECT_ID|NAME>]
            ```
        scope: '[AI] The `flag "glab variable set --scope"` is a command used in GitLab''s CLI tool, `glab`, to set or update GitLab CI/CD variables with a specific scope. The `--scope` flag specifies the environment where the variable will be applied: global (applicable across all projects), group (applicable to a specific group of projects), or project (applicable only to the specified project). For example, `glab variable set MY_VAR --scope=project my_project` sets the "MY\_VAR" variable only for the "my\_project".'
        type: '[AI] The `flag "glab variable set --type"` is used in GitLab CI/CD pipelines with the Glab (GitLab CLI) tool. This command sets a pipeline variable with a specific data type, such as string, number, boolean, or array. The `--type` option specifies the data type of the variable being set, ensuring consistent handling and validation in downstream jobs within the pipeline. For example, `glab variable set MY_VAR --type string my_value` sets a new variable `MY_VAR` with string data type `my_value`.'
        value: '[AI] `flag "glab variable set" --value` is a command used in the GitLab CLI (Command Line Interface) tool called "Glab". This command sets the value of a GitLab CI/CD variable. The `--value` option is used to specify the new value for the variable. When you run this command, the specified variable will be updated with the provided value in your GitLab project''s .gitlab-ci.yml file.'
