# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]
description: Create a secret from a local file, directory, or literal value
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --append-hash: Append a hash of the secret to its name.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --from-env-file*=: Specify the path to a file to read lines of key=val pairs to create a secret.
    --from-file*=: Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.
    --from-literal*=: Specify a key and literal value to insert in secret (i.e. mykey=somevalue)
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --type=: The type of secret to create
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create secret generic` is a Kubernetes command used to create and manage a new Kubernetes Secret object. A Secret is an API object that can hold any type of data, such as plain text passwords, SSH keys, or certificates. The `create` sub-command followed by `secret`, specifies the creation of a new Secret. The `generic` argument indicates that this Secret will store arbitrary key/value pairs in its data section. The command requires the name of the new Secret and the key/value pairs to be provided as arguments or via files. For example: `kubectl create secret generic mysecret --from-literal=key1=value1 --from-literal=key2=value2`.'
    flag:
        allow-missing-template-keys: |-
            [AI] `kubectl create secret generic` is a command used to create a Kubernetes secret in the cluster using the `kubectl` CLI tool. The `--allow-missing-template-keys` flag allows for creating the secret even if some keys are missing from the provided data.

            In other words, when creating a secret using a template file with missing keys, this flag ensures that Kubernetes still creates the secret without failing, rather than rejecting the creation due to missing keys in the template. The secret will be created as empty and can be updated later with the complete key-value pairs.
        append-hash: |-
            [AI] `kubectl create secret generic` is a command used in Kubernetes to create a new secret object. A Kubernetes secret is an API object that holds sensitive data such as passwords, OAuth tokens, and SSH keys.

            The `--append-hash` option appends a hash value to the existing secret data. This option is useful when you want to add new sensitive data to an existing secret without modifying its original content. Instead, the new data will be appended with a hash value for security purposes.

            So in summary, `kubectl create secret generic --append-hash` creates a new secret object or updates an existing one by appending new sensitive data with a hash value for added security.
        dry-run: '[AI] `kubectl create secret generic` is a command used to create a new Kubernetes secret in the current cluster. The `--dry-run` flag is an optional argument that, when provided, will return the YAML manifest describing what would be created if the command were run without the flag. This allows users to review and make modifications before actually creating the resource. In summary, it''s a way to preview the creation of a Kubernetes secret using `kubectl`.'
        field-manager: '[AI] `kubectl create secret generic` is a command used to create a Kubernetes Secret object in your cluster. A Secret stores sensitive information such as passwords, OAuth tokens, or SSH keys. The `--field-manager` flag is an optional argument that allows you to control the behavior of Kubernetes when merging fields in custom resources. With this flag, you can specify a strategy for resolving conflicts between fields in your resource manifest and the existing Secret''s data. Some common strategies include ''ErrorIfPresent'', ''WarnIfDuplicatesKey'', and ''Overwrite''. By default, `kubectl create secret generic` does not use any field manager; it simply creates a new Secret with the provided key-value pairs.'
        from-env-file: |-
            [AI] `kubectl create secret generic` is a command used in Kubernetes to create a new secret object from environment files. A Kubernetes secret is an object that holds sensitive data such as passwords, OAuth tokens, and SSL certificates.

            The `--from-env-file` flag specifies the path to one or more files containing key-value pairs of environment variables. The command reads these variables and creates a new secret with these keys as labels and values as data in base64 encoded format. This way, sensitive data can be securely stored and accessed by Kubernetes applications without exposing the data in plaintext.
        from-file: '[AI] `kubectl create secret generic` is a command used in Kubernetes to create a new secret object from one or more files. The `--from-file` option specifies the path to the key-value pairs that will be stored in the secret as files. The command creates and encodes the contents of the specified files, then stores them as data in the newly created secret. This command is often used for securely storing sensitive information like passwords or OAuth tokens in a Kubernetes cluster.'
        from-literal: '[AI] `kubectl create secret generic` is a command used to create a Kubernetes Secret object in the cluster. The `--from-literal` flag specifies that the data for this Secret will be provided as key-value pairs in the command line itself, instead of using a file or other external source. This can be useful when dealing with small amounts of sensitive data that need to be encrypted at rest and transmitted securely within the cluster. The format is `kubectl create secret generic <secret-name> --from-literal=<key>=<value> [--from-literal=...]`.'
        output: '[AI] The `kubectl create secret generic` command is used to create a new Kubernetes Secret resource in a cluster. A Secret holds an opaque arbitrary data which is base64-encoded and can be referenced by other resources, typically as an environment variable or a configuration file. The `--output` flag specifies the format for the output of the command. For example, `--output=json` returns the secret''s creation as a JSON object or `--output=yaml` returns it in YAML format for easy manipulation and deployment.'
        save-config: |-
            [AI] `kubectl create secret generic` is a command used in Kubernetes to create a new secret object. A Kubernetes secret is an API object that holds sensitive data such as passwords, OAuth tokens, and SSL certificates.

            The `--save-config` flag is an optional argument for this command. If used, it will save the output of the command in a YAML file named `<secret-name>.yaml`. This can be useful for creating and managing secrets in a declarative way by keeping them under version control using tools like Git.

            So, in summary, `kubectl create secret generic --save-config <secret-name>` creates a new Kubernetes secret object with the given name, and saves its YAML configuration file as `<secret-name>.yaml`.
        show-managed-fields: '[AI] The `kubectl create secret generic` command is used to create a new Kubernetes secret in the cluster. The `--show-managed-fields` flag is an optional argument that, when provided, will display the managed fields of the secret resource after it is created. Managed fields are the fields in the resource that were set by Kubernetes controllers or other management tools, as opposed to those set manually by users. This flag can be helpful for understanding which fields in a resource have been automatically managed and which require manual updates.'
        template: |-
            [AI] `kubectl create secret generic` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a new Kubernetes Secret resource in the current namespace.

            The `--template` flag is an optional argument that allows you to define the data for the secret using a template. The template is typically written in Go's `text/template` syntax and can be used to generate dynamic secrets based on input values. This feature comes in handy when creating secrets from environment variables, configuration files, or other sources without exposing sensitive information in plain text during creation or storage.
        type: '[AI] `kubectl create secret generic` is a command used to create a Kubernetes Secret object with generic data. A Secret holds an opaque arbitrary data which can be referenced as an environment variable, a configuration map or a volume in a Pod. The `--type` flag specifies the type of Secret being created, and for a generic Secret, it is not provided since the data can be of any type.'
        validate: '[AI] The `kubectl create secret generic` command is used to create a Kubernetes Secret object in a cluster, which holds sensitive data such as passwords or keys. The `--validate` flag that follows this command is an optional argument that specifies a YAML schema file for validation of the created Secret''s metadata and data fields against the provided schema. This can be useful for ensuring consistency with custom definitions or organization standards, and for catching potential errors before applying the Secret to the cluster. Without `--validate`, Kubernetes will still create the Secret but may not enforce any additional validation beyond basic syntax and format requirements.'
