# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rustc
description: compiler for the Rust programming language
flags:
    --cap-lints=: Set the most restrictive lint level
    --cfg=: Configure the compilation environment
    --crate-name=: Specify the name of the crate being built
    --crate-type=: separated list of types of crates for the compiler to emit
    --edition=: Specify which edition of the compiler to use when compiling code
    --emit=: Comma separated list of types of output for the compiler to emit
    --explain=: Provide a detailed explanation of an error message
    --out-dir=: Write output to compiler-chosen filename in <dir>
    --print=: Compiler information to print on stdout
    --target=: Target triple for which the code is compiled
    --test: Build a test harness
    -A, --allow=: Set lint allowed
    -C, --codegen=: Set a codegen option
    -D, --deny=: Set lint denied
    -F, --forbid=: Set lint forbidden
    -L*=: Add a directory to the library search path
    -O: Equivalent to -C opt-level=2
    -V, --version: Print version info and exit
    -W, --warn=: Set lint warnings
    -g: Equivalent to -C debuginfo=2
    -h, --help: Display this message
    -l*=: Link the generated crate(s) to the specified native library NAME
    -o=: Write output to <filename>
    -v, --verbose: Use verbose output
documentation:
    command: |-
        [AI] `rustc` is the Rust Compiler, which is responsible for translating Rust source code (files with `.rs` extension) into machine code or bytecode, depending on the target platform. It's a crucial component in building and executing Rust projects. Users typically invoke it by providing one or more source files followed by any required flags or arguments to control the compilation process. For instance:

        ```sh
        $ rustc main.rs
        ```

        This command compiles the `main.rs` file, producing an executable binary named `main`. However, in larger projects, multiple source files may be involved and additional steps such as linking and generating library artifacts might be necessary. To cover those cases, the Rust build system, `Cargo`, is commonly used to manage dependencies and automate the compilation process.
    flag:
        L: '[AI] The `-L` flag in Rust''s compiler `rustc` is used to specify a directory to include in the search path for external crates specified in the project''s `Cargo.toml` file or through the environment variable `RUST_SRC_PATH`. This can be useful when working with multiple projects or when certain dependencies are not available in the standard registry.'
        O: '[AI] `rustc -O` is a command-line option used with the Rust compiler (`rustc`) to enable the highest level of optimization. The `-O` flag instructs the compiler to produce machine code that runs as fast as possible without considering debugging information or other non-essential elements. This results in smaller and faster executables, making it suitable for production use.'
        allow: |-
            [AI] `rustc --allow` is a command-line option for the Rust compiler (rustc). It's used to enable or allow specific crate features or dependencies that would normally be forbidden by Rust's default borrow checking and package manager Cargo's dependency rules.

            The flag takes a list of items, each item being a crate name followed by a feature or dependency name, separated by an equals sign (=). For example, `--allow cratename=feature` or `--allow cratename=dependency:version`.

            By explicitly allowing certain features or dependencies, the compiler will not give error messages related to those items and will proceed with building your project. However, be cautious when using this flag, as it can lead to unsolved issues that might cause runtime errors or security vulnerabilities. It's recommended to thoroughly investigate the allowed features or dependencies before incorporating them into your codebase.
        cap-lints: '[AI] `rustc --cap-lints` is a command used in Rust programming language to enable the Compilation Assistant (CAP) lints during compilation. CAP lints are a set of checks that go beyond the regular borrow checker and warnings provided by the Rust compiler. They aim to improve code safety, readability, and maintainability by detecting potential issues related to naming conventions, unused imports, and more. By using `rustc --cap-lints`, developers can ensure their code adheres to a higher standard of Rust idiomatic style and best practices.'
        cfg: '[AI] `rustc --cfg` is a command-line argument used with the Rust compiler (`rustc`) to enable or disable certain compiler features through configuration macros. The `--cfg` flag followed by a string sets the value of a configuration macro, which can be checked within Rust code using the `cfg!()` macro. This allows for conditional compilation and customizing the behavior of the Rust compiler based on specific use cases or environments.'
        codegen: '[AI] `rustc --codegen` is a command-line argument for the Rust compiler (`rustc`) that instructs it to generate or output specific codegen crates instead of compiling a Rust source file. These crates contain machine code or low-level representations of various Rust language features, which can be used by other projects for customized or performance-critical implementations. It''s an advanced feature primarily used for writing rust-bindings or creating performance-critical libraries and systems.'
        crate-name: '[AI] `rustc --crate-name` is a command-line option for the Rust compiler (rustc) that sets the name of the crate being compiled. When you run `rustc` without specifying a crate name, it compiles the current directory''s source files into the default library with the name "main". However, when you use `--crate-name` followed by the desired name, the output will be a library or executable with that specified name. This is useful when creating custom crates for reuse in other projects or for building binary artifacts to distribute to others.'
        crate-type: '[AI] `rustc --crate-type` is a command-line option used with Rust''s compiler, rustc. It specifies the type of crate output that should be generated. A crate in Rust can be a library or an executable. By default, when you compile a Rust project, rustc generates an executable. However, if you want to create a library instead, you need to specify `--crate-type lib`. This option allows you to control the type of output during compilation.'
        deny: '[AI] `rustc --deny` is a command-line argument for the Rust compiler (rustc). It enables all possible error messages and disallows potentially risky language features by setting the compiler''s density level to max. This results in more conservative compilation, helping to improve code safety and adherence to the Rust language standards.'
        edition: '[AI] `rustc --edition` is a command-line option for the Rust compiler (`rustc`) that specifies the edition of Rust language features to be used when compiling a project. The Rust programming language evolves over time, and new features are introduced in new editions. By specifying an edition, `rustc` ensures that only compatible language features are used during compilation. For instance, `--edition ''2018''` indicates that the 2018 edition of Rust should be used.'
        emit: '[AI] `rustc --emit` is a command-line option used with the Rust compiler (`rustc`) to specify which output formats to emit during compilation. By default, `rustc` generates object files and a binary executable. However, you can use `--emit` to request specific output formats such as assembly code (`--emit=asm`), IR (Intermediate Representation) (`--emit=ir`), or even source code (`--emit=src`). For example, `rustc --emit=asm file.rs` will emit the assembly code instead of the binary executable. This option is useful for low-level development and reverse engineering.'
        explain: '[AI] `rustc --explain` is a command-line option for the Rust compiler (`rustc`). It generates detailed explanations in Rust code snippets format for each error message produced during compilation. This helps users understand the cause of the compilation errors and how to fix them, making the learning process easier and more effective.'
        forbid: '[AI] `rustc --forbid` is a compile-flag for the Rust programming language''s compiler (rustc). It disables all implicit allowed behavior in the standard library and the language itself, enforcing a stricter set of rules for code correctness and safety. This flag can be used to catch potential issues or violations that might otherwise go unnoticed during development. Examples include unused imports, dead code, or unsound borrowing. It''s important to note that using this flag may cause legitimate code to fail to compile, as it aims for maximum safety at the cost of some flexibility.'
        g: '[AI] The `-g` flag when used with the Rust compiler `rustc` generates debug information during compilation. This information is embedded into the compiled binary or library, allowing debuggers and other tools to retrieve detailed information about the program''s variables, functions, and their locations in the source code for effective debugging.'
        help: '[AI] `rustc --help` is a command used in Rust programming language to display help information about the Rust compiler (rustc). When run, it prints out detailed usage information, including available flags and their descriptions, as well as common build profiles and their corresponding flags. This command assists users in understanding how to use rustc effectively for building and compiling Rust projects.'
        l: '[AI] `rustc -l` is a command-line option used with the Rust compiler (`rustc`). It stands for "linker" and instructs the compiler to invoke the linker stage after compilation. In simpler terms, it tells Rust to produce an executable or library from the compiled source code by combining object files and resolving external dependencies.'
        o: '[AI] The `rustc -o` command is used in Rust programming language to compile source files with the Rust compiler (rustc). The `-o` flag specifies the output file name for the compiled program or library. For example, `rustc main.rs -o main` compiles the "main.rs" file and saves the output as "main" executable. If no output file is specified, the default output name is a binary with the same name as the last source file in the command.'
        out-dir: '[AI] `rustc --out-dir` is a flag used with Rust''s compiler, `rustc`. It specifies an output directory where generated object files and the final executable or library will be placed during compilation. Multiple output files can be produced in this directory instead of having them scattered throughout the project directories. This flag can be useful for managing build outputs in larger projects or automated builds.'
        print: '[AI] `rustc --print` is a command-line option for the Rust compiler (rustc). It instructs rustc to print out various types of diagnostic information during compilation, such as warnings or errors, without actually performing the full compilation process. This can be useful when you want to check for specific issues in your codebase without waiting for a complete build. You can specify which type of diagnostics to print by using additional flags, such as `--messages` for all messages or `--errors-only` for only error messages.'
        target: '[AI] The `rustc --target` flag is used when compiling Rust code with the Rust compiler (rustc) to specify the target triplet for the output artifact. A target triplet is a string that identifies the architecture, OS, and other specific features of the platform for which the code will be compiled. For example, `--target x86_64-pc-windows-msvc` specifies the 64-bit x86 Windows platform using Microsoft Visual C++ as the toolchain. The correct target triplet should be used depending on the intended deployment environment for the Rust binary or library.'
        test: '[AI] `rustc --test` is a command used in Rust programming language to run tests defined in a project. The Rust compiler, `rustc`, is invoked with this specific flag followed by the path to the directory or file containing the tests to execute. The tests are written using Rust''s built-in testing framework, `assert_attrs`. This command automatically discovers and runs all tests found within the specified location.'
        verbose: '[AI] `rustc --verbose` is a command used in Rust programming language to invoke the compiler with increased output. The `--verbose` flag enables more detailed compilation messages, providing information about each stage of the compile process including warnings and errors. It helps developers diagnose issues during compilation and gain insights into optimization strategies applied by the compiler.'
        version: '[AI] `rustc --version` is a command used in Rust programming language to check the version of the Rust compiler (rustc) that is installed on your system. When executed, it displays the version number and optional build information, such as the commit hash or branch name. It helps ensure that you are using the desired Rust compiler version for your project and can assist in troubleshooting any version-related issues.'
        warn: '[AI] `rustc --warn` is a command used in Rust programming language to compile source code with all the default warnings enabled. The Rust compiler, rustc, emits various warnings during compilation that can help developers identify potential issues and improve code quality. By using `--warn`, you''re asking the compiler to output these warnings, providing feedback on potential problems like unused variables, type mismatches, or other potential issues in your code. It''s a useful command for ensuring a higher level of code correctness and adherence to Rust best practices.'
