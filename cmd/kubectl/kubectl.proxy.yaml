# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]
description: Run a proxy to the Kubernetes API server
group: troubleshooting
flags:
    --accept-hosts=: Regular expression for hosts that the proxy should accept.
    --accept-paths=: Regular expression for paths that the proxy should accept.
    --address=: The IP address on which to serve on.
    --api-prefix=: Prefix to serve the proxied API under.
    --append-server-path: If true, enables automatic path appending of the kube context server path to each request.
    --disable-filter: If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.
    --keepalive=: keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.
    --reject-methods=: 'Regular expression for HTTP methods that the proxy should reject (example --reject-methods=''POST,PUT,PATCH''). '
    --reject-paths=: Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths.
    -P, --www-prefix=: Prefix to serve static files under, if static file directory is specified.
    -p, --port=: The port on which to run the proxy. Set to 0 to pick a random port.
    -u, --unix-socket=: Unix socket on which to run the proxy.
    -w, --www=: Also serve static files from the given directory under the specified prefix.
documentation:
    command: '[AI] `kubectl proxy` is a feature of the Kubernetes command-line tool (`kubectl`) that sets up a local proxy server for serving dynamic API proxying, forwarding requests to the Kubernetes master or any cluster API service. This allows you to make API requests against your cluster without having to install and run a full `kubeapiserver`. It''s especially useful when working with remote clusters or for testing changes locally before deploying them. The proxy runs indefinitely by default, but you can terminate it with Ctrl+C. To use it, simply run `kubectl proxy` followed by any additional flags or arguments if needed. Requests are typically made against the local address and port that is printed when starting the proxy, e.g., `127.0.0.1:8001`.'
    flag:
        accept-hosts: '[AI] The `kubectl proxy` is a component of Kubernetes that sets up a local REST API server for interacting with the Kubernetes cluster, particularly useful when working outside of the cluster or when internet access is limited. The `--accept-hosts` flag is used to configure which hosts are allowed to connect to this API server. By default, only connections from the local machine are accepted. Setting `--accept-hosts` allows specifying additional IP addresses or hostnames to permit access. This enhances security by restricting API access to trusted sources and mitigating potential risks of unauthorized access to your cluster.'
        accept-paths: |-
            [AI] The `kubectl proxy` is a component of Kubernetes that sets up a local proxy server to allow making API requests against a remote Kubernetes cluster without having to go through a separate layer like an ingress controller or a cloud gateway.

            The `--accept-paths` option specifies the paths for which the proxy server will accept and forward requests to the corresponding resources in the remote cluster. It accepts a list of path prefixes separated by commas, and for each prefix, it proxies requests to the corresponding API endpoint in the remote cluster based on the resource and the requested HTTP method. For example, `--accept-paths="/api/*,/ui/*"` would forward requests starting with `/api` or `/ui` to their respective resources in the remote cluster. This can be useful for providing local access to specific API endpoints from the command line without having to set up complex routing rules.
        address: '[AI] The `kubectl proxy` is a component of Kubernetes that allows making API requests against the local cluster without the need to expose the Kubernetes API server externally or use complex authentication setup. The `--address` flag specifies the IP address and port number for the proxy server to listen on. For example, `kubectl proxy --address 127.0.0.1:8001` starts the proxy listening on IPv4 address `127.0.0.1` and port `8001`. Clients can then send API requests to this local address instead of the actual Kubernetes master. This is particularly useful when working with remote clusters or when running out-of-cluster development tests.'
        api-prefix: |-
            [AI] The `kubectl proxy` is a tool in Kubernetes that sets up a local REST API server to allow you to interact with your cluster using the Kubernetes API, without the need to directly contact the master node or use an external API server.

            The `--api-prefix` flag modifies the base URL prefix for the proxy server's API endpoints. By default, it uses "/api/v1". When you specify a custom prefix using this flag (e.g., "--api-prefix=/mycustomprefix"), all your API requests will be sent to the proxy server with this prefix appended to the base URL.

            This can be useful when working in environments where multiple Kubernetes clusters are being managed, and you want to differentiate between them without modifying your client's configuration or scripts constantly.
        append-server-path: |-
            [AI] `kubectl proxy` is a command-line tool provided by Kubernetes to create a local proxy server, which forwards API requests from your machine to the actual Kubernetes API server over an encrypted HTTPS connection. The `--append-server-path` flag is used to append a custom path to the default API server URL before creating the proxy. This allows you to connect to multiple API servers with different paths and switch between them using a single `kubectl proxy` instance. The basic syntax is:

            ```sh
            kubectl proxy --port=8001 --address=127.0.0.1 --accept-hosts='*.local,localhost' --append-server-path="/path/to/custom/api:8080/"
            ```

            Replace `"/path/to/custom/api:8080/"` with the actual path and port of your custom API server. This flag helps maintain a single local proxy instance for multiple Kubernetes clusters while allowing you to access their APIs through separate paths.
        disable-filter: '[AI] `kubectl proxy` is a component of the Kubernetes toolset that sets up a local proxy server for making API requests against a remote Kubernetes cluster without the need to authenticate or proxy each request individually. The `--disable-filter` flag disables filtering of the proxy responses based on labels, selectors, or other criteria. This means that all API objects from the cluster will be served through the proxy without any filtering. It is useful when working with large clusters where filtering can introduce additional latency or when debugging and testing configurations without considering specific label filters.'
        keepalive: '[AI] `kubectl proxy --keepalive` is a command-line tool in Kubernetes that sets up a local proxy server for forwarding API requests from your workstation to the Kubernetes cluster. The `--keepalive` flag ensures that the connection between the proxy and the Kubernetes API server remains active, even when there is no traffic by sending a dummy request every 30 seconds. This allows tools like `kubectl port-forward` or custom applications to continue using the same connection without needing to reconnect each time, improving overall performance and user experience.'
        port: '[AI] The `kubectl proxy` is a command-line tool that creates a secure, local REST API server for interacting with a Kubernetes cluster. When you run `kubectl proxy --port=<port>`, it starts the proxy on the specified port (default: 8001). This allows other processes or tools to connect to the proxy and forward their requests to the Kubernetes API server in the cluster, improving local development workflows and reducing network latency. The proxy also supports authentication using various methods such as client certificates, token-based authentication, and usernames/passwords.'
        reject-methods: '[AI] `kubectl proxy` is a tool in Kubernetes for creating a secure, local proxy server that can forward API requests to the Kubernetes cluster. The option `--reject-methods` allows you to specify HTTP methods that should be rejected when making requests through the proxy. By default, the proxy accepts all standard HTTP methods (GET, POST, PUT, DELETE, etc.), but you can use `--reject-methods` to add custom methods or remove standard ones to increase security by limiting the types of requests that can be made through the proxy. For example, if you want to reject the TRACE method, you can pass `--reject-methods=TRACE`.'
        reject-paths: '[AI] `kubectl proxy` is a tool that sets up a local REST API server in your development environment to interact with your Kubernetes cluster without the need for setting up complex configurations or installing extra software like `minikube` or `kind`. The `--reject-paths` flag is used to specify paths that should not be proxied. This means, traffic to these paths will bypass the proxy server and go directly to the internet, circumventing the Kubernetes cluster. This can be useful if there are services outside of your cluster that you want to access directly while still using `kubectl proxy` for the majority of your interactions with the cluster.'
        unix-socket: '[AI] The `kubectl proxy` is a command-line tool in Kubernetes that sets up a local proxy server for making API requests against the Kubernetes cluster without having to go through an external API server. By using the `--unix-socket` flag, users can specify a Unix domain socket file as an alternative way to connect to the API server instead of using standard HTTP or HTTPS protocols. This option is particularly useful for cases where network access is restricted, such as within a container environment, and provides improved security and performance by eliminating the need to send traffic over the network.'
        www: '[AI] `kubectl proxy --www` is a command-line tool provided by Kubernetes to create an HTTP tunnel to the Kubernetes API server. The `--www` flag specifies that the proxy should listen on port 8001 for HTTP requests instead of the default SSL-only listening on port 8002. This allows easier use with web browsers or other tools that don''t support SSL by default, such as `curl` with HTTP requests. The proxy relays all incoming traffic to the Kubernetes API server and returns the response back to the client. It is often used for local development or testing when running applications outside the cluster.'
        www-prefix: '[AI] The `kubectl proxy` is a tool that creates an HTTP tunnel to the Kubernetes API server, allowing you to access the API from your local machine without exposing it directly. The `--www-prefix` flag sets the base URL path prefix for the proxied requests. For example, if you set `--www-prefix=/myapp`, all requests to `localhost:8001/myapp` will be forwarded to the corresponding API resources in your Kubernetes cluster. This is useful when you have multiple applications accessing the same Kubernetes cluster and want to isolate their traffic using unique prefixes.'
