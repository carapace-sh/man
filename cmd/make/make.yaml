# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: make
description: GNU make utility to maintain groups of programs
flags:
    --assume-new=: Consider FILE to be infinitely new.
    --assume-old=: Consider FILE to be very old and don't remake it.
    --debug=: Print various types of debugging information.
    --dry-run: Don't actually run any recipe; just print them.
    --makefile=: Read FILE as a makefile.
    --max-load=: Don't start multiple jobs unless load is below N.
    --new-file=: Consider FILE to be infinitely new.
    --no-print-directory: Turn off -w, even if it was turned on implicitly.
    --no-silent: Echo recipes (disable --silent mode).
    --quiet: Don't echo recipes.
    --recon: Don't actually run any recipe; just print them.
    --stop: Turns off -k.
    --trace: Print tracing information.
    --warn-undefined-variables: Warn when an undefined variable is referenced.
    -B, --always-make: Unconditionally make all targets.
    -C, --directory=: Change to DIRECTORY before doing anything.
    -E, --eval=: Evaluate STRING as a makefile statement.
    -I, --include-dir=: Search DIRECTORY for included makefiles.
    -L, --check-symlink-times: Use the latest mtime between symlinks and target.
    -O, --output-sync=: Synchronize output of parallel jobs by TYPE.
    -R, --no-builtin-variables: Disable the built-in variable settings.
    -S, --no-keep-going: Turns off -k.
    -W, --what-if=: Consider FILE to be infinitely new.
    -d: Print lots of debugging information.
    -e, --environment-overrides: Environment variables override makefiles.
    -f, --file=: Read FILE as a makefile.
    -h, --help: Print this message and exit.
    -i, --ignore-errors: Ignore errors from recipes.
    -j, --jobs=: Allow N jobs at once; infinite jobs with no arg.
    -k, --keep-going: Keep going when some targets can't be made.
    -l, --load-average=: Don't start multiple jobs unless load is below N.
    -n, --just-print: Don't actually run any recipe; just print them.
    -o, --old-file=: Consider FILE to be very old and don't remake it.
    -p, --print-data-base: Print make's internal database.
    -q, --question: Run no recipe; exit status says if up to date.
    -r, --no-builtin-rules: Disable the built-in implicit rules.
    -s, --silent: Don't echo recipes.
    -t, --touch: Touch targets instead of remaking them.
    -v, --version: Print the version number of make and exit.
    -w, --print-directory: Print the current directory.
documentation:
    command: '[AI] Make is a utility and automation tool for managing and compiling sources into executable programs or other build artifacts. It reads a file called Makefile, which specifies how to build targets using various recipes and dependencies. Make then builds the targets by invoking the specified commands in an order that minimizes recompilation, making it efficient for complex projects with multiple components.'
    flag:
        always-make: '[AI] The `make --always-make` command in Unix-based systems is used to force Make to rebuild all targets, even if their prerequisites seem up-to-date based on timestamps. This can be helpful when developers modify source files directly or when the build environment changes significantly. It ensures a complete and consistent rebuild of all project components, minimizing potential issues related to outdated dependencies.'
        assume-new: '[AI] The `make --assume-new` command is a variant of the Make utility, which is a build automation tool. This specific command assumes that all files in the project have been modified since the last build and skips the timestamps check. It forces Make to rebuild all target files regardless of their modification times. This can be useful when you want to ensure a complete rebuild or when file timestamps have been corrupted.'
        assume-old: '[AI] The `make --assume-old` command is a variation of the `make` build automation tool. It assumes that the target files are up-to-date with their corresponding source files, skipping the build process if `make` detects that the timestamps of the target and source files match. This can save time when running `make` multiple times in quick succession without making any changes to the source code.'
        check-symlink-times: '[AI] The `make --check-symlink-times` command is a feature provided by the Make utility, which is a build automation tool. This specific option is used to check if the modification times of symlinked files match their target files before running any build recipes. By default, Make does not take into account symlinks when comparing file modification times. Enabling this option with `--check-symlink-times` ensures that the build process only proceeds if all symlinked files have up-to-date targets, thus maintaining consistency and potentially preventing unnecessary rebuilds.'
        d: '[AI] The `make -d` command is not a flag itself, but rather an option used with the `make` utility in Unix-based systems for generating a makefile dependency graph. When you run `make -d`, it will print out to the terminal all the dependencies and targets defined in your makefiles without actually building anything. This can be helpful for understanding how the different files and targets are related before executing any compilation or linking commands.'
        debug: '[AI] `make --debug` is a command used in Unix-based build systems to run a makefile with debugging information. When this command is executed, Make will print out more detailed information about what targets it is building and the steps it is taking to build them. This can be helpful for understanding complex build processes or troubleshooting build issues.'
        directory: '[AI] The `make --directory` command in Makefile is used to change the working directory or build directory before executing other tasks. It sets the `$(MAKEFLAGS)` variable in the Makefile, specifically the `-C` flag, which tells Make to change into a specified directory before processing the given Makefile. This can be useful when building projects with multiple components located in different directories.'
        dry-run: '[AI] The `make --dry-run` command is a feature in the Make build automation tool. It simulates or "makes a dry run" of the build process without actually executing any commands, allowing you to see what tasks would be executed if you ran `make` without introducing errors or side effects. This can help in understanding the dependencies between files and targets, as well as debugging issues with your Makefile.'
        environment-overrides: '[AI] `make --environment-overrides` is a command used in Makefile projects to set custom environment variables overriding any previous definitions in the current shell session. The `--environment-overrides` option causes Make to print out and apply any variables defined in a file specified with `-f`, followed by a colon and then the name of the file containing the overrides (e.g., `make -f MyMakefile.mk --environment-overrides=MyOverridesFile`). This can be helpful when dealing with complex projects where fine-tuning environment variables is necessary for correct build behavior.'
        eval: '[AI] `make --eval` is a command used in Makefile automation to evaluate a specificMakefile target expression without executing the entire recipe. This can be useful for debugging or testing expressions within a Makefile. The `--eval` option allows the user to run just the shell commands defined within a target, printing their output to the console instead of performing the full build process.'
        file: '[AI] The `make --file` command in Unix-based systems is used to execute a Makefile, which specifies a set of rules for compiling and linking source files into executables or other output files. The Makefile automates the build process by defining targets, dependencies, and compiler commands. The `--file` option indicates the name of the Makefile to be used, and the command is typically written as `make --file <Makefile_name>`.'
        help: '[AI] `make --help` is a command used in Unix-based systems to display help information about the Make utility. Make is a build automation tool that executes a series of manually specified or automatically derived tasks, typically used for compiling and installing software from source code. The `--help` option displays detailed usage information, including available commands and their options, to assist users in using Make effectively.'
        ignore-errors: '[AI] The `make` command with the `--ignore-errors` option is used to skip build steps that encounter errors without halting the entire build process. This can be useful in cases where some parts of a project can still be built even if others fail, allowing for more granular control over the build process. When using this option, Make will continue executing recipes for other targets as long as their prerequisites are up-to-date, ignoring any errors that occur during execution.'
        include-dir: '[AI] The `make --include-dir` command is used in Makefiles to specify a directory containing include files (usually with the `.mk` extension) that define macros and rules to be included in the current Makefile. This allows modularization of common build logic across multiple projects, reducing redundancy and improving maintainability. When running `make`, the Makefile processes all included files as if they were part of the main file.'
        jobs: |-
            [AI] The `make --jobs` command in Makefile is used to specify the maximum number of jobs (concurrent tasks) that can be run during the build process at the same time. By default, `make` will determine the number of jobs automatically based on the number of processors available in the system. However, you can explicitly set the number of jobs with this command:

            ```bash
            make -j <number_of_jobs>
            ```

            Replace `<number_of_jobs>` with an integer value that represents the desired maximum concurrent jobs. This option can be useful when you want to speed up the build process on systems with multiple processors or cores, but keep in mind that increasing the number of jobs might consume more system resources and could potentially slow down the overall build time due to increased contention for resources.
        just-print: '[AI] The `make --just-print` command is used with the Make build automation tool to display the tasks that would be executed if the `make` command were run without actually executing them. This can be helpful for understanding the dependencies and build process without incurring the time and potential side effects of building or compiling the project.'
        keep-going: '[AI] The `--keep-going` flag in the `make` command is used to instruct `make` to continue building targets even if some targets fail during the build process. This can be useful when working on complex projects with multiple dependencies, as it allows the build to continue and potentially complete successfully despite some errors. However, it''s important to note that this flag does not hide or ignore errors; it only prevents `make` from stopping the entire build process due to one failed target.'
        load-average: '[AI] The `make --load-average` command is not a standard Linux or Unix command but rather an option used with the `make` utility. When used, this option causes `make` to check the system load average before building targets and may decide to delay building some targets if the load average exceeds a certain threshold. The goal is to prevent overloading the system during the build process. This can be particularly useful when building large or complex projects on systems with limited resources.'
        makefile: '[AI] The `make --makefile` command is used in Unix-based systems to invoke the Make build automation tool with a specific makefile as an argument. A makefile is a script file that defines rules for compiling and linking software projects, allowing for efficient and consistent builds. By specifying the makefile as an argument, `make` will read and execute only that makefile, overriding any default behavior or other makefiles in the current working directory.'
        max-load: |-
            [AI] The `make --max-load` command in Makefile is an optional feature that specifies a maximum number of jobs (tasks) that can be run concurrently during the build process. By default, there is no limit and make will use as many jobs as possible based on system resources.

            Setting `--max-load N` limits the number of parallel jobs to N. This can be useful in managing system resources or when building complex projects where limiting concurrency may help prevent resource contention and improve build stability. For instance, if your machine has 4 cores, you might set `--max-load 4` to ensure that no more than 4 jobs run at the same time.
        new-file: '[AI] The `make --new-file` command is used in Makefile-based build systems to create a new Makefile in the current directory. When this command is executed, Make will create a new empty file named "Makefile" by default. If a different name is specified using the `-f` option followed by the filename, that file will be created instead. This command can be useful when starting a new project and wanting to set up a build system from scratch.'
        no-builtin-rules: '[AI] The `make --no-builtin-rules` command is used to invoke the Make utility with an empty set of built-in rules. This means that only rules explicitly defined in the Makefile will be executed, while any built-in rules provided by Make are ignored. It can be useful when dealing with complex projects or customizing build processes beyond the capabilities of the default Make behavior.'
        no-builtin-variables: '[AI] The `make --no-builtin-variables` command is used in Makefile programming to prevent Make from automatically creating certain built-in variables. By using this option, only explicitly defined variables will be considered during the build process. This can be useful when dealing with complex projects or when wanting to ensure that specific variable values are used consistently throughout the build.'
        no-keep-going: '[AI] The `--no-keep-going` flag in Make is an optional argument for the `make` command that instructs it to stop executing a recipe (a series of commands for building a target) as soon as a error or problem occurs, instead of continuing with other recipes in the same rule or in other rules. In other words, it disables the "keep trying" behavior or "-k" option by default, where `make` attempts to build targets that depend on failed ones if possible. This flag is particularly useful when debugging a Makefile or when you want to ensure that no further actions are taken upon encountering an error.'
        no-print-directory: '[AI] The `make --no-print-directory` command is a option for the Make utility, which is a build automation tool. This option prevents Make from printing the current working directory at the beginning of each execution line in the output. It''s useful when you want to redirect all the Make output into a file or use it as input for another program, without having the extraneous information about the working directory.'
        no-silent: '[AI] The `make --no-silent` command is used with the Make utility, a build automation tool. The `--no-silent` option disables the silent mode of Make, meaning it will print out each command it executes before actually running it in the terminal. This can be helpful for debugging or understanding the build process in detail.'
        old-file: '[AI] The `make --old-file` command is used in Makefiles to instruct Make to use the previously generated target file instead of rebuilding it from scratch, even if its dependencies have changed. This can save time and resources, especially when dealing with large or complex projects where the intermediate files are often the same between builds. By using this option, Make compares the modification times of the target and its dependencies, but skips the build process for the target if it already exists and is newer than its dependencies.'
        output-sync: '[AI] The `make` command with the `--output-sync` option is used to ensure that all output files are up-to-date before executing any recipes, even if their prerequisites have not changed yet. This can be useful when you want to force the rebuilding of specific targets or when working on a large project where ensuring consistency across multiple components is important. With `--output-sync`, make will first update all output files in parallel, and only then execute any recipes.'
        print-data-base: '[AI] The `make --print-data-base` command is used in Makefiles to display a list of all targets, their prerequisites, and the rules that govern how they are built. It provides an overview of the entire build system as defined in the Makefile, allowing users to understand the dependencies between different components and the steps required to build them. This information can be helpful for debugging build issues or simply gaining a better understanding of the project structure.'
        print-directory: '[AI] The `make --print-directory` command is a utility from the Makefile build automation tool. It prints out the current working directory (also known as the makefile''s top-level directory) used by the Make build process. This can be helpful for understanding the context in which the Makefile is being executed, especially when navigating complex build systems or when working on multiple projects at once.'
        question: '[AI] The `make --question` command is not a valid command in Makefile or Make utility. Make is a build automation tool used to manage and execute complex projects consisting of multiple files and dependencies. The `--question` option is not recognized by Make. If you need to run Make with interactive prompts for confirmation before executing certain targets, use the `-n` (dry-run) or `-i` (interactive) options instead.'
        quiet: '[AI] The `make --quiet` command is a modification of the standard `make` build utility in Unix-based systems. Instead of printing a message for every target that is built or rebuilt, it only displays error messages if an issue occurs during the build process. This option is useful when running automated builds where minimal output is desired to avoid potential interference with other processes or logging tools.'
        recon: '[AI] `make --recon` is a command used in Makefile projects. It specifically invokes targets with the prefix `recon`, which are defined in the Makefile. These targets typically perform reconnaissance or preparation tasks, such as updating dependencies, downloading source code from remote repositories, or generating reports. The `make --recon` command helps keep project environments up-to-date and ensures that subsequent builds have the necessary data to proceed efficiently.'
        silent: '[AI] The `make --silent` command is used with the Makefile build tool to run the build process with minimal output or noise in the terminal. The `--silent` option suppresses the progress messages normally printed during the build process, providing a quieter build environment. It''s useful when running automated tests or scripts that rely on a clean console output.'
        stop: '[AI] The `make --stop` command is used to stop a running Makefile build process. It sends a signal (usually SIGTERM) to the make process, asking it to terminate gracefully. If the make process does not respond, you can use `kill -9 <process_id>` to forcefully terminate it. The `--stop` option is optional and can be used with `make` to specify that you intend to stop a running build process.'
        touch: '[AI] `make --touch` is a command used in Unix-based systems for updating timestamps of files in a project without actually building or compiling anything. The `make` utility is typically used to manage and automate the build process, but with the `--touch` option, it only updates the modification time (mtime) of specified files, preserving their current contents. This can be useful for keeping track of file changes in version control systems or for other purposes where only updating timestamps is required.'
        trace: '[AI] `make --trace` is a command used in Unix-based systems for invoking the ''make'' utility with additional debugging information. The `--trace` option enables make to print detailed information about each recursive call it makes to build targets or dependencies, including the commands executed at each step. This helps in understanding the flow of the build process and identifying potential issues.'
        version: '[AI] `make --version` is a command used in Unix-based operating systems to check the version information of the ''make'' utility installed on the system. The make utility is a build automation tool that executes a set of predefined tasks or commands specified in a Makefile to generate targets. By running `make --version`, you can view the version number, compilation flags, and other relevant information about the installed make software.'
        warn-undefined-variables: '[AI] The `make --warn-undefined-variables` command is used in Unix-based build systems to run the Makefile with a warning flag. This flag specifically warns the user when any undefined variables are encountered during the execution of the Makefile. These warnings do not prevent the build from continuing, but they alert the user that there might be errors or inconsistencies in the Makefile that need addressing.'
        what-if: '[AI] The `make what-if` command is a feature in the Make build automation tool. It allows users to simulate the effects of running a specific Make target without actually executing the commands that would be run. This can help users understand what changes would be made or which files would be affected by a particular target before they decide to build it for real. The output typically includes information about which targets would be built, what prerequisites would be updated, and any messages that would be printed during the build process. It''s a useful way to plan your builds and minimize errors or unexpected side effects.'
