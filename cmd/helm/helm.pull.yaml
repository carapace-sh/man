# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pull
description: download a chart from a repository and (optionally) unpack it in local directory
group: main
flags:
    --ca-file=: verify certificates of HTTPS-enabled servers using this CA bundle
    --cert-file=: identify HTTPS client using this SSL certificate file
    --devel: use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
    --insecure-skip-tls-verify: skip tls certificate checks for the chart download
    --key-file=: identify HTTPS client using this SSL key file
    --keyring=: location of public keys used for verification
    --pass-credentials: pass credentials to all domains
    --password=: chart repository password where to locate the requested chart
    --prov: fetch the provenance file, but don't perform verification
    --repo=: chart repository url where to locate the requested chart
    --untar: if set to true, will untar the chart after downloading it
    --untardir=: if untar is specified, this flag specifies the name of the directory into which the chart is expanded
    --username=: chart repository username where to locate the requested chart
    --verify: verify the package before using it
    --version=: specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used
    -d, --destination=: location to write the chart. If this and tardir are specified, tardir is appended to this
documentation:
    command: '[AI] The `helm pull` command is used to retrieve the latest version of a Helm chart from its repository, without installing or upgrading it. This can be useful when you want to check for updates or review changes before deploying them to your Kubernetes cluster. The command takes the chart repository URL and the chart name as arguments, in the format `helm pull <REPOSITORY_URL>/<CHART_NAME>`.'
    flag:
        ca-file: '[AI] `helm pull --ca-file` is a command used in Helm, a popular package manager for Kubernetes, to retrieve an official Helm chart from a repository and save it locally. The `--ca-file` flag specifies the path to a custom CA (Certifying Authority) bundle file that should be used for SSL (Secure Sockets Layer) certification verification during the chart download process. This is useful when connecting to a repository using self-signed or custom certificates. Without this flag, Helm would not trust such certificates and refuse to perform the download.'
        cert-file: '[AI] `helm pull --cert-file` is a command used in Helm, a popular package manager for Kubernetes, to retrieve an official Helm chart from a stable or third-party repository. The `--cert-file` flag specifies the path to a custom SSL certificate file to be used during the connection between the local Helm client and the remote chart repository server. This can be useful when the default certificates are not trusted in the specific environment, ensuring secure communication while fetching chart revisions.'
        destination: '[AI] `helm pull --destination` is a command used in Helm, a popular package manager for Kubernetes. This command retrieves the latest version of a Helm chart from its official or custom repository and saves it locally to a specified directory as a tarball file using the `--destination` flag. For example, `helm pull mychart --destination /path/to/save`. Once the chart is pulled, you can use Helm to install or upgrade your Kubernetes applications using that chart.'
        devel: |-
            [AI] `helm pull --devel` is a command used in Helm, a popular package manager for Kubernetes. This command is used to retrieve the latest source code of a specific repository or chart that is hosted on a Helm repository like GitHub or Bitbucket, and is marked as "devel" or "pre-release".

            By using `--devel` flag, you are explicitly telling Helm to pull the development or pre-release version of the chart instead of the stable one. This can be useful if you want to test new features or bug fixes before they are released officially. The pulled code will be saved locally in your Helm charts repository, ready for use with `helm install` or other Helm commands.
        insecure-skip-tls-verify: '[AI] `helm pull --insecure-skip-TLS-verify` is a command used in Helm, a popular package manager for Kubernetes. This command allows you to bypass the SSL certificate verification when downloading a Helm chart from a repository or a remote server. By using `--insecure-skip-TLS-verify`, Helm will not check the authenticity of the SSL certificate presented by the server, and instead proceed with the chart download without any encryption checks. It is important to note that this command should be used with caution as it exposes your cluster to potential security risks, including man-in-the-middle attacks or malicious code injection. Use this option only when you trust the source of the Helm chart and are unable to establish a secure connection.'
        key-file: '[AI] `helm pull --key-file` is a command used in Helm, a popular package manager for Kubernetes. This command retrieves a chart from a specified repository without installing it, using the provided TLS key file to authenticate the connection instead of using Helm''s default insecure registry settings. The `--key-file` option is used to specify the path to the key file.'
        keyring: '[AI] `helm pull --keyring` is a command used in Helm, a popular Kubernetes package manager. This command retrieves charts from a Helm repository and saves them locally, while also importing an existing Helm keyring file into the current working Helm client. The keyring file contains GPG keys used to sign and verify Helm chart repositories and packages. By importing it, you ensure that your local Helm installation trusts the same keys as those specified in the keyring file, thus maintaining the security and authenticity of the charts you install.'
        pass-credentials: '[AI] `helm pull --pass-credentials` is a command used in Helm, a popular package manager for Kubernetes. This command is used to retrieve the latest version of a Helm chart from a specified repository, along with its dependencies. The `--pass-credentials` flag is an optional argument that allows you to provide Helm with the necessary authentication credentials, such as a Tiller token or a Kubernetes access key and secret, to pull the charts securely from private repositories. This helps ensure that only authorized users have access to the chart repository and its contents.'
        password: '[AI] `helm pull --password` is a command used in Helm, a popular package manager for Kubernetes, to retrieve an official Helm chart from its stable repository. The `--password` option is used to provide an API key as a password-style argument for authentication. This command downloads the latest version of the specified chart and saves it locally for use with Helm install or upgrade commands.'
        prov: '[AI] `helm pull --fetch-single-chart` is a command used in Helm, a popular package manager for Kubernetes. This command fetches a specific chart from a given repository, without installing or upgrading it. The `--fetch-single-chart` option ensures that only the requested chart is downloaded, without pulling any dependencies. It''s often used when you want to have the latest version of a specific chart for offline use or to review its changes before deploying it in your Kubernetes cluster.'
        repo: '[AI] `helm pull --repo` is a command used in Helm, a popular package manager for Kubernetes. The `--repo` flag specifies the Helm repository to fetch charts from. When you run `helm pull --repo <REPO_URL> <CHART_NAME>`, it pulls the latest version of the specified chart from the given repository and saves it locally for use with Helm install or upgrade commands.'
        untar: '[AI] `helm pull --untar` is a command used in Helm, a popular Kubernetes package manager. This command pulls a Helm chart from a specified repository and untar (extract) its contents locally without installing or upgrading it. It''s useful for inspecting the contents of a chart before deploying or troubleshooting without affecting the running application.'
        untardir: '[AI] `helm pull --untar` is a command used in Helm, a popular package manager for Kubernetes. This command retrieves a Helm chart from a repository and extracts (untar) its contents locally without installing or upgrading it in the Kubernetes cluster. The `--untar` option instructs Helm to extract the chart''s contents after downloading, making them available for further manual steps like customizing values or building Docker images.'
        username: '[AI] `helm pull --username` is a command used in Helm, a popular package manager for Kubernetes, to retrieve an official Helm chart from a stable or other Helm repository and save it locally. The `--username` flag is optional but if provided, it allows specifying the Helm repository username and password in one go to authenticate and pull the chart without being prompted for credentials during the process.'
        verify: '[AI] `helm pull --verify` is a command used in Helm, a popular Kubernetes package manager. This command pulls an image for a specific chart (Helm package) from its repository and verifies its authenticity using the NOTARY or TUF keyservers to ensure the image has not been tampered with before deploying it into a Kubernetes cluster. It''s a crucial step to secure your infrastructure by ensuring you deploy trusted images.'
        version: '[AI] `helm pull --version` is a command used in Helm, a popular package manager for Kubernetes. This command initiates the download and installation of a specific version of a Helm chart from the official or a custom repository. The `--version` option specifies the desired chart version to be installed. If no version is provided, Helm will attempt to install the latest available version.'
