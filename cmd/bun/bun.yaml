# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bun
description: a fast bundler, transpiler, JavaScript Runtime and package manager for web software
flags:
    --bunfile=: Use a .bun file
    --cwd=: Absolute path to resolve files & entry points from
    --disable-hmr: Disable Hot Module Reloading (disables fast refresh too) in bun dev
    --disable-react-fast-refresh: Disable React Fast Refresh
    --extension-order=: 'defaults to: .tsx,.ts,.jsx,.js,.json'
    --hot: Enable auto reload in bun's JavaScript runtime
    --install=: Install dependencies automatically when no node_modules are present
    --jsx-factory=: Changes the function called when compiling JSX elements using the classic JSX runtime
    --jsx-fragment=: Changes the function called when compiling JSX fragments
    --jsx-import-source=: Declares the module specifier to be used for importing the jsx and jsxs factory functions
    --jsx-production: Use jsx instead of jsxDEV (default) for the automatic runtime
    --jsx-runtime=: '"automatic" (default) or "classic"'
    --main-fields=: Main fields to lookup in package.json
    --no-install: Disable auto install in bun's JavaScript runtime
    --no-summary: Don't print a summary (when generating .bun
    --platform=: '"bun" or "browser" or "node", used when building or bundling'
    --prefer-latest: Use the latest matching versions of packages in bun's JavaScript runtime, always checking npm
    --prefer-offline: Skip staleness checks for packages in bun's JavaScript runtime and resolve from disk
    --public-dir=: Top-level directory for .html files, fonts or anything external
    --server-bunfile=: Use a .server.bun file
    --silent: Don't repeat the command for bun run
    --tsconfig-override=: Load tsconfig from path instead of cwd/tsconfig.json
    --use=: Choose a framework, e.g. "--use next"
    --watch: Automatically restart bun's JavaScript runtime on file change
    -b, --bun: Force a script or package to use Bun.js instead of Node.js
    -c, --config=: Config file to load bun from
    -d, --define=: Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development"
    -e, --external=: 'Exclude module from transpilation (can use * wildcards). ex: -e react'
    -h, --help: Display this help and exit.
    -i: Automatically install dependencies and use global cache in bun's runtime, equivalent to --install=fallback
    -l, --loader=: Parse files with .ext:loader, e.g. --loader .js:jsx
    -p, --port=: Port to serve bun's dev server on
    -r, --preload=: Import a module before other modules are loaded
    -u, --origin=: Rewrite import URLs to start with --origin
    -v, --version: Print version and exit
documentation:
    command: '[AI] "Bun" is not a widely recognized command in computing or technology. It might be a typo or refer to a specific tool or library, such as "Bundler for Unix packages," which is a package manager used in Ruby programming language for managing and installing gems. Please ensure you provide the correct context when using this term to avoid confusion.'
    flag:
        bun: '[AI] The term "bun --bun" does not refer to a specific flag or symbol. It appears to be a misspelled or nonsensical phrase. Flags are graphical representations of ideas, organizations, or entities, often used as national or organizational emblems. They consist of distinctive designs, symbols, and colors that convey meaning and significance. If you meant to ask about a specific flag with this name, I would recommend checking for any additional context or information that might provide clarification.'
        bunfile: '[AI] The `--bunfile` option in the Bun build tool is used to specify a particular configuration file for a project. This file, which is usually named `bun.config.mjs`, contains metadata and customization settings for how the project should be built with Bun. The flag instructs Bun to use this specified configuration file during the build process.'
        config: '[AI] The `--config` flag for the `bun` package manager is used to specify a custom configuration file when initializing or managing a project. When you run `bun init` or `bun upgrade`, followed by `--config <file>`, it reads the specified file instead of using the default `bun.json` configuration file in your project root directory. This can be helpful if you have complex project setup requirements, such as custom dependencies or build scripts, which need to be defined outside of the standard configuration file format.'
        cwd: '[AI] The `--cwd` option in Bash under the `flag` `bum` (an alias or a script with unclear meaning without additional context) is used to specify the current working directory as the context for relative path file references. In other words, it sets the default directory for interpreting `./` and `../` path notations when running commands within the script or alias.'
        define: |-
            [AI] The `--define` option in Grunt.js or Gulp.js tasks is used to define custom variables for use within the task configuration or in plugins. The `flag bun --define` isn't a standard flag, but if `bun` is a custom task or plugin, this flag might be used to define new variables for that specific tool. For example:

            ```javascript
            gulp.task('myTask', function () {
              return gulp.src('src/*.js')
                .pipe(bun({
                  --define: {
                    MY_VAR: 'value'
                  }
                }));
            });
            ```

            In the example above, when running `gulp myTask`, the custom variable `MY_VAR` is defined and made accessible within the `myTask` configuration using the `bun` plugin.
        disable-hmr: '[AI] The `--disable-hmr` flag in Babel''s `bun` command disables Hot Module Replacement (HMR) during the compilation process. HMR is a development feature that enables live updating of modules in a web application without a full page reload. By disabling it, the compilation will proceed without this functionality.'
        disable-react-fast-refresh: '[AI] The `--disable-react-fast-refresh` flag for the Create React App (CRA) development server disables Fast Refresh, a feature that automatically updates the browser when certain files change during development. With this flag enabled, changes in code will require a manual page refresh to see the updated content in the browser. It''s useful when working on complex setups where automatic updates can interfere with the development process.'
        extension-order: '[AI] The `--extension-order` flag in BungeeCord is used to specify the order in which extensions (also known as plugins or modules) are loaded. By default, extensions are loaded alphabetically by their names. However, setting this flag allows you to explicitly define the loading order by providing a comma-separated list of extension names or numbers representing their positions in the `plugin.yml` or `bungee.yml` files. This can be important for ensuring that dependencies are loaded in the correct order or for managing conflicts between extensions.'
        external: '[AI] The `--external` flag in Buns, a Node.js web server framework, is used to define external services or dependencies for your application. It allows you to configure custom request handlers that can be accessed via specific URL paths without having to write full routes. This improves the modularity and maintainability of your project by separating concerns and keeping external services manageable.'
        help: '[AI] The `--help` option is a common command-line argument used in Unix-like tools and applications, including Bun, a JavaScript package manager. When you run `bun --help`, the command will display detailed information about how to use Bun effectively. This includes a list of available commands with descriptions and usage examples. This can help users understand the functionality of Bun and learn how to install, manage, or build their projects with it.'
        hot: '[AI] The `--hot` flag in Buns, a Node.js-based HTTP server for development, enables hot module reloading (HMR). This feature automatically updates the browser when a file changes without requiring a full page refresh. This can significantly improve development workflow by allowing real-time feedback on code modifications.'
        i: '[AI] The `-i` option in the `bun` package manager''s `install` command is used for installing packages interactively. It means that before each installation, BUN will prompt you for confirmation. This way, you have control over every installation and can prevent unintended packages from being added to your project.'
        install: '[AI] The `bun` command with the `--install` flag is used to install or update a Node.js package globally in your system using Bun, an alternative Node.js runtime and package manager. This command downloads and saves the specified package into the global node_modules folder, allowing it to be easily accessed across projects without having to specify its location in the project''s dependencies.'
        jsx-factory: '[AI] The `--jsx` flag in Create React App (CRA) is used to specify the JSX factory to be used for rendering JSX syntax in your React project. When using `babel-cli`, instead of CRA, you can use the `--jsx-factory` flag to configure this option. This flag takes a string value representing the object or function that will be used as the JSX factory, such as `"React.createElement"` or `"React.h"`, depending on your preferred JSX syntax. This allows you to customize the JSX rendering behavior when using Babel outside of Create React App.'
        jsx-fragment: '[AI] The `--jsx` flag in Babel compiler is used to enable JSX transformation in your JavaScript code. The `--jsx-fragment` flag specifically enables automatic inference and transformation of Fragment components in JSX syntax. It allows you to write Fragment expressions like `<></>` or `<>...</>` without needing to explicitly import `React.Fragment` or wrap the children in a `<React.Fragment>` component.'
        jsx-import-source: '[AI] The `--jsx-import-source` flag in Babel''s `bun` CLI is used to configure how Babel resolves and transforms import statements during transpilation of JSX files. By default, it assumes the import source to be a local module, but you can change this behavior by setting `--jsx-import-source` to `external` or providing an absolute URL as a value. This flag enables developers to control how external packages are imported in their JSX projects.'
        jsx-production: '[AI] The `--flag bun jsx-production` is a command-line argument used with Bun, a JavaScript and TypeScript bundler and package manager. This specific flag instructs Bun to compile and bundle JavaScript files using the production mode configuration, which optimizes the output for performance in a production environment. It typically results in smaller bundle sizes, minified code, and reduced debug information.'
        jsx-runtime: |-
            [AI] The `--jsx-runtime` flag is a command line argument used with Create React App (CRA), a popular React framework for building web applications. This flag specifies the runtime environment to use for handling JSX syntax during bundling.

            By default, CRA uses the "automatic" mode which infers the runtime based on the project's configuration. However, you can explicitly set it to "development" or "production". The choice between these depends on your application's lifecycle stage: development for development builds and production for production builds.

            Using `--jsx-runtime production` will enable the production mode runtime which optimizes the bundle size by removing unnecessary features and libraries, making it more suitable for deployment in a production environment. On the other hand, using `--jsx-runtime development` is recommended for local development as it includes additional debugging tools and features useful during the development process.
        loader: '[AI] `bn --loader` is a flag used with Create React App (CRA), a popular React JavaScript framework for building web applications. It specifies that CRA should use the Babel Node loader when running the application in command line interface environments like `node` or `jest`. The Babel Node loader allows the transformation of `.js` and `.jsx` files during runtime, enabling features such as ES6/ESNext syntax and JSX transpilation.'
        main-fields: '[AI] The `--main-fields` option under the `bun` flag in some command-line tools, such as `jq`, is used to specify that only the main (top-level) fields or keys in a JSON document should be processed by the following commands. This can be helpful when dealing with complex JSON structures and you only want to focus on specific parts of the data.'
        no-install: '[AI] The `flag --no-install` in a command, often used with tools like Bun, means that the installation process should not be run. In other words, it is telling the tool not to download or install any new dependencies but only to perform the build or compile task using the currently available dependencies.'
        no-summary: '[AI] The `--no-summary` flag in Bun, a JavaScript build tool, disables the output of summary information during the build process. This means that Bun will not print out a summary of the files it has processed or any statistics at the end of the build. The flag is used for those who prefer a quiet build process and do not need the summary information.'
        origin: '[AI] The `--origin` flag in BUN (Bundler for Unicode Node.js) is used to specify the URL or local path of the entry point package from where the dependency graph will be built. It''s essentially telling BUN which package file to use as the starting point for a build process, and any dependencies listed in that package file will then be resolved and bundled accordingly.'
        platform: '[AI] The `--platform` option in BUN, a modern JavaScript bundler, specifies the target environment or platform for the output bundle. It can be set to values like ''browser'', ''node'' or custom platforms defined using `bun.json` configuration files. This helps ensure that appropriate polyfills and transforms are applied during the bundling process, resulting in compatible code for the specified environment.'
        port: '[AI] The `--flag bun` with value `--port` is a command-line option for some tools, typically used in Node.js development. It instructs the tool (like BUN or Parcel bundler) to start the server or build process on a specified port number. For example, `bun start --port 3000` would start the BUN server listening for connections on port 3000.'
        prefer-latest: '[AI] The `--prefer-latest` flag used with the `npm install` or `yarn install` commands is used to install the latest version of a package and its dependencies, rather than using the specific version specified in the package.json file or lockfile. This can be helpful when working on a project where you want to ensure that you have the most up-to-date versions of all packages to avoid potential compatibility issues with other dependencies. It is important to note that using `--prefer-latest` can result in more frequent updates, which may introduce new bugs or breaking changes.'
        prefer-offline: '[AI] The `--prefer-offline` flag in BUN, a Node.js bundler and package manager, instructs it to prioritize using locally installed packages over fetching them from the network. This can be useful when working offline or when experiencing network issues, as it allows you to still use your existing dependencies without having to download them again.'
        preload: '[AI] The `--preload` flag in BUN (Bundler for Unified JavaScript), is used to instruct BUN to preload certain dependencies during the build process. This means that those specific modules will be fully resolved and ready-to-use before the main bundle is built or bundled scripts are executed, which can improve the overall performance of your application by reducing the amount of time spent on loading and parsing modules at runtime.'
        public-dir: '[AI] The `--public-dir` flag in Gatsby''s `gatsby build` command is used to specify the directory where your static files (images, fonts, etc.) are located. When you run `gatsby build`, Gatsby will copy these files from the specified directory into the output directory (usually `public/`) for deployment. This ensures that your static assets are accessible when your site is served from a production environment.'
        server-bunfile: '[AI] The `bun` flag `--server-bunfile` is used to specify a custom BUN file for starting a BUN server in Node.js projects. BUN is a new JavaScript bundle and module runner that aims to provide better performance than traditional bundlers like Webpack or Rollup. By providing the `--server-bunfile` option, you can tell BUN which file to use as the entry point for starting a development server instead of using the default `index.html` or `index.js`. This can be useful when working on larger projects with multiple entry points or custom configurations.'
        silent: '[AI] The `--silent` flag, when used with a Bash script or Unix command like `find`, `grep`, or `bun`, is used to suppress or mute output of non-error messages. This means that only error messages will be displayed, making the output more focused and cleaner. For instance, in the context of the `bun` package manager, running `bun install --silent` would only display error messages if an installation fails, otherwise no output is shown at all.'
        tsconfig-override: '[AI] The `--bun` flag is used with the BUN bundler in JavaScript development. The `--tsconfig-override` option allows you to provide a custom TypeScript configuration file that overrides the defaults set in your main `tsconfig.json` file. This can be useful when working on larger projects where different parts may require unique compiler options. For example, you might want one part of your project to use a specific version of TypeScript or have stricter type checking rules than others. By using the `--tsconfig-override` flag, you can customize the compilation process for each part of your project as needed.'
        use: '[AI] The `bun` command with the `--use` flag is a part of Bun, a JavaScript Bundler and Package Manager. This flag is used to install or link dependencies for a specific project in Bun. When you run `bun init` to create a new project, Bun will generate a `package.json` file for you. You can then use `bun add <dependency> --use` to add dependencies and have them automatically linked at compile time instead of being bundled into the output. Alternatively, you can also use `bun link <dependency> --use` to install a dependency as a link in your project directory. This means that changes to the dependency will be reflected in real-time during development.'
        version: '[AI] The `--version` option when used with the `bun` package manager is a command to check for the currently installed version of `bun`. When you run `bun --version` in your terminal, it will display the version number of the `bun` CLI (Command Line Interface) installed in your system. This information can be useful when troubleshooting or when updating to the latest version.'
        watch: '[AI] `bun --watch` is a command used in Bun, a JavaScript bundler and package manager. It starts Bun in watch mode, continuously compiling and re-bundling your project files as they change. This allows for live development, reducing the time needed to repeatedly build your project during the development process.'
