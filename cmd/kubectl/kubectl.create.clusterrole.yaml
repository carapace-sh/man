# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]
description: Create a cluster role
flags:
    --aggregation-rule=: An aggregation label selector for combining ClusterRoles.
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --non-resource-url*=: A partial url that user should have access to.
    --resource*=: Resource that the rule applies to
    --resource-name*=: Resource in the white list that the rule applies to, repeat this flag for multiple items
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    --verb*=: Verb that applies to the resources contained in the rule
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource. A ClusterRole defines a set of permissions that can be granted to any user or service account in the cluster, regardless of the namespace they belong to. This command takes a YAML manifest or JSON file as an argument, which describes the desired state for the new ClusterRole, including its name and the list of permissions it grants. Once executed, `kubectl` creates the new role object in the Kubernetes cluster, allowing the defined access to be granted to the specified entities.'
    flag:
        aggregation-rule: |-
            [AI] The `kubectl create clusterrole` command is used to create a new ClusterRole in Kubernetes, which defines a set of permissions that can be granted to any user or service account across the entire cluster. The `--aggregation-rule` flag specifies how to merge the permissions of multiple roles when defining this new role:

            1. `none`: No permission merging is done (the new role gets no permissions from other roles).
            2. `merge`: Permissions from all referenced roles are merged together using the standard Kubernetes Role merging rules.
            3. `recursive`: Similar to merge, but also recursively merges any referenced roles' references to other roles.

            This flag helps control how permissions from multiple roles get combined when defining a new role.
        allow-missing-template-keys: |-
            [AI] `kubectl create clusterrole` is a command used to create a new ClusterRole object in Kubernetes using the `kubectl` command-line interface. The `--allow-missing-template-keys` flag is an optional argument that allows the creation of a ClusterRole definition with missing keys or placeholders (indicated by double curly braces, `{{ }}`) in YAML templates.

            When this flag is used, Kubernetes will create the Role without enforcing the validation checks for mandatory fields. This can be useful when creating a new role definition that is still being developed and doesn't have all the required keys filled yet. Once all necessary keys are provided, you would update the YAML file and re-apply it to fully define the ClusterRole.
        dry-run: '[AI] `kubectl create clusterrole --dry-run` is a command used in Kubernetes to create a ClusterRole object definition without actually applying it to the cluster. The `--dry-run` flag outputs the YAML manifest that would be created if applied, allowing users to review and modify it before execution. This can help prevent accidental changes or misconfigurations when creating complex role definitions for managing Kubernetes resources at a higher level within a cluster.'
        field-manager: |-
            [AI] `kubectl create clusterrole` is a command used to create a new ClusterRole resource in Kubernetes using the `kubectl` CLI (Command Line Interface). A ClusterRole defines a set of permissions that can be granted to any user or group in a Kubernetes cluster.

            The `--field-manager` flag is an option that can be passed when creating a new resource with `kubectl`. It sets the `manager` field in the resource's metadata, which is used by the Kubernetes API Controllers to manage the state of the resource. When this flag is set, any change made to the resource through the Kubernetes dashboard or other tools will be detected and rolled back if they conflict with the desired state defined in the `manager` field. This helps ensure that the resource's configuration remains consistent across different tools and users.
        non-resource-url: '[AI] The `kubectl create clusterrole` command is used to create a new ClusterRole object in Kubernetes. The `--non-resource` flag is an optional argument that instructs `kubectl` not to create or manage any associated resources, such as RoleBindings or SubjectAccessReviews, along with the ClusterRole. In other words, this command creates only the definition of the role and does not create any rules for it to apply to. This flag is useful when you want to define a new role but don''t intend to grant access to it right away.'
        output: |-
            [AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource object. This command is typically run from the terminal or command line interface of a system where `kubectl` is installed and configured to access a Kubernetes cluster.

            The `--output` flag is an optional argument that can be provided with this command to specify the output format for the `kubectl` response. By default, `kubectl` will print the status of the newly created ClusterRole to the terminal. However, you can use the `--output=json`, `--output=yaml`, or other formats (like `textplain` or `template`) to get the output in a different format. For example:

            * `kubectl create clusterrole myrole --output=json` will print the ClusterRole object in JSON format.
            * `kubectl create clusterrole myrole --output=yaml` will print it in YAML format, which is more human-readable and commonly used for Kubernetes configuration files.
        resource: '[AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource. A ClusterRole defines a set of permissions that can be granted to any user or service account in the cluster, regardless of which namespace they are in. The `--resource` flag is used to specify the name or path to the resource file that contains the definition for the desired ClusterRole. This flag is passed as an argument to `create`, which tells Kubectl to create a new resource based on the provided configuration.'
        resource-name: '[AI] `kubectl create clusterrole` is a command used to create a new ClusterRole in Kubernetes using the `kubectl` command-line tool. A ClusterRole defines a set of permissions that can be granted to any user or group in the cluster, applying to all the API servers in the cluster. The `--resource-name` flag is optional and is used to specify a name for the resource being created. If not provided, Kubernetes will generate a random name. Together, these commands allow you to create and manage ClusterRoles with fine-grained access control across your entire Kubernetes cluster.'
        save-config: '[AI] `kubectl create clusterrole` is a command used with the Kubernetes command-line interface (CLI) tool to create a new ClusterRole resource. A ClusterRole defines a set of permissions that can be applied to any user or group in a Kubernetes cluster. The `--save-config` flag is an optional argument that saves the resulting YAML configuration for the newly created ClusterRole to a file on your local machine, which can then be used for applying the same configuration elsewhere using `kubectl apply`. In summary, this command creates a new ClusterRole and provides the option to save its YAML definition for later use.'
        show-managed-fields: |-
            [AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource. The `--show-managed-fields` flag is an optional argument that, when provided, causes the output of the creation to include the managed fields of the resource.

            Managed fields are metadata fields in Kubernetes resources that keep track of which parts of the resource have been managed by the Kubernetes API server. This information can be useful for understanding which fields were set by a particular operation or controller, and can aid in troubleshooting and debugging. When `--show-managed-fields` is used with `create clusterrole`, it adds a `metadata.managedFields` field to the output that shows which fields of the new ClusterRole were created or updated as part of the operation.
        template: '[AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource. The `--template` option is used with this command to generate the YAML definition of the new role based on a given template, rather than providing an explicit YAML manifest file. This allows for creating roles using variables and dynamic values. The resulting YAML can then be saved as a file or directly applied to the Kubernetes cluster using `kubectl`.'
        validate: '[AI] `kubectl create clusterrole` is a command used in Kubernetes to create a new ClusterRole resource. A ClusterRole defines a set of permissions that can be applied to any user or group in a Kubernetes cluster. The `--validate` flag, when used with this command, causes `kubectl` to validate the YAML definition file provided, against the OpenAPI schema for Kubernetes resources, before actually creating the resource in the cluster. This helps ensure that the ClusterRole is correctly defined according to the Kubernetes API specifications and avoids potential errors or inconsistencies during creation.'
        verb: '[AI] `kubectl create clusterrole` is a command used to create a new ClusterRole object in a Kubernetes cluster. A ClusterRole defines a set of permissions that can be granted to any user or service account in the entire cluster. The `--verb` flag specifies the specific action(s) that are allowed for the resources defined in the role. For example, "create clusterrole myrole --verb=create,update" would create a new ClusterRole named "myrole" with the ability to create and update resources in the entire cluster.'
