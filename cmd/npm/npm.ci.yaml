# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ci
description: Install a project with a clean slate
flags:
    --ignore-scripts: Disable scripts
    --script-shell=: shell to use for scripts
documentation:
    command: '[AI] `npm ci` is a command used in Node.js projects to install and update dependencies specified in the `package-lock.json` or `yarn.lock` file. It''s a deterministic installation, meaning it will always install the same exact versions of packages as defined in those files for reproducibility across different machines. It also runs any scripts listed under "scripts" in `package.json`, if they are marked with the prefix "pre-" or "post-".'
    flag:
        ignore-scripts: '[AI] `npm ci --ignore-scripts` is a command used in Node.js projects with a locked package json (package-lock.json or yarn.lock file). It runs the deterministic installation of npm packages specified in the package.json file, bypassing any scripts mentioned in the "scripts" section. This command is useful when you want to ensure that only the listed dependencies are installed and updated without executing any scripts, which can be helpful for continuous integration or security purposes.'
        script-shell: |-
            [AI] The `npm ci --script-shell` command is a specialized npm script used in Node.js projects for installing and managing dependencies in a deterministic way. It's an alternative to the standard `npm install` command.

            The `--script-shell` option specifies that the scripts listed in the `scripts` field of the `package.json` file should be run inside a new child process using the specified shell (default is `/bin/sh`).

            `npm ci`, short for "create-installation," is designed to be used in continuous integration and testing environments, where maintaining a consistent environment is essential. It does a clean checkout of the repository, installs dependencies from the lockfile (`package-lock.json` or `yarn.lock`), and runs any scripts listed under the "postinstall" or "prepare" keys.

            Using `--script-shell` can be useful when working with complex projects that require specific shell configurations or executables for running scripts. It ensures that the dependencies are installed correctly and the project is ready to use with the specified environment.
