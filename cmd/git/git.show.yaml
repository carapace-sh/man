# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: show
description: show branches and their commits
group: main
flags:
    --decorate-refs-exclude=: do not decorate refs that match <pattern>
    --decorate-refs=: only decorate refs that match <pattern>
    --decorate?: decorate options
    --mailmap: alias of --use-mailmap
    --source: show source
    --use-mailmap: Use mail map file
    -L=: Process line range n,m in file, counting from 1
    -q, --quiet: suppress diff output
documentation:
    command: '[AI] `git show` is a Git command used to display the changes introduced in a specific commit. When you run `git show <commit>`, it shows the difference between the parent commit and the specified commit, along with meta-data such as author, message, and date. This command is helpful for inspecting the details of a particular commit or understanding the changes made in it.'
    flag:
        L: '[AI] The `git show` command with the `-L` (lowercase L) option is used to display the differences between specific commit versions of a file in Git. It shows the differences between the file as it appeared in the specified commit and its most recent ancestor commit. This can be helpful for understanding what changes were made to a particular file during a development process.'
        decorate: '[AI] `git show --decorate` is a Git command used to display the history of a specific commit, along with information about its branches and tags. The `--decorate` option enhances the output by adding ref names (branches and tags) for each marked commit in the output. This can be helpful for understanding the relationship between commits, branches, and tags in a Git repository.'
        decorate-refs: '[AI] `git show --decorate-refs` is a Git command used to display the specified commit along with its branch and tag information. The `--decorate-refs` option makes Git print the refs (branches or tags) that point to the shown commit, providing a clear view of the relationship between commits and their associated branches or tags. It helps in understanding the history of a project, especially when working with multiple branches or tags.'
        decorate-refs-exclude: '[AI] `git show --decorate-refs-exclude` is a Git command used to display the commit history with decorator information, but excluding the refs that match a given pattern in the argument. This can be useful when you want to see the commit history of a specific branch or tag without the noise from other references, such as stray detached HEADs or remote tracking branches. The argument is a regular expression used to filter the ref names to exclude. For example, `git show <commit> --decorate-refs-exclude=remote/` would show only the local branches and tags without displaying the remote tracking branches.'
        mailmap: '[AI] `git show --mailmap` is a Git command that displays the commit message and author information in an email format. The `--mailmap` option makes Git replace the standard author and committer names with their corresponding email addresses, creating a more complete email-like output. This can be useful for reviewing the history of a project and understanding who made which changes and when, especially when working with contributors using different email addresses.'
        quiet: '[AI] `git show --quiet` is a Git command used to display specific information about a commit. The `--quiet` option makes the output only contain the commit hash and the message body, without any extra lines or formatting. This can be useful for scripts or automated processes where you just need the commit details without any additional noise.'
        source: '[AI] `git show --source` is a Git command used to display the differences between the current commit and its first parent commit. The output is shown in a format that can be copied and pasted into a text editor for further review or modification. This command is useful when you want to see the changes made in a commit, without navigating through the commit history with `git checkout`.'
        use-mailmap: '[AI] `git show --use-mailmap` is a Git command used to display the specified commit''s content and its associated email addresses. When you run this command, Git will apply any mailmap configurations before displaying the commit message. Mailmap files map email addresses to names or nicknames for friendly commit messages. This allows maintaining a clean and consistent author name across multiple commits from the same email address.'
