# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: uninstall
description: Remove a package
flags:
    --no-save: Prevents saving to `dependencies`
    --save-dev: Package will appear in your `devDependencies`
    --save-optional: Package will appear in your `optionalDependencies`
    --save-peer: Package will appear in your `peerDependencies`
    --save-prod: Package will appear in your `dependencies`.
    --workspaces: Enable running a command in the context fo all workspaces
    -S, --save: Package will appear in your `dependencies`
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm uninstall` is a command used in Node.js projects to remove specified packages and their related dependencies from the node_modules folder. When you run this command followed by the package name, npm will recursively delete that package and any dependent packages no longer needed based on your project''s current package.json file. This can help manage project dependencies and keep your Node.js environment up-to-date.'
    flag:
        no-save: '[AI] `npm uninstall --no-save` is a command used in Node.js projects managed with npm (Node Package Manager). This command is used to remove a specific package from the project''s node\_modules directory and the local npm cache, but it will not update the package dependencies listed in any of the package.json files in the project. The `--no-save` flag prevents npm from automatically updating the saved dependencies in package.json files. This can be useful when you want to remove a package manually without affecting the saved dependencies.'
        save: '[AI] The command `npm uninstall --save` is used to uninstall a specific package and its saved dependency in a Node.js project managed by npm (Node Package Manager). When you run this command followed by the package name, npm will remove that package from your `node_modules` folder and update your `package.json` file to remove it as a dependency with a `~` or `^` version specifier if present. This is useful when you want to remove an unwanted or outdated package from your project.'
        save-dev: '[AI] `npm uninstall --save-dev` is a command used in Node.js project development with npm (Node Package Manager). This command is used to uninstall a specific package listed as a devDependency in the `package.json` file. DevDependencies are packages required for development but not necessary for the production environment. Running this command will remove the specified package, update the `package-lock.json` or `yarn.lock` file if applicable, and adjust the corresponding entry in the `package.json` file to reflect the deletion.'
        save-optional: '[AI] The command `npm uninstall --save-optional` is used to uninstall an optional dependency from a Node.js project''s package.json file. When a package is installed with the `--save-optional` flag during `npm install`, it gets added to the `optionals` field instead of the `dependencies` or `devDependencies`. Therefore, using `npm uninstall --save-optional <package-name>` will remove that optional dependency without affecting other dependencies or devDependencies.'
        save-peer: '[AI] The `npm uninstall --save-peer` command is used to remove a specific peer dependency from your Node.js project. Peer dependencies are packages that other packages in your project depend on, but are not directly listed as dependencies in your package.json file. By using `--save-peer`, npm will keep track of the removal in the "peerDependencies" section of your package.json file. This command helps manage and keep a record of required peer dependencies for other packages to function correctly.'
        save-prod: '[AI] The command `npm uninstall --save-prod` is used to remove a specific package from your Node.js project and its saved dependencies in the `package.json` file under production environment. This means that the packages will not be included when building the project for deployment. This can help reduce the size of the final bundle, improving load times for users. The `--save-prod` flag tells npm to remove the package from `package.json`''s `dependencies` section instead of `devDependencies`.'
        workspace: '[AI] `npm uninstall --workspace` is a command used in Node.js projects managed with npm (Node Package Manager) and workspaces. This command allows you to uninstall packages from all the projects within a multi-package workspace at once, without having to navigate between each project individually. It simplifies the process of managing common dependencies across multiple related packages.'
        workspaces: '[AI] `npm uninstall --workspaces` is a command used in npm (Node Package Manager) to uninstall packages globally across all projects in a multi-package workspace. When you run `npm init workspaces` to create an npm workspace, each project has its own `node_modules` directory with independently installable packages. The `--workspaces` option with `npm uninstall` allows you to specify that you want to uninstall a package from all projects within the workspace instead of just the current one. This can be useful when you need to remove a common dependency across multiple projects in your workspace.'
