# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: task
description: A task runner / simpler Make alternative written in Go
flags:
    --output-group-begin=: message template to print before a task's grouped output
    --output-group-end=: message template to print after a task's grouped output
    --status: exits with non-zero exit code if any of the given tasks is not up-to-date
    --summary: show summary about a task
    --version: show Task version
    -C, --concurrency=: limit number tasks to run concurrently
    -a, --list-all: lists tasks with or without a description
    -c, --color: colored output. Enabled by default. Set flag to false or use NO_COLOR=1 to disable (default true)
    -d, --dir=: sets directory of execution
    -f, --force: forces execution even when the task is up-to-date
    -h, --help: shows Task usage
    -i, --init: creates a new Taskfile.yaml in the current folder
    -l, --list: lists tasks with description of current Taskfile
    -n, --dry: compiles and prints tasks in the order that they would be run, without executing them
    -o, --output=: 'sets output style: [interleaved|group|prefixed]'
    -p, --parallel: executes tasks provided on command line in parallel
    -s, --silent: disables echoing
    -t, --taskfile=: choose which Taskfile to run. Defaults to "Taskfile.yml"
    -v, --verbose: enables verbose mode
    -w, --watch: enables watch of the given task
    -x, --exit-code: pass-through the exit code of the task command
documentation:
    command: |-
        [AI] The `task` command is used in various contexts, particularly in Unix-based operating systems and project management tools like GitHub Actions or Make. In its most basic form, it refers to a specific unit of work that needs to be completed as part of a larger project.

        In Unix-based systems, `task` is often a synonym for `job`, which is a process running in the background. The `task` command can be used with tools like `crontab` or `systemd` to manage scheduled jobs or background processes.

        However, when using project management tools like GitHub Actions or Make, the `task` command refers to a defined step in a workflow or build process. Each task specifies a set of actions (i.e., commands) that need to be executed as part of a larger pipeline. This helps streamline and automate development processes by allowing users to define complex builds and tests as reusable tasks.
    flag:
        color: '[AI] The `--color` option in a Unix-like command, such as `make` or `git`, controls whether output from the command is colored. When used with the `task` command specifically, it enables colored output in the terminal, making it easier to distinguish between different types of messages and error messages.'
        concurrency: '[AI] The `--concurrency` flag in Docker Compose is used to configure the number of parallel tasks that can be run for a particular service during the build process. It helps manage resource usage and improve build time efficiency. By default, this value is set to `default`, which means that Docker Compose will use as many jobs as specified by the system''s CPU count. However, you can manually specify an integer value to limit or increase the number of concurrent tasks.'
        dir: '[AI] The `--dir` flag is a option for the `task` command in various task management systems like Make or Rake. It specifies that the given argument is the name of a directory, and the task depends on the files inside that directory being built or processed. When this flag is used, the system will look for rules to build or process each file in the specified directory.'
        dry: '[AI] The `--dry` flag is a common option used in Unix-based command-line tools, including Git and Docker. It stands for "dry run" or "mock run." When this flag is passed with a command, the tool will simulate the operation without actually executing it. It provides an opportunity to preview the changes that would be made if the command were run in its normal form, helping users avoid unintended consequences and mistakes. The output usually includes details of what would have been done.'
        exit-code: '[AI] The `--exit-code` flag in Docker or similar container runtimes is used to specify a specific exit code for a container when it stops running. By default, when a container exits, its exit code is the last one that was returned by the process running inside it. However, you can use the `--exit-code` flag to set a different exit code explicitly. For example, if you want your container to always stop with an exit code of 1, regardless of the behavior of the process inside it, you can start it with the command `docker run --exit-code=1 ...`. This can be useful for scripting and automation workflows.'
        force: '[AI] The `--force` flag is a command-line option used in various tools and scripts, particularly in version control systems like Git. It overrides the confirm prompt before performing a potentially destructive or risky action, such as force-pushing changes to a remote repository without merging first. This can lead to data loss if used carelessly, making it an advanced feature that requires caution and understanding of its implications.'
        help: |-
            [AI] The `--help` option or flag is a common command used in various programs and tools, including those used in Unix-like operating systems and programming languages. It is typically invoked by running `task --help` (or `task help`, depending on the specific implementation) in the terminal or command line interface.

            The purpose of this flag is to display comprehensive information about how to use the given task command or tool effectively. This includes details such as:

            1. Proper usage and syntax (e.g., `task COMMAND [OPTIONS]...`)
            2. Description and purpose of each command
            3. A list of available options and their meanings
            4. Examples and use cases

            By presenting this information, the `--help` flag assists users in understanding how to correctly utilize the tool or command, ultimately saving time and reducing errors.
        init: '[AI] The `docker run --init` flag is used when starting a container from an image. It instructs Docker to create and start a new container with the given image, and to allocate a TTY and attach it to the container if standard input is not a tty. Additionally, `--init` ensures that the container''s init process (PID 1) is properly set up. This flag can be particularly useful when running containers as services or daemons, as it helps ensure that they properly replace the existing process and do not run in the background alongside other processes.'
        list: '[AI] The `task list` command is a common option in task management systems like Docker Compose or GitLab CI/CD. It simply lists all the defined tasks for the current project, providing their names for easy identification and reference. It does not run any of the tasks but merely displays them, giving users an overview of what can be executed within that specific context.'
        list-all: '[AI] The `--list-all` flag for the Docker `tasks` command lists all tasks defined in a multistage build, showing details such as task name, description, and the container from which it was inherited. This flag can be used with the `docker build` command to get an overview of all the individual steps involved in building an image.'
        output: '[AI] The `--output` flag in a Unix-like command (such as `task`) is used to specify where the output of the command should be written. It takes an argument which can be a file path or standard output stream (e.g., "-"). When you run a task with this flag, the result will be saved in that location instead of being printed on the terminal by default.'
        output-group-begin: '[AI] The `--output-group-begin` flag is a command-line option used in some Unix-like tools, such as `find` or `xargs`, to modify the output format. When this option is provided, it signals the beginning of a new group of output, usually indicating a change in the context or criteria being applied to the data being processed. The exact meaning and behavior may depend on the specific tool being used.'
        output-group-end: '[AI] The `--output-group-end` flag is a command line option used in tasks or pipelines within tools like GitLab CI/CD, Jenkins, and Docker. It signifies the end of a group of jobs or stages with a common identifier in the YAML definition file. This flag helps to organize and visualize the flow of jobs or stages within a pipeline, allowing users to easily identify related tasks and their dependencies.'
        parallel: '[AI] The `--parallel` flag in a task runner like Make or Rake is used to execute multiple tasks concurrently. It enables parallel processing by running tasks in separate processes or threads, reducing the overall build time. This can significantly improve efficiency for projects with several interdependent tasks that can be executed in parallel without causing conflicts. However, it''s important to consider potential resource contention and dependencies when using this flag.'
        silent: '[AI] The `--silent` flag, when used with a command or script, instructs it to run in quiet mode and suppress all non-error output messages. This means that only error messages will be displayed during the execution of the task. By using this flag, you can run tasks in the background without interfering with the normal terminal output.'
        status: '[AI] The `--status` flag for the Docker `tasks` command is used to display the current status of one or more tasks in a multi-container Docker Compose environment. It returns information such as the task name, status (running, exited, or error), and other details like exit code if the task has completed. To use this flag, run the `docker-compose tasks --status` command followed by the name(s) of the task(s) you want to check.'
        summary: '[AI] The `--summary` flag is a command-line option for various tools, typically used in the context of project management or automation systems. It is designed to generate and display a summary or an overview of the status or result of a task or a series of tasks. This may include key metrics like completion percentage, duration, start and end times, errors or warnings, and any relevant messages or comments associated with the task. The specific format and details of the summary output can vary depending on the underlying system or tool.'
        taskfile: '[AI] The `--task-file` flag in Docker is used to specify a custom file that contains one or more `docker run` commands, instead of passing arguments directly on the command line. This flag allows users to define and manage multiple related container runs as a single entity, which can be useful for automating and managing complex multi-container workflows. The contents of the task file are typically written in YAML or JSON format, following the Docker Compose file syntax.'
        verbose: '[AI] The `--verbose` flag is used with various command-line tools, including `task`, to provide more detailed output during the execution of a task or a series of tasks. It enhances the level of information displayed in the console, helping users understand the progress and details of the ongoing operations. In essence, it''s a way to enable more extensive logging for better transparency.'
        version: '[AI] The `task --version` command is used in Taskfile, a lightweight and easy-to-use build automation tool, to check and print out the version number of the installed Taskfile CLI (Command Line Interface) application. This helps users ensure they are using the correct and latest version of the tool for their projects.'
        watch: '[AI] `task --watch` is a command in Docker Compose that starts services defined in a docker-compose.yml file and then keeps monitoring them for changes. Whenever a change is detected, the affected service(s) are rebuilt and restarted automatically to apply the changes. This flag is useful for development workflows where you frequently make modifications to your application code or configuration files and want to quickly see the impact of those changes in the running containers.'
