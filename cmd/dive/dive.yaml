# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: dive
description: Docker Image Visualizer & Explorer
flags:
    --ci: Skip the interactive TUI and validate against CI rules (same as env var CI=true)
    --ci-config=: If CI=true in the environment, use the given yaml to drive validation rules.
    --highestUserWastedPercent=: (only valid with --ci given) highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.
    --highestWastedBytes=: (only valid with --ci given) highest allowable bytes wasted, otherwise CI validation will fail.
    --lowestEfficiency=: (only valid with --ci given) lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.
    -h, --help: help for dive
    -j, --json=: Skip the interactive TUI and write the layer analysis statistics to a given file.
persistentflags:
    --config=: config file (default is $HOME/.dive.yaml, ~/.config/dive/*.yaml, or $XDG_CONFIG_HOME/dive.yaml)
    --source=: 'The container engine to fetch the image from. Allowed values: docker, podman, docker-archive'
    -i, --ignore-errors: ignore image parsing errors and run the analysis anyway
    -v, --version: display version number
documentation:
    command: '[AI] The `dive` command is used in scuba diving contexts to initiate a descent underwater, typically from a boat or a shore entry. It signals the beginning of an underwater exploration session, during which the diver uses their diving equipment, such as a buoyancy control device and scuba tank, to maintain neutral buoyancy and breathe underwater. The depth, duration, and objectives of the dive depend on various factors, including the diver''s experience level, planning, and intended destination.'
    flag:
        ci: |-
            [AI] The `dive --ci` command is a Git submodule utility, used to interactively commit or rebase changes in a submodule while keeping track of the parent commits in the superproject.

            The `--ci` flag stands for "commit interactively," enabling an interactive commit session where you can review and edit each hunk (changeset) before committing it. This is useful when you have conflicts or want to manually adjust changes in the submodule before committing them along with your superproject's changes.

            Additionally, `dive` allows you to work within the submodule's Git environment as if you were directly in that repository. It's a powerful tool for managing complex projects with interdependent submodules.
        ci-config: |-
            [AI] The `dive --ci-config` command in Git is used to initialize a new Git repository and configure it as a CodeInsights (CI) repository for GitHub or GitLab. This means that the repository will be able to receive automatic code scanning feedback from the selected CI service.

            The `--ci-config` option specifies a configuration file, usually named `.gitlab-ci.yml` or `.github-actions/workflows/*.yml`, which defines the workflow and settings for the CI service to use when scanning your codebase. This includes defining the languages used in your project, which scanners to use, and how often they should be run.

            Using `dive --ci-config` creates a new Git repository with the specified configuration file already included, making it easy to set up continuous integration and inspection for your project right from the start.
        help: |-
            [AI] The `dive` `--help` command is used to display detailed help information about the Dive tool, which is a Git submodule explorer and manager. It provides options for various features such as:

            * `search <path>`: Search for submodules in the current repository.
            * `submodule <command> [<args>]`: Manage submodules using Git commands (e.g., add, remove, pull).
            * `show [<path>]`: Display information about one or more submodules.
            * `config`: Configure Dive settings.

            Use the command with no arguments to display a list of available commands and their usage descriptions.
        highestUserWastedPercent: |-
            [AI] The `dive --highestUserWastedPercent` command is a part of Docker Bench Security, an open-source scanning tool for Docker hosts and containers. This specific command searches for any container that has a user running inside the container consuming an unusually high amount of resources compared to other containers in the system.

            The `--highestUserWastedPercent` flag sets the output format to display only the container with the highest percentage of wasted resources, i.e., the difference between the container's reported resource usage and the actual resource consumption by the user running inside the container. This command helps identify potential misconfigurations or inefficient applications that are wasting system resources.
        highestWastedBytes: '[AI] The `dive --highest-wasted-bytes` command is a part of the Dive deep dive analysis tool for Kubernetes. It is used to identify containers within a Kubernetes cluster that have the highest amount of wasted memory, i.e., memory that is allocated but not being used. This information can be valuable in optimizing resource utilization and improving overall efficiency in a Kubernetes environment.'
        json: '[AI] `dive --json` is a command-line utility for Docker, used to explore the filesystem of containers. The `--json` option enables output in JSON format, allowing scripts and tools to parse and analyze the data more effectively compared to textual output. This option provides detailed and structured information about the container''s filesystem hierarchy, making it useful for automation tasks, integrating with other systems, or performing bulk analysis.'
        lowestEfficiency: '[AI] The `dive --lowestEfficiency` flag is a command used in Git for performing an interactive rebase with a specific configuration. When this flag is passed, Git will choose the most conflict-prone base commit for each conflicting commit during the rebasing process. This means that Git will attempt to apply the changes as late as possible, resulting in potentially more conflicts and a longer rebasing session. The main reason for using this flag would be to ensure that all conflicts are resolved before completing the rebase.'
