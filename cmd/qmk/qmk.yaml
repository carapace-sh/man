# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: qmk
description: CLI wrapper for running QMK commands
flags:
    --color: Enable color in output
    --config-file=: The location for the configuration file
    --datetime-fmt=: Format string for datetimes
    --interactive: Force interactive mode even when stdout is not a tty.
    --log-file-fmt=: Format string for log file.
    --log-file-level=: Logging level for log file.
    --log-file=: File to write log messages to
    --log-fmt=: Format string for printed log output
    --no-color: Disable color in output
    --no-unicode: Disable unicode loglevels
    --unicode: Enable unicode loglevels
    -V, --version: Display the version and exit
    -h, --help: show this help message and exit
    -v, --verbose: Make the logging more verbose
documentation:
    command: '[AI] QMK (Qwerty Mechanical Keyboard) is an open-source software and firmware platform for creating custom keyboard layouts and features. It allows users to easily program and remap keys on their mechanical keyboards using various tools, including the QMK Toolbox and Visual Studio Code. The customization possibilities extend beyond basic key remapping to include advanced functionality such as layer switching, macros, and even OLED screen support for certain keyboards. With a large community of users and extensive documentation, QMK offers flexibility and creativity for those seeking to unlock the full potential of their mechanical keyboards.'
    flag:
        color: '[AI] `qmk --color` is a command used in the QMK (Quantum Mechanical Keyboard) firmware project. This command is used to build the QMK firmware with the color theme enabled for the keyboard''s RGB LEDs. It allows users to customize the look of their keyboards by selecting different color schemes for various functions or layers. The output of this command will be a compiled firmware file that incorporates the selected color scheme.'
        config-file: '[AI] `qmk --config-file` is a command used in the Quantum Mechanical Keyboard (QMK) firmware. It allows users to specify a custom configuration file when compiling QMK projects. This can be useful for managing complex keyboard layouts or for overriding default settings. The flag takes the path to the desired config file as its argument, enabling fine-grained control and flexibility in creating custom keyboards with QMK.'
        datetime-fmt: '[AI] `qmk --datetime-fmt` is a command-line argument for the QMK (Quantum Mechanical Keyboard) firmware. It sets the date and time format for keyboards using this firmware. The format string can be used to customize how dates and times are displayed on RGB matrix keyboards or other QMK projects with real-time clock support. For example, `--datetime-fmt=Y:M:D H:M:S` sets the format to "Year:Month:Day Hour:Minute:Second".'
        help: '[AI] `qmk --help` is a command used in QMK (Quantum Mechanical Keyboard), an open-source software for programming keyboards. This command displays a help message that provides information about available subcommands, usage instructions, and brief descriptions. It''s useful for understanding how to use the QMK toolset effectively.'
        interactive: '[AI] `qmk --interactive` is a command used in the QMK keyboard firmware project to start an interactive session with the QMK compiler. This session allows users to test, debug, and experiment with new keyboard layouts or features without having to build and flash a new firmware image every time. It provides a real-time feedback loop for developers and enthusiasts to iterate quickly on their projects.'
        log-file: '[AI] `--log-file` is a command-line option for QMK (Quantum Mechanics Keyboard), an open-source keyboard firmware. This option enables and specifies a file path for logging detailed information during the compilation process. The logged data can be used for debugging purposes or analyzing the build progress.'
        log-file-fmt: '[AI] `--log-file-fmt` is a command-line option for QMK (Quantum Mechanical Keyboard), an open-source keyboard firmware. This option determines the format of logs created by QMK during compilation and flashing. By setting this option to a specific format string, users can customize the output of log files for better readability or analysis. For example, `--log-file-fmt="%F %T: %M:%S.%3N %p %f %B%s%b [%e] %m: %n: %l:%s"` generates detailed logs with timestamp, file name, line number, and error messages if any.'
        log-file-level: |-
            [AI] `--log-file-level` is a command-line option for QMK (Quantum Mechanical Keyboard), an open-source keyboard firmware. It sets the log file's severity level for messages generated during compilation or flashing of the firmware.

            Here are some common log levels:

            1. `ERROR`: Critical errors that prevent the process from continuing.
            2. `WARNING`: Non-critical issues or potential problems.
            3. `INFO`: Informational messages about progress and status.
            4. `DEBUG`: Detailed diagnostic information useful for debugging.
            5. `TRACE`: Extremely detailed diagnostic information, often used for low-level development.

            Using the option `--log-file-level=LEVEL`, where LEVEL is one of the above levels, sets the minimum log level for messages written to the output file. For example, using `--log-file-level=INFO` will only write messages with severity `INFO` or higher to the log file.
        log-fmt: '[AI] `qmk --log-fmt` is a command-line option for the QMK (Quantum Mechanical Keyboard) firmware. It specifies the logging format for the output of the `--log` flag, which enables detailed debugging information during keyboard compilation. The available log formats include "plain", "json", and "terse". For instance, `qmk --log-fmt json mykeyboard.h` generates a JSON-formatted log file.'
        no-color: '[AI] The `--no-color` flag for QMK (Quantum Mechanical Keyboard) is used to disable colored output in terminal or console messages generated by the QMK compiler or other tools. This can be useful when working in environments where colored output is not supported or preferred, such as in scripting or automated builds. By using `--no-color`, QMK will generate plain text output instead.'
        no-unicode: '[AI] `qmk --no-unicode` is a command-line argument used with the QMK (Quantum Mechanical Keyboard) firmware. It instructs QMK to build the keyboard firmware without support for Unicode characters. This means that only ASCII characters will be available for use in custom key functions or OLED displays. Building with `--no-unicode` can reduce the size of the firmware, making it suitable for keyboards with limited memory.'
        unicode: '[AI] `qmk --unicode` is a command-line argument used with QMK Firmware, an open-source microcontroller firmware for keyboards. This option enables Unicode support in the keyboard''s firmware, allowing it to input special characters, emojis, and symbols not directly available on the keyboard layout. It extends the expressiveness of the keyboard and enhances the user experience by providing a wider range of typable characters.'
        verbose: '[AI] `qmk --verbose` is a command-line option used with the QMK (Quantum Mechanical Keyboard) firmware. It increases the amount of output during compilation to provide more detailed information about the build process, including warnings and error messages. This can be helpful for debugging and understanding complex builds in the QMK environment.'
        version: '[AI] `qmk --version` is a command used in the QMK (Quantum Mechanics Keyboard) firmware project to check the version of the installed QMK compiler. When executed, it prints out the major and minor versions of the QMK compiler alongside any additional build information such as the commit hash or branch name. This can be helpful for debugging or ensuring that the correct version of the compiler is being used when building custom keyboard firmware with QMK.'
