# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: package
description: Low-level conda package utility
flags:
    --pkg-build=: Package build number of the created package.
    --pkg-name=: Package name of the created package.
    --pkg-version=: Package version of the created package.
    -h, --help: Show this help message and exit.
    -n, --name=: Name of environment.
    -p, --prefix=: Full path to environment location (i.e. prefix).
    -r, --reset: Remove all untracked files and exit.
    -u, --untracked: Display all untracked files and exit.
    -w, --which*=: Given some PATH print which conda package the file came from.
documentation:
    command: '[AI] `conda` is a packaging and dependency management system for scientific computing environments in data science. The `conda package` command is used to install, update, or remove packages (software dependencies) from a conda environment. It can be used with various options such as specifying the name of the package, version, or channel to install from. For example: `conda install package_name`, `conda update package_name`, or `conda remove package_name`.'
    flag:
        help: '[AI] `conda package` is a command-line utility in Anaconda Distribution for managing and creating Conda packages. The `--help` option provides detailed usage information about that command with its various subcommands, such as `create`, `publish`, `run`, etc. It explains the format of the command followed by the required or optional arguments, their descriptions, and examples if available. For instance, `conda package create --help` will give you information on creating a new Conda package using the given recipe files.'
        name: '[AI] The `conda package` command is a tool in Anaconda Distribution for managing and installing packages. The option `--name <package_name>` specifies the name of the target package to query or install. For example, `conda install --name my_package` installs the package named "my\_package", and `conda search --name my_package` searches for available packages with that name.'
        pkg-build: '[AI] `conda package --pkg-build` is a command used in Anaconda''s Conda packaging system. It builds and creates a source distribution package from the current local directory, which includes the necessary metadata and dependencies for other users to install the package via Conda. The resulting source package can be uploaded to various package repositories for sharing with the wider community.'
        pkg-name: '[AI] The `conda package` command is a utility in Anaconda and Miniconda distributions for managing and installing Conda packages. The option `--pkg-name <package_name>` specifies the name of the desired package to be queried or installed. When used with the query function, it returns information about that package such as its version numbers, dependencies, and descriptions. When used with the install function, it installs the specified package and its dependencies.'
        pkg-version: '[AI] `conda package --pkg-version` is a command used in Anaconda or Miniconda distribution of Python and other data sciences packages. It returns the specific version number of a given package that is currently installed in the conda environment. For example, `conda package --pkg-version numpy` will display the version number of NumPy package that''s installed. This command can be useful when you want to check or record the exact version of packages that are used in your data science projects for reproducibility purposes.'
        prefix: '[AI] The `--prefix` option in a Conda package command is used to specify the installation prefix directory for the package. This is where all files of the installed package will be placed. By default, Conda installs packages in the conda environment''s default directories, but using `--prefix` allows you to install packages into a custom location. This can be useful when managing multiple installations or when working with limited disk space.'
        reset: '[AI] The `conda package --reset` command is used in Anaconda or Miniconda distribution of the Conda package manager to reset the state of specific packages. It forces Conda to reinstall packages from their original sources, ignoring any local modifications or saved metadata. This can be helpful when dealing with issues such as corrupted packages or version conflicts. However, it will delete all local files related to those packages, so use it with caution and ensure you have backups of important data.'
        untracked: '[AI] The `conda package --untracked` command is used in Anaconda or Miniconda distribution of Python to list packages that are currently installed in a conda environment but not part of the recorded dependencies (i.e., not tracked by the `environment.yml` or `environment.txt` files). These packages are often referred to as "extras" and can include tools or libraries not essential for the primary functionality of the project, but still useful for specific workflows. Running this command allows users to manage these untracked packages in their environment configuration.'
        which: '[AI] `conda package --which` is a command used in Anaconda and Miniconda distributions of the Conda package manager. This command is used to determine which version of a specific package is currently installed and active in the default environment. The output will display the fully-specified path to the package''s location, including the conda environment if it is not in the base environment.'
