# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ssh
description: Run shell or execute a command on a remote SSH node.
flags:
    --disable-access-request: Disable automatic resource access requests
    --local: Execute command on localhost after connecting to SSH node
    --no-disable-access-request&: Disable automatic resource access requests
    --no-forward-agent&: Forward agent to target node
    --no-local&: Execute command on localhost after connecting to SSH node
    --no-no-remote-exec&: Don't execute remote command, useful for port forwarding
    --no-participant-req&: Displays a verbose list of required participants in a moderated session.
    --no-tty&: Allocate TTY
    --no-x11-trusted&: Requests trusted (insecure) X11 forwarding for this session. This can make your local machine vulnerable to attacks, use with caution
    --no-x11-untrusted&: Requests untrusted (secure) X11 forwarding for this session
    --participant-req: Displays a verbose list of required participants in a moderated session.
    --request-reason=: Reason for requesting access
    --x11-untrusted-timeout=: Sets a timeout for untrusted X11 forwarding, after which the client will reject any forwarding requests from the server
    -A, --forward-agent: Forward agent to target node
    -D, --dynamic-forward=: Forward localhost connections to remote server using SOCKS5
    -L, --forward=: Forward localhost connections to remote server
    -N, --no-remote-exec: Don't execute remote command, useful for port forwarding
    -X, --x11-untrusted: Requests untrusted (secure) X11 forwarding for this session
    -Y, --x11-trusted: Requests trusted (insecure) X11 forwarding for this session. This can make your local machine vulnerable to attacks, use with caution
    -c, --cluster=: Specify the Teleport cluster to connect
    -o, --option=: OpenSSH options in the format used in the configuration file
    -p, --port=: SSH port on a remote host
    -t, --tty: Allocate TTY
documentation:
    command: '[AI] The `tsh ssh` command is not a standard command in Unix or Linux systems, but rather a specific command used in the TigerSHARE Terminal Session Manager (TSH). This command is used to open an SSH (Secure Shell) session with a remote server that has been previously configured and saved in TSH. It automatically establishes the encrypted connection and allows you to interact with the remote system as if you were physically present at the terminal.'
    flag:
        cluster: '[AI] `tsh ssh --cluster` is a command used in Tectonic, an open-source Kubernetes platform by CoreOS, to execute a parallel SSH session against a specified set of nodes in a Kubernetes cluster. The `--cluster` flag indicates that the command should be run in the context of a Tectonic managed cluster and will use the appropriate authentication and connection settings. Multiple nodes can be targeted by providing their labels or names as arguments. This command is useful for running tasks across multiple nodes concurrently, such as software updates or configuration changes.'
        disable-access-request: '[AI] The `--disable-access-request` option in the `ssh` configuration file (usually located at `/etc/ssh/sshd_config` or `~/.ssh/config`) for the OpenSSH SSH server disables the processing of access requests. Access requests allow clients to submit a query to the server asking if they are allowed to open an SSH connection based on various conditions, such as the client''s host or identity. Disabling this feature may increase security by reducing the attack surface for potential attacks targeting this functionality. It is important to note that disabling access requests may also prevent legitimate uses of this feature and should be done with caution.'
        dynamic-forward: |-
            [AI] `ssh` is a command-line tool for securely accessing remote servers using the Secure Shell (SSH) protocol. The option `--dynamic-forward` is used when setting up an SSH tunnel.

            When you use this option with the `-L`, `-R`, or `-J` flags to create a tunnel, the local port forwarded through the SSH connection will be dynamically assigned by the SSH client instead of being fixed to a specific port number. This is particularly useful when the remote server may have firewall rules that block specific ports or when you want to avoid hardcoding port numbers in your scripts.

            In summary, `tsh ssh --dynamic-forward` sets up an SSH tunnel where the local port used for forwarding will be dynamically assigned by the SSH client.
        forward: '[AI] The `-F` or `--forward` option in the `ssh` command of the `Tmux` (Terminal Multiplexer) `tssh` utility forwards local ports to the remote server. This means that a service listening on a specific port on the local machine is made accessible over the SSH connection to the remote host, allowing remote access to that service.'
        forward-agent: '[AI] The `-F` or `--forward-agent` option in the `ssh` command under `tmux` or `screen` session manager `tssh` is used to allow SSH-agent forwarding. This means that when you connect to a remote server using this flag, your local SSH agent (which holds your private keys) will be forwarded to the remote server, enabling you to use those keys for authentication on remote servers without having to manually copy the keys or configure the new server to trust them. This is particularly useful when accessing multiple remote servers through a jump host or when working in a multi-user environment.'
        local: '[AI] The `tsh ssh --local` command is a part of the Tiny Shell (tsh) in combination with SSH (Secure Shell). It is used to execute a command remotely over an SSH connection, but with the difference that the remote session is opened locally on the current machine, instead of opening a new terminal window for each remote session. This means all local and remote sessions are run within the same terminal session, which can be useful when dealing with multiple sessions at once. The `--local` option ensures that any output from the remote command is displayed in the local terminal rather than in a separate window.'
        no-disable-access-request: '[AI] The `tsh ssh` command with the option `--no-disable-access-request` is used in the Tsec security shell (TSH) for Secure Shell (SSH) connections. This flag prevents TSH from automatically disabling access requests during SSH sessions. Access requests are a feature of TSH that allows users to request authorization before performing certain actions, such as executing sensitive commands. By using `--no-disable-access-request`, the user decides to keep these requests active throughout the session instead of having them being disabled by default for better security control.'
        no-forward-agent: |-
            [AI] The `tsh ssh` command with the `--no-forward-agent` option is used in the Terraform SSH provider to configure an SSH connection without forwarding the local SSH agent.

            When you use `--no-forward-agent`, Terraform will not automatically forward your local SSH key when establishing a new connection with the remote server. Instead, you'll need to provide the private key file explicitly using the `private_key` argument or configure the connection using other means like a known hosts file.

            This option can be useful if you want to restrict access to the remote server, avoid accidentally forwarding sensitive keys, or manually manage your SSH keys for the connection.
        no-local: '[AI] The `tsh ssh --no-local` command is used in the Tiger Shaw''s TSH (Tiger SHell) SSH client. The `--no-local` option instructs TSH not to open a local terminal for the remote session. In other words, it runs the remote command in background without opening a new window or terminal on the local machine.'
        no-no-remote-exec: '[AI] The `--no-remote-exec` option in the `tssh` (Tab Synchronized SSH) command of the `tmux` terminal multiplexer disables the execution of remote commands specified in the `$TINGTAMUX_AUTOKEYMAP` or `$TMUX_CONF` files on the remote machine. This means that only local keybindings defined in the local `.tmux.conf` file will be applied when using SSH sessions managed by `tssh`. The flag helps prevent accidental execution of unwanted commands on remote machines and maintain better security.'
        no-participant-req: |-
            [AI] The `--no-participant-req` flag is an option used with the `tssh` (Tab-Serial Shawnee SHell) and `ssh` (Secure Shell) commands in a Unix or Linux environment.

            This flag disables the requirement for all participants in an ssh session to explicitly join using the `--` or `-o` option with the `-t` (pseudo-terminal) flag. This can be useful when you want to start a background process on a remote server via ssh without waiting for the shell prompt to return. By setting `--no-participant-req`, you can avoid having to manually join other users to the session.

            In summary, `tssh` or `ssh --no-participant-req` is used when starting a background process on a remote server and you don't want to wait for other users to join the session.
        no-remote-exec: '[AI] The `--no-remote-exec` option is a flag used with the `tssh` (Tab Synchronized Shell) and `ssh` (Secure Shell) commands in the Taylor Series SSH suite. This flag disables remote command execution on the target machine. Instead, it forces the execution of commands locally on the client side where the terminal session is initiated from. This can be useful for security reasons when you want to ensure that sensitive commands or scripts are run only on your local machine.'
        no-tty: '[AI] The `tsh ssh --no-tty` command is a common syntax used in the TSecureShell (TSH) terminal emulator for initiating an SSH connection without allocating a pseudo-terminal (pty) on the remote side. This flag (`--no-tty`) instructs the SSH client not to request or allocate a pty, allowing it to operate in text-only mode, which can be useful for certain automation scripts and non-interactive processes.'
        no-x11-trusted: '[AI] The `--no-x11-trusted` flag is an option for the `ssh` command in the `tmux` or `screen` terminal multiplexers, used with the `tsh` wrapper. It disables trusted X11 forwarding, meaning that SSH will not automatically add the remote machine''s X11 server to your local system''s access control list (ACL), improving security by requiring manual confirmation for each X11 connection. This helps prevent unintended or unauthorized X11 connections from being established.'
        no-x11-untrusted: |-
            [AI] The command `tsh ssh --no-x11-untrusted` is used in the Taylor Shell (tsh) to securely connect to a remote server using SSH (Secure Shell). The `--no-x11-untrusted` option disables X11 forwarding with untrusted clients.

            X11 forwarding allows graphical applications to be run on the local machine from a remote server, but it can pose a security risk if not properly secured. With the `--no-x11-untrusted` option enabled, tsh refuses to allow X11 traffic from untrusted clients, helping to prevent potential attacks or unauthorized access through X11 forwarding.
        option: '[AI] The `tsh ssh` --option flag is used with the TSecureShell (TSH) terminal emulator for Unix-like operating systems to start an SSH (Secure Shell) session with specified options. The `--option` takes an argument in the format "key=value" to set custom SSH options, such as `-o "KeyPairFile=/path/to/private/key"` or `-o "ProxyCommand=''ssh -W %h:%p user@proxy_host''"`. These options can modify various aspects of the SSH connection setup, including authentication, encryption, and proxying.'
        participant-req: '[AI] The `--participant-req` option in the `tsh ssh` command (which is a part of the TSecureShell package for secure SSH connections) sets the SSH client to request that the server allows the client to act as an SSH participant in the session. An SSH participant is a secondary user who can connect to the same running SSH session and share the terminal, allowing multiple users to work collaboratively on a single machine or perform tasks requiring parallel processing. This option enables such functionality by requesting the server to accept additional participants during the initial connection negotiation process.'
        port: '[AI] The `tsh ssh --port` command in the Tsecure Shell (Tsh) is used to specify a custom SSH port number other than the default 22 for establishing an encrypted connection between two untrusted hosts. By using this command, you can securely connect to a remote host with SSH while bypassing potential firewall restrictions that may be in place for the default SSH port. For example, `tsh ssh --port 443 user@remote_host` would establish an SSH connection to `user@remote_host` using port number 443 instead of the usual 22.'
        request-reason: '[AI] The `--request-reason` option is used with the OpenSSH `ssh-keygen` command when generating or managing SSH keys for use in secure shell connections. This option allows specifying a reason or description for the key, which will be displayed when a host asks to approve the key during an SSH connection attempt. The flag helps maintain security by providing information about the intended use of the key, facilitating user approval or denial decisions based on trust and recognition.'
        tty: '[AI] The command `tsh ssh --tty` is used in the Terminal SHell (tsh) to establish an SSH (Secure Shell) connection with a remote server while allocating a TTY (Teletype) device for the session. By default, SSH sessions run without a TTY allocation, which may limit certain functionalities such as screen updating or using applications that require a graphical interface. Allocating a TTY ensures a more interactive and feature-rich connection with the remote server.'
        x11-trusted: '[AI] The `--x11-trusted` option in the `ssh` command under `tssh` (Tab-Completing SSH) is used to forward X11 connections in a trusted way. This means that the remote server does not need to check the X11 authentication cookie and the connection is considered securely authenticated. It is commonly used for graphical applications where local X11 forwarding is required, such as running GUI applications on a remote server from a local terminal. By marking the connection as trusted, it eliminates the need to enter an additional password during the X11 authentication process. However, using `--x11-trusted` should be done with caution as it may potentially expose security vulnerabilities if used with untrusted servers.'
        x11-untrusted: '[AI] The `--x11-untrusted` flag in the `tssh` or `ssh` command is used when setting up X11 forwarding with an untrusted remote server. With this flag, SSH will not check the X11 trust relationship between the local and remote machines. This means that anyone who gains access to the remote machine can forward X11 connections to it. It''s recommended for use only in trusted environments or when connecting to a local machine over an encrypted network connection.'
        x11-untrusted-timeout: '[AI] The `--x11-untrusted-timeout` flag is a configuration option for the Secure Shell (SSH) client `scp` or `sftp` subsystems in the `tssh` (Tiny Secure SHell) package. It sets the time in seconds after which an unauthenticated X11 connection request is disconnected automatically, enhancing security by preventing potential attacks against the X Window System through SSH.'
