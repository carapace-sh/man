# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: issues [<query>]
description: Search for issues
flags:
    --app=: Filter by GitHub App author
    --archived: Restrict search to archived repositories
    --assignee=: Filter by assignee
    --author=: Filter by author
    --closed=: Filter on closed at `date`
    --commenter=: Filter based on comments by `user`
    --comments=: Filter on `number` of comments
    --created=: Filter based on created at `date`
    --include-prs: Include pull requests in results
    --interactions=: Filter on `number` of reactions and comments
    --involves=: Filter based on involvement of `user`
    --json*=: Output JSON with the specified `fields`
    --label*=: Filter on label
    --language=: Filter based on the coding language
    --locked: Filter on locked conversation status
    --match*=: 'Restrict search to specific field of issue: {title|body|comments}'
    --mentions=: Filter based on `user` mentions
    --milestone=: Filter by milestone `title`
    --no-assignee: Filter on missing assignee
    --no-label: Filter on missing label
    --no-milestone: Filter on missing milestone
    --no-project: Filter on missing project
    --order=: 'Order of results returned, ignored unless ''--sort'' flag is specified: {asc|desc}'
    --owner*=: Filter on repository owner
    --project=: Filter on project board `number`
    --reactions=: Filter on `number` of reactions
    --sort=: 'Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated}'
    --state=: 'Filter based on state: {open|closed}'
    --team-mentions=: Filter based on team mentions
    --updated=: Filter on last updated at `date`
    --visibility*=: 'Filter based on repository visibility: {public|private|internal}'
    -L, --limit=: Maximum number of results to fetch
    -R, --repo*=: Filter on repository
    -q, --jq=: Filter JSON output using a jq `expression`
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
    -w, --web: Open the search query in the web browser
documentation:
    command: '[AI] `gh search issues` is a GitHub CLI (Command Line Interface) command used to search for issues across repositories or organizations on GitHub based on specific keywords, labels, assignees, and other criteria. It allows users to quickly find relevant issues to contribute to or stay updated with project developments.'
    flag:
        app: '[AI] The command `gh search issues --app` is a GitHub CLI (Command Line Interface) command used to search for issues in a specific GitHub application. The `--app` flag specifies that you want to search within issues of an application rather than a repository or organization. This command can be helpful for developers who work extensively with GitHub applications and need to efficiently search for and manage issues across multiple applications.'
        archived: '[AI] `gh search issues --archived` is a command used in GitHub''s CLI (Command Line Interface) tool, gh. This command searches for archived issues across all repositories owned or collaborated by the authenticated user. An issue is considered "archived" when it has been closed and its state cannot be changed. The search results display various information such as title, description, number, repository name, and more.'
        assignee: '[AI] The `gh search issues --assignee` command is used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for issues within a specific repository based on the assignee of those issues. In other words, it helps you find all issues that have been assigned to a particular user. The output will display relevant information such as issue number, title, and status.'
        author: '[AI] The `gh search issues --author` command is used with GitHub''s CLI (Command Line Interface) tool, `gh`. This specific command searches for issues in a repository based on the specified author. The query returns a list of issues opened by that particular author.'
        closed: '[AI] The `gh search issues --closed` command is a GitHub CLI (Command Line Interface) query used to search for closed issues in a specific repository or across all repositories under your account. The "--closed" flag filters the results to show only issues that have been resolved and closed. This can be useful for searching archived projects, reviewing past work, or finding solutions to common problems by examining previously closed issues.'
        commenter: '[AI] The `gh search issues --commenter` command is used with GitHub''s command-line tool (`gh`) to search for issues in a specific repository based on comments made by a particular user. This command returns a list of issues where the specified user has left a comment, helping users quickly find and engage with issues relevant to them or for which they want to provide feedback.'
        comments: '[AI] The `gh search issues --comments` command is a GitHub CLI (Command Line Interface) command used to search for issues on GitHub with comments. The `search` action is used to search, and the option `issues` specifies that you are looking for issues in a repository. The `--comments` flag filters the results to only show issues that have comments associated with them. This command helps users to quickly find and review issues with ongoing discussions within a GitHub project.'
        created: '[AI] The `gh search issues --created` command is used with GitHub''s command-line tool (gh) to query for issues that were created on a specific repository. The `--created` option filters the results to only show issues that were created at a specified date or within a given time range. This command can be useful for finding and managing recently created issues in a GitHub project.'
        include-prs: '[AI] The command `gh search issues --include-prs` is a GitHub CLI (Command Line Interface) command used to search for issues with associated pull requests (PRs). The `--include-prs` flag expands the search results to include both open issues and PRs that have been labeled as issues. This can be helpful when wanting to review or manage all work items related to a particular topic, project, or repository.'
        interactions: '[AI] The `gh search issues --interactions` command is a GitHub CLI (Command Line Interface) command used to search for issues on GitHub with interactions information. Interactions refer to comments and reactions on an issue. This command allows users to find issues where they have participated in, by searching for keywords or using filters. The output includes the issue number, title, author, and the number of comments and reactions on each issue.'
        involves: '[AI] The `--involves` option in the GitHub `gh search issues` command is used to filter search results to only show issues that involve a particular label, assignee, or mention. It helps refine your search query and retrieve more specific results related to your query. For example, you can use `--involves label:bug assignee:username` to find issues with the ''bug'' label assigned to a specific user.'
        jq: '[AI] `gh search issues` is a command used in GitHub''s Command-Line Interface (CLI) to search for issues matching specific criteria. The `--jq` flag is an option passed to `gh` that allows using JSON queries written with the `jq` language for filtering and transforming the output of the `issues` search result. This combination enables more advanced querying and data manipulation capabilities directly from the command line, facilitating efficient issue management and automation workflows.'
        json: '[AI] `gh search issues --json` is a command used in GitHub''s CLI (Command-Line Interface) tool, `gh`. This command searches for issues on GitHub that match a given query and returns the results in JSON format. The JSON output includes detailed information about each issue such as number, title, state, assignee, labels, and creation and last updated dates. It''s commonly used for automating workflows or processing GitHub data programmatically.'
        label: '[AI] `gh search issues --label` is a GitHub CLI (Command Line Interface) command used to search for issues in a repository with specific labels. The `--label` argument filters the search results based on one or more labels specified. For instance, `gh search issues --label bug label:featurerequest` would retrieve all issues tagged as "bug" or "feature request".'
        language: '[AI] The `gh search issues --language` command is a GitHub CLI (Command Line Interface) command used to search for issues on GitHub with a specific programming language. The `--language` option filters the results to only show issues related to that particular programming language. For example, `gh search issues --language python` would return a list of issues on GitHub tagged with the ''python'' label.'
        limit: '[AI] `gh search issues --limit` is a command used in GitHub''s CLI (Command Line Interface) tool, gh. This command searches for issues in repositories or organizations on GitHub based on given keywords or labels. The `--limit` option specifies the maximum number of results to return from the search. It helps in getting a manageable number of results rather than an overwhelming list.'
        locked: '[AI] `gh search issues --locked` is a GitHub CLI command used to search for locked issues in a repository. The `--locked` option filters the results to only show issues that have been locked by their creators or collaborators, preventing further comments or edits. This can be useful when looking for issues that require attention from specific team members or when managing issue triage in a project.'
        match: '[AI] `gh search issues --match` is a command used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for issues on GitHub based on specific query parameters. The `--match` flag refines the search by looking for exact phrases or patterns in issue titles and descriptions instead of individual words.'
        mentions: '[AI] `gh search issues --mentions` is a command used in GitHub''s CLI (Command Line Interface) tool, `gh`. This command allows you to search for issues on a specific repository that mention a certain keyword or phrase. The results will display the issue numbers, titles, and the number of mentions for each issue found. It can be useful for quickly finding issues related to a particular topic or bug report within a project.'
        milestone: '[AI] The `gh search issues --milestone` command is a GitHub CLI (Command Line Interface) query used to search for issues with a specific milestone across repositories. The `--milestone` flag filters the search results to only show issues assigned to or labeled with the specified milestone name or number. This command can be helpful in managing and tracking progress towards project goals set in different milestones.'
        no-assignee: '[AI] The `gh search issues --no-assignee` command is used in GitHub''s command-line interface (CLI), called GitHub CLI or gh, to search for issues in a repository that do not have an assignee. This means the issues are open and unassigned, allowing users to filter through them to find potential tasks they could work on. The `--no-assignee` flag filters the results to only show these unassigned issues.'
        no-label: |-
            [AI] The `gh search issues --no-labels` command is a GitHub CLI (Command Line Interface) command used to search for issues in a repository without displaying the issue labels.

            Here's a breakdown of each part:

            * `gh`: This refers to the GitHub Command Line tool, which allows users to interact with GitHub programmatically from the terminal or command prompt.
            * `search`: This is an action that can be performed using the GitHub CLI. It's used to search for specific content on GitHub, such as issues, pull requests, repositories, or even users.
            * `issues`: This is a type of search query that looks for open or closed issues in a repository.
            * `--no-labels`: This is an option passed to the `search` command, which instructs it not to display the issue labels when displaying the search results. This can be useful if you'd rather focus on other aspects of the issues, such as titles or descriptions.
        no-milestone: '[AI] The command `gh search issues --no-milestone` is used in GitHub''s Command Line Interface (CLI) tool, gh, to search for issues within a repository without filtering by milestones. The `--no-milestone` option is used to exclude milestone filters from the search query. This command returns a list of open or closed issues that match the given search terms but does not consider their association with any particular milestone.'
        no-project: '[AI] `gh search issues --no-project` is a command used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for issues across all public repositories on GitHub, excluding the ones related to specific projects or organizations defined in your default context. The `--no-project` flag filters out the results based on the current project or organization context.'
        order: '[AI] `gh search issues --order` is a command used in GitHub''s CLI (Command Line Interface) tool, called `git-hub`. This command searches for issues on a specific repository or across all of a user''s repositories, ordered by relevance. The `--order` flag determines the sorting order: in this case, it sorts the results in descending order according to their relevance.'
        owner: '[AI] The `gh search issues --owner` command is used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for issues in a specific repository based on the given owner of the repository. The results returned will show all open or closed issues with the matched owner name.'
        project: '[AI] `gh search issues --project` is a command used in GitHub''s CLI (Command-Line Interface) tool, called `git hub`. This command is used to search for issues within a specific project on GitHub based on given criteria. The `--project` flag indicates that the search should be limited to the issues of a particular project. The search can also be refined by using other flags like `--label`, `--assignee`, or `--state`.'
        reactions: '[AI] `gh search issues --reactions` is a GitHub CLI command used to search for issues with specific reactions, such as ":"star:"" for starred issues or ":thumbsup:"" for issues with a thumbs up reaction. This command allows users to find issues based on the reactions they are interested in and helps them engage more effectively with repositories they contribute to or follow.'
        repo: '[AI] `gh search issues --repo` is a command used in GitHub''s CLI (Command Line Interface) tool, called Git Hub for Desktop or gh cli. This command searches for issues within a specific repository by using the `search issues` sub-command and specifying the repository name with the `--repo` option. The results include open and closed issues, displaying their titles, numbers, and other relevant information.'
        sort: '[AI] `gh search issues` is a GitHub CLI command used to search for issues in repositories or your own issues across all your repositories. The `--sort` flag is used to sort the search results based on specific criteria such as "created", "updated" or "reactions". For example, `gh search issues --sort created:desc` would return issues sorted by their creation date in descending order. This can help users quickly find and prioritize issues based on various parameters.'
        state: '[AI] The `gh search issues --state` command is used in GitHub''s command-line tool (GitHub CLI or gh) to search for issues with specific states across all repositories you have access to. The `--state` option allows specifying the desired issue state, such as "open" or "closed". This command returns a list of matching issues along with their repository names and numbers.'
        team-mentions: '[AI] The `gh search issues --team-mentions` command is used with GitHub''s CLI (Command Line Interface) tool, `gh`. This command searches for issues in a repository where the specified GitHub team is mentioned. The output includes issue numbers, titles, and the number of comments for each issue. It helps users quickly find issues related to their team within a specific repository.'
        template: '[AI] The `gh search issues --template` command is used in GitHub''s command-line tool (Git Hub for Desktop or Git Hub CLI) to search for issues with specific keywords and format the output using a custom template. The flag `--template` allows you to specify the desired format of the output, which can include various fields such as issue number, title, assignee, labels, and more. This command enables users to quickly find and filter issues based on their search criteria and preferred output style.'
        updated: '[AI] `gh search issues --updated` is a command used in GitHub''s CLI (Command Line Interface) tool, `gh`. This command searches for issues in repositories or organizations that have been recently updated. The `--updated` flag filters the search results to display only those issues that have been modified since a certain point in time. This can help users keep track of issues they''re interested in or manage multiple repositories more efficiently.'
        visibility: '[AI] `gh search issues --visibility` is a GitHub CLI command used to filter and search for issues based on their visibility. The `--visibility` option allows specifying the desired visibility level: `all`, `public`, or `private`. For example, `gh search issues --visibility public` will return only publicly visible issues. This command helps users quickly find issues that match their search criteria and meet their desired visibility requirements.'
        web: '[AI] `gh search issues --web` is a command used in GitHub''s CLI (Command Line Interface) tool, called `gh`. This command searches for issues on GitHub with the specified query and displays the results in a web browser instead of the terminal. The flag `--web` indicates that the output should be opened in a web browser for easier viewing and navigation.'
