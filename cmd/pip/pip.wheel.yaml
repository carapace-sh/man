# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: wheel
description: Build Wheel archives for your requirements and dependencies
flags:
    --build-option=: Extra arguments to be supplied to 'setup.py bdist_wheel'.
    --extra-index-url=: Extra URLs of package indexes to use in addition to --index-url.
    --global-option=: Extra global options to be supplied to the setup.py call.
    --ignore-requires-python: Ignore the Requires-Python information.
    --no-binary=: Do not use binary packages.
    --no-build-isolation: Disable isolation when building a modern source distribution.
    --no-clean: Don't clean up build directories.
    --no-deps: Don't install package dependencies.
    --no-index: Ignore package index.
    --only-binary=: Do not use source packages.
    --pre: Include pre-release and development versions.
    --prefer-binary: Prefer older binary packages over newer source packages.
    --progress-bar=: Specify type of progress to be displayed
    --require-hashes: Require a hash to check each requirement against
    --src=: Directory to check out editable projects into.
    --use-pep517: Use PEP 517 for building source distributions.
    -c, --constraint=: Constrain versions using the given constraints file.
    -e, --editable=: Install a project in editable mode from path.
    -f, --find-links=: parse file for links to archives
    -i, --index-url=: Base URL of the Python Package Index
    -r, --requirement=: Install from the given requirements file.
    -w, --wheel-dir=: Build wheels into <dir>
documentation:
    command: '[AI] `pip wheel` is a command used with Pip, which is a package manager for Python. The `pip wheel` command generates cached wheel files, which are precompiled binary packages of your Python project and its dependencies. This allows for faster installation of the project and its dependencies, especially when dealing with large or complex projects. When you use this command in a terminal or command prompt, it will create a `.whl` file that can be installed using other pip commands like `pip install`.'
    flag:
        build-option: '[AI] `pip wheel` is a package installer for Python that compiles wheels (precompiled binary packages) from source. The `--build-option` flag is an option used when building a custom wheel package. It allows specifying extra options to be passed on to the underlying build system during the wheel construction process. For example, you could use it to set specific compilation flags for C extensions or to enable certain features during the build of your Python package. In summary, `pip wheel --build-option` is a way to customize the build process of wheels with additional options when constructing a custom package using `pip wheel`.'
        constraint: '[AI] `pip wheel` is a Python package installer that generates a single wheel file for multiple dependencies instead of using separate downloads for each package. The `--constraint` option in `pip wheel` command is used to specify external files, typically pinning files or index URLs, which overrides the default sources and constraints in the project''s `requirements.txt` file. This is particularly useful when dealing with private packages or specific version requirements that differ from what''s specified in the project dependencies.'
        editable: |-
            [AI] `pip wheel` is a package manager for Python that allows installing packages and their dependencies in compiled form for faster installation and smoother upgrades. The `--editable` option, when used with `pip wheel`, tells it to create a "development wheel" instead of a standard wheel.

            A development wheel is essentially a local editable install of a package, which means that any changes made to the source code in the local directory will be reflected immediately without having to reinstall the entire package every time. This setup is useful for testing and development purposes. When you run `pip install -e .` or `pip wheel --editable .`, it sets up your Python environment with an editable version of the project that's in the current directory, allowing you to modify its source code directly while maintaining a virtual environment.
        extra-index-url: '[AI] `pip wheel` is a Python package installer and builder that aims for faster installation and reproducibility of dependencies. The `--extra-index-url` option allows specifying one or more URLs as additional indexes from which to fetch wheels (precompiled binary packages) or sources for installation. This can be useful when dealing with private package indexes or when using multiple indexes for a project with various dependencies having different locations.'
        find-links: '[AI] `pip wheel` is a Python package installer that builds and installs wheels, which are precompiled binary packages for faster installation. The `--find-links` option is used to specify a list of URLs or local file paths containing index files (usually in the form of WHEEL or index.txt) from which to fetch additional dependencies. This allows installing specific versions of packages that are not available in the default index or resolving dependencies conflicts by specifying external sources. In summary, `pip wheel --find-links` is a way to install Python packages using wheels with custom dependencies sourced from specified URLs or local files.'
        global-option: '[AI] `pip wheel` is a Python package installer and builder, which is an alternative to `pip install`. The `--global-option` option is used to pass global installation options to `pip wheel`. For instance, you can use it to set up a global index URL or a proxy server for all pip installations. So, when using `pip wheel --global-option <option>`, the specified option will be applied to every package installed using this command.'
        ignore-requires-python: '[AI] `pip wheel` is a command-line tool for creating and installing wheel packages from PyPI (Python Package Index). The option `--ignore-requires-python` tells pip to not include the specified Python version as a requirement in the generated wheel package. This can be useful when you want to create a wheel that supports multiple Python versions or when working with legacy packages that have outdated Python version requirements. By ignoring the required Python version, you can ensure that your custom wheels will work across different Python environments without conflicts.'
        index-url: |-
            [AI] `pip wheel` is a Python package installer that compiles wheels, which are precompiled binary packages, for faster installation. The `--index-url` option specifies the URL of the Package Index (PyPI) or other indexes from where to fetch the wheels. This allows you to use specific indexes for dependencies with version control or private repositories. For example:

            ```bash
            pip wheel install mypackage --no-cache-dir --index-url http://my-pypi-server/simple
            ```

            The above command installs `mypackage` using `pip wheel`, ignoring the local cache, and fetches the wheels from the index at `http://my-pypi-server/simple`.
        no-binary: '[AI] `pip wheel` is a command-line tool for installing Python packages using wheels instead of sourcing individual package files. The option `--no-binary` disables the use of precompiled binary wheels from the PyPI repository and forces pip to build and install custom wheels from source code. This can be useful when working with specific versions or dependencies that aren''t available in the binary repository or for offline installation scenarios.'
        no-build-isolation: '[AI] `pip wheel` is a package installer for Python that compiles source code into wheels (precompiled binary packages) for faster installation. The option `--no-build-isolation` disables the use of build isolation, meaning pip will install wheels from the same cache directory and may overwrite existing wheels if they have the same hash. This can save disk space but also increases the risk of installing inconsistent or outdated packages. Use with caution.'
        no-clean: '[AI] `pip wheel` is a Python package installer that builds wheels (precompiled packages) for faster installation. The `--no-clean` option prevents `pip wheel` from deleting the build directories after installing, which can save time when reinstalling packages multiple times in quick succession. Essentially, it keeps the build artifacts to expedite subsequent installations.'
        no-deps: '[AI] `pip wheel --no-deps` is a command used with Python''s packaging tool, `pip`. This command creates a single wheel file for the specified package, instead of installing it and all its dependencies individually as `pip install` does. The `--no-deps` flag prevents `pip wheel` from including dependent packages in the generated wheel file, resulting in a smaller package that can be installed on systems with those dependencies already present.'
        no-index: '[AI] `pip wheel --no-index` is a command used with Setuptools''s PyPI wheel packaging and installation system. This command instructs pip to build and install wheels (precompiled binary packages) from local source or Sources list, bypassing the index servers. The `--no-index` option disables accessing PyPI indexes for downloading wheels or sources. Instead, it constructs wheels locally from the given requirements using cached or downloaded source code. This can provide faster installation times and offline functionality as it relies on local resources rather than online indexes.'
        only-binary: '[AI] `pip wheel` is a Python package installer that creates cached, wheel files for installed packages to speed up subsequent installations. The `--only-binary` option tells pip wheel to only download and build binary wheels if available, instead of installing source packages and compiling them from scratch. This can save time when dealing with complex dependencies or large projects.'
        pre: '[AI] `pip wheel --pre` is a command used in Python package management with pip. The `--pre` option tells pip to install a project from its pre-release Git repository, rather than the latest stable release. This command generates a wheel file for the dependency tree of the specified project and installs it along with its dependencies as editable packages. This is useful when testing or developing software that depends on pre-releases or incomplete projects. The generated wheel files can also be installed without an internet connection by using `pip install <wheel_file>`.'
        prefer-binary: '[AI] `pip wheel` is a packaging tool for Python that generates cached wheels for installed packages. The option `--prefer-binary` tells pip wheel to prioritize using precompiled binary wheels (wheels containing prebuilt package binaries) over building and installing from source code when available. This can save time and resources during the installation process, especially when dealing with large or complex projects that require multiple dependencies.'
        progress-bar: '[AI] `pip wheel` is a package installer for Python that uses wheel files for installation instead of setting up a virtual environment and installing packages individually using pip. The option `--progress-bar` enables a progress bar during the installation process to provide real-time feedback on the installation progress.'
        require-hashes: '[AI] `pip wheel` is a Python package installer that builds wheels (precompiled binary packages) for multiple dependent packages at once, improving the installation process for larger projects with many dependencies. The `--require-hashes` option is used to ensure the integrity of downloaded packages by requiring pip to verify the SHA256 checksums against those specified in the requirements file before installation. This helps prevent potential attacks and ensures that the installed packages are exactly as specified, maintaining reproducibility and security.'
        requirement: '[AI] `pip wheel` is a command-line tool for building and installing Python packages as wheels, which are precompiled binary distributions. The `--requirements` option is used to specify a text file containing a list of packages and their versions required to run the application. When you run `pip wheel --requirements <file>`, it generates a set of wheels for all the packages listed in the specified requirements file, which can then be installed using `pip`. This approach helps in creating an isolated environment with specific dependencies and speeds up the installation process.'
        src: '[AI] `pip wheel` is a command-line tool for building and installing Python packages as wheels, which are precompiled binary distributions. The `--src` option with this command specifies that the source files of the dependencies should be installed along with the wheels. This can be useful in development environments where having the sources allows for easier debugging and modification. In summary, `pip wheel --src` installs packages as wheels along with their source code.'
        use-pep517: '[AI] `pip wheel` is a command-line tool for installing Python packages, an alternative to using `pip install`. The option `--use-pep517` is used when working with projects that follow PEP 517, which outlines the standard for source distribution format in the Python packaging ecosystem. This option instructs `pip wheel` to build a wheel package from a source tarball, instead of downloading a precompiled wheel file, ensuring that you get an up-to-date and consistent package built specifically for your environment.'
        wheel-dir: '[AI] `pip wheel` is a command-line tool for installing Python packages using the pip installer. The `--wheel-dir` option specifies the directory where pip should build and save the Wheel distribution files, instead of installing the packages directly. A Wheel file is a compiled binary package format that can be used for faster and more efficient installation on systems with compatible dependencies already installed.'
