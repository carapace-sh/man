# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ktlint
description: An anti-bikeshedding Kotlin linter with built-in formatter
flags:
    --apply-to-idea: Update Intellij IDEA
    --apply-to-idea-project: Update Intellij IDEA project
    --color: Make output colorful
    --color-name=: Customize the output color
    --debug: Turn on debug output
    --disabled_rules=: Comma-separated list of rules to globally disable
    --editorconfig=: Path to .editorconfig
    --experimental: Enabled experimental rules (ktlint-ruleset-experimental)
    --install-git-pre-commit-hook: Install git hook to automatically check files
    --install-git-pre-push-hook: Install git hook to automatically check files
    --limit=: 'Maximum number of errors to show (default: show all)'
    --print-ast: Print AST
    --relative: Print files relative to the working directory
    --reporter=: A reporter to use
    --stdin: Read file from stdin
    -F, --format: Fix any deviations from the code style
    -R, --ruleset=: A path to a JAR file containing additional ruleset(s)
    -V, --version: Print version information and exit.
    -a, --android: Turn on Android Kotlin Style Guide compatibility
    -h, --help: Show this help message and exit.
    -v, --verbose: Show error codes
documentation:
    command: '[AI] `ktlint` is a tool for enforcing Kotlin coding conventions. It''s an opinionated linter that helps developers maintain a consistent coding style within their projects. It checks Kotlin files against a set of rules, providing suggestions or errors to improve the code quality. The tool is customizable through rule sets and can be integrated with various build systems and IDEs.'
    flag:
        android: '[AI] `ktlint` is a tool for enforcing Kotlin coding conventions. The command `ktlint --android` specifically refers to running `ktlint` with the Android configuration. This means it will check your Kotlin codebase in an Android project against the rules defined in the `ktlint-android` style guide, which includes rules that are relevant for Android development such as naming conventions for packages, classes, and methods related to Android components (e.g., Activities, Fragments, Services). The output of the command will be suggestions or errors regarding potential issues in your codebase.'
        apply-to-idea: '[AI] `ktlint --apply-to-idea` is a command used in Kotlin development. `ktlint` is a tool for enforcing coding conventions and stylistic guidelines in Kotlin projects. The `--apply-to-idea` option tells `ktlint` to import the linting rules into IntelliJ IDEA, allowing the editor to check your code against the rules as you type. This can help improve code quality by enforcing consistent coding styles and catching potential issues early in the development process.'
        apply-to-idea-project: '[AI] `ktlint` is a tool for enforcing Kotlin coding conventions and style guidelines. The command `ktlint --apply-to-idea-project` applies these rules to an IntelliJ IDEA project. When you run this command in your terminal, it analyzes the Kotlin files in your project and suggests fixes for any violations of the configured style guide. These suggestions are then applied directly to the corresponding files in your IDE project. This helps ensure that your codebase maintains a consistent coding style throughout the development process.'
        color: '[AI] `ktlint --color` is a command used with Ktlint, a tool for enforcing Kotlin coding conventions. The `--color` option enables colored output in the console when running Ktlint checks against one or more Kotlin files. This makes it easier to identify issues as they appear in different colors based on their severity levels (e.g., errors in red, warnings in yellow, and suggestions in green).'
        color-name: '[AI] `ktlint` is a tool for enforcing Kotlin coding conventions. The `--color-name` option is used to specify the color scheme for error messages and warnings when using a terminal or console that supports color output. By default, `ktlint` uses its own predefined color scheme. You can customize it by specifying a valid color scheme name such as "auto", "dark" or "light". This option enhances the readability of the output for developers.'
        debug: '[AI] `ktlint --debug` is a command used with Ktlint, a tool for enforcing Kotlin coding conventions. This command runs Ktlint in debug mode, which increases the amount and detail of output it provides. It can be helpful when diagnosing issues or understanding how Ktlint applies rules to your code. The debug information includes details about which files are being checked, which rules are being applied, and any warnings or errors that occur during the linting process.'
        disabled_rules: '[AI] `ktlint --disabled-rules` is a command used with Ktlint, a tool for enforcing Kotlin coding conventions. The `--disabled-rules` option allows specifying a list of rules that should not be checked during the linting process. This can be useful when particular rules are not needed to be enforced in specific situations or when transitioning to a new convention, avoiding errors or warnings from those rules. The flag takes a comma-separated list of rule identifiers as its value. For example: `ktlint --disabled-rules=TRAILING_COMMA`.'
        editorconfig: '[AI] `ktlint --editorconfig` is a command used with Ktlint, a tool for enforcing coding conventions in Kotlin. The `--editorconfig` option instructs Ktlint to generate or check EditorConfig files. EditorConfig is a configuration file format for defining and managing coding styles across various text editors and IDEs. By using the `ktlint --editorconfig` command, developers can ensure that their code editors use the same Kotlin coding style rules as their team or project.'
        experimental: '[AI] `ktlint` is a tool for enforcing consistent coding styles in Kotlin projects. The `--experimental` flag is an option used with this tool to enable experimental rules or features that are not yet stable and might change in future releases. By using this flag, users can try out new rules and provide feedback to the developers to help improve the tool. However, keep in mind that experimental rules may have unintended consequences or may not work correctly, so they should be used with caution.'
        format: '[AI] `ktlint --format` is a command-line tool used for linting and formatting Kotlin code. The `--format` option instructs `ktlint` to only perform the formatting task on the given files, without running the lint checks. This can be useful when you just want to enforce a consistent coding style across your project without addressing any specific linting issues.'
        help: |-
            [AI] `ktlint` is a tool for enforcing Kotlin coding conventions. The command `ktlint --help` displays help information about how to use this tool. Here's a brief summary:

            - `--help` option is used to display the help message, showing available commands and their usage.
            - Usage: `ktlint [options] <file|directory> [<file|directory>...]`
            - Options include:
              - `--config <path>`: Specify a path to a custom ktlint configuration file.
              - `--dry-run`: Show what would be done without actually making changes.
              - `--fix` or `--correct`: Automatically fix issues (if possible) without exiting on errors.
              - `--verbose`: Provide more detailed output about the linting process.
              - `--version`: Display version information and exit.
        install-git-pre-commit-hook: '[AI] `ktlint --install-git-pre-commit-hook` is a command used to install the ktlint Git pre-commit hook. Pre-commit hooks are scripts that run automatically before each Git commit, helping to ensure code quality by performing checks and enforcing rules. In this case, using `ktlint --install-git-pre-commit-hook` sets up ktlint as a pre-commit hook, which checks Kotlin code syntax, style, and potential issues before committing changes in a Git repository.'
        install-git-pre-push-hook: '[AI] `ktlint --install-git-pre-push-hook` is a command used with Ktlint, a tool for enforcing consistent coding styles in Kotlin projects. The command installs a Git pre-push hook script that runs Ktlint checks before each commit is pushed to a remote repository. This helps ensure that only clean commits with correct formatting are pushed to the repository, improving code quality and maintaining consistency across the project.'
        limit: '[AI] `ktlint --limit` is a command used by Ktlint, a tool for enforcing Kotlin coding conventions. The `--limit` option sets a limit for the number of rules violations that can be reported in one go. By default, Ktlint reports all violations, but using `--limit <n>` limits the output to the first `n` violations found in a file or across multiple files. This can help reduce the amount of output and focus on specific issues for easier resolution.'
        print-ast: '[AI] `ktlint` is a tool for enforcing consistency and stylistic conventions in Kotlin codebase. The command `ktlint --print-ast` generates an Abstract Syntax Tree (AST) representation of the analyzed Kotlin source files, but does not run checks or correct any issues automatically. It''s primarily used by developers who want to inspect the code structure and understand its internal details for further customization or automation purposes.'
        relative: '[AI] `ktlint --relative` is a command used with Ktlint, a tool for enforcing Kotlin coding conventions. The `--relative` flag modifies how the tool reports violations. Instead of reporting errors relative to the file being checked, it reports them relative to the project root or the current directory. This allows for more accurate and consistent error reporting across an entire project.'
        reporter: |-
            [AI] `ktlint` is a tool for enforcing Kotlin coding conventions. The `--reporter` option specifies how the results of running `ktlint` against one or more Kotlin files are reported. Here are some common reporters:

            1. `standardOutput`: Default reporter that prints results to the console.
            2. `json`: Produces a JSON formatted output which can be parsed by other tools.
            3. `junit`: Generates JUnit test reports, useful for continuous integration.
            4. `teamcity`: Generates JetBrains TeamCity compatible report files.
            5. `none`: Suppresses all output from the tool.

            These reporters allow users to integrate the results of `ktlint` into their workflows and tools easily.
        ruleset: '[AI] `ktlint` is a tool for enforcing Kotlin coding conventions. The `--ruleset` option is used to specify which set of rules `ktlint` should follow when checking and linting your codebase. It can be given a path to a custom ruleset file, or one of the predefined rulesets such as `''recommended''`, `''strict''`, or `''android''`. For instance, running `ktlint --ruleset=recommended` would enforce the recommended coding conventions according to the Kotlin project.'
        stdin: '[AI] `ktlint --stdin` is a command used in Kotlin programming to check code style and enforce adherence to a given set of rules defined by ktlint. The `--stdin` option allows users to pipe their code as input, making it useful for continuous integration or scripting workflows. This command does not modify the files but only provides feedback on potential style issues.'
        verbose: '[AI] `ktlint --verbose` is a command used in Kotlin development to run ktlint, a tool for automatically enforcing Kotlin coding conventions. The `--verbose` flag increases the output level of information provided during the linting process, helping users understand which rules were checked, which files were processed, and what specific issues were found along with their locations in the code.'
        version: '[AI] `ktlint` is a tool for enforcing consistency and linting rules for Kotlin code. The command `ktlint --version` is used to display the current version of the installed `ktlint` executable. It provides information about the major, minor, and patch release numbers, as well as any additional metadata such as build number or commit hash if the tool was built from source. This command helps users ensure they are running the latest or desired version of `ktlint`, ensuring they have access to the latest features and bug fixes.'
