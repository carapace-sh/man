# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: init
description: Create an empty Git repository or reinitialize an existing one
group: main
flags:
    --bare: create a bare repository
    --object-format=: specify the hash algorithm to use
    --separate-git-dir=: separate git dir from working tree
    --shared?: specify that the git repository is to be shared amongst several users
    --template=: directory from which templates will be used
    -b, --initial-branch=: override the name of the initial branch
    -q, --quiet: be quiet
documentation:
    command: '[AI] `git init` is a Git command used to create a new Git repository in an existing directory. When you run `git init`, Git initializes the .git hidden directory inside your project, allowing you to start tracking changes and collaborating with other developers using Git. It also sets up the necessary files for working with Git, such as the config file (.git/config) and the remote file (.git/remotes).'
    flag:
        bare: '[AI] `git init --bare` is a Git command used to create a new, bare (or minimally-configured) Git repository. When you run this command in a directory, it sets up a repository without a working directory or a .git configuration file for the user''s settings. Instead, only the necessary files for managing the Git repository are generated. This is often used when setting up a remote repository on a server or creating a new repository to be cloned by others.'
        initial-branch: '[AI] The `git init --initial-branch <branch_name>` command initializes a new Git repository and sets the working directory to be the root of the new repository. The `--initial-branch` option specifies that the repository should be created with the given `<branch_name>` as the currently checked out branch, instead of creating an empty repository with no branches. This can be useful when creating a repository from an existing project with an initial commit already made.'
        object-format: |-
            [AI] `git init --object-format=<format>` is a command used to initialize a new Git repository, with an optional argument `--object-format` specifying the internal object storage format. The default value is "pack", but other options include "porcelain" or "plain".

            The format parameter affects how Git stores and retrieves objects (commits, blobs, trees) within the repository. Choosing a different format may impact performance, disk space usage, and compatibility with other Git repositories or tools. For example, the "porcelain" format is optimized for working directly with Git's data structures, while the "plain" format stores objects in a raw, uncompressed format.

            It's important to note that changing this option after creating an initial repository might lead to compatibility issues and requires careful consideration of the potential implications on future operations and collaboration with other users.
        quiet: '[AI] `git init --quiet` is a command used to initialize a new Git repository in a quiet or silent mode. This means that Git will not display any informational messages during the initialization process. It creates a hidden `.git` directory with the necessary files for Git version control, making it ready to start tracking changes and committing files within the repository.'
        separate-git-dir: '[AI] `git init --separate-git-dir` is a Git command used to initialize a new Git repository with an external git directory. The separate git directory is a filesystem location different from the main project directory, which can help manage large or multiple repositories in a single parent directory. This option keeps the .git metadata and history files away from the main project files for better organization and performance.'
        shared: '[AI] The `git init --shared` command initializes a new Git repository, but with the added option `--shared`. This makes the repository a "bare" repository, meaning it does not have a working directory associated with it. Instead, it is intended to be cloned and used by multiple developers. The `--shared` flag ensures that when cloning this repository, every developer will get a full history of commits and the ability to push changes back to the repository. This setup is ideal for centralized workflows such as GitFlow or GitHub Flow where multiple contributors collaborate on a project.'
        template: '[AI] The `git init --template` command initializes a new Git repository, but with an added feature: it uses a specified template to set up the directory structure and default configuration files. This can be useful when creating multiple repositories that share common setup or when enforcing consistent project layouts across your team. The template is typically a Git repository itself containing the desired files and directories, which are then applied to the new repository during initialization.'
