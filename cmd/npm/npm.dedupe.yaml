# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: dedupe
description: Reduce duplication in the package tree
flags:
    --audit: submit audit reports
    --bin-links: create symlinks
    --dry-run: only report changes
    --fund: show funding message
    --global-style: use global layout
    --ignore-scripts: do not run scripts specified in package.json
    --legacy-bundling: support older npm version
    --omit=: omit dependency types
    --package-lock: when false ignore `package-lock.json`
    --strict-peer-deps: any conflicting `peerDependencies` will be treated as install failure
    --workspaces: Enable running a command in the context fo all workspaces
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm dedupe` is a command used in Node.js projects to resolve and remove duplicate dependencies in the `node_modules` folder. When multiple packages have the same dependency listed, it can lead to version conflicts or unnecessary bloat. Running `npm dedupe` will analyze the package.json files and merge any identical dependencies into a single instance, ensuring that only one copy of each package exists in the `node_modules` directory. This results in a cleaner and more efficient project structure.'
    flag:
        audit: '[AI] `npm dedupe --audit` is a command used in Node.js package management with npm (Node Package Manager). It runs the npm deduplication algorithm with an audit feature. The deduplication process identifies and merges duplicate packages with identical versions across your project, reducing the size of your `node_modules` folder and improving build performance. The `--audit` flag adds a security scan using npm Audit to check for known vulnerabilities in your dependencies and alerts you to any issues found.'
        bin-links: |-
            [AI] `npm dedupe --bin-links` is a command used in Node.js package management with npm (Node Package Manager). It's a specialized operation designed to help reduce duplicate dependencies and binaries in the project's node_modules folder.

            The `--bin-links` flag enables the creation of symbolic links for binary files within the node_modules directory instead of installing duplicated copies of those binaries. This results in a cleaner, more efficient node_modules structure without unnecessary redundancy.
        dry-run: '[AI] `npm dedupe --dry-run` is a command used in Node.js package management with npm (Node Package Manager). This command runs the deduplication process in a dry-run mode, which means it will only show what changes would be made without actually making any modifications to the package tree or lock files. The goal of this command is to identify and suggest potential duplicate dependencies for elimination, helping to prevent version conflicts and reduce overall project size.'
        fund: '[AI] `npm dedupe --fund` is a command used in Node.js package management with npm (Node Package Manager). It is used to find and remove duplicate dependencies in a project''s package.json file, merging the dependencies if they have the same version. The `--fund` option stands for "funded projects only", meaning it will only consider dependencies that have a verified publisher and are funded through a maintained funding model like GitHub Sponsors or npm Inc. This can help ensure the security and stability of the project''s dependencies.'
        global-style: |-
            [AI] `npm dedupe --global-style` is a command used in Node.js package management with npm (Node Package Manager). This command is designed to help resolve duplicate packages with conflicting versions, particularly global packages installed with the "--global-style" flag.

            When installing packages globally using `npm install -g`, packages are installed in the system's Node.js installation directory. This can sometimes lead to duplicate packages with identical version numbers being installed separately for different projects.

            The `npm dedupe --global-style` command analyzes your global installation and identifies any duplicate packages, suggesting potential resolutions to merge them into a single installation. By doing this, you maintain a consistent global environment while also reducing disk space usage and potentially addressing conflicts between duplicate packages.
        ignore-scripts: '[AI] `npm dedupe --ignore-scripts` is a command used in Node.js package management with npm (Node Package Manager). This command is used to find and remove duplicate dependencies in the project''s package.json file. The `--ignore-scripts` flag is optional and is included to exclude scripts from the deduplication process. This is useful when dealing with projects that have multiple scripts using different versions of the same dependency, which can lead to unexpected results during the deduplication process. By ignoring scripts, you ensure that each script maintains its intended dependencies.'
        legacy-bundling: '[AI] `npm dedupe --legacy-bundling` is a command used in Node.js package management with npm (Node Package Manager). This command is designed to help resolve duplicate dependencies and their versions in a project''s package.json file. The `--legacy-bundling` flag is optional and is included to support older bundlers like SystemJS or RequireJS that may not fully support modern dependency resolution methods. With this flag, npm will attempt to maintain the original bundle configuration for these legacy bundlers while still attempting to minimize duplicate dependencies.'
        omit: '[AI] The `npm dedupe --omit` command is a feature in npm (Node Package Manager) used to remove duplicate packages and their dependencies from the project''s node_modules folder, with an option to omit specific packages from the deduplication process. This can help minimize redundancy, improve build performance, and prevent version conflicts within your Node.js projects. By default, npm will attempt to merge overlapping dependencies; however, using `--omit` allows you to exclude certain packages from this merging process if desired.'
        package-lock: '[AI] `npm dedupe --package-lock` is a command used with npm (Node Package Manager) to help manage dependencies in a Node.js project and resolve potential dependency conflicts. The `--package-lock` flag instructs npm to use the saved lockfile (generated by `npm install`) during the deduplication process, ensuring that the exact versions of packages installed previously are restored, and no unexpected version changes occur. This command is particularly useful when dealing with complex projects where multiple versions of the same package might be in use or when collaborating with other developers on the project.'
        strict-peer-deps: |-
            [AI] `npm dedupe --strict-peer-deps` is a command used in Node.js package management with npm (Node Package Manager). It's designed to help manage and resolve peer dependency conflicts in a project.

            Peers are packages that your project depends on, but they don't depend on each other directly. When two or more peers have conflicting dependencies, it can lead to installation issues.

            The `--strict-peer-deps` flag is an option for the `npm dedupe` command which enforces stricter checks when dealing with peer dependencies. It tries to automatically resolve such conflicts by removing unnecessary or conflicting versions of peer dependencies, and it prevents installing new ones that might cause issues.

            In simple terms, `npm dedupe --strict-peer-deps` helps keep your project's peer dependencies in order by resolving any potential conflicts and ensuring that all packages are using compatible versions.
        workspace: '[AI] `npm dedupe --workspace` is a command used in Node.js projects managed with npm (Node Package Manager). This command is used to resolve and remove duplicate dependencies across packages within a single workspace, which is a collection of related packages. The goal is to ensure consistent dependencies and minimize potential conflicts or redundancies between packages while maintaining their independence.'
        workspaces: '[AI] `npm dedupe --workspaces` is a command used in Node.js projects with multiple packages under one root using npm workspaces. It''s designed to resolve and eliminate duplicate dependencies across the entire workspace, improving the project''s build performance and reducing potential version conflicts. By running this command, npm will analyze your workspace, find instances of identical dependencies, and suggest merging or deleting them, ensuring that every package within the workspace has only the necessary dependencies.'
