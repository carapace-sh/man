# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: get [flags]
aliases:
    - stats
description: Get JSON of a running CI/CD pipeline on the current or other specified branch
flags:
    --with-variables: Show variables in pipeline (maintainer role required)
    -b, --branch=: Check pipeline status for a branch. (Default is current branch)
    -o, --output-format=: 'Format output as: text, json'
    -p, --pipeline-id=: Provide pipeline ID
documentation:
    command: '[AI] `glab ci get` is a GitLab CI/CD command used to retrieve artifacts or outputs from previous jobs in a GitLab pipeline. It allows you to download and save files generated during the execution of a specific job, such as build artefacts, test reports, or log files. This command helps developers and testers to access the results of their pipelines easily, facilitating debugging and continuous integration workflows.'
    flag:
        branch: |-
            [AI] `glab ci get --branch` is a command used in GitLab's CLI (Command Line Interface) tool called Glab. This command is designed to fetch specific branches from a GitLab repository and download them locally, ready for merging or working offline.

            The `get` subcommand signifies the retrieval of an object or file. Here, it's used to get the specified branch. The `--branch` option followed by the branch name instructs Glab to specifically fetch that branch and its entire history. This can be helpful when collaborating on projects where having the latest code is crucial.

            The overall effect of running `glab ci get --branch <branch_name>` is to bring down the entire source code and commit history of a GitLab branch to your local machine, allowing you to work with it or merge changes back into another branch.
        output-format: '[AI] The `glab ci get` is a command from Glab, GitLab''s official CLI, used to fetch artifacts generated during a GitLab CI/CD pipeline. The `--output-format` option specifies the desired output format for the fetched artifact. Available formats include `tar`, `zip`, and `raw`. For example, `glab ci get <job_id> --output-format tar` would download the specified job''s artifacts as a tarball.'
        pipeline-id: '[AI] The `glab ci get --pipeline-id` command is a part of Glab, an open-source CLI for GitLab. This specific command retrieves details about a particular GitLab CI/CD pipeline using its ID. The output includes the pipeline status, start and end timestamps, duration, and other relevant information. It helps developers to check the progress and results of their pipelines easily from the terminal without accessing the web interface directly.'
        with-variables: '[AI] `glab ci get` is a command from Glab, a Git client for Kubernetes, used to retrieve artifacts from a CI system, such as GitLab CI or GitHub Actions. The `--with-variables` flag allows passing custom variables as key-value pairs to the job or pipeline that produced the artifact, enabling dynamic access to environment variables during the build or deployment process.'
