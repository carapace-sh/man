# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: terraform
description: infrastructure as code software tool
flags:
    -chdir?: Switch to a different working directory before executing the given subcommand.
    -help: Show this help output, or the help for a specified subcommand.
    -version: An alias for the "version" subcommand.
documentation:
    command: '[AI] Terraform is an open-source infrastructure as code software tool created by Hashicorp. It allows users to define and manage computing resources, such as virtual machines, containers, networks, and databases, through declarative configuration files written in Hashicorp Configuration Language (HCL). Users can provision, modify, and deprovision resources, with changes being automatically applied and the current state of infrastructure being tracked. Terraform supports multiple cloud platforms like AWS, Azure, Google Cloud Platform, and others, enabling consistent management of infrastructure across different environments.'
    flag:
        chdir: '[AI] The `-chdir` flag in Terraform is used to change the working directory before running a command. It allows you to specify a different directory as the root for your Terraform configuration, instead of using the current directory. This can be useful when managing multiple Terraform projects located in different directories. For example, `terraform init -chdir=/path/to/project` would initialize Terraform in the given project directory.'
        help: '[AI] `terraform help` is a command used in Terraform, an open-source infrastructure as code software tool. This command provides help and documentation for specific Terraform commands or topics. When you run `terraform help` without any arguments, it displays a list of all available commands and their brief descriptions. If you provide the name of a specific command or topic as an argument, it will display detailed help and usage information for that particular item.'
        version: '[AI] `terraform -version` is a command used with the Terraform infrastructure as code software tool to check and display the installed version of Terraform in the current environment. Running this command helps ensure that the desired version is being used for managing infrastructure deployments, and also provides access to other relevant information such as the version of the provider plugins being utilized.'
