# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: verify-project
description: Check correctness of crate manifest
flags:
    --manifest-path=: Path to Cargo.toml
    -h, --help: Print help
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo verify-project` is a command used in Rust programming language''s Cargo build tool. It checks the validity of the project''s dependencies and their versions against the `Cargo.lock` file, ensuring that the exact versions specified there are being used, and also performs various other checks on the project''s configuration. This helps maintain a consistent and reproducible build environment by detecting potential issues before building or running the code.'
    flag:
        help: |-
            [AI] `cargo verify-project` is a command provided by Cargo, Rust's package manager. The `--help` flag is used to display detailed help information about this command.

            The primary purpose of `cargo verify-project` is to check the validity and integrity of a Rust project's dependencies, ensuring they can be correctly compiled without any version conflicts. This command does not build or run anything, but only checks the lockfile (Cargo.lock) for errors. It is often used before publishing a new Rust package or submitting pull requests to ensure a clean and error-free dependency tree.
        manifest-path: |-
            [AI] `cargo verify-project` is a command used in Rust programming language's build tool, Cargo. The `--manifest-path` option specifies the path to the project's Cargo.toml manifest file, which contains metadata and dependency information about the project.

            The `verify-project` subcommand checks the correctness of this manifest file and all of its dependencies. It performs several checks:

            1. Verifies that each dependency is valid and that their versions are compatible with one another.
            2. Checks that all required dependencies are listed in Cargo.toml.
            3. Ensures that the target triplet specified in Cargo.toml is supported by Rust's toolchain.
            4. Verifies the correctness of the source code paths defined in Cargo.toml.
            5. Performs a checksum validation on all downloaded dependency crates.

            This command ensures that your project's dependencies are correctly declared and up-to-date, helping you avoid potential issues during compilation or runtime.
        quiet: '[AI] `cargo verify-project --quiet` is a command used in Rust programming language''s Cargo build tool. This command performs a check of the project''s dependencies and their versions for correctness and compatibility, but it does so with minimal output or interference with other terminal processes. The `--quiet` flag reduces the amount of text printed to the console during the verification process.'
