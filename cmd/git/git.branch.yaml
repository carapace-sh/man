# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: branch
description: List, create, or delete branches
group: main
flags:
    --abbrev=: Alter the sha1s minimum display length in the output listing.
    --color=: Color branches to highlight current, local, and remote-tracking branches.
    --column: Display branch listing in columns
    --contains=: Only list branches which contain the specified commit (HEAD if not specified).
    --create-reflog: Create the branchs reflog.
    --edit-description: Open an editor and edit the text to explain what the branch is for.
    --format=: A string that interpolates %(fieldname) from a branch ref being shown and the object it points at.
    --merged=: Only list branches whose tips are reachable from the specified commit (HEAD if not specified).
    --no-abbrev: Display the full sha1s in the output listing rather than abbreviating them.
    --no-color: Turn off branch colors, even when the configuration file gives the default to color output.
    --no-column: Do not display branch listing in columns
    --no-contains=: Only list branches which dont contain the specified commit (HEAD if not specified).
    --no-merged=: Only list branches whose tips are not reachable from the specified commit (HEAD if not specified).
    --no-track: Do not set up upstream configuration, even if the branch.autoSetupMerge configuration variable is true.
    --omit-empty: Do not print a newline after formatted refs
    --points-at=: Only list branches of the given object.
    --recurse-submodules: Causes the current command to recurse into submodules
    --set-upstream-to=: Set up <branchname>s tracking information so <upstream> is considered <branchname>s upstream branch.
    --show-current: Print the name of the current branch.
    --sort=: Sort based on the key given.
    --unset-upstream: Remove the upstream information for <branchname>.
    -C: Shortcut for --copy --force.
    -D: Shortcut for --delete --force.
    -M: Shortcut for --move --force.
    -a, --all: List both remote-tracking branches and local branches.
    -c, --copy: Copy a branch and the corresponding reflog.
    -d, --delete: Delete a branch.
    -f, --force: Reset <branchname> to <startpoint>, even if <branchname> exists already.
    -i, --ignore-case: Sorting and filtering branches are case insensitive.
    -l, --list: List branches.
    -m, --move: Move/rename a branch and the corresponding reflog.
    -q, --quiet: Be more quiet when creating or deleting a branch, suppressing non-error messages.
    -r, --remotes: List or delete (if used with -d) the remote-tracking branches.
    -t, --track?: When creating a new branch, set up branch.<name>.remote and branch.<name>.merge configuration entries to mark the start-point branch as upstream from the new branch.
    -v, --verbose*: Verbose output
documentation:
    command: '[AI] `git branch` is a command used in Git version control system to list all the local branches in your current repository. It also displays an asterisk (*) symbol next to the branch you''re currently on. If no branches are checked out locally, the output will show only the master branch by default (since it is the initial main branch). Additionally, it provides information about each branch such as its name and length. You can combine this command with `git fetch` to list both local and remote branches using `git branch -a`.'
    flag:
        C: '[AI] `git branch -C` is a Git command used to checkout and delete a local branch if it has been merged into its upstream branch. The "-C" option stands for "create-new" and is actually an alias for the command "git branch --merge --deletemanifest-file". When executed, this command will first attempt to merge the specified branch with its upstream counterpart. If the merge is successful, the local branch is then deleted. This command can be useful in keeping a clean local repository by removing branches that have already been merged into their respective remote branches.'
        D: |-
            [AI] The `git branch -D` command is used to delete a local Git branch that has been merged into its parent branch or is currently deleted in the remote repository. The `-D` option stands for "delete" and forces the deletion of the branch even if it still has unmerged commits.

            When you run this command, Git will first check if the branch can be safely deleted without losing any commits or work. If the branch is merged or deleted in the remote repository or if it has no upstream tracking branch, then Git will delete the local branch immediately. Otherwise, you will get an error message suggesting that you should switch to another branch before deleting this one.
        M: '[AI] `git branch -M` is a Git command used to force update a local branch with a new upstream branch, overwriting any local changes. When you run this command, Git will attempt to fast-forward the current branch to the specified upstream branch tip. If there are local commits that would cause a merge conflict, Git will refuse to perform the update. However, by adding the `-M` flag, Git will force the update and discard any local changes, effectively resetting the branch to match the upstream branch exactly.'
        abbrev: '[AI] `git branch --abbrev` is a Git command used to display the abbreviated names of branches instead of their full names. The output will be in the format `<local>:*<remote>`, showing the local and remote branches associated with each branch. This can help save space when dealing with numerous branches and repositories.'
        all: '[AI] `git branch --all` is a Git command that lists all local and remote branches in your current repository. It shows a list of branches including those that have been merged into the current branch and those that don''t exist locally yet but do on the remote repository. The output includes the branch names, their last commit points, and whether they are local or remote. This command can be useful when you want to see all available branches for merging or pushing changes.'
        color: '[AI] The `git branch --color` command is used to list all local branches in Git with colored output. The colors distinguish between local branches and remote branches, helping users easily identify which branches are tracked by origin. This can be particularly useful during complex workflows or when dealing with multiple branches simultaneously.'
        column: '[AI] `git branch --column` is a Git command used to list branches in a tabular format with columns for branch name, status indicator (local or remote), and upstream branch. This output makes it easier to compare and manage multiple branches at a glance. Each column can be sorted by using the `-s` option followed by the column letter: `-s C` sorts by columns containing branch names, and `-s o` sorts by columns containing status information. The default output includes three columns (`lca`, `HEAD`, and `local`) but you can customize it further with the `--format` option.'
        contains: '[AI] `git branch --contains <branch>` is a Git command used to find the common ancestry between two branches. It returns a list of branches that contain the specified commit or the commits leading up to it, including the branch itself if it contains the specified commit. This can be useful for identifying which branches share a recent common point and may help in merging or resolving conflicts.'
        copy: '[AI] `git branch --copy` is a Git command used to create a new branch as a copy of an existing one, with both branches pointing to the same commit. This can be useful when you want to keep two branches in sync or share a common base for future development. Unlike the regular `git branch` command, which only creates a new branch without any association with the current HEAD, the `--copy` option actually creates and checks out the new branch, allowing you to start working on it right away while maintaining a link to its source branch.'
        create-reflog: '[AI] `git branch --create-reflog` is a Git command used to create and maintain a reflog for a new branch. A reflog is a Git internal data structure that keeps track of all the changes made to a branch''s tip, allowing you to recover deleted branches or lost commits. By using the `--create-reflog` option, Git will automatically create a reflog when a new branch is created and ensure it persists even if the branch is later deleted.'
        delete: '[AI] `git branch --delete` is a Git command used to delete local or remote branches in the version control system. When run with no arguments, it deletes the current local branch that has been merged into its parent. With a branch name argument, it can be used to delete either a local or remote branch. The confirmation message "Deleting branch ''branchname''" appears before the branch is deleted. To delete a remote branch, specify the remote name followed by the branch name (e.g., `git branch --delete origin/branchname`). It''s important to be careful when using this command as deleted branches cannot be recovered without a backup or the use of advanced Git techniques.'
        edit-description: '[AI] `git branch --edit-description` is a Git command used to edit the description of an existing local branch. It opens the text editor for you to modify the branch description and saves the changes when you save and close the editor. The updated description is then reflected in Git, but not pushed to any remote repository until you run `git push origin <branch-name>` to update the branch description on the remote as well.'
        force: '[AI] `git branch --force` is a Git command used to update a remote branch force-pushing its changes. This means that any existing differences between the local and remote branches will be overwritten without raising a conflict. It''s important to use this command with caution, as it can potentially overwrite unwanted changes on the remote branch for other collaborators. To use `git branch --force`, first switch to the desired local branch using `git checkout <branch>`, then fetch and rebase any updates from the remote branch using `git fetch origin` and `git rebase origin/<branch>`. Once you''re sure your changes are clean, force push the branch to the remote repository with `git push origin <branch> --force`.'
        format: '[AI] `git branch --format` is a command used to customize the output format of the `git branch` command. It allows specifying various placeholders that will be replaced by corresponding branch-related information when generating the output. This can be useful for scripting or automating tasks involving Git branches, such as displaying only the branch name prefix or showing the remote tracking branch in addition to the local one. The format string can include placeholders like `%(branchname)`, `%(remote/remote)`, and `%(tracked)` among others. For example, `git branch --format="%(refname:short) %((refname:upper)% - %(remote/remote):short)"` would display local branches as "branch-name branch-name/remote-name" and remote tracking branches as "remote-name".'
        ignore-case: '[AI] The `git branch --ignore-case` command is used to list branches in a Git repository with branch names matched without regard to case. By default, Git is case-sensitive when listing branches. With this option, Git will display both upper and lower case branches as if they were the same name. For example, it would show `branchA`, `BranchA`, and `BRANCH_A` as the same branch.'
        list: '[AI] `git branch --list` is a Git command that lists all local branches in your current repository, including the current branch (denoted by an asterisk). Branches are listed with their names and the last commit on each branch, showing the branch point where it diverged from its parent. This command does not fetch or merge any branches. It''s typically used to check and manage local branches within a Git repository.'
        merged: '[AI] The `git branch --merged` command displays branches in the current repository that have been merged into the current branch or the main branch (also known as `master`). Branches are merged when their changes have been incorporated into another branch, typically the main branch, ensuring that all changes are tracked and can be managed effectively. This command helps keep track of which branches have already been merged and which still require attention.'
        move: '[AI] `git branch --move` is a Git command used to rename and move an existing local branch to a new name. The `--move` option tells Git to delete the old branch once the new one has been created and set as the current branch. This results in both renaming the branch and updating the remote with the new name if it''s a shared branch, ensuring that other collaborators will use the new branch name going forward.'
        no-abbrev: '[AI] `git branch --no-abbrev` is a Git command used to list all local branches with their full commit hash identifiers instead of abbreviated or shortened versions. The "--no-abbrev" option instructs Git not to use abbreviated branch names, ensuring that the entire commit hash for each branch tip is displayed. This can be helpful when comparing branches with identical or similar local branch names but different histories.'
        no-color: '[AI] `git branch --no-color` is a Git command used to list all local branches with minimal output. The `--no-color` option disables the use of colors in the output for better compatibility with terminals that don''t support color and for scripting purposes, making the output easier to parse or redirect to files.'
        no-column: '[AI] The `git branch --no-column` command is used to display a list of branches without the colon character (:``) prefixing each branch name in the output. This option is passed with the `--no-merged` or `-a` flags, which show both local and remote branches. For example, instead of `* master`, you would see just `master`. It''s useful when dealing with scripts that process Git output or prefer a simpler display.'
        no-contains: '[AI] `git branch --no-merge <branch>` is a Git command used to check if the current branch does not have the specified branch merged into it. The `--no-contains` option is not an official Git command. Instead, `git branch <branch_1> --no-merge <branch_2>` checks if `<branch_1>` does not contain `<branch_2>` as a commit ancestor. If the output is empty or contains no matches, then `<branch_1>` does not have `<branch_2>` merged into it.'
        no-merged: '[AI] `git branch --no-merged` is a Git command used to list all local branches that have no upstream tracking or have changes that haven''t been pushed yet. The command displays each branch name prefixed with a star (*) if it''s currently checked out, and an asterisk and a greater than symbol (>), if it has local changes but is not currently checked out. Branches without any special symbols have no local or remote changes. This command helps developers identify branches that require attention, either because they contain work in progress or because they are out of sync with the remote repository.'
        no-track: '[AI] The `git branch --no-track` command is used to create a new local Git branch without automatically creating a corresponding upstream branch in a remote repository. This command simply creates a new local branch with no association to any existing remote branch. If you want to create and switch to a new local branch without setting up a tracking relationship with a remote branch, use this command: `git checkout --orphan <new-branch-name>`. Then, detach the head from any existing commit using `git commit --amend` or reset it to an empty state with `git reset --hard`. Finally, make changes to the new branch without affecting the history of the existing branch.'
        omit-empty: '[AI] `git branch --omit-empty` is a Git command used to list only the branches with at least one commit, filtering out empty or non-existent branches. It modifies the output of `git branch`, hiding branches that don''t have any history attached to them.'
        points-at: '[AI] The `git branch --points-at` command displays the commit object that is currently pointed to by the given branch tip, instead of showing the branch name and its upstream tracking information. It''s primarily used for identifying which specific commit a branch is currently referencing, especially in complex branching scenarios or when working with multiple branches concurrently.'
        quiet: '[AI] `git branch --quiet` is a Git command used to list the local branches, but it suppresses the output of the branch names prefix with "branch ". This means only the names of the local branches are printed without any extra text. It''s useful when you want to automate or programmatically handle Git branches without seeing any additional messages.'
        recurse-submodules: '[AI] `git branch --recurse-submodules` is a Git command used to create or manage branches with recursively initialized submodules. When you use this command, Git will not only create the new branch for your main project but also initialize and update any existing submodules recursively. This means that any subdirectories in your project that are configured as Git submodules will be updated to their latest state when you checkout a new branch. It is particularly useful when working on projects with complex dependencies managed through submodules, ensuring all components are up-to-date across different branches.'
        remotes: '[AI] `git branch --remotes` is a Git command that lists all the remote branches in your current repository, i.e., it shows branches that exist on other remote repositories that you''re tracking. This command helps you identify and manage branches that are not yet local but can be fetched or merged into your current project.'
        set-upstream-to: |-
            [AI] `git branch --set-upstream-to` is a Git command used to update the upstream branch relationship for a local Git branch. When creating a new branch using commands like `git checkout -b`, Git automatically sets the upstream branch, which is the remote branch that the local branch is based on. However, if this relationship gets out of sync due to merges or other branch manipulations, `git branch --set-upstream-to` can be used to update it.

            To use this command, provide the current local branch as an argument followed by the remote branch that should be the upstream: `git branch <local-branch> --set-upstream-to <remote>/<remote-branch>`. This sets the specified local branch to track the provided remote branch, enabling features like fetching and merging remote changes into the local branch.
        show-current: '[AI] `git branch --show-current` is a Git command that displays the name of the current branch in your local repository. The output will be something like `* master`, indicating that the current branch is named `master`. If you have multiple branches checked out, this command will only show the name of the branch whose commit pointer is currently active.'
        sort: |-
            [AI] `git branch --sort` is a Git command used to list all local branches with the most recently created branches listed first. The `--sort` option sorts the output based on the creation time of each branch. By default, Git lists branches in alphabetical order. To display branches in the reverse order of creation, add the `-v` flag and use `--sort=-creation_date`. For example:

            ```bash
            git branch --sort=-creation_date v1.0 master
            ```

            This will list branches in the reverse order of their creation date, with the most recent one being first (master branch) and older ones following.
        track: '[AI] The `git branch --track` command is used to create a new branch and simultaneously set it up to track an existing remote branch. This means that when you run this command, Git will create a local branch that is initially in sync with the specified remote branch. When you fetch or pull from the remote repository, your local branch will automatically update to reflect the latest changes on the remote branch. This is particularly useful when working on branches that need to stay in sync with their corresponding remote branches, such as feature branches or topic branches.'
        unset-upstream: '[AI] `git branch --unset-upstream` is a Git command used to detach a local branch from its currently tracked remote branch. In other words, it disconnects the upstream configuration of the current branch, allowing you to work independently without fetching or pushing changes to the remote repository until you''re ready. This command can be useful when temporarily working on a branch that''s not ready to be pushed yet or when dealing with complex Git workflows.'
        verbose: '[AI] `git branch --verbose` is a Git command used to display detailed information about branches and their associated commits. It lists each branch, its current status (local or remote), the number of commits on each branch, and the commit hash of the latest commit on each branch. This command provides more comprehensive output compared to the standard `git branch` command, making it useful for identifying specific branches and tracking their development history.'
