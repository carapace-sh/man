# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: docs
description: Open documentation for a package in a web browser
flags:
    --browser=: browser to use
    --workspaces: Enable running a command in the context fo all workspaces
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: |-
        [AI] The `npm docs` command is not a valid npm (Node Package Manager) command. Instead, you might be looking for one of these common npm commands related to documentation:

        * `npm docs <pkg>`: Generates and opens the documentation website for the specified package in your local development server. Replace `<pkg>` with the name or scope and version of the desired package.
        * `npm run doc`: Runs a custom script named "doc" defined in an npm `package.json` file. This script is typically used to build and generate documentation using tools like JSDoc, TypeDoc, or Docusaurus.

        Both commands assume you have the necessary documentation generation tools installed for your project.
    flag:
        browser: '[AI] `npm docs --browser` is a command used in Node.js package management with npm (Node Package Manager). This command generates and opens the documentation for the currently active package or project using the browser. It fetches the latest version of the documentation from the npm registry and renders it locally, then opens the documentation in a default web browser.'
        workspace: '[AI] `npm docs --workspace` is a command used in Node.js projects with multiple packages. It generates or updates documentation for all packages in the workspace using the documentation generation tools installed in each package. This command is typically run from the root directory of the workspace containing the `package.json` files of the related packages, and it creates or updates the documentation files under the `docs` directories of each package.'
        workspaces: '[AI] The `npm docs --workspaces` command is used in Node.js projects with multiple packages in a single repository, also known as monorepos, to generate documentation for all the packages within that repository at once using NPM''s built-in documentation generation feature (`npm docs`). The `--workspaces` flag enables this functionality by instructing NPM to recursively traverse through the specified directory and its subdirectories to find and document each package.'
