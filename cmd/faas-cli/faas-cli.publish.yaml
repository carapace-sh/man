# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: publish
description: Builds and pushes multi-arch OpenFaaS container images
flags:
    --build-label*=: Add a label for Docker image (LABEL=VALUE)
    --copy-extra*=: Extra paths that will be copied into the function build context
    --disable-stack-pull: Disables the template configuration in the stack.yml
    --envsubst: Substitute environment variables in stack.yml file
    --extra-tag*=: Additional extra image tag
    --handler=: Directory with handler for function, e.g. handler.js
    --image=: Docker image name to build
    --lang=: Programming language template
    --name=: Name of the deployed function
    --no-cache: Do not use Docker's build cache
    --parallel=: Build in parallel to depth specified.
    --platforms=: A set of platforms to publish
    --quiet: Perform a quiet build, without showing output from Docker
    --shrinkwrap: Just write files to ./build/ folder for shrink-wrapping
    --squash: 'Use Docker''s squash flag for smaller images [experimental] '
    --tag=: Override latest tag on function Docker image, accepts 'latest', 'sha', 'branch', or 'describe'
    -b, --build-arg*=: Add a build-arg for Docker (KEY=VALUE)
    -o, --build-option*=: Set a build option, e.g. dev
documentation:
    command: '[AI] `faas-cli publish` is a command used in the FaaS (Function-as-a-Service) ecosystem to build and package locally developed serverless functions, and then deploy them to a specific Faas-compatible backend or cloud provider, such as OpenFaaS or AWS Lambda. The function code is typically written using languages like Node.js, Go, or Python, and the `publish` command packages it along with necessary metadata and configurations before sending it off for deployment. This streamlines the process of preparing and delivering serverless functions to their intended execution environment.'
    flag:
        build-arg: '[AI] `faas-cli publish --build-arg` is a command used in Function-as-a-Service (FaaS) development with the FaaS CLI tool. This command is utilized to build and publish a new version of a FaaS function. The `--build-arg` option is used to pass custom build arguments to the container image that will be built. These arguments can be used in the Dockerfile or build process to customize the build based on specific requirements, such as setting environment variables or compiling custom code.'
        build-label: '[AI] `faas-cli publish --build-label` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command publishes a built Faas function to a specified provider''s registry, assigning it a custom build label for identification purposes. This label can be useful for versioning or organizing functions within the registry.'
        build-option: '[AI] `faas-cli publish --build-option` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command publishes a built Function image to a specified registry or provider. The `--build-option` flag provides an additional argument to be passed during the function image build process. For instance, it could be used to set environment variables or specify buildpacks. It enhances the customization of the build process while publishing the Function for deployment.'
        copy-extra: '[AI] `faas-cli publish --copy-extra` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This option, when used during deployment, copies additional files or directories alongside the function code to the target server or cloud provider. These extra files can include configuration files, logs, and any other necessary resources for the function to run correctly.'
        disable-stack-pull: '[AI] The `faas-cli publish --disable-stack-pull` command is a feature of FaaS (Function-as-a-Service) CLI, which is used to deploy serverless functions. This specific command disables the automatic pull and deployment of existing stacks when publishing new functions. In other words, it prevents the overwriting or updating of existing infrastructure configurations during the publish process. This can be useful in cases where you want to maintain separate environments for development, testing, and production, as it allows you to control precisely which configuration is deployed where.'
        envsubst: '[AI] `faas-cli publish --envsubst` is a command provided by the FaaS-CLI (Function-as-a-Service Command Line Interface) tool. It''s used to build and deploy serverless functions written in various programming languages as containers to supported platforms like OpenFaas, AWS Lambda, or Google Cloud Functions. The `--envsubst` flag is an optional argument. It triggers the replacement of placeholders in environment variables with their actual values before creating the Docker image for deployment. This way, sensitive information like API keys and other configuration details can be securely stored outside the source code.'
        extra-tag: '[AI] The `faas-cli publish --extra-tag` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a local function to a specified Faas provider, such as OpenFaas or AWS Lambda. The `--extra-tag` option allows you to specify an additional tag for the published function docker image besides the mandatory one (like a version number). This extra tag can be useful for adding metadata like an environment name or a specific feature flag. In summary, it''s a way to add extra labels when publishing your FaaS functions.'
        handler: '[AI] `faas-cli publish --handler` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command publishes a locally built function handler to a specific FaaS provider, such as AWS Lambda or Google Cloud Functions. The `--handler` flag specifies the path to the handler file in the local project directory. Once published, the function can be triggered through the provider''s platform.'
        image: '[AI] `faas-cli publish --image` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command publishes a built function image to a specified registry or provider, making it available for deployment and execution. The image can be built locally or from a Dockerfile, and the command accepts optional arguments such as registry URL, access token, and function name.'
        lang: '[AI] The `faas-cli publish --lang` command is used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command publishes a function written in a specific programming language (specified by `--lang`) to a Faas provider, such as OpenFaaS or AWS Lambda. The published function is then deployed and made available for execution in response to events or HTTP requests.'
        name: |-
            [AI] The `faas-cli publish --name` command is used in Faas (Function as a Service) technology to build and publish a new version of a specific function. Here's a brief explanation:

            1. `faas-cli`: This is the command-line interface tool for managing Faas applications.
            2. `publish`: This is the subcommand that triggers the publishing process.
            3. `--name <function-name>`: This flag specifies the name of the function to be published. It's a required argument, and the new version will replace the existing one with the same name in the Faas registry or cloud provider.
        no-cache: '[AI] The `faas-cli publish --no-cache` command is used in FaaS (Function-as-a-Service) development with the Faas CLI tool. This command publishes a locally built function to a specified provider''s registry, bypassing the cache. As a result, it will always pull the latest version of the function code and its dependencies from the local environment instead of using any previously cached versions. This can be useful when making repeated changes to the function code or when working with unstable dependencies that require frequent updates.'
        parallel: '[AI] `faas-cli publish --parallel` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command publishes multiple functions in parallel to your chosen FaaS provider, such as AWS Lambda or Google Cloud Functions. By using `--parallel`, you can save time by publishing multiple functions simultaneously instead of one at a time. This can be particularly useful when dealing with a large number of functions.'
        platforms: '[AI] The `faas-cli publish` command is used in FaaS (Function-as-a-Service) development with the OpenFaaS platform. The `--platforms` option specifies one or more target deployment platforms where the function will be published. These platforms can be local, a specific Kubernetes cluster, or a remote OpenFaaS provider such as OpenFaaS Online. This command builds and packages the function using its Dockerfile, then publishes it to the specified platforms for deployment and execution.'
        quiet: '[AI] `faas-cli publish --quiet` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command publishes a built function to a specific provider''s gateway without displaying any progress or status messages, making the process run in the background quietly.'
        shrinkwrap: '[AI] The `faas-cli publish --shrinkwrap` command is used in Faas (Function as a Service) projects built with the FaaSLang stack. It creates a shrinkwrapped archive of your function code and dependencies, ready for deployment to a Faas server or cloud platform. This command analyzes your project''s `Dockerfile`, `faas-config.yml`, and `requirements.txt` files to identify all required dependencies and their versions. Then it generates a `shrinkwrap.yml` file that locks down these dependencies, ensuring consistent builds across different environments. Finally, the command packages your function code along with the shrinkwrapped dependencies into a single archive for straightforward deployment.'
        squash: '[AI] `faas-cli publish --squash` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. It packages and builds your function code, then publishes it to your chosen cloud provider (such as AWS Lambda or Google Cloud Functions) while squashing multiple builds into one. This results in a single deployed version with the latest changes, reducing clutter and simplifying version management.'
        tag: '[AI] The `faas-cli publish --tag` command is used in the FaaS (Function-as-a-Service) development with Faas-tools CLI. This command publishes a built function to a specific tag in a container registry, such as Docker Hub or Amazon Elastic Container Registry. The published image can then be deployed on various FaaS platforms like OpenFaas, AWS Lambda, etc., using the corresponding deployment tools.'
