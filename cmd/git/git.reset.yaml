# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: reset
description: Reset current HEAD to the specified state
group: main
flags:
    --hard: reset HEAD, index and working tree
    --keep: reset HEAD but keep local changes
    --merge: reset HEAD, index and working tree
    --mixed: reset HEAD and index
    --pathspec-file-nul: pathspec elements are separated with NUL character
    --pathspec-from-file=: read pathspec from file
    --recurse-submodules?: control recursive updating of submodules
    --soft: reset only HEAD
    -N, --intent-to-add: record only the fact that removed paths will be added later
    -p, --patch: select hunks interactively
    -q, --quiet: be quiet, only report errors
documentation:
    command: '[AI] `git reset` is a Git command used to change the current HEAD to a previous commit or to remove commits from the current branch. When used without any arguments, it resets the HEAD to the latest commit in the current branch, discarding all changes in the working directory and the staging area. With a commit argument, it moves the HEAD to that specific commit and resets the index and working directory accordingly. It''s important to note that using `git reset` with a commit that is already part of the local branch history will remove those commits from your local repository, but they won''t be deleted from the remote repository if you have pushed changes to it.'
    flag:
        hard: '[AI] `git reset --hard` is a Git command used to move the HEAD pointer to a previous commit and discard all changes in the working directory and the staging area. This results in the working directory matching the state of the selected commit exactly, making it a powerful tool for reverting changes or restoring a previous version of your project. Be cautious when using this command as it permanently removes any local modifications.'
        intent-to-add: '[AI] `git reset --intent-to-add` is a Git command used to prepare the staging area with files that have been modified in the working directory but not yet added to the index (staging area). The command moves the changes from the working directory to the index, ready for a `git add` command. This can be useful when you want to modify the changes before committing them or when you want to stage specific files without staging all modified files in the current directory. However, keep in mind that this command does not actually commit the changes; it only prepares the index for adding the changes with a subsequent `git add` command.'
        keep: '[AI] `git reset --keep` is a Git command used to reset the current branch to a specific commit, but unlike other reset commands, it keeps changes in the working directory and the staging area. This means that any local modifications or new files will not be discarded during the reset operation. It''s useful when you need to revert to an older version of your repository while keeping your current work.'
        merge: '[AI] `git reset --merge` is a Git command that resets the current branch to the specified commit, and then attempts to automatically merge any changes from the commits after the specified commit that are not already included in it. This command can be used when you want to discard certain commits from the current branch but keep their changes if they have already been merged upstream or if the changes are worth keeping. The `--merge` option automates the merging process, which may result in a conflict that requires manual resolution if there are conflicting changes between the branches.'
        mixed: '[AI] `git reset --mixed` is a command used in Git version control system to reset the current branch to a specified commit. The "--mixed" option means that Git will reset the HEAD pointer to the specified commit, but your working directory and index will keep their changes if any. If you have conflicts between the current state of your files and those in the committed state, you''ll need to manually resolve them before committing again. This command can be useful when you want to discard changes in the staging area or revert to a previous state without losing local modifications.'
        patch: '[AI] `git reset --patch` is a Git command that resets theHEAD to the specified commit, and then interactsively changes the files in the working directory to match the state of the committed version. It allows users to review and selectively apply each hunk (a change set) before applying it permanently. This way, users have the ability to carefully consider which changes they want to keep before resetting their branch.'
        pathspec-file-nul: '[AI] The `git reset --pathspec-file` command is used to reset the current branch in Git to a specific commit, while keeping certain files or paths unchanged. When using the `--pathspec-file` option with a file containing a list of paths or file names separated by newline characters, Git will only keep those paths unchanged and change everything else to match the specified commit. The `--pathspec-file-nul` is an extension to this command, which allows the pathspec file to be empty (null), effectively resetting all files except for those explicitly listed in a separate file given by the `--index-file` option. In summary, `git reset --pathspec-file-nul [commit] [pathspec-file] [index-file]` will reset the branch to the specified commit while keeping the files listed in `pathspec-file` unchanged and allowing the user to specify which files should be kept using an optional `index-file`.'
        pathspec-from-file: '[AI] `git reset --pathspec-from-file` is a Git command used to modify the last commit by removing specific file changes. With this command, you can specify a list of files or paths to be removed from the last commit using an external file instead of doing it directly on the command line. The contents of the file should be one filepath per line. This command resets the HEAD to detached state, and the changes are staged for a possible commit if you want to keep them. If not, you can continue with a `git reset --hard HEAD` or `git checkout HEAD` to discard the changes.'
        quiet: '[AI] `git reset --quiet` is a Git command used to modify the current branch''s commit history. It resets the HEAD to the specified commit, removing any commits on top of it, and optionally resets the working directory and the index to match the new head. The `--quiet` flag suppresses informational messages that would normally be displayed during the reset operation.'
        recurse-submodules: '[AI] `git reset --recurse-submodules` is a Git command used to reset the submodule relations in your Git repository. When you perform a hard reset (`git reset <commit>`) or checkout a different branch, submodules might no longer be at the desired versions. To update all submodules to their corresponding commit states, use this command: `git reset --recurse-submodules=<commit>`. The `<commit>` can be a specific SHA-1, a branch name, or a tag. The `--recurse` option tells Git to reset the submodule relations in nested submodules as well. This command resets both the working directory and the HEAD commit to the specified state, ensuring consistent submodules across your repository.'
        soft: '[AI] `git reset --soft` is a Git command used to reset the HEAD of your repository to a previous commit without discarding any changes in the working directory or the staging area. This means that you keep all modifications you have made and can continue building on top of the previous state. It''s often used when you want to revert to a previous commit but don''t want to lose your current work.'
