# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gitk
description: The Git repository browser
flags:
    --all: Show all refs (branches, tags, etc.).
    --ancestry-path: only display commits that exist directly on the ancestry chain between the commit1 and commit2
    --argscmd?: Command to be run each time gitk has to determine the revision range to show
    --branches?: Pretend as if all the branches are listed on the command line
    --date-order: Sort commits by date when possible.
    --full-history: When filtering history with <path>..., does not prune some history
    --left-right: Mark which side of a symmetric difference a commit is reachable from
    --merge: After merge stops with conflicts, show the commits on the history between two branches
    --remotes?: Pretend as if all the remote branches are listed on the command line
    --select-commit?: Select the specified commit after loading the graph
    --simplify-merges: Additional option to --full-history to remove some needless merges from the resulting history
    --since?: Show commits more recent than a specific date.
    --tags?: Pretend as if all the tags are listed on the command line
    --until?: Show commits older than a specific date.
documentation:
    command: '[AI] `gitk` is a graphical interface for exploring Git repositories. It provides an interactive commitment browser, allowing users to navigate through the project''s version history using various graph views (branch, commit lineage, and simple list). Users can easily inspect differences between specific commits, view file histories, and perform common Git operations directly from the application. `gitk` is often used for visualizing complex branching structures or exploring a project''s development over time.'
    flag:
        all: '[AI] `gitk --all` is a command used in Git version control system to display a graphical representation of the commit history across all branches. The `--all` option tells Gitk to show commits from all local and remote branches within the current repository, providing a comprehensive view of the project''s committed changes.'
        ancestry-path: '[AI] `gitk --ancestry-path` is a command used in Git version control system to display a graphical representation of the commit history with focus on the ancestry of a particular commit. The `--ancestry-path` option shows only the commits that are direct ancestors or descendant of the given commit, providing a clear view of the inheritance relationships between commits in a branch or a merge conflict resolution. It can help developers understand the evolution of code changes and identify potential merge conflicts before applying them.'
        argscmd: |-
            [AI] `gitk --argscmd` is not a standard GitK command, but rather an argument that can be passed to GitK when invoking it from Git or other scripts. The purpose of using `--argscmd` with GitK is to allow passing custom arguments directly to GitK, bypassing the command-line options accepted by GitK itself. This is useful for automating or scripting GitK usage, where specific configuration settings or filtering criteria need to be applied consistently across multiple invocations.

            For example, if one needs to always display only a subset of branches when using GitK in an automated fashion, the command could look like this: `git k --argscmd="gitk --branch <branch1> --branch <branch2> ..."`. This way, GitK will be launched with the specified custom arguments, showing only the desired branches each time it is invoked.
        branches: '[AI] `gitk --branches` is a command used in Git version control system to display a graphical representation of the committed branches in a repository. It uses GitK, an interactive Git repository browser, to show the branch names and their merging relationships in a tree-like diagram. Branches that have been merged back into other branches or the mainline will be marked as such. This command helps users to easily visualize and manage the branches in their Git project.'
        date-order: '[AI] `gitk --date-order` is a command used in Git version control system to display commit history in a date-ordered fashion. This means that commits are shown based on when they were made, with the most recent commits appearing first and older commits following in reverse chronological order. The `gitk` tool provides a graphical interface for browsing Git repositories, making it an efficient way to visualize commit history.'
        full-history: '[AI] `gitk --full-history` is a command used in Git version control system to open an interactive graphical history browser. The `--full-history` option displays the commit messages, author names, and other details for every single commit in the repository''s history, showing all branches and their merges. This provides a more comprehensive view of the project''s development history.'
        left-right: '[AI] `gitk --left-right` is a command-line option for GitK, a graphical Git gui tool. This option changes the direction of the horizontal axis in the gitk commit tree view from top to bottom (default) to left to right. With this layout, commits from older branches are shown on the left and more recent ones on the right, making it easier to compare and understand the merge history.'
        merge: '[AI] `gitk --merge` is a command used in Git version control system to display a graphical representation of the commit history with merged branches. When you run this command, Gitk will show you a branch merge diagram that displays how different branches have been merged together in your repository. The diagram shows branches merging as solid lines and fast-forward merges as dashed lines. This visualization can help users understand the merge history of their project more easily.'
        remotes: '[AI] `gitk --remotes` is a command used in Git version control system to display a graphical representation of the committed history with all the branches and their corresponding remote tracking branches. The "--remotes" option tells Gitk to show not only the local branches but also the remote-tracking branches, allowing users to easily compare and identify divergences between the local and remote repositories.'
        select-commit: '[AI] `gitk --select-commit` is a command used with GitK, a graphical interface for exploring and managing Git repositories. This specific command allows users to interactively select a commit in the Gitk interface by clicking on it in the display. Once selected, the commit becomes the new "HEAD" or current commit, enabling further actions like checking out the associated branch or committing changes based on that commit.'
        simplify-merges: '[AI] `gitk --simplify-merges` is a command used with GitK, a graphical interface for exploring Git repositories. This option simplifies merge commits by flattening them into single parent commits in the Gitk visualization. It helps to declutter the merge history and make it easier to follow the main development line within a branch.'
        since: '[AI] `gitk --since` is a Git command that displays a graphical history of committed changes in a repository using Gitk, an interactive Git log browser. The `--since` option filters the displayed commits to only those made after a specified date or commit hash. This can help users quickly view the history of changes made since a certain point in time or after a specific event in their project''s history.'
        tags: '[AI] `gitk --tags` is a command used in Git version control system to display a graphical representation of the project''s commit history with focus on the tags. The command opens an interactive gitk window that shows commits and their branches, marked by different colors or shapes. Tags are represented as special markers along the branch or commit lines, helping users identify and navigate between different tagged versions easily. This is particularly useful when working with release versions or specific project milestones.'
        until: '[AI] `gitk --until` is a command used in Git version control system to display a commit log with all commits made before a specified date. The option `--until` followed by a date (in various formats like YYYY-MM-DD or relative time like "3 days ago") filters the displayed commits only up to that date. The `gitk` part invokes the Gitk graphical user interface for viewing the commit history.'
