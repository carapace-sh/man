# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tree
description: list contents of directories in a tree-like format
flags:
    --charset=: Use charset X for terminal/HTML and indentation line output.
    --device: Print device ID number to which each file belongs.
    --dirsfirst: List directories before files (-U disables).
    --fromfile: Reads paths from files (.=stdin)
    --help: Print usage and this help message and exit.
    --inodes: Print inode number of each file.
    --matchdirs: Include directory names in -P pattern matching.
    --nolinks: Turn off hyperlinks in HTML output.
    --noreport: Turn off file/directory count at end of tree listing.
    --si: Like -h, but use in SI units (powers of 1000).
    --sort=: 'Select sort: name,version,size,mtime,ctime.'
    --version: Print version and exit.
    -A: Print ANSI lines graphic indentation lines.
    -C: Turn colorization on always.
    -D: Print the date of last modification or (-c) status change.
    -F: Appends '/', '=', '*', '@', '|' or '>' as per ls -F.
    -H=: Prints out HTML format with baseHREF as top directory.
    -I=: Do not list files that match the given pattern.
    -J: Prints out an JSON representation of the tree.
    -L=: Descend only level directories deep.
    -N: Print non-printable characters as is.
    -P=: List only those files that match the pattern given.
    -Q: Quote filenames with double quotes.
    -R: Rerun tree when max dir level reached.
    -S: Print with CP437 (console) graphics indentation lines.
    -T=: Replace the default HTML title and H1 header with string.
    -U: Leave files unsorted.
    -X: Prints out an XML representation of the tree.
    -a: All files are listed.
    -c: Sort files by last status change time.
    -d: List directories only.
    -f: Print the full path prefix for each file.
    -g: Displays file group owner or GID number.
    -h: Print the size in a more human readable way.
    -i: Don't print indentation lines.
    -l: Follow symbolic links like directories.
    -n: Turn colorization off always (-C overrides).
    -o=: Output to file instead of stdout.
    -p: Print the protections for each file.
    -q: Print non-printable characters as '?'.
    -r: Reverse the order of the sort.
    -s: Print the size in bytes of each file.
    -t: Sort files by last modification time.
    -u: Displays file owner or UID number.
    -v: Sort files alphanumerically by version.
    -x: Stay on current filesystem only.
documentation:
    command: '[AI] The `tree` command is a common Unix utility used for generating textual tree representations of directories or file systems, showing the hierarchical directory structure with indentation. It helps visualize and navigate complex directory structures easily. Users can specify various options to customize the output such as width, level depth, and file filtering.'
    flag:
        A: '[AI] The command `tree -A` in Unix-like operating systems is used to create a text-based, collapsible directory tree representation with ASCII art for each directory and file. The `-A` option stands for "raw" or "as is," meaning it displays all types of files including hidden ones, without any filtering. This option allows users to see the complete directory structure along with file permissions, ownership, sizes, and modification times.'
        C: '[AI] The `tree -C` command in Unix-based systems is used to create a hierarchical directory structure representation as a printable ASCII tree. The `-C` option adds colored labels to each branch and node, making it easier to read and distinguish between directories and files. This can be particularly useful when working with complex directory structures.'
        D: '[AI] The `tree -D` command in Unix-based systems is used to create a recursive directory tree representation with symbols indicating file types and permissions. The `-D` option stands for "deeper" or "descend," which means it will display the tree structure by recursively showing all subdirectories and their contents. The output consists of indentation levels, file names, and file type indicators (files, directories, symbolic links, etc.), along with their corresponding access permissions.'
        F: '[AI] The `tree -F` command in Unix-based systems is used to create a textual representation of the directory tree with an indentation showing the hierarchy and a character for each file type. The `-F` option adds, at the end of each line, a symbol indicating the type of the last character in the filename (e.g., `/` for directories, `-` for regular files, `@` for executables, etc.).'
        H: '[AI] The `tree -H` command in Unix-like operating systems is used to create a printable ASCII representation of the directory tree structure. The `-H` option stands for "no hidden files and directories." This means that the output will not display hidden files or directories (those with names starting with a dot `.`) by default. If you want to include them, use the `-a` option instead.'
        I: '[AI] The `tree -I` command in Unix-like operating systems is used to recursively display the directory tree structure with indicators next to each file or directory that matches a given pattern (specified by the `-I` option). The indicators are typically symbols such as ''*'' or ''+'' signifying that the file or directory matches certain criteria, for example, hidden files or directories. This command helps in identifying and locating specific files or patterns within a complex directory structure.'
        J: '[AI] The `tree -J` command is used in Unix-based file systems to recursively print out the directories and files in a tree structure, with symbols indicating file types (e.g., `-` for regular files, `/` for directories, `@` for symbolic links). The `-J` option produces this output in a format that can be used as input for other commands, specifically the `grep` command, making it easier to process and filter the tree output.'
        L: '[AI] The `tree -L` command is a part of the `tree` utility in Unix-like operating systems. This specific option, `-L`, instructs the `tree` command to display each file and directory as a single line, with indentation representing the hierarchy. The slash (`/`) character at the beginning of a line signifies a directory, while no slash indicates a file.'
        "N": '[AI] The `tree -N` command in Unix-like operating systems is used to create a simple text representation of the directory tree structure with line numbers added for each file and folder. The `-N` option stands for "number" and is used to display these line numbers alongside the output. This can be useful for identifying files or locating errors in scripts or code.'
        P: '[AI] The `tree -P` command in Unix-like operating systems is used to recursively display the directory structure as a tree with an additional feature of printing the file or folder name at each level against it, indicated by a ''P'' symbol. This makes it easier to identify which items are directories and which are files within the hierarchy.'
        Q: '[AI] The `tree -q` command in Unix-like operating systems is used to create a textual representation of the directory tree structure. The `-q` option stands for "quiet" mode, which means that only file and directory names are printed, with no other extra information like file sizes or permissions. This results in a cleaner output that focuses solely on the hierarchy of files and directories within a specified path.'
        R: '[AI] The `tree -R` command in Unix-like operating systems is used to create a recursive directory tree representation with symbolic links indicated by an arrow `->`. The `-R` option tells the `tree` utility to recurse into subdirectories. By default, it displays the files and directories in alphabetical order. It''s often used for visualizing file hierarchies or for creating documentation of project structures.'
        S: '[AI] The `tree -S` command in Unix-like operating systems is used to create a printable ASCII tree representation of the given directory structure. The `-S` option adds the size of each file or directory at the end of the line on which it appears in the tree output, allowing for easy comparison of space usage.'
        T: '[AI] The `tree -T` command in Unix-like operating systems is used to create a text-based tree representation of the directory structure. The `-T` option stands for "width-limit" and specifies the maximum column width for the output, making it more suitable for displaying deep hierarchies. The output consists of indentation levels represented by ''/'' characters, file names, and sizes or permissions depending on the optional flags used.'
        U: '[AI] The `tree -U` command in Unix-like operating systems is used to create a recursive directory tree with the named files, directories, and their symbols if they are different from their parents. The `-U` option stands for "unresolved symlinks," which means that it will not follow the symbolic links but instead print them as they appear in the file system. This can be useful when you want to see the hierarchy of a directory tree with its symbolic links represented accurately.'
        X: '[AI] The `tree -X` command in Unix-like operating systems is used to create a multi-level output of the directory tree structure with the indicated depth level `-X`, where X is a given depth value. It displays each directory as a box with an indentation level corresponding to its depth in the hierarchy, and files are listed underneath their respective directories. This can be useful for quickly visualizing the directory structure up to a specified depth.'
        a: |-
            [AI] The `tree -a` command in Unix-like operating systems is used to recursively list the contents of a directory tree, showing all files and directories (including hidden ones) with their permissions, sizes, and ownership information.

            The `tree` utility displays the hierarchy as an indented tree structure, making it easier to understand the directory layout visually. The `-a` option stands for "all," indicating that it should show all files and directories, including the hidden ones (those whose names begin with a dot).
        c: '[AI] The `tree -c` command in Unix-like operating systems is used to create a text tree representation of a directory''s structure. The `-c` option adds the size of each file and the number of sub-nodes to the output, making it easier to analyze disk usage or compare directories. Each line corresponds to a directory or file, with the path indented under its parent. The tree is constructed recursively, showing nested directories and their contents.'
        charset: '[AI] The `tree` command with the option `--charset` is used in Unix-based systems to display the output of a directory tree in different character sets or encoding schemes for better readability when dealing with non-ASCII filenames, especially those encoded in UTF-8. By default, it uses the platform''s locale settings. To specify a desired charset, use `--charset <encoding>` with the command. For instance, `tree --charset utf-8` or `tree --charset iso-8859-1` can be used depending on your needs.'
        d: '[AI] `tree -d` is a command from the `tree` utility in Unix-like operating systems. The `-d` option causes `tree` to display only the directory names and file bases, without showing the hierarchy of subdirectories or their contents. It generates output as a list where each line corresponds to a directory with its name followed by a vertical bar (|) and then the files or subdirectories under it, all in alphabetical order.'
        device: '[AI] The `--device` option in the `tree` command is used to include device nodes (files representing hardware devices) in the output of the tree structure representation. By default, `tree` does not display device nodes. Using `--device` makes the output more comprehensive by showing the hierarchical relationship between regular files, directories, and device nodes within a given directory.'
        dirsfirst: '[AI] The `tree --dirsfirst` command is a utility in Unix-like operating systems for generating a printable tree representation of a directory''s contents, with directories listed before their contents. This option, `--dirsfirst`, changes the default behavior where files are listed before their parent directories when displaying the tree structure.'
        f: '[AI] The `tree -f` command in Unix-based systems is used to create a recursive directory tree with file sizes and modification times displayed for each file. The `-f` option stands for "no dots" and prevents the printing of the ellipses (dots) that usually appear when directories have more than one level deep. The output consists of indented lines, where each line represents a directory or a file, showing its size, modification time, and name.'
        fromfile: |-
            [AI] The `--fromfile` option in the `tree` command is used to read the names of files or directories to be displayed from a file instead of specifying them directly on the command line. This can be useful when dealing with large or complex directory structures, as it allows you to easily generate a tree view using a list stored in a file. The file containing the names should be passed as an argument to `--filelist-file`. For example:

            ```bash
            tree --fromfile myfile.txt
            ```

            Where `myfile.txt` is a text file with one filename per line.
        g: '[AI] The `tree -g` command is a part of the `tree` utility in Unix-like operating systems. It is used to display the directory tree with the file sizes (in bytes) added next to each file. The `-g` option stands for "human-readable file sizes," which means that the sizes will be displayed in a format that is easy for humans to read, such as "10M" for 10 megabytes or "5G" for 5 gigabytes. So, the output of `tree -g` will show the directory structure with each file size indicated.'
        h: '[AI] The `tree -h` command is used in Unix-based systems to display the directory structure as a tree with the size of each directory or file indicated by the height of its box symbol. The `-h` option stands for "human-readable", meaning that the sizes are displayed in a human-readable format (i.e., in units of KB, MB, GB, etc.).'
        help: '[AI] The `--help` option when used with the `tree` command in Unix-like operating systems displays detailed information about how to use the tree command effectively. It provides a list of all available options, their short and long forms, a brief description of each option, and usage examples if applicable. Using `tree --help` is an effective way to quickly understand the capabilities and syntax of the tree command for organizing and displaying directory structures in a visually appealing manner.'
        i: '[AI] `tree -i` is a command from the `tree` utility in Unix-like operating systems. This option, along with `-l` (for "linear with names of directories"), displays the tree structure of a directory in a text format. The `-i` flag specifically adds the size information for each file and directory in bytes to the output.'
        inodes: '[AI] The `tree --inodes` command is a Unix-based file system exploration tool that displays the directory tree structure along with their inodes. Inodes are data structures in a Linux filesystem that store metadata about files and directories, such as ownership, permissions, size, and pointers to the data blocks that make up the file content. The `--inodes` option adds a column showing the inode number of each file or directory in the output.'
        l: '[AI] The `tree -l` command is used in Unix-based file systems to recursively display the directory tree structure with one line per directory and file, showing only the file and directory names, and thepermissions, size, and dates in a human-readable format. It does not show the path from the root to the current directory for each item.'
        matchdirs: '[AI] The `--matchdirs` option in the `tree` command is used to include directories that match a given pattern in the output of the tree command. When this option is used, tree will display not only files but also directories whose names match the provided pattern. This can be useful for visualizing the file structure within a specific directory hierarchy. The pattern can be specified using globbing or regular expressions.'
        "n": '[AI] The `tree -n` command in Unix-like operating systems is used to create a recursive directory tree representation with line numbers added to each line. The option `-n` stands for "numeric mode," which means that the output will display not only the file and directory names but also line numbers, making it easier to refer to specific lines when working with large or complex directory structures.'
        nolinks: '[AI] The `tree --nolinks` command is a file system exploration tool in Linux and other Unix-like systems, which displays the hierarchical directory structure as a tree diagram. The `--nolinks` option disables the display of symbolic links as arrows pointing to their target files within the tree diagram. This means that only the names of directories and regular files will be shown in the output.'
        noreport: '[AI] The `tree --noreport` command in Git is used to display a tree-like representation of the directory structure under the current Git repository, but without printing the size or number of files for each node. It''s often used when you only want to see the hierarchy and not the file counts.'
        o: '[AI] The `tree -o` command in Unix-like operating systems is used to create a recursive tree representation of directories and files. The `-o` option stands for "reverse," meaning that the output will be printed with the deepest directory first, followed by its children, creating an upside-down tree structure. This can be useful when visualizing large directory structures or comparing two directories to see their differences.'
        p: |-
            [AI] The `tree -p` command in Unix-like operating systems is used to display the directory structure as a tree, with an additional output showing the file permissions for each file or directory. Each node in the tree represents a directory, and the branches indicate the hierarchy of subdirectories. The file permissions are shown as a string in the indentation level of the corresponding directory. For example:

            ```bash
            .
            ├── dir1
            │   ├── file1.txt
            │   └── dir2
            │       ├── file2.txt
            │       └── file3.txt
            └── file.txt

            4 drwxr-xr-x  3 user group 4096 Jan 18 15:34 dir1
            4 drwxr-xr-x  2 user group 4096 Jan 18 15:35 dir2
            -rw-r--r--  1 user group  0 Jan 18 15:34 file.txt
            -rw-r--r--  0 file1.txt user group 0 Jan 18 15:34 file1.txt
            -rw-r--r--  0 file2.txt user group 0 Jan 18 15:36 file2.txt
            -rw-r--r--  0 file3.txt user group 0 Jan 18 15:36 file3.txt
            ```

            In the output above, each line starts with a symbol indicating the type of node (`.` for the current directory, `/` for the root directory, `D` for a directory, and `-` for a regular file). The next level of indentation represents the parent directory, and so on. The file permissions are shown in the fourth column, with the first character indicating the file type (as described above), followed by three sets of three permissions each for the user, group, and others. Each set consists of read (r), write (w), and execute (x) permissions.
        q: '[AI] The `tree -q` command in Unix-like operating systems is used to display the directory tree structure in a compact mode. The `-q` option stands for quiet mode, which means only filenames and directories will be displayed, without any indicators of file types or permissions. Each level of the directory tree is indicated by a single tab character.'
        r: '[AI] `tree -r` is a command in Unix-like operating systems, specifically `tree`, which recursively displays the directory structure as a tree diagram. The `-r` option indicates that the command should display the contents of directories recursively. When executed, it prints out the hierarchy of subdirectories and files within the specified directory, with each level indented to show the hierarchical relationship between them.'
        s: '[AI] The `tree -s` command is used in Unix-based operating systems to recursively print the directory tree structure with the size of each directory and file indicated next to it. The `-s` option stands for "summarize" or "show sizes". This means that only the name of each directory or file, along with its size in bytes, will be displayed at each level of the directory hierarchy. This information can be useful for analyzing disk usage and identifying large files or directories.'
        si: |-
            [AI] The `tree --si` command is a utility from the `tree` package in Unix-like operating systems. It is used to recursively display the directory structure as a tree with additional size information.

            The `--si` option stands for "size-is-number". When used, it displays file sizes in human-readable format (e.g., 1K, 2M, 3G) along with the filenames and directories in the tree output. This can be helpful for quickly understanding the disk usage distribution within a directory hierarchy.
        sort: '[AI] The `tree --sort` command in Unix-like operating systems is used to create a multi-level directory tree output with files listed alphabetically within each directory. The `--sort` option sorts the file names within each subdirectory before displaying the subdirectories themselves, resulting in a neatly organized and readable tree structure.'
        t: '[AI] The `tree -t` command in Unix-based systems is used to create a textual representation of the directory tree structure with symbolic links indicated by an arrow(`->`) pointing to their target. The `-t` option stands for "human readable" format, which means that file sizes are displayed in a more user-friendly format (e.g., ''1K'' instead of ''1024''). This command is often used for quick and easy visualization of directory structures or for scripting purposes.'
        u: '[AI] The `tree -u` command in Unix-like operating systems is used to create a textual representation of the directory tree with an indentation reflecting the hierarchy and a line indicating each file''s last modification time (the ''u'' flag). It provides a clear, easily parseable output, allowing users to see not only the file and directory structure but also when each item was last updated.'
        v: |-
            [AI] The `tree -v` command is a Unix utility used to create a multi-level output of a directory's contents as indented tree structure, with an additional verbose (-v) option that displays each file's size and modification time in human-readable format. For example:

            ```bash
            $ tree -v /path/to/directory
            .
            ├── file1.txt (54 bytes, Mar 23 10:36)
            │  └── subfile1.txt (12 bytes, Mar 23 10:38)
            └── folder
                ├── file2.txt (75 bytes, Mar 23 11:15)
                └── subfolder
                    └── file3.txt (34 bytes, Mar 23 11:21)
            ```
        version: '[AI] The `tree --version` command is used to check the version of the `tree` utility installed in your system. The `tree` utility is a popular file system exploration and visualization tool in Unix-like operating systems. When you execute this command, it will display the version number or release information about the installed tree application. For instance, `tree --version 1.7.0`. This output indicates that the current installation of `tree` is version 1.7.0.'
        x: '[AI] The `tree -x` command in Unix-based systems is used to recursively print the directory tree structure, showing only files and directories whose names match a given pattern represented by the `-x` option. The `-x` flag takes a regular expression as an argument. For example, `tree -x ''.*\.txt$''` will display only files with the .txt extension.'
