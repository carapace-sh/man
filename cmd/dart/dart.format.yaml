# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: format
description: Idiomatically format Dart source code
flags:
    --fix: Apply all style fixes.
    --set-exit-if-changed: Return exit code 1 if there are any formatting changes.
    -h, --help: Print this usage information.
    -l, --line-length=: Wrap lines longer than this.
    -o, --output=: Set where to write formatted output.
    -v, --verbose: Show all options and flags with --help.
documentation:
    command: '[AI] `dart format` is a command-line utility provided by Dart programming language. Its primary function is to automatically apply a consistent coding style across all `.dart` files in a project, ensuring codebase uniformity. It uses the rules defined in the `dart:io` package''s `dart:` format configuration and can be customized using `.dart_style` files or custom configurations.'
    flag:
        fix: '[AI] `dart format --fix` is a command-line tool provided by the Dart programming language to automatically apply the Dart code style recommended by the Dart team. The `--fix` option enables the tool to automatically correct formatting issues found in Dart source files without requiring manual intervention, ensuring that all files adhere to a consistent coding standard. This command is useful for maintaining clean and readable codebases during development and collaboration within teams.'
        help: '[AI] `dart format --help` is a command used in Dart programming language to display help information about the `dart:format` library''s formatter tool. This tool automates code formatting according to Dart style guides, ensuring consistent coding styles within a project. The `--help` flag provides an overview of available options and usage instructions for this command.'
        line-length: '[AI] `dart:` is a command-line utility for Dart programming language. The specific command you mentioned is `dart:format` with an option `--line-length`. This option sets the maximum line length for reformatted Dart code. By default, it''s set to 80 characters, but this can be changed using the `--line-length` flag followed by the desired number of columns. For instance, `dart:format --line-length=120` will format the Dart code with a maximum line length of 120 characters. This option helps maintain consistent coding style across a project and adhere to specific team or organizational guidelines.'
        output: '[AI] `dart format --output` is a command used in Dart programming language to apply automated code formatting to one or more Dart files. The `--output` option specifies an output file or directory where the formatted codes should be written instead of printing the results on the console. This can help maintain consistent coding styles across large projects and ensure that new code follows established formatting guidelines.'
        set-exit-if-changed: '[AI] `dart format` is a command-line tool in Dart programming language for formatting Dart code according to the style guide. The option `--set-exit-if-changed` is used to configure it to exit with an error code if and only if the code has been changed during formatting. In other words, this flag ensures that the code remains unchanged after formatting by preventing accidental overwriting of important changes.'
        verbose: '[AI] `dart format --verbose` is a command-line option for the Dart code formatter tool. The `--verbose` option increases the output verbosity, providing more detailed information about the formatting process. This includes printing each file being formatted and any rules or adjustments applied during the formatting. It helps in understanding the impact of the formatter on your codebase.'
