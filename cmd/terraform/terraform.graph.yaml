# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: graph [options]
description: Generate a Graphviz graph of the steps in an operation
flags:
    -draw-cycles: Highlight any cycles in the graph with colored edges
    -plan?: Render graph using the specified plan file
    -type?: Type of graph to output
documentation:
    command: '[AI] The `terraform graph` command is not a built-in Terraform command, but rather a feature of Terraform Workspaces and the `terradefuse` plugin. It generates a dependency graph visualization between all the resources in your Terraform configuration file(s), showing how each resource depends on others during infrastructure deployment. This can be useful for understanding complex interdependencies and optimizing your deployment strategy. To use it, you need to enable the `terradefuse` plugin, create workspaces, apply them one by one, and then run the command using Terraform CLI with the `graph` argument: `terraform workspace select <workspace_name> && terraform graph > output.dot`. The output is saved in a DOT format file which can be further processed to create visualizations using graph drawing tools like Graphviz.'
    flag:
        draw-cycles: |-
            [AI] The `terraform graph -draw-cycles` command is used to visualize the dependencies and cycles in a Terraform configuration using the Graphviz language. Terraform is an open-source infrastructure as code software tool that provides a consistent CLI workflow to manage hundreds of cloud and complex IT resources.

            When you run `terraform graph`, it generates a graph file describing your configuration, showing how each resource depends on others through their interconnected inputs and outputs. The `-draw-cycles` flag specifically highlights any cycles in the dependency graph, which can indicate potential issues or circular references in your configuration that may cause errors or unexpected behavior when applied.

            By visualizing the cycles and dependencies within your infrastructure, you can identify and address complex configurations that may be difficult to understand or manage through code alone. This helps ensure a more stable and reliable infrastructure.
        plan: '[AI] `terraform plan` is a command provided by Hashicorp''s Terraform infrastructure configuration tool. It performs a preview of infrastructure changes before applying them, based on your configured Terraform files. The `-graph` flag generates an output in GraphQL format, displaying a representation of the planned operations as a directed acyclic graph (DAG). This output can be used for further analysis or processing by downstream tools.'
        type: '[AI] `terraform graph` is a command provided by Hashicorp''s Terraform infrastructure configuration tool. The `-type` option modifies the output of this command to display only nodes representing specific types, such as resources or data sources, in your Terraform configuration. This can help visualize and understand the dependencies between these entities more clearly.'
