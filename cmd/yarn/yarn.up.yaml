# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: up
description: Upgrade dependencies across the project
group: general
flags:
    --mode=: Change what artifacts installs generate
    -C, --caret: Use the ^ semver modifier on the resolved range
    -E, --exact: Don't use any semver modifier on the resolved range
    -R, --recursive: Resolve again ALL resolutions for those packages
    -T, --tilde: Use the ~ semver modifier on the resolved range
    -i, --interactive: Offer various choices, depending on the detected upgrade paths
documentation:
    command: |-
        [AI] `yarn up` is a command used in Yarn, a popular JavaScript package manager. It is equivalent to running `npm install --offline` in npm. This command performs two main functions:

        1. Fetching new packages from the registry and updating local dependencies defined in the project's `yarn.lock` or `package-lock.json` file.
        2. Installing saved dependencies (if not already available offline) to make them ready for use. It also generates a new `yarn.lock` file to ensure consistency across different development environments.
    flag:
        caret: |-
            [AI] The `yarn up --caret` command is a Yarn workflow step used in a `yarn.workflow.yml` file for managing dependencies and building projects.

            The `--caret` flag indicates that a specific version range should be installed instead of an exact version, allowing the use of semantic versions (e.g., "^1.2.3" or ">1.2.3 <2.0.0"). The command `yarn up` performs the process of checking for updates and installing new dependencies based on the defined lockfile or package.json file and the specified version ranges in the workflow file.
        exact: '[AI] `yarn up --exact` is a command used in Yarn, a popular JavaScript package manager. This command is used to install packages with exact versions mentioned in the package.json file. The "--exact" flag ensures that the specified version of each package is installed, instead of using the latest compatible version with other dependencies. This can be useful for ensuring consistent behavior across different environments.'
        interactive: '[AI] `yarn init --interactive` is a command used with Yarn, a popular JavaScript package manager. The command starts an interactive session for creating a new `package.json` file. Instead of manually providing all the necessary fields in a JSON object, users answer a series of prompts to define their project''s details like name, version, description, author, license, and dependencies. This makes it easier and more convenient for users to initiate a new Yarn-managed project with the correct configuration.'
        mode: '[AI] `yarn up --mode` is a command used in Yarn, a popular JavaScript package manager. This command initializes or updates the Yarn workspaces by installing or updating the dependencies defined in each package''s `package.json` file within the workspace. The `--mode` option specifies which mode to use: either "production" or "development". Production mode optimizes the build process and outputs minimized files, while development mode provides more interactive tools and debugging information.'
        recursive: '[AI] `yarn up --recursive` is a command used in Yarn, a popular JavaScript package manager. This command performs recursive workspaces resolution and installation of dependencies for all projects under a single root folder. In other words, it installs packages for the main project and all its sub-projects linked together in a Yarn workspace, ensuring consistent dependency versions across the entire workspace.'
        tilde: '[AI] The `yarn up -- Treat` command is a Yarn workflow step used in a `yarn workflow` file. It installs packages from a `Berry` format registry, specifically the npm registry with the treated (alias or short name) notation for package names. The `--tilde` option is a version range operator that installs the latest patch release of the specified package. For example, `yarn up -- Treat my-package @ treat/my-package@1.2.3 --tilde` would install version `1.2.x` of the package `my-package`.'
