# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update-stale
description: Update a workspace that has become stale
flags:
    -h, --help: Print help (see more with '--help')
documentation:
    command: |-
        [AI] The `jj workspace update-stale` command is used in Jira AlmTools, a set of command-line tools for Jira Software and Jira Almighty. This specific command is responsible for updating a stale local workspace, which occurs when the changes made locally conflict with the latest version in the repository.

        By running `jj workspace update-stale`, you authorize Jira AlmTools to automatically merge any conflicts detected between your local modifications and the most recent versions of the files in your workspace from the main repository. If the merge process fails, the command will not apply the changes and will leave it up to the user to manually resolve the conflicts using their preferred text editor or merge tool.

        In summary, `jj workspace update-stale` is a command that helps keep your local Jira project workspace up-to-date with the latest version of the main repository by merging any detected conflicts automatically.
    flag:
        help: |-
            [AI] `jj workspace update-stale` is a command provided by Jira Software's JetBrains Toolbox, used to update a local Git repository associated with a Jira project workspace, which may have fallen out of sync due to network issues or other problems. The `--help` flag is an option that can be passed to the command to display detailed information about how it works and what arguments or options are available. Here's a brief summary:

            The `jj update-stale` command is used to fetch and merge any changes from the remote repository into your local one, helping you keep your workspace up-to-date. By adding the `--help` flag, Jira will output a detailed explanation of the command's usage, including:

            1. Syntax: The correct way to write and call the command in your terminal or command prompt.
            2. Options: A list of available options that can be passed to customize the command behavior.
            3. Examples: Practical examples demonstrating how the command can be used in various scenarios.
            4. Description: A brief explanation of what the command does and when it's useful.
            5. Arguments: Detailed information about any arguments required by the command.

            By providing `--help` when using this command, you will have a clearer understanding of how to use it effectively in your Jira workflow.
