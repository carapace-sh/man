# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: docker [OPTIONS] COMMAND [ARG...]
description: A self-sufficient runtime for containers
flags:
    --config=: Location of client config files
    --tls: Use TLS; implied by --tlsverify
    --tlscacert=: Trust certs signed only by this CA
    --tlscert=: Path to TLS certificate file
    --tlskey=: Path to TLS key file
    --tlsverify: Use TLS and verify the remote
    -D, --debug: Enable debug mode
    -H, --host=: Daemon socket(s) to connect to
    -c, --context=: Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
    -l, --log-level=: Set the logging level ("debug", "info", "warn", "error", "fatal")
    -v, --version: Print version information and quit
persistentflags:
    -h, --help: Print usage
documentation:
    command: '[AI] "Docker" is a platform and toolset that automates the deployment, scaling, and management of applications using container technology. It allows developers to build, test, and deploy applications in any environment by packaging code and dependencies into lightweight, portable containers. Docker uses an open-source engine to run containers and manages them with various command-line tools or a graphical user interface (GUI). The main commands include `docker build` for creating images, `docker run` for executing containers, `docker pull` for downloading images from registries, `docker ps` for listing running containers, and `docker stop` for stopping containers.'
    flag:
        config: '[AI] `docker --config` is an option used with the Docker daemon or client to specify a custom JSON file containing configuration settings. The flag takes a file path as an argument, allowing users to override default configuration values or add new ones for advanced use cases, such as setting up network plugins, storage drivers, or security options. This provides greater flexibility and control over the Docker environment.'
        context: '[AI] The `--context` flag in Docker is used to specify which Docker context to use when running a command. A context is a collection of one or more Docker hosts that are connected to the Docker CLI and can be managed as a single entity. By default, Docker uses the unnamed context which includes the host machine. Using `--context` allows you to manage and switch between multiple environments, such as development, staging, or production environments, each with its own set of Docker hosts.'
        debug: '[AI] The `--debug` flag when used with Docker is an option that increases the level of output and detail provided during Docker operations such as build, run, or pull. It enables debug mode in the Docker daemon and client, resulting in more extensive logs and potentially helpful information for troubleshooting complex issues.'
        host: |-
            [AI] The `--host` flag in Docker is used to configure the network addressing between the Docker host and the containers. With this flag, you can specify that containers should use the same networking as the Docker host itself (instead of using a bridge or overlay network). This can be useful when you want your containers to be directly accessible from the host's network, for example when running tests or for development purposes.

            The value of `--host` can take one of two formats:

            * `host:` - this maps all container ports to the same port on the host and exposes all container interfaces on the host's IP address.
            * `<IP>:<Port>:` or `<interface>:<IP>:<Port>` - this maps a specific container port to a specific host port, or binds a container interface to a specific IP and port on the host.

            For example, `--host 0.0.0.0:2375` would expose the Docker daemon's listening port (2375 by default) to all interfaces of the host machine, while `--host mynetworkinterface:192.168.0.5:80` would bind a container's port 80 to the host interface named "mynetworkinterface" and IP address 192.168.0.5.

            Be aware that using `--host` can have security implications, as containers running on the host share the same network stack as the host itself. Always make sure to use this option carefully and securely.
        log-level: |-
            [AI] The `--log-level` flag in Docker sets the logging level for the Docker daemon. It determines what types of messages will be displayed in the logs.

            Higher log levels correspond to more verbose output. For example:

            - `--log-level=debug`: Shows debug messages, which include detailed information about Docker's internal workings.
            - `--log-level=info`: Displays informational messages, which provide a general overview of what Docker is doing.
            - `--log-level=warn`: Shows warning and error messages, which alert you to potential problems.
            - `--log-level=error`: Displays only error messages, which indicate severe issues that need immediate attention.

            By default, the log level is set to `info`. You can use this flag when starting the Docker daemon or when running a specific command to change the log level for that session.
        tls: |-
            [AI] The `--tls` flag in Docker is used to enable secure communication between the Docker client and Docker daemon using Transport Layer Security (TLS). This helps ensure that all data transmitted between the two is encrypted, preventing potential eavesdropping or data interception. To use this flag, you need to provide a TLS certificate and key file for both the client and server, ensuring they trust each other's certificates. The exact usage would be something like:

            ```bash
            docker --tls cert.pem --tlscacert ca.pem --tlskey key.pem <command>
            ```

            Replace `cert.pem`, `ca.pem`, and `key.pem` with the paths to your actual certificate files.
        tlscacert: '[AI] The `--tls-ca-cert` flag in Docker is used to specify a TLS (Transport Layer Security) CA cert file for secure communications between the Docker client and Docker registry or Swarm services. When this option is set, Docker will validate the certificate presented by the remote server against the provided CA cert to ensure authenticity and encryption. This helps maintain the security of communication channels in Docker environments.'
        tlscert: '[AI] The `--tlsverify` flag in Docker is used to enable TLS (Transport Layer Security) verification for secure communication between a client and a Docker Registry server. The `--tlscert` option specifies the path to the local CA certificate file that will be used to verify the registry''s SSL certificate during the connection. This helps ensure that data transmitted between the client and registry is encrypted and secure.'
        tlskey: |-
            [AI] The `--tlscacert` and `--tlskey` flags are used with Docker to configure TLS (Transport Layer Security) certificates for secure communications between a client and a Docker daemon.

            The `--tlskey` flag specifies the path to the private key file used for authentication in the TLS certificate. The file should be in PEM format and must be readable by the user running Docker.

            In summary, `--tlskey` is an option passed to the Docker command line interface (CLI) tool that allows specifying the location of a private key file used for secure communication between a client and the Docker daemon using TLS certificates.
        tlsverify: '[AI] `docker --tlsverify` is a command-line option for Docker that enables Transport Layer Security (TLS) verification for connections to Docker registries or swarm modes. It ensures secure communication between the client and the server by requiring the use of valid certificates. This helps protect against man-in-the-middle attacks, where an attacker intercepts data transmitted between two parties. By using this option, you can confirm that you are communicating with the intended registry or swarm master and not a malicious imposter.'
        version: '[AI] The `docker --version` command is used to check the current installed version of Docker on your system. When executed in a terminal or command prompt, it displays the Docker client version along with the build date and the Git commit hash. This command helps users ensure they have the latest version of Docker installed, or checks which version is currently being utilized for troubleshooting purposes.'
