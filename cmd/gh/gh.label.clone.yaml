# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clone <source-repository>
description: Clones labels from one repository to another
flags:
    -f, --force: Overwrite labels in the destination repository
documentation:
    command: |-
        [AI] The `gh label` command is a part of GitHub CLI (gh-cli), which is used to manage GitHub labels from the command line. The `clone` subcommand creates or updates labels for one or more issues, pull requests, or projects based on given parameters. For example:

        ```sh
        gh label create issue-number label-name -- issue/issue-number
        ```

        This would create a new label named 'label-name' on the specified issue with number 'issue-number'. To clone existing labels from an issue or pull request, you can use the following command:

        ```sh
        gh label sync issue/issue-number
        ```

        This command fetches all current labels associated with the given issue and stores them as local environment variables that can be used in scripts. By default, this command will only display the names of the labels; to also see their colors, add the `--colors` flag:

        ```sh
        gh label sync issue/issue-number --colors
        ```
    flag:
        force: |-
            [AI] The `gh` command with the given argument, `label clone --force`, is a GitHub CLI (Command Line Interface) command used to clone a repository with a specific label (or branch) while forcefully overwriting any existing local repository with the same name. Here's a breakdown of each part:

            * `gh`: This represents the GitHub CLI, an official tool from GitHub for managing repositories and interacting with the platform using command-line interface.
            * `label`: It specifies that you want to clone a specific label or branch instead of the default main (or master) branch.
            * `clone`: This is the action or command to be performed, which is to create a local copy of a remote repository.
            * `--force`: This flag forces Git to replace the existing files in the local repository with those from the remote one without asking for confirmation or causing any merge conflicts if there are any changes in both the local and remote repositories. It's important to use this option carefully, as it can potentially overwrite unintentionally modified or new files in your local repository.
