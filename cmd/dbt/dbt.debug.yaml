# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: debug
description: Show some helpful information about dbt for debugging
flags:
    --config-dir: DBT will show path information for this project
    --no-version-check: skip ensuring dbt's version matches the one specified in the dbt_project.yml file
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --vars=: Supply variables to the project
    -t, --target=: Which target to load for the given profile
documentation:
    command: '[AI] `dbt debug` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. It allows users to run a specific model or fragment in debug mode, displaying more detailed output, including the SQL queries executed, the data before and after transformations, and any errors that occur during execution. This can help in understanding the data flow within a dbt project, troubleshooting issues, and ensuring data quality.'
    flag:
        config-dir: '[AI] `dbt debug` is a command used in dbt (data build tool) to launch an interactive debugging session for a specific dbt project. The `--config-dir` option specifies the directory path containing the `profiles.yml` file, which holds configuration settings for connecting to various data sources and databases. This flag allows users to easily switch between different environments or data sources while debugging their dbt models.'
        no-version-check: '[AI] `dbt debug --no-version-check` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command launches the dbt Debugger, which is an interactive REPL environment for running SQL queries against your dbt project''s models. The `--no-version-check` flag is used to bypass the version check during debugging, allowing you to use the debugger even if your local and project versions of dbt do not match. This can be helpful when working on older projects or in development environments where package versions may not be consistently updated.'
        profile: '[AI] `dbt debug --profile` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command starts a new debugging session for a specific dbt project profile. It allows users to inspect the internal state of dbt, including variables, configurations, and the current execution plan. The `--profile` flag specifies which dbt profile to use, defining the database connection details and other settings for the data transformation process. This command is useful for troubleshooting issues and understanding how dbt processes data within a project.'
        project-dir: '[AI] `dbt debug --project-dir` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command is run from the terminal or command prompt and is used to start an interactive debugging session for a specific dbt project. The `--project-dir` flag specifies the directory path of the project. In this mode, dbt loads the project configuration, runs a single task with an interactive console, enabling users to step through code, inspect variables, and troubleshoot issues in real-time.'
        target: |-
            [AI] `dbt debug --target` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This specific command runs a single dbt project model or seed file in debug mode.

            Debug mode enables more detailed output, which can be helpful for understanding the internal workings of the dbt execution process, such as showing SQL queries being run and their results. The `--target` flag specifies the particular model or seed file to execute.
        vars: '[AI] `dbt debug --vars` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This command runs a specific dbt project test or model in debug mode with custom variables passed as key-value pairs. These variables can be used to override values in the dbt file, allowing for dynamic configuration changes during testing or development.'
