# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: chroma
description: Chroma is a general purpose syntax highlighter
flags:
    --check: Do not format, check for tokenisation errors instead.
    --fail: Exit silently with status 1 if no specific lexer was found.
    --filename=: Filename to use for selecting a lexer when reading from stdin.
    --html: Convenience flag to use HTML formatter.
    --html-all-styles: Output all HTML CSS styles, including redundant ones.
    --html-base-line=: Base line number.
    --html-highlight-style=: Style used for highlighting lines.
    --html-highlight=: Highlight these lines.
    --html-inline-styles: Output HTML with inline styles (no classes).
    --html-lines: Include line numbers in output.
    --html-lines-style=: Style for line numbers.
    --html-lines-table: Split line numbers and code in a HTML table
    --html-linkable-lines: Make the line numbers linkable and be a link to themselves.
    --html-only: Output HTML fragment.
    --html-prefix=: HTML CSS class prefix.
    --html-prevent-surrounding-pre: Prevent the surrounding pre tag.
    --html-styles: Output HTML CSS styles.
    --html-tab-width=: Set the HTML tab width.
    --json: Convenience flag to use JSON formatter.
    --list: List lexers, styles and formatters.
    --profile=: Enable profiling to file.
    --svg: Convenience flag to use SVG formatter.
    --trace: Trace lexer states as they are traversed.
    --unbuffered: Do not buffer output.
    --version: Show version.
    --xml=: Generate XML lexer definitions.
    -f, --formatter=: Formatter to use.
    -h, --help: Show context-sensitive help.
    -l, --lexer=: Lexer to use when formatting or path to an XML file to load.
    -s, --style=: Style to use for formatting or path to an XML file to load.
documentation:
    command: '[AI] The term "chroma" is not a command per se, but rather a concept in color theory. In photography and image processing, chroma refers to the degree of saturation or purity of a hue, representing the amount by which a color deviates from a grayscale version of itself. Chroma values are often used in conjunction with lightness (brightness) and hue to describe colors completely. While there might be some specific use cases within various software applications or programming languages, the term "chroma" is generally not a command that can be given directly to an operating system or image processing tool.'
    flag:
        check: '[AI] `chroma --check` is a command in the Chroma library used for checking the color palettes of images or designs. It analyzes the given image and identifies its dominant colors, creating a new or updated palette based on the specified chroma options. The result is an output showing the hexadecimal codes and RGB values of each color in the palette. This command is helpful for extracting and adjusting the color schemes of digital designs, ensuring consistency and harmony across projects.'
        fail: '[AI] The `chroma --fail` flag is a command-line option for the Chroma library in Python. It indicates that the library should raise an exception if it encounters invalid or unrecognized data during image processing, instead of attempting to continue with the remaining data or producing default results. In other words, this flag is used to enforce strict error handling and ensure that any issues are immediately reported.'
        filename: '[AI] The `chroma` command-line tool with the option `--filename flag` is used to read an image file for color analysis. When you run `chroma --filename <path_to_image>`, it reads and processes the specified image file (in various supported formats) and outputs detailed information about its color composition, including the most dominant colors, average color, histogram, and more. This is often used in data analysis, image processing, or designing with a specific color palette in mind.'
        formatter: '[AI] The `--formatter` flag in Chroma is used to specify the formatting style for the output of Chroma''s colorization and formatting of text. It allows users to customize how their terminal output looks, by choosing from various predefined styles or creating their own. For example, `--formatter=github` would apply GitHub''s Dark theme for displaying colored text in the terminal. This flag helps tailor Chroma to individual user preferences and environments.'
        help: '[AI] The `--help` option when used with the Chroma data analysis and visualization tool, displays comprehensive information about how to use the tool effectively. It includes details on various command line arguments and their corresponding options, providing users with essential guidance on installation, input file formats, available visualizations, and output formats. By running `chroma --help`, users can quickly familiarize themselves with Chroma''s functionalities and capabilities.'
        html: '[AI] The `--html` flag in Chroma, a popular text styling library for Ruby, is used to output formatted results as HTML instead of the default terminal output. This allows you to apply rich formatting, such as colors and bold text, directly to HTML documents or web applications. The resulting HTML can then be easily embedded into websites or other digital media for visually appealing text styling.'
        html-all-styles: '[AI] The `--html-all-styles` flag in Chroma is used to include all stylesheets when generating HTML output from markdown files. Chroma is a Python library for rendering Markdown and other text-based formats into various outputs, including HTML. By using this flag, all external and inline styles will be included in the generated HTML file, ensuring consistent rendering of the content''s formatting and design.'
        html-base-line: '[AI] The `--html-base-line` option in Chroma, a popular color thief library used to extract color palettes from images or designs, is used to specify the HTML document''s base URL or origin when generating an HTML file with the extracted colors. By providing this option, Chroma ensures that the generated `<link>` tag references the correct image location within the larger HTML structure, allowing for seamless integration and proper functionality of the extracted color palette in web projects.'
        html-highlight: '[AI] `chroma --html-highlight` is a command-line tool or library for colorizing text in HTML format using the Chroma library. It takes source code as input and returns highlighted HTML markup that can be rendered by web browsers to visually distinguish different parts of the code (syntax, keywords, variables, etc.). This allows developers to improve the readability and understanding of their code snippets when sharing it online or in documentation.'
        html-highlight-style: '[AI] `--chrome --html-highlight-style` is a command-line option for tools like Atom, Sublime Text, or Visual Studio Code that use the Chroma language-agnostic syntax highlighting engine. It sets the HTML formatting style for syntax highlighting. The flag does not actually display a flag as such but rather configures the editor to apply a specific highlighting theme or style tailored for HTML code.'
        html-inline-styles: '[AI] The `--html-inline-styles` flag in Chroma is used to inline all CSS styles when generating markdown output. This means that instead of linking to external style sheets or keeping them in separate files, the generated HTML will include the CSS rules directly within the `<style>` tags in the document''s `<head>` or at the beginning of each element. Inlining styles can be helpful for creating self-contained markdown documents that don''t require an external environment to render properly.'
        html-lines: '[AI] The `--html-lines` option in Chroma, a text styling library for Ruby, is used to display the output of code colorization as a formatted HTML string with each line numbered. This can be useful when working with web development tools or when displaying code snippets within an HTML document. By default, Chroma outputs colored text to the console, but with `--html-lines`, it generates an HTML representation instead.'
        html-lines-style: '[AI] The `--html-lines-style=chroma` flag is a formatting option for command-line tools like `grep`, `sed`, and others that handle text processing. It sets the style used to colorize HTML code in the output, specifically using the Chroma library for terminal colorization. This can make it easier to read and navigate through the HTML source code in the console.'
        html-lines-table: '[AI] The `--html-lines-table` flag in Chroma, a text formatter for colorized console output, generates an HTML table representation of the formatted output instead of printing it directly to the console. This can be useful when working with web development tools or for automatically processing colored console output from scripts and applications. The table includes details like line numbers, column numbers, and the actual colored text content, making it easier to parse and process the data programmatically.'
        html-linkable-lines: '[AI] The `--html-linkable-lines` flag in Chroma, a text formatter for colored output, enables creating clickable links in HTML format for each line number in error messages or other annotated outputs. When activated, each line number becomes a hyperlink that points to the corresponding location in the original source code file when viewed in a web browser. This feature can facilitate quick navigation between various parts of large and complex codebases.'
        html-only: '[AI] The `--html-only` flag in Chromium (and Chrome) is used to render and output only the HTML content of a web page without executing any JavaScript code or rendering CSS styles. This can be useful for testing and debugging HTML structure and syntax, as well as analyzing the document tree and DOM structure without the influence of JavaScript or styling.'
        html-prefix: '[AI] The `--html-prefix` option in Chroma, a popular text formatting library for colorizing terminal output, is used to specify a prefix string that will be added to the HTML tags generated by Chroma''s Markdown support. This option can be helpful when customizing the appearance of HTML markup generated within a larger document or system where the default markup may not fit well with the existing styling. By providing a custom prefix, users have greater control over how the Chroma-generated HTML integrates into their larger project.'
        html-prevent-surrounding-pre: '[AI] The `--html-prevent-surrounding-pre` flag in Chromium''s `chroma` tool is used to prevent the generation of `<pre>` tags around source code snippets in HTML output. When this flag is set, Chromium''s rendering engine will not automatically wrap source code blocks with the `<pre>` tag and its associated formatting classes (like `white-space: pre-wrap`), allowing for more control over the formatting of code snippets in the generated HTML.'
        html-styles: '[AI] The `--html-styles` flag in Chroma, a text styling library for R, is used to apply HTML and CSS styles to output. When this option is provided along with a valid `.css` file, Chroma will incorporate the specified styles into the generated HTML output, enhancing the visual appeal of the text.'
        html-tab-width: '[AI] The `--html-tab-width` flag in Chromium-based browsers, such as Google Chrome, is used to set the width of HTML tabs. It''s a command-line argument for Chromium and is typically passed when launching the browser from the terminal or command prompt. A value of `n` sets the tab width to `n` spaces, where `n` can be an integer from 1 to 4. By default, most browsers set HTML tab width to 2 or 4 spaces. This flag is useful for developers who want a consistent coding style across their development environment.'
        json: '[AI] The `chroma --json` command is a feature of the Chroma color palette generator tool. This command generates a JSON (JavaScript Object Notation) output containing detailed information about a specified color palette. The output includes data on each color in the palette, such as its name, hexadecimal code, RGB values, HSL values, and more. The generated JSON can be easily processed by various programming languages for further use in projects.'
        lexer: '[AI] The `--lexer chroma` flag is used with text editors and IDEs that support syntax highlighting, such as Visual Studio Code or Atom. It specifies the use of the Chroma lexer or colorizer for parsing and highlighting the source code or text file. The Chroma lexer is a powerful and extensible library for creating custom syntax themes and highlights for various programming languages, markup languages, and other text types. This flag enables the editor to apply the appropriate colors and styles based on the Chroma configuration file or theme for the specific file type being edited.'
        list: '[AI] The `chroma --list` command is a feature of the Chroma library, which is a tool for working with color palettes in various formats. This specific command is used to list all available color palettes that are installed or included with Chroma. The output typically includes the name and a representative sample of each palette, allowing users to easily identify and select the desired color scheme.'
        profile: '[AI] The `--profile chroma` option in Chroma, a color grading and visual effects tool, specifies the use of the Chroma profile for color processing. This profile is designed to preserve and enhance certain aspects of the RGB color space, particularly saturation and hue, making it suitable for high-end film and television post-production workflows. Using this option allows for greater control over the look and feel of images while maintaining a high level of visual quality.'
        style: '[AI] The `--style` flag in Chroma is used to specify the visual theme or appearance of the output produced by Chroma, a popular terminal colorizer for various programming languages and tools. It determines how syntax elements are rendered in the terminal, including colors, bold, italic, underline, and other formatting options. Different styles can be selected to customize the look of your code in the terminal to better suit your personal preferences or development environment.'
        svg: '[AI] The `--svg` flag in Chroma is an option used when generating SVG (Scalable Vector Graphics) output. Chroma is a color theory tool that can be used to explore, visualize, and manipulate colors. With the `--svg` flag, Chroma generates an SVG representation of a given color palette or color harmonies instead of traditional image formats like JPG or PNG. This makes it easier to integrate the color data into vector graphic design software for further processing.'
        trace: '[AI] The `chroma --trace` flag is a command-line option used with Chroma, an open-source video processing library written in Rust. This flag enables the trace mode, which produces detailed logging and debug information during program execution. It''s primarily utilized by developers for debugging and understanding the internal workings of Chroma, as it provides insights into various aspects such as data flow, algorithm execution, and error handling.'
        unbuffered: |-
            [AI] The `--unbuffered` flag for the Chroma library in Rust is used to disable output buffering. Buffering is a technique where data is temporarily stored in memory before being sent to the standard output stream. This can improve performance by reducing the number of system calls made when writing data.

            However, in some cases, you may want to write data directly to the output stream without buffering it first. The `--unbuffered` flag achieves this by disabling buffering and forcing Chroma to write data to the output stream immediately after it's generated. This can be useful for applications that need to display real-time data or have large amounts of data to output, as it can reduce latency and improve overall performance.
        version: '[AI] `chroma --version` is a command used in Chroma, a tool for colorizing text output in terminal applications. This command is used to check and display the current version of Chroma installed on your system. It returns output similar to `chroma (X.Y.Z)` where X.Y.Z represents the major, minor, and patch versions of the installed Chroma package.'
        xml: '[AI] The `chroma --xml` flag is a command-line option for Chroma, an open-source tool used for color grading and editing video or film projects. When this flag is used, Chroma generates an XML file instead of the default .cml project file. The XML format allows for sharing or exporting LUT (LookUp Table) data in a human-readable format that can be used by other color grading software or applications that support OpenColorIO or Academy Color Encoding System (ACES) XML files.'
