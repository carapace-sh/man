# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: vi
description: screen oriented (visual) display editor based on ex
flags:
    -L=: temporary file to open in recovery mode
    -R: Files are opened read-only when this option is given
    -V: Echo command input to standard error, unless it originates from a terminal
    -c=: Execute command when editing begins
    -l: Start in a special mode useful for the Lisp programming language
    -r=: temporary file to open in recovery mode
    -s: Script mode, all feedback for interactive editing is disabled
    -t=: Read the tags file, then choose the file and position specified by tagstring for editing
    -w=: Specify the size of the editing window for visual mode
documentation:
    command: '[AI] `vi` is a popular text editor in Unix-like operating systems. It supports both visual and command-line modes, allowing users to edit files with ease. In its default state, it runs in command-line mode, where users can perform actions using keystrokes based on the current mode (normal, insert, or last location). Users can switch between these modes using specific keys. Some common vi tasks include editing text, deleting lines, saving and quitting the editor. To use `vi`, open a terminal and type `vi filename`.'
    flag:
        L: '[AI] The `vi` command with the flag `-L` is used to invoke the `vi` text editor in LINUX with a Latin-1 (ISO-8859-1) locale. This means that characters with accents or other special characters will be displayed and interpreted correctly. So, the flag `-L` sets the locale to English (US) or other Latin-1 locales when using the `vi` editor.'
        R: '[AI] The `vi` command with the option `-R` is used to invoke the `vi` text editor in Replace-in-Place mode, also known as Recovery mode. This mode allows you to edit a file while keeping the original version safe and restoring it if necessary. Any changes made are saved on a backup file with a tilde (`~`) appended to the filename. If no backup file exists, `vi` will create one before entering the editor. The original file remains unchanged until you explicitly save your edits by writing them back to the original file. This mode is useful for making critical updates to files without risking their integrity.'
        V: '[AI] The `vi` command with the `-V` option is used to display the version information of the `vi` or `vim` editor. This includes the version number, compile options, and other relevant details about the editor''s build.'
        c: '[AI] The `-c` option in `vi` or `vim`, a popular text editor, stands for "compatible" mode. When used, it makes `vi` behave more like the older and less featureful version of `vi`. This can be useful when working with files that were edited using an older version of `vi` and you want to ensure compatibility. Additionally, some users may prefer the older behavior for personal reasons.'
        l: '[AI] The `vi` command with the `-l` flag is used in Unix and Unix-like operating systems for editing text files. The `-l` option stands for "list" or "linear mode." When this option is provided, the text editor displays the file on the screen in a read-only format, with line numbers and other information such as indentation and whitespace visible. This can be helpful for doing tasks like checking the syntax of a file or quickly reviewing its contents without making any changes.'
        r: '[AI] The `vi` command with the `-r` option is used to invoke the remote edition feature of the `vi` text editor. This allows you to edit a file on a remote server over a network using the SSH protocol. The edited file will then be saved back to the remote server.'
        s: |-
            [AI] The `vi` command in Unix-based systems is a text editor. The option `-s` that follows `vi` is not a valid flag for the editor itself. Instead, it's commonly used with other commands to call `vi` in a specific way:

            1. `vi -s filename` : This command opens the file named 'filename' in "safe" or "restricted" mode. In this mode, certain actions like deleting or writing to the file are restricted, making it useful when working with important files to prevent accidental modifications.
            2. The `-s` flag is often used with other commands to invoke `vi` for specific tasks such as searching and replacing text in a file from the command line. For example: `:!grep -l 'pattern' filename | xargs vi -s +`. This command searches for the pattern in the file using `grep`, selects the matching lines using `xargs`, and opens each selected line in the editor for editing.

            In summary, `vi -s` is not a flag for the `vi` text editor itself but rather an option used with other commands to call `vi` in specific modes or contexts.
        t: |-
            [AI] The `vi` command with the `-t` option is used in Unix-based systems for displaying the file type or encoding of a file. When you run `vi -t filename`, it will only show the file type or encoding detection result without opening the file in the Vi editor. For example, if a text file is detected as UTF-8 encoded, the output might look like:

            ```
            text/plain; charset=utf-8
            ```

            Or for a binary file, it could show:

            ```
            application/octet-stream
            ```
        w: '[AI] The `-w` flag in Vim, a popular text editor, stands for "width." When used with commands like `:set` or `:writefile`, it sets or overwrites the file width. This means that text will not be wrapped to the next line when it reaches the end of a line, instead, it extends beyond the line length, which is useful for working with fixed-width files or long lines.'
