# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: show
description: show the changes recorded in the stash entry
flags:
    --abbrev=: show only a partial prefix
    --anchored=: Generate a diff using the "anchored diff" algorithm
    --binary: output a binary diff
    --cached: View the changes you staged in the index/cache
    --check: Warn if changes introduce conflict markers or whitespace errors
    --color-moved-ws?: This configures how whitespace is ignored when performing the move detection
    --color-moved?: Moved lines of code are colored differently
    --color-words=: Equivalent to --word-diff=color plus (if a regex was specified)
    --color=: Show colored diff
    --compact-summary: Output a condensed summary of extended header information
    --cumulative: Synonym for --dirstat=cumulative
    --diff-algorithm=: ""
    --diff-filter=: filter files
    --dirstat-by-file=: Synonym for --dirstat=files,param1,param2...
    --dst-prefix=: Show the given destination prefix instead of "b/"
    --exit-code: Make the program exit with codes similar to diff(1)
    --ext-diff: Allow an external diff helper to be executed
    --find-copies-harder: inspect unmodified files as candidates for the source of copy
    --find-object=: Look for differences that change the number of occurrences of the specified object
    --full-index: show the full pre- and post-image blob object names
    --histogram: Generate a diff using the "histogram diff" algorithm
    --ignore-blank-lines: Ignore changes whose lines are all blank
    --ignore-cr-at-eol: Ignore carriage-return at the end of line when doing a comparison
    --ignore-space-at-eol: Ignore changes in whitespace at EOL
    --ignore-submodules=: Ignore changes to submodules in the diff generation
    --include-untracked: include untracked
    --indent-heuristic: Enable the heuristic that shifts diff hunk boundaries to make patches easier to read
    --inter-hunk-context=: Show the context between diff hunks
    --ita-invisible-in-index: this option makes the entry appear as a new file
    --line-prefix=: Prepend an additional prefix to every line of output
    --minimal: Spend extra time to make sure the smallest possible diff is produced
    --name-only: Show only names of changed files
    --name-status: Show only names and status of changed files
    --no-color: Turn off colored diff
    --no-color-moved: Turn off move detection
    --no-color-moved-ws: Do not ignore whitespace when performing move detection
    --no-ext-diff: Disallow external diff drivers
    --no-indent-heuristic: Disable the indent heuristic
    --no-index: Compare paths on the file system
    --no-prefix: Do not show any source or destination prefix
    --no-rename-empty: Whether to use empty blobs as rename source
    --no-renames: Turn off rename detection
    --numstat: Similar to --stat, but shows number of added and deleted lines in decimal notation
    --only-untracked: only untracked
    --output-indicator-context=: Specify the character used to indicate context lines in the generated patch
    --output-indicator-new=: Specify the character used to indicate new lines in the generated patch
    --output-indicator-old=: Specify the character used to indicate old lines in the generated patch
    --output=: Output to a specific file instead of stdout
    --patch-with-raw: Synonym for -p --raw
    --patch-with-stat: Synonym for -p --stat
    --patience: Generate a diff using the "patience diff" algorithm
    --pickaxe-all: When -S or -G finds a change, show all the changes in that changeset
    --pickaxe-regex: Treat the <string> given to -S as an extended POSIX regular expression to match
    --raw: Generate the diff in raw format
    --relative,=: exclude changes outside the directory
    --rename-empty: Whether to use empty blobs as rename source
    --shortstat: Output only the last line of the --stat format
    --src-prefix=: Show the given source prefix instead of "a/"
    --stat-count=: Generate diffstat with limited lines
    --stat-graph-width=: Generate diffstat with a given graph width
    --stat-name-width=: Generate diffstat with a given filename width
    --stat-width=: Generate diffstat with a given width
    --stat=: Generate a diffstat
    --submodule=: Specify how differences in submodules are shown
    --summary: Output a condensed summary of extended header information
    --textconv=: Allow (or disallow) external text conversion filters to be run when comparing binary files
    --word-diff-regex=: Use <regex> to decide what a word is
    --word-diff?: Show a word diff, using the <mode> to delimit changed words
    --ws-error-highlight=: Highlight whitespace errors in the context, old or new lines of the diff
    "-0": Omit diff output for unmerged entries
    -1, --base: compare with base
    -2, --ours: compare with our branch
    -3, --theirs: compare with their branch
    -B, --break-rewrites=: Break complete rewrite changes into pairs of delete and create
    -C, --find-copies=: Detect copies as well as renames
    -D, --irreversible-delete: Omit the preimage for deletes
    -M, --find-renames=: Detect renames
    -O=: Control the order in which files appear in the output
    -R: Swap two inputs
    -S=: Look for differences that change the number of occurrences of the specified string
    -U, --unified=: Generate diffs with <n> lines of context instead of the usual three
    -W, --function-context: Show whole surrounding functions of changes
    -X, --dirstat=: Output the distribution of relative amount of changes for each sub-directory
    -a, --text: Treat all files as text
    -b, --ignore-space-change: Ignore changes in amount of whitespace
    -l=: prevent rename/copy detection from running if the number of rename/copy targets exceeds the specified number
    -p, --patch: Generate patch
    -s, --no-patch: Suppress diff output
    -u: Generate patch
    -w, --ignore-all-space: Ignore whitespace when comparing lines
    -z: do not munge pathnames and use NULs as output field terminators
documentation:
    command: '[AI] `git stash show` is a Git command used to view the contents of a stashed changeset. When you use `git stash`, it saves your current state of the working directory, index, and HEAD in a stack, allowing you to go back to that state later. With `git stash show`, you can inspect the changes made before applying them back. The command displays the stash message, if any, followed by the list of modified files, with their differences highlighted. This command is helpful when you want to have a closer look at the changes before deciding whether to apply them or not.'
    flag:
        "0": '[AI] `git stash show --zero` is a Git command used to view the contents of the most recent Git stash in a raw format, with the file differences represented as a series of hunks. The `--zero` option is not strictly necessary but is commonly used for easier merging or patch application using external tools like `patch`. This command displays only the raw changes without any commit message or metadata associated with the stash.'
        O: '[AI] `git stash show -O` is a Git command used to apply and then delete a stashed change set from the stash list. The `-O` option applies the changes from the most recent stash as if they were local modifications in the working directory, making it easier to review or interact with the changes before committing them. After applying the changes, the stash is deleted by default.'
        R: '[AI] `git stash show -R` is a Git command used to view the changes in the latest stashed state. The `-R` (recursive) option tells Git to show the changes for all files in the current repository, not just those in the working directory. This command allows you to inspect the differences between the current state and the last stash, which can be useful when deciding whether to apply or modify the stashed changes before applying them back to your working directory.'
        S: '[AI] `git stash show -S` is a Git command used to inspect the changes in the latest applied stash. The `-S` option stands for "show raw patch", which means that the output will be in the format of a series of hunks, representing the individual changed lines or chunks of code. This command allows developers to review the changes made before applying or modifying them further.'
        abbrev: '[AI] `git stash show --abbrev` is a Git command used to display the short (abbreviated) commit message of the latest stashed state. When you use `git stash`, it saves your current changes in a stack, allowing you to switch branches or make other adjustments without losing your work. This command retrieves the details of the most recent stash, specifically its commit message, enabling you to identify which changes were stashed.'
        anchored: '[AI] `git stash show --anchored` is a Git command used to view the differences between your working directory and the latest applied stash. The `--anchored` option ensures that the changes in the stash are presented as if they were checked out as new branches, making it easier to review and apply them. This command allows you to inspect the changes in a stash before deciding whether or not to apply them back to your working directory or create a new branch based on those changes.'
        base: '[AI] `git stash show --base` is a Git command used to display the differences between the current working directory and the most recent Git stash. The `--base` option shows the base commit, which is the state of the repository before applying the stashed changes. This command helps developers compare and understand what was stashed before applying it back to the working directory.'
        binary: '[AI] `git stash show --binary` is a Git command used to view the contents of the last stashed changes in binary format. The `git stash` command is used to save changes in a stack, allowing developers to switch branches or work on different tasks without committing their changes permanently. When you use `git stash show --binary`, it displays the raw binary data of the files that were added or modified in the most recent stash, making it useful for viewing and comparing the differences between the stashed changes and the current working directory or other branches.'
        break-rewrites: '[AI] `git stash show --break-rewrites` is a Git command used to view the changes in a stashed state without applying them to the working directory or the index. The `--break-rewrites` option is added to prevent Git from resolving any conflicts that might arise due to rewrites of commit histories. This allows you to examine the differences between your current working state and the stashed changes, helping you decide whether or not to apply them later.'
        cached: '[AI] `git stash show --cached` is a Git command used to view the changes that have been stashed but not yet applied. The `--cached` option shows only the differences between the current HEAD and the state of the files when they were stashed, without applying the changes. It provides a preview of what will be applied if you decide to use `git stash apply`. This command helps in reviewing the changes before deciding whether or not to keep them in your working directory.'
        check: '[AI] `git stash show --check` is a Git command used to inspect the changes in a stashed stack without applying them to the working directory or the commit history. The "--check" option is optional but recommended as it allows you to preview the changes without actually committing or losing your current work. By default, this command shows the differences between the files in the stash and the HEAD commit. If there are any conflicts, they will be highlighted for you to resolve before applying the stash.'
        color: '[AI] `git stash show --color` is a Git command used to view the changes in the most recent stash. The `--color` option enables colored output for easier identification of different types of hunks in the patch. When you run this command, Git will display the differences between your working directory and the changes that were stashed, allowing you to review them before applying or modifying the stash if needed.'
        color-moved: '[AI] The `git stash show --color-mixed` command is used to display the changes made in a git stash in a color-coded format. When you use the `--color-moved` option, Git will also highlight moved lines between files as part of a rename or move operation. This can be helpful for understanding the impact of the stashed changes on different files within your project.'
        color-moved-ws: '[AI] `git stash show --color-moved-ws` is a Git command used to inspect the changes in a stashed commit. The `--color-moved-ws` option enables Git to display moved and renamed files with color-coded diff context. In other words, it makes it easier to identify which files have been modified or renamed when applying a stash.'
        color-words: '[AI] `git stash show --color-words` is a Git command used to apply and inspect the changes in a stashed commit without applying them to the working directory or the current branch. The `--color-words` option enables Git to display branch names and other text with colored prefixes, making it easier to identify different elements in the output. The command displays the differences between the files in the stash and the working directory or the last committed state, allowing users to review the changes before deciding whether to apply them permanently.'
        compact-summary: '[AI] `git stash show --compact-summary` is a Git command used to view the summary of the most recent Git stash. The `--compact-summary` option formats the output in a compact way, displaying only the commit message and the list of modified files for each stashed change. This can be helpful when you want to quickly check what changes were stashed without opening a text editor or navigating through multiple pages of detailed information.'
        cumulative: '[AI] `git stash show --cumulative` is a Git command used to view the differences introduced by a stashed change, i.e., changes that were set aside with `git stash`, without applying it (applying the stash using `git stash apply`). The `--cumulative` option merges the changes in the order they were saved as a single patch, allowing users to see how their modifications have accumulated since the last commit. This command is particularly useful when working on multiple features or branches and wanting to review all the changes stashed before deciding which one to apply.'
        diff-algorithm: '[AI] `git stash show` is a command used to apply and inspect the changes in a Git stash. The `--diff-algorithm` option specifies which diff algorithm to use when showing the differences between the files in the stash and their current state in the working directory or the index. The default algorithm is "mine-ours", but there are other options like "normal" or "histogram" that can be used for better visualization of the changes. This option helps in customizing how you want to see the differences when applying a stash.'
        diff-filter: '[AI] `git stash show --diff-filter` is a Git command used to view the differences introduced by the latest stashed changes. The `--diff-filter` option allows specifying filters to include only specific types of changes in the output. For instance, `--diff-filter=ACM` will display the files with additions (A), changes (C), and deletions (D). This command helps review and apply stashed changes selectively before merging them into the working directory or another branch.'
        dirstat: '[AI] `git stash show --dirstat` is a Git command that displays the differences between the files in the working directory and those in the last applied stash. The `--dirstat` option generates a summary statistics about the changes in each subdirectory, showing the number of added, deleted, and modified files and bytes. This can be useful for understanding the impact of a stash on specific directories within a project.'
        dirstat-by-file: '[AI] `git stash show --dirstat-by-file` is a Git command used to inspect the differences between the working directory and the last committed state, as stored in a Git stash. The `--dirstat-by-file` option displays the differences in a summarized format for each file, showing the number of added, modified, and deleted bytes for each file under the given stash. This command helps identify which files have been changed since the last commit and provides an overview of the file-level changes within the stash.'
        dst-prefix: '[AI] `git stash show --dst-prefix` is a Git command used to view the changes that have been stashed using `git stash`. The `--dst-prefix` option prefixes the file names in the output with the name of the branch or working directory from which the stash was created. This helps in identifying the context of each stashed change when applying or examining them later.'
        exit-code: '[AI] `git stash show --exit-code` is a Git command used to apply and inspect the changes in the latest stashed commit without actually applying them to your working directory. The `--exit-code` option returns an exit status after the operation, allowing it to be used in shell scripts. If the stash has no changes, the exit status will be zero; otherwise, it will be one.'
        ext-diff: '[AI] `git stash show --ext-diff` is a Git command used to apply and inspect changes in a stashed commit without actually applying them to the working directory or the current branch. The `--ext-diff` option enables an external diff tool to display the differences between the current HEAD and the changes in the stash, allowing for a more detailed comparison. It''s particularly useful when dealing with complex changes that are best viewed through an external diff tool.'
        find-copies: '[AI] `git stash show --find-copies` is a Git command used to inspect the changes in a stashed state. The `--find-copies` option helps locate and compare multiple occurrences of the same file across different branches or commits, making it useful when dealing with merged or conflicting files within a project. By showing the differences between the various copies, you can easily decide which version to keep or discard for your next development step.'
        find-copies-harder: '[AI] `git stash show --find-copies-harder` is a Git command used to inspect the changes that were stashed using `git stash save`. This command, when used with `--find-copies-harder`, helps find and display the differences between all the copies of the files that have been modified or deleted in the current working directory and those that were stashed. It is particularly useful when there are renamed or moved files in the stash. The output provides information about the file paths, the changes made, and whether they have been copied or replaced.'
        find-object: '[AI] `git stash show --find-object` is a Git command used to display the object name (hash) of the latest stashed changes in the current Git repository. The `--find-object` option instructs Git to search for the object by its content instead of its hash, making it useful when dealing with lost or corrupted stashes. This command helps in applying or pushing stashed changes to other branches or repositories without having to apply and then unapply them first.'
        find-renames: '[AI] `git stash show --find-renames` is a Git command used to apply and inspect the changes in a stashed commit while also detecting and showing any file renames that occurred during the stash. This can be helpful when you want to understand what modifications were made before applying the stash to your current branch or working directory.'
        full-index: '[AI] `git stash show --full-index` is a Git command used to view the detailed difference between the current working directory and the index, as well as the changes that have been stashed. The "--full-index" option includes the full diff output in the stashing display. This command helps developers inspect the changes they''ve stashed before applying or modifying them. It is often used when wanting to understand the impact of a stash on the current project state before deciding whether to apply it back to the working directory.'
        function-context: |-
            [AI] The `git stash show --function-context` command is used to display the function context or the changed files in the most recent Git stash application. When you make modifications in your working directory and wish to save them for later use, you can apply those changes as a stash using `git stash`. Later, when you want to reapply those changes, you can do so by using `git stash apply`.

            However, sometimes it is useful to view the differences or context of the changes stored in a Git stash without applying them. The `--function-context` option with `git stash show` command helps in this regard. It displays the list of modified files along with their corresponding function signatures (if available) and changed lines, giving you a good understanding of what modifications were made in each file before deciding whether to apply the stash or not.
        histogram: '[AI] `git stash show --histogram` is a Git command used to display a histogram of the size and age of each stashed state in the current git stash. The histogram helps visualize how many and which stashes occupy the most space or are the oldest, making it easier to manage and selectively apply or drop specific stashes based on their size or age.'
        ignore-all-space: |-
            [AI] `git stash show --ignore-all-space` is a Git command used to view the changes in a stashed commit without treating white space differences as errors. When you use `git stash`, Git attempts to preserve the exact state of your working directory, index, and HEAD at the time of the stash. However, if there are white space differences between your working files and the files in the stashed commit, Git will display an error message when you try to view the changes with `git stash show`.

            To view the changes in a stashed commit with white space differences ignored, you can use the `--ignore-all-space` option. This tells Git not to consider differences in white space as errors and allows you to view the changes as if they were applied on top of your current working directory.
        ignore-blank-lines: '[AI] `git stash show` is a Git command used to examine the changes that have been stashed using `git stash`. The option `--ignore-blank-lines` is used to exclude blank lines when comparing files between the working directory and the stashed changes. This can be useful when dealing with files containing large blocks of blank lines or whitespace differences, as it helps to focus on the actual changes made in the code.'
        ignore-cr-at-eol: '[AI] `git stash show --ignore-cr-at-eol` is a Git command used to inspect the changes in a stashed commit. The `--ignore-cr-at-eol` option is specifically used to ignore carriage returns at the end of lines when comparing files between the working directory and the stashed state. This can be helpful when dealing with text files across different operating systems that may have different line ending styles (LF or CRLF). By ignoring these differences, you can get a more accurate view of the actual changes made in the stash.'
        ignore-space-at-eol: '[AI] `git stash show` is a command used to inspect the changes that have been stashed with Git. The option `--ignore-space-at-eol` is used to tell Git to ignore whitespace differences at the end of lines when comparing files between the working directory and the stashed changes. This can be useful when dealing with files that have different formatting styles but similar content. By using this option, you can view the changes made in a stash without being distracted by insignificant whitespace differences.'
        ignore-space-change: '[AI] `git stash show --ignore-space-at-eol` is a Git command used to view the changes that have been stashed but not yet applied. The `--ignore-space-change` option tells Git to ignore whitespace differences when comparing files between the working directory and the stashed version. This can be useful when dealing with files containing large amounts of text, such as code files, where automatic detection of whitespace changes might not be desirable.'
        ignore-submodules: '[AI] `git stash show --ignore-submodules` is a Git command used to view the changes that have been stashed using Git Stash without including the changes in any nested Git subrepositories or managed submodules. This command allows developers to review and selectively apply individual stashes while keeping their working directory free from submodule updates.'
        include-untracked: '[AI] `git stash show --include-untracked` is a Git command that displays the changes in the latest stashed state. The `--include-untracked` option makes Git include untracked files in the display, meaning files that are not under version control but were modified or added in the working directory at the time of stashing. This command helps you examine the state of your changes before applying them back to your working directory or branch.'
        indent-heuristic: '[AI] `git stash show --indent-heuristic` is a Git command used to apply and inspect the changes in a stashed commit without actually applying them to the working directory or the current branch. The `--indent-heuristic` option is an argument that adjusts the indentation of the hunks (logical units of changes) in the patch output to make it more readable, improving the user experience when reviewing complex stashes. This command does not affect the stash itself or modify the working directory. It''s merely a convenience tool for developers to review and decide whether to apply or discard the stashed changes based on their contents.'
        inter-hunk-context: '[AI] `git stash show --inter-hunk-context` is a Git command used to display the full context of all inter-hunk changes in the current stash. Inter-hunk changes refer to modifications made between two separate hunks or commits, which may not be visibly represented when using regular `git stash show` commands. This option provides a more detailed view of the stashed changes, including context that might span multiple hunks.'
        irreversible-delete: '[AI] `git stash show --irreversible-delete` is a Git command used to display the changes made in the last applied stash, but with an added option. The `--irreversible-delete` flag tells Git that the stashed changes should be permanently deleted after being shown. This means that once you have reviewed the changes in the stash and decided that you no longer need them, they will be removed from your stash list and cannot be retrieved again. Use this command with caution as the changes will be permanently lost.'
        ita-invisible-in-index: '[AI] The `git stash show --ita-invisible-in-index` command is used to display the differences between the working directory and the index, as well as between the index and the last committed state, of a Git stash. The `--ita-invisible-in-index` option makes Git hide changes that are tracked but not modified or deleted in the working directory, making it easier to focus on the differences in untracked files or modified tracked files. In other words, this command allows you to see what changes were stashed without seeing the changes in the tracked files that have not been modified since stashing.'
        l: '[AI] `git stash show -l` is a Git command used to view the list of applied and unapplied stashes in the current repository. The `-l` option stands for "list," which means it will display the stashes as a list instead of applying or popping them. Each entry in the list shows the stash ID, the message describing the changes made when the stash was created, and the number of new commits added to the stash. This command is helpful for keeping track of the available stashes and deciding which one to apply or drop if necessary.'
        line-prefix: '[AI] `git stash show --line-prefix` is a Git command used to inspect the changes that have been stashed using the `git stash` command. The `--line-prefix` option adds a prefix text before each hunk (a chunk of changes) in the diff output, making it easier to identify which parts of the stash correspond to which files or contexts in your project.'
        minimal: '[AI] `git stash show --mininal` is a Git command used to view the changes in the most recent stash without applying them to the working directory or the index. The `--minimal` option only displays the differences between the files in the current state and those in the stash, excluding the commit message and other metadata. It''s helpful when you want to review the changes before deciding whether or not to apply the stash back to your working directory.'
        name-only: '[AI] `git stash show --name-only` is a Git command that lists the names of the stashed changes without applying them. In other words, it provides a list of the stash messages or descriptive names assigned to each stash, helping users identify and selectively apply specific stashes if needed.'
        name-status: '[AI] `git stash show --name-status` is a Git command used to apply and display the changes in a stashed stack, showing the names of the files that have been modified or deleted in each stash. This can help users understand the changes made before applying the stash permanently. The output shows a list of stashes with their unique IDs and the affected files under each stash.'
        no-color: '[AI] `git stash show --no-color` is a Git command used to view the changes in the latest stashed state without any color representation. It displays the differences between the working directory and the stashed index, helping users understand what was stashed before applying or deleting it.'
        no-color-moved: '[AI] `git stash show --no-color` is a Git command used to inspect the changes in a stashed state without any color output. The `--no-color-moved` option further disables the moving of the pointer during the stash apply operation, allowing you to review the differences between your working directory and the staged/stashed changes without affecting your current branch. This command is useful for carefully examining the stashed content before deciding whether or not to apply it to your working branch.'
        no-color-moved-ws: '[AI] The `git stash show --no-color` command is used to view the changes in the most recent Git stash without applying them to the working directory or the index. The `--no-color` option disables the use of color in the output, and the `--moved-ws` option (which was omitted from your command) is used to show file renames and moves as a series of deletions and additions instead of as renamings. By combining these options, the command will display the differences between files as if they had been added or deleted rather than moved.'
        no-ext-diff: '[AI] `git stash show --no-ext-diff` is a Git command used to view the changes in the latest stashed state without applying them to the working directory or the files. The `--no-ext-diff` option disables the external diff merging tool and displays the differences using Git''s internal diff format instead. This can be useful when you want to inspect the stashed changes carefully before deciding whether to apply or modify them.'
        no-indent-heuristic: |-
            [AI] The `git stash show --no-indent-heuristic` command is used to display the contents of a Git stash, which is a way to save your current changes without committing them, and apply them later.

            The `--no-indent-heuristic` option disables Git's automatic indentation adjustment when showing the differences between files. This can be useful when reviewing large or complex stashes with specific formatting requirements. The output will display the changes in their original context, including any leading whitespace and indentation, making it easier to understand and apply them later.
        no-index: '[AI] `git stash show --no-index` is a Git command used to view the contents of the last applied stash without applying it or updating the working directory. The `--no-index` option prevents Git from considering the current HEAD as part of the commit history when displaying the stash, allowing you to examine its contents in isolation.'
        no-patch: '[AI] `git stash show --no-patch` is a Git command used to view the changes in the last applied stash without showing the patch diff. This means that you can inspect the state of your working directory, index, and HEAD before applying the stash, helping you review the changes before committing or resolving conflicts.'
        no-prefix: '[AI] The `git stash show --no-prefix` command is used to display the contents of the latest stashed changes in Git, but without including the prefix "Stashed branch ''...''". This means that only the differences between the files in the stash will be shown, without any identifying information about the stash itself. It''s useful when you want to carefully review the changes in a stash before applying them back to your working directory or creating a new branch.'
        no-rename-empty: '[AI] `git stash show --no-rename-empty` is a Git command used to inspect the changes in a stashed commit without applying them to the working directory or current branch. The `--no-rename-empty` option prevents empty rename directories from being displayed as renamed files. This can be useful when you want to examine the differences between the stashed and current states of your project, without affecting the ongoing work.'
        no-renames: '[AI] `git stash show --no-renames` is a Git command used to inspect the changes that have been stashed using `git stash`. The `--no-renames` option disables the renaming detection and keeps track of file renames as separate commits in the stash. This means that if any files were renamed during the staging process, Git will show them as deleted in the old location and created in the new one, allowing for a more fine-grained control over the stashed changes before applying them to the working directory or another branch.'
        numstat: '[AI] `git stash show --numstat` is a Git command used to display a summary of file changes in each stash entry. The `--numstat` option outputs this information in a numeric format, with columns showing the file name, number of added and deleted lines, and file mode. It provides a quick overview of the changes in a given stash without applying it or opening the full diff.'
        only-untracked: '[AI] The `git stash show --only-untracked` command is used to view the differences between the files in your working directory that are not yet tracked by Git, and the versions of those files that were included in the latest Git stash. This can be helpful when you want to inspect the changes made to untracked files before applying a stash.'
        ours: '[AI] `git stash show --ours` is a Git command used to view the differences between the working directory and the changes that were stashed using `git stash save`. The `--ours` option shows only the differences from the working directory, allowing users to inspect and apply those changes manually before resolving conflicts or committing them. This can be useful when dealing with complex merge conflicts or when wanting to keep certain changes from a stash in isolation for further review.'
        output: '[AI] `git stash show` is a Git command used to view the changes in a stashed stack. The `--output` option specifies that the output of this command should be written to a file instead of being printed on the terminal. This can be useful when automating Git tasks or for further processing the stashed data in other tools. In summary, `git stash show --output <file>` retrieves and writes the content of the latest stash to the specified file.'
        output-indicator-context: '[AI] `git stash show` is a command used to inspect the changes that have been stashed with Git. The option `--output-indicator-context` is used to include the context (i.e., the branch or commit message) of each stash indicator in the output. This can be useful when working with multiple stashes and needing to identify which stash corresponds to a particular branch or commit message.'
        output-indicator-new: '[AI] `git stash show --output-indicator-new` is a Git command used to apply and display the changes in the latest stashed state. The "--output-indicator-new" option adds a newline character after each hunk (a change set) in the output, making it easier to distinguish between different hunks when reviewing the changes. The command first applies the latest stash using `git stash apply`, then displays the differences using `git diff --cached`.'
        output-indicator-old: '[AI] `git stash show` is a command used to view the changes that have been stashed in Git. The `--output-indicator-old` option is an additional argument that can be passed to modify the output format. Specifically, it tells Git to append a label "OLD [" and "]" around the hash of the branch or commit that was current when the stash was created. This helps distinguish which branch the changes came from when applying the stash later.'
        patch: '[AI] `git stash show --patch` is a Git command used to view the changes made in the latest stashed commit without applying them to your working directory or current branch. The `--patch` option displays the differences between the files in the stash and their respective branches using the diff patch format. This command allows you to review the changes before deciding whether to apply them back to your workspace or create a new branch to keep those modifications.'
        patch-with-raw: |-
            [AI] `git stash show --patch-with-raw` is a Git command used to apply and inspect the changes in a stashed commit without actually applying them to the working directory or current branch. The `--patch-with-raw` option displays the patch in raw format, which can be useful when reviewing complex changes or when using external tools for further processing.

            When you run this command, Git applies the most recent stash (by default) and shows the difference between the current branch's HEAD and the state of the files in that stash as a raw patch file. This allows you to inspect the changes without affecting your current work or making any commitments to those changes yet.
        patch-with-stat: '[AI] `git stash show --patch-with-stat` is a Git command used to apply and inspect the changes in a stashed commit. The `--patch-with-stat` option displays each hunk (a piece of a file that has been modified) alongside its corresponding file status (added, modified, or deleted). This allows for reviewing the differences between the current state and the changes in the stash before applying them permanently to the working directory.'
        patience: '[AI] `git stash show --patience` is a Git command used to inspect the changes that have been stashed using `git stash`. The `--patience` option makes the output more human-readable by presenting the changes in a patch format, with context and empty lines between related hunks. This helps to distinguish between different files and changes within a stash. When you run this command, Git will display the changes that were stashed, allowing you to review them before applying them back to your working directory or creating a new branch.'
        pickaxe-all: '[AI] `git stash show --pickaxe-all` is a Git command used to apply the changes introduced in the latest stashed commit(s) and present them as if they were made on the current branch''s working directory, ready for further modification or committing. The `--pickaxe-all` option shows each file with its changes staged for a possible commit. This command does not create a new commit; it simply applies the changes for further processing.'
        pickaxe-regex: '[AI] The `git stash show --pickaxe-regex` command is used to apply a specific patch from a git stash using a regular expression for pattern matching. The command first displays the contents of the stashed change with `git stash show`, and then applies the patch that matches the provided regular expression using `--pickaxe-regex`. This can be useful when you want to selectively apply parts of a stash to your current branch without applying all changes.'
        raw: '[AI] `git stash show --raw` is a Git command used to view the raw contents of the latest applied stash. The "--raw" option instructs Git to output the file differences in raw format, which is useful for manually inspecting and applying changes outside of Git. This command does not modify your working directory or create new commits. Instead, it displays the stashed files'' differences so that you can review them before deciding whether to apply, discard, or modify them.'
        relative,: '[AI] The `git stash show --relative` command displays the changes made in the last applied stash, showing the differences between the working directory and the state of files at the time the stash was created. It allows you to review the changes before applying them back to your working branch.'
        rename-empty: '[AI] `git stash show --rename-empty` is a Git command used to apply a stashed change and create a new branch with the same name as the current branch if it exists. If the branch already has changes, it will be renamed with a suffix "_old" by default. This can be useful when you want to apply a stash on a branch but keep track of the current state of the branch before applying the change. The `--rename-empty` flag ensures that Git creates a new empty branch if the target branch is currently empty, preventing any conflicts or errors.'
        shortstat: '[AI] `git stash show --shortstat` is a Git command used to display a summary of changes made in the most recent Git stash. The `--shortstat` option presents the commit message, author name and email, and the number of added and deleted lines for each file involved in the stash. It provides a quick overview of the changes without showing the full diff or context of each file.'
        src-prefix: '[AI] `git stash show --src-prefix` is a Git command used to inspect the changes that have been stashed using `git stash`. The `--src-prefix` option displays the differences between the files in their stashed state and the current working directory with a prefix that indicates which stash the changes came from. This can be helpful when you want to see what changes were stashed without applying them to your current branch.'
        stat: '[AI] `git stash show --stat` is a Git command used to view the differences between the working directory and the state of files saved in a Git stash. The `--stat` option displays the file modifications in a diff-style statistics output, showing which files have been added, modified, or deleted in the stash. It provides an overview of changes without displaying the full diff content.'
        stat-count: '[AI] `git stash show --stat-count` is a Git command used to apply and display the differences between the working directory and the latest applied stash. The `--stat-count` option provides a summary of how many added, modified, and deleted files are in the stash instead of showing the detailed diff output. This command can help you review the changes in a stash before applying them permanently to your working branch or creating a new commit.'
        stat-graph-width: '[AI] `git stash show --stat-graph-width` is a Git command used to apply and inspect the changes in a Git stash while displaying a statistical graph of file modifications with a specified width. When you run this command, Git will first apply the stash and then display a diffstat output where each line represents a file modification and its corresponding changes. The `--stat-graph-width` option sets the maximum width for the statistical part of the diffstat output (i.e., the columns showing additions, deletions, and context lines). This can be useful when working with large files or when you want to review the graph representation in a more compact format.'
        stat-name-width: '[AI] `git stash show --stat-name-width` is a Git command used to inspect the changes in a stashed commit without applying it. The `--stat-name-width` option sets the maximum width for stat names in the output, making them easier to read when they appear wrapped in long filenames. This can be useful when reviewing changes between branches or commits with lengthy file paths.'
        stat-width: '[AI] `git stash show --stat-width` is a Git command used to view the differences between the current working directory and the latest applied stash. The `--stat-width` option sets the maximum width of the statistics (differences) output to 80 columns by default, which can be adjusted if needed. This command helps in reviewing changes before applying or discarding a stashed state.'
        submodule: |-
            [AI] `git stash show --submodule` is a Git command used to inspect the changes in a stashed Git submodule. When you use `git stash save` or `git stash push` with submodules, Git saves not only the changes in your main project but also any modifications to the submodule's Git history.

            By running `git stash show --submodule`, you can view the details of those stashed submodule commits and see what specific changes were stashed for each submodule. This command displays a summary of the submodules' stashed states, including their current HEAD commits, the stashed commits, and any differences between them. It does not apply or modify any submodule commit; it only shows you the information.
        summary: '[AI] `git stash show --summary` is a Git command used to view the list of changes that have been stashed using `git stash`. The `--summary` option displays each stash message, along with the number of changes in the stash and a brief summary of what was staged for each change. This command allows you to review the state of your stashes before applying them back to your working directory or branch.'
        text: '[AI] `git stash show --text` is a Git command used to view the contents of the latest stashed changes as raw text. It does not apply or modify the working directory, but instead displays the differences between the current HEAD and the changes that were stashed using `git stash`. This can be helpful for reviewing the changes before applying them or sharing them with others.'
        textconv: '[AI] `git stash show --textconv` is a Git command used to apply and view the changes in a Git stash as if they were applied to the working directory, but without actually applying them. The `--textconv` option invokes a text filter to convert the files in the stash from their saved format back into editable form before displaying them. This can be useful when you want to review or modify the changes in a stash before applying them to your working directory or creating a new branch.'
        theirs: '[AI] `git stash show --theirs` is a Git command used to apply and inspect changes introduced by a previous Git stash application with the `--apply` or `--apply-index` option, but instead of applying your changes, it applies the changes from the other party involved in a merge conflict resolution. The `--theirs` option tells Git to apply only their changes, leaving yours untouched. This can be useful when resolving conflicts during a merging process or when working on branches with multiple developers.'
        u: '[AI] `git stash show -u` is a Git command used to inspect the changes in a stashed stack (stash). The `-u` option stands for "unified" format and displays the differences between the working directory, the index, and the changes in the stash as a unified diff. This can be helpful when reviewing the changes before applying them back to the working branch.'
        unified: '[AI] `git stash show --unified` is a Git command used to view the differences between the current working directory and the state of files in the latest applied stash. The `--unified` option displays the differences in an unified diff format, which is a common way to represent changes between two versions of a file in the textual form. This command helps developers compare and review the changes they have stashed before applying or discarding them.'
        word-diff: '[AI] `git stash show` is a Git command used to apply and inspect the changes in a stashed commit. The `--word-diff` option is an optional argument that displays a word diff when there are differences between files in the stash and the working directory or the index. In other words, it highlights only the changed words instead of the entire lines during the file comparison. This can be useful when dealing with smaller textual changes without having to look at the context of the entire line.'
        word-diff-regex: '[AI] `git stash show` is a Git command used to apply and inspect changes that have been previously stashed using `git stash`. The `--word-diff-regex` option is an argument that enables word-diff mode with regular expression syntax for displaying differences between files. When used together, `git stash show --word-diff-regex` will present the changes in a stash as a series of diff output where each replaced text matches a given regex pattern. This can be useful when reviewing complex or numerous changes made to multiple files within a stash.'
        ws-error-highlight: '[AI] `git stash show --ws-error-highlight` is a Git command used to apply and display the changes in the latest stashed state on the index and the working directory. The `--ws-error-highlight` option enables syntax highlighting for conflict markers in the file diff output, making it easier to identify and resolve any conflicts between the stashed changes and the current branch. This command does not modify the repository; it only shows the differences.'
        z: '[AI] `git stash show --zeroderefs` is a Git command used to inspect the changes in the most recent stashed state without applying them. The "--zeroderefs" option ensures that the command does not create any new branches or commits when displaying the stashed changes. This command is useful when you want to carefully examine the differences between your current working directory and the last stash, without applying the stash yet.'
