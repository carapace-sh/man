# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: outdated
description: Check for outdated packages
group: review
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects
    --color: Controls colors in the output
    --compatible: Print only versions that satisfy specs in package.json
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --global-dir: Specify a custom directory to store global packages
    --loglevel=: What level of logs to report
    --long: By default, details about the outdated packages
    --no-color: Controls colors in the output
    --no-optional: Don't check "optionalDependencies"
    --no-table: Prints the outdated packages in a list
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -D, --dev: Check only "devDependencies"
    -P, --prod: Check only "dependencies" and "optionalDependencies"
    -h, --help: Output usage information
    -r, --recursive: Check for outdated dependencies in every package found in subdirectories
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm outdated` is a command provided by PnPM, an alternative package manager to npm. It is used to list outdated packages in the project''s dependency tree along with their latest versions. The output includes the package name, current version, and latest version available. This information can help developers keep their projects up-to-date and ensure they are using the latest and most secure dependencies.'
    flag:
        aggregate-output: '[AI] `pnpm outdated --aggregate-output` is a command used with the Package Manager for Node.js projects, PnPM. This command checks for outdated packages in your project and generates an aggregated output in a single file instead of printing it directly to the console. The output file can be used for further processing or analysis, making it easier to manage and review package updates across multiple projects or large-scale applications.'
        changed-files-ignore-pattern: '[AI] `pnpm outdated --changed-files-ignore-pattern` is a command used with pnpm, a package manager for Node.js projects. This command displays a list of packages with updated versions available in the project''s lockfile, but excludes packages whose file changes are matched by the provided pattern. The `--changed-files-ignore-pattern` option takes a regular expression as an argument to filter out packages that did not change files during the update process. This can be useful for reducing the noise of the output and focusing on packages with actual file changes.'
        color: '[AI] `pnpm outdated --color` is a command used with the package manager PnPM (an alternative to npm and yarn). The command checks for packages in your project with newer available versions in the registry and displays the output with colors, making it easier to identify which packages need an update.'
        compatible: '[AI] `pnpm outdated --compatible` is a command used with the package manager, pnpm. It checks for packages in the project''s dependencies tree that have newer versions available, but only displays the ones with compatible versions, meaning those that are backward-compatible with other dependencies or the current project version. This helps maintain a stable project environment and minimize potential issues from major version upgrades.'
        dev: '[AI] `pnpm outdated --dev` is a command used with the Package Manager for Node.js projects called pnpm. This command checks for updated versions of the devDependencies listed in the package.json file, and displays any packages that have newer versions available along with their suggested updates. It helps keep the development dependencies up-to-date to leverage new features or bug fixes.'
        dir: '[AI] `pnpm outdated --dir` is a command used with npm package manager, specifically its faster alternative pnpm. This command is used to list outdated packages in the current project directory along with their updated versions. The output includes the package name, current version, and new version, as well as the location of the package in the project (if specified with `--dir` option). This can help developers keep their projects up-to-date with the latest package versions.'
        filter: '[AI] `pnpm outdated` is a command used with the package manager PnPM to check for packages with newer versions available in the project''s dependencies. The `--filter` option filters the output of this command based on a specified criterion. For example, using `--filter=<dependency-name>` will only display outdated versions related to that dependency. Using `--filter=<dev|optional>` will filter by dev or optional dependencies, respectively. The output will list packages with newer versions and the differences between them and the current version.'
        filter-prod: '[AI] `pnpm outdated` is a command provided by PnPM, a package manager for JavaScript projects. The `--filter-prod` option filters the output to only show packages with production dependencies that have new versions available. It helps keep production environments up-to-date and ensures that you''re using the latest patches and security fixes in your production codebase.'
        global-dir: '[AI] `pnpm outdated --global-dir` is a command used with the package manager PnPM (Parallel NPM). It searches for outdated globally installed packages in the specified directory, which by default is the system-wide installation location. The output shows the name, version, and new version of each outdated package. This command helps keep your global dependencies up to date.'
        help: |-
            [AI] `pnpm outdated --help` is a command used in the PnPM package manager for checking which packages in your project have newer versions available than what's currently installed. The `--help` option provides detailed information about how to use this command effectively, including the following arguments:

            - `<directory>`: The directory of the project or workspace to check for outdated dependencies. By default, it assumes you're running the command in the root of your project.
            - `--depth`: Controls how deep into subdirectories PnPM should search for packages to check. Use a number to specify the depth level.
            - `--filter`: Filter which packages (or package types) to include or exclude from the report.
            - `--quiet` or `--no-git`: Suppress output of Git information, such as commits and authors, when checking for updates.
            - `--store`: Specify a different PnPM store file path if you're not using the default one.

            Running `pnpm outdated --help` will display more detailed usage instructions and options to help you effectively manage your project's dependencies with PnPM.
        loglevel: '[AI] `pnpm outdated --loglevel` is a command used with PnPM, a package manager for JavaScript projects. The `outdated` sub-command checks for outdated dependencies in your project and displays the information about them. The `--loglevel` option sets the logging level to control the amount and detail of output. Possible levels are "error", "warning", "info", "verbose" or "silent". By default, PnPM uses "info" level. Using `pnpm outdated --loglevel verbose`, for example, will display more detailed information about each outdated dependency.'
        long: '[AI] `pnpm outdated --long` is a command used with the Package Manager for Node.js projects called pnpm. This command displays an extensive list of packages and their current versions along with the available updates and the new version numbers. The `--long` flag enhances the output by providing detailed information including the package name, the current version, the latest version available, and the location of the package in the project''s node_modules directory. This command assists developers in keeping their project dependencies up-to-date and informed about any potential updates or changes to the packages they use.'
        no-color: '[AI] `pnpm outdated --no-color` is a command used with the npm package manager alternative, pnpm. This command checks for packages in the project''s dependency tree that have newer versions available than currently installed. The `--no-color` flag disables colored output in the terminal.'
        no-optional: '[AI] `pnpm outdated --no-optional` is a command used with pnpm, a package manager for Node.js projects. This specific command checks for packages in the project''s dependencies and devDependencies that have newer versions available but does not output information about optional dependencies. The `--no-optional` flag filters the output to only show updates related to required dependencies.'
        no-table: '[AI] `pnpm outdated --no-table` is a command used with PnPM, a package manager for JavaScript projects. This command checks for outdated packages in your project and lists the ones that have newer versions available. However, the `--no-table` flag is used to suppress the display of the output in a table format. Instead, only the names of the outdated packages will be listed, making the output more succinct.'
        prod: '[AI] `pnpm outdated --prod` is a command used with the package manager PnPM (Parallel NPM). It checks for outdated production dependencies in your project and lists packages that have newer versions available, which can improve your application''s performance or security. This command only shows the relevant packages for production environments, filtering out development dependencies to keep the output focused.'
        recursive: '[AI] `pnpm outdated --recursive` is a command used with the package manager PnPM (Partitioned Node Package Manager). This command checks for outdated dependencies across an entire project tree, including subdirectories and linked packages. The `--recursive` flag ensures that all outdated dependencies are identified, regardless of their location within the project structure. It reports the available updates without installing them, allowing developers to review and selectively update packages according to their needs.'
        stream: '[AI] `pnpm outdated --stream` is a command provided by pnpm, a package manager for Node.js projects. This command displays real-time updates available for your project''s dependencies in the terminal stream as they are fetched from the registry. It helps developers keep their projects updated with the latest versions of their dependencies without having to manually check for updates or run individual `pnpm install` commands for each package.'
        test-pattern: '[AI] `pnpm outdated --test-pattern` is a command used with the package manager, pnpm. It reports on packages in your project that have available updates which match the given test pattern for their file or directory names. The tests are executed as part of checking if the new version of the package is compatible and doesn''t introduce any regressions. This can help keep your project up-to-date with the latest dependencies while minimizing potential introduction of bugs.'
        use-stderr: '[AI] `pnpm outdated --use-stderr` is a command used in the package manager, pnpm. This command checks for outdated dependencies in your project and lists them on the standard error stream instead of creating an output file. By using `--use-stderr`, you can see the list of packages that need updating directly in the terminal without having to search for an output file.'
        workspace-root: '[AI] `pnpm outdated --workspace-root` is a command used with the package manager PnPM to check for outdated packages across multiple projects in a workspace. The `--workspace-root` option specifies the root directory of the multi-package project. The command outputs a list of packages that have newer versions available, along with their current and desired version numbers. Using this command helps keep dependencies up-to-date and maintain a healthy project ecosystem.'
