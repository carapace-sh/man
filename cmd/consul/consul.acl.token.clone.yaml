# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clone
description: Clone an ACL token
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --description=: A description of the new cloned token
    --format=: Output format.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --id=: The Accessor ID of the token to clone.
    --namespace=: Specifies the namespace to query.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
documentation:
    command: '[AI] `consul acl token clone` is a command used in Hashicorp Consul, an open-source distributed config management, service registry, and key value store platform. This command allows you to create a new ACL (Access Control List) token by cloning the permissions of an existing one. It helps in managing access control within Consul by creating new tokens with similar access levels as existing ones without having to specify all permissions individually each time.'
    flag:
        ca-file: |-
            [AI] The `consul acl token clone --ca-file` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command is for creating a new Access Control List (ACL) token based on an existing one, while providing a custom CA file for the SSL certificate verification during the API communication.

            Here's a brief explanation of each part:

            1. `consul`: It refers to the Consul CLI tool used to interact with the Consul service.
            2. `acl`: Access Control List is a feature in Consul that provides fine-grained access control for its services, keys, and other resources.
            3. `token clone`: The command "clones" an existing ACL token, creating a new one with the same permissions as the original.
            4. `--ca-file`: This flag indicates that a custom CA file (Certification Authority) is provided to validate the SSL certificates of the Consul servers during API communication. This ensures secure communication between your client and the Consul servers.
        ca-path: '[AI] The `consul acl token clone --ca-path` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command is used to create a new ACL (Access Control List) token by cloning an existing one, while specifying the path to the custom CA (Certificate Authority) certificates. The CA certificates are required for secure communication between Consul servers in a multi-datacenter setup or when using self-signed certificates. By providing the `--ca-path` option, users can specify the location of their custom CA certificates during token creation.'
        client-cert: '[AI] The `consul acl token clone --client-cert` command is used in the Consul access control list (ACL) system to create a new ACL token with the same permissions as an existing one, while also cloning the associated client certificate. This allows you to have multiple tokens with identical access controls and the same certificate for secure communication between your applications and the Consul service.'
        client-key: |-
            [AI] The `consul acl token clone --client-key` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command allows creating a new ACL (Access Control List) token with the same permissions as an existing one, using the specified client key.

            In simpler terms, it creates a duplicate of an existing ACL token's access control permissions. It is often used for creating multiple identical tokens for different clients or services while managing access to Consul resources.
        datacenter: '[AI] The `consul acl token clone --datacenter` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command allows creating a new Access Control List (ACL) token with the same permissions as an existing one, but in a different datacenter. When executing this command, you provide the token ID of the source token. The `--datacenter` flag specifies the name or ID of the destination datacenter where the cloned token will be created. This command helps manage access control across multiple datacenters in a Consul setup.'
        description: |-
            [AI] The `consul acl token clone` command is used in Hashicorp Consul, an open-source distributed computing platform. This command allows creating a new Access Control List (ACL) token by cloning the permissions from an existing one.

            The option `--description` is used to provide a descriptive name or label for the newly created token. It's helpful in managing and organizing multiple tokens within the Consul environment.
        format: |-
            [AI] `consul acl token clone --format` is a command used with Hashicorp's Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command is for managing Access Control Lists (ACLs) in Consul.

            The `clone` subcommand creates a new ACL token based on an existing one, while `--format` option is used to specify the output format of the command. The flag accepts different formats like "json", "hcl", or "table" that can be used to customize the displayed data. By using this command with a specific format, you get the output tailored for your use case, making it easier to consume and process the information within other scripts or tools.
        http-addr: |-
            [AI] The `consul acl token clone --http-addr` is a command used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command is specifically related to Access Control Lists (ACL) in Consul.

            The command is used to create a new ACL token by cloning an existing one. The `--http-addr` flag specifies the Consul HTTP interface endpoint address where this operation should be executed. It's important to ensure that the address provided is accessible and secure for the execution of this command. This command helps in managing access control in a Consul environment, allowing you to create new tokens with the same permissions as existing ones without having to manually define each permission.
        id: '[AI] The `consul acl token clone --id` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command clones an Access Control List (ACL) token by providing its unique ID as an argument. The result is a new token with the same permissions as the original one. It''s often used to create backups or share access across teams while maintaining fine-grained access control.'
        namespace: |-
            [AI] The `consul acl token clone --namespace` command is used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This command is specific to the Access Control List (ACL) feature of Consul, which allows managing access rules for different resources.

            The `clone` subcommand creates a new ACL token with the same permissions as an existing one but in a different namespace. The `--namespace` flag specifies the destination namespace for the new token. This command is useful when you need to apply the same access policies across multiple namespaces while keeping their scopes isolated.
        stale: |-
            [AI] The `consul acl token clone --stale` command is used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This command is specifically related to Access Control Lists (ACLs) and cloning tokens.

            The `--stale` flag indicates that an expired or revoked token should be cloned. This means that the command will create a new token based on the permissions of an existing token, even if that token has been marked as invalid due to expiration or revocation. By using the `--stale` flag, you can obtain a new token with the same access permissions as an old token, without having to update your applications or configurations immediately.

            Overall, this command is helpful in scenarios where you need to maintain backward compatibility with older tokens, such as during upgrades or when working with legacy systems that still rely on specific tokens for access. However, it's important to note that using stale tokens should be done with caution and only when necessary, as they may not have the latest security updates applied and could potentially pose a security risk if intercepted by unauthorized users.
        tls-server-name: |-
            [AI] The `consul acl token clone --tls-server-name` command is used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This command is specific to the Access Control List (ACL) feature of Consul.

            The purpose of this command is to create a new ACL token by cloning an existing one, while also specifying a TLS server name. The `--tls-server-name` flag allows users to set a custom name for the TLS server that the token will connect to. This can be useful in environments where multiple Consul servers are deployed and each has its own unique TLS certificate. By providing the correct server name, clients can ensure they connect to the intended server and authenticate with the correct token.
        token: '[AI] The `consul acl token clone --token` command is used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This command allows you to create a new Access Control List (ACL) token by cloning an existing one using the specified token as an argument. The new token will have the same permissions as the original token.'
        token-file: |-
            [AI] The `consul acl token clone --token-file` command is used in Hashicorp Consul, an open-source distributed config and orchestration tool. This command is employed to create a new Access Control List (ACL) token by cloning an existing one from a file.

            The `--token-file` option specifies the path to the file containing the existing ACL token. Consul will read this token, and use it as the basis for creating a new token with the same access controls. This can be useful when you want to create a similar token but don't want to manually configure its permissions from scratch.

            The resulting new token is saved in the standard output, ready to be used or further processed by other tools.
