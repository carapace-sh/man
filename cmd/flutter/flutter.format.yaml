# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: format
description: Idiomatically format Dart source code
flags:
    --fix: Apply all style fixes.
    --set-exit-if-changed: Return exit code 1 if there are any formatting changes.
    -h, --help: Print this usage information.
    -l, --line-length=: Wrap lines longer than this.
    -o, --output=: Set where to write formatted output.
    -v, --verbose: Show all options and flags with --help.
documentation:
    command: '[AI] `flutter format` is a command-line tool provided by Flutter, a mobile application development framework, that automatically applies a consistent coding style across an entire project or a specific Dart file. It uses the built-in dartfmt tool to ensure code formatting conforms to the recommended guidelines for readability and maintainability. This command helps developers keep their projects consistent and adhering to the Flutter community''s best practices, simplifying collaboration and code review.'
    flag:
        fix: '[AI] `flutter format --fix` is a command used in Flutter development to automatically apply the coding styles defined in the `dartfmt` configuration file to all `.dart` files in the current project. The `--fix` option enables the automatic correction of formatting errors on the fly, ensuring code consistency and readability throughout your project.'
        help: |-
            [AI] `flutter format --help` is a command used in Flutter development to display information about the `flutter format` tool. This tool is designed to automatically apply a consistent code style across your project, improving readability and maintaining consistency.

            When you run `--help` with this command, it provides detailed information about how to use the tool effectively. It explains options such as `--set-exit-if-external-errors`, which can be used to prevent the build process from continuing if there are formatting errors in files outside of your project. It also discusses other flags like `--diff` and `--dry-run`, which allow you to see the changes that would be made without actually applying them. Overall, using `--help` with `flutter format` ensures that you understand how to use the tool efficiently while formatting your Flutter project's codebase.
        line-length: '[AI] `flutter format --line-length` is a command used to reformat Dart code with enforced line lengths. It''s part of the Flutter development toolset, and it helps maintain consistent coding styles in your project. By default, the maximum line length is 80 characters, but this can be changed by using the `--line-length` option followed by the desired number of characters. This command aims to improve code readability and consistency across files within a Flutter application.'
        output: '[AI] The `flutter format` command is a tool provided by the Flutter framework for enforcing a consistent code style across a project. The `--output` option specifies where to save the formatted files. By default, it overwrites the original files in place, but using `--output <path>` will save the results to the specified output directory instead. This can be useful for running format on multiple directories or keeping a backup of the original files.'
        set-exit-if-changed: '[AI] `flutter format --set-exit-if-changed` is a command used in Flutter development to automatically format the codebase using Dart''s `dartfmt` tool. The `--set-exit-if-changed` option tells the command to only apply formatting if no changes are detected, and to exit with an error code if any modifications were made. This helps ensure that your codebase remains consistent by preventing unintentional format changes.'
        verbose: '[AI] `flutter format --verbose` is a command used in Flutter development to apply automatic code formatting on Dart files within the current project. The `--verbose` option increases the output of the command, providing detailed information about which files are being processed and any formatting rules that are applied during the formatting process. This can be helpful for understanding the formatting changes made to your codebase.'
