# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: diff-files
description: Compares files in the working tree and the index
group: low-level interrogator
flags:
    --abbrev-commit: Show a prefix that names the object uniquely
    --abbrev=: show only a partial prefix
    --after=: Show commits more recent than a specific date
    --all: Pretend as if all the refs in refs/ are listed on the command line
    --all-match: Limit output to ones matching all given --grep
    --alternate-refs: Pretend as if all alternate ref tips are listed on the command line
    --ancestry-path?: Only display commits in that range that are ancestors of <commit>, descendants of <commit>, or <commit> itself
    --anchored=: Generate a diff using the "anchored diff" algorithm
    --author-date-order: Show commits in the author timestamp order
    --author=: Limit output to ones with matching author header
    --basic-regexp: Consider the limiting patterns to be basic regular expressions
    --before=: Show commits older than a specific date.
    --binary: output a binary diff
    --bisect: Limit output to the one commit object which is roughly halfway between included and excluded commits
    --bisect-all: This outputs all the commit objects between the included and excluded commits
    --bisect-vars: This calculates the same as --bisect, except that refs in refs/bisect/ are not used
    --boundary: Output excluded boundary commits
    --branches?: Pretend as if all the refs in refs/heads are listed on the command line
    --cached: View the changes you staged in the index/cache
    --check: Warn if changes introduce conflict markers or whitespace errors
    --cherry: A synonym for --right-only --cherry-mark --no-merges
    --cherry-mark: Like --cherry-pick but mark commits rather than omitting them
    --cherry-pick: Omit any commit that introduces the same change as another commit
    --children: Print also the children of the commit
    --color-moved-ws?: This configures how whitespace is ignored when performing the move detection
    --color-moved?: Moved lines of code are colored differently
    --color-words=: Equivalent to --word-diff=color plus (if a regex was specified)
    --color=: Show colored diff
    --commit-header: Overrides a previous --no-commit-header
    --committer=: Limit output to ones with matching committer header
    --compact-summary: Output a condensed summary of extended header information
    --count: Only print a number stating how many commits would have been listed
    --cumulative: Synonym for --dirstat=cumulative
    --date-order: Show commits in the commit timestamp order
    --date=: Date format
    --default: Use argument as default revision
    --default-prefix: Use the default source and destination prefixes
    --dense: Only the selected commits are shown, plus some to have a meaningful history
    --diff-algorithm=: ""
    --diff-filter=: filter files
    --dirstat-by-file=: Synonym for --dirstat=files,param1,param2...
    --disk-usage?: Suppress normal output and print disk usage
    --do-walk: Overrides a previous --no-walk
    --dst-prefix=: Show the given destination prefix instead of "b/"
    --early-output: undocumented
    --encoding=: Re-code the commit log message in given encoding
    --exclude-first-parent-only: For excluded commits follow only the first parent commit upon merge
    --exclude-hidden?: Do not include refs that would be hidden
    --exclude-promisor-objects: Prefilter object traversal at promisor boundary
    --exclude=: Do not include matching refs the next option would consider
    --exit-code: Make the program exit with codes similar to diff(1)
    --expand-tabs=: Perform a tab expansion
    --ext-diff: Allow an external diff helper to be executed
    --filter-print-omitted: Print a list of the objects omitted by the filter
    --filter-provided-objects: Filter the list of explicitly provided objects
    --filter=: Omits objects from the list of printed objects
    --find-copies-harder: inspect unmodified files as candidates for the source of copy
    --find-object=: Look for differences that change the number of occurrences of the specified object
    --first-parent: For included commits follow only the first parent commit upon merge
    --follow: Continue listing the history of a file beyond renames
    --format=: Pretty-print the contents of the commit logs in a given format
    --full-diff: Show full commit diffs
    --full-history: Same as the default mode, but does not prune some history
    --full-index: show the full pre- and post-image blob object names
    --glob=: Pretend as if all matching refs are listed on the command line
    --graph: Draw a text-based graphical representation of the commit history
    --grep-reflog=: Limit output to ones with matching reflog entries
    --grep=: Limit output to ones with matching log message
    --header: Print the contents of the commit in raw-format
    --histogram: Generate a diff using the "histogram diff" algorithm
    --ignore-blank-lines: Ignore changes whose lines are all blank
    --ignore-cr-at-eol: Ignore carriage-return at the end of line when doing a comparison
    --ignore-missing: Pretend as if the bad input was not given
    --ignore-space-at-eol: Ignore changes in whitespace at EOL
    --ignore-submodules=: Ignore changes to submodules in the diff generation
    --in-commit-order: Print tree and blob ids in order of the commits
    --indent-heuristic: Enable the heuristic that shifts diff hunk boundaries to make patches easier to read
    --indexed-objects: Pretend as if all trees and blobs used by the index are listed on the command line
    --inter-hunk-context=: Show the context between diff hunks
    --invert-grep: Limit output to ones with non-matching log message
    --ita-invisible-in-index: this option makes the entry appear as a new file
    --left-only: List only commits on the left side of a symmetric difference
    --left-right: Mark which side of a symmetric difference a commit is reachable from
    --line-prefix=: Prepend an additional prefix to every line of output
    --log-size: Print log message size in bytes before the message
    --mailmap: Use mailmap file to map author and committer name
    --max-age=: Limit the commits output to specified time range
    --max-parents=: Show only commits which have at most that many parent commits
    --merge: Show refs that touch files having a conflict and don’t exist on all heads to merge
    --merges: Print only merge commits
    --min-age=: Limit the commits output to specified time range
    --min-parents=: Show only commits which have at least that many parent commits
    --minimal: Spend extra time to make sure the smallest possible diff is produced
    --missing=: Specify how missing objects are handled
    --name-only: Show only names of changed files
    --name-status: Show only names and status of changed files
    --no-abbrev: Show the full 40-byte hexadecimal commit object name)
    --no-abbrev-commit: Show the full 40-byte hexadecimal commit object name
    --no-color: Turn off colored diff
    --no-color-moved: Turn off move detection
    --no-color-moved-ws: Do not ignore whitespace when performing move detection
    --no-commit-header: Suppress the header line containing "commit"
    --no-expand-tabs: Do not perform a tab expansion
    --no-ext-diff: Disallow external diff drivers
    --no-filter: Turn off any previous --filter= argument
    --no-indent-heuristic: Disable the indent heuristic
    --no-index: Compare paths on the file system
    --no-max-parents: Reset max-partents limit
    --no-merges: Do not print commits with more than one parent
    --no-min-parents: Reset min-parents limit
    --no-notes: do not show notes
    --no-object-names: Do not print the names of the object IDs that are found
    --no-prefix: Do not show any source or destination prefix
    --no-relative: Do not show relative pathnames
    --no-rename-empty: Whether to use empty blobs as rename source
    --no-renames: Turn off rename detection
    --no-textconv: Disallow external text conversion filters to be run when comparing binary files
    --no-walk=: Only show the given commits, but do not traverse their ancestors
    --not: Reverses the meaning of the ^ prefix
    --notes?: show the notes that annotate the commit
    --numstat: Similar to --stat, but shows number of added and deleted lines in decimal notation
    --object-names: Print the names of the object IDs that are found
    --objects: Print the object IDs of any object referenced by the listed commits
    --objects-edge: Similar to --objects, but also print the IDs of excluded commits
    --objects-edge-aggressive: Similar to --objects-edge, but it tries harder to find excluded commits
    --oneline: This is a shorthand for "--pretty=oneline --abbrev-commit" used together
    --output-indicator-context=: Specify the character used to indicate context lines in the generated patch
    --output-indicator-new=: Specify the character used to indicate new lines in the generated patch
    --output-indicator-old=: Specify the character used to indicate old lines in the generated patch
    --output=: Output to a specific file instead of stdout
    --parents: Print also the parents of the commit
    --patch-with-raw: Synonym for -p --raw
    --patch-with-stat: Synonym for -p --stat
    --patience: Generate a diff using the "patience diff" algorithm
    --pickaxe-all: When -S or -G finds a change, show all the changes in that changeset
    --pickaxe-regex: Treat the <string> given to -S as an extended POSIX regular expression to match
    --pretty=: Pretty-print the contents of the commit logs in a given format
    --progress=: Show progress reports on stderr as objects are considered
    --quiet: Don’t print anything to standard output
    --raw: Generate the diff in raw format
    --reflog: Pretend as if all reflog objects are listed on the command line
    --relative,=: exclude changes outside the directory
    --relative-date: Synonym for --date=relative
    --relative=: Show relative pathnames
    --remotes?: Pretend as if all the refs in refs/remotes are listed on the command line
    --remove-empty: Stop when a given path disappears from the tree
    --rename-empty: Whether to use empty blobs as rename source
    --reverse: Output the commits in reverse order
    --right-only: List only commits on the right side of a symmetric difference
    --rotate-to=: Move the files before the named <file> to the end
    --shortstat: Output only the last line of the --stat format
    --show-linear-break=: Put a barrier in between branches in graph output
    --show-notes-by-default: show the default notes
    --show-pulls: Include also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent
    --show-signature: Check the validity of a signed commit object
    --simplify-by-decoration: Commits that are referred by some branch or tag are selected
    --simplify-merges: Additional option to --full-history to remove some needless merges from the resulting history
    --since-as-filter=: Show all commits more recent than a specific date
    --since=: Show commits more recent than a specific date
    --single-worktree: Examine the current working tree only
    --skip-to=: Discard the files before the named <file> from the output
    --skip=: Skip number commits before starting to show the commit output
    --sparse: All commits in the simplified history are shown
    --src-prefix=: Show the given source prefix instead of "a/"
    --stat-count=: Generate diffstat with limited lines
    --stat-graph-width=: Generate diffstat with a given graph width
    --stat-name-width=: Generate diffstat with a given filename width
    --stat-width=: Generate diffstat with a given width
    --stat=: Generate a diffstat
    --stdin: Read arguments from standard input as well
    --submodule=: Specify how differences in submodules are shown
    --summary: Output a condensed summary of extended header information
    --tags?: Pretend as if all the refs in refs/tags are listed on the command line
    --textconv=: Allow (or disallow) external text conversion filters to be run when comparing binary files
    --timestamp: Print the raw commit timestamp
    --topo-order: Avoid showing commits on multiple lines of history intermixed
    --unpacked: Print the object IDs that are not in packs
    --until=: Show commits older than a specific date.
    --use-bitmap-index: Try to speed up the traversal using the pack bitmap index
    --use-mailmap: Use mailmap file to map author and committer name
    --word-diff-regex=: Use <regex> to decide what a word is
    --word-diff?: Show a word diff, using the <mode> to delimit changed words
    --ws-error-highlight=: Highlight whitespace errors in the context, old or new lines of the diff
    "-0": Omit diff output for unmerged entries
    -1, --base: compare with base
    -2, --ours: compare with our branch
    -3, --theirs: compare with their branch
    -B, --break-rewrites=: Break complete rewrite changes into pairs of delete and create
    -C, --find-copies=: Detect copies as well as renames
    -D, --irreversible-delete: Omit the preimage for deletes
    -E, --extended-regexp: Consider the limiting patterns to be extended regular expressions
    -F, --fixed-strings: Consider the limiting patterns to be fixed strings
    -G=: Look for differences whose patch text contains added/removed lines that match <regex>
    -I, --ignore-matching-lines=: Ignore changes whose all lines match <regex>
    -M, --find-renames=: Detect renames
    -O=: Control the order in which files appear in the output
    -P, --perl-regexp: Consider the limiting patterns to be Perl-compatible regular expressions
    -R: Swap two inputs
    -S=: Look for differences that change the number of occurrences of the specified string
    -U, --unified=: Generate diffs with <n> lines of context instead of the usual three
    -W, --function-context: Show whole surrounding functions of changes
    -X, --dirstat=: Output the distribution of relative amount of changes for each sub-directory
    -a, --text: Treat all files as text
    -b, --ignore-space-change: Ignore changes in amount of whitespace
    -c, --cc: This compares stage 2 (our branch), stage 3 (their branch), and the working tree file
    -g, --walk-reflogs: Walk reflog entries from the most recent one to older ones
    -i, --regexp-ignore-case: Match the regular expression case insensitive
    -l=: prevent rename/copy detection from running if the number of rename/copy targets exceeds the specified number
    -n, --max-count=: Limit the number of commits to output
    -p, --patch: Generate patch
    -q: Remain silent even for nonexistent files
    -s, --no-patch: Suppress diff output
    -u: Generate patch
    -w, --ignore-all-space: Ignore whitespace when comparing lines
    -z: do not munge pathnames and use NULs as output field terminators
documentation:
    command: |-
        [AI] `git diff-files` is a Git command that shows a list of files in the current repository with local modifications that have not been added to the index yet. It does not display the differences between those files, but rather provides a brief summary of each file's status:

        1. Modified files (M): Files that have been modified locally but not yet staged for commit.
        2. New files (A): Files that exist only in the local directory and are not yet tracked by Git.
        3. Deleted files (D): Files that were previously tracked by Git, but have been deleted from both the working directory and the index.

        Use `git diff-files --cached` to show a list of files that have been modified in the staging area, or use `--name-only` option to display only the file names when running with no additional arguments.
    flag:
        "0": '[AI] The `git diff-files --cached --zero-context` command displays a list of files with differences between the current branch and the last commit, showing only the file names without any context or message. The "--zero-context" option is used to display only the names of the changed files, making the output more compact.'
        G: '[AI] `git diff-files -G` is a Git command used to show the list of files with added or deleted occurrences of a specific global text pattern in the working directory and the index. It does not show the actual difference between files, but instead provides a quick overview of which files have been modified regarding the given pattern. This command can help identify files that need further examination for specific text changes.'
        O: '[AI] `git diff-files -O` is a Git command used to output the difference between the current state and the index of all modified files in a single patch format (raw format). The `-O` option instructs Git to output the result as a single patch file rather than the traditional side-by-side or unified format. This can be useful when you want to apply the changes to another branch, another repository, or process the differences with external tools.'
        R: '[AI] `git diff-files -R` is a Git command used to show differences between the working directory and the index for all files in the current repository recursively, including subdirectories. The `-R` (recursive) option causes Git to perform this comparison not just for the current file, but for all files in the directory tree as well. This can help identify changed or deleted files that may have been overlooked during local development.'
        S: '[AI] `git diff-files -S` is a Git command that shows a list of files where a specified string was added or modified in the staging area or in the working directory. The option `-S` causes Git to print the name of each file with the number of occurrences of the string in that file. The command does not show the diff itself, just the affected files. It can be useful for identifying which files need further examination when looking for specific text changes.'
        abbrev: '[AI] `git diff-files --abbrev` is a Git command that lists files with conflicting changes when merging branches. The "--abbrev" option abbreviates the branch names to their upstream tracking branches'' short names, making the output clearer and easier to understand in contexts where multiple branches are being merged. This command doesn''t show the actual differences; it only lists the files with conflicts that need manual resolution before completing a merge.'
        abbrev-commit: '[AI] `git diff-files --abbrev-commit` is a Git command used to show the list of files with conflicting changes between two branches or commits. It provides the abbreviated commit hashes for each branch, helping to easily identify the specific commits leading to the differences. When run without any additional options, it shows files with unmerged changes.'
        after: '[AI] `git diff-files --after` is a Git command that shows the differences between the files in the current repository with respect to a specific commit or tree, specified by its SHA-1 hash. The option `--after` specifies that Git should only display differences forward from the given commit or tree. This can be useful when you want to see what changes have been made since a particular point in your project''s history.'
        all: '[AI] `git diff-files --all` is a Git command that shows the list of files in your current repository that have local modifications or unmerged changes from upstream branches. The `--all` option includes both tracked and untracked files in the output. The command does not show the differences between the files; instead, it provides a summary of each file''s status. This information can be useful when preparing to commit local changes, merging branches, or identifying potential conflicts.'
        all-match: '[AI] `git diff-files --all-match` is a Git command that shows the list of files with conflicting modifications between the current branch and the index or between the index and another branch or commit. The command scans all files in the current repository to find differences that Git cannot automatically merge, indicating file conflicts. It''s useful for identifying and resolving merge conflicts manually before completing a merge operation.'
        alternate-refs: '[AI] `git diff-files --alternate-refs` is a Git command used to show the differences between the current branch and all of its alternate refs (i.e., remote branches that can be fetched). It displays hunks of added, modified or deleted lines for each file with those differences. This command helps compare the local changes against the latest versions from the remotes before deciding which changes to keep or merge.'
        ancestry-path: '[AI] `git diff-files --ancestry-path` is a Git command that provides the ancestry chain of commits for each file in the current repository, showing the commit hashes that contributed to the differences between the current branch and the specified branch or commit. This command can be useful for tracing the lineage of file changes and understanding the commit history more deeply. The output displays the file path followed by its ancestry path as a list of commit hashes in reverse order, starting with the most recent common ancestor.'
        anchored: '[AI] `git diff-files --anchored` is a Git command used to compare the textual differences between two tree objects in your Git repository. The "--anchored" option specifically tells Git to only show differences where at least one file has been completely modified or deleted, ignoring files with partial modifications. This can be useful when you want to quickly identify which files have undergone significant changes between two commits.'
        author: '[AI] `git diff-files --author` is a Git command used to show a list of files with differing author information between two revisions or branches. It compares the commit history and displays files that have been modified by different authors, helping users identify and resolve potential merge conflicts or authors'' mistakes. This command doesn''t show the differences within the files but only their metadata, such as author names and commits messages.'
        author-date-order: '[AI] `git diff-files --author-date-order` is a Git command used to list the files with differences between two commits, displayed in order by their author dates. This means that the output will show the files with the most recent commit first, followed by those with older commit dates. By default, it only shows the names of the changed files and does not display the actual difference between them. It is often used to quickly identify which files have been modified between two specific commits in a Git repository.'
        base: '[AI] `git diff-files --base` is a Git command used to compare the base version of files in a repository with their current state. It shows the differences between the common ancestor of two branches and the files as they currently exist in each branch. This command can be helpful when resolving merge conflicts or understanding the changes that occurred during a merge.'
        basic-regexp: '[AI] `git diff-files --basic-regexp` is a Git command used to show the list of files that match a given regular expression in the current repository, but only those files with differences between their working directory and the index. The `--diff-filter` option is set to `d` by default to only include files with differences, and the `--basic-regexp` option allows using a basic regular expression to match file paths. For instance, `git diff-files --basic-regexp ''\.txt$''` will show the list of text files (files ending with .txt) with differences.'
        before: '[AI] `git diff-files --before` is a Git command used to compare the differences between files in their current state and a specified commit, referred to as the "before" state. This command shows the differences that would be applied if you were to apply a `git checkout <commit> <file>` for each file. It''s useful when you want to review changes introduced by a specific commit without modifying your current working directory or creating a new branch.'
        binary: '[AI] `git diff-files --binary` is a Git command used to show the difference between two binary files, i.e., files with binary data like images, executables, etc. The `--binary` option tells Git to use a binary format for the output, which results in an unreadable sequence of bytes representing the differences instead of a human-readable text format. This command is typically used when comparing large or complex binary files and requires additional tools like `diffstat`, `wc`, or a hex editor to analyze the output effectively.'
        bisect: |-
            [AI] `git diff-files --bisect` is a Git command used for effective and precise resolution of merge conflicts, particularly when dealing with large or complex codebases. It utilizes a binary search algorithm to identify the commit responsible for introducing a specific change in files.

            When you run this command, Git performs a binary search between two commits, typically the current branch and a specified older commit. It checks out intermediate commits along the way and applies the three-way merge process with the base (common ancestor) and each side of the conflict. For each test failure, Git marks that commit as bad, and for each successful merge, it marks that commit as good. Once Git reaches the offending commit or narrows down the search range significantly, it prints out the relevant commits for further investigation.

            This command is useful when you're unsure of which commit introduced a regression, helping to save time and effort in manually inspecting each commit.
        bisect-all: |-
            [AI] `git diff-files --bisect` is a Git command used for effective and precise identification of the commit causing a regression in your project. This command initiates a binary search (known as bisect) through your commit history to find the commit responsible for introducing the change leading to the issue.

            Here's a brief explanation of the given command:

            - `git diff-files`: This command compares the differences between files in the working directory and the index.
            - `--bisect`: This option enables Git's bisect mode, which performs an automated binary search for the problematic commit. It starts from a good commit (commonly the last known good commit) and moves toward the current branch head.
            - `--bisect-all`: This additional option is optional, but if specified, Git will continue the bisect process even when it encounters conflicts or errors between commits. By default, Git stops the process if it encounters a conflict. With this flag, you can force Git to attempt to resolve the conflicts automatically and continue the search.
        bisect-vars: '[AI] `git diff-files --bisect` is a Git command used during a bisect process to compare the state of your project files between two specific commits in the Git history. The `--bisect` option enables Git''s bisect functionality, which helps find the commit introducing a regression or a bug. The `--vars` (or `--bisect-vars`) option is used specifically with the bisect command to compare only files with changed environment variables between the two commits being compared. This can help you identify which commit modified a specific environment variable that affects the behavior of your code.'
        boundary: '[AI] `git diff-files --boundary` is a Git command used to display a list of files with conflicts when there are merge conflicts in a Git repository. It does not show the differences between the files, but rather identifies which files have unmerged changes and need further attention from the user during the merge process. The `--boundary` option is optional and used to separate the list of conflicting files from the regular output when running other Git commands in combination with `git diff-files`.'
        branches: '[AI] `git diff-files --branches` is a Git command that shows the files with conflicting modifications between current branch and all other branches. It lists the files with conflicting changes, but does not show the differences themselves. This command helps identify files requiring manual resolution before merging or rebase operations.'
        break-rewrites: |-
            [AI] `git diff-files --break-rewrites` is a Git command used to show differences between files in the index and the working directory, with an emphasis on handling file rewrites that might result from commit history rewriting operations like `git rebase`.

            The `--break-rewrites` option instructs Git to stop the diffing process when it encounters files that have been rewritten since the last commit. This allows users to manually inspect and resolve any conflicts that may arise, before continuing the rewrite operation. It's often used during an interactive rebase to ensure that each individual change is properly reviewed and applied.
        cached: '[AI] `git diff-files --cached` is a Git command used to show the differences between the file versions that are currently staged for the next commit. In other words, it compares the file state in the index (staging area) with the last committed version. This can help ensure that only intended changes will be included in the next commit.'
        cc: '[AI] `git diff-files --cc` is a Git command used to compare and show the differences between two versions of multiple files in the repository, using three-way merge conflict resolution. The `--cc` option stands for "conflicted" files, meaning that Git will only show files with unmerged changes. This command helps developers resolve merge conflicts by displaying the differences between their local changes, the remote changes, and the merged result.'
        check: '[AI] `git diff-files --checked` is a Git command used to check if there are any modified or deleted files in the current repository that are not yet added to the index. It does not display the differences between file versions like the regular `git diff` command. Instead, it returns exit status: 0 if there are no unstaged changes and 1 if there are modifications or deletions that need attention. This command can be used in scripts for continuous integration or automated testing workflows to ensure all files are tracked before running tests or building projects.'
        cherry: |-
            [AI] `git diff-files --cherry` is a Git command used to show the differences between two branches or commits that do not have any common base. The changes are displayed in a three-way format, with the left side representing the first branch, the middle showing the common ancestor (if any), and the right side displaying the second branch.

            It is called a "cherry-pick" difference because it allows you to selectively apply the changes from one branch onto another. If there are no conflicts between the branches, Git will automatically apply the differences using the `git cherry-pick` command. However, if there are conflicts, they need to be resolved manually before the changes can be applied successfully.
        cherry-mark: '[AI] `git diff-files --cherry-mark` is a Git command used to show a list of files with conflicted merges or cherry-picked commits, where the changes introduced by different commits conflict with each other. The `--cherry-mark` option adds a cherry-pick symbol ''*'' to the commit messages of the conflicting commits in the list. This command is particularly useful when working on branches with multiple local or remote commits and trying to apply cherry-picks or merges, which may result in conflicts that need resolution.'
        cherry-pick: '[AI] `git diff-files --cherry-pick` is a Git command used to compare and apply cherry-picked changes between two branches or commits. It shows the differences between files that have been modified in one branch but not yet merged into another, allowing you to manually choose which changes to apply using the `git cherry-pick` command. This can be useful when resolving merge conflicts or applying specific changes from one branch to another without performing a full merge.'
        children: '[AI] `git diff-files --children` is a Git command that shows the list of files in the current repository that have changed between two commit points, including files that have been added or removed as children of directories. It does not display the differences between the file versions but only lists the names of the affected files. The `--children` option ensures that the output includes files that are new children of existing directories.'
        color: '[AI] `git diff-files --color` is a Git command that displays the difference between the working directory and the last commit, using color-coded output. It compares files in the index against those in the working directory and shows the differences between them. The `--color` option enables colored output for a clearer representation of added, modified, or deleted parts within files.'
        color-moved: '[AI] `git diff-files --color-moved` is a Git command used to show the difference between the current branch and the selected commit, highlighting files that have been moved or renamed. The `--color-moved` option enables colored output for moved files in the diff result. It does not include the contents of the changes but rather focuses on the file renames and their locations in both branches.'
        color-moved-ws: '[AI] `git diff-files --color-moved-ws` is a Git command used to show the difference between two revisions or the differences between the working directory and the index, with special colorization for moved or rename files and their white space changes. The option `--color-moved-ws` enables the colorization of moved or renamed files'' white space differences. It helps developers to easily identify the changed files and the modifications within those files.'
        color-words: '[AI] `git diff-files --color-words` is a Git command that displays the difference between the text in the working directory and the corresponding file in the last commit, using colored words to highlight the changes. It compares files under version control but does not create a new commit or staging area. The `--color-words` option highlights added or deleted individual words with different colors for easier identification of modifications within the text differences.'
        commit-header: '[AI] `git diff-files --commit-header` is a Git command that shows the commit message and the list of modified files between two commits. This command allows you to quickly review the changes made in each commit without having to navigate through the entire commit history or use other diff tools. The output displays the commit message followed by a list of files affected by the commit, along with the type of change (add, modify, or delete) for each file.'
        committer: '[AI] `git diff-files --committer` is a Git command that shows the differences between the committer information of two branches or commit hashes, rather than the changes in file contents. The output displays each file with its respective committer details, such as author name and email, and the timestamps of when each commit occurred. This command can be helpful for comparing the history of different branches to identify when specific changes were introduced by particular commits.'
        compact-summary: '[AI] `git diff-files --compact-summary` is a Git command that shows a compact summary of differences between files in the current repository. This command generates output in a columns-format, displaying the file names, the types of changes (M for modified, A for added, D for deleted), and the number of added or deleted bytes for each file. It''s useful when you want to quickly review what files have changed without looking at the detailed differences.'
        count: '[AI] `git diff-files --count` is a Git command that generates a list of files with a count of unstaged changes in each file. The output shows only filenames and the number of added or deleted lines for each file. It provides a quick overview of which files have undergone changes without displaying the actual differences between them.'
        cumulative: '[AI] `git diff-files --cumulative` is a Git command that displays the difference between the current branch and the selected commit in a cumulative format. The output shows each file changed in the committed changes, with the differences for those files stacked on top of each other. This allows you to easily see the net effect of all the changes made in the commit. The first hunk corresponds to the changes introduced in the commit, followed by any conflicting changes and finally the differences between the current branch and the previous commit.'
        date: '[AI] `git diff-files --date` is a Git command used to show files with differences based on their last modification date. It compares the files in the current repository and displays the differences between those modified on a specified date and the latest commit or a named branch. The output can be further refined using options such as `--cached`, `--staged` or `--name-only`.'
        date-order: '[AI] `git diff-files --date-order` is a Git command that displays differences between files with a focus on their last modification dates. It lists the files in the order of when they were last modified, and for each file, it shows the differences between its current state and the commit you specified (or the HEAD if not specified). This command is useful for comparing the changes made to different files across commits, especially when dealing with large or multiple repositories, where you want to see the changes in the context of their modification timeline.'
        default: '[AI] `git diff-files --default` is a Git command that shows the differences between the current state of the files in the working directory and the changes staged for commitment, with the default merge base as their common ancestor. This means the output will highlight both local modifications and changes that have been staged for commit, allowing users to compare and decide which changes to keep before creating a new commit.'
        default-prefix: '[AI] `git diff-files --default-prefix` is a Git command used to compare and display differences between files in the working directory and the index or between the index and the head commit. The `--default-prefix` option sets the prefix string that appears before each hunk of changes in the output. By default, Git uses ''@@'' as the prefix, but you can use `--default-prefix` to set a different prefix if desired.'
        dense: '[AI] `git diff-files --dense` is a Git command used to compare and show the differences between files in the working directory and the index or between two branches or commits. The `--dense` option makes the output more compact by not showing empty lines as blank spaces, but rather as a single character "+" for additions or "-" for deletions. This can be useful when comparing large files with many changes.'
        diff-algorithm: |-
            [AI] `git diff-files` is a Git command used to compare and show the differences between files in the working directory and the index or between the index and theHEAD commit. The `--diff-algorithm` option allows you to specify which diff algorithm to use for generating the difference output.

            Git comes with two built-in diff algorithms: 'minimal' (the default) and 'histogram'.

            1. 'minimal': This algorithm generates a standard unified diff, showing the differences between files line by line. It is the most commonly used and well-supported diff format.

            2. 'histogram': This algorithm generates a more visually appealing output with a histogram at the top of the patch, summarizing additions, deletions, and changes to individual lines in the file. The histogram provides an overview of the overall differences between files, making it easier to understand large patches or compare multiple files.

            By using `git diff-files --diff-algorithm=histogram`, you can generate a patch with this visual representation of differences.
        diff-filter: |-
            [AI] `git diff-files` is a Git command used to compare and show the differences between files in a repository. The `--diff-filter` option filters the files that will be shown based on their state in the index and working directory.

            By default, `git diff-files` shows differences for all tracked files. However, you can use `--diff-filter` to selectively show differences for specific types of changes using the following flags:

            * `A`: Show differences for files that have been added but not yet committed.
            * `D`: Show differences for deleted files.
            * `M`: Show differences for modified files.
            * `R`: Show differences for renamed or moved files.
            * `C <commit>`: Show differences between two commits.

            For example, to show the differences for added and modified files only, you can use:
            ```bash
            git diff-files --diff-filter=AM
            ```
        dirstat: '[AI] `git diff-files --dirstat` is a Git command that generates a summary statistics about modified, added, and deleted files in a repository during a commit. The output is displayed as a percentage distribution across directories, showing the proportion of changed file types and the total number of files in each category. This command can be useful for understanding the impact of a change at a high level, especially when dealing with large or complex repositories.'
        dirstat-by-file: '[AI] `git diff-files --dirstat-by-file` is a Git command that generates a statistics report on the number of added, modified, and deleted files in a repository between two commit states. It outputs the results as a tab-separated value (TSV) format, where each line represents a file with columns for the total size, the size of new files, the size of deleted files, and the size of modified files. This command is useful for understanding the impact of a change at a granular level, focusing on individual files rather than the entire repository history.'
        disk-usage: '[AI] `git diff-files --disk-usage` is a Git command that shows the disk usage of untracked and modified files in the current repository. It provides a detailed list of files along with their sizes and the difference between their current size and their last committed size. The output includes columns for file name, path, size of the file as it stands now, size as it was last committed, and the difference between the two sizes. This command can help identify large or changed files that have not been added to the Git index yet, allowing users to decide whether to commit them or remove them from the repository.'
        do-walk: '[AI] `git diff-files --do-walk` is a Git command used to recursively traverse a directory tree and generate a difference report for each file that has been modified or deleted relative to its parent or ancestor commits. It does not show the differences between files, only identifies which files have changed. The `--do-walk` option tells Git to perform the depth-first walk through the directory tree.'
        dst-prefix: '[AI] `git diff-files --dst-prefix` is a Git command that shows the differences between the working directory and the index for files that have been modified or deleted, but not yet added to the staging area. The `--dst-prefix` option specifies a prefix that will be added to the names of the destination files in the output. This can be useful when dealing with multiple directories or large numbers of files. The command displays the differences side by side for modified files and lists deleted files.'
        early-output: '[AI] `git diff-files --early-output` is a Git command that outputs the list of files with differences between the head and the index, in a format suitable for processing by other scripts or tools before showing the actual diff output. This option allows for more control over how the difference report is generated and processed.'
        encoding: '[AI] `git diff-files --encoding` is a Git command used to compare the encoding of files in the current repository. It shows the difference between the declared encoding and the detected encoding for each file in the staging area or the working directory. The output includes the filename, the declared encoding, the detected encoding, and whether there''s a difference between them (e.g., `declared-encoding: UTF-8; detected-encoding: UTF-16`). If no differences are found, only the filenames will be listed.'
        exclude: '[AI] `git diff-files --exclude` is a Git command that shows the list of files in the current repository that have local changes but are not included in the next commit, excluding files specified in a given exclude pattern. The exclude option can take a file or a list of patterns to filter out specific files or directories from the comparison. For instance, `--exclude=''*.log''` would exclude all files with the ''.log'' extension.'
        exclude-first-parent-only: '[AI] `git diff-files --exclude-first-parent-only` is a Git command used to compare and show differences between files in the current repository. The `--exclude-first-parent-only` option filters out commits with only one parent commit (also known as merge commits or non-fast-forward commits). It does this by only showing differences for files that have changed between the current branch and its last common ancestor with another branch, rather than between each individual commit. This can be useful to limit the output to meaningful differences and ignore merges that didn''t change the files.'
        exclude-hidden: '[AI] `git diff-files` is a Git command used to show the list of files that have been modified between two states, such as between the current branch and the last commit. The `--exclude-hidden` option is used in conjunction with this command to exclude files with hidden names (files starting with a dot) from the comparison results. This means only non-hidden files will be shown when running `git diff-files --exclude-hidden`.'
        exclude-promisor-objects: |-
            [AI] `git diff-files --exclude-untracked --exclude-submodule-history --exclude-renamed-file --exclude-deleted-file --cached --diff-filter=d --ignore-white-space --quiet HEAD <commit>` is a Git command used to show the difference between files in the current repository between two specific commits, excluding certain types of objects.

            The `--exclude-promisor-objects` option specifically tells Git to exclude differences related to "promises" or "reusable diff cache objects". These objects are used by Git's fast-forward merge strategy and do not represent actual file changes. By excluding these objects, the command provides a cleaner output of only the real file differences between the commits.
        exit-code: |-
            [AI] `git diff-files --exit-code` is a Git command used to compare the differences between files in the index and the working directory, but with an added feature: it sets the exit code based on the result of the comparison.

            When run, it checks each file in the current repository for differences between the indexed state and the working directory. If there are no differences, the command exits with a status code of 0. However, if there are differences, it will not print any output but instead sets an exit code of 1 to indicate that changes were detected. This makes it suitable for usage in scripts where you want to check whether there have been any file changes before continuing with other operations.
        expand-tabs: '[AI] `git diff-files --expand-tabs` is a Git command used to show the difference between files in a repository with tab characters expanded to their corresponding spaces, allowing for easier comparison. This command takes the output of a `git diff` and expands all tabs into the number of spaces specified by your editor''s tab stop setting. It is often used when reviewing changes that may involve differences in indentation or formatting due to tab usage.'
        ext-diff: '[AI] `git diff-files --ext-diff` is a Git command used to compare the textual differences of files that are handled externally, meaning their differences cannot be determined by Git itself due to being in a binary format or managed by an external tool. The `--ext-diff` option instructs Git to invoke an external diff driver to perform the comparison instead. This command outputs the difference information to stdout, which can then be further processed or displayed using other tools.'
        extended-regexp: '[AI] `git diff-files --extended-regexp` is a Git command used to compare the text difference between files based on a given extended regular expression pattern instead of the default simple filename matching. This can be useful when you want to find and compare differences between files that match specific complex naming patterns or file paths in your repository. The `--extended-regexp` option enables Git to use Perl-compatible regular expressions (PCRE) for pattern matching, allowing more flexible and precise filtering of files for comparison.'
        filter: '[AI] `git diff-files` is a Git command used to show the differences between files in the index and those in the working directory. The `--filter` option allows specifying filters for the file types or extensions. For example, `--filter=p:*` will only show changes for files matching "p*" pattern. With no filter argument, it shows differences for all files. It''s a powerful way to limit the scope of difference reporting.'
        filter-print-omitted: '[AI] `git diff-files --filter-print-omitted` is a Git command that displays files with differences between two branches or commits, but omits the output for files that are identical in both. This can be useful when dealing with large repositories where most files have not been modified and you want to focus on the changed ones without being overwhelmed by the noise of unchanged files in the output.'
        filter-provided-objects: |-
            [AI] `git diff-files --filter-provided-objects` is a Git command used to compare and list files that have changed between two states, but with an added option to consider only objects provided with the command.

            When you run this command with a list of objects (hashes), Git will only look at the differences between the files that correspond to those objects, instead of considering the entire working directory or the index. This is useful when you want to compare specific commits or tree states without having to manually specify all the affected files.

            The primary purpose of this command is to save time and resources by limiting the scope of comparison, which can be helpful in large repositories or complex projects with many files.
        find-copies: '[AI] `git diff-files --find-copies` is a Git command used to show differences between files with identical names but different locations in the repository or worktree. This command does not display the content differences, but rather lists the file paths and the types of changes: moved (M), copied (C), or renamed (R). The option `--find-copies` tells Git to look for copies of files even if they have different modes, allowing you to identify and track duplicate files with modified contents.'
        find-copies-harder: '[AI] `git diff-files --find-copies-harder` is a Git command used to show differences between files with similar content across different branches or commits, taking into account file renames and moves. The `--find-copies-harder` option makes Git search for copies of the file with similar content even if they have different names or paths. This can be useful when dealing with complex refactoring or large codebases where files may have been moved or renamed between commits. It helps to highlight the changes made to the actual content rather than just the file name or location.'
        find-object: '[AI] `git diff-files --find-objects` is a Git command used to find and display objects (commits, trees, or blobs) that have changed between two states, such as between two branches or between the working directory and the index or the HEAD. It does not show the differences between files but instead provides the hash values of the objects that represent those changes. The command helps to identify which objects are new, modified, or deleted in the given comparison.'
        find-renames: '[AI] `git diff-files --find-renames` is a Git command that displays renamed files and their new names in a diff-like output. When you run this command, Git scans your current repository to find files with renamed sections between two commits. It then shows the differences between these files'' old and new paths or names. This command can be useful when trying to understand file renames that occurred during a Git commit history.'
        first-parent: '[AI] `git diff-files --first-parent` is a Git command used to compare and show the difference between files in the current branch with its immediate parent. It displays hunks of changes, which are chunks or sections of code that have been added, modified, or deleted. The `--first-parent` option ensures that only differences between the current branch and its direct parent are shown, ignoring any common ancestry with other branches. This command is particularly useful for reviewing the changes made in a single commit, as it provides a clear view of what has been altered in each file.'
        fixed-strings: '[AI] `git diff-files --fixed-strings` is a Git command used to show differences between files in the current repository with a focus on finding exactly matched fixed strings. When you run this command, Git compares files that have been modified or deleted and displays the differences in terms of where these specific fixed strings have been added, removed, or changed. It''s particularly useful when dealing with large or complex changesets, allowing you to quickly identify where certain strings appear in the context of the difference.'
        follow: '[AI] `git diff-files --follow` is a Git command used to show the differences between the working directory and the index for files with conflicts or large changes. The `--follow` option enables Git to follow symlinks and handle moves and renames during the comparison. This can be useful when dealing with complex file modifications, especially in a merge scenario, where multiple branches have been updated. It provides a more detailed output of the differences compared to a simple `git diff`.'
        format: '[AI] `git diff-files --format` is a Git command that generates output in a customized format for comparing files between two commits. This command takes no default, so the `--format` option is required to specify how the difference output should be displayed. The given format string determines what information Git includes in the output. For example, `%d %s` would display the difference''s filepath and filename, while `%c` would show the context of the changes around the difference.'
        full-diff: '[AI] `git diff-files --full-diff` is a Git command used to display a detailed, side-by-side comparison of differences between two file versions in a repository. It shows every character modification made between the current branch and another specified branch or commit, including additions, deletions, and text changes. This command is particularly useful when working on larger files with many changes or when it''s essential to have an accurate understanding of the exact modifications made.'
        full-history: '[AI] `git diff-files --full-history` is a Git command used to compare the full commit history of files in the current repository, showing every commit that modified each file and the differences between those revisions. It generates a patch for each file with multiple hunks representing each change made in the commit history. This command provides a comprehensive view of how files have evolved throughout the project''s Git history.'
        full-index: '[AI] `git diff-files --full-index` is a Git command that shows the difference between the current state of files in the working directory and their corresponding files in the last commit. The `--full-index` option displays the complete patch, including the file mode, hash, and whitespace differences, in addition to the changed lines. This command is often used for a more detailed comparison or when preparing a commit message, as it provides a clearer view of the changes made to each file.'
        function-context: '[AI] `git diff-files --function-context` is a Git command that displays the context of function definitions around differences between files in a repository. It shows the context of the functions affected by the difference, providing more context than the default `git diff` output. This command helps developers understand how changes impact entire functions during code reviews or merge conflicts.'
        glob: '[AI] `git diff-files --glob` is a Git command used to compare and show the differences between files based on a specified glob pattern. Instead of comparing individual files with `git diff <file1> <file2>`, you can use this command to compare multiple files that match a given pattern, making it more efficient when dealing with large numbers of files. For example, `git diff-files --glob=''*.txt''` would show the differences between all text files in your repository.'
        graph: '[AI] `git diff-files --graph` is a Git command that generates a graph representation of the commit history focusing on specific files. It displays a directed acyclic graph (DAG) of commits, where each node represents a commit and an edge between two nodes indicates that one commit has modified the same file as the other commit. The graph shows how different versions of a file have been developed across commits in your Git repository.'
        grep: '[AI] `git diff-files --grep` is a Git command used to search for specific text patterns across all changed files in the current repository. This command shows the difference between the header lines (where changes are usually made, such as commit messages or file metadata) of each file and the given pattern. The --grep option allows filtering files based on the search pattern using regular expressions. The output lists the matching files and the context around the match. It''s particularly useful for finding changes related to specific text strings across multiple files in a Git repository.'
        grep-reflog: '[AI] `git diff-files --grep-reflog` is a Git command used to show differences between the current branch and the reflog (commit history) for a specific file or set of files. The `--diff-files` option tells Git to only display the differences for those files, while `--grep-reflog` searches the commit messages in the reflog for a given pattern and shows the commits that match it. This can be useful when trying to find and revert specific changes made to certain files in the history of your repository.'
        header: '[AI] `git diff-files --header` is a Git command used to compare the differences between two sets of files, showing only the commit messages (headers) that introduced those changes. It does not display the actual differences between the files but instead provides the commit messages associated with the file changes. This command can be useful when you want to identify which commits introduced specific changes in multiple files without having to manually inspect each one.'
        histogram: '[AI] `git diff-files --histogram` is a Git command that generates a histogram of file modifications across commits in the current repository. The command displays a graphical representation of the number of added, modified, and deleted files at each commit. This can be useful for identifying trends or changesets with a large number of modifications. The output is typically displayed as a series of vertical bars representing each commit, with the height of each bar indicating the number of changed files.'
        ignore-all-space: '[AI] `git diff-files --ignore-all-space` is a Git command used to show the differences between files in a repository, ignoring only whitespace differences. The `--ignore-all-space` option tells Git to hide changes caused by white spaces only (spaces, tabs, and line breaks), focusing on textual differences instead.'
        ignore-blank-lines: '[AI] `git diff-files --ignore-blank-lines` is a Git command that compares and shows the differences between files in the current repository, ignoring any blank lines when displaying the output. This can be useful when you want to focus on changes other than those related to blank lines, such as code modifications or formatting adjustments. The command does not make any changes to the files; it simply displays the differences between them.'
        ignore-cr-at-eol: '[AI] `git diff-files --ignore-cr-at-eol` is a Git command used to compare and show the differences between files in the index and the working directory. The `--ignore-cr-at-eol` option tells Git to ignore changes in line endings, specifically in the form of carriage returns at the end of lines (CR + LF = CRLF). This is particularly useful when dealing with files on different operating systems, as they may have different line ending styles. By using this option, Git will present a more accurate representation of actual textual changes between the files, ignoring insignificant differences related to line endings.'
        ignore-matching-lines: '[AI] `git diff-files --ignore-matching-lines` is a Git command used to show the list of files with differences between two branches or commits, but ignoring any lines that match a given pattern. This can be useful when dealing with large codebases where only specific changes need to be reviewed. The ignored lines will not be displayed in the output of the command.'
        ignore-missing: '[AI] `git diff-files --ignore-missing` is a Git command that compares and shows the differences between files in the index and those in the working directory, ignoring files that are missing in the working directory. This can be useful when dealing with files that have been deleted from the working directory but still exist in the repository, preventing those files from causing unnecessary conflict messages during merge operations.'
        ignore-space-at-eol: '[AI] `git diff-files --ignore-space-at-eol` is a Git command used to show the differences between files in the current repository, with an optional setting `--ignore-space-at-eol` that instructs Git to ignore white space differences only at the end of lines. This can be useful when dealing with text files where only the formatting needs to be compared and not the actual content. By default, `git diff` will show all types of differences including white spaces, line breaks and code changes. This option helps in reducing the noise during file comparison.'
        ignore-space-change: '[AI] `git diff-files --ignore-space-change` is a Git command used to compare and show the differences between files in the current repository, ignoring any changes in whitespace and tabulation settings. It does not affect other types of changes such as content or formatting. This option is useful when you want to focus on textual differences without being distracted by insignificant white space alterations.'
        ignore-submodules: '[AI] `git diff-files --ignore-submodules` is a Git command used to show the differences between files in the current repository, ignoring any changes made within subdirectories that are tracked as Git submodules. This can be useful when you want to compare changes at the top level of your project without having to deal with the complexity of submodule changes. By adding `--ignore-submodules` option, Git will exclude any differences related to submodules from the diff output.'
        in-commit-order: '[AI] `git diff-files --in-commit-order` is a Git command that shows the differences between files as they appeared in consecutive commits, in the order of those commits. This means that it will display the differences between files as they evolved through each commit in the given branch or commit range, making it useful for comparing the file changes across multiple commits.'
        indent-heuristic: '[AI] `git diff-files --indent-heuristic` is a Git command that compares the text indentation between two versions of files in a repository and attempts to automatically adjust the new file''s indentation to match the old one. This can be helpful when merging branches or resolving merge conflicts where differences in indentation may exist, making it easier to review and apply the changes.'
        indexed-objects: |-
            [AI] `git diff-files --cached` and `--indexed-objects` are two flags used with Git's `diff` command for comparing and showing differences between files in a repository.

            The `--cached` flag (also known as `--staged`) shows the differences between the changes you have staged for the next commit and the last commit. This helps to review and adjust your changes before committing them.

            The `--indexed-objects` flag, on the other hand, includes the differences related to Git's index or cache (also called the "staging area"). In this mode, `git diff` compares not only the working directory files with the last commit but also considers the changes that are currently in the index. This can be useful for understanding what will be included when you decide to commit all staged changes together.
        inter-hunk-context: '[AI] `git diff-files --inter-hunk-context` is a Git command used to display a more detailed diff output. With this option, Git includes the context (the surrounding lines of a change) between each hunk in the diff output. This allows for a better understanding of the context in which the changes occurred and can be helpful when dealing with complex changes or merging conflicts.'
        invert-grep: '[AI] `git diff-files --invert-grep` is a Git command used to show files that match a given search pattern in their current state, but not in the next commit. The `--invert-grep` option inverts the match, meaning it selects files where the specified pattern does not appear in the file contents. This can be useful when you want to find out which files have been modified and no longer contain a specific search term.'
        irreversible-delete: '[AI] `git diff-files --irreversible-delete` is a Git command used to show files that have been permanently deleted from your working directory or the index, meaning they will not be included in the next commit. This command does not display the changes made to remaining files. The `--irreversible-delete` option ensures that only permanently deleted files are shown and not files that were accidentally moved or renamed.'
        ita-invisible-in-index: '[AI] `git diff-files --ita-invisible-in-index` is a Git command that displays a diff (difference) between the working directory and the index, but hides changes marked as "iti" (Interactive Text Editor) invisible in the index. The "iti-invisible-in-index" option allows hiding these changes, keeping the output cleaner when using interactive staging with `git add`.'
        l: '[AI] `git diff-files -l` is a Git command used to list the names of files with local modifications or unmerged differences between branches or commits. The `-l` option stands for "list only" and outputs just the filenames, without showing the differences themselves. It''s useful for identifying which files need further attention in a merge conflict or when comparing local and remote changes.'
        left-only: '[AI] `git diff-files --left-only` is a Git command that lists the names of files in the working directory that have changes relative to the index (staging area), but does not show the differences between them. It only displays the file names on the left side (the "old" version) of a hypothetical diff output. This can be useful for quickly identifying which files have been modified without seeing the specific changes.'
        left-right: '[AI] `git diff-files --left-right` is a Git command used to compare the differences between two files in a repository. The `--left-right` option displays the differences side by side, with the left pane showing the content of the first file and the right pane showing the changes made to the second file. This can be helpful when analyzing the modifications between two similar files or tracking merge conflicts.'
        line-prefix: '[AI] `git diff-files --line-prefix` is a Git command that displays a diff (difference) between two revisions or file states, with a prefix at the beginning of each hunk''s changed line(s). The prefix is usually ''+'' for additions and ''-'' for deletions. This option is useful when merging conflicts or reviewing changes made to large files. It allows you to easily identify which parts have been added, modified or removed.'
        log-size: '[AI] `git diff-files --log-size` is a Git command that shows a list of files with differences between two commits, along with the size of each file''s commit message in the log. It helps users quickly identify which files have been modified and the associated message sizes when comparing two specific commits in a Git repository.'
        mailmap: '[AI] `git diff-files --mailmap` is a Git command used to generate a mailmap file showing the email addresses associated with each commit author. This command takes a list of files or directories as arguments and compares their current state with the state in the last commit, displaying the differences if any. Simultaneously, it creates a text file named `mailmap` by default or with a given name if specified, where each line represents an author''s email address followed by their associated Git SHA1 hash.'
        max-age: '[AI] `git diff-files --max-age` is a Git command that lists files with unstaged changes in the working directory, whose modifications are older than the specified age. The age can be given as an absolute time value (e.g., "7 days" or "2 hours") or as a relative value with prefixes like "+" (for additions) or "-" (for deletions) followed by a number and "days", "weeks", "months", or "years". For example, `git diff-files --max-age=3d` shows files modified more than 3 days ago but not yet committed.'
        max-count: '[AI] `git diff-files --max-count` is a Git command used to compare and show the differences between files in three states: the working directory, the index (staging area), and the last commit. The `--max-count` option limits the number of files displayed in the output. By default, it shows differences for all files that have been modified, added or deleted. With `--max-count`, you can specify a number to limit the output to that number of files. For example, `git diff-files --max-count=5` will display differences for only the first five changed files.'
        max-parents: '[AI] `git diff-files --max-parents` is a Git command used to show differences between files with three or more common ancestors, also known as three-way merges. This command compares the current branches'' changes with their common ancestor(s), displaying the differences in a textual format. It can be useful when resolving merge conflicts in more complex merge scenarios, where multiple branches have made changes to the same files.'
        merge: '[AI] `git diff-files --merge` is a Git command that lists files with conflicts when merging branches or resolving merge conflicts. It does not show the differences between file versions, but instead identifies files where Git has detected merge conflicts and requires manual intervention to resolve them. Conflicts occur when changes made to the same file in different branches cannot be automatically merged without human intervention. This command helps developers identify and address these conflicts during the merge process.'
        merges: '[AI] `git diff-files --merges` is a Git command that lists files with conflicts or merges required after a pull or merge operation. It does not display the differences between file versions like other `git diff` commands do. Instead, it provides a summary of files with unmerged changes, allowing users to manually resolve any conflicts before completing the merge process.'
        min-age: '[AI] `git diff-files --min-age` is a Git command that shows differences between files with a modification time greater than or equal to the specified age. The `--min-age` option followed by a number, such as `1h`, `2d`, or `3w`, sets the minimum age for files based on the unit of time provided. For instance, `git diff-files --min-age 1h` would display differences for files modified within the last hour.'
        min-parents: '[AI] `git diff-files --min-parents` is a Git command used to list files with more than one unique commit in their history. The option `--min-parents=n` filters the results to only show files with at least two unique commits as parents (n > 1). This command can help identify files that have undergone significant changes and conflicts during merge processes or when working on branches with multiple lines of development.'
        minimal: '[AI] `git diff-files --minimal` is a Git command used to compare and show the minimal differences between two files or sets of files in the same repository. The `--minimal` option makes Git output only the minimal differences, which are the lines that have been added, removed, or changed. It is useful when you want to quickly see what has changed without being overwhelmed by the entire context of each difference.'
        missing: '[AI] `git diff-files --missing` is a Git command used to show files that exist in the working directory but are not tracked or have been removed from the current branch. It provides a list of these untracked or missing files, allowing users to decide if they want to add them to the Git index or remove them permanently. This command helps keep the repository up-to-date and maintain good version control practices.'
        name-only: '[AI] `git diff-files --name-only` is a Git command that shows the names of files in your working directory with differences between the current and previous commits. It only displays file names, not the actual changes, making it useful for identifying which files have been modified, added, or deleted without seeing the content of those changes.'
        name-status: '[AI] `git diff-files --name-status` is a Git command used to display the list of files affected by a commit or a merge, along with their modification statuses (added, modified, deleted, or renamed). It doesn''t show the actual differences between file versions like `git diff`, but instead focuses on providing the file names and their change statuses. This command can be helpful when you want to quickly check which files have been altered without having to examine the detailed changes.'
        no-abbrev: '[AI] `git diff-files --no-abbrev` is a Git command used to compare the full commit hashes of two file versions in a repository, instead of using abbreviated hashes. The command itself shows the differences between files with matching names but different commits, providing detailed information about each change. By including the `--no-abbrev` option, the full 40-character hash is displayed for both the current and the commit being compared.'
        no-abbrev-commit: '[AI] `git diff-files --no-abbrev-commit` is a Git command used to show the differences between files in the current repository, but it does not abbreviate commit messages during the output. The `--diff-files` option displays the file-specific differences, and the `--no-abbrev-commit` directive prevents the use of abbreviated commit hashes (shortened to just the first few characters) in the commit message output.'
        no-color: '[AI] `git diff-files --no-color` is a Git command used to show a list of files that have been modified, added or deleted between two states in a repository. The `--no-color` option disables the use of colors in the output, making it monochrome. This can be useful for viewing the output in text-based environments where colors are not supported.'
        no-color-moved: '[AI] `git diff-files --no-color --moved` is a Git command used to show the difference between the current state of the files in the working directory and their corresponding files in the last commit. The `--no-color` option disables color output, and the `--moved` option makes Git show differences for files that have been moved or renamed between the commit and the working directory.'
        no-color-moved-ws: '[AI] The `git diff-files --no-color-moved-ws` command is used to show a difference report between files in the working directory and their corresponding versions in the head of the current Git branch. The `--no-color` option removes color codes from the output, making it suitable for use in scripts or when preferring a monochrome terminal. The `--moved-ws` option makes Git treat whitespace changes as moves instead of adds and deletions. This can be useful when comparing files with different line endings, such as those under Windows and Unix systems.'
        no-commit-header: '[AI] `git diff-files --no-commit-header` is a Git command used to compare and show the differences between files in the working directory and the index, without displaying the commit message associated with those changes. It simply shows the file differences, making it useful for comparing local modifications against staged changes before committing.'
        no-expand-tabs: '[AI] `git diff-files --no-expand-tabs` is a Git command that shows a difference between files in a repository, with the option `--no-expand-tabs` turned off the tab expansion feature. This means that tabs will be represented as four spaces in the output of the command, instead of being expanded to match the width of the tabs in the original files. This can be useful when comparing code between different environments or when working with team members who may have different tab settings.'
        no-ext-diff: '[AI] `git diff-files --no-ext-diff` is a Git command used to compare and show the differences between files in the current repository, without invoking external diff or merge tools. The `--no-ext-diff` option disables the use of external diff tools and instead shows the differences using Git''s internal diff algorithm, displaying the differences directly in the terminal.'
        no-filter: '[AI] `git diff-files --no-filter` is a Git command used to show the differences between the textual content of files in the index and those in the working directory. The `--no-filter` option disables any filtering or transformation of the diff output, meaning it will display the differences in an unadorned format. This command is particularly useful when dealing with large binary files where other diff formats like patch (`--patch`) may not be practical.'
        no-indent-heuristic: '[AI] `git diff-files --no-indent-heuristic` is a Git command used to compare files that have been modified between two branches or commits. The `--no-indent-heuristic` option disables Git''s automatic heuristic for detecting indent changes, which might misidentify text reformatting as actual content changes. This flag is particularly useful when dealing with code files where whitespace formatting may be intentionally changed but the underlying logic remains the same.'
        no-index: '[AI] `git diff-files --no-index` is a Git command that shows the differences between files in the working directory and their corresponding files in the last commit. Unlike the standard `git diff` command, `--no-index` option disables Git from comparing files based on their indexed state, and instead compares them based on their actual file contents in the working directory. This can be useful when dealing with untracked or modified files that are not yet added to the Git index.'
        no-max-parents: '[AI] `git diff-files --no-max-parents` is a Git command used to compare the differences between files in the current repository, ignoring any merge commits with more than one parent. This command can be useful when dealing with non-fast-forward changes or merges that don''t require extensive comparison. The `--no-max-parents` option allows Git to show differences for each file individually without showing the merge commit history.'
        no-merges: '[AI] `git diff-files --no-merges` is a Git command used to show the differences between the files in the current repository that have local modifications but no merge conflicts. The `--no-merges` option instructs Git to exclude files with merge conflicts and only display differences for non-mergeable changes. This command can be useful when you want to review the local modifications made to specific files without dealing with merge conflicts.'
        no-min-parents: '[AI] `git diff-files --no-min-parents` is a Git command used to list files with conflicting changes during a merge commit. By default, Git requires that both branches being merged have at least two common ancestors (minimum parents). However, this option disables that requirement, allowing you to compare files even if they do not share any common ancestors. The output will be a list of files and their conflict markers (<<<, >>>) indicating where the conflicts occur between the branches.'
        no-notes: '[AI] `git diff-files --no-notes` is a Git command used to show a list of files with local modifications that do not have associated commit messages (i.e., unstaged changes). The "--no-notes" option prevents the command from displaying any commit messages or other context information, focusing only on the list of affected files.'
        no-object-names: '[AI] `git diff-files --no-object-names` is a Git command used to show a summary of differences between files in the current repository, without displaying object names (commits or blobs). It provides a quick overview of which files have been modified, added, or deleted within a specific range of commits. This can be useful when you want to focus on the file changes themselves rather than the commits that introduced those changes.'
        no-patch: '[AI] `git diff-files --no-patch` is a Git command used to show a list of files in the current repository that have local modifications or unmerged changes when working on a merge conflict. The `--no-patch` option suppresses the output of the difference hunks between the local and remote or base commits. Instead, it displays only the file names and their status, such as "M" for modified files or "U" for unmerged files. This command is helpful when you need to identify which files require your attention in a merge commit without seeing the detailed differences.'
        no-prefix: '[AI] `git diff-files --no-prefix` is a Git command used to show a list of files with differences between the current branch and another specified branch or commit, but without including the prefixes (e.g., "branch name >" or "commit hash >") in the output. It''s particularly useful when working with multiple branches and looking for specific file changes, as it provides a cleaner view of the affected files.'
        no-relative: '[AI] `git diff-files --no-relative` is a Git command that shows a list of files with local modifications, but does not include the relative path to those files in the output. This means the command will only display the file names without specifying their locations within the working directory or repository. The focus is on identifying which files have been modified locally without detailed context about their location in the file system.'
        no-rename-empty: '[AI] The `git diff-files --no-rename-empty` command is used to show a difference report for files that have been modified in a Git repository. However, it excludes empty files that have been renamed from the comparison. This means that if an empty file has been renamed but not modified, it will not be included in the output of this command. The main purpose of using this command is to filter out unwanted differences caused by empty or renamed files that haven''t changed content.'
        no-renames: '[AI] `git diff-files --no-renames` is a Git command used to show the differences between files in the working directory and the index without showing file renameactions. When this option is used, Git will only display additions, deletions, and modifications. File renames are excluded from the output. This can be useful when you want to focus on specific types of changes without being distracted by renames.'
        no-textconv: '[AI] `git diff-files --no-textconv` is a Git command used to show a list of files with local modifications that do not require text filtering, such as binary files. The `--no-textconv` option disables Git''s automatic handling of text filters like ''diff'', ''patch'', or ''mecab''. This command does not display the difference between the files but just lists the names of the changed files.'
        no-walk: '[AI] `git diff-files --no-walk` is a Git command that shows the list of files with local modifications, without considering subdirectories. It compares the HEAD commit with the current working directory and displays the names of files with unstaged changes in the working directory or its siblings but not inside any subdirectories. This command can help identify and stage individual file changes while preserving the tree structure.'
        not: '[AI] `git diff-files --not` is a Git command used to show the names of files in the current repository that have not been modified and are not affected by the latest commit or index changes. The `--not` option filters out files that match the given patterns, in this case, files that have been modified.'
        notes: '[AI] `git diff-files --notes` is a Git command that shows the differences between the current branch and the commit history, including any commit messages associated with file changes. The `--notes` option makes Git include the commit messages related to each file modification in the output. It provides a more informative and contextual view of the changes, allowing users to understand why specific modifications were made.'
        numstat: '[AI] `git diff-files --numstat` is a Git command used to show a summarized statistics about changes between two revisions, in the form of numbers, for each file. The output includes the number of added and deleted lines for each file. The command does not display the actual differences but only the count of additions (plus sign +) and deletions (-) for each file.'
        object-names: '[AI] `git diff-files --object-names` is a Git command that produces a list of unique object names (hashes) for files with unresolved merge conflicts in the working directory and the index. It does not show the differences between the files, but rather provides a means to identify which files have conflicts based on their object names. This command can be useful when automating the process of resolving merge conflicts or when dealing with complex merges involving multiple branches.'
        objects: '[AI] `git diff-files --objects` is a Git command used to list the SHA-1 object hashes of the files with differences between the current branch and another specified branch or commit. The `--objects` option requests that Git output the object names (SHA-1 hashes) rather than the patch diffs. This command can be useful for identifying the specific commits that introduced changes to certain files, and can be used in scripts or other automation workflows.'
        objects-edge: '[AI] `git diff-files --objects-edge` is a Git command used to compare the object names (SHA-1 hashes) of files between two commit states, usually between the working directory and the index or between the index and the head commit. The `--objects-edge` option requests Git to output only the object names of the files that have been modified, added, or deleted, without showing any diff information. It''s particularly useful for scripting or automating tasks where you just need to know the list of changed files without seeing their differences.'
        objects-edge-aggressive: '[AI] `git diff-files --objects-edge-aggressive` is a Git command used to find objects (commits, trees, and blobs) that have changed between two points in a Git repository. The `--objects-edge-aggressive` option makes Git compare the object names themselves instead of their content, which can lead to faster results when dealing with large repositories or when looking for objects with similar content but different names. This command does not display the differences between files, but only lists the changed objects.'
        oneline: '[AI] `git diff-files --oneline` is a Git command that displays the list of files with conflicted changes in a repository, showing only the commit hashes and file names. It provides an overview of files requiring manual resolution during a merge conflict or when merging branches with divergent histories.'
        ours: '[AI] `git diff-files --ours` is a Git command that displays the differences between the working directory files and the version of the files in the current Git index or cache (also known as the staging area). The `--ours` option specifically shows only the differences between the working directory files and the index, discarding any changes made on the other branch. It''s often used to compare the local changes with the intended changes before committing them.'
        output: '[AI] `git diff-files --output` is a Git command that generates a patch file showing the differences between two revisions or between the working directory and the index, without opening an interactive text editor for review and commit. The `--output` option specifies the filename where the output patch will be written. This command is useful when you want to automate generating patches with Git.'
        output-indicator-context: '[AI] `git diff-files --output-indicator-context` is a Git command used to generate a detailed difference report between the files in the current repository. The `--output-indicator-context` option causes Git to include the context (i.e., the surrounding context of the changed lines) in the output. This can be helpful when trying to understand the context of the changes made to a file. The output is typically written to a file rather than being displayed in the terminal.'
        output-indicator-new: '[AI] `git diff-files` is a Git command used to show the list of files that have been modified, added or deleted between two states, such as between the current branch and the last commit. The option `--output-indentifier-new` (or simply `-N`) is used with this command to mark newly created files with an "A" prefix in the output. This can be helpful when automating comparisons of file changes or when dealing with a large number of files.'
        output-indicator-old: '[AI] `git diff-files --output-indicator-old` is a Git command used to compare the differences between files in the working directory and the index. The `--output-indicator-old` option adds prefixes to the hunks (chunks of changes) indicating which file the hunk came from before the commit. This helps to distinguish between changes made in each file when merging conflicts or comparing files. For instance, it might add "[ours]" for changes in the working directory and "[theirs]" for changes in the index.'
        parents: '[AI] `git diff-files --parents` is a Git command used to compare the differences between the parent trees of two commits in a repository. It outputs the difference between the blob (file content) trees of the specified commits, showing which files have been added, modified, or removed at the tree level. By default, it compares the most recent commit and the first parent commit, but you can specify any pair of commits using their SHA-1 hashes. This command is particularly useful when investigating more complex changes in a Git repository where multiple parents are involved, such as merge commits.'
        patch: '[AI] `git diff-files --patch` is a Git command used to generate patch files for each file with unmerged changes when working on merge conflicts or comparing branches. It shows the differences between two file versions in a format called "diff-patches" or "context diffs," which can be applied using tools like `git apply`. The patch includes header information, such as file paths and author details, along with the actual differences presented in a textual format, allowing for easy review and resolution of conflicts.'
        patch-with-raw: '[AI] `git diff-files --patch` is a Git command used to show the differences between files in a patch format, which can be applied with the `--patch` or `--strategic-merge` option. The `--patch-with-raw` (short form: `--patch=raw`) option modifies the output of `--patch` to include raw hunks without any formatting or additional context information, making it suitable for use with scripting or automated tools. This can be useful when applying patches programmatically or in a custom workflow.'
        patch-with-stat: '[AI] `git diff-files --patch-with-stat` is a Git command used to generate patch files for each file with statistics (file size change, percentage of changed lines) included in the patch output. The `--diff-files` option tells Git to generate difference files for all files that have local changes or conflicts. The `--patch-with-stat` option adds the `--stat` output to the patch files, displaying file statistics such as number of added and deleted lines per hunk. This can be useful when reviewing changes made in a codebase or when merging branches.'
        patience: '[AI] `git diff-files --patience` is a Git command used to compare and show the differences between two sets of files in a more readable and merged format. The `--patience` option makes Git display the hunks (chunks) of changed lines with common context, making it easier to review the differences. This is particularly useful when dealing with large or many files with numerous changes.'
        perl-regexp: '[AI] `git diff-files --perl-regexp` is a Git command used to show the differences between files based on Perl-compatible regular expressions (PCRE). It searches for specific text patterns in the difference output, making it useful for finding and comparing changes related to those patterns across multiple files in a repository. The option `--perl-regexp` enables the use of PCRE instead of the default POSIX regex format for specifying search patterns.'
        pickaxe-all: |-
            [AI] `git diff-files --pickaxe-all` is a Git command used to display hunks (chunks) of changed lines between two revisions, with an added option for staging those changes before committing.

            The `--diff-files` argument shows the differences in files instead of the default output showing differences between the index and the working directory. The `--pickaxe-all` option automatically stages (picks) the hunks that are to be committed, allowing for easy review and confirmation before creating a new commit.
        pickaxe-regex: '[AI] `git diff-files --pickaxe-regex` is a Git command used to show the differences between files based on a given regular expression pattern in the commit messages. The `--diff-files` option shows the hunks (differences between specific file sections) for each affected file, while `--pickaxe-regex` allows filtering the results based on the regex pattern found in the commit messages. This command can be helpful when reviewing multiple commits that affect several files and only interested in those that modify a specific text pattern.'
        pretty: '[AI] `git diff-files --pretty` is a Git command that generates output in a customized format when comparing the differences between files in the current repository. The `--pretty` option allows users to specify how the output should be displayed, using various formats like "patch", "makediff", or "unified". By default, it uses the unified format, which shows context around the changes. The command does not show the differences themselves on the terminal but generates a file with the difference information, ready for further processing.'
        progress: '[AI] `git diff-files --progress` is a Git command used to compare the differences between corresponding files in two different branches or commits. The `--progress` option displays the output in a three-way merge format, showing common ancestors, local changes, and remote changes side by side. This makes it easier to understand the merge conflicts and resolve them interactively.'
        q: '[AI] `git diff-files -q` is a Git command used to show a quiet difference report for files that have been modified in the current repository. The `-q` option suppresses the usual output of Git diff and only outputs a single word "diverged" for each file with local or remote changes, or nothing if there are no differences. This command is useful when you want to check for changed files without seeing the detailed difference between them in the console.'
        quiet: '[AI] The `git diff-files --quiet` command is used to show a quiet (i.e., silent) difference report between the working directory and the index or between the index and the HEAD. If there are no differences, it will not output anything. It''s often used in scripts for automating Git workflows where you only care about differences and want to suppress unnecessary output.'
        raw: '[AI] `git diff-files --raw` is a Git command used to compare the textual content of files between two specific commits or tree objects. The `--raw` option ensures that the output is displayed as raw binary data instead of the more common patch format, which shows the differences between files in a human-readable format. This command is particularly useful when comparing large binary files or when working with non-text data, such as image or audio files.'
        reflog: '[AI] `git diff-files --reflog` is a Git command used to compare the current state of files in the working directory with their committed state, as well as with the states that are recorded in the reflog. The reflog tracks the Git history, including deleted and rolled back commits, allowing users to retrieve previous versions of files. With `--reflog`, this command helps users identify the differences between the current file state and those stored in the reflog, which can be useful for recovering lost changes or comparing the evolution of a file over time.'
        regexp-ignore-case: '[AI] `git diff-files` is a Git command used to show the differences between files in the current repository. The `--regexp-ignore-case` option is an argument that makes Git ignore case when performing a regular expression search for differences. This means that Git will only consider differences where the regular expression matches in both files, regardless of whether the case of the characters in the match matters. For example, if you use `git diff-files --regexp-ignore-case /pattern/`, Git will look for differences where `/pattern/` appears in either file, but it won''t consider differences in case (e.g., "Pattern" vs. "pattern") as separate differences.'
        relative: '[AI] `git diff-files --relative` is a Git command that shows the list of files with local modifications compared to the latest commit, displaying only the relative paths between the files in the working directory and their corresponding versions in the index. This command can be useful when dealing with multiple changed files in a repository and wanting to quickly identify which files have been modified locally without seeing the full diff output for each file.'
        relative,: '[AI] `git diff-files --relative` is a Git command that shows the list of files with local modifications or unmerged changes when working on a merge conflict. The `--relative` option displays the file paths relative to the current directory.'
        relative-date: '[AI] `git diff-files --relative-date` is a Git command used to list files with both local and staged changes, along with the number of days since the commit that introduced those changes. The "--relative-date" option displays the difference in days instead of absolute dates (e.g., "3 days ago" rather than "2021-08-12"). This command helps identify recently modified files and their age relative to the most recent commit.'
        remotes: '[AI] `git diff-files --remotes` is a Git command used to show the differences between your local files and their counterparts in the upstream repositories. It doesn''t stage or prepare files for commit; it simply displays the differences. This can be helpful for identifying changes that may have been introduced upstream and not yet pulled into your local repository.'
        remove-empty: '[AI] `git diff-files --remove-empty` is a Git command that shows the differences between files in the current repository. The `--remove-empty` option tells Git to exclude empty files from the comparison. This means that if there are two versions of a file, one empty and one non-empty, this command will only show differences for non-empty files.'
        rename-empty: '[AI] `git diff-files --rename-empty` is a Git command used to show differences between the names of files in the working directory and their corresponding files in the last commit. When a file is deleted in the repository and a new file with the same name is added or modified in the working directory, this command will highlight those changes by showing the deleted file name followed by a `->` symbol and the new file name. If there are only renamed files in the differences, this command will display empty commits, hence the `--rename-empty` option.'
        reverse: '[AI] `git diff-files --reverse` is a Git command that shows the differences between the files in the current repository, with the output ordered from the latest to the oldest commit. By default, `git diff-files` displays the differences for each file pair (i.e., the differences between the working directory and the index or between the index and the last commit). The `--reverse` option reorders the results so that the most recent changes appear first.'
        right-only: '[AI] `git diff-files --right-only` is a Git command that displays the differences between the index and the working directory files, showing only the right (working) side of the differences. This means it shows how the files in your working directory differ from their respective staged versions without displaying the changes made to the staged files. It''s useful when you want to see the modifications you have made to specific files but don''t need to compare them with their previous states.'
        rotate-to: '[AI] `git diff-files --rotate-to` is a Git command used to compare and display differences between three files or sets of files in a repository, with the third file being rotated each time the command is run. The first two files are specified as arguments, and Git will show the differences between the first file and the second file, as well as the differences between the second file and the rotated third file. This can be useful for comparing the same set of changes across multiple files or branches.'
        shortstat: '[AI] `git diff-files --shortstat` is a Git command that generates a summary of changes between the current branch and the last commit on each named file or in the working directory. The output consists of a series of lines, each representing a file. Each line starts with the name of the file followed by three numbers: `<num_add> <num_delete> <num_changed>`. These numbers represent the number of added lines, deleted lines, and modified lines in that file, respectively. This command provides a quick overview of the changes made to individual files without showing the detailed diff output for each change.'
        show-linear-break: '[AI] `git diff-files --show-linear-break` is a Git command used to display the differences between the files in the current repository that have local changes but no corresponding changes in the head of the branch. The `--show-linear-break` option causes Git to output the differences in a linear format, making it easier to see the context and understand the changes. Essentially, this command helps developers identify and review the local changes that are unique to their working directory without any conflict with the remote repository.'
        show-notes-by-default: '[AI] `git diff-files` is a Git command used to compare and display the differences between files in your repository. The option `--show-notes-by-default` is used to display commit messages or notes along with the file difference output. This can be helpful when working on large projects with many changes, as it allows you to quickly identify which changes correspond to which commits.'
        show-pulls: '[AI] `git diff-files --show-pulls` is a Git command that displays a list of files with merge conflicts between two branches. It shows the names of the conflicting files and the branch names that introduced each change. This command helps in resolving merge conflicts by identifying which files need attention, making it useful during pull requests or merging branches.'
        show-signature: '[AI] `git diff-files --show-Signature` is a Git command used to display the commit signatures of files with conflicting changes in a merge or rebase operation. It helps identify which commits introduced the differences between the files and provides the author and committer dates, as well as the SHA-1 commit identifiers for each change. This information can be useful in resolving conflicts by understanding the origin of the modifications.'
        simplify-by-decoration: '[AI] `git diff-files --simplify-by-decoration` is a Git command used to display a simplified difference report between files with different branches or commits marked by decorations (such as branch names). It reduces the amount of output by merging differences that only consist of renames or moves between files under the same directory. This can make it easier to identify and resolve conflicts when working on a project with multiple branches or collaborators.'
        simplify-merges: |-
            [AI] `git diff-files --simplify-merges` is a Git command used to help manage and simplify complex merge conflicts during a git merge operation. When Git encounters merge conflicts, it marks the affected files with a "U" status in the git index, indicating unmerged changes.

            The `--simplify-merges` option is designed to automatically apply some sensible merging strategies when there are multiple branches being merged together. It can simplify the merge process by automatically resolving simple merge conflicts and leaving more complex ones for the user to handle interactively.

            It does this by attempting to find a common base commit between the branches, taking the changes from each branch that do not conflict with the other, and applying those changes non-conflictingly. This can make it easier for developers to deal with merge conflicts in larger or more complex projects where multiple branches may need to be merged together.
        since: '[AI] `git diff-files --since` is a Git command used to show the differences between files that have been modified since a specific date or time. The command takes a date or a relative time argument and displays the unstaged changes in the working directory for those files. It does not create a new commit but only shows the differences, allowing users to review and decide if they want to stage and commit the changes.'
        since-as-filter: '[AI] `git diff-files --since-as-filter` is a Git command used to show the differences between files that have been modified since a specific date. The `--since-as-filter` option takes a date argument in the format of "YYYY-MM-DD" or "ago", followed by a number representing the number of days or weeks, e.g., `2021-10-15` or `2 days ago`. The command compares the HEAD version of files with their versions that existed before the given date and displays only those files with differences. It''s useful for reviewing changes made within a specific time frame.'
        single-worktree: '[AI] `git diff-files --single-worktree` is a Git command that compares and shows the differences between the working directory and the index for all files in the current repository, treating them as if they are in a single worktree. This means that the command will only show differences that affect common files across multiple heads or branches, ignoring any changes unique to each branch or commit. It''s useful when you want to compare the difference between two branches without considering local modifications on each branch.'
        skip: '[AI] `git diff-files --skip` is a Git command that compares the files in the current repository and shows the differences between them. However, it skips the display of any file difference details by default, making it useful when you want to quickly check which files have changes without seeing the actual differences.'
        skip-to: '[AI] `git diff-files --skip-n` command is used to skip over a specified number of differences when displaying the output of a Git diff. The `--skip-to` option followed by an integer `n` allows you to start showing differences from index `n`. It''s often used when dealing with large diffs and wanting to focus on specific changes.'
        sparse: '[AI] `git diff-files --sparse` is a Git command used to show the list of files in the working directory that have local modifications but no corresponding changes tracked by Git. The `--sparse` option enables or disables sparse checkouts for the listed files or directories. In other words, it allows selectively ignoring or tracking specific files based on .gitignore rules without modifying the .gitignore file itself.'
        src-prefix: '[AI] `git diff-files --src-prefix` is a Git command used to compare and list the differences between files in the working directory and their corresponding files in the last commit. The `--src-prefix` option specifies a prefix string that will be added to filenames in the output, making it easier to identify which file versions correspond to the working directory and which correspond to the commit. For example, if you run `git diff-files --src-prefix=w:` with files named "file1.txt" and "file2.txt" respectively, the output will display "w:file1.txt" for the working directory version and "file1.txt" for the committed version.'
        stat: '[AI] `git diff-files --stat` is a Git command used to display a summary of changes between the working directory and the last commit. The `--stat` option provides a more detailed statistics output, showing the number of added, modified, and deleted files in each hunk (changeset). The output includes the name of the file, followed by the number of additions, deletions, and total changes for that file, as well as the percentage of changed lines.'
        stat-count: '[AI] `git diff-files --stat` is a Git command that displays a summary of changes between the working directory and the index for each file in the current repository. The `--stat` option provides a statistics output, showing the number of added, modified, and deleted lines for each file. The `--count` option adds a final line to the output displaying the total number of changed files and the total number of added, modified, and deleted lines across all files. Thus, `git diff-files --stat-count` shows a concise statistics summary of changes in the current repository, including the total number of changed files and the total number of added, modified, and deleted lines.'
        stat-graph-width: '[AI] `git diff-files --stat-graph-Width` is a Git command used to generate a graphical representation of file changes between two commit points. The `--stat` option provides a statistical overview of the changes, while `--stat-graph` generates a text-based ASCII graph, and `--stat-graph-width` sets the width of the graph output. This command helps developers visualize the scope and distribution of file modifications in a given Git repository.'
        stat-name-width: '[AI] `git diff-files --stat` is a Git command that displays a summary of changes between the working directory and the index for each file in the current repository. The `--stat-name-width` option sets the maximum width for filenames in the statistics output, allowing them to be truncated if needed. This can be useful when dealing with long filenames to make the output more readable.'
        stat-width: '[AI] The `git diff-files --stat` command displays a summary of changes between the working directory and the index or between two branches/commits, using statistics. The option `--stat-width <width>` sets the maximum column width for the statistics output. With `--stat-width`, you can control the length of the commit message text that is displayed alongside the statistics to fit within your terminal window.'
        stdin: '[AI] `git diff-files --stdin` is a Git command that reads input from standard input to compare the differences between two files or sets of files. It does not display the difference output directly in the terminal, instead, it writes the differences to its standard output stream, which can be then piped to another command for further processing. This command is particularly useful when integrating automated tools with Git to perform diff operations on large numbers of files.'
        submodule: |-
            [AI] `git diff-files --submodule` is a Git command used to show differences between the committed and working directory versions of files in your project, including those within submodules. By default, Git does not track changes to files within submodules as part of the parent project's repository.

            When you run this command, Git will list the files within each submodule that have been modified locally but not yet committed or have conflicting changes. For each file, Git will display a summary of the differences between the HEAD commit and your working directory. This can help you identify which submodule files need further attention before committing the changes to the parent repository.
        summary: '[AI] `git diff-files --summary` is a Git command that provides a summary of the differences between the current branch and the last commit, across all files. It displays the name of each file with the number of added, modified, or deleted lines for each file in a concise way. This command is useful to quickly see what changes have been made in the repository at a high level without having to manually inspect individual files.'
        tags: '[AI] `git diff-files --tags` is a Git command used to show the differences between the tagged versions of specific files in the repository. When you run this command, Git will compare the file content at the time of each tag and print out the differences, if any exist, for each file mentioned. This can be useful for understanding what changed in a file between different tagged releases.'
        text: '[AI] `git diff-files --text` is a Git command that displays the differences between the textual content of files in the current repository. The `--text` option instructs Git to only show differences in text files and ignore changes in binary files. It provides the difference between the working directory, index, and head commit in text format, which can be reviewed and manually resolved if needed before committing changes.'
        textconv: '[AI] `git diff-files --textconv` is a Git command used to generate a patch series based on textual differences between files in the working directory and their counterparts in the index or in another branch. The `--textconv` option specifies that the output format should be text, specifically a series of hunks which can be applied using tools like `git apply`. This command is often used when dealing with complex text-based changes such as translations or configuration files.'
        theirs: '[AI] `git diff-files --theirs` is a Git command that shows the differences between the files in the local and the remote repositories, displaying only the changes from the remote repository (i.e., their changes). In other words, it presents the differences that would be applied when fetching or merging the changes from the remote branch into the local one.'
        timestamp: '[AI] `git diff-files --timestamp` is a Git command used to show files that have been modified since a particular commit, based on their last modification timestamp. This command does not display the differences between those files but simply lists them out. By default, it compares the current branch''s HEAD with the previous commit. If no branch is specified, it uses the HEAD of the current branch. It can help users identify which files need attention in larger projects or when they want to see a snapshot of file changes at a specific point in time.'
        topo-order: '[AI] `git diff-files --topo-order` is a Git command used to list files with conflict markers when there are merge conflicts in a Git repository. The `--topo-order` option makes Git list the files in the order they appear in the commit history, preserving the topological structure of the branches being merged. This can be helpful for resolving complex merge conflicts by providing insight into the relationship between files and commits.'
        u: '[AI] `git diff-files -u` is a Git command used to show the unified difference between two sets of files, usually from different branches or commits. The `-u` option displays the difference using an "unified" format, which highlights the added, deleted, and changed lines with context for better understanding. It''s commonly used when you want to compare and review changes before merging branches or resolving conflicts.'
        unified: '[AI] `git diff-files --unified` is a Git command used to compare and display the differences between files in a unified format. This means that the output will show each hunk (a contiguous, logically distinct portion of a file) with its added or deleted lines highlighted, and the context (surrounding unchanged lines) displayed as well. This can be helpful when reviewing changes made to multiple files in a Git repository.'
        unpacked: '[AI] `git diff-files --unpacked` is a Git command used to show the differences between files in the working directory and their corresponding committed versions, but without taking into account changes made in the Git index or staging area. By adding the `--unpacked` option, it compares the actual files in the worktree (i.e., not taking into account the changes staged for commit). This can be useful when dealing with untracked files or when you want to see differences between your working files and the last commit without considering any intermediate changes in the index.'
        until: '[AI] `git diff-files --until` is a Git command used to show differences between files in a repository up to a specified commit. The `--until` option specifies the commit up to which the differences will be displayed. For example, `git diff-files --until <commit>` will display the differences between the current branch and the specified commit. This command does not create or apply any changes, it simply shows the differences for review.'
        use-bitmap-index: |-
            [AI] `git diff-files --use-bitmap-index` is a Git command used to compare and list files that have been modified, added, or deleted between two states in a repository. The `--use-bitmap-index` option enables the use of a bitmap index for faster performance when dealing with large repositories.

            The bitmap index maintains a compact representation of file changes using bits instead of a full list, which results in quicker access and fewer disk reads. When this option is set, Git generates and stores the bitmap index during the `git diff-index` or `git diff` command execution. This leads to improved performance when running these commands on large repositories with numerous modified files.
        use-mailmap: '[AI] `git diff-files --use-emailmap` is a Git command that shows the differences between two revisions, taking into account email address renamings recorded in the `git config usermap.file`. It helps maintainers to track changes across authors with evolving email addresses and make it easier to identify the actual commits made by specific contributors when viewing differences between revisions.'
        walk-reflogs: '[AI] `git diff-files --walk-reflogs` is a Git command used to show the differences between the current and previous states of files that have been modified in multiple commits, including those reached by following reflog history. It can help identify changes that were made over time but have since been rolled back or reverted in later commits. The output shows a side-by-side diff for each file.'
        word-diff: '[AI] `git diff-files --word-diff` is a Git command that displays the difference between two file versions with word-wrapped and highlighted changed words. This command does not show line additions, deletions, or context by default but instead focuses on highlighting modified words within each line. It''s useful for quickly spotting specific text changes in multiple files.'
        word-diff-regex: '[AI] `git diff-files` is a Git command used to compare and show the differences between files in the current repository. The `--word-diff-regex` option is a suboption that enables regular expression matching for word-level diffs. When enabled, only changes at the word level are shown as diffs, with each changed word being highlighted with `+` or `-` signs based on whether it was added or removed. This can be useful when dealing with large files or text-heavy changes, making it easier to quickly identify and focus on specific modifications.'
        ws-error-highlight: '[AI] `git diff-files --ws-error-highlight` is a Git command used to show a list of files with conflicts between your working directory and the index or between the index and the head, specifically highlighting the hunks with merge conflicts where both sides made changes to the same lines. The `--ws-error-highlight` option enables syntax highlighting for error messages in the output, making it easier to identify and resolve conflicts.'
        z: '[AI] `git diff-files --zed` is a Git command used to compare the contents of files between two specific revisions or branches in a repository, but instead of printing the differences directly to the terminal, it writes them as zero-delimited strings to standard output. This option is useful when working with scripts and tools that require differences to be provided in this format for further processing.'
