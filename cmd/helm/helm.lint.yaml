# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: lint
description: examine a chart for possible issues
group: main
flags:
    --set*=: 'set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --set-file*=: 'set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)'
    --set-string*=: 'set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --strict: fail on lint warnings
    --with-subcharts: lint dependent charts
    -f, --values*=: specify values in a YAML file or a URL (can specify multiple)
documentation:
    command: '[AI] `helm lint` is a Helm command used to check the validity and consistency of Helm charts, which are used for deploying and managing applications on Kubernetes. The command performs static analysis on the chart files, checking them against Helm''s schema definitions, best practices, and other rules, and reports any issues or warnings that it finds. It is an essential step in ensuring the quality and reliability of Helm charts before deploying them to a production environment.'
    flag:
        set: '[AI] `helm lint --set` is a command used in Helm, the Kubernetes Package Manager, to perform a linting check on Helm charts. Linting is the process of analyzing source code for potential errors or issues that don''t prevent the code from running but could lead to problems later on. The `--set` flag is an optional argument that allows users to override specific chart values during the linting process, making it easier to test changes without having to modify the original chart files directly. This command helps ensure the quality and maintainability of Helm charts before deploying them in production environments.'
        set-file: '[AI] `helm lint --set-file` is a command used in Helm, the Kubernetes Package Manager, to check the syntax and validity of Helm Charts. The `--set-file` flag allows you to specify a YAML file containing overrides for chart values. This can be useful when you want to test how your changes will affect the chart without actually deploying it yet. The lint command checks the chart against Helm''s schema, and if any issues are found, they will be reported back to you.'
        set-string: '[AI] `helm lint --set-string` is a command used in Helm, a popular Kubernetes package manager. This command runs Helm''s built-in linter against your Helm chart to find and suggest fixes for potential issues or errors, improving the overall quality of your chart. The `--set-string` option is specifically used to set or update values in YAML files using strings. With this flag, any string value changes specified will be applied during the linting process.'
        strict: '[AI] `helm lint --strict` is a command used in Helm, the Kubernetes package manager, to perform static analysis on Helm charts. The `--strict` flag increases the level of strictness of the linter checks. It means that all identified issues must be fixed before continuing, unlike the regular linting where some warnings may be ignored if desired. This is useful for ensuring high chart quality and adherence to best practices.'
        values: '[AI] `helm lint --values` is a Helm command used for validating the values files in a Helm chart. It checks the syntax and consistency of the HCL (Hashicorp Configuration Language) format used to customize chart templates with user-provided variables. The command does not install or upgrade any charts, it only reports errors and warnings if found in the specified values files.'
        with-subcharts: |-
            [AI] `helm lint --with-subcharts` is a command used in Helm, a popular package manager for Kubernetes. This command runs a linting process on Helm charts, which are templates used to define, install, and upgrade applications on Kubernetes.

            The `--with-subcharts` flag enables the linting of subcharts within the main chart being tested. Subcharts are reusable components that can be included as dependencies in a Helm chart. By using this flag, Helm will check not only the main chart but also its subcharts for potential issues or non-compliance with best practices and Helm file structure standards. This helps ensure that all components of a complex application are up to par, improving overall quality and maintainability.
