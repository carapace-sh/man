# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fast-import
description: Backend for fast Git data importers
group: manipulator
flags:
    --active-branches=: Maximum number of branches to maintain active at once
    --allow-unsafe-features: Enable unsafe options
    --big-file-threshold=: Maximum size of a blob that fast-import will attempt to create a delta for
    --cat-blob-fd=: Write responses to get-mark, cat-blob, and ls queries to the file descriptor <fd> instead of stdout
    --date-format=: Specify the type of dates the frontend will supply
    --depth=: Maximum delta depth, for blob and tree deltification
    --done: Terminate with error if there is no done command at the end of the stream
    --export-marks=: Dumps the internal marks table to <file> when complete
    --export-pack-edges=: After creating a packfile, print a line of data to <file>
    --force: Force updating modified existing branches
    --import-marks-if-exists=: Like --import-marks but instead of erroring out
    --import-marks=: Before processing any input, load the marks specified in <file>
    --max-pack-size=: Maximum size of each output packfile
    --no-relative-marks: Paths are not relative to an internal direcotyr
    --quiet: Disable the output shown by --stats
    --relative-marks: Paths are relative to an internal directory
    --rewrite-submodules-from=: Rewrite the object IDs for the submodule specified by <name>
    --rewrite-submodules-to=: Rewrite the object IDs for the submodule specified by <name>
    --stats: Display some basic statistics about the objects fast-import has created
documentation:
    command: '[AI] `git fast-import` is a Git command-line tool for importing and exporting Git repositories in an efficient way using a custom format called FIDL (Fast Import Data Language). It''s particularly useful when dealing with large repositories or when importing data from other version control systems. The command imports the repository data directly into the Git index database, bypassing the need to create a new working directory and performing a clone operation. This results in faster import times compared to regular cloning.'
    flag:
        active-branches: '[AI] `git fast-import` is a Git command used for importing Git repositories in a customizable and efficient way, particularly useful when dealing with large or complex repositories. The `--active-branches` option is one of its flags that controls which branches to import. It only imports the currently checked out branches (local and remote) as active branches in the new repository. This can reduce the amount of data being imported, making the process faster and more memory-friendly.'
        allow-unsafe-features: '[AI] `git fast-import` is a Git command for importing Git repositories in an efficient and flexible way, particularly useful for large or complex repositories. The `--allow-unsafe-features` option is a safety feature that allows the command to import potentially risky objects and references, such as those with invalid timestamps or loose objects, which are not normally allowed due to security concerns. By using this flag, the user assumes the responsibility of handling potential issues that may arise from importing these objects. It should be used with caution and only when necessary.'
        big-file-threshold: '[AI] `git fast-import` is a Git command used to import data into a Git repository from a variety of sources, including other Git repositories and plain text files. The option `--big-file-threshold` sets the size limit (in bytes) above which Git considers a file to be "big." When dealing with large files that exceed this threshold, Git can use alternative methods for handling them to improve performance and reduce memory usage during import. By default, the big file threshold is set to 100MB, but it can be adjusted using this option.'
        cat-blob-fd: '[AI] `git fast-import --cat-blob-fd` is a Git command used for importing data into a Git repository from an external source, such as a file or another Git repository. The `--cat-blob-fd` option tells Git to read blob objects (binary files) directly from file descriptors instead of reading them from the pack or loose files in the local Git repository. This can be useful for importing large binary files more efficiently, as it avoids the need to unpack and rebuild the entire object graph in memory.'
        date-format: '[AI] `git fast-import` is a Git tool used to import data from other Git repositories into the current one. The `--date-format` option is used to specify the date format in the imported data. By default, Git uses RFC 2822 date format (e.g., "Thu, 1 Jan 2023 00:00:00 +0000"). However, `--date-format` allows specifying other formats, such as ISO 8601 ("2023-01-01T00:00:00Z") or Unix timestamp ("1672492800"). This option helps ensure that the date and time information in the imported data is correctly parsed by the receiving Git repository.'
        depth: |-
            [AI] `git fast-import` is a Git command used for importing repository data in an efficient way, especially when dealing with large repositories or archive files. The `--depth` option is a parameter that specifies the import depth.

            When using `--depth=n`, `fast-import` will only import commits and their immediate child commits up to level `n`. This means that it will not import all branches, but only the specified number of commits along each branch from the root of the repository. By doing so, it reduces the amount of data that needs to be imported, making the operation faster and using fewer resources.

            For example, `--depth=2` would import the first two commits of every branch. This is useful when you only need a subset of the repository history for your tasks.
        done: '[AI] `git fast-import --done` is a Git command used to import data into a Git repository using the Git Fast Import (GFI) format. The `--done` option filters the imported data to only include objects that have been fully imported, meaning all their references are present and valid. This can help speed up the import process by skipping over objects that don''t need to be reprocessed, as they''ve already been successfully imported.'
        export-marks: '[AI] `git fast-import --export-marks` is a Git command used for exporting branch marks or annotated tags from a Git repository into a file in FID format (Fast Import Data). These marks can then be imported into another Git repository using the `git fast-import` command with the `--import-marks` option. This functionality can be useful when transferring annotated tags or branches between repositories, especially large ones where the full history might not be needed but only specific marks.'
        export-pack-edges: '[AI] `git fast-import` is a Git command used for importing data into a Git repository. The `--export-pack-edges` option generates an edge list file along with the pack files when exporting data. This edge list contains metadata about the pack files and their inter-relationships, enabling efficient indexing and searching of the imported data. It''s particularly useful in large or distributed repositories for faster lookups and reduced network traffic.'
        force: '[AI] `git fast-import` is a Git command-line tool used for importing Git repositories in an efficient and flexible way, especially for large or fragmented repositories. The `--force` option is used when importing an existing Git repository to overwrite the current local repository with the new data. This can lead to loss of local commits if not used carefully. It''s recommended to use it only when you intend to completely replace the current repository with the imported one.'
        import-marks: '[AI] `git fast-import` is a Git command used for importing data into a Git repository in an efficient way, particularly useful for large or multiple repositories. The `--import-marks` option allows the user to import only specific objects marked with particular names or types. This can be helpful when importing partial content from another repository, such as commits or tags with specific labels. It speeds up the import process by skipping unnecessary objects, reducing network traffic and disk space usage.'
        import-marks-if-exists: '[AI] `git fast-import` is a Git command used to import data into a Git repository from a variety of sources, including other Git repositories or Git pack files. The `--import-marks-if-exists` option tells `git fast-import` to import commit marks (also known as annotated tags) even if they already exist in the target repository. By default, `git fast-import` will skip existing marks during import. With this option, you can ensure that all marks are imported, regardless of their existence in the destination repository. This is useful when importing a complete Git history with all its annotated tags into a new or empty repository.'
        max-pack-size: '[AI] `git fast-import` is a Git command used for importing Git repositories in an efficient and flexible way, especially when dealing with large or multiple repositories. The `--max-pack-size` option sets the maximum size (in bytes) for individual pack files created during the import process. This can be useful when you want to limit the size of pack files due to disk space constraints or network bandwidth limitations. By default, Git does not have a limit on pack file size.'
        no-relative-marks: '[AI] `git fast-import` is a Git command used for importing Git repositories in an efficient way, especially large ones. The `--no-relative-marks` option disables the creation of relative references when importing. Relative references are shortcuts to other commits or branches within the same repository, and they help reduce the amount of data that needs to be transferred during import. However, if you don''t need this optimization or prefer to have all commit references imported as absolute SHA-1 hashes, using `--no-relative-marks` will disable their creation.'
        quiet: '[AI] `git fast-import --quiet` is a Git command used for importing data from a Git repository into another one, typically from a large or corrupted repository. The `--quiet` option suppresses informational messages during the import process, making it suitable for use in automated or batch scripts where excessive output might interfere. It imports objects and references from a given file or standard input stream.'
        relative-marks: '[AI] `git fast-import` is a Git tool for importing Git repositories in a customizable and efficient way, especially large ones. The `--relative-marks` option is used when importing data from another Git repository, allowing the imported commits to reference their parents using relative rather than absolute SHA-1 hashes. This can make the import process faster and easier when dealing with repositories with a complex history or many branches.'
        rewrite-submodules-from: '[AI] `git fast-import` is a Git command-line tool for importing Git repositories in a customized and efficient way, particularly large or complex ones. The `--rewrite-submodules-from` option is used when importing a repository with submodules to update their references based on the new imported state, instead of keeping the old external links. In other words, it ensures that the imported submodules are fully integrated into the main repository.'
        rewrite-submodules-to: '[AI] `git fast-import` is a Git tool used for importing and converting Git data, especially from other version control systems or raw Git repositories. The `--rewrite-submodules` option modifies how submodules are imported. When combined with `--rewrite-submodules=to`, it tells Git to replace existing submodule references with new ones that point to the imported submodule data. This can be useful when importing a repository that contains submodules and you want to ensure they are properly integrated into the main project.'
        stats: '[AI] `git fast-import --stats` is a Git command used for importing data into a Git repository in a more efficient way than using regular `git clone`. The `--stats` option generates statistics about the imported objects and refs, displaying the number of new, updated, and deleted objects, as well as the size of each category. This can be helpful to understand the changes made between two Git repositories or to monitor the growth of a repository over time.'
