# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: add
description: Add dependency to a Cargo.toml manifest file
group: manifest
flags:
    --branch=: Git branch to download the crate from
    --build: Add as build dependency
    --default-features: Re-enable the default features
    --dev: Add as development dependency
    --dry-run: Don't actually write the manifest
    --git=: Git repository location
    --ignore-rust-version: Ignore `rust-version` specification in packages (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Disable the default features
    --no-optional: Mark the dependency as required
    --optional: Mark the dependency as optional
    --path=: Filesystem path to local crate to add
    --registry=: Package registry for this dependency
    --rename=: Rename the dependency
    --rev=: Git reference to download the crate from
    --tag=: Git tag to download the crate from
    --target=: Add as dependency to the given target platform
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help (see more with '--help')
    -p, --package=: Package to modify
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo add` is a command used in Rust programming language''s package manager, Cargo. It allows you to quickly add new dependencies to your project''s `Cargo.toml` file without having to manually edit it. When you run `cargo add <package>`, Cargo will download the latest version of the specified package and its dependencies, then update the `Cargo.toml` file accordingly. This saves time and reduces errors when managing project dependencies.'
    flag:
        branch: '[AI] `cargo add --branch` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a dependency from a specific branch of a Git repository instead of the default one. The syntax is as follows: `cargo add <crate> --branch <branch-name>`. It fetches the code from the specified Git branch and adds it as a dependency in the project''s Cargo.toml file. This can be useful when developing with or depending on a specific feature or change that isn''t yet stable or merged into the main repository.'
        build: '[AI] `cargo add --build` is a command used in Rust programming language''s Cargo build tool. This command is used to add a new dependency to the project''s Cargo.toml file and download its source code, along with building the project to ensure the newly added dependency compiles correctly. It automates the process of manually editing the Cargo.toml file to add a new dependency, running `cargo add <dependency>`, and then running `cargo build` to check for any compilation errors.'
        default-features: '[AI] `cargo add --default-features` is a command used in Rust programming language''s Cargo build system. This command is used to add a new dependency to the project''s Cargo.toml file and enable all default features of that dependency. By enabling default features, the project automatically gets additional functionality provided by the dependency without having to explicitly list each feature. This can simplify the management of dependencies and their features in larger projects.'
        dev: '[AI] `cargo add --dev` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a new dependency with the `dev` (development) dependency scope. A dev dependency is a crate that is not required for the binary to run but is needed during development, such as testing frameworks or documentation generators. The `--dev` flag tells Cargo to add this dependency to the `dev-dependencies` section in the project''s `Cargo.toml` file.'
        dry-run: '[AI] `cargo add --dry-run` is a command used in Rust programming language''s package manager, Cargo. This command simulates the addition of a new dependency or package to your project''s Cargo.toml file without actually making the change. It shows you what would be added if you run `cargo add` with that specific dependency as an argument. It helps in planning and avoiding potential version conflicts or other unintended consequences before executing the actual command.'
        features: '[AI] `cargo add --features` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a new dependency to the project''s `Cargo.toml` file and enable specific features of that dependency. The `--features` flag specifies which features to enable when adding the dependency. This allows for fine-grained control over what parts of the dependency are included in your project.'
        git: '[AI] `cargo add --git` is a command used in Rust programming language''s package manager, Cargo. This command allows adding a new dependency to the project''s Cargo.toml file by cloning a Git repository as a manual dependency. The Git URL of the repository needs to be provided as an argument, and Cargo will clone it into the `.cargo` directory of your project. This command is useful when the dependency you want to add does not have a registered crate on crates.io registry.'
        help: |-
            [AI] `cargo add` is a Cargo subcommand used to install and add dependencies to a Rust project's `Cargo.toml` file in one step. The `--help` flag provides information about how to use this command effectively, including the general syntax, available options, and examples. Here's a brief summary:

            `cargo add [OPTIONS] <DEP_NAME>...`

            - Installs the specified dependencies (`<DEP_NAME>`) using their latest version by default.
            - Adds the dependencies to the `Cargo.toml` file under `[dependencies]`.
            - Optionally, specify different versions of a dependency with `--version <VERSION>`, or use `--features` to enable/disable specific features.

            Using `cargo add --help` will display more detailed information on these options and examples of usage.
        ignore-rust-version: '[AI] The `cargo add --ignore-rust-version` command is used when adding a dependency to a Rust project with Cargo build system. This flag tells Cargo to ignore any specified version range for the Rust compiler (rustc) in the dependency''s `Cargo.toml` file, and use the one currently available in the project instead. In other words, it allows adding dependencies without specifying or updating the rustc version.'
        manifest-path: |-
            [AI] `cargo add` is a Cargo subcommand used to install a dependency or a Git repository as a new dependency in your Rust project's Cargo.toml file. The `--manifest-path` option specifies the path to the Cargo manifest file (Cargo.toml) of the project where you want to add the dependency. This way, `cargo add` can modify the correct manifest file when installing new dependencies. For example:

            ```sh
            $ cargo add --manifest-path /path/to/project/Cargo.toml package_name
            ```

            This command will add the specified dependency to the project located at `/path/to/project`.
        no-default-features: '[AI] `cargo add --no-default-features` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a new dependency to the project''s `Cargo.toml` file without enabling any of its default features. By not enabling default features, you can have finer control over which parts of the dependency are included in your project and potentially reduce the overall size and runtime of your project.'
        no-optional: '[AI] `cargo add --no-optional` is a command used in Rust programming language''s package manager, Cargo. It is used to add a new dependency to the project''s Cargo.toml file without installing or downloading it right away. The `--no-optional` flag means that only the required dependencies will be added and not their optional dependencies. This can help keep the size of your project smaller and avoid potential conflicts from optional dependencies.'
        optional: '[AI] `cargo add --optional` is a command used in Rust programming language''s package manager Cargo. This command allows you to add a new dependency with an optional feature into your project''s `Cargo.toml` file without enabling it by default. By using the `--optional` flag, you can opt to enable or disable the feature when building your project based on specific use cases. This provides flexibility while managing dependencies and their features.'
        package: '[AI] `cargo add --package` is a command used in Rust programming language''s package manager, Cargo. This command facilitates adding a new dependency to your project''s `Cargo.toml` file without having to manually edit it. When executed, Cargo downloads and installs the required crate (Rust library or executable), and updates the `Cargo.toml` file accordingly.'
        path: '[AI] `cargo add --path` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a dependency that is not yet registered in the Cargo registry (crates.io) as a git repository or local path. The `--path` option specifies the path to the directory containing the custom crate. When you run this command, it will automatically update your `Cargo.toml` file with the necessary configuration to include the new dependency in your project.'
        quiet: '[AI] `cargo add --quiet` is a command used in Rust programming language''s package manager, Cargo. It is used to download and add dependencies to your project''s `Cargo.toml` file without displaying any progress messages or notifications during the addition process. This can be useful for running automated scripts or for minimizing output when adding multiple dependencies at once.'
        registry: '[AI] The `cargo add --registry` command is used in Rust programming language''s package manager, Cargo. This command allows you to add a new dependency or library to your project''s Cargo.toml file directly from a registry such as crates.io. The flag `--registry` specifies the registry URL as an argument, which by default is set to crates.io. So, `cargo add --registry <registry_url> <package_name>` adds the specified package to your project and updates the Cargo.toml file accordingly.'
        rename: |-
            [AI] `cargo add --rename` is a command used in Rust programming language's package manager, Cargo. It adds a new dependency to your project's `Cargo.toml` file and renames the imported crate if needed. The syntax is:

            ```sh
            cargo add [crate] [new_name]
            ```

            Replace `[crate]` with the name of the crate you want to add, and `[new_name]` (optional) with the new name you want for the imported crate in your project. This command updates both the dependencies section and the names section in your `Cargo.toml` file automatically.
        rev: '[AI] `cargo add --rev` is a command used in Rust programming language''s package manager, Cargo. This command is used to add a dependency to the project''s `Cargo.toml` file with a specific Git revision instead of the latest version. The revision can be specified by a commit hash or a branch name. This is useful when developing with a specific version of a dependency that may not yet be released or if there''s a need to fix a bug in the dependency code.'
        tag: '[AI] The `cargo add --tag` command is used in Rust programming language''s package manager, Cargo. It allows you to add a new dependency with its specific tagged version to your project''s `Cargo.toml` file instead of the latest or default version. This can be useful when you want to pin down a dependency to a certain version for consistency across projects or for testing purposes.'
        target: '[AI] `cargo add --target` is a command used in Rust programming language''s Cargo build tool. This command adds a dependency to the project''s `Cargo.toml` file, specifying the target for which this dependency is required. For instance, if you have multiple targets in your project (e.g., lib and bin), you may need different dependencies for each. By using `cargo add --target <TARGET> <DEPENDENCY>`, you are adding that specific dependency only for the specified target.'
