# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bench
description: Run benchmarks
flags:
    --allow-env?: Allow environment access
    --allow-ffi?: Allow loading dynamic libraries
    --allow-hrtime: Allow high resolution time measurement
    --allow-net?: Allow network access
    --allow-read?: Allow file system read access
    --allow-run?: Allow running subprocesses
    --allow-write?: Allow file system write access
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --check?: Type check modules
    --compat: 'UNSTABLE: Node compatibility mode.'
    --filter=: Run benchmarks with this string or pattern in the bench name
    --ignore?: Ignore files
    --import-map=: Load import map file
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check?: Skip type checking modules
    --no-clear-screen: Do not clear terminal screen when under watch mode
    --no-config: Disable automatic loading of the configuration file.
    --no-prompt: Always throw if required permission wasn't passed
    --no-remote: Do not resolve remote modules
    --seed=: Set the random number generator seed
    --unsafely-ignore-certificate-errors?: 'DANGER: Disables verification of TLS certificates'
    --unstable: Enable unstable features and APIs
    --v8-flags?: Set V8 command line options
    --watch: 'UNSTABLE: Watch for file changes and restart automatically'
    -A, --allow-all: Allow all permissions
    -c, --config=: Specify the configuration file
    -h, --help: Print help information
    -q, --quiet: Suppress diagnostic output
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno bench` is a Deno command used for running and reporting performance tests on Deno projects. It automates the process of measuring the execution time and memory usage of your Deno code under various input sizes or test cases to help identify bottlenecks and optimize performance. The output provides detailed statistics, including minimum, maximum, average, and standard deviation values for both runtime and memory metrics.'
    flag:
        allow-all: |-
            [AI] The `deno bench --allow-all` command is used in Deno, a TypeScript-based runtime for building and running web applications. This specific command runs Deno's built-in benchmarking tool with the flag `--allow-all`.

            The `--allow-all` flag grants all permissions to the benchmarked scripts. Essentially, it bypasses the Deno TypeScript security model, allowing the scripts being tested to import and call modules or functions that would otherwise be denied due to CORS restrictions or access control checks. This is useful for testing scripts in an isolated environment without having to make adjustments to the permission model for each test case. However, it's essential to be cautious when using this flag as it can potentially introduce security vulnerabilities by allowing unintended code execution.
        allow-env: '[AI] `deno bench --allow-env` is a command used in Deno, a modern and secure TypeScript runtime. This command runs Deno benchmarks with the flag `--allow-env` enabled, which allows access to environment variables during testing. This can be useful when testing code that relies on specific environment variables for its functionality. By default, Deno does not allow access to environment variables in tests to enhance security.'
        allow-ffi: '[AI] `deno bench` is a Deno command for running benchmarks on your Deno projects. The `--allow-ffi` flag enables the use of Foreign Function Interface (FFI) in your benchmarks. FFI allows calling functions and accessing data from C libraries, which can be useful when benchmarking performance-critical code that interacts with native system APIs or external libraries not written in Rust or TypeScript (Deno''s primary languages). By allowing FFI, you can ensure the benchmarks accurately represent the real-world usage scenario.'
        allow-hrtime: '[AI] `deno bench` is a Deno command for running benchmarks on Deno projects. The `--allow-hrtime` option is a permission flag that enables the use of the Deno `hrtime` function during the benchmarking process. This function provides high-resolution time measurements, which can be crucial for accurate and precise benchmarking results. Without this flag, the `hrtime` function would be disallowed due to security restrictions in Deno.'
        allow-net: '[AI] `deno bench --allow-net` is a command used in Deno, a modern and secure TypeScript runtime. The `bench` subcommand is for running performance tests on Deno projects, while `--allow-net` is an option that grants permissions to access the network during test execution. This flag allows tests to make HTTP requests or use other network functionalities, enabling the testing of I/O-bound and networked applications in Deno.'
        allow-read: '[AI] `deno bench` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--allow-read` flag is an optional argument used with this command to specify that the script being tested reads files or directories during execution. With this flag enabled, Deno will not raise any errors when encountering input/output (I/O) operations, even if the corresponding permissions are not explicitly granted in the TypeScript file''s import map. This behavior is essential for testing scripts that read configuration files, test data, or other external resources during their execution.'
        allow-run: '[AI] The `deno bench --allow-run` command is used in Deno, a TypeScript-based runtime, to run and test Deno scripts with built-in benchmarking tools. The `--allow-run` flag grants permission for the given script to be executed during the benchmarking process, bypassing Deno''s default security restrictions. This allows running scripts that may need external dependencies or access to the filesystem, ensuring accurate and comprehensive benchmark results.'
        allow-write: '[AI] The `deno bench` command is a part of Deno, a modern and secure TypeScript runtime. The `--allow-write` option grants Deno permission to write files during the benchmarking process. This flag overrides Deno''s default read-only file system, allowing tests to modify or create files for input/output operations. Ensuring proper usage of this flag is essential to avoid unintended file modifications in your projects.'
        cached-only: '[AI] `deno bench --cached-only` is a command used in Deno, a modern and secure runtime for JavaScript and TypeScript. This specific invocation of the Deno benchmarking tool runs only tests that have previously been executed and their results are cached in the `deno_cache` directory. By using `--cached-only`, developers can quickly repeat previously run tests to compare results, saving time by skipping tests that don''t need re-execution.'
        cert: '[AI] The `deno bench --cert` command is used in Deno, a modern and secure TypeScript runtime, to run benchmark tests with SSL/TLS certificates. The `--cert` option specifies the path to a TLS certificate file for securing the HTTP connection during the test. This can be important for testing applications that rely on encrypted communication.'
        check: '[AI] `deno bench --check` is a command used in Deno, a modern and secure TypeScript runtime. This command runs the Benchmarking tool in Deno to test the performance of specific pieces of Deno code. The `--check` flag enables automated testing and reporting of the benchmarks for regression analysis. It helps ensure that changes in the codebase do not adversely affect benchmarked functions'' performance, maintaining a high level of software quality.'
        compat: '[AI] `deno bench --compat` is a command used in Deno, a TypeScript-based runtime for building and running applications. This specific command runs benchmarks using Deno''s built-in testing library while ensuring the tests are compatible with the Deno standard library version being used. The flag `--compat` guarantees test results remain consistent across different Deno versions by specifying the exact Deno standard library version that the tests were written against. This helps maintain stability and reliability in your application development and testing process.'
        config: '[AI] `deno bench` is a command-line tool in Deno, a TypeScript-based runtime for building and running web applications. The `--config` option is used to specify a configuration file for Deno''s benchmarking feature. The configuration file (usually a JSON or YAML file) contains details such as the test cases to run, the number of times each test should be executed, and other flags that can be used to customize the benchmarking process. By using `--config` followed by the path to the configuration file, users can run Deno''s benchmarks with predefined settings.'
        filter: '[AI] `deno bench` is a tool in Deno, a modern JavaScript runtime, for measuring and comparing the performance of Deno scripts. The `--filter` option filters the test results based on specific criteria such as name or pattern. For example, `deno bench --filter "*.ts"` runs only tests with `.ts` extension. This helps in analyzing the performance of specific parts of your codebase.'
        help: '[AI] `deno bench --help` is a command used in Deno, a TypeScript-based runtime for building and running applications. The `--help` flag is an option that provides information about how to use the `bench` subcommand specifically. When run, it displays detailed help text explaining what `bench` does, its available options, and usage examples. This information can be useful for understanding how to write and run benchmarks using Deno.'
        ignore: '[AI] `deno bench --ignore` is a command used in Deno, a modern and secure TypeScript runtime. This command is part of Deno''s benchmarking tool, which is used to measure the performance of Deno projects. The `--ignore` flag allows you to exclude specific tests or files from the benchmarking process. When used, it takes a list of glob patterns as an argument, specifying the files or tests to ignore during benchmarking.'
        import-map: |-
            [AI] The `deno bench --import-map` is a command-line option for Deno's built-in benchmarking tool. It allows specifying an import map file, which maps external module imports to local file paths or URLs during benchmarking. This can be useful when testing projects that rely on third-party modules but need to isolate the environment from the internet for security reasons or consistency. The import map file is in JSON format and should be provided as an argument to `--import-map` along with the test file when running the bench command. For example:

            ```bash
            deno run --allow-net test.ts --benchmark --import-map=path/to/import-map.json
            ```
        location: |-
            [AI] The `deno bench --location` command is used in Deno, a type-safe Rust programming language with a built-in web assembly runtime, to specify the location for running benchmarks. The `--location` flag can take one of two values: "local" or "remote".

            * `--location local`: Runs the benchmarks on the local machine. This is the default value if no `--location` flag is provided.
            * `--location remote <URL>`: Runs the benchmarks on a specified remote server URL. This can be useful for running benchmarks in parallel or on more powerful hardware than what's available locally.
        lock: '[AI] The `deno bench --lock` command is used in Deno, a type-safe Rust programming language runtimes, to execute benchmark tests and manage dependencies. The `--lock` flag enables Deno to read and apply the output of a previous `deno install --allow-net` or `deno get` command, ensuring that all required packages are installed before running the benchmarks. This helps maintain consistency between different runs of the benchmarks by locking down the exact package versions used.'
        lock-write: '[AI] `deno bench --lock-write` is a command used in Deno, a modern runtime for JavaScript and TypeScript. This command runs Deno''s built-in benchmarking tool with an additional flag `--lock-write`. This flag ensures that when multiple tests are run concurrently, they acquire exclusive write access to the lock file (usually named `deno.lock`). This helps prevent race conditions and inconsistencies during testing by ensuring that only one test modifies the lock file at a time.'
        no-check: '[AI] The `deno bench --no-check` command is a feature of Deno, a modern and secure TypeScript-based runtime. This command runs the Deno Benchmarking tool without executing any checks or assertions during the tests. The flag `--no-check` disables the test checking mode, allowing for faster benchmarking without the overhead of running tests multiple times to ensure correctness. It''s useful when focusing on measuring performance and iterating quickly in a development environment.'
        no-clear-screen: '[AI] The `deno bench` command is a Deno tool for measuring the performance of Deno projects. The `--no-clear-screen` flag is an option that prevents the clear screen command from being executed before displaying benchmark results. In other words, it keeps the previous console output visible while showing new benchmark data.'
        no-config: '[AI] `deno bench --no-config` is a command used in Deno, a TypeScript-based runtime for building and running web applications. The `bench` sub-command is utilized to run performance tests on Deno projects. The `--no-config` flag disables the use of a bencher configuration file (deno.bench.json) during testing. This means that all tests are executed using default settings instead.'
        no-prompt: '[AI] The `deno bench --no-prompt` command is used in Deno, a modern and secure TypeScript runtime, to run benchmark tests without displaying any interactive prompts or progress bars during the test execution. This allows for automating the testing process and comparing results more easily across multiple runs.'
        no-remote: '[AI] The `deno bench --no-remote` command is used in Deno, a TypeScript-based runtime for building modern web applications and services. This specific command runs benchmarks on Deno scripts without using remote test workers or data. The `--no-remote` flag disables the remote testing mode to execute all tests locally, which can be helpful when testing with a smaller dataset or when experiencing network connectivity issues.'
        quiet: '[AI] The `deno bench --quiet` command is used to run Deno benchmarks with minimum output. The `--quiet` flag suppresses all non-error messages during benchmark execution, showing only the final benchmark results with timing information for each test case.'
        reload: '[AI] `deno bench --reload` is a command used in Deno, a TypeScript-based runtime for building modern web applications and tools. This specific command starts or resumes the Deno benchmarking tool on a given Deno project with automatic reloading enabled. The reloading feature allows changes to the project code to be picked up without needing to stop and restart the benchmark process, making development iterations more efficient.'
        seed: '[AI] The `deno bench --seed` command is used in Deno, a modern and secure TypeScript runtime, to run benchmarks with a specified seed value for random number generation. This ensures consistent results when comparing the performance of different pieces of code. Without the `--seed` flag, Deno''s benchmarking tool may generate different random numbers each time it is run, leading to potentially inconsistent benchmark results.'
        unsafely-ignore-certificate-errors: '[AI] The `--unsafely-ignore- certificate-errors` flag for Deno''s `bench` command disables SSL certificate validation during network requests. This means that Deno will not check the authenticity of SSL certificates presented by servers, potentially allowing man-in-the-middle attacks or other security vulnerabilities. It is important to note that using this flag should only be done in trusted environments or for testing purposes, as ignoring certificate errors poses significant security risks.'
        unstable: '[AI] The `deno bench --unstable` command is used in Deno, a modern and secure TypeScript runtime, to run benchmark tests from unstable or experimental features. The `--unstable` flag enables the usage of these features which might not be stable or fully supported yet, allowing developers to test and provide feedback for potential improvements. This can help in performance optimization and the development of new functionalities before they''re officially released.'
        v8-flags: '[AI] `deno bench` is a Deno command for running benchmarks on your Deno projects. The `--v8-flags` option is used to pass flags directly to the V8 JavaScript and WebAssembly engine that Deno uses under the hood, which can impact the performance of the benchmarked code. By providing custom flags with `--v8-flags`, you can fine-tune the V8 engine for specific workloads or optimize it for better benchmark results.'
        watch: '[AI] `deno bench --watch` is a command used in Deno, a modern and secure TypeScript runtime, to perform continuous benchmarking of Deno projects. This means that it repeatedly runs the specified benchmarks with each file save, providing real-time feedback on performance improvements or regressions. It helps developers monitor the impact of code changes on their project''s performance and optimize their code effectively.'
