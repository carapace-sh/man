# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gopls
description: gopls is a Go language server
flags:
    -debug=: serve debug information on the supplied address
    -listen.timeout=: when used with -listen, shut down the server when there are no connected clients for this duration
    -listen=: address on which to listen for remote connections. If prefixed by 'unix;', the subsequent address is assumed to be a unix domain socket. Otherwise, TCP is used.
    -logfile=: filename to log to. if value is "auto", then logging to a default output file is enabled
    -mode=: no effect
    -ocagent=: the address of the ocagent (e.g. http://localhost:55678), or off (default "off")
    -port=: port on which to run gopls for debugging purposes
    -profile.alloc=: write alloc profile to this file
    -profile.cpu=: write CPU profile to this file
    -profile.mem=: write memory profile to this file
    -profile.trace=: write trace log to this file
    -remote.debug=: when used with -remote=auto, the -debug value used to start the daemon
    -remote.listen.timeout=: when used with -remote=auto, the -listen.timeout value used to start the daemon (default 1m0s)
    -remote.logfile=: when used with -remote=auto, the -logfile value used to start the daemon
    -remote=: forward all commands to a remote lsp specified by this flag. With no special prefix, this is assumed to be a TCP address. If prefixed by 'unix;', the subsequent address is assumed to be a unix domain socket. If 'auto', or prefixed by 'auto;', the remote address is automatically resolved based on the executing environment.
    -rpc.trace: print the full rpc trace in lsp inspector format
    -v, -verbose: verbose output
    -vv, -veryverbose: very verbose output
documentation:
    command: '[AI] `gopls` is a Go language server implemented using the Language Server Protocol (LSP). It provides features such as autocompletion, syntax highlighting, linting, and code navigation for external Golang editors and IDEs. When you run `gopls`, it starts the server that listens for connections from clients (editors or IDEs) to provide language services in real time.'
    flag:
        debug: '[AI] `gopls` is the GoLanguageServer, an official language server for the Go programming language. The `-debug` flag is used to start `gopls` with extended debugging information. This flag enables more verbose output during the server''s startup and operation, which can be helpful in diagnosing issues or gaining a deeper understanding of how `gopls` functions. It provides detailed logs that developers can analyze to identify potential problems or performance bottlenecks.'
        listen: '[AI] `gopls -listen` is a command-line flag used with GoPls, the official Go language server. This flag enables GoPls to accept incoming connections from IDEs and text editors, allowing real-time code analysis, autocompletion, formatting, and other features while developing Go code.'
        listen.timeout: '[AI] The `gopls` flag `--listen.timeout` sets a timeout duration after which a connection to the Go language server will be closed if no client is connected. It helps prevent idle connections and conserves system resources, reducing potential security risks. The timeout value can be specified in seconds or milliseconds, depending on the configuration format used.'
        logfile: '[AI] `gopls` is the Go language server, which provides autocomplete, syntax checking, and other features for external code editors. The `-logfile` flag is an option used to enable logging functionality in `gopls`. With this flag set, a log file will be created where all messages from the server are written, making it easier to diagnose issues or track events during development.'
        mode: |-
            [AI] `gopls` is a Go language server, providing features such as autocompletion, syntax checking, and code navigation for popular code editors like Visual Studio Code. The `-mode` flag sets the operating mode of `gopls`.

            There are several available modes:

            1. **'go' or 'normal':** Runs in a standard Go workspace with no additional features. This is the default mode.
            2. **'goreact':** Used for React and other frontend projects with Go scripts, providing additional features like hot reload.
            3. **'gosimple':** Simplified setup mode suitable for small projects without a complex dependency structure.
            4. **'go1.x':** Specifies the Go version to use when starting the server.
            5. **'remote':** Runs `gopls` as a remote server, accessible via SSH or other remote connection methods.
            6. **'debug':** Enables debugging features for deeper inspection and understanding of issues within the codebase.
            7. **'proxied':** Runs the language server in proxied mode, allowing it to communicate with other servers and services as needed.

            Using the appropriate `-mode` flag allows you to tailor your Go development experience to your specific use case.
        ocagent: |-
            [AI] `gopls` is a Go language server, which is a tool used for providing smart code editing features in popular Integrated Development Environments (IDEs) like Visual Studio Code. The `-ocagent` flag is an option that can be passed to `gopls` when starting it as a client (as opposed to a standalone server).

            This flag indicates that `gopls` should operate in the Omnisharp Cooperative Language Server mode, which means it will cooperate with other language servers installed in your IDE environment. The main goal is to allow multiple language servers to work together on the same document or project, sharing information and providing complementary features.

            Using `gopls` with the `-ocagent` flag can provide enhanced development experience, as it allows for seamless interaction between different language servers, ultimately improving code intelligence and overall productivity.
        port: '[AI] `gopls` is the Go language server, which provides features like autocomplete, code formatting, and linting for various IDEs and text editors. The command-line option `-port` specifies the port number on which the Go language server listens for incoming connections from clients such as Visual Studio Code or IntelliJ IDEA. By default, it is set to `1234`, but you can change it by providing a custom port number, e.g., `gopls -port 9012` to start the server on port 9012. This allows for greater flexibility in managing multiple instances of Go language servers or configuring network access control.'
        profile.alloc: '[AI] `gopls` is the Go Language Server, which provides features like autocompletion, code navigation, and linting for various IDEs and text editors. The `-profile.alloc` flag is related to Go''s built-in profiling tools. When this flag is passed to `gopls`, it enables allocations profiling in the server. Allocations profiling focuses on tracking memory allocation events, helping developers understand memory usage patterns and potential memory leaks.'
        profile.cpu: '[AI] `gopls` is a Go language server, which provides intelligent code completion, error checking, and other features for popular code editors. The `-profile.cpu` flag is used to enable CPU profiling in `gopls`. When this flag is set, `gopls` generates and displays CPU profiles as part of the IntelliSense response in supported editors like Visual Studio Code or JetBrains IDEs. These profiles help developers identify performance bottlenecks by showing which functions consume the most CPU resources during runtime.'
        profile.mem: '[AI] `gopls` is a Go language server, providing autocompletion, syntax checking, and other features for popular code editors. The `-profile.mem` flag is used to enable memory profiling for the Go language server during execution. It gathers detailed memory usage statistics which can be used for diagnosing performance issues or memory leaks in the Go codebase being edited.'
        profile.trace: '[AI] `gopls` is a Go language server that provides features like autocompletion, syntax checking, and code navigation for popular IDEs and text editors. The option `-profile.trace` is used to enable tracing which generates detailed logs about the requests made to the Go language server and the responses received from it. This can be helpful in diagnosing performance issues or understanding the communication between the editor and the language server.'
        remote: |-
            [AI] `gopls` is a Go language server, which provides features such as autocompletion, syntax checking, and code navigation for external code editors and IDEs. The `-remote` flag is used when running the `gopls` server in a remote mode.

            When using `-remote`, the server doesn't attach to any specific editor or IDE instance, instead it listens on a network address (default: 127.0.0.1:1324) for incoming connections from clients. Clients such as VSCode with Go extension can then connect to this server and make use of its services.

            In summary, `gopls -remote` starts the `gopls` server in a headless mode that listens for incoming connections from clients rather than attaching directly to an editor or IDE.
        remote.debug: '[AI] `gopls` is a Go language server, which provides intelligent code assistance in popular IDEs and text editors. The `-remote.debug` flag is used to start `gopls` in remote debug mode. This mode enables the server to attach to a running Go program and provide real-time debugging capabilities. When you use this flag, you typically run your application with a special entry point, which connects it to the `gopls` server, allowing you to use its debugging features in an IDE or text editor.'
        remote.listen.timeout: '[AI] The `gopls` flag `--remote.listen.timeout` sets the duration after which a remote connection attempt times out. When `gopls` is run in remote mode, it listens for incoming connections from IDEs or editors. If no connection is established within the specified timeout period, the process terminates. The value can be set in seconds, making it easier to configure the maximum waiting time before giving up on a potential connection.'
        remote.logfile: '[AI] The `-remote.logfile` flag in `gopls`, the Go language server, specifies the file path where the server should write its log output. This can be useful for debugging or analyzing the server''s behavior during development. The flag takes a string argument representing the absolute or relative file path. For instance, `-remote.logfile=./gopls.log` will create a log file named `gopls.log` in the current working directory.'
        rpc.trace: '[AI] The `gopls` flag `-rpc.trace` enables the RPC (Remote Procedure Call) tracing feature. This means that all RPC calls made between the Go Language Server (gopls) and external clients, such as an IDE or text editor, will be logged for debugging purposes. The logs contain detailed information about each call, including request and response data, timing, and error messages. These logs can help in understanding the communication between gopls and the client, troubleshooting issues, and improving the overall development experience.'
        verbose: '[AI] `gopls` is the Go language server, a tool that provides features like autocompletion, syntax highlighting, and code analysis for external code editors. The flag `-verbose` is used to increase the amount of output that `gopls` provides during its operation. This can be helpful for debugging or understanding what `gopls` is doing in more detail. It will print additional information about events such as connections, initialization, and requests/responses between the client editor and the server.'
        veryverbose: '[AI] The `-veryverbose` flag for `gopls`, the Go language server, increases the amount of diagnostic information it provides during development. This includes more detailed error messages and progress updates on tasks such as code analysis or formatting checks. It''s useful for debugging complex issues in a Go project or for learning about different aspects of the Go language.'
