# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mergetool
description: Run merge conflict resolution tools to resolve merge conflicts
group: manipulator
flags:
    --no-gui: This overrides a previous -g or --gui setting
    --prompt: Prompt before each invocation of the merge resolution program to give the user a chance to skip the path
    --tool-help: Print a list of merge tools that may be used with --tool
    --tool?: Use the merge resolution program specified by <tool>
    -g, --gui: Read from the configured merge.guitool variable instead of merge.tool.
    -y, --no-prompt: Donâ€™t prompt before each invocation of the merge resolution program
documentation:
    command: '[AI] `git mergetool` is a Git command used to open a graphical three-way merge tool for resolving conflicts between branches during a merge operation. It automatically detects and opens files with conflict markers (<<<, >>>) where the automated merge failed. By manually editing the conflicted areas in the merge tool interface and saving the changes, the merge can be successfully completed. This command is particularly useful when dealing with complex merge conflicts that cannot be resolved through simple text edits.'
    flag:
        gui: '[AI] `git mergetool --gui` is a Git command used to open a graphical merge tool for resolving merge conflicts. The command takes files with merge conflicts and launches a user-friendly interface, where you can visually compare and edit the differences between your branches or commits. This helps in manually resolving merge conflicts effectively by combining changes from multiple branches while preserving the desired modifications.'
        no-gui: '[AI] `git mergetool --no-gui` is a command used in Git version control system to open the merge tool for resolving conflicts without using the graphical user interface (GUI). With `--no-gui` option, Git will launch the merge tool in text mode or console, which can be useful when working in terminal-only environments or prefer text interfaces. The merge process allows users to compare and edit conflicting files line by line and selectively apply changes to resolve the merge conflicts.'
        no-prompt: '[AI] `git mergetool --no-prompt` is a Git command used to open the merge tool for resolving merge conflicts without user interaction. The `--no-prompt` option disables any interactive prompts, allowing Git to automatically open the merge tool in the background and apply the suggested changes. This can be useful when integrating changes into multiple branches or when scripts are automating the merge process.'
        prompt: '[AI] `git mergetool --prompt` is a command used in Git version control system to open an interactive merge tool to help resolve conflicts during a merge operation. The `--prompt` option enables an interactive mode where Git will prompt the user to select which hunk (a chunk of changes) they want to edit using their preferred merge tool. This allows for fine-grained control over the merging process and can be particularly useful when dealing with complex or multiple conflicts.'
        tool: '[AI] `git mergetool --tool` is a Git command used to open an interactive merge tool for resolving conflicts between branches during a git merge operation. The `--tool` option allows you to specify which external merge tool to use for the merging process. This can be useful if your preferred merge tool isn''t set as the default in Git or if it isn''t installed on your system. By specifying the path or name of the desired merge tool, Git will launch it when conflicts are encountered during a merge, facilitating the resolution of those conflicts through an interactive user interface.'
        tool-help: '[AI] `git mergetool --tool-help` is a Git command used to display help information for various merge tools that can be used with `git mergetool`. When you run this command, Git will list the available merge tools along with brief descriptions of what they do. This command is helpful when you want to know which merge tools are installed and what their capabilities are, allowing you to choose the best one for resolving merge conflicts in your Git repositories.'
