# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: appbundle
description: Build an Android App Bundle file from your app
flags:
    --analyze-size: Produce additional profile information for artifact output size.
    --build-name=: A "x.y.z" string used as the version number shown to users.
    --build-number=: An identifier used as an internal version number.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --deferred-components: Setting to false disables building with deferred components.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-analyze-size: Do not produce additional profile information for artifact output size.
    --no-deferred-components: Setting to false disables building with deferred components.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-track-widget-creation: Do not track widget creation locations.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --no-validate-deferred-components: When enabled, deferred component apps will fail to build if setup problems are detected that would prevent deferred components from functioning properly.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --release: Build a release version of your app (default mode).
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --target-platform=: The target platform for which the app is compiled.
    --track-widget-creation: Track widget creation locations.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    --validate-deferred-components: When enabled, deferred component apps will fail to build if setup problems are detected that would prevent deferred components from functioning properly.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build appbundle` is a command used in Flutter development for creating an Android App Bundle file. It compiles and packages your Flutter project into a single, smaller size optimized file for Google Play Store distribution. This file includes all the necessary code, resources, and metadata to run the app efficiently on various devices.'
    flag:
        analyze-size: |-
            [AI] `flutter build appbundle --analyze-size` is a command used in Flutter development to generate an AppBundle file for release builds and perform size analysis.

            The `appbundle` is an Android packaging format that contains all the app's code, resources, and metadata needed to run it on different devices with various screen densities and sizes.

            The `--analyze-size` option triggers a size analysis report, which displays the sizes of individual components in the app (like Dart code, images, assets, etc.) to help developers understand how their application is using resources and identify potential opportunities for reducing the app's overall size.
        build-name: '[AI] `flutter build appbundle` is a command used in Flutter development to build an Android application bundle for distribution on Google Play Store. The `--build-name` option is an argument provided with this command to specify a custom name for the generated App Bundle file instead of using the default project name. For instance, `flutter build appbundle --build-name=MyAppName` will create an App Bundle named "MyAppName.aab" in the "bin/android/appbundle" directory.'
        build-number: '[AI] `flutter build appbundle` is a command used in Flutter development to build an Android App Bundle for publication on Google Play Store. The `--build-number` option is used to specify a version number or build number for the built artifact. It allows developers to differentiate between builds and track changes in their application. The output of this command will be an `unsigned.app-scans.json`, `app-metadata.json`, and the generated App Bundle file named as `unsignedApp-<version_code>.aab` or `app-<version_name>-<build_number>.aab`.'
        dart-define: '[AI] `flutter build appbundle --dart-define` is a command used in Flutter development to build an Android App Bundle for publication on Google Play Store. The `--dart-define` option allows passing Dart definitions that will be available as constants at compile time for the Android NDK code. This can be useful for passing custom values, like API keys or configuration variables, from your Flutter project to the native code during the build process.'
        debug: '[AI] `flutter build appbundle --debug` is a command used in Flutter development to build an Android App Bundle for release, with debuggable artifacts enabled. An App Bundle is a new Android packaging format that provides smaller, variable-sized APKs optimized for different devices. With the `--debug` flag, the generated bundle includes debuggable and line-level information in the included code, making it easier to debug issues during testing or deployment.'
        deferred-components: |-
            [AI] `flutter build appbundle --deferred-components` is a command used in Flutter development to generate an Android App Bundle (AAB) file with deferred components.

            The `--deferred-components` option allows splitting some larger APK modules into smaller chunks that can be downloaded on demand by the end user, reducing upfront download size and improving app installation experience. This is particularly useful for apps with large or multiple libraries.

            This command performs a build of your Flutter project for an Android App Bundle while enabling deferred components. The generated AAB file is then ready to be uploaded to Google Play Store for distribution.
        flavor: '[AI] `flutter build appbundle --flavor` is a command used in Flutter development to create an Android App Bundle (aab) file with a specific application flavor. An application flavor is a variant of an application that differs in some way, such as having different strings or resources. The `--flavor` option specifies the name of the desired application flavor during the build process. This command compiles and packages the specified flavor''s code and assets into a single aab file, ready for distribution through Google Play Store.'
        help: |-
            [AI] `flutter build appbundle` is a command used in Flutter to build an Android application bundle for release distribution. The `--help` option is provided to display detailed information about how to use this command. Here's what it covers:

            1. Description: Builds an App Bundle (Android) from the current project.
            2. Syntax: `flutter build appbundle [options]`
            3. Options: Several options can be specified, including:
               - `--apk-filename <filename>`: The output APK file name for debug builds (default: `app-debug.apk`).
               - `--appbundle-filename <filename>`: The output App Bundle file name (default: `app.aab`).
               - `--release` or `--no-tree-shake-icons`: Builds the app in release mode or keeps icon sizes unchanged, respectively.
            4. Note: To build an App Bundle for Google Play Store, you should have your `google-services.json` file and configure your project settings accordingly.
            5. Example: To create a release version of an Android application bundle named "myapp.aab", run: `flutter build appbundle --release --appbundle-filename myapp.aab`.
        no-analyze-size: '[AI] `flutter build appbundle` is a command used in Flutter development to create an Android App Bundle for publication on Google Play Store. The `--no-analyze-size` option disables the size analysis feature during the build process. This means that Flutter will not generate detailed reports about the size of your app''s code, resources, and other components. By omitting this option, the build process is quicker but you won''t have access to the size analysis data.'
        no-deferred-components: '[AI] The command `flutter build appbundle --no-deferred-components` is used to build an Android App Bundle for publication on Google Play Store. The `--no-deferred-components` flag indicates that the entire application should be split into multiple modules instead of deferring the components for on-demand loading. This results in a larger APK size but improves the initial load time and user experience by allowing the app to start faster with all required components available at once.'
        no-null-assertions: '[AI] `flutter build appbundle` is a command used in Flutter development to build an Android AppBundle for publication on Google Play Store. The `--no-null-assertions` flag is an option that disables the null safety feature introduced in Flutter 2.12. This means that Flutter will not throw null pointer exceptions at compile time and instead, will allow null values to propagate through the code. However, it''s important to note that this does not prevent null values from causing runtime errors. It''s recommended to use null safety in production builds for better code reliability and maintainability.'
        no-obfuscate: '[AI] `flutter build appbundle --no-obfuscate` is a command used in Flutter development to build an Android application bundle for release, without obfuscation. The `appbundle` argument specifies the output format as Google Play App Bundles, providing on-demand deployment of Android app modules. The `--no-obfuscate` flag instructs Flutter not to perform code obfuscation during the build process, preserving readable code in the resulting APK for easier debugging and analysis.'
        no-pub: '[AI] `flutter build appbundle --no-pub` is a command used in Flutter development to create an Android App Bundle for publication on Google Play Store. The `--no-pub` flag indicates that this build process doesn''t include running `flutter pub get` or other pub-related tasks. This is useful when you want to manage your project dependencies manually, or if you have large projects where the pub get operation takes a long time to complete. The generated App Bundle file (`.aab`) can then be uploaded to Google Play Console for further processing.'
        no-track-widget-creation: '[AI] The command `flutter build appbundle --no-track-google-play` generates an Android App Bundle (AAB) file for publishing on Google Play Store without enabling Google Play''s automatic tracking of installed apps and their features, ensuring user privacy. The `--no-track-widget-creation` flag disables the creation of Google AdMob dynamic advertisement widgets during the build process.'
        no-tree-shake-icons: |-
            [AI] The `flutter build appbundle` command is used to build a Flutter application for Android in the App Bundle format, which is an Android packaging format that allows for dynamic delivery of app components.

            The `--no-tree-shake-icons` option disables tree shaking of icon assets during the build process. Tree shaking is a technique used during Flutter builds to remove unused code and resources from the final application package. However, icons are not typically removed by tree shaking since they are static assets that are referenced in the application's code.

            By default, Flutter treeshakes icons to reduce the size of the generated APK or AAB file. However, if you want to keep all icons in your application bundle for some reason, you can use the `--no-tree-shake-icons` option to prevent icon tree shaking and ensure that all icons are included in the final App Bundle package.
        no-validate-deferred-components: '[AI] `flutter build appbundle --no-validate-deferred-components` is a command used in Flutter development to create an Android App Bundle for publication on Google Play Store. The `--no-validate-deferred-components` option disables the validation of deferred components during the build process. Deferred components are modules that are not necessary at app launch but needed later, like large assets or libraries. By skipping validation, the build time is reduced since these components don''t get verified in this step, but they will be validated during installation and on-demand loading by the Google Play Store. This command should be used when you trust your project setup and want to save build time.'
        null-assertions: '[AI] `flutter build appbundle --null-assertions` is a command used in Flutter development to create an Android App Bundle for release, enabling the use of Dart''s null safety feature called "null assertions" (`!` operator). This means that during compilation, NullSafetyChecker checks the code to ensure that there are no potential null references that could result in a `NullPointerException`. The generated App Bundle is optimized for size and efficiency, ready to be uploaded to Google Play Store.'
        obfuscate: '[AI] `flutter build appbundle --obfuscate` is a command used in Flutter development to build an Android application bundle (AAB) with obfuscation enabled. Obfuscation is a process of renaming and shrinking original code names to make it harder for others to reverse engineer or understand the code structure. By running this command, Flutter will perform code optimization, shrink resources, and apply obfuscation using ProGuard rules to protect your app''s intellectual property before creating the AAB file.'
        profile: '[AI] `flutter build appbundle --profile` is a command used in Flutter development to create an Android App Bundle (aab) file for publishing and distributing an app on Google Play Store. The `--profile` option specifies that the build should be optimized for a specific device or user profile, improving the app''s performance and reducing the size of the bundle. This command generates an optimized aab file instead of a standard APK.'
        pub: |-
            [AI] `flutter build appbundle --pub` is a command used in Flutter development to build an Android App Bundle for release. This command performs several tasks:

            1. Compiles and optimizes the Dart code.
            2. Builds native code for ARM, x86, x86\_64, MIPS, and other architectures.
            3. Merges all compiled code into a single binary file.
            4. Generates an Android App Bundle using Google's R8 library for code shrinking, obfuscation, and optimization.
            5. Includes the `--pub` flag to automatically include all dependencies (from `pubspec.yaml`) in the generated App Bundle.
        release: '[AI] `flutter build appbundle --release` is a command used in Flutter development to build a release APK (Android Application Package) as an AppBundle (split-APK). This command optimizes the application for size and performance by stripping debugging symbols and shrinking the code. The resulting AppBundle file can be uploaded to Google Play Store or other Android app distribution platforms.'
        split-debug-info: '[AI] `flutter build appbundle --split-debug-info` is a command used in Flutter development to create an Android App Bundle for distribution on Google Play Store. The `--split-debug-info` option enables splitting the debug information into separate files within the App Bundle, improving the installation size and download speed for end-users. This way, only the specific debug info related to the installed app''s module is downloaded when needed during debugging, instead of having to download the entire debug info for the entire application.'
        target: '[AI] The `flutter build appbundle --target` command is used in Flutter development to create an Android App Bundle (AAB) for publishing or distributing an application on Google Play Store. This build configuration minimizes the APK size by only including the necessary code and resources for each user''s device, thus saving bandwidth and storage space. When you run this command, Flutter compiles and packages your application as a single AAB file that can be easily downloaded and installed on Android devices via Google Play Store or other distribution platforms.'
        target-platform: '[AI] The `flutter build appbundle --target-platform android` command is used to build a Flutter application for Android platform into an App Bundle (also known as Android App Bundles or AAB). An App Bundle is a new distribution format introduced by Google that allows splitting the APK into smaller size modules based on the device configurations, resulting in a smaller download size and faster first load. The --target-platform option specifies the platform (''android'' in this case) for building the application.'
        track-widget-creation: '[AI] `flutter build appbundle` is a command used in Flutter development to build an Android App Bundle for publication on Google Play Store. The `--track-widget-creation` option enables tracking of widget creation for Flutter''s AdMob and Firebase dynamic links. This helps ensure that the ads are properly tracked and attributed when users click on them, leading to accurate reporting and optimization in ad campaigns.'
        tree-shake-icons: '[AI] `flutter build appbundle` is a command used in Flutter development to build an Android AppBundle for publication on Google Play Store. The `--tree-shake-icons` option enabled with this command is a feature that reduces the size of the generated icon resources by removing unused icons during the build process. This results in smaller APKs or AppBundles, which saves bandwidth and storage space for users while downloading the app.'
        validate-deferred-components: '[AI] `flutter build appbundle --validate-deferred-components` is a command used in Flutter development to generate an App Bundle for releasing an Android app on Google Play Store. The `--validate-deferred-components` option performs additional validation checks during the build process, specifically focusing on deferred components or modules that are not loaded at app launch but required later during runtime. This ensures that all necessary components are correctly packaged and prepared, enhancing the app''s stability and compatibility in the production environment.'
