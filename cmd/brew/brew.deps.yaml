# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: deps
description: Show dependencies for <formula>
group: main
flags:
    --HEAD: Show dependencies for HEAD version instead of stable version.
    --annotate: Mark any build, test, implicit, optional, or recommended dependencies as such in the output.
    --cask: Treat all named arguments as casks.
    --debug: Display any debugging information.
    --direct: Show only the direct dependencies declared in the formula.
    --dot: Show text-based graph description in DOT format.
    --eval-all: Evaluate all available formulae and casks, whether installed or not, to list their dependencies.
    --for-each: Switch into the mode used by the `--eval-all` option, but only list dependencies for each provided <formula>, one formula per line. This is used for debugging the `--installed`/`--eval-all` display mode.
    --formula: Treat all named arguments as formulae.
    --full-name: List dependencies by their full name.
    --graph: Show dependencies as a directed graph.
    --help: Show this message.
    --include-build: Include `:build` dependencies for <formula>.
    --include-optional: Include `:optional` dependencies for <formula>.
    --include-requirements: Include requirements in addition to dependencies for <formula>.
    --include-test: Include `:test` dependencies for <formula> (non-recursive).
    --installed: List dependencies for formulae that are currently installed. If <formula> is specified, list only its dependencies that are currently installed.
    --missing: Show only missing dependencies.
    --quiet: Make some output more quiet.
    --skip-recommended: Skip `:recommended` dependencies for <formula>.
    --topological: Sort dependencies in topological order.
    --tree: Show dependencies as a tree. When given multiple formula arguments, show individual trees for each formula.
    --union: Show the union of dependencies for multiple <formula>, instead of the intersection.
    --verbose: Make some output more verbose.
documentation:
    command: '[AI] `brew deps` is a Homebrew command used to show the dependencies of an installed package or a formula in the Homebrew repository. It displays a tree-like diagram of the direct and transitive dependencies, helping users understand the dependency relationships between packages in their system.'
    flag:
        HEAD: '[AI] `brew deps --HEAD` is a command used in Homebrew, a popular package manager for macOS. This command is used to update the dependencies of an installed Homebrew formula to their latest HEAD (tip) versions from their respective Git repositories. It helps keep the dependencies up-to-date and potentially resolves dependency conflicts or issues between different components.'
        annotate: '[AI] `brew dep --annotate` is a command provided by Homebrew, a popular package manager for macOS, to generate annotation files for dependencies listed in your brewfile or Brewfile. Annotation files contain additional metadata about dependencies such as version numbers and checksums. This command generates these files in the current directory with a .lock prefix. The resulting files can be committed and shared to ensure reproducibility and consistency of dependencies across different environments.'
        cask: '[AI] `brew dep --cask` is a command used in Homebrew, a popular package manager for macOS. This command is used to install dependencies that come in the form of Cask packages, which are bundled applications and their dependencies. By running `brew dep --cask`, Homebrew will scan your existing installations and identify any missing Cask dependencies required by those installed packages. It will then download and install these dependencies from the Homebrew Cask repository.'
        debug: '[AI] `brew deps --debug` is a command used with Homebrew, a popular package manager for macOS. This specific command generates extensive debugging output while resolving and listing dependencies of an installed formula or package. It can help diagnose complex dependency issues by providing detailed information about the dependency resolution process, including messages related to conflicts, errors, or warnings.'
        direct: '[AI] `brew deps --direct` is a command used in Homebrew, a popular package manager for macOS. This command resolves and installs dependencies that are required to build or run a specific Homebrew formula or package, but skips any dependencies that have dependencies of their own (transitive dependencies). By using the `--direct` option, we can focus on installing only the immediate dependencies, which can help keep our system cleaner and reduce potential conflicts.'
        dot: '[AI] The `brew deps --dot` command is a utility provided by Homebrew, a popular package manager for macOS. This command generates a file in the current directory (`.dockerignore` by default) listing all direct and indirect dependencies of the currently installed Homebrew packages. It''s useful when setting up Docker or other containerization systems, as it helps exclude unnecessary build-time dependencies during container creation.'
        eval-all: '[AI] `brew deps --eval-all` is a command provided by Homebrew, a popular package manager for macOS, to automatically install dependencies of a specified formula or package. The `--eval-all` flag tells Homebrew to recursively evaluate and install all the dependencies, not just the direct ones, but also those that are required by the dependencies themselves. In other words, it ensures that all the required packages and their sub-dependencies are installed in one go.'
        for-each: '[AI] `brew dep --for-each` is a command provided by Homebrew, a popular package manager for macOS, used to iterate over each dependency of a specific package and perform an action on them. The command takes an argument that specifies the action, usually another command or a shell function. For example, you could use `brew dep --for-each <package> install` to install all dependencies of the given package. This can be useful for automating tasks related to managing dependencies and keeping your system up-to-date.'
        formula: '[AI] `brew deps --formula` is a command used with Homebrew, a popular package manager for macOS. This specific command generates a list of Formulae (Homebrew''s term for packages) that are required to build or run the currently active project or file. In other words, it identifies and lists the Homebrew packages that need to be installed for the correct dependencies to be met.'
        full-name: '[AI] `brew dep --full-name` is a command used with Homebrew, a popular package manager for macOS. This command is used to display the full name and origin of dependencies of a specific Homebrew formula or installation. The output includes the dependency name, its version number, and the repository from which it was installed. It provides more detailed information about the dependencies and their sources compared to using `brew list` or `brew dependencies`.'
        graph: '[AI] `brew deps --graph` is a command provided by Homebrew, a popular package manager for macOS, to display the dependency graph of installed packages and their dependencies recursively. The output shows each package with its name and version, along with the direction of the dependency (e.g., A â†’ B means A depends on B). This command can help in understanding how different packages in your system are connected through dependencies and identifying potential conflicts or updates that might affect multiple packages.'
        help: |-
            [AI] `brew dep --help` is a command used in Homebrew, a package manager for macOS. This specific command displays help information about the `brew deps` sub-command.

            `brew deps` is used to analyze and manage dependencies of Homebrew installations. By running `brew deps --help`, you'll get a summary of what the command does, along with options to control its behavior. This includes options to show dependencies as packages, casks, or both; display only outdated dependencies; or force reinstallation of dependencies.
        include-build: '[AI] The `brew deps --include-build` command is a function provided by Homebrew, a popular package manager for macOS. This command generates a list of dependencies required not only to run an installed Homebrew formula but also to build it from source. In other words, it shows all direct and indirect dependencies needed both for the installation and for any potential recompilation or upgrade of the software.'
        include-optional: '[AI] `brew dep --include-optional` is a command used in Homebrew, a popular package manager for macOS. This command modifies the dependency resolution process by including optional dependencies as well. When installing or upgrading a package, Homebrew will not only consider required dependencies but also optional ones. This can be useful when dealing with complex software ecosystems where optional dependencies might provide additional features or functionality. However, be aware that this could potentially introduce unnecessary dependencies and increase the overall system requirements.'
        include-requirements: '[AI] `brew deps --include-requires` is a command used in Homebrew, a popular package manager for macOS. This command generates a list of all the dependencies and their requirements for the installed Homebrew packages. The flag `--include-requirements` instructs the command to include the detailed dependency information, such as version numbers and specific dependencies, making it useful for understanding the full dependency tree of an installed package.'
        include-test: '[AI] `brew dep --include-test` is a command used in Homebrew, a popular package manager for macOS. This command helps install dependencies that are required not only for the main application but also for its tests. By including tests'' dependencies, you ensure that all necessary components are installed when setting up an environment for software development projects using Homebrew.'
        installed: '[AI] `brew deps --installed` is a command used in Homebrew, a package manager for macOS. This command lists all the dependencies that are currently installed on your system as direct dependencies of other packages or as standalone installations. It provides information about the dependency''s name, its version, and the installation path, helping you manage and keep track of the interconnected packages in your Homebrew environment.'
        missing: '[AI] `brew dep --missing` is a command used in Homebrew, a popular package manager for macOS. This command lists out packages that are dependencies of currently installed packages but are not yet installed themselves. In other words, it shows you the missing dependencies needed to ensure that all of your Homebrew installations are up-to-date and fully functional.'
        quiet: '[AI] The `brew deps --quiet` command is a function of Homebrew, a popular package manager for macOS. This command is used to display only the dependencies (packages that other packages depend on) of the specified formula or package, without any extra messages or verbose output. By using the `--quiet` flag, the output will only show the names of the dependencies, making it useful for scripts and automated processes where you just need to know the dependencies without any additional information.'
        skip-recommended: '[AI] `brew deps --skip-recommended` is a command used in Homebrew, a popular package manager for macOS. This command generates a lockfile named `Brewfile` that lists the direct dependencies of the installed packages without including their recommended dependencies. In other words, it skips the installation of optional and suggested packages that are not necessary for the base functionality of the installed software.'
        topological: '[AI] `brew deps --topological` is a command provided by Homebrew, a popular package manager for macOS. This command generates a graph representing the dependencies of installed packages, showing how they are linked together. It provides a clear visualization of the dependency tree and helps in understanding the implications of installing or upgrading packages.'
        tree: '[AI] `brew deps --tree` is a command used in Homebrew, a popular package manager for macOS. This command generates a tree-like representation of the dependencies and their recursive dependencies of the currently installed Homebrew packages or specifically mentioned packages. It helps in understanding the dependency structure and locating potential conflicts or circular dependencies within the system.'
        union: '[AI] `brew dep --union` is a command used in Homebrew, a package manager for macOS. This command merges intersecting dependencies lists from multiple formulas into a single list, eliminating duplicates. The result is an optimized set of dependencies that are shared among the given formulas. It can help reduce redundancy and improve the efficiency of installations or upgrades.'
        verbose: '[AI] `brew dep --verbose` is a command used in Homebrew, a popular package manager for macOS. This command helps to show detailed information about the dependencies and their versions required by a specific package or formula in Homebrew. The verbose flag enables a more extensive output that includes intermediate steps and additional details, allowing users to better understand the dependency resolution process.'
