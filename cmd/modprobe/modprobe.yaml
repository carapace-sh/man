# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: modprobe
description: Add and remove modules from the Linux Kernel
flags:
    --dump-modversions: Same as --show-modversions
    --first-time: Fail if module already inserted or removed
    --force-modversion: Ignore module's version
    --force-vermagic: Ignore module's version magic
    --ignore-install: Ignore install commands
    --ignore-remove: Ignore remove commands
    --remove-dependencies: Also remove modules depending on it
    --show: Same as --dry-run
    --show-config: Same as --showconfig
    --show-exports: Only print module exported symbol versions and exit
    --show-modversions: Dump module symbol version and exit
    -C, --config=: Use FILE instead of default search paths
    -D, --show-depends: Only print module dependencies and exit
    -R, --resolve-alias: Only lookup and print alias and exit
    -S, --set-version=: Use VERSION instead of `uname -r`
    -V, --version: show version
    -a, --all: Consider every non-argument to be a module name
    -b, --use-blacklist: Apply blacklist to resolved alias.
    -c, --showconfig: Print out known configuration and exit
    -d, --dirname=: Use DIR as filesystem root for /lib/modules
    -f, --force: Force module insertion or removal.
    -h, --help: show this help
    -i: Ignore commands
    -n, --dry-run: Do not execute operations, just print out
    -q, --quiet: disable messages
    -r, --remove: Remove modules instead of inserting
    -s, --syslog: print to syslog, not stderr
    -v, --verbose: enables more messages
documentation:
    command: '[AI] `modprobe` is a Linux utility command used for loading and unloading kernel modules dynamically. A kernel module is a piece of software that can be loaded or unloaded from the kernel on-demand, providing additional functionality without the need to reboot the system. The `modprobe` command interacts with the Linux kernel''s module loading system, taking care of dependencies and other necessary processes, ensuring that the specified modules are properly loaded.'
    flag:
        all: '[AI] `modprobe --all` is a Linux command used to automatically insert (or "load") all available kernel modules in the system''s module directory. This can be useful for troubleshooting or testing purposes, as it ensures that all necessary modules are active. Be aware that loading all modules may cause performance degradation and potential conflicts, so use with caution.'
        config: '[AI] `modprobe --config` is a command used in Linux operating systems to display the currently loaded kernel modules and their corresponding configuration options. It''s part of the modprobe utility, which is used for loading, removing, or querying Linux kernel modules. This specific usage of the command provides a human-readable output of the module parameters, allowing users to understand how modules are configured when they''re in use.'
        dirname: '[AI] `modprobe` is a Linux utility for loading and removing kernel modules. The option `--dirname` is used to specify the directory containing the module file instead of providing the absolute path to the module file itself. This can be useful when dealing with modules located in non-standard directories or when working with multiple versions of a module. For example, `sudo modprobe --dirname /path/to/module_directory/my_module` would load the `my_module.ko` kernel module located in the specified directory.'
        dry-run: '[AI] `modprobe` is a Linux utility used for loading and unloading kernel modules. The `--dry-run` option is used in a testing mode, meaning it performs a simulation of the module operation without actually making any changes to the system. It displays what would be done if the command were executed without modifications. This helps in understanding the impact of a particular module loading or unloading action before applying it in a production environment.'
        dump-modversions: '[AI] `modprobe` is a utility in Linux for loading, removing, and managing kernel modules. The command `modprobe --dump-modversions` lists the currently loaded kernel modules along with their respective version numbers. This information can be useful for troubleshooting or identifying which versions of specific modules are currently in use by the system.'
        first-time: '[AI] `modprobe --first-time` is a command used in Linux to load a kernel module, ensuring that all dependent modules are also loaded in the correct order and their initialization functions are executed before the main module. This option is particularly useful when installing or upgrading a new kernel module, as it helps ensure proper dependency resolution and avoid conflicts between different modules. The first-time flag forces modprobe to re-initialize all modules from scratch, regardless of whether they have already been loaded or not.'
        force: '[AI] `modprobe --force` is a Linux command used to insert or remove kernel modules into or from the system''s kernel, even if there are dependencies that are currently blocked due to conflicts. The `--force` option overrides any dependency issues and forces the module to be loaded or unloaded, potentially resolving conflicts manually. However, it should be used with caution as forced loading of modules may lead to system instability or unexpected behavior.'
        force-modversion: '[AI] `modprobe` is a Linux utility for loading, unloading, and managing kernel modules. The `--force-install-symlink` option tells modprobe to create a symbolic link between the module and its corresponding alias in the /lib/modules directory if it doesn''t already exist. The `--force-version` option instructs modprobe to use a specific version of a module when loading, even if there are newer versions available. So, combining these options `modprobe --force-install-symlink <module> --force-version <version>` will force the installation or removal of the specified module and ensure that the specified module version is used.'
        force-vermagic: |-
            [AI] `modprobe` is a utility in Linux for loading and managing kernel modules. The `--force-vermagic` option is used when attempting to load a kernel module with a different version compatibility (ABI) than the currently running kernel.

            By default, Linux kernels are configured to only allow loading modules with the same or a higher kernel version as the one currently running. This helps prevent potential compatibility issues and system instability. However, there are situations where it's necessary to load an older module.

            Using `modprobe --force-vermagic`, you can forcefully override this check and load the specified module, even if its kernel version is lower than that of the current kernel. Keep in mind that using this command comes with risks as it may introduce compatibility issues or system instability. It should be used carefully and only when necessary.
        help: |-
            [AI] `modprobe` is a Linux utility for loading or removing kernel modules. The command `modprobe --help` displays detailed help information about how to use modprobe effectively. Here's a brief summary of the information provided:

            - Load modules: Use `modprobe <module-name>`, where `<module-name>` is the name of the kernel module you want to load. You can also specify options for the module using the `--options` or `-o` flag followed by the option string.
            - Remove modules: Use `modprobe -r <module-name>` to remove a loaded kernel module from the system.
            - Blacklist modules: To prevent a module from being loaded at boot time, create a file named `/etc/modprobe.d/<filename>.conf` and add the line `blacklist <module-name>` in it.
            - Quiet mode: Use `modprobe --quiet <module-name>` to load the module without displaying any messages or progress indicators.
            - Verbose mode: Use `modprobe -v <module-name>` to load the module and display detailed information about the loading process.
            - Dependencies: Modules may depend on other modules to function correctly. When you try to load a module, modprobe will automatically load any necessary dependencies. You can also force modprobe to load all dependencies using `modprobe --all <module-name>`.
            - Force loading: Use `modprobe -f <module-name>` to forcefully load the specified module, even if it's already loaded or has errors.
            - Help and version: Get help information and the current version of modprobe by using `modprobe --help` or `modprobe --version`, respectively.
        i: '[AI] `modprobe` is a Linux utility for loading and unloading kernel modules. The option `-i <module_name>` instructs `modprobe` to install or insert the specified kernel module into the kernel. If the module depends on other modules, they will also be loaded automatically. This command is typically used to add new functionality to the Linux kernel without recompiling it.'
        ignore-install: '[AI] `modprobe --ignore-install` is a command used in Linux to load a kernel module without installing it permanently into the system. The `--ignore-install` option tells modprobe not to create any dependencies or symbolic links during the installation process, allowing you to keep the module loaded only in memory and remove it when desired without affecting system files. It''s helpful for situations where you want to test a module or use one temporarily without making permanent changes.'
        ignore-remove: '[AI] `modprobe --ignore-remove` is a command used in Linux to load a kernel module without removing any previously loaded conflicting modules. The `--ignore-remove` option tells modprobe not to remove any conflicting modules that are currently being used, allowing them to coexist with the new module being loaded. This can be useful when dealing with modules that have dependencies or conflicts with each other and cannot be unloaded without causing system instability or errors.'
        quiet: '[AI] `modprobe --quiet` is a Linux command used to load or remove kernel modules without displaying any informational messages. The `--quiet` option suppresses the output of progress bars and success/failure messages, making it suitable for use in scripts or automated processes where only the success or failure of the module loading is required.'
        remove: '[AI] `modprobe --remove` is a Linux command used to remove a previously loaded kernel module from memory. When you install or load a kernel module using modprobe, it gets added to the kernel''s runtime configuration and is automatically loaded when the system requires its functionality. If you no longer need the module, you can use `modprobe --remove` followed by the module name to unload it, making the kernel resources it was using available for other modules.'
        remove-dependencies: '[AI] `modprobe --remove-dependencies` is a command in Linux used to remove dependencies of a kernel module without unloading it or any dependent modules. When this command is executed for a specific module, it removes only the explicit dependencies listed in the module''s Makefile or control file and does not affect other dependencies or the functioning of the system as a whole. This can be useful when dealing with conflicting or unwanted dependencies.'
        resolve-alias: '[AI] `modprobe` is a Linux utility for loading, removing, or managing kernel modules. The `--resolve-alias` option is used to resolve alias names for kernel modules instead of using the actual module name. An alias is a symbolic link to another module and can be used to simplify the loading process by giving a descriptive name to a frequently used module. When `modprobe --resolve-alias` is used followed by an alias name, modprobe will display the actual kernel module that the alias points to. This can be helpful for understanding dependencies or locating specific modules in the system.'
        set-version: '[AI] `modprobe --set-version` is a command in Linux used to set or query the version number of a kernel module. It''s part of the modprobe utility, which is employed for managing kernel modules. By using this command with the `--set-version` option followed by the module name and the desired version number, you can modify the version information stored within the module file without recompiling it. This can be helpful for some specific use cases, such as maintaining compatibility with applications that depend on a certain module version.'
        show: '[AI] `modprobe --show` is a command used in Linux systems for displaying information about modules (dynamically loadable kernel drivers or files) currently loaded into the Linux kernel. It shows the name, size, and other relevant details of each module. The output also includes the source file location and the date of compilation. This command can be helpful for system administrators to verify which modules are currently loaded and for troubleshooting purposes.'
        show-config: '[AI] `modprobe --show-config` is a Linux command used to display the configuration information of a specific kernel module. When you run this command followed by the name of a module, modprobe retrieves and prints out the key-value pairs that define how the module interacts with the Linux kernel at load time. These configurations can include things like dependencies, options, and other parameters. This information is crucial for system administrators to understand the behavior and impact of loading or unloading a particular module.'
        show-depends: '[AI] `modprobe --show-depends` is a Linux command used to display the dependencies of a kernel module. When you run this command followed by the name of a module, modprobe will output the list of modules that the given module depends on, both at compile time and runtime, ensuring proper sequencing when loading or unloading modules in the system.'
        show-exports: '[AI] `modprobe` is a utility in Linux for loading and managing kernel modules. The command `modprobe --show-exports` lists the symbols (functions and variables) that are exported by installed kernel modules, making it easier for other modules or user space applications to interact with them. In essence, it provides information about the available interfaces between loaded modules and the kernel.'
        show-modversions: '[AI] `modprobe` is a utility in Linux for loading and managing kernel modules. The command `modprobe --show-modversions` is used to display detailed version information of currently loaded kernel modules, including their source code repositories, version numbers, and other metadata. This can be helpful for debugging or tracking down compatibility issues between different software packages that depend on specific kernel module versions.'
        showconfig: '[AI] `modprobe --show-config` is a Linux command used to display the configuration options for a specific kernel module. When you run this command followed by the module name, it will show you the options that were set when the module was loaded into the kernel, along with their current values. This can be helpful in troubleshooting issues related to kernel modules or understanding how they are configured.'
        syslog: '[AI] `modprobe` is a Linux utility for loading and removing kernel modules. The option `--syslog` causes `modprobe` to log messages about its actions to the system logger (often rsyslog or syslog-ng) rather than to the console or standard error stream. This allows system administrators to view and analyze the messages using logging tools, which can be helpful for troubleshooting and monitoring system activity.'
        use-blacklist: '[AI] `modprobe` is a Linux utility for loading and unloading kernel modules dynamically. The `--use-blacklist` option is used to specify a file containing a list of modules that should not be loaded when other modules are being loaded with `modprobe`. This can be useful in situations where certain modules cause conflicts or issues with other modules, and you want to prevent them from being loaded. The blacklist file is typically located in the `/etc/modprobe.d/` directory in Linux distributions that use system-wide module configuration files.'
        verbose: '[AI] `modprobe` is a utility in Linux for loading and removing kernel modules. The `--verbose` option is used to run `modprobe` with verbose output, meaning it will provide detailed information about the module loading process. This includes messages about dependencies being met or not met, errors if any occur during loading, and other relevant details. In essence, `modprobe --verbose` provides a more informative and debugging-friendly output when dealing with kernel modules.'
        version: '[AI] `modprobe` is a utility in Linux for loading and removing kernel modules. The command `modprobe --version` displays the version information of modprobe itself, providing details such as its release number, compilation date, and other relevant information to help determine if the installed version is up-to-date or compatible with your system.'
