# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: generate
description: Generate documentation
flags:
    --defer: Defer to the state variable for resolving unselected nodes
    --exclude*=: Specify the models to exclude
    --favor-state: Defer to the state variable for resolving unselected nodes
    --log-path=: Configure the 'log-path'
    --no-compile: Do not run "dbt compile" as part of docs generation
    --no-defer: Do not defer to the state variable for resolving unselected nodes
    --no-favor-state: If defer is set, expect standard defer behaviour
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --selector=: The selector name to use, as defined in selectors.yml
    --state=: Use the given directory as the source for json files to compare
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    -h, --help: show this help message and exit
    -m, --models*=: Specify the nodes to include
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
documentation:
    command: '[AI] `dbt docs generate` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command generates documentation for dbt projects based on the SQL and model definitions. The generated documentation includes information about the models, their columns, data types, and any comments or docstrings added to the code. The output is typically saved as HTML files in a `docs` directory within your dbt project.'
    flag:
        defer: '[AI] `dbt docs generate --defer` is a command used in dbt (data build tool) for generating documentation. The `--defer` option means that dbt will not stop the generation process if it encounters any errors or warnings. Instead, it will continue processing and report each issue separately after the entire documentation has been generated. This can be useful when dealing with large projects or complex models where some issues may not prevent the overall documentation from being valuable.'
        exclude: '[AI] `dbt docs generate --exclude` is a command used in dbt (Data Build Tool) for generating documentation files. The `--exclude` option allows users to exclude specific models or artifacts from the documentation generation process. This can be useful when there are certain objects that don''t require documentation, reducing the amount of generated content and making it easier to navigate through the documentation.'
        favor-state: '[AI] `dbt docs generate --favor-state` is a command used in dbt (data build tool) for generating documentation. The `--favor-state` option determines which state of the documentation to prioritize: draft or published. By using `--favor-state=draft`, the documentation generator will preferentially process and document the current draft versions of your dbt models and artifacts. If set to `published`, only the published versions will be documented.'
        help: '[AI] `dbt docs generate --help` is a command used in dbt (data build tool) to generate documentation for your dbt projects. The `--help` option displays detailed information about how to use this specific command correctly. It explains the available options, their meanings, and examples of usage. This command generates markdown files containing documentation about your data models, tests, transformations, and other project elements in the `_docs/generates` directory.'
        log-path: '[AI] `dbt docs generate --log-path` is a command used in dbt (data build tool) to generate documentation for your dbt projects. The `--log-path` option specifies the file path where the generated log will be saved. This can be useful for tracking the documentation generation process and troubleshooting any potential issues.'
        models: '[AI] `dbt docs generate --models` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This command generates documentation for all models defined in a dbt project. A model in dbt context refers to a SQL script that defines how data is transformed or manipulated. By running `dbt docs generate --models`, users can create and update documentation for their data transformations, making it easier to understand the business logic behind data pipelines.'
        no-compile: |-
            [AI] `dbt docs generate --no-compile` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command generates documentation for dbt projects, but with the `--no-compile` flag, it skips the compilation step.

            Compilation in dbt context refers to the process of transforming source SQL statements into executable units called models. Documentation generation without compilation will only create Markdown files based on the existing dbt project metadata (such as model and artifact names, comments, etc.), without running the SQL code or generating any output files.

            The main use case for this command is to quickly update documentation without incurring the additional time required for code compilation. However, keep in mind that this means the generated documentation might not reflect the most recent state of your data models if there have been changes since the last compilation.
        no-defer: '[AI] `dbt docs generate --no-defer` is a command in dbt (Data Build Tool), used to generate and update documentation for your dbt models and artifacts. The `--no-defer` flag disables the deferred execution of this documentation generation task, meaning it will be executed synchronously during the current run instead of being scheduled for later. By doing so, you can ensure that your docs are always up-to-date with the latest model changes.'
        no-favor-state: '[AI] `dbt docs generate --no-favorite-state` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command generates documentation for dbt projects using the Markdown files found in the `docs` directory. The `--no-favorite-state` flag disables the automatic highlighting of favorite states in generated docs. In other words, it prevents the generation of docs with any preferred or default state marked as favorited.'
        no-version-check: '[AI] `dbt docs generate --no-version-check` is a command used in dbt (data build tool) for generating documentation from your data modeling projects. The `--no-version-check` flag disables the version check during this process, which means that dbt will not throw an error if it detects that there are differences between the current project and the latest documented version. This is useful when you want to regenerate documentation for a branch or commit that has diverged from the mainline, without being hindered by potential version mismatches.'
        profile: '[AI] `dbt docs generate` is a command used in dbt (data build tool) for generating documentation from your dbt projects. The `--profile` option specifies which dbt profile to use when running the command. Profiles contain configuration settings like database credentials and other project-specific information. By using `--profile`, you can generate docs based on a specific environment or setup in your dbt project.'
        project-dir: '[AI] `dbt docs generate` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command generates documentation for dbt projects based on the defined models, tests, and transformations. The `--project-dir` flag specifies the directory where the generated documentation files will be saved. In summary, `dbt docs generate --project-dir <directory>` creates and saves documentation for a dbt project in the specified directory.'
        select: '[AI] `dbt docs generate --select` is a command used in dbt (data build tool) for generating documentation for specific models or artefacts. It selectively generates markdown files based on user-defined selection criteria such as model names, materialized views or tables. These generated files can then be easily reviewed, shared, and integrated with other documentation systems.'
        selector: '[AI] `dbt docs generate --selector` is a command used in dbt (data build tool) for generating documentation files. The `--selector` option allows specification of a selective set of documents to be generated based on document IDs, paths, or tags. This can help reduce the amount of generated documentation and make it easier to manage large projects.'
        state: '[AI] `dbt docs generate --state` is a command in dbt (Data Build Tool), used to generate or update documentation for database models and artifacts. The `--state` option ensures that only the documentation for files with changes since the last generation is regenerated, improving efficiency. This command generates Markdown files in the `docs/generated` directory, ready for publication on a platform like GitHub Pages or a company Intranet.'
        target: '[AI] The `dbt docs generate` command with the `--target` option is used in dbt (Data Build Tool), an open-source data transformation tool, to generate documentation files for specific models or tests. The generated documents include details about the columns, data types, and other metadata for each model or test. The `--target` option specifies the output format of the generated documentation, such as Markdown, HTML, or JSON.'
        target-path: '[AI] `dbt docs generate` is a command used in dbt (Data Build Tool), an open-source data transformation and testing tool. The `--target-path` option specifies the directory where generated documentation files will be saved after running this command. This allows users to store their generated documentation in a desired location for easy access and version control.'
        threads: '[AI] `dbt docs generate --threads` is a command used in dbt (data build tool) to generate or update documentation for database models and artifacts. The `--threads` option specifies the number of threads to use during the generation process, allowing for parallel processing to increase efficiency. This can save time when working with larger projects containing numerous models or complex documentation.'
