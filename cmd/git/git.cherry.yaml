# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cherry
description: Find commits yet to be applied to upstream
group: low-level interrogator
flags:
    --abbrev?: use <n> digits to display object names
    -v, --verbose: be verbose
documentation:
    command: '[AI] `git cherry` is a Git command used for applying or sharing changes from one branch to another, even if the branches have diverged significantly. It works by extracting a single commit (or a series of commits) from one branch and applying it to another branch as a separate patch. This can be useful when integrating non-fast-forward changes, resolving merge conflicts, or sharing specific changes with others. To use `git cherry`, you first need to export the desired commits using `git cherry-pick` and then apply those changes to another branch using `git cherry-apply`. Alternatively, you can share a cherry-picked commit as a standalone patch file for later application with `git format-patch` or by sending it directly to others.'
    flag:
        abbrev: '[AI] `git cherry --abbrev` is a Git command used to show the abbreviated commit messages of cherry-picked commits. Cherry-pick is a Git feature to apply the changes introduced by some existing commits to the current branch. The `--abbrev` option with this command displays only the first 50 characters of each commit message, providing a compact and quick way to identify the commits being compared or checked.'
        verbose: '[AI] `git cherry --verbose` is a Git command used for applying or publishing cherries, which are individual Git commits or branches, between two different Git repositories. The `--verbose` option increases the amount of output displayed during the operation, providing more detailed information about each step in the process, including any conflicts that might occur and how they can be resolved. It helps in troubleshooting and understanding the changes being applied.'
