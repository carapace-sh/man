# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: parse
description: Parses the project and provides information on performance
flags:
    --compile: Compile
    --log-path=: Configure the 'log-path'
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    --vars=: Supply variables to the project
    --write-manifest: Write manifest
    -h, --help: show this help message and exit
    -t, --target=: Which target to load for the given profile
documentation:
    command: '[AI] `dbt parse` is a command used in dbt (Data Build Tool), an open-source data transformation and testing tool. This command is responsible for parsing dbt models, which are written using SQL and dbt''s model definition language. When you run `dbt parse`, dbt checks the syntax of your models and reports any errors or warnings. It does not execute the models or generate output files, but it ensures that your models conform to the expected format before running other commands like `dbt run` for data transformation and testing.'
    flag:
        compile: |-
            [AI] `dbt parse --compile` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This specific command does two things:

            1. Parsing: It reads the dbt project files, including models, tests, and profiles, and checks their syntax for errors. This ensures that the structure and formatting of the files are valid.
            2. Compiling: Once the files are parsed without any issues, the command proceeds to compile them. Compilation involves transforming the dbt model files into SQL scripts or other target formats (like CSV or Parquet) based on the specified profile settings. The resulting compiled artifacts are then stored in the `_dbt` subdirectory of your project.

            This command is essential for checking that your data models and tests are correct before running them in a production environment, as it catches any syntax errors early on.
        help: '[AI] `dbt parse` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. The `--help` flag, when passed to this command, displays detailed help information about the `parse` function. This includes a brief description of what `parse` does, which is to read a SQL file or a folder containing SQL files and generate internal dbt model representations. It also lists any available options for customizing the parsing process, such as specifying a different profile or output format.'
        log-path: '[AI] `dbt parse --log-path` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command parses dbt models without running them, generating logs for each model to help identify issues during development. The `--log-path` option specifies the file path where these logs will be saved, allowing for easy review and troubleshooting later on.'
        no-version-check: '[AI] `dbt parse` is a command in dbt (data build tool) used to check the syntactical correctness of SQL files without actually executing them against the database. The `--no-version-check` flag disables version checking during parsing, allowing you to parse files with potentially different versions of SQL dialects or dbt configuration than what''s currently active in your project. This can be useful when working on multiple branches or projects with different configurations without having to switch between them each time.'
        profile: '[AI] `dbt parse --profile` is a command used in dbt (data build tool), an open-source data transformation and orchestration platform. This command runs the parsing stage of a dbt project, which converts SQL and model files into an internal format that can be executed by dbt. The `--profile` option specifies the use of a particular profile containing database connection information to connect and interact with the target datastore(s).'
        project-dir: '[AI] `dbt parse --project-dir` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command parses and validates the dbt project configuration located in the specified project directory. It checks for correct file structures, identifies models, tests, seeds, and other artifacts, ensuring that they can be correctly processed during the data transformation workflow. This step is important for maintaining a healthy and efficient data engineering process within a dbt project.'
        target: '[AI] `dbt parse --target` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool, to parse dbt projects and generate output based on the specified target. The `--target` flag indicates the type of output generated, which can be models, tests, docs, or all three. This command is commonly used for validation and documentation purposes before running jobs to build and materialize data.'
        target-path: '[AI] `dbt parse --target-path` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command is used to parse dbt projects and generate output artifacts, specifically the materialized snapshots of the models, into the specified target path without running any data transformations or creating any files other than those in the target path. The main use case for this command is when you want to generate the output artifacts locally for testing purposes or to share with a team member who does not have access to your cloud storage.'
        threads: '[AI] `dbt parse --threads` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command parses dbt models and scripts, compiling them into internal representation for execution. The `--threads` option specifies the number of threads to use during this process. Using multiple threads can improve parse performance by allowing dbt to parse models concurrently. However, be aware that increasing the number of threads may require more system resources.'
        vars: '[AI] `dbt parse --vars` is a command used in dbt (data build tool) to parse dbt projects'' SQL files and apply provided variable values during the parsing process. This command does not execute or produce any output files, but it sets up the environment for downstream tasks by defining variables. These variables can be used to customize the behavior of dbt models and tests, allowing for more dynamic and flexible data transformation and testing processes.'
        write-manifest: '[AI] `dbt parse --write-manifest` is a command used in dbt (data build tool) to parse your dbt project files and generate or update a manifest file. This manifest file contains metadata about the models, tests, and other artifacts in your project, including their dependencies. By running this command, you ensure that the information in the manifest file remains accurate, which is important for correct model execution order and test reporting.'
