# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clean
description: Remove untracked files from the working tree
group: main
flags:
    -X: remove only ignored files
    -d: remove whole directories
    -e, --exclude=: add <pattern> to ignore rules
    -f, --force: force
    -i, --interactive: interactive cleaning
    -n, --dry-run: dry run
    -q, --quiet: do not print names of files removed
    -x: remove ignored files, too
documentation:
    command: |-
        [AI] `git clean` is a Git command used to remove untracked files from your local repository. It has two modes:

        1. `-n` or `--dry-run`: This mode shows what files would be deleted without actually deleting them, allowing you to review the changes before committing.
        2. `<path>...`: Specify a path to clean in the repository. If no path is provided, it will delete all untracked files in the current directory and below.
        3. Without any options or paths, it deletes all untracked files in the current directory and below.
        4. By default, `git clean` does not remove files that are ignored by .gitignore. To force removal of those as well, use `-f` or `--force`.
        5. Another important option is `-i` or `--interactive`, which allows you to review and selectively delete untracked files.

        Overall, `git clean` helps maintain a clean repository by removing unintended or unneeded files.
    flag:
        X: '[AI] `git clean -X` is a Git command used to remove untracked files from the current directory and its subdirectories. The `-X` or `--force` option tells Git to delete files without asking for confirmation. This command does not affect tracked files or the contents of the Git index. It''s often used before committing to a clean state or when preparing a project for check-in in a version control workflow.'
        d: '[AI] `git clean -d` is a Git command used to remove untracked files and directories from your working directory, but it does not delete files that are in the Git index (i.e., staged for commit). The `-d` option tells Git to only remove empty directories. This can be useful when you have unnecessary or accidental files in your working directory that are not part of your project and want to clean them up without affecting your version history. However, be cautious as this command permanently removes the untracked files and cannot be undone.'
        dry-run: '[AI] `git clean --dry-run` is a Git command used to simulate the effect of the `git clean` command without actually removing any files. It lists the files that would be deleted based on the given options, allowing users to review and decide if they want to proceed with the cleanup action. This helps in avoiding accidental deletion of important files.'
        exclude: '[AI] `git clean --exclude` is a Git command used to remove untracked files from the working directory and optionally from the Git index as well. The `--exclude` option allows specifying a pattern to exclude certain files or directories from being deleted. This can be useful when you want to keep some files that are not versioned under Git but don''t want to remove them accidentally during a clean operation.'
        force: '[AI] `git clean --force` is a Git command used to remove untracked files and directories from your local repository. The `--force` option tells Git to delete files without asking for confirmation. This command should be used with caution as it permanently deletes the specified files, and there''s no way to undo the operation. It is often used when you want to prepare your working directory for a fresh checkout or before committing changes.'
        interactive: |-
            [AI] `git clean --interactive` is a Git command that allows users to selectively remove untracked files and directories from their working directory. This command provides an interactive prompt, allowing users to review each file or directory before making the decision to delete it.

            When you run this command in your terminal, Git displays a list of all untracked files and directories along with their paths. Each item is marked with an 'A' or 'D' character indicating whether it's an untracked file ('A') or directory ('D'). You can use the spacebar to select items, and 'r' to recursively select entire directories. Once you've made your selections, press 'd' to delete the chosen files and directories from your working directory. This command does not affect your Git repository; it only affects your local working directory.
        quiet: '[AI] `git clean --quiet` is a Git command used to remove untracked files from the current directory and subdirectories, without displaying any messages. The `--quiet` option suppresses informational messages during the execution of the command, making it suitable for scripts or automated workflows where silent cleanup is desired.'
        x: '[AI] `git clean -x` is a Git command used to remove untracked files and directories from your local repository. The `-x` option tells Git to also delete hidden directories (`.gitignore_files` and `.git`) that are not part of your version control system. It''s essential for resetting the state of your working directory before making a new commit or starting fresh with a clean slate in your project.'
