# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: merge-base
description: Find as good common ancestors as possible for a merge
group: low-level interrogator
flags:
    --fork-point: find where <commit> forked from reflog of <ref>
    --independent: list revs not reachable from others
    --is-ancestor: is the first one ancestor of the other?
    --octopus: find ancestors for a single n-way merge
    -a, --all: output all common ancestors
documentation:
    command: '[AI] `git merge-base` is a Git command used to find the common ancestry of two branches or commit hashes. It returns the most recent common ancestor commit hash, which represents the last point where both branches shared a common history. This command helps in various scenarios like resolving merge conflicts or verifying relatedness between different branches in a Git repository.'
    flag:
        all: '[AI] `git merge-base --all` is a Git command used to find the common ancestor commit(s) between multiple branches or commits in Git. The `--all` option tells Git to find the common ancestors for all pairs of the given commits or branches, printing out the branch names and the common ancestor commits. This command helps in various Git workflows, such as resolving merge conflicts or understanding the commit history relationship between different branches.'
        fork-point: '[AI] `git merge-base --fork-point <commit1> <commit2>` is a Git command that returns the commit identifier representing the most recent common ancestor of two branches, but with an additional feature: it also marks the point where the two branches diverged in their histories. This information can be useful when working with forked repositories to determine the base point of new development.'
        independent: '[AI] The `git merge-base --independent` command is used to find the most recent common ancestor (MCA) of two branches or commits, but it returns only the commit hashes and does not perform any merging. The result are two unique commits, each representing a branch tip, that share the MCA as one of their ancestors. This can be useful for scripts or automated workflows where you need to find the base point for merging without actually performing the merge.'
        is-ancestor: '[AI] `git merge-base --is-ancestor <commit1> <commit2>` is a Git command that checks if `<commit1>` is an ancestor of `<commit2>`. An ancestor commit is a common base for two commits in a Git repository. If `<commit1>` is an ancestor of `<commit2>`, then `git merge-base --is-ancestor` will return `true`. If not, it will return `false`. This command can be useful when determining the relationship between commits and resolving merge conflicts.'
        octopus: |-
            [AI] The `git merge-base --octopus` command is an advanced Git merging strategy used in complex merges involving multiple branches or repositories. It calculates the common ancestry of multiple heads, or branches, and outputs one or more commit hashes that represent the last common commit among them.

            Unlike a standard merge where two branches are merged into a third, `--octopus` is designed for merging multiple branches into a single branch. This can be useful when working on a central repository with multiple developers, each contributing to different features or bug fixes. The resulting merge commit will have multiple parents, reflecting the merging of all involved branches.

            In summary, `git merge-base --octopus` is a Git command used to perform complex, multi-branch merges in which multiple branches are merged into a single branch. It outputs the common ancestors among the given branches and creates a merge commit with those parents.
