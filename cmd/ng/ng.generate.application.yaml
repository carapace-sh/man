# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: application
description: Generates a new basic app definition in the projects subfolder of the workspace
flags:
    --minimal: Create a bare-bones project without any testing frameworks.
    --routing: Create a routing NgModule.
    --skip-install: Skip installing dependency packages.
    --skip-package-json: Do not add dependencies to the "package.json" file.
    --strict: Creates an application with stricter bundle budgets settings.
    --style=: The file extension or preprocessor to use for style files.
    --view-encapsulation=: The view encapsulation strategy to use in the new application.
    -S, --skip-tests: Do not create "spec.ts" test files for the application.
    -p, --prefix: A prefix to apply to generated selectors.
    -s, --inline-style: Include styles inline in the root component.ts file.
    -t, --inline-template: Include template inline in the root component.ts file.
documentation:
    command: '[AI] The `ng generate application` command is used in Angular CLI to create a new Angular project from a predefined, empty or minimal preset. This command generates all necessary files and directories for a new Angular application including the app.component.ts file, app.module.ts, and other essential files. It sets up the basic project structure and configurations. The newly created project can then be run using `ng serve`.'
    flag:
        inline-style: '[AI] `ng generate application --inline-style` is a command used in Angular, a popular JavaScript framework for building web applications. This command generates a new Angular application with inline styles instead of separating styles into separate CSS files. Inline styles mean that the CSS rules are written directly in the HTML component file using the `style` attribute or the `::ng-deep` selector. This approach can simplify development and deployment, but it may lead to larger file sizes and less organized code structure, making it harder to maintain and scale the project over time.'
        inline-template: '[AI] `ng generate application --inline-template` is a command used with Angular CLI (Command Line Interface) to create a new Angular application with inline templates instead of using external files. Inline templates mean that the HTML, CSS, and other templates are directly embedded within the corresponding component files as strings, rather than being stored separately in their own files. This can simplify the project structure for small projects or when working offline without internet access.'
        minimal: '[AI] `ng generate application --minimal` is a command used with Angular CLI (Angular Command Line Interface) to create a new Angular project with minimal configuration. This means that only essential files and configurations will be generated, excluding features like routing, forms, and other advanced settings. The result is a lightweight project structure suitable for custom development or building smaller applications.'
        prefix: '[AI] The `ng generate application --prefix` command is used in Angular to create a new Angular application with a specific prefix added to all the generated component, service, and module names. This prefix can be set to any desired value. For instance, if you run `ng generate application myPrefix`, Angular will create a new application with components named `myPrefixComponent` instead of just `Component`. This can be useful when working on larger projects or in teams for better organization and clearer naming conventions.'
        routing: '[AI] `ng generate application --routing` is a command used in Angular CLI (Command Line Interface) for creating a new Angular application with preconfigured routing modules. Routing allows navigation between different components within the Angular application. This command creates a new Angular application, sets up routing modules, and adds essential files such as app-routing.module.ts and routing components under the apps/<app-name>/src folder. By default, it also sets up a Home component as the default landing page for the application.'
        skip-install: '[AI] The `ng generate application --skip-install` command is used in Angular CLI to create a new Angular application without running the npm install command during the generation process. This means that after the application is generated, you will need to manually run `npm install` or `yarn install` in the newly created project directory to install the necessary dependencies before starting development.'
        skip-package-json: '[AI] The `ng generate application` command with the flag `--skip-package-json` is used when creating a new Angular application, but you don''t want to generate a new `package.json` file. This flag skips the creation of the `package.json` file during the application generation process. If you already have a `package.json` file for your project or prefer managing dependencies in another way, this command can be useful.'
        skip-tests: '[AI] The `ng generate application --skip-tests` command is used in Angular to create a new Angular application with the Angular CLI. The `--skip-tests` option is used to disable the creation of test files and spec files for the new application. This can be useful when quickly creating a new project or when testing is not required. The rest of the command generates a new Angular application following the default configuration.'
        strict: '[AI] `ng generate application --strict` is a command used in Angular, a JavaScript framework for building web applications. This command generates a new Angular application using the Angular CLI (Command Line Interface). The `--strict` flag enables strict type checking during the build process for improved code quality and potential error prevention. It ensures that all TypeScript errors are reported and fixed before the application is deployed, which can lead to more stable and maintainable code.'
        style: '[AI] The `ng generate application --style` command is used in Angular to create a new Angular application with a specific pre-configured Style Preference from Angular''s preset styles, such as "scss" or "css-interpolation". The `--style` option specifies which style configuration file to use when creating the application. This command automates the process of setting up the project structure and style files for a new Angular project with the selected style configuration.'
        view-encapsulation: |-
            [AI] The `ng generate application --view-encapsulation` command is used when creating a new Angular application using the Angular CLI (Command Line Interface). This option specifies how Angular applies CSS encapsulation to the components in the newly created application.

            There are two types of view encapsulation:

            1. **Emulated**: In this mode, Angular creates a unique shadow DOM for each component. This means that each component's CSS rules only apply to its own shadow DOM and do not affect other parts of the application. This is the default behavior when creating an Angular application.
            2. **Native**: When using native view encapsulation, Angular does not create a separate shadow DOM for components. Instead, it applies CSS rules directly to the component's host element in the HTML document. This approach can result in faster rendering since there is no need to create and manage shadow DOMs. However, it may lead to potential CSS conflicts with other parts of the application, as the CSS rules apply globally instead of being isolated within the component's shadow DOM.

            When using the `ng generate application --view-encapsulation=native` command, Angular creates a new application with native view encapsulation enabled for all components.
