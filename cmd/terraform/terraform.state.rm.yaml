# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rm [options] ADDRESS...
description: Remove instances from the state
flags:
    -backup?: Path where Terraform should write the backup state.
    -dry-run: Only print out what would've been removed
    -ignore-remote-version: Continue even if remote and local Terraform versions are incompatible.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
    -state?: Path to the state file to update.
documentation:
    command: '[AI] `terraform state rm` is a command used in Terraform, an open-source infrastructure as code software tool. It stands for "remove" and is used to remove a resource or module from your Terraform state file. This means that the corresponding infrastructure will not be managed by Terraform any longer. Be cautious when using this command, as removing resources may have unintended consequences if they are still in use or have dependencies. It''s always recommended to double-check before running this command.'
    flag:
        backup: '[AI] The `terraform state rm -backup` command is used in Terraform, an open-source infrastructure as code software tool, to remove a resource from your local Terraform state file and delete its corresponding backup. This action is permanent and irreversible, meaning that the resource will be deleted both from your infrastructure and from your Terraform state. The `-backup` option specifies that the associated backup should also be deleted. It''s important to note that using this command requires careful consideration as the removal of resources could potentially lead to unintended consequences in your infrastructure.'
        dry-run: '[AI] The `terraform state rm` command with the `-dry-run` option is a Terraform configuration management tool command that simulates the removal of resources from your infrastructure configuration. It does not actually delete anything, but it shows you what would be deleted based on your current state file. This helps you understand the impact of the proposed change before executing it in a production environment.'
        ignore-remote-version: '[AI] The `terraform state rm` command in Terraform is used to remove resources from your local state file. The `-ignore-remote-version` flag is an optional argument that tells Terraform to ignore any differences between the locally stored version of a resource and its current remote configuration. This means that even if there are changes in the remote infrastructure that are not reflected in the local state, those resources will still be removed from the local state file when you run this command. Use this flag with caution as it can lead to unintended changes or data loss.'
        lock: '[AI] The `terraform state rm -lock` command is used in Terraform, an open-source infrastructure as code software tool, to remove an existing lock file associated with a specific resource in the Terraform state file. This command does not delete the resource itself but rather removes the lock file that prevents Terraform from making changes to the locked resource. It is often used when there''s a need to modify or destroy a resource while another process has it locked, ensuring that both processes do not attempt to make conflicting modifications at the same time.'
        lock-timeout: '[AI] The `terraform state rm` command is used to remove resources from Terraform''s state file. The option `-lock-timeout` sets the duration for which Terraform will hold a lock on the removed resources before releasing it. This is useful when you want to prevent other Terraform runs from modifying those resources during your ongoing changes. The default value for this option is 30 minutes. Setting `-lock-timeout "0s"` means you don''t set any timeout and immediately release the lock after removal.'
        state: '[AI] The `terraform state rm` command is used in Terraform, an open-source infrastructure as code software tool, to remove a resource or module from Terraform''s state file. This operation does not delete the underlying infrastructure but removes the representation of it in the state file, which can be useful when testing or making adjustments to your infrastructure configuration without affecting the actual infrastructure. The `-state` flag specifies the path to the state file for Terraform to use for this operation.'
