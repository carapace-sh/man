# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: item-archive [<number>]
description: Archive an item in a project
flags:
    --format=: 'Output format: {json}'
    --id!=: ID of the item to archive
    --owner=: Login of the owner. Use "@me" for the current user.
    --undo: Unarchive an item
    -q, --jq=: Filter JSON output using a jq `expression`
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
documentation:
    command: '[AI] The `gh project item-archive` command is a GitHub CLI (Command Line Interface) command used to create an archive of a specific project item, such as an issue or a pull request, in a GitHub repository. This command allows users to download the entire issue or pull request, including its metadata and associated files, into a single archive file for backup or offline access purposes. The archive can be saved with a specified output file name using the `--output` flag.'
    flag:
        format: '[AI] The `gh project item-archive` is a GitHub CLI (Command Line Interface) command used to create an archive of a specific project item, such as an issue or pull request. The `--format` option specifies the desired output format for the archive, which can be set to various options like `json`, `text`, or `tar`. For example, `gh project item-archive <item_number> --format tar` will create a tarball archive of the specified item.'
        id: '[AI] The `gh project item-archive --id` command is a GitHub CLI (Command Line Interface) command used to download an archive of a specific project item, such as an issue or a pull request, from a GitHub repository. The `--id` flag is used to specify the unique identifier (ID) of the item to be archived. This command will create a .tar file containing the item data and any associated files, which can then be extracted locally for further analysis or backup purposes.'
        jq: '[AI] The command `gh project item-archive --jq` is a combination of the GitHub CLI (gh) and the JavaScript Object Notation query language (jq). This command archives an GitHub Project item using gh, and then processes the output with jq for further manipulation. The `--jq` option passes the output directly to jq for parsing and filtering data.'
        owner: '[AI] The `gh project item-archive --owner` command is a GitHub CLI (Command Line Interface) command used to create an archive of an item in a specific GitHub project owned by a given user. This command retrieves the project data, including all files and metadata, and packages it into a single file for easy transfer or storage. The archive can be downloaded locally or piped to another process for further manipulation.'
        template: |-
            [AI] The `gh project item-archive --template` command is a GitHub CLI (Command Line Interface) command used to create an archive of an specific project item, such as an issue or a pull request, in the GitHub format (JSON or YAML).

            The `item-archive` subcommand is responsible for creating the archive, and the `--template` option specifies that the output should be in template form. This means that the output will include placeholders for values that can be replaced with specific data when the template is used to create a new item.

            This command is often used to automate the creation of new issues or pull requests based on existing ones, by using the information from an archived item as a template.
        undo: '[AI] The `gh project item-archive --undo` command is used in GitHub''s Git command-line tool (gh) to undo a previous archive action on an GitHub Project item. This means, if you have archived an issue, pull request or project board card and now want to restore it back to its active state, you can use this command. It retrieves the previously archived item from the GitHub API''s archive and applies the reverse operation, effectively unarchiving the item.'
