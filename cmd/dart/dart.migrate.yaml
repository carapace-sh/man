# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: migrate
description: Perform null safety migration on a project
flags:
    --apply-changes: Apply the proposed null safety changes to the files on disk.
    --ignore-errors: Attempt to perform null safety analysis even if the project has analysis errors.
    --no-web-preview: Print proposed changes to the console.
    --preview-hostname=: Run the preview server on the specified hostname.
    --preview-port=: Run the preview server on the specified port.
    --skip-import-check: Go ahead with migration even if some imported files have not yet been migrated.
    --summary=: Output a machine-readable summary of migration changes.
    --web-preview: Show an interactive preview of the proposed null safety changes in a browser window.
    -h, --help: Print this usage information.
    -v, --verbose: Show additional command output.
documentation:
    command: '[AI] The `dart migrate` command is used in Dart projects with significant codebase changes between Dart versions, especially when upgrading to a new major version. It applies automated code transformations provided by the dart:core and dart:asm libraries to help ensure forward compatibility. This command analyzes your codebase, generates migration scripts, and applies them to transform your code, minimizing the manual effort required for updating your project.'
    flag:
        apply-changes: '[AI] `dart migrate --apply-changes` is a command used in Dart projects with the `dart:migrate` package for managing database schema changes. This command applies previously generated migration changes to the database, merging the latest schema modifications with the currently running database. It assumes that schema difference analysis has already been performed using commands like `dart migrate --diff`, and the resulting migration files are ready for application. This command aims to keep the production database schema in sync with the evolving application code.'
        help: '[AI] The `dart migrate --help` command is used in Dart programming language for running the `dart migrate` tool with no specific argument, but asking for help instead. This will display detailed information about how to use this tool for managing and applying Dart package upgrades or migrations in your project. It explains options like specifying a directory or a YAML file containing migration descriptions, and how to list, apply, or revert migrations.'
        ignore-errors: '[AI] The `dart migrate` command is a tool provided by the Dart programming language for managing and applying changes to Dart projects using packages. The `--ignore-errors` flag modifies the behavior of this command, instructing it to continue running even if it encounters errors during the migration process. This can be useful when applying multiple migrations at once or when dealing with complex projects where some errors may not cause significant issues and can be addressed later. However, it''s important to note that ignoring errors might result in unintended side effects or incorrect states in your project. Use this flag with caution.'
        no-web-preview: '[AI] `dart migrate --no-web-preview` is a command used in Dart programming language for applying automated code changes, called Dart migrations, to a project. The `--no-web-preview` flag disables the web preview feature during the migration process. This means that any changes made through migrations won''t trigger a live reload in a web browser while developing, but it still applies the necessary code updates.'
        preview-hostname: '[AI] The `dart migrate --preview-hostname` command is a part of Dart''s `migration` tool used for updating Dart projects to newer versions. This specific command is used to perform a preview migration with a specified hostname, which means it applies the latest pending changes without actually applying them permanently. This allows developers to test and review the effects of the upcoming Dart updates before fully committing to the migration.'
        preview-port: |-
            [AI] The `dart migrate --preview-port` command is a part of Dart's `migration` tool, which assists in upgrading your Dart projects to newer language versions. This specific command is used for previewing new language features before they are officially released.

            When you run `dart migrate --preview-port <project>`, the tool applies the latest available language feature previews and provides an analysis of how those changes may affect your codebase, without actually applying them by default. This allows developers to review potential breaking changes and adjust their code accordingly before committing to the final migration.

            Using this command is optional; if you're ready to fully adopt new language features in your project, consider using `dart migrate` instead, which applies the latest language updates out of the box.
        skip-import-check: '[AI] `dart migrate --skip-import-check` is a command used in Dart programming language for running migrations with skipping import checks. When you run `dart migrate`, Dart performs automatic import checking during the migration process to ensure consistency between your application''s code and the updated packages. However, sometimes this check may lead to false positives or unnecessary errors. In such cases, you can use the `--skip-import-check` flag to bypass these checks and continue with the migration process without interruptions. Note that using this flag should be done with caution as it might potentially introduce compatibility issues or other unexpected problems in your project.'
        summary: '[AI] `dart migrate --summary` is a command used in Dart programming language for applying migrations to a Dart application. The `--summary` option is used to generate a summary of what each migration does without actually applying the changes. This allows developers to review and understand the effects of each migration before executing them, which can be helpful for ensuring consistency and minimizing potential risks in larger projects or teams.'
        verbose: '[AI] `dart migrate --verbose` is a command used in Dart programming language for applying migrations to a Dart project. The `--verbose` option increases the output of the command, providing more detailed information about the migration process. This includes logs about which migrations are being applied, their version numbers, and any progress updates or error messages. In essence, it''s a way to gain deeper insights into the migration process.'
        web-preview: '[AI] `dart migrate --web-preview` is a command used in Dart programming language for performing automated web application code upgrades, also known as "migrations." The `--web-preview` option enables preview mode during the migration process, which allows developers to test changes before deploying them to production. This command typically updates dependencies and makes required code adjustments while ensuring minimal disruption to the existing functionality of the web application.'
