# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: read-tree
description: Reads tree information into the index
group: low-level manipulator
flags:
    --aggressive: 3-way merge in presence of adds and removes
    --debug-unpack: debug unpack-trees
    --empty: only empty the index
    --exclude-per-directory=: allow explicitly ignored files to be overwritten
    --index-output=: write resulting index to <file>
    --no-sparse-checkout: skip applying sparse checkout filter
    --prefix=: read the tree into the index under <subdirectory>/
    --recurse-submodules=: control recursive updating of submodules
    --reset: same as -m, but discard unmerged entries
    --trivial: 3-way merge if no file level merging required
    -i: don't check the working tree after merging
    -m: perform a merge in addition to a read
    -n, --dry-run: don't update the index or the work tree
    -q, --quiet: suppress feedback messages
    -u: update working tree with merge result
    -v, --verbose: be verbose
documentation:
    command: '[AI] `git read-tree` is a Git command used to read tree objects from the Git database into the working directory. It is typically used in custom Git scripts or hooks, especially after a `git checkout` or `git reset` operation to restore files at their new state. The command takes one or more tree object hashes as arguments and populates the working directory with the corresponding files.'
    flag:
        aggressive: '[AI] `git read-tree --aggressive` is a Git command used to read tree objects from the database and update the working directory accordingly. The `--aggressive` option tells Git to perform an aggressive checkout, which means that it will not only check out the specified tree but also any necessary blobs and commit messages associated with those trees. In other words, this command is used to fully recover a specific snapshot of the project into the working directory.'
        debug-unpack: |-
            [AI] `git read-tree --debug-unpack` is a Git command used for debugging or advanced use cases. It instructs Git to read a tree object and unpack it into files in the working directory, with added debug output to help understand the process.

            This command does not create new Git objects or modify existing ones; instead, it simply reads an existing tree object and outputs the file contents to the filesystem. It's useful for inspecting the contents of a specific commit or tree without checking out the entire branch or working directory.
        dry-run: '[AI] `git read-tree --d dry-run` is a Git command used to simulate a tree reading operation without actually creating or modifying any files. The `--dry-run` option enables the command to display what would be done if the command was run without executing the changes. It''s typically used for testing purposes before running a more complex Git operation.'
        empty: '[AI] `git read-tree --empty` is a Git command used to read the tree object from the database into the index. The "--empty" option tells Git to prepare an empty index, discarding any existing entries and creating a new tree with no files or directories. This can be useful in scripts to reset the index to a known state before populating it with new files.'
        exclude-per-directory: '[AI] The `git read-tree` command is a Git plumbing command used to read tree objects from the Git database into the working directory. The option `--exclude-per-directory` tells Git to exclude specific files or directories when reading the tree for a particular directory. This can be useful in situations where you want to ignore certain files or directories when checking out a specific subdirectory, while keeping them in the parent directory or elsewhere in the repository. By specifying a list of files or directories to exclude using this option, Git will not copy them to the checked-out directory but leave them untouched.'
        i: '[AI] `git read-tree` is a Git command used to read the tree object into the index. The `-i` (interactive) option causes Git to prompt for the tree objects to be read, allowing you to select specific trees from a list. This command does not create or modify the working directory or files; it only affects the index.'
        index-output: '[AI] `git read-tree --index-output` is a Git command used to populate the index (staging area) with tree entries, reading from a given tree object. The `--index-output` option specifies that the output should be written to the standard output in the format expected by `git add` for indexing files. It does not modify or create any commits.'
        m: '[AI] `git read-tree` is a Git command used to read the tree objects from the given commit or tree into the current directory as files. The `-m` option tells Git to create or update only those files that have changed between the tree being read and the current working directory. In other words, it applies the differences in the files represented by the tree object to the corresponding files in the working directory.'
        no-sparse-checkout: '[AI] `git read-tree --no-sparse-checkout` is a Git command used to read tree objects from the database into the index without performing a checkout. The `--no-sparse-checkout` option is used to disable Git''s sparse checkout feature, meaning it will not create or modify the .gitignore_files or other sparse-checkout related files. This command is often used when creating a new Git repository from an existing project where some files should be ignored by Git but are not listed in the .gitignore file yet. Instead of manually adding these files to the .gitignore, this command can be used to read the tree objects without modifying the sparse checkout setup.'
        prefix: '[AI] `git read-tree` is a Git command used to read tree objects from the Git database. The `--prefix=<path>` option filters the tree entries based on the given prefix path. With this option, only the tree entries whose paths start with the specified prefix will be outputted as tree objects. This can be useful for partial checks-out or when dealing with large trees and wanting to inspect only a subset of it.'
        quiet: '[AI] `git read-tree --quiet` is a Git command used to read the tree object from the database into the index or working directory. The `--quiet` option suppresses informative messages during execution, making it useful in scripts or automated workflows where only the result matters.'
        recurse-submodules: '[AI] `git read-tree --recurse-submodules` is a Git command used to recursively populate submodule contents in a Git repository. When you clone or checkout a repository with submodules, only the submodule''s reference (e.g., hash or URL) is stored in the superproject''s `.gitmodules` file. To actually retrieve the content of each submodule, you need to run this command inside the superproject directory. This command will traverse through the hierarchy of all nested submodules and read their trees, updating the local repository with the actual files.'
        reset: '[AI] `git read-tree --reset` is a Git command used to reset the working directory to match a specific tree object, discarding any changes made in the working directory and the staging area. This results in a "clean" working directory, with no uncommitted changes. The `--reset` option tells Git to also reset the index (staging area) to match the tree.'
        trivial: '[AI] The `git read-tree` command with the `--trivial` option is used to read tree objects from the Git database and identify trees with only simple files (i.e., files with no subdirectories). When this option is provided, Git will only populate the file list in the tree object for trivial trees, which can save time during certain Git operations like a shallow clone or checking out a specific commit that''s known to have a trivial tree.'
        u: '[AI] `git read-tree` is a Git command used to read tree objects from the repository into the index or working directory. The `-u` option, short for `--upload-pack`, tells Git to read the tree data as if it were being received during an upload pack request in a Git repository over SSH. It does not modify the current branch or create new commits; instead, it populates the index with tree data that can be used in further commands or scripts.'
        verbose: '[AI] The `git read-tree` command is a Git plumbing command used to read tree objects in a repository. Its verbose flag `--verbose` option increases the output level of Git, providing detailed information about the trees being read. This includes the parent hash IDs and tree object names for each tree node, helping in debugging or understanding the internal structure of the repository.'
