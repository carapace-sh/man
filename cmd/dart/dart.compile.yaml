# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: compile
description: Compile Dart to various formats
flags:
    -h, --help: Print this usage information.
documentation:
    command: |-
        [AI] The `dart compile` command is not a standalone Dart command, but rather an instruction often used with specific Dart tools or libraries that require compilation of Dart code into executable formats like native code (for example, `dart:io`) or machine code (like Native Dart or Flutter).

        When you use a Dart tool that requires compilation, such as the `dart2native` tool for Native Dart or the `flutter build` command for Flutter apps, you would typically include the `compile` keyword to invoke the compiler within the tool's command line. For instance, `dart2native --no-tree-shaking my_library.dart` or `flutter build aot`.

        These examples use different Dart tools with their specific compilation flags. The `compile` term itself doesn't have a distinct meaning in the context of Dart programming but is used to denote the process of converting Dart code into executable formats for various platforms.
    flag:
        help: '[AI] `dart compile` is a command-line tool in Dart programming language for generating compiled output from Dart code. The `--help` option is used to display detailed help information about this command. When you run `dart compile --help`, it will show you various options and their descriptions that are available when using the `dart compile` command, such as input file or directory, output format, optimization level, and more.'
