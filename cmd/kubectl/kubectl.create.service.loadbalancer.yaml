# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: loadbalancer NAME [--tcp=port:targetPort] [--dry-run=server|client|none]
description: Create a LoadBalancer service
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --tcp*=: Port pairs can be specified as '<port>:<targetPort>'.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create service loadbalancer` is a command used in Kubernetes to create a LoadBalancer service. A LoadBalancer service exposes an application running on a cluster using an external IP from the cloud provider. This type of service automatically creates and manages an external load balancer in front of the pods, distributing incoming traffic to them. The `kubectl` command creates this kind of service based on the defined labels and port in the YAML manifest file or using the command-line options.'
    flag:
        allow-missing-template-keys: |-
            [AI] The `kubectl create service loadbalancer` command is used to create a Kubernetes LoadBalancer service, which exposes a service on a cloud provider's load balancer. The `--allow-missing-template-keys` flag allows the creation of the service even if there are missing keys in the YAML manifest file that defines the service.

            Normally, Kubernetes requires that all required keys are present in a YAML manifest file before creating a resource. However, with this flag, Kubernetes will create the service anyway, skipping any missing keys instead of failing the creation process. This can be useful when you're working with an incomplete or evolving configuration file and still want to apply some parts of it while leaving others for later. Keep in mind that missing keys might result in an incomplete or non-functional service, so use this flag with caution.
        dry-run: '[AI] `kubectl create service loadbalancer --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command instructs `kubectl` to create a new LoadBalancer service resource in a Kubernetes cluster, but without actually applying the changes. The `--dry-run` flag causes `kubectl` to output the YAML manifest that would be used to create the resource if it were run with `create`, allowing users to review and modify the configuration before creating it in the cluster. This can help prevent mistakes and ensure that desired configurations are applied accurately.'
        field-manager: '[AI] `kubectl create service loadbalancer` is a command used to create a Kubernetes LoadBalancer service. The `--field-manager` flag is an optional argument that tells Kubectl to use the StrategicManagedFields feature to manage the custom fields of the Kubernetes API objects. With this flag, any custom fields defined in the YAML file will be managed and tracked by Kubernetes, enabling easier reconciliation and rollbacks. This can be useful when making complex changes to Kubernetes resources and wanting to ensure consistent application of desired state.'
        output: '[AI] `kubectl create service loadbalancer` is a command used to create a Kubernetes LoadBalancer service. The `--output` flag specifies the output format for the command''s response. By default, no output is displayed, but with `--output json`, the command will return the created LoadBalancer''s metadata in JSON format or with `--output yaml`, it returns the YAML definition of the newly created LoadBalancer object.'
        save-config: '[AI] The `kubectl create service loadbalancer` command creates a Kubernetes LoadBalancer service, which exposes an application running on a cluster to the internet using an external cloud provider''s load balancer. The `--save-config` flag saves the configuration of this command into a file for future use or replication. This way, you can recreate the exact same service with the same configuration by applying the saved file.'
        show-managed-fields: |-
            [AI] The `kubectl create service loadbalancer` command is used to create a Kubernetes Service of type LoadBalancer. This type of Service creates and manages an external load balancer in front of the cluster, providing access to the exposed pods via the internet.

            The option `--show-managed-fields` is used to display the managed fields of the created resource. Managed fields are those fields that Kubernetes automatically updates when certain changes occur. For example, when you create or update a Service of type LoadBalancer, Kubernetes updates the corresponding load balancer configuration accordingly. By using `--show-managed-fields`, you can see which fields are managed by Kubernetes and should not be manually modified to avoid conflicts with Kubernetes management.
        tcp: '[AI] `kubectl create service loadbalancer` is a command used to create a Kubernetes Service of type LoadBalancer. This command creates a horizontal load balancer at the edge of the cluster, and exposes the service on a cloud provider''s public IP. The `--tcp` flag indicates that this service will handle TCP traffic. When you use this command, you also need to provide additional information such as the service name, target port, and container ports. For example: `kubectl create service loadbalancer my-service --tcp=80:80:80`. This command creates a Service named "my-service" that exposes TCP traffic on port 80 both internally within the cluster (port 80) and externally (port 80).'
        template: '[AI] The `kubectl create service loadbalancer --template` command is used to create a Kubernetes LoadBalancer service using a custom template. The `--template` option allows you to provide a YAML or JSON manifest file as input, which will be used to create the desired resource. This command does not actually create the manifest file itself, but instead generates one based on the provided template and then creates the LoadBalancer service from that manifest. This can be useful for creating complex or dynamic load balancer configurations without having to manually write the entire YAML file each time.'
        validate: '[AI] `kubectl create service loadbalancer` is a command used to create a Kubernetes LoadBalancer service in your cluster. The `--validate` flag is an optional argument that requests Kubectl to validate the given manifest file or yaml definition against the current cluster state without actually creating the resource. It helps to check for any errors, inconsistencies or missing information before applying the changes. In summary, `kubectl create service loadbalancer --validate` is used to check the correctness of a LoadBalancer service creation request without creating it.'
