# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list
description: list installed packages
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --log-format=: Set the format of log output
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --profile=: The profile to operate on
    --quiet: Decrease the logging verbosity level
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] The `nix profile list` command is used in Nix, a package manager for Linux and other Unix systems, to display a list of available Nix profiles. Profiles define a set of packages and their configurations. This command shows the names and optional descriptions of each installed or available profile.'
    flag:
        arg: '[AI] `nix-profile list --arg` is a command used in Nix, a package manager for Linux and other Unix systems. This command lists all available Nix profiles along with their corresponding argument overrides. A Nix profile is a set of configuration options that define how software packages are installed and managed. The `--arg` option filters the output to only show the profiles with specified argument overrides. For instance, `nix-profile list --arg my_argument=my_value` would return a list of profiles having the ''my\_argument'' set to ''my\_value''.'
        argstr: '[AI] `nix-profile list --argstr` is a command in Nix, a package manager for Linux and other Unix systems. This command lists all available Nix profiles along with their build-specific arguments (args) that can be used to customize the profile''s behavior during configuration or installation. The `--argstr` option displays the arguments in a string format, making it easier for scripts to parse and use them.'
        debug: '[AI] The `nix-profile list --debug` command is a Nix expression that lists all installed Nix profiles along with their corresponding paths and configuration settings in a verbose and debugging format. It''s commonly used for troubleshooting and investigating the state of your Nix profiles.'
        debugger: '[AI] `nix-profile list --debugger` is a Nix command used for debugging purposes. It lists all installed Nix profiles with their corresponding paths and hashes, providing detailed information about each one. The output includes the profile name, its Nix expression, and the path to the store where the profile is located. This command can be helpful in troubleshooting issues related to Nix profiles or for gaining a better understanding of the current configuration.'
        eval-store: '[AI] `nix-profile list --eval-store` is a command used in Nix, a package manager for Linux and other Unix systems. This command lists the contents of an Nix eval store, which is a data structure that holds the current state of all evaluated expressions in an Nix profile. The output shows each expression with its key, value, and source file location. This information can be useful for debugging or understanding the current configuration of an Nix environment.'
        impure: '[AI] The `nix-profile list --impure` command is a Nix expression that lists all the installed profiles in an impure Nix environment. In an impure Nix environment, profiles can be installed manually outside of the default managed Nix profile hierarchy. This command allows users to view a list of those manually installed profiles without having to navigate to their installation directories.'
        include: '[AI] `nix-profile list --include` is a command used in Nix, a package manager for Linux and other Unix systems. This command lists the Nix profiles that include a given profile, meaning it displays the hierarchical relationship between different Nix profiles. The included profile is passed as an argument to the command. For instance, running `nix-profile list --include my-profile` will display all the profiles that include or inherit from "my-profile". This information can be useful for understanding the dependency structure of installed configurations or packages in Nix.'
        log-format: |-
            [AI] The `nix-profile list --log-format` command is used to list all Nix profiles and output the result in a customizable log format. Nix Profiles are collections of packages and configurations managed by Nix, allowing users to easily manage their system environment.

            The log format option determines how the output will be displayed. By default, it provides a brief summary of each profile, including its name and path. However, you can customize the log format using the `--log-format` flag to include additional information such as version numbers, installation paths, or last update times.

            The available placeholders in the log format string are:

            1. %(name)s: Profile name
            2. %(path)s: Full path to the profile directory
            3. %(version)s: Nix expression representing the installed version of the profile
            4. %(last-modified)s: Last modification time of the profile
            5. %(instantaneous)s: Installation timestamp

            Example: `nix-profile list --log-format='%(name)s (%(path)s): %(version)s, last modified %(last-modified)s'` will display the output as "ProfileName (/path/to/profile): VersionNumber, last modified LastModifiedTime".
        override-flake: '[AI] The `nix profile list --override-flake` command is used in Nix, a package manager for Linux and other Unix systems, to list all the Nix profiles that have overridden specific Flakes (Nix expression representing a collection of packages). A Flake override is a way to customize the behavior of a Flake by specifying additional options or environment variables. The `--override-flake` flag filters the output of the `nix profile list` command to only show the profiles that have overridden a Flake, providing transparency and allowing easier management of customized configurations.'
        print-build-logs: '[AI] `nix profile list --print-build-logs` is a Nix command that displays a list of all available Nix profiles and prints the build logs for each selected profile. The build logs contain detailed information about the construction process, including installed packages and their sources, dependencies, and compilation messages. This command can be useful for troubleshooting, tracking down dependency issues, or monitoring the progress of a specific profile installation.'
        profile: '[AI] The `nix-profile list --profile` command is a Nix Pakages Tool utility that lists all available Nix profiles on your system. A Nix profile is a collection of software packages and configurations managed by Nix. By running this command, you can identify which profiles are installed and use the information to manage or select the desired profile for your system.'
        quiet: '[AI] The `nix-profile list --quiet` command is used in Nix, a package manager for Linux and other systems, to list all installed Nix profiles without displaying any extra information. It simply prints the names of the installed profiles on the terminal, providing a concise output for system administrators or users who want to quickly check which Nix profiles are currently active.'
        verbose: '[AI] `nix-profile list --verbose` is a command used in Nix, a package manager for Linux and other Unix systems. This command displays a detailed list of all installed Nix profiles along with their versions and paths. The `--verbose` option increases the amount of output to include additional information such as the date of installation and the GPG key used to sign the profile''s configuration. It provides a comprehensive view of the currently active Nix profiles for better understanding and management of your system''s configuration.'
