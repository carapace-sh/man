# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: import [options] ADDR ID
description: Associate existing infrastructure with a Terraform resource
flags:
    -config?: Path to a directory of Terraform configuration files
    -ignore-remote-version: A rare option used for the remote backend only
    -input: Disable interactive input prompts
    -lock: Don't hold a state lock during the operation
    -lock-timeout?: Duration to retry a state lock
    -no-color: If specified, output won't contain any color
    -var*=: Set a variable in the Terraform configuration
    -var-file*?: Set variables in the Terraform configuration from a file
documentation:
    command: '[AI] `terraform import` is a Terraform command used to register existing infrastructure resources with Terraform, allowing Terraform to manage them going forward. Instead of creating new resources using Terraform files, you can use `terraform import` to associate the current state of an existing resource with your Terraform configuration. You provide the resource type and the unique resource ID when running the command, which then updates your Terraform state file accordingly. This can be useful for integrating existing resources into a new or ongoing Terraform project.'
    flag:
        config: '[AI] `terraform import -config` is a command used with Hashicorp''s Infrastructure as Code (IaC) tool, Terraform. It allows users to import existing infrastructure resources into their Terraform configuration files. The "-config" flag specifies that the configuration file should be used as input, rather than applying the changes directly to the remote infrastructure or interactively in the CLI. This command facilitates managing infrastructure resources declared outside of Terraform and bringing them under the version control and automation provided by Terraform.'
        ignore-remote-version: '[AI] The `terraform import -ignore-remote-version` command is a Terraform flag used during the import process of existing infrastructure into Terraform configuration. It is used to prevent Terraform from checking the remote state file for version compatibility before completing the import. In other words, it bypasses the version synchronization check and allows you to import resources even if there''s a potential version mismatch between your local and remote states. This can be useful when dealing with older infrastructures or when you want to avoid updating the Terraform state file version manually.'
        input: |-
            [AI] The `terraform import` command in Hashicorp's Terraform tool is used to import existing infrastructure resources into your Terraform configuration. The `-input` flag is an optional argument provided with this command.

            When you use the `terraform import` command without any input file, it will prompt you for confirmation before performing the import. With the `-input` flag, you can provide a file containing the yes/no confirmation for each resource to be imported. This can be useful when you are automating the import process or when you want to ensure that the same resources get imported consistently across different runs of your Terraform configuration.

            In summary, the `terraform import -input` flag allows you to specify a file with confirmations for importing existing infrastructure resources into your Terraform configuration. This can be helpful when you want to automate or ensure consistency in the import process.
        lock: '[AI] `terraform import -lock` is a command provided by Terraform, an open-source infrastructure as code software tool. This command is used to import existing infrastructure resources into your Terraform configuration and apply versioning and locking to those imports. The `-lock` flag ensures that any imported resources'' Terraform state file maintains the current version of the resource and prevents accidental overwriting or modification of those resources. It provides a more controlled approach when importing existing resources into your Terraform configuration.'
        lock-timeout: '[AI] `terraform import` is a Terraform command used to import existing infrastructure resources into your Terraform configuration files. The `-lock-timeout` option sets a timeout for Terraform to acquire a lock on the imported state file, preventing concurrent modifications. If the timeout expires before a lock can be acquired, an error will be returned and you''ll need to retry the import with a longer timeout or manually resolve the conflict. The default value is 3 minutes (180 seconds).'
        no-color: '[AI] `terraform import -no-color` is a command used in Terraform, an open-source infrastructure as code software tool. This command imports existing infrastructure resources into your Terraform configuration files, allowing you to manage those resources using Terraform. The `-no-color` flag disables colored output during the import process for users who prefer plain text or have terminals that do not support colors.'
        var: '[AI] `terraform import` is a command in Hashicorp''s Terraform infrastructure provisioning tool. It is used to import existing infrastructure resources into your Terraform configuration, allowing you to manage them with Terraform going forward. The `-var` option is passed with this command to provide variable values during the import process. These variables can be used to override default values or input specific values for resources that have configuration options requiring user input. For example, you might use `terraform import -var "region=us-west-2" aws_instance my_instance aws_instance.id=i-1234567890abcdef0`. This command imports the existing EC2 instance with ID `i-1234567890abcdef0` and sets the "region" variable to `us-west-2`, ensuring that this value is used during subsequent Terraform plans and applies.'
        var-file: '[AI] `terraform import -var-file` is a command used in Terraform, an open-source infrastructure as code software tool. This command is utilized to import existing infrastructure resources into your Terraform configuration, allowing you to manage them with Terraform. The `-var-file` option is for providing a file containing variables to be passed to the import process. This can be particularly useful when dealing with large or complex configurations where variables need to be sourced from an external file.'
