# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: kotlinc
description: Kotlin command-line compiler
flags:
    -J: Pass an option directly to JVM
    -P=: Pass an option to a plugin
    -Werror: Report an error if there are any warnings
    -X: Print a synopsis of advanced options
    -api-version=: Allow using declarations only from the specified version of bundled libraries
    -classpath=: List of directories and JAR/ZIP archives to search for user class files
    -d=: Destination for generated class files
    -e, --expression: Evaluate the given string as a Kotlin script
    -h, --help: Print a synopsis of standard options
    -include-runtime: Include Kotlin runtime into the resulting JAR
    -java-parameters: Generate metadata for Java 1.8 reflection on method parameters
    -jdk-home=: Include a custom JDK from the specified location into the classpath
    -jvm-target=: Target version of the generated JVM bytecode
    -kotlin-home=: Path to the home directory of Kotlin compiler used for discovery of runtime libraries
    -language-version=: Provide source compatibility with the specified version of Kotlin
    -module-name=: Name of the generated .kotlin_module file
    -no-jdk: Don't automatically include the Java runtime into the classpath
    -no-reflect: Don't automatically include Kotlin reflection into the classpath
    -no-stdlib: Don't automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath
    -nowarn: Generate no warnings
    -opt-in=: Enable usages of API that requires opt-in with an opt-in requirement marker with the given fully qualified name
    -progressive: Enable progressive compiler mode.
    -script: Evaluate the given Kotlin script (*.kts) file
    -script-templates=: Script definition template classes
    -verbose: Enable verbose logging output
    -version: Display compiler version
documentation:
    command: '[AI] `kotlinc` is a command-line compiler for the Kotlin programming language. It converts Kotlin source code (`.kt` files) into JVM bytecode (`.class` files) that can be run on the Java Virtual Machine (JVM). This process allows developers to write and execute applications using the modern, expressive Kotlin syntax while still taking advantage of the rich ecosystem of Java libraries and frameworks.'
    flag:
        J: '[AI] The `-J` flag in Kotlin''s compiler (Kotlinc) is used to specify a list of Java compilation classpaths or JAR files. These are additional libraries or dependencies that your Kotlin project requires at compile time. When you use `kotlinc -J <path_to_jar>`, you are telling the compiler to include those external libraries during the compilation process, allowing your Kotlin code to access their types and functions as if they were part of your project.'
        P: '[AI] `kotlinc -P` is a command-line option for the Kotlin compiler (kotlinc). It generates a Kotlin multi-file compilation metadata file, which is used by the IDE or other build tools to improve the build process and provide better project navigation features. The output file usually has a `.gradle` or `.iml` extension depending on the used build system (Gradle or IntelliJ IDEA).'
        Werror: '[AI] `kotlic` is the Kotlin compiler. The flag `-Werror` is used to enable all warning messages during compilation and treat them as errors. This means that any warnings issued by the compiler will cause the build to fail, ensuring a higher level of code quality and consistency in your Kotlin projects.'
        X: '[AI] The `-X` option in the Kotlin compiler (Kotlinc) is used to enable various experimental or advanced features that are not enabled by default. The specific flag `-X` on its own does not have any effect; instead, it should be followed by a modifier that specifies the desired feature. For example, `-Xcoroutines` enables support for Kotlin coroutines, while `-Xbootinline` instructs the compiler to inline methods at runtime. The available options and their meanings can be found in the Kotlin documentation or by running `kotlinc --help`.'
        api-version: '[AI] `kotlinc` is a command-line compiler for the Kotlin programming language. The option `-api-version` is used to specify the version of the Kotlin standard library and JVM platform APIs that the generated compiled code should be compatible with. By default, `kotlinc` compiles against the latest available versions of both. However, specifying a particular API version allows for compatibility with older projects or environments. For example, `kotlinc -api-version 1.3.21 -include-runtime` generates code compatible with Kotlin standard library version 1.3.21 and JVM platform version 8 (or later).'
        classpath: |-
            [AI] `kotlinc` is the Kotlin compiler. The option `-classpath` specifies a list of classpaths, which are directories or JAR files containing classes that the compiler needs to compile your Kotlin code. For example:

            ```sh
            kotlinc -classpath /path/to/library1.jar:/path/to/library2.jar MySourceFile.kt -include-runtime -d output.jar
            ```

            Here, `MySourceFile.kt` is the Kotlin source file to be compiled, and `output.jar` is the name of the output JAR file. The `-include-runtime` option includes the Kotlin standard library in the compilation process.
        d: '[AI] `kotlinc -d` is a command-line option for the Kotlin Compiler (Kotlinc). The `-d` flag instructs Kotlic to generate and output the compiled bytecode as a standalone `.class` file instead of producing an executable Java archive or JAR file. This option is useful when integrating Kotlin code into existing Java projects, allowing the developer to keep their Kotlin source files separate from the main project structure.'
        expression: |-
            [AI] `kotlic --expression` is a command-line option for the Kotlin compiler (Kotlic). It's used to compile an expression, rather than a complete Kotlin file or script. The result is a value, not a compiled bytecode or JAR file. For example, you could use it to compute and print a Fibonacci sequence number:

            ```bash
            kotlinc --expression "fun fib(n: Int) = if (n <= 1) n else fib(n - 1) + fib(n - 2); println(fib(10))"
            ```

            This command compiles the expression, which defines a recursive function `fib` and evaluates it for the argument `n = 10`. The output will be the result of this calculation (55), printed to the console.
        help: |-
            [AI] `kotlinc --help` is a command used with the Kotlin Compiler (Kotlinc). When executed, it displays comprehensive information about how to use Kotlicc for various tasks such as compiling Kotlin source code into JVM bytecode, creating native binaries, or generating JS and WebAssembly output.

            The help text includes usage instructions, supported command-line options, and examples of how to compile Kotlin projects with different configurations. Additionally, it provides information about the expected directory structure for a standard Kotlin project and explains how to use Kotlinc with IDEs and build tools like Gradle or Maven.
        include-runtime: '[AI] `kotlinc` is the Kotlin compiler. The option `-include-runtime` instructs it to include the Kotlin Standard Library runtime files during the compilation process. This results in a single executable or library file that includes both the compiled code and the required library dependencies, simplifying the deployment and execution of the application.'
        java-parameters: '[AI] `kotlinc` is a command-line compiler for the Kotlin programming language. The option `-java-parameters` is used when compiling Kotlin source files into Java bytecode using the JVM interoperability feature of Kotlin. This flag allows passing Java-style annotations and their values as arguments to the compiler, which are then embedded in the generated class files for use by Java code. It helps bridge the gap between Kotlin and Java libraries or frameworks that don''t yet support Kotlin out-of-the-box.'
        jdk-home: '[AI] `kotlinc` is the command-line compiler for the Kotlin programming language. The option `--jdk-home` or `-jdk-home` specifies the location of the Java Development Kit (JDK) to be used during compilation. This is necessary because Kotlin runs on the JVM and requires the JDK to execute compiled code. By providing the JDK home directory, Kotlin can correctly set up the classpath and other required configurations for the compilation process.'
        jvm-target: '[AI] `kotlinc` is the Kotlin compiler. The option `-jvm-target` specifies the JVM (Java Virtual Machine) version for the compiled Kotlin code. By setting this option, developers ensure that their compiled Kotlin code is compatible with a specific Java Virtual Machine version. This is important when using libraries or running the application in an environment where a particular JVM version is required. The possible values for `-jvm-target` are "1.8" (for Java 8), "11", "12", "13", "14", "15", "16", or "17" for their respective Java versions.'
        kotlin-home: '[AI] The command `kotlinc -kotlin-home` is used to specify the location of the Kotlin compiler home directory when running the Kotlin compiler from the command line. This option is useful when you have multiple versions of Kotlin installed on your system, and you want to use a specific version for a particular compile task. The argument following `-kotlin-home` should be the path to the directory containing the desired Kotlin compiler installation.'
        language-version: '[AI] `kotlinc` is the command-line compiler for the Kotlin programming language. The option `-language-version` allows specifying the desired version of the Kotlin language to be used during compilation. For instance, `kotlinc -language-version=1.3` would compile the code using Kotlin language version 1.3. This option is important when working with multiple versions of Kotlin or when migrating your project to a new version.'
        module-name: '[AI] The `kotlinc` command line compiler for Kotlin has an option `-module-name <name>` that specifies a custom name for the generated Kotlin Multiplatform (KMP) module. When using KMP, several separate binaries are compiled from the common and platform-specific source code into single binary archives. Each archive corresponds to one module. By default, each module is named based on its source directory. Using `-module-name` allows explicitly defining custom names for modules when building larger projects with multiple interoperable modules.'
        no-jdk: '[AI] `kotlic` is a command-line compiler for the Kotlin programming language. The option `-no-jdk` disables using Java Development Kit (JDK) classes during compilation. This means that Kotlin code will not be able to directly use Java standard library classes or methods, but must instead provide their Kotlin equivalents or use external libraries. The advantage of this flag is that it can lead to smaller binary sizes and potentially faster execution since unnecessary Java classes are not included in the compiled output.'
        no-reflect: '[AI] `kotlic` is the Kotlin compiler. The option `-no-reflect` disables reflection in compiled Kotlin code. Reflection is a feature that allows programs to inspect and modify their own structure and behavior at runtime. Disabling it can improve compilation time, reduce code size, and enhance security by preventing reflection-based attacks.'
        no-stdlib: '[AI] `kotlinc` is a compiler for the Kotlin programming language. The option `-no-stdlib` tells the compiler not to include the Kotlin standard library when generating compiled bytecode or JVM assembly files. This can be useful in some advanced use cases, such as creating custom runtime configurations or integrating Kotlin into existing projects with a specific version of the standard library. However, it''s important to note that without the standard library, some Kotlin language features may not function correctly.'
        nowarn: '[AI] `kotlinc` is the Kotlin compiler. The option `-nowarn` instructs it to suppress all the generated warnings during compilation. This can be useful when working with larger codebases or specific use cases where some warnings are expected or not significant for your project, allowing you to focus on other aspects of development without interruptions from warnings.'
        opt-in: '[AI] `kotlinc` is the Kotlin compiler. The `-opt-in` flag is used to enable the application of specific annotations or opt-ins at compile time. These opt-ins provide additional functionality or optimizations for your Kotlin code, such as the Kotlin coroutines library or JVM platform deserialization. By using this flag, you can enable these features without having to manually import them in every file where they are used.'
        progressive: '[AI] The `kotlinc` command with the `-progressive` option is used for compiling Kotlin source files incrementally or in a gradual manner. It only recompiles the changed files instead of recompiling the entire project each time, which saves time and resources during development. This flag is especially useful when using an IDE that supports incremental compilation, such as IntelliJ IDEA.'
        script: '[AI] `kotlinc` is a compiler for the Kotlin programming language. The `-script` flag is an option used when invoking `kotlinc` from the command line. It instructs the compiler to compile and run the provided script in one step. Instead of generating compiled bytecode, the output is the executed script with embedded JVM bytecode. This allows for running simple Kotlin scripts directly, without the need for an IDE or creating a separate executable file.'
        script-templates: |-
            [AI] The `kotlinc` command with the `-script-templates` option is used for generating Kotlin script templates. These templates are precompiled Kotlin scripts that can be customized using placeholders, allowing for more efficient and flexible execution of repetitive tasks.

            When you run `kotlinc` with this flag, it generates a template file instead of compiling a regular Kotlin script. The template file is saved with the `.ktd` extension and contains placeholders marked as `${...}`. These placeholders can be replaced with actual values when invoking the generated script using the `kotlinc-jvm` or `kotlinc-js` compiler with the `--template-dir` flag to specify the directory containing the template files.

            This approach allows for better organization and reusability of common scripting tasks and can lead to improved performance due to precompilation of the scripts.
        verbose: '[AI] `kotlinc` is a command-line compiler for the Kotlin programming language. The option `-verbose` is used to increase the output of compilation messages. It provides more detailed information about each step of the compilation process, including the source files being compiled and any errors or warnings encountered during compilation. This can be helpful for debugging and understanding the behavior of the compiler.'
        version: '[AI] `kotlinc --version` is a command-line instruction for the Kotlin Compiler (Kotlinc). It requests the compiler to display its current version number, allowing users to check if they are using an up-to-date version or not. The output will typically include the major and minor version numbers as well as any additional build metadata.'
