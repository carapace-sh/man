# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fmt
description: reformat your code in the standard style
group: infrequently used
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --commit-lock-file: Commit changes to the flake's lock file
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --inputs-from=: Use the inputs of the specified flake as registry entries
    --log-format=: Set the format of log output
    --no-registries: Don't allow lookups in the flake registries
    --no-update-lock-file: Do not allow any updates to the flake's lock file
    --no-write-lock-file: Do not write the flake's newly generated lock file
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --override-input=: Override a specific flake input (e.g. dwarffs/nixpkgs)
    --quiet: Decrease the logging verbosity level
    --recreate-lock-file: Recreate the flake's lock file from scratch
    --update-input=: Update a specific flake input (ignoring its previous entry in the lock file
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] `nix-fmt` is a formatting tool for Nix expressions and configurations. It automatically formats Nix code according to a consistent style, ensuring readability and maintainability of Nix projects. The command can be used with the `format` option followed by the path to the Nix file to be formatted or in an interactive session using `nix-fmt`. By default, it uses the `default.nixpkgs` style guide.'
    flag:
        arg: '[AI] `nix-fmt` is a formatting tool for Nix expressions and configurations. The `--arg` option is used to pass arguments to the formatter. For example, `nix-fmt --arg myArg=myValue myFile.nix` applies formatting rules with the specified argument value to the given file. This helps ensure a consistent style across projects.'
        argstr: '[AI] `nix-fmt` is a formatting tool for Nix expressions and configurations, designed to enforce a consistent style across projects in the Nix ecosystem. The `--argstr` option is used to pass arguments as strings to custom formatters that can be registered with `nix-fmt`. This allows for more fine-grained control over specific aspects of the formatting process that may not be covered by default rules. For example, you could define a custom formatter for a specific library or package, and use `--argstr` to pass arguments relevant to that formatter during the formatting process.'
        commit-lock-file: '[AI] `nix-fmt` is a tool in Nix packaging system that formats Nix expressions to ensure consistent coding styles. The option `--commit-lock-file` creates or updates a commit-lock file in the current directory after formatting the expression files. This lock file records the exact version of the expressed libraries used at the time of formatting, which can be useful for reproducible builds and ensuring consistency across team members.'
        debug: |-
            [AI] `nix-fmt` is a Nix package manager tool for formatting source code. The command `nix fmt --debug` is used to enable debug mode in `nix-fmt`. This mode provides more detailed output during the code formatting process, which can be helpful when diagnosing issues or understanding how the tool is applying specific format rules.

            The debug mode outputs detailed information about the files being formatted, the rules being applied, and any errors or warnings encountered during the formatting process. The output also includes a breakdown of the changes being made to each line in the file, making it easier to understand exactly what modifications `nix-fmt` is performing.

            By using `--debug`, you get an enhanced level of insight into how `nix-fmt` operates and can more effectively troubleshoot any formatting issues that might arise within your codebase.
        debugger: '[AI] `nix-fmt` is a formatting tool for Nix expressions and configurations. The `--debugger` option is not a standard command but an extension that starts an interactive debugging session when invoked. It uses the GDB debugger, allowing users to set breakpoints, inspect variables, step through code, and examine call stacks in real-time while the `nix-fmt` transformation is being applied. This can be useful for understanding complex transformations or troubleshooting issues with Nix expressions.'
        eval-store: |-
            [AI] `nix-fmt` is a tool from Nix Package Manager that helps enforce a consistent code format across different projects in a Nix expression or NixOS configuration. The `--eval-store` option is used to evaluate expressions and save the results into an Nix store.

            When you run `nix-fmt --eval-store expression.nix`, it will first format your `expression.nix` file according to your configured code style. After formatting, it evaluates the expression in the file, saves the result under a new path specified by the output variable in the expression (if any), and finally saves the evaluated result into the Nix store for later use. This can be useful when you have complex expressions that need to be reused across multiple parts of your configuration.
        impure: '[AI] `nix-fmt` is a formatting tool for Nix expressions and configurations. The `--impure` flag is an option used with it. When `nix-fmt impure` is run, it formats Nix expressions allowing functions and let bindings to be defined outside of their scope. This means that the expressions do not need to be pure functions to be formatted. By default, `nix-fmt` assumes that expressions are pure and attempts to format them accordingly. The `--impure` flag is useful when working with more complex Nix code where functions have side effects or depend on external variables.'
        include: '[AI] `nix-fmt` is a tool for enforcing a consistent code style across Nix expressions. The `--include` option is used to specify additional files or directories to be checked by `nix-fmt`. For example, `nix-fmt --include path/to/file.nix path/to/directory/` would format `file.nix` and all Nix expressions within `directory/`.'
        inputs-from: '[AI] `nix-fmt` is a Nix package manager tool for formatting source code. The `--inputs-from` option specifies a Nix expression or file path from which `nix-fmt` should read the list of files to be formatted, instead of taking them as command-line arguments. This can be useful when working with large projects where specifying all the files to format manually would be impractical. The option allows for more efficient and automated use of `nix-fmt`.'
        log-format: |-
            [AI] `nix-fmt` is a tool for automatically reformatting Nix expressions to conform to a consistent style. The option `--log-format` specifies the format of the logs generated when `nix-fmt` is run.

            There are three available log formats: "plain", "json", and "progress".

            - "plain": Displays messages as plain text, with information about files that have been formatted and any errors encountered during the process.
            - "json": Generates a JSON-formatted log. This format is useful for parsing the output with scripts or other automated tools.
            - "progress": Displays progress bars for large operations (like formatting multiple files), giving users visual feedback on the tool's progress.
        no-registries: '[AI] `nix-fmt` is a tool from Nix Package Manager that automatically formats your Nix expressions following a consistent style. The command `nix fmt --no-registries` tells `nix-fmt` to not download or use any registered packages (from sources like GitHub) while formatting your code. This means it will only format the locally existing Nix expressions without making any external dependencies or modifications.'
        no-update-lock-file: '[AI] `nix-fmt` is a formatting tool for Nix expressions, providing a consistent and uniform code style. The command `nix fmt --no-update-lock-file` tells `nix-fmt` not to update the lock file after formatting the files, which means that other tools or processes can continue using the previous version of the lock file. This can be useful when working in a team or collaborating on projects where multiple developers need to apply different formatting rules or preferences without interfering with each other''s work.'
        no-write-lock-file: '[AI] `nix-fmt` is a formatting tool for Nix expressions, which helps enforce a consistent style in Nix code. The `--no-write-lock-file` option is used to disable the creation of a lock file when running `nix-fmt`. Lock files prevent multiple processes from modifying the same file at the same time and ensure consistency between different invocations of `nix-fmt`. By disabling the lock file, you allow multiple processes to format the same file simultaneously without waiting for each other. This can be useful in continuous integration systems or when working collaboratively on large projects where quick formatting is desired over strict consistency.'
        override-flake: '[AI] `nix-fmt` is a tool for formatting Nix expressions and configurations. The `--override-flake` option tells `nix-fmt` to override the format settings defined in the `flake.nix` file associated with the current directory, allowing users to apply their preferred formatting style even when working in a project that uses a different style.'
        override-input: '[AI] `fmt`, a part of the Nix packaging system, is a tool for reformatting Nix expression files while preserving their semantics. The `--override-input` flag modifies the input file before formatting. It takes a file path or a string as an argument and applies the specified transformation to the content before running the formatter. This is useful when you want to apply a specific change to the codebase, like adding missing imports or adjusting indentation, before applying consistent formatting across your project.'
        print-build-logs: '[AI] `nix-fmt` is a Nix package manager command for automatically reformatting source code to conform to a consistent style. The `--print-build-logs` option is used to display the build logs of the packages being reformatted during the formatting process. This can be helpful in identifying any issues or warnings that may arise from the formatting or from the dependencies of the packages being formatted.'
        quiet: '[AI] `nix-fmt --quiet` is a command from Nix Package Manager used to format Nix expressions, files, or whole projects according to the Nix style guide. The `--quiet` option suppresses informational messages during execution, providing a quiet output, which means only error messages will be shown if any occur.'
        recreate-lock-file: '[AI] `nix-fmt` is a Nix package manager tool for format-checking and formatting Haskell, FSharp, OCaml, and other languages'' code bases. The command `nix fmt --recreate-lock-file` generates or recreates the lock file in the current directory using the latest versions of the dependencies specified in the `nix.conf` or `default.nix` files. This can be useful when you want to ensure that all your dependencies are at their latest versions before starting a new project or after cloning an old repository. The lock file ensures consistent dependency versions across your project, which can help prevent version conflicts and other issues.'
        update-input: '[AI] `nix-fmt --update-input` is a command provided by Nix, a package manager for Linux and other Unix systems. This command is used to automatically format source code files according to a specific style guide, typically Haskell or Nix style, as defined in the corresponding .prettierrc file, without modifying the input files. It''s designed to keep your codebase consistent, improving readability and maintaining a unified coding standard across multiple projects.'
        verbose: '[AI] `nix-fmt --verbose` is a command from the Nix package manager used to format Nix expression files. The `--verbose` flag increases the output level of information provided during the formatting process, displaying detailed messages about which files are being formatted and any changes that are made. This can be helpful for understanding what the formatter is doing and ensuring consistent formatting across your project.'
