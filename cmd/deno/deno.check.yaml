# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: check
description: Type-check the dependencies
flags:
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --lock=: Check the specified lock file
    --no-config: Disable automatic loading of the configuration file.
    --no-remote: Do not resolve remote modules
    --remote: Type-check all modules, including remote
    --unstable: Enable unstable features and APIs
    -c, --config=: Specify the configuration file
    -h, --help: Print help information
    -q, --quiet: Suppress diagnostic output
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno check` is a command provided by Deno, a modern JavaScript runtime. It performs type checking and linting on TypeScript or JavaScript code without running it. This means it checks your code for potential type errors and conformsity issues based on the specified configuration files like `tsconfig.json`. The output includes information about any detected issues along with suggested fixes, helping to improve code quality and prevent runtime errors.'
    flag:
        cert: '[AI] `deno check --cert` is a command used in Deno, a modern and secure TypeScript runtime, for static analysis of SSL/TLS certificates in Deno applications. When you run this command during development, it checks the validity and revocation status of the certificate files associated with your Deno project''s HTTPS endpoints. This helps ensure that your application uses trusted certificates and minimizes potential security vulnerabilities.'
        config: '[AI] `deno check --config` is a command used in Deno, a modern JavaScript runtime. It performs type checking and checks for correct configuration of Deno projects. The `--config` option specifies the path to the project''s `deno.json` or `deno.mjs` configuration file. This command helps ensure code quality and compatibility with Deno''s built-in features before running the code.'
        help: |-
            [AI] `deno check` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--help` flag is an option that can be passed to this command to display detailed usage information. When you run `deno check --help`, the output will include:

            1. A brief description of the `check` command.
            2. Information on how to use the command, including required arguments (none in this case) and optional flags.
            3. A list of possible flags with their short and long names, descriptions, and usage examples.
            4. Additional help resources or contact information for reporting issues.

            The main goal of using `deno check --help` is to understand how the `check` command functions, what it does, and how you can use it effectively in your Deno projects.
        import-map: '[AI] The `deno check --import-map` command is a part of Deno, a modern and secure runtime for JavaScript and TypeScript. It''s used to validate an import map file in Deno projects. An import map specifies how modules should be imported in the project, including external dependencies and their versions or URLs. The `deno check` command with the `--import-map` flag checks that the import map is valid and can be used by Deno for efficient and accurate module resolution during runtime. It doesn''t actually run the code but only checks the configuration.'
        lock: '[AI] `deno check --lock` is a command in Deno, a modern and secure JavaScript runtime. This command is used to check the correctness of TypeScript types in Deno projects and to generate or update the lockfile (denode.json), which records the exact versions of all project dependencies. The lockfile ensures that every team member or build system uses the same dependency versions when developing or deploying the application, preventing potential version conflicts.'
        no-config: '[AI] The `deno check --no-config` command is a part of Deno, a modern and secure TypeScript runtime. The `check` subcommand is used to type-check Deno code. The `--no-config` flag is an option that disables the use of the deno.json or deno.jsonc configuration files when performing the type check. This means that only the current file being checked will be type-checked, and no project-level configurations will be applied.'
        no-remote: '[AI] The `deno check --no-remote` command is used in Deno, a modern and secure TypeScript runtime, to run type checks on a Deno project locally without using remote packages. This means that only the local dependencies will be used during the type checking process, ensuring that your code works offline and reducing network usage.'
        quiet: '[AI] `deno check --quiet` is a command used in Deno, a modern and secure TypeScript runtime. The `check` subcommand performs type checking on Deno projects, while the `--quiet` flag suppresses all output from the command except for errors and warnings. This means that if the code being checked passes the type checks, no message will be displayed. If there are errors or warnings, only those will be shown.'
        reload: '[AI] `deno check --reload` is a command used in Deno, a modern and secure TypeScript runtime. It runs type checking and compilation on a Deno project, with an added feature of automatic reloading. Once the initial check finishes, any subsequent changes to the TypeScript files will be detected, and the check process will be automatically repeated. This allows for quick feedback during development without having to manually trigger the check each time.'
        remote: '[AI] `deno check --remote` is a command used in Deno, a modern and secure TypeScript runtime. This command runs type checking on Deno projects remotely against the official Deno TypeScript definition files (d.ts files) available on the Deno server. It helps ensure project compatibility with the latest Deno library versions and improves overall code quality.'
        unstable: '[AI] The `deno check --unstable` command is a part of Deno, a modern and secure TypeScript-based runtime for building web applications. This command runs Deno with experimental features that are not yet stable or fully tested. By using the `--unstable` flag, users can enable new functionality before it''s officially released. This comes with the risk of encountering bugs and instability, making it suitable only for developers who want to be on the cutting edge and are willing to accept potential issues.'
