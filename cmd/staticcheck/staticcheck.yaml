# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: staticcheck
description: The advanced Go linter
flags:
    --checks=: Comma-separated list of checks to enable
    --debug.cpuprofile=: Write CPU profile to file
    --debug.measure-analyzers=: Write analysis measurements to file.
    --debug.memprofile=: Write memory profile to file
    --debug.no-compile-errors: Don't print compile errors
    --debug.repeat-analyzers=: Run analyzers num times
    --debug.unused-graph=: Write unused's object graph to file
    --debug.version: Print detailed version information about this program
    --explain=: Print description of check
    --fail=: Comma-separated list of checks that can cause a non-zero exit status.
    --go=: Target Go version in the format '1.x' (default 1.15)
    --show-ignored: Don't filter ignored problems
    --tags=: List of build tags
    --tests: Include tests
    --unused.whole-program: Run unused in whole program mode
    --version: Print version and exit
documentation:
    command: '[AI] `staticcheck` is a command-line tool used in Go programming language for performing static analysis of Go source code. It identifies potential issues such as unused variables, incorrect type usage, and other errors that can be detected without executing the code. This helps developers to find and fix bugs early on in the development process, improving code quality and maintainability.'
    flag:
        checks: '[AI] `staticcheck --checks` is a command-line tool provided by the StaticChecker package in Go programming language. This command is used to run specific static checks defined in the `.go` or `.cfg` files against your codebase without executing tests or building the project. The `--checks` option specifies a comma-separated list of checkers you want to apply. Each checker is a Go package that provides a set of rules for static analysis, such as `govet`, `golangci/gov`, and `gocyclo`. Using this command helps developers identify coding errors, potential security vulnerabilities, and improve code quality before even writing tests or building the project.'
        debug.cpuprofile: '[AI] `staticcheck --debug.cpuprofile` is a command used in Go programming language for profiling during compile-time. The `staticcheck` tool is used for static analysis of Go code. The `--debug.cpuprofile` flag enables CPU profiling, which generates detailed CPU profiles as part of the compiled binary. These profiles can be later analyzed using tools like `pprof` to identify performance bottlenecks in the code.'
        debug.measure-analyzers: '[AI] `staticcheck --debug.measure-analyzers` is a command used in the SonarQube or SonarLint static analysis tools for .NET projects. The option `--debug.measure-analyzers` enables debug mode and activates only the measure analyzers during the analysis process. Measure analyzizers are used to collect and report metrics about the codebase, such as code coverage, code duplication, and cyclomatic complexity. By focusing on these analyzers, developers can gain a more in-depth understanding of their codebase''s quality characteristics for further improvement.'
        debug.memprofile: '[AI] `staticcheck --debug.memprofile` is a command used in the Go programming language to run the static analysis tool, `staticcheck`, with memory profiling enabled during debug mode. The flag requests that memory allocations and deallocations be tracked and recorded into a memory profile file, providing detailed information about memory usage patterns in the program. This data can then be used for further analysis and optimization efforts to improve memory efficiency.'
        debug.no-compile-errors: '[AI] `staticcheck --debug.no-compile-errors` is a command used in Go programming language to perform a static analysis of Go source code using the `golang.org/x/tools/golland` static analyzer, `staticcheck`. The `--debug` flag enables additional diagnostic information during the analysis process. The `no-compile-errors` argument specifically instructs `staticcheck` to continue the analysis even if it encounters compile errors, which are issues that would prevent the code from being built or executed. By default, `staticcheck` stops when encountering such errors and only reports static analysis findings. This flag allows developers to examine both the static analysis results and the compile errors in a single run.'
        debug.repeat-analyzers: '[AI] The `staticcheck --debug.repeat-analyzers` command is a flag used with the static analysis tool, go vet, in Go programming language. This flag instructs go vet to run each analyzer multiple times during the analysis process. The primary reason for using this flag is to increase the chances of detecting hidden issues by allowing analyzers to catch potential problems that may have been missed in previous iterations. The debug option is used to provide more detailed output, which can be helpful when troubleshooting complex issues.'
        debug.unused-graph: |-
            [AI] `staticcheck --debug.unused-graph` is a command used in the SonarQube analysis tool for .NET projects. This command runs a static code analysis using the SonarQube scanner for MSBuild or Visual Studio, with an emphasis on the "unused-graph" option under the "--debug" flag.

            The primary goal of this command is to identify and report unused members (methods, classes, etc.) in the analyzed .NET codebase. However, the "--debug.unused-graph" option enables a more thorough analysis by also detecting and reporting unused constructs such as fields, types, namespaces, and even whole projects or solutions that are not referenced anywhere within the codebase.

            This can help developers in understanding potential code smells and dead or obsolete code, which might lead to improvement in overall code quality and maintainability.
        debug.version: '[AI] `staticcheck --debug.version` is a command used with the StaticCheck analysis tool for Go language code. The command runs StaticCheck in debug mode and returns the version number of the StaticCheck debugger being used, providing more detailed debug information if needed.'
        explain: '[AI] `staticcheck --explain` is a command used in Solidity, the programming language for Ethereum smart contracts. The `staticcheck` tool performs static analysis on Solidity code to identify potential issues or errors without executing the contract. The `--explain` flag is an option that provides detailed explanations for each issue found during the analysis. This can help developers better understand the nature of the problem and how to fix it, improving the overall quality and security of their smart contracts.'
        fail: '[AI] `staticcheck --fail` is a command used in programming with the static analysis tool, `golangci-lint`. This command performs a static code analysis check on Go source files, reporting any potential issues or errors it finds. The `--fail` flag, when used, causes the command to exit immediately if any issues are detected. In other words, this option enforces strict adherence to coding standards and best practices by preventing further processing when problems are identified.'
        go: '[AI] `staticcheck --go` is a static analysis tool specifically designed for the Go programming language. It scans source code for potential errors, security vulnerabilities, and coding style issues without requiring runtime execution. The tool provides suggestions to improve code quality and adherence to best practices. By using `staticcheck --go`, developers can identify and address issues earlier in the development process, reducing the risk of runtime errors and improving overall software reliability.'
        show-ignored: '[AI] `staticcheck --show-ignored` is a command used with the StaticCheck tool in Go programming language. This command displays a list of ignored issues and their locations in the source code. Ignored issues are warnings or errors that have been suppressed by adding a comment `//go:noinline` or `//go:nosummary` before the offending line in the code. These comments tell StaticCheck not to report these issues, but they can be useful to know about for future reference or when maintaining the codebase.'
        tags: '[AI] `staticcheck --tags` is a command used in Go programming language for running static analysis checks on source code using the Staticgo tool. The `--tags` option filters the analysis based on specific tags. These tags denote various types of checks, such as type safety, potential errors, or style guidelines. By specifying one or more tags, the command will only run analyses corresponding to those tags. This can help focus the analysis effort on specific areas of concern and reduce unnecessary noise from other checks.'
        tests: '[AI] `staticcheck --tests` is a command used in Go programming language for performing static analysis of source code. The `--tests` flag tells the `staticcheck` tool to also analyze the test files in addition to the regular source files. This helps in detecting potential issues in tests, such as unused variables or incorrect test cases, which can lead to false positives or negatives when running tests. By analyzing both the code and test files together, the tool ensures a more comprehensive analysis of the project, ultimately improving the overall quality of the Go application.'
        unused.whole-program: '[AI] `staticcheck --unused.whole-program` is a command used in the StaticChecker tool for Go programming language. This specific usage instructs StaticChecker to perform a whole-program static analysis and report any unused declarations, such as variables or functions, across the entire program. The goal is to help developers identify and remove unnecessary code elements, which can improve code quality, readability, and maintainability.'
        version: '[AI] `staticcheck --version` is a command used with Staticcheck, a static analysis tool for Go source code. This command''s purpose is to print out the version number of the installed Staticcheck executable. By invoking this command in your terminal or command prompt, you can verify which version of Staticcheck you have installed and check for any updates if necessary.'
