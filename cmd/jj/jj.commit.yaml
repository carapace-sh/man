# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: commit [OPTIONS] [PATHS]...
aliases:
    - ci
description: Update the description and create a new change on top
flags:
    -h, --help: Print help (see more with '--help')
    -i, --interactive: Interactively choose which changes to include in the first commit
    -m, --message*=: The change description to use (don't open editor)
documentation:
    command: '[AI] The `jj commit` command is not a standard Git or VCS (Version Control System) command. It seems to be specific to the JJ editor, which is a code editor with integrated version control. This command likely saves your current changes and commits them in your local Git repository using the currently configured message. For more information, please refer to the JJ editor documentation.'
    flag:
        help: |-
            [AI] `jj commit --help` is a command used in Jira's Java-based CLI (Command Line Interface) tool called "jj" (Java IDE integration for Jira). This command displays detailed help and usage information about the Git-like `commit` subcommand.

            When executed, it shows various options that can be used with the commit command such as:

            * `-m`, `--message`: Allows you to specify the commit message in a single line or multiple lines.
            * `-a`, `--amend`: Amends the most recent commit message (last commit on the current branch) by appending new content to it.
            * `--no-edit`: Commits the changes without opening an editor for the commit message.
            * `--quiet`, `--quieter`, `--quietest`: Suppresses various types of output.

            Additionally, it provides more detailed information about the commit process and its workflow in the context of Jira's continuous integration and deployment pipeline.
        interactive: '[AI] `git jj commit --interactive` is a Git command using the "git-jj" or "JetBrains Surround" tool, which allows for an interactive commit experience. This command opens up an editor window where you can modify the commit message, edit files staged for commit, and even reorder or squash commits interactively before completing the commit. It''s useful when you need to make changes to your commit history, such as refining commit messages or grouping related changes into a single commit.'
        message: |-
            [AI] The `jj commit --message` command is used in source control systems, specifically with Git and its interactive rebase tool JJ (also known as Fast-forward Interactive Rebase). This command allows you to edit or change the commit message of the last committed change before creating a new commit.

            When you run `jj commit --message`, Git opens your default text editor with the current commit message for modification. Once you save and close the file, JJ creates a new commit with your updated message. If no message is provided after the `--message` flag, Git will open an editor to create a new message from scratch.
