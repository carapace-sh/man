# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: deinit
description: Unregister the given submodules
flags:
    --all: remove the whole submodule section from the config as well
    --force: remove working tree even if it contains local modifications
documentation:
    command: '[AI] `git submodule deinit` is a Git command used to unlink or remove a registered Git submodule from the superproject. This means that the submodule will no longer be tracked as part of the superproject''s repository, but its local files will still exist on the file system. When you run this command, it also resets the submodule''s URL to an empty string, effectively disconnecting it from any remote repositories as well.'
    flag:
        all: |-
            [AI] `git submodule deinit --all` is a Git command used to unlink or remove all submodules in the current repository, including those not mentioned in the `.gitmodules` file. The `--all` option ensures that this operation is applied recursively to all subdirectories within the project tree, whether they are directly or indirectly referenced as submodules.

            By running this command, you'll lose the Git history and tracking for those submodules, effectively detaching them from the repository. If you intend to use these submodules again in the future, make sure to save their repositories locally before running `git submodule deinit --all`.
        force: '[AI] `git submodule deinit --force` is a Git command used to unlink and remove the configured submodule from the superproject''s Git history, replacing it with the current local directory''s content. The `--force` option overwrites any recorded submodule configuration in the superproject''s Git repository without asking for confirmation. This can be useful when you want to completely reset the submodule relationship and start fresh.'
