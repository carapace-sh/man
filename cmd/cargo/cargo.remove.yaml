# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: remove
description: Remove dependencies from a Cargo.toml manifest file
flags:
    --build: Remove as build dependency
    --dev: Remove as development dependency
    --dry-run: Don't actually write the manifest
    --manifest-path=: Path to Cargo.toml
    --target=: Remove as dependency from the given target platform
    -h, --help: Print help
    -p, --package=: Package to remove from
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo remove` is a Cargo command used to uninstall dependencies from a Rust project''s `Cargo.toml` file. By specifying one or more package names as arguments, this command will safely remove those dependencies and their corresponding version specifications in the `Cargo.toml`. This can be useful when you want to update or change your project''s dependencies.'
    flag:
        build: |-
            [AI] `cargo remove --build` is a command used in Rust programming language's package manager, Cargo. This command accomplishes two tasks:

            1. **Removal of dependencies**: The `remove` subcommand removes specified dependencies from the project's `Cargo.toml` file. You can specify one or more crates to remove using their names or Git URLs.

            2. **Re-building the project**: After removing the dependencies, `--build` option is used to rebuild the entire project from scratch. This ensures that all the changes made in the project and the removal of the dependencies are reflected correctly. It also generates fresh artifacts for the updated codebase and dependencies.
        dev: '[AI] The command `cargo remove --dev` is used in Rust programming language''s build system, Cargo. This command removes all development dependencies (crates marked as dev-dependencies in Cargo.toml file) from the project''s cache and rebuilds the project with only production dependencies. It''s often used when preparing a package for submission to a crate registry or before running tests on a Continuous Integration system where only production dependencies are allowed.'
        dry-run: '[AI] The `cargo` command with the subcommand `remove --dry-run` is used to simulate the removal of dependencies from a Rust project''s Cargo.toml file without actually making any changes. This can be useful for checking what dependencies would be removed before running the command in a production environment.'
        help: '[AI] `cargo remove --help` is a command used with Cargo, Rust''s package manager. This command''s purpose is to facilitate the removal of specified dependencies from the project''s Cargo.toml file. Running this command with the `--help` flag will display detailed information about how to use this command effectively. It shows optional arguments like the dependency name or version, and explains that the removed dependencies will be saved in a backup file before deletion. This command helps manage and update project dependencies efficiently.'
        manifest-path: '[AI] `cargo remove` is a command used in Rust programming language''s Cargo build tool. The `--manifest-path` option specifies the path to the Cargo.toml manifest file. Together, this command is used to uninstall (remove) dependencies listed in that particular manifest file. In simpler terms, it removes the specified crates mentioned in the given Cargo.toml file.'
        package: '[AI] `cargo remove --package` is a command used in Rust programming language''s package manager, Cargo. This command is used to uninstall a specific crate dependency from the project''s `Cargo.toml` file. When you run this command with the name of the package as an argument, Cargo removes that package''s entry from the `[dependencies]` section, effectively uninstalling it from your local Cargo cache and future builds. This can be useful when you no longer need or want a particular dependency in your project.'
        quiet: '[AI] `cargo remove --quiet` is a command used in Rust programming''s Cargo build tool. This command is used to uninstall (remove) dependencies from the project''s `Cargo.lock` file without displaying any output or progress messages, making the process quiet. This can be useful when running automated scripts or continuous integration pipelines where silence is important.'
        target: '[AI] `cargo remove --target` is a command used in Rust programming language''s Cargo build tool. It is used to uninstall specific crate dependencies from the project''s `Cargo.lock` file and the local cache, while keeping the current version of those crates in the `Cargo.toml` file unchanged. The `--target` option specifies the target for which the removal is performed. This can be a specific library or an executable. It''s often used when testing different versions of dependencies or to resolve dependency conflicts.'
