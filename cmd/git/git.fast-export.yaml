# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fast-export
description: Git data exporter
group: manipulator
flags:
    --anonymize: Anonymize the contents of the repository while still retaining the shape of the history and stored tree
    --anonymize-map*=: Convert token <from> to <to> in the anonymized output
    --export-marks.: ""
    --export-marks=: Dumps the internal marks table to <file> when complete
    --fake-missing-tagger: Fake a tagger to be able to fast-import the output
    --full-tree: This option will cause fast-export to issue a "deleteall" directive for each commit
    --import-marks=: Before processing any input, load the marks specified in <file>
    --mark-tags: In addition to labelling blobs and commits with mark ids, also label tags
    --no-data: Skip output of blob objects and instead refer to blobs via their original SHA-1 hash
    --progress=: Insert progress statements every <n> objects
    --reencode=: Specify how to handle encoding header in commit objects
    --reference-excluded-parents: Refer to commits in the excluded range of history by their sha1sum
    --refspec: Apply the specified refspec to each ref exported
    --show-original-ids: Add an extra directive to the output for commits and blobs, original-oid <SHA1SUM>
    --signed-tags=: Specify how to handle signed tags
    --tag-of-filtered-object=: Specify how to handle tags whose tagged object is filtered out
    --use-done-feature: Start the stream with a feature done stanza, and terminate it with a done command
    -C: Perform copy detection
    -M: Perform move detection
documentation:
    command: '[AI] `git fast-export` is a Git command used to export a Git repository into a flat file storage format. It creates a text file containing the commit history and object data, which can be later imported back into another Git repository using `git fast-import`. This command is particularly useful when dealing with large repositories or for transferring repository data over networks where bandwidth is limited.'
    flag:
        C: '[AI] `git fast-export` is a Git command used to export one or more commit trees into a single file in a format that can be imported back into another Git repository using `git import`. The `-C` option is used with `fast-export` to create a compressed archive of the output file. It does not change the exporting or importing process itself but merely compresses the output for easier transfer and storage. The resulting file can be imported back into another Git repository using `git import`.'
        M: '[AI] `git fast-export` is a Git command used to create and write a Git repository as a series of MIME messages to a file. The `-M` option stands for "--max-count=<n>" which is used to limit the number of commits exported in one batch to <n>. By default, this value is set to 10. This means that when using `git fast-export -M 5`, only up to 5 commits will be written as a single batch, while the remaining commits will start a new batch. This can be useful when exporting large repositories where the output file size needs to be kept small.'
        anonymize: '[AI] `git fast-export --anonymize` is a Git command used to create a fast export of a Git repository into a flat file format, while also anonymizing the commit messages and author information by replacing them with random strings. This can be useful for sharing repository history publicly without revealing sensitive information.'
        anonymize-map: '[AI] `git fast-export --anonymize-map` is a Git command used to create a fast export of a Git repository into a file or standard output. The `--anonymize-map` option anonymizes the committer and author names by replacing them with random strings, preserving their original hashes in a mapping file for future reference. This command is useful when sharing Git history publicly while keeping sensitive information private.'
        export-marks: |-
            [AI] `git fast-export --export-marks` is a Git command that creates a fast export of an annotated tag or a branch's commits, along with tag marks for each commit.

            When you run this command, Git generates a raw, binary file that contains the entire history of the specified commits and tags as a series of text-based messages, hashes, and other metadata. The `--export-marks` option adds tag marks to each commit in the exported data, which makes it easier to reapply the commits and their associated tags to another Git repository.

            In summary, this command is useful when you need to share a complete Git history, including all commits and tags, with someone else who might not have access to the original repository.
        export-marks.: '[AI] `git fast-export --export-marks` is a Git command used to create a fast export of an annotated tag or a branch into a single file. The `--export-marks` option adds special marks in the output file to denote the commit objects and their contents, making it easier for other Git systems to import the data. This command is particularly useful when sharing large Git repositories over networks or when working with distributed systems.'
        fake-missing-tagger: '[AI] `git fast-export --fake-missing-tagger` is a Git command used to export one or more branches into a single file in a flat format, which can then be imported into another Git repository using `git fast-import`. The `--fake-missing-tagger` option is used when importing tags that do not have associated taggers (i.e., the author and committer names and emails are missing). With this option, Git will create new empty tag objects during import, allowing you to later set the correct tagger information manually.'
        full-tree: '[AI] `git fast-export --full-tree` is a Git command used to create and save a single tree object in a Git repository as a standalone file, instead of committing it to the current branch. The `--full-tree` option tells Git to include all the tree''s contents, including large files, in the exported data. This can be useful for sharing specific tree snapshots with others without requiring them to have the full history of the repository.'
        import-marks: '[AI] `git fast-export --import-marks` is a Git command used to export a Git repository into a file in fast-export format with import marks. The `--import-marks` option tells Git to include commit marks and annotated tag marks in the output, allowing the imported data to be reimported back into a Git repository using `git fast-import`. This can be useful for transferring Git data between systems or backing up a repository.'
        mark-tags: '[AI] `git fast-export --mark-tags` is a Git command used to create a fast export of a Git repository into a single file, with an added option `--mark-tags`. This option marks each tag as an offset inside the dump, allowing the imported repo to exactly reproduce the original tags. The output can then be easily transferred between systems and restored using `git import` or other Git tools.'
        no-data: '[AI] `git fast-export` is a Git command used to export one or more commits into a single file, along with their full history and metadata. The `--no-data` option modifies the output behavior: instead of producing an archive containing the commit data, it writes only the raw commit messages and hashes to standard output. This can be useful when you want to save or transmit just the commit information without the entire commit data.'
        progress: '[AI] `git fast-export --progress` is a Git command used to export one or more commits and their associated data into a file in a format that can be imported using `git fast-import`. The `--progress` option provides real-time progress reports during the export process. The output is written to standard output (by default) as a series of lines, each containing a commit hash followed by its size and other metadata.'
        reencode: '[AI] `git fast-export --reencode` is a Git command used for exporting a Git repository into a single file, called a fast export file. This command encodes the Git objects with a newer, more efficient compression algorithm (`--reencode`) than the default one during the export process. This can result in smaller file sizes when importing the fast export file back into another Git repository.'
        reference-excluded-parents: |-
            [AI] `git fast-export` is a Git command used to create a fast export of a Git repository into a single file, which can be later imported back using `git fast-import`. The `--reference-excluded-parents` option is used when exporting a history that may contain multiple commits with the same parent.

            When you have a Git history with multiple commits sharing the same parents and you want to exclude those parents from the exported file, you can use this option. This will create a new commit for each shared parent in the exported file, reducing the size of the output. The resulting file can then be transferred over a network or stored offline for later import.
        refspec: '[AI] `git fast-export` is a Git command used to create and save a Git repository as a flat file or a series of files, instead of a full repository with hidden .git directory. The `--refspec` option specifies how to export the refs (branches or tags) from the source repository. It allows you to selectively export specific branches or tags using their names or refs identifiers. For example: `git fast-export --refs refs/heads/main:refs/mynewrepo/main`. This command exports only the main branch with name ''main'' from the source repository to a file named ''refs/mynewrepo/main'' in the output file.'
        show-original-ids: |-
            [AI] `git fast-export` is a Git command used to export one or more commits and their full history into a single file in the Git packed-format. The `--show-original-ids` option affects how commit hashes are displayed in the output.

            With this option, Git will include the original parent commit hash (i.e., the commit that was a parent before a merge or rebase) alongside the new parent commit hash when exporting a commit with multiple parents. This can be useful for preserving detailed commit history information during repository cloning or backup processes.
        signed-tags: '[AI] `git fast-export --signed-tags` is a Git command used to create and save a shallow, signed, and detached Git repository as a single file. This file can be shared with others who can then import it back into their own repositories using the `git fast-import` command. The `--signed-tags` option ensures that all tag objects in the exported data are marked with GPG signatures, maintaining the integrity of the tags during transfer.'
        tag-of-filtered-object: '[AI] `git fast-export` is a Git command used to export a Git repository into a flat file format, which can be later imported using `git fast-import`. The `--tag-of-filtered-object` option filters and exports only the objects that have tags associated with them. This can be useful for transferring just the tagged commits and their associated metadata.'
        use-done-feature: '[AI] `git fast-export --use-done-feature` is a Git command used for exporting repository data in a format that can be imported using `git fast-import`. The `--use-done-feature` option tells Git to include only the commits and their associated annotated tags that have already been marked as "done" (i.e., finished being created), skipping any ongoing or incomplete transactions. This can be useful when you want to save a snapshot of your repository with completed features but don''t want to wait for all ongoing transactions to finish before doing so. The output of `git fast-export` is a text file that can be stored and later imported using `git fast-import`.'
