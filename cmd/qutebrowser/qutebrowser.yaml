# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: qutebrowser
description: a keyboard-driven, vim-like browser based on PyQt5
flags:
    --backend=: Which backend to use
    --enable-webengine-inspector: Enable the web inspector
    --force-color: Force colored logging
    --json-logging: Output log lines in JSON format (one object per line)
    --logfilter=: Comma-separated list of things to be logged
    --loglines=: How many lines of the debug log to keep in RAM
    --no-err-windows: Don't show any error windows
    --nocolor: Turn off colored logging
    --nowindow: Don't show the main window
    --qt-flag=: Pass an argument to Qt as flag
    --target=: How URLs should be opened
    -B, --basedir=: Base directory for all storage
    -C, --config-py=: Path to config.py
    -D, --debug-flag=: Pass name of debugging feature to be turned on
    -R, --override-restore: Don't restore a session even if one would be restored
    -T, --temp-basedir: Use a temporary basedir
    -V, --version: Show version and quit
    -d, --debug: Turn on debugging options
    -h, --help: show this help message and exit
    -l, --loglevel=: Override the configured console loglevel
    -r, --restore=: Restore a named session
documentation:
    command: '[AI] `qutebrowser` is a highly configurable and efficient web browser written in Python. It uses a modal editing interface, allowing users to write actions in a configuration file using a simple and powerful syntax, inspired by vi and Vim text editors. This approach enables swift navigation and customization of browsing experience.'
    flag:
        backend: '[AI] The `--backend` option in Qutebrowser is used to specify which graphical user interface (GUI) toolkit or backend to use for rendering the browser''s graphical interface. This can be set to options such as QtWebEngine, Qt, GTK, or DirectWrite-Direct2D depending on the available backends and the user''s preference and system configuration. The choice of backend can impact performance, compatibility, and other factors related to the browser''s appearance and functionality.'
        basedir: '[AI] `qutebrowser --basedir` is a command-line option for the QuteBrowser web browser. It sets the base directory for user data files, such as cookies, bookmarks, and custom themes. Using this option followed by a directory path allows users to specify a custom location for storing these files instead of the default one. This can be useful for synchronizing data across multiple machines or keeping data separate for different user profiles.'
        config-py: '[AI] `qutebrowser --config-py` is a command-line option for the QuteBrowser web browser that allows users to pass a Python file as an argument, which will be executed as part of QuteBrowser''s configuration. This can be used to customize various aspects of QuteBrowser''s behavior and appearance using Python code. It''s useful for advanced users who want to make complex modifications to the browser without having to edit the source code directly.'
        debug: '[AI] `qutebrowser --debug` is a command-line argument used to start QuteBrowser, a highly configurable and customizable web browser, with debug mode enabled. This mode provides more detailed output and error messages during the browser''s execution, which can be helpful for developers or power users to diagnose issues or understand complex configurations. It does not open a GUI window by default but instead focuses on the console output.'
        debug-flag: '[AI] `qutebrowser --debug-flag` is a command-line argument used to start the QuteBrowser web browser with debugging enabled. This allows for more detailed output and diagnostic information, which can be helpful for developers who want to investigate issues or customize the browser''s behavior. The debug flag may result in additional console messages and potential performance impacts.'
        enable-webengine-inspector: '[AI] The `--enable-webengine-inspector` flag is a command-line option for Qutebrowser, a highly configurable and efficient web browser written in Python. This option enables the built-in WebEngine Inspector, which is a developer tool for debugging and analyzing web pages. It provides features like element inspection, CSS modification, JavaScript debugging, network monitoring, and performance profiling, helping developers and power users to diagnose issues, optimize websites, and enhance their browsing experience.'
        force-color: |-
            [AI] The `--force-color` flag in qutebrowser is used to enable or disable ANSI color sequences in the terminal output of the browser. By default, qutebrowser detects and interprets these color codes automatically. However, in some cases, such as when using screen or tmux, it may be necessary to force the issue manually.

            Using `--force-color auto` (the default) enables ANSI color sequences. Setting it to `--force-color off` disables them. Alternatively, you can use `--force-color always` to force the terminal to interpret all text as colored, regardless of whether qutebrowser sends any color codes or not.
        help: '[AI] `qutebrowser --help` displays a brief help message about QuteBrowser, a highly configurable and efficient web browser written in Python. The help text includes a list of available commands for starting QuteBrowser with various options, such as opening specific URLs or profiles, enabling debug mode, or setting custom user styles. It also mentions common keys used within QuteBrowser and provides links to the documentation and community resources.'
        json-logging: '[AI] `qutebrowser --json-logging` is a command-line argument used in QuteBrowser, a highly configurable and efficient web browser. This option enables JSON logging, which means that QuteBrowser generates a JSON file containing detailed information about its events and actions as it runs. The logged data can be analyzed for debugging purposes or used to develop automated tests or custom extensions.'
        logfilter: '[AI] `qutebrowser --logfilter` is a command-line option for Qutebrowser, a configurable and highly customizable web browser. This option allows users to filter the output of Qutebrowser''s log file based on specific keywords or patterns, making it easier to find relevant information among the logs. The filtered logs can be useful for debugging issues, understanding browser behavior, or monitoring particular events while using Qutebrowser.'
        loglevel: |-
            [AI] `qutebrowser --loglevel` is a command-line argument used with the QuteBrowser web browser to change the logging level for diagnostic output. The log level determines the amount and detail of messages that are written to the log file or displayed in the console.

            Higher log levels (e.g., `--loglevel=DEBUG`) result in more detailed output, which can be helpful for debugging issues. Lower log levels (e.g., `--loglevel=INFO`) display only essential information and errors, making the log output more concise. The default log level is usually set to `WARNING`, which only displays warning messages and above.
        loglines: '[AI] `qutebrowser --loglines` is a command-line option for Qutebrowser, a highly configurable and efficient web browser. This option generates real-time output of Qutebrowser''s logging messages in the console or terminal. The logs provide detailed information about various events and actions taking place within the browser, helping with debugging, understanding its behavior, and learning its usage.'
        no-err-windows: '[AI] The `--no-err-windows` flag is a command-line option for Qutebrowser, a highly configurable and efficient web browser written in Python. This option disables the display of error windows that may appear when an issue occurs during browsing, such as a broken link or a failed script execution. By using this flag, users can suppress these distractions and focus on their browsing experience without interruptions from error messages.'
        nocolor: '[AI] The `--nocolor` flag for Qutebrowser is used to disable colored output in the terminal. This can be useful when working with terminals or environments that do not support 256 color palettes or where color output may cause confusion or distract from other information. By passing this flag, Qutebrowser will display text and interface elements using standard grayscale or monochrome colors instead of colored formatting.'
        nowindow: '[AI] The `--nowindow` flag in qutebrowser is used to open a new instance of the browser without creating a new window. Instead, all tabs will be opened in the existing window or split in the current tab if the multi-instance mode is enabled. This can be useful when running multiple scripts or commands in separate sessions within the same browser instance.'
        override-restore: '[AI] `qutebrowser --override-restore` is a command-line option used in Qutebrowser, a highly configurable and efficient web browser written in Python. This option restores previous session data instead of starting with a fresh browsing session. When you run `qutebrowser --override-restore`, Qutebrowser will load the last saved session, including all open tabs and their histories, allowing you to continue from where you left off. This is particularly useful when you want to quickly resume your previous browsing activities instead of starting a new session.'
        qt-flag: '[AI] `qutebrowser --qt-flag` is a command-line argument used with the QuteBrowser web browser. The `--qt-flag` option allows passing specific flags to Qt, QuteBrowser''s graphical toolkit. These flags can be used for various purposes, such as enabling or disabling certain features, improving performance, or addressing specific issues on different platforms. For instance, `--qt-flag rgb:system` enables using the system color palette for better integration with the desktop environment. It is essential to check the Qt documentation and QuteBrowser''s official resources for available flags and their effects.'
        restore: '[AI] `qutebrowser --restore` is a command-line option for QuteBrowser, a customizable and highly configurable web browser written in Python. This option restores previously saved browser sessions upon starting the application. When you run `qutebrowser --restore`, it will open the browser with the last active tabs from a previously saved session instead of an empty window. This can be useful for quickly resuming your browsing activities after a crash or closing the browser accidentally.'
        target: '[AI] `qutebrowser --target` is a command-line option for QuteBrowser, a highly configurable and customizable web browser written in Python. This option allows users to open a new window or tab with a specific URL or application instead of the default homepage. The syntax is as follows: `qutebrowser --target=URL` or `--target=APPID`. For example, `qutebrowser --target=https://www.example.com` opens a new window or tab with the given URL, while `qutebrowser --target=calculator` launches the system calculator application instead of opening a webpage.'
        temp-basedir: '[AI] The `--temp-dir` or `--temp-basedir` option in Qutebrowser is used to specify a custom directory where temporary files will be stored during browser sessions. By default, Qutebrowser uses the system''s temporary directory. Setting this option can help manage and control temporary files, particularly for use cases such as automated testing or running Qutebrowser from a read-only file system.'
        version: '[AI] `qutebrowser --version` is a command used in the terminal or command prompt to check the version information of QuteBrowser, a highly configurable and efficient web browser written in Python. When executed, it will print out the specific version number, along with any relevant build information such as the operating system and compilation flags used.'
