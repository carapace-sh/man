# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: analyze
description: Analyze Dart code in a directory
flags:
    --fatal-infos: Treat info level issues as fatal.
    --fatal-warnings: Treat warning level issues as fatal.
    --no-fatal-warnings: Do not treat warning level issues as fatal.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `dart analyze` is a Dart command-line tool that performs static analysis on Dart codebase. It checks the syntax, finds potential errors, suggests improvements and reports issues to enhance code quality. The output includes details about problems, suggestions for refactoring, and other diagnostic information to help developers fix issues and improve their code.'
    flag:
        fatal-infos: '[AI] `dart analyze --fatal-infos` is a command used in Dart programming language to perform static analysis on Dart codebase. The `--fatal-infes` option instructs the analyzer tool to print only the fatal errors and exit with non-zero exit code if there are any issues found, making it suitable for continuous integration environments where only serious problems need to be reported.'
        fatal-warnings: '[AI] `dart analyze` is a command-line tool in Dart programming language used for static code analysis. The `--fatal-warnings` option, when passed to this command, makes it behave stricter by treating all warnings as errors and exiting with non-zero exit codes. This means that the analysis of your Dart codebase must be completely error-free or the build process will fail, encouraging developers to address all issues before continuing.'
        help: |-
            [AI] `dart analyze` is a command-line tool in Dart programming language for performing static analysis on Dart codebases. The `--help` option is used to display detailed help information about this command. Here's what you can expect when using `dart analyze --help`:

            1. It provides an overview of the `analyze` command, explaining its purpose and basic usage.
            2. Lists all available subcommands or tasks that can be run with `analyze`, such as `lint`, `check`, `cache_serve`, etc.
            3. Describes each subcommand's functionality and provides usage examples.
            4. Lists any optional flags or arguments for each subcommand and explains their meaning.
            5. Offers information about how to configure the analysis engine using a `analysis_options.yaml` file.
            6. Provides links to additional resources, such as the Dart analysis documentation.
        no-fatal-warnings: '[AI] `dart analyze` is a command-line tool in Dart programming language for performing static analysis on Dart code. The `--no-fatal-warnings` option is used to suppress fatal warnings during analysis. With this flag, Dart will continue analyzing the code even if it encounters warnings that would normally cause the analysis to stop. This can be useful when dealing with large codebases or specific issues where you want to ignore certain warnings temporarily. However, keep in mind that ignoring warnings may hide potential issues in your code and should be used cautiously.'
