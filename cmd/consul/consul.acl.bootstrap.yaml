# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bootstrap
description: Bootstrap Consul's ACL system
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --format=: Output format.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
documentation:
    command: '[AI] `consul acl bootstrap` is a command used in Consul, an open-source distributed, highly available, and data center aware solution to connect and configure applications, monitor their health and performance, and coordinate logic between their components. This command initializes the Access Control List (ACL) policy for a new or existing Consul datacenter by creating the default ACL policy file named `policy.hcl` under the `$HOME/.consul/` directory. It is typically used during Consul installation or configuration changes to grant required permissions to various Consul resources.'
    flag:
        ca-file: '[AI] `consul acl bootstrap --ca-file` is a command used in Hashicorp Consul, an open-source tool for service discovery, configuration, and orchestration. This command is used to bootstrap the Access Control List (ACL) of a Consul cluster by generating self-signed Certificate Authority (CA) keys and certificates. The `--ca-file` option specifies the path to a file that contains the existing CA certificate which will be used to sign the newly generated keys and certificates. This command is typically run during initial setup of a Consul cluster or when making significant changes to the ACL configuration.'
        ca-path: |-
            [AI] The `consul acl bootstrap --ca-path` command is used in Consul, an open-source tool for service discovery, configuration management, and orchestration. This command is responsible for bootstrapping Access Control Lists (ACL) in a secure manner within Consul.

            The `--ca-path` flag specifies the location of the trusted Certificate Authority (CA) certificates used to sign the Consul ACL server's certificates during the bootstrap process. These CA certificates validate the authenticity and trustworthiness of the Consul ACL server's certificates, ensuring secure communication between Consul components in your infrastructure.
        client-cert: '[AI] The `consul acl bootstrap --client-cert` command is used to initialize Access Control List (ACL) permissions in Hashicorp Consul using a client certificate for authentication. The flag `--client-cert` specifies the path to the SSL certificate file for the client making the request. This process establishes an initial set of ACL rules and allows you to manage access control policies within your Consul cluster.'
        client-key: |-
            [AI] The `consul acl bootstrap --client-key` command is used to bootstrap and initialize Access Control List (ACL) functionality in Consul, a connectivity and service discovery tool.

            The `--client-key` flag specifies the client token for the ACL policy that will have administrative privileges in the Consul server. This key should be securely generated beforehand and must not be shared publicly. The administrative ACL policy is essential to manage and configure other policies, permissions, and users within Consul's security framework.
        datacenter: '[AI] The `consul acl bootstrap --datacenter` command is used to initialize Access Control List (ACL) in Consul, a connectivity and service discovery tool. This command sets up the default policies for managing access to different resources within a Consul datacenter. It creates an ACL policy file that defines default roles, permissions, and bindings for various Consul components like agents, clients, and servers. The `--datacenter` flag specifies the name of the datacenter to which this bootstrap configuration applies. This command should be run once per datacenter when initially setting up ACLs in Consul.'
        format: |-
            [AI] The `consul acl bootstrap --format` command is used to generate a Consul Access Control List (ACL) bootstrap file in a specific format. Consul is a popular service discovery, configuration, and orchestration tool. The ACL feature allows you to control access to various resources within Consul.

            The `consul acl bootstrap` command generates an initial ACL policy data that can be used to seed your Consul environment with initial policies. The `--format` flag determines the output format of the generated file, which can be either HCL (Hashicorp Configuration Language) or JSON. This file can then be imported into Consul to establish the initial ACL policies.
        http-addr: '[AI] The `consul acl bootstrap --http-addr` command is used to initialize Access Control List (ACL) in Consul, a connectivity and service discovery tool. This command sets the Consul HTTP address for ACL operations and creates the default `root` token with full permissions. It''s essential for securing your Consul setup by managing access to various resources within the platform.'
        stale: |-
            [AI] `consul acl bootstrap --stale` is a command used in Consul, an open-source distributed, yet simple-in-configuration hierarchical key-value store and service registration platform. The `--stale` flag is used during the initial setup of Access Control Lists (ACL) in Consul. It allows the creation or update of ACL policies even if there are inconsistencies between the etcd data store and Consul's internal data model.

            In other words, when using `consul acl bootstrap --stale`, Consul will attempt to apply ACL policies despite any potential inconsistencies in the data, which may exist due to network partitions or other issues during the setup process. This flag is useful when initializing ACLs in environments with complex configurations or where a fresh Consul installation needs to inherit existing ACL rules. However, using this flag should be avoided in production as it introduces the risk of data inconsistencies.
        tls-server-name: '[AI] The `consul acl bootstrap --tls-server-name` command is used to initialize Access Control List (ACL) in Consul, which is a connectivity and configuration management tool. This command sets up the initial ACL policy by creating an ACL token with strong privileges, known as "bootstrap token". It also generates a self-signed TLS certificate for secure communication between Consul servers or clients using this token. The `--tls-server-name` flag specifies a name for the TLS server certificate. This command should be used with caution, as the bootstrap token has full control over Consul''s configuration and data.'
        token: '[AI] The `consul acl bootstrap --token` command is used to initialize Access Control List (ACL) in Consul, an open-source distributed computing platform. It sets up the default policy for managing access to various resources within Consul using a token provided as an argument. This command creates the initial ACL structure and assigns the given token "consul:1" superuser permissions, allowing it to manage all resources in the Consul datacenter.'
        token-file: |-
            [AI] The `consul acl bootstrap --token-file` command is used to initialize Access Control List (ACL) in Consul, an open-source distributed, highly available, and data center aware toolkit for configuring and managing services, key/value stores, and multi-data center applications.

            The `--token-file` option specifies a file containing a valid ACL token, which is used to authenticate the bootstrap process. The command generates new ACL policies, creates default roles, and assigns permissions based on the contents of the file. Once executed, this command sets up the foundation for managing access control in your Consul environment.
