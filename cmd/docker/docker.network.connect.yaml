# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: connect [OPTIONS] NETWORK CONTAINER
description: Connect a container to a network
flags:
    --alias*=: Add network-scoped alias for the container
    --driver-opt*=: driver options for the network
    --ip=: IPv4 address (e.g., "172.30.100.104")
    --ip6=: IPv6 address (e.g., "2001:db8::33")
    --link-local-ip*=: Add a link-local address for the container
    --link=: Add link to another container
documentation:
    command: '[AI] `docker network connect` is a Docker CLI command used to connect an existing container to a specific Docker network. The syntax is: `docker network connect <network> <container>`. This command enables communication between containers on the same network for data exchange, service discovery, or other networking requirements. It also allows containers to access external services like databases or APIs via the network''s gateway or DNS server.'
    flag:
        alias: '[AI] The `docker network connect --alias` command is used to connect a container to a specific network and assign an alias to the container in that network. This allows you to easily reference the container by its alias instead of its container ID or name when communicating with other containers on the network. For example, `docker network connect mynetwork mycontainer --alias myalias`.'
        driver-opt: '[AI] The `docker network connect` command is used to connect a container to a specific Docker network. The `--driver-opt` option is an argument provided to customize the behavior of the selected networking driver. For instance, when using the overlay or macvlan drivers, you may need to specify additional options like subnet or gateway IP addresses. These options depend on the chosen networking driver and are documented in Docker''s official documentation.'
        ip: '[AI] The `docker network connect --ip` command is used to connect a container to a specific IP address within a Docker network, rather than connecting it to a service or label name. The syntax is as follows: `docker network connect <network> <container> --ip <IP-address>`. This command can be useful in certain scenarios where you want to ensure that a container communicates only with a specific IP address within the network.'
        ip6: '[AI] The `docker network connect --ip6` command is used to connect a Docker container to a specific IPv6 Docker network. The IPv6 address is provided as an argument to the command, along with the name or ID of the target container and the name or ID of the network. For example: `docker network connect <network> <container>:<port> <ipv6_address>:<port>`. This command establishes a network connection between the container and the other containers or services in the same network, enabling communication using IPv6 addresses.'
        link: '[AI] The `docker network connect --link` command in Docker is used to create a link between two containers in the same network. When you create a link, Docker automatically adds an entry in the `/etc/hosts` file of both containers, allowing them to reach each other using hostnames defined by the link. Additionally, it sets up some DNS records and port mappings for communication between linked containers. This command is useful when containers need to communicate with each other using specific names or ports without having to manually configure network settings.'
        link-local-ip: |-
            [AI] The `docker network connect --link-local-ip` command is used to connect a Docker container to another container or host using their link-local IP addresses, which are in the 169.254.0.0/16 range by default. This can be useful when containers need to communicate with each other directly without going through a Docker network or bridge. The `--link-local-ip` option specifies the link-local IP address of the container or host that you want to connect to. For example, if you have two containers named `container1` and `container2`, and `container2` has the link-local IP address `169.254.0.2`, you can connect `container1` to it using the command:

            ```
            docker network connect <container1_network> <container1_id> <container2_link_local_ip>:<container2_port> --link-local-ip <container1_link_local_ip>
            ```

            Replace `<container1_network>` and `<container1_id>` with the name or ID of the network that `container1` is connected to, and `<container2_link_local_ip>` and `<container2_port>` with the link-local IP address and port number of `container2`, respectively. The `--link-local-ip <container1_link_local_ip>` option specifies the link-local IP address of `container1`.
