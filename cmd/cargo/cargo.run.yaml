# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
aliases:
    - r
description: Run a binary or example of the local package
group: build
flags:
    --all-features: Activate all available features
    --bin*=: Name of the bin target to run
    --example*=: Name of the example target to run
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package=: Package with the target to run
    -q, --quiet: Do not print cargo log messages
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo run` is a command used in Rust programming language''s build system, Cargo. It directly executes the main binary or script of your project, compiled and packaged by Cargo, without having to build an artifact first. This can save time when making small changes to your code, as you don''t need to rebuild the entire project every time. The output from your program will be printed in the terminal.'
    flag:
        all-features: '[AI] `cargo run --all-features` is a command used in Rust programming language''s build system, Cargo. This command executes the main function of the currently selected project, along with all the features defined for that project. Features are optional components of a Rust library or binary that can be enabled or disabled at compile time. By using `--all-features`, all the features are compiled and run together.'
        bin: '[AI] `cargo run --bin` is a command used in Rust programming language''s build tool, Cargo. It directly builds and runs the project''s main binary (defined in the `[package.binary]` field in the project''s `Cargo.toml` file). This command skips the test phase during the build process and executes the built binary afterwards.'
        example: '[AI] `cargo run --example` is a command used in Rust programming language''s build system, Cargo. This command runs an example project provided with your crate (library or binary). The example projects are located under the `examples` directory within your project''s source tree. When you execute this command in your terminal, Cargo compiles and runs the selected example. It''s helpful for exploring how to use a library effectively or learning about new features of Rust by experimenting with ready-to-use examples.'
        features: '[AI] `cargo run --features` is a command used in Rust programming language''s Cargo build tool to execute a binary with specific features enabled. The `--features` flag allows specifying one or more features, which are optional components that extend the functionality of a library. When building the project, only the features mentioned will be included, resulting in a smaller binary if desired.'
        help: '[AI] The command `cargo run --help` is used to display the help documentation for the `cargo run` sub-command in Cargo, Rust''s package manager. This command provides information on how to use `cargo run` to execute a binary from the current project. It explains options such as specifying build profiles or passing arguments to the binary. The output of this command should give users a clear understanding of how to effectively use `cargo run` in their Rust projects.'
        ignore-rust-version: '[AI] `cargo run` is a command used in Rust programming to build and execute a project using Cargo, its package manager. The `--ignore-rust-version` flag modifies this behavior by instructing Cargo to skip checking the Rust version of dependencies and use the currently available versions instead. This can be useful when working on older projects or dealing with compatibility issues between different Rust and dependency versions.'
        jobs: '[AI] `cargo run --jobs` is a command used in Rust programming language''s build tool, Cargo. It directly runs the default target of your project with multiple jobs in parallel. The number of jobs runs concurrently depends on your system''s available CPU cores and is set by default to match the number of detected cores. This command helps speed up the build process, especially for larger projects or multi-threaded code.'
        keep-going: '[AI] The `cargo run --keep-going` command is a feature in Rust''s Cargo build tool used for continuously running tests, checks, and building your project after each failure or error. It automatically restores the workspace, runs the previous test that failed or caused an error, and repeats this process until all tests pass. This is particularly useful during development to quickly iterate over multiple fixes and adjustments without having to manually rerun tests individually.'
        manifest-path: '[AI] `cargo run` is a command in Rust programming language''s Cargo build tool. The `--manifest-path` option specifies the path to the Cargo.toml file, which contains metadata about the project and defines its build dependencies. By using `--manifest-path`, you can run `cargo run` on a project located outside the default workspace without changing directories or moving the project into it. This allows for building and running projects from multiple locations while keeping the workspace organized.'
        message-format: '[AI] The `cargo run --message-format` command is used in Rust programming language''s build tool, Cargo. It instructs Cargo to run a target with custom error and status messages. The `--message-format` option allows specifying the format of these messages using the CRATE_ID.message-format variable or other supported formats like json, short, human, or none. For instance, `cargo run --message-format=json` would output error and status messages as JSON data.'
        no-default-features: '[AI] `cargo run --no-default-features` is a command used in Rust programming language''s Cargo build tool to execute the source code without activating default features. When you run `cargo run`, Cargo automatically enables all default features of your project by default. However, if you want to explicitly control which features are activated or deactivate all defaults, use `--no-default-features`. This command starts the build process with an empty feature set and allows you to specify only the desired features using flags like `--features my_feature`.'
        package: '[AI] The `cargo run --package` command is used in Rust programming language''s build tool, Cargo. It directly runs the executable or script of a specific package defined in the project''s Cargo.toml file without building or testing it first. This can be useful for quickly checking the functionality of a specific component within a larger project.'
        profile: '[AI] `cargo run --profile` is a command used in Rust programming language''s build system, Cargo. It directly runs the main binary under the specified Cargo profile, without building an artifact first. Profiles allow customizing build settings like optimizations, features, and environment variables for different target environments. Using `--profile` specifies which profile to use when running the binary.'
        quiet: '[AI] `cargo run --quiet` is a command used in Rust programming language''s Cargo build tool. This command executes the default target of the current project, running its tests and building the binary if successful. The `--quiet` flag suppresses all output from Cargo except for errors and warnings. In essence, it runs the target quietly without displaying any status messages during execution.'
        release: '[AI] `cargo run --release` is a command used in Rust programming language''s build system, Cargo. It compiles the source code with all optimizations (in release mode) and then runs the resulting executable. The goal is to generate an efficient and fast binary for production use.'
        target: '[AI] `cargo run --target` is a command used in Rust programming language''s build system, Cargo. It directly runs the compiled code from a specific target under the project, instead of building an artifact first. The `--target` option specifies which target to use for executing the command. This command is useful when testing or running small components without having to build the entire project.'
        target-dir: '[AI] The `--target-dir` flag in Cargo, Rust''s package manager and build system, specifies the directory where the output artifacts of a build should be placed instead of the default `target` directory. This can be useful for setting up continuous integration or testing environments by having Cargo place the build outputs in a location easily accessible to other processes or tools.'
        timings: '[AI] `cargo run --timings` is a command used in Rust programming language''s Cargo build tool to execute a binary or script with profiling enabled. The `--timings` option generates detailed performance timings for the runtime system to write into files, providing insights into the execution time of various functions and modules during the program''s run. This information can be further analyzed using Rust''s built-in profiling tools like `rustprof`, `cargo-profile`, or other third-party visualizers to identify performance bottlenecks and optimize code.'
        unit-graph: '[AI] `cargo run --unit-test` is a command used in Rust programming language''s Cargo build tool to execute unit tests defined in the project. The `--unit-graph` option generates and displays a graphical representation of the test dependency tree, showing how each test depends on other tests or libraries. It can be useful for understanding test relationships and potential ordering issues.'
