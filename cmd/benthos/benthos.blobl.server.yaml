# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: server
description: 'EXPERIMENTAL: Run a web server that hosts a Bloblang app'
flags:
    --host=: the host to bind to.
    -i, --input-file=: an optional path to an input file to load as the initial input to the mapping within the app.
    -m, --mapping-file=: an optional path to a mapping file to load as the initial mapping within the app.
    -n, --no-open: do not open the app in the browser automatically.
    -p, --port=: the port to bind to.
    -w, --write: when editing a mapping and/or input file write changes made back to the respective source file, if the file does not exist it will be created.
documentation:
    command: '[AI] `benthos blobsrv` is a command used in Benthos, an extensible data processing system. The `blobsrv` subcommand starts the Blob Server component of Benthos. This server accepts and stores large binary data called "blobs" from other components or external sources, making it useful for handling data that exceeds memory limits or for acting as a buffer between stream processors. By default, the Blob Server uses an in-memory cache backed by a local filesystem for persistent storage. The location of the cache can be configured, along with various other options, when starting the server.'
    flag:
        host: '[AI] The `benthos flag --host <hostname or IP>` sets the hostname or IP address of the remote server where Benthos, an open-source data processing pipeline, should send data. This flag is used when configuring Benthos to act as a client that fetches data from another source and processes it. The `<hostname or IP>` should be replaced with the actual address of the server running the Benthos server instance that will provide the data.'
        input-file: '[AI] The `benthos flag --input-file` is used to specify a file as the input data source for Benthos, an extensible and configurable data streaming platform. This option instructs Benthos to read data from the provided file in order to process it using the configured pipelines or transformations. This can be particularly useful when dealing with batch data or files that need to be processed individually.'
        mapping-file: '[AI] The `--mapping-file` option in the Benthos data processing pipeline''s `blobl` server command refers to a file that defines data mappings for the input and output formats of a specific Benthos stage. This file allows users to configure how data should be transformed as it passes through the pipeline, enabling custom transformations, data filtering, or format conversions. The use of this option enhances the flexibility and extensibility of the Benthos platform for processing various data sources and sinks.'
        no-open: '[AI] The `benthos flags --no-open` refers to a command-line argument used with Benthos, an open-source data processing pipeline. This argument instructs Benthos not to start an OpenTelemetry collector automatically during initialization. By disabling this option, Benthos focuses only on its primary data processing tasks and does not incur the additional overhead or configuration required for OpenTelemetry monitoring.'
        port: '[AI] The `benthos flag --port` sets the listening port number for the Benthos data processing pipeline. It is used to specify on which port the server will accept incoming data and configuration from upstream components or clients. For example, `--port 8080` sets the port to 8080.'
        write: '[AI] The `benthos flag --write` is used to instruct the Benthos data processing system to write processed data directly to an output sink without further modification or filtering. It bypasses any downstream processing stages and sends the data to the specified output configuration. This flag can be useful for testing or when the raw data output is desired.'
