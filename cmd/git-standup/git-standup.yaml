# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: git-standup
description: Recall the commit history
flags:
    -B: Display the commits in branch groups
    -D=: The date format displayed in commit history
    -L: Enable the inclusion of symbolic links in recursive directory search
    -a=: The author of commits
    -d=: The start of commit history
    -f: Fetch the latest commits before showing commit history
    -g: Display if commit is GPG signed (G) or not (N) in commit message
    -h: Display help message
    -m=: The depth of recursive directory search
    -n=: Limit the number of commits displayed per group
documentation:
    command: '[AI] `git-standup` is not a recognized Git command. Git is a version control system, and its commands are used for managing source code repositories. The term "stand-up" in this context is likely referencing the Agile development practice known as a Daily Scrum or Stand-Up Meeting, where team members discuss their progress on ongoing projects. To conduct such a meeting, you would not use Git but rather communicate directly with your team through verbal or written means.'
    flag:
        B: |-
            [AI] `git-stash apply --index` and `git-reset --hard` are two common Git commands with different purposes.

            `git-stash apply` applies the changes in the stash to the working directory, while keeping the stash saved for later use. This command is useful when you want to apply the changes from a stash without committing them yet.

            The `--index` option tells Git to also apply the changes to the index (staging area), in addition to the working directory.

            `git-reset --hard <commit>` resets the HEAD of the current branch to the specified commit, discarding any changes in the working directory and the index. This command is useful when you want to completely revert to a previous state, losing any unsaved changes.

            The `-B` flag in `git-standup` is not related to the Git commands mentioned above. It's likely a custom flag used in a specific Git workflow tool or script. The exact meaning of this flag would depend on the context in which it is being used, and additional information about that tool or script would be required for a complete explanation.
        D: '[AI] `git-statchup -D` is a command used in Git to trigger a stand-up meeting or daily status sync among team members working on a shared Git repository. The `-D` flag stands for "detached head," which indicates that the Git branch being worked on is not connected to any other branches, meaning no new commits have been pushed yet. By using this command, each team member can share their progress and plans with the group, helping keep everyone informed of the project''s status and ensuring alignment towards common goals.'
        L: '[AI] The `git-standup -L` command is not a valid Git command. `git-standup` is a tool used in Agile development methodologies, specifically Scrum, to facilitate daily stand-ups or scrum meetings. It''s typically run as a script, often integrated with continuous integration tools, and it doesn''t have an option `-L`. If you meant to ask about `git`, `git-standup` is not a Git command at all.'
        a: '[AI] `git-standup` is a command used in Scrum development workflows with Git repositories. The `-a` flag is an option for this command, which stands for "all branches." When used, `git-standup -a` will create or update stand-up meeting notes (commits) on all branches within the current repository. Each commit includes information about the developer who worked on that branch, what they worked on during the previous day, and their plans for the upcoming day. This helps keep a record of team progress and communication across multiple branches.'
        d: |-
            [AI] The `git-stautp -d` command is not a valid Git command. There seems to be a typo in the given command as Git does not have a `git-standup` command.

            However, if we assume you meant `git status -d`, here's what it does:

            `git status -d` displays the differences between your working directory and the last commit (similar to `git diff`), but it does so in a more compact format by only showing changed files with their modified status ("M" for modified, "A" for added, etc.) instead of showing the detailed changes within each file. It's useful for quickly checking which files have been altered without diving into individual differences.
        f: '[AI] `git-stauts --format` is a Git command used to display the current state of the files in the working directory, but with customized output formatting using the `--format` option. The `git-standup` is not a standard Git command; it seems like you might be confusing it with another tool or a specific workflow (like "daily stand-ups" in Agile methodologies). If used correctly, the correct command would be `git status --format=''...''`.'
        g: '[AI] `git-standup` is a Git extension for Agile development teams to facilitate daily stand-ups. The `-g` option, also known as `--global`, configures the command to run globally across all repositories instead of just in the current one. With this option, when you run the `git-standup` command without specifying a repository context, it will checkout the branch with the name configured for your team (usually `develop` or `master`) in each repository and report the status of each team member''s branch. This helps ensure that everyone starts their day with an updated view of their team''s progress.'
        h: |-
            [AI] `git-standup` is not a standard Git command, but rather a tool used in Agile development methodologies for daily stand-up meetings. When you run `git-standup -h`, it displays the help message which provides information about how to use this custom script or application.

            Here's an example of the kind of content you might find in the help message:

            ```
            Usage: git-standup [<branch>] [<commit>]

            Options:
              -h, --help             Show this help message and exit.
              -V, --version          Print version information and exit.

            Description:
              Perform a daily stand-up (scrum) meeting using Git commits since the last stand-up.

            Arguments:
              [<branch>]: The branch to use for this stand-up. Defaults to current branch.
              [<commit>]: The commit hash of the previous stand-up. Defaults to HEAD^.
            ```

            This help message explains that `git-standup` is a command-line utility, and it describes how to use the script with optional arguments (a specific branch and a previous commit). It also includes brief descriptions for each option.
        m: '[AI] `git-standup` is a command-line tool for Agile development teams using Git and the GitFlow workflow. The `-m` flag is used to create or update a "Stand-up Note" file. This file documents each team member''s daily progress, blocks, and upcoming tasks. When you run `git-standup -m`, it opens your default text editor with a template for creating or updating the Stand-up Note in Markdown format. After filling out the information, save and commit the changes using Git, keeping your team informed about ongoing development efforts.'
        "n": '[AI] `git-standup` is a Git command, but it''s not a standard one. It seems to be part of the GitFlow or similar branching strategies for Agile development workflows. The `-n` option is an argument provided with this command. Its purpose is to indicate that no new tasks or stories should be added during this standup meeting, which is a daily communication practice in Agile methodologies where team members update each other on their progress and plan next steps. In Git terminology, this flag may prevent new commits or changes from being created during the standup process.'
