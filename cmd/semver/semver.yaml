# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: semver
description: A JavaScript implementation of the https://semver.org/ specification
flags:
    --ltr: Coerce version strings left to right (default)
    --preid=: Identifier to be used to prefix version increments.
    --rtl: Coerce version strings right to left
    -c, --coerce: Coerce a string into SemVer if possible
    -i, --increment=: Increment a version by the specified level.
    -l, --loose: Interpret versions and ranges loosely
    -p, --include-prerelease: Always include prerelease versions in range matching
    -r, --range=: Print versions that match the specified range.
documentation:
    command: |-
        [AI] SemVer (Semantic Versioning) is a method used for versioning software components. It consists of three numbers separated by dots: major.minor.patch. Each part represents a specific aspect of changes:

        1. Major (leftmost number): indicates a major change, deprecating backward compatibility.
        2. Minor (middle number): indicates new features that are backward-compatible with the previous version.
        3. Patch (rightmost number): denotes backward-compatible bugfixes and improvements.

        The rule is that increasing any of the numbers will result in a new version, but only incrementing the patch number is safe for releasing to production without testing the entire software stack.
    flag:
        coerce: '[AI] `semver --coerce` is a command-line option used with tools that follow Semantic Versioning (SemVer). It instructs these tools to automatically adjust version numbers based on given input, even if the version format does not strictly adhere to SemVer rules. This can be useful when dealing with inconsistently formatted version strings or when upgrading dependencies in a project. The output will be the closest valid SemVer-compliant version number to the input.'
        include-prerelease: '[AI] The `--include-prereleases` option in Semantic Versioning (Semver) refers to including prereleases in version number calculations. In Semver, a release is considered stable if it only consists of major.minor.patch numbers, while prereleases include additional tags like `alpha`, `beta`, or `rc` (release candidate). By using the `--include-prereleases` flag, these prerelease versions are included when querying or comparing version numbers. This allows tracking of development milestones and progress towards the next stable release.'
        increment: |-
            [AI] `semver --increment` is a command in version management, specifically for Semantic Versioning (SemVer). It's used to automatically increment one or more parts of a semantic version number according to specific rules defined by SemVer.

            In other words, given a current version number (e.g., `1.2.3`), the command can be used to increase the major (`1.0.0` -> `2.0.0`), minor (`1.2.3` -> `1.3.0`) or patch (`1.2.3` -> `1.2.4`) component based on the type and amount of changes made to the project.

            By following the SemVer rules, this command ensures that version number updates are clear and consistent between releases, making it easier for users to understand the impact of each update.
        loose: '[AI] `--loose` is a flag used in Semantic Versioning (SemVer). It''s an option for interpreting version numbers in a more permissive way during comparison. With this flag, some otherwise invalid operations may be allowed, such as comparing a major version with a minor or patch version from different projects. By default, SemVer comparisons are strict and only allow comparing major versions between the same projects to maintain backward compatibility rules. Using `--loose` might lead to unexpected results in some cases, but it can help when working with legacy codebases or specific use-cases where more flexibility is required.'
        ltr: '[AI] `semver --ltr` is a command used in version management with Semantic Versioning (SemVer). The `--ltr` option sorts package versions in Long-Term Support (LTS), then Regular, and finally Patch release orders. This helps ensure that packages with long-term support are prioritized over others when upgrading or managing dependencies.'
        preid: '[AI] `semver --preid` is a command-line argument for tools using Semantic Versioning (SemVer). It stands for "Pre-release ID" and is used to specify a pre-release label in the version string. When releasing a new version with a non-stable feature or bug fix, this argument can be used to append a hyphen followed by an identification string to the version number, indicating that the release is pre-release. For example, `semver --preid=alpha1 1.2.3` would result in the version number being set to `1.2.3-alpha1`.'
        range: '[AI] `semver --range` is a command used in npm (Node Package Manager) for specifying a range of Semantic Versioning (SemVer) numbers to match. It allows you to install packages with a version number that matches certain criteria, such as ">=1.0.0" for greater than or equal to version 1.0.0, or "~2.3.4" for version 2.3.x. The tilde (~) denotes a patch release, and caret (^) can be used for minor releases. Multiple criteria can be combined using logical operators like &, |, or(). For example, `semver --range ">1.0.0, <2.0.0"` would match versions greater than 1.0.0 but less than 2.0.0.'
        rtl: '[AI] The `--rtl` flag in Semantic Versioning (Semver) is used to specify Right-To-Left (RTL) language support for version numbers. Semver follows a specific format for version numbers, major.minor.patch. It does not natively support RTL languages. By passing the `--rtl` flag during versioning, the output version number will be displayed in an RTL format suitable for use in languages that read from right to left such as Hebrew or Arabic. This includes swapping major and minor numbers, and adjusting padding characters accordingly. However, it''s important to note that Semver itself does not change the underlying version numbers, only the display format is altered.'
