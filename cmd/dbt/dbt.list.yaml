# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list
description: List the resources in your project
flags:
    --exclude*=: Specify the models to exclude
    --indirect-selection=: Select all tests that are adjacent to selected resources
    --output-keys=: Output keys
    --output=: Output format
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --resource-type=: Limit to resource type
    --selector=: The selector name to use
    --state=: Use the given directory as the source for json files to compare
    --vars=: Supply variables to the project
    -h, --help: show this help message and exit
    -m, --models*=: Specify the nodes to include
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
documentation:
    command: '[AI] `dbt list` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command is utilized to display a list of all available models and their corresponding statuses (such as success, failure, or building) within a given dbt project. It provides an overview of the current state of data transformations, assisting users in monitoring and managing their data pipelines effectively.'
    flag:
        exclude: |-
            [AI] `dbt list --exclude` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command lists all the models, artifacts, and snapshots in the dbt project, but excludes the ones that match the provided pattern.

            For instance, if you want to exclude a specific model named `sales_report`, you can use the following command:

            ```bash
            dbt list --exclude 'sales_report.*'
            ```

            This command will display the information for all models, artifacts, and snapshots except for those with names starting with "sales\_report". You can also specify multiple exclude patterns by separating them with commas.

            The `--exclude` flag is useful when you want to focus on a specific subset of your dbt project while ignoring others.
        help: '[AI] `dbt list --help` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command displays help information about the `list` function of dbt. Specifically, it shows the available options and their descriptions for listing artefacts (models, tests, snapshots, etc.) that match specified filters. The output includes details like name, status, and last executed time.'
        indirect-selection: '[AI] `dbt list --indirect-selection` is a command in dbt (data build tool), used to list references of selected models or artifacts in the dbt project. The `--indirect-selection` option allows listing dependencies of selected models, not just directly dependent ones. This means that if you select a model A, dbt will also show you models or artifacts that depend on the outputs of model A but are not directly connected to it. It''s helpful when you need to understand the entire lineage and impact of a change in your data pipeline.'
        models: '[AI] `dbt list --models` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This specific command lists all defined models in a given dbt project. Models are the fundamental building blocks in dbt, representing a unit of data transformation, such as a table or view in a relational database. By running `dbt list --models`, users can quickly identify and keep track of the available data transformations within their project.'
        output: '[AI] `dbt list --output` is a command in dbt (data build tool), used to list all available models and artifacts in a dbt project. The `--output` option specifies the output format, which can be set to `json`, `csv`, or `table`. The output can then be easily consumed by other tools for further processing or analysis.'
        output-keys: '[AI] `dbt list --output-keys` is a command used in dbt (data build tool) to list all the available models and artifacts in your dbt project, along with their respective keys. The `--output-keys` option specifies that only the keys should be displayed in the output. This can be useful for scripting or automation purposes where you only need to access the keys of the models or artifacts.'
        profile: '[AI] `dbt list --profile` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command lists all the models, profiles, and snapshots in your dbt project for the specified profile. Profiles define database connection configurations and other settings that can vary between environments such as development, staging, or production. By specifying a profile with `--profile` option, you can see the details of the artifacts (models, snapshots, etc.) that will be run in that specific environment.'
        project-dir: '[AI] `dbt list --project-dir` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command lists all the profiles, projects, and models present in the specified dbt project directory. The flag `--project-dir` specifies the path to the root directory of the dbt project containing `profiles.yml`, `dbt_projects.yml`, and other related files.'
        resource-type: '[AI] `dbt list --resource-type` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This command lists all resources of a specific type, such as models or tests, in a dbt project. The `--resource-type` flag filters the output to only display the information related to the specified resource type.'
        select: '[AI] `dbt list --select` is a command used in dbt (data build tool), an open-source data transformation and orchestration toolkit. This command is used to filter and display specific models or artifacts based on given selection criteria. The `--select` flag allows users to specify one or more columns from the dbt project manifest file (`.dbtmanifest.yml`) as the basis for the filtering. For instance, you can use it to list only the models belonging to a specific branch or tag, or models with a certain name pattern. It returns a tabular output showing the selected columns.'
        selector: '[AI] `dbt list --selector` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command lists all the models defined in your dbt project, but filters the output based on the provided selector argument. The selector is a valid Glob pattern that matches the file names of the models to be listed. For instance, `--selector "models/*_agg.dbt"` would list all models ending with "_agg.dbt" in the models directory.'
        state: '[AI] The `dbt list --state` command is used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This specific command lists all the models, along with their current state, in a dbt project. The states can be "built" for successfully built models, "building" for currently being built, "error" for failed builds, or "not built" for not yet executed models. The output provides valuable information to monitor the progress and status of data transformations within a dbt project.'
        target: '[AI] `dbt list --target` is a command in dbt (data build tool), used to list all models and their corresponding outputs, filtered by the provided target. Target is an optional argument that allows specifying a specific dbt project or a subset of models within a project for listing. The output displays each model''s name, key, and type along with its associated target name. This command is helpful when checking which models are linked to specific targets in your dbt project.'
        vars: '[AI] `dbt list --vars` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This specific command lists all defined variables across your dbt project. These variables can be set at different scopes, including the root project file, a specific model or transformation file, or as environment variables. By using `--vars` flag, you get a summary of these variables, their current values, and the scope in which they are defined.'
