# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: reconcile -f FILENAME
description: Reconciles rules for RBAC role, role binding, cluster role, and cluster role binding objects
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --remove-extra-permissions: If true, removes extra permissions added to roles
    --remove-extra-subjects: If true, removes extra subjects added to rolebindings
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to reconcile.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl auth reconcile` is a Kubernetes command used to synchronize RBAC (Role-Based Access Control) resources with the underlying infrastructure, such as a cloud provider or an external identity provider. This command triggers the Kubernetes authentication controller to ensure that the desired state of the authentication resources is met. Any differences between the actual and desired states are resolved through the reconciliation process. It is typically used when changes have been made to RBAC resources, such as creating or updating roles, role bindings, or clusters roles, to maintain a consistent security posture.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl auth reconcile --allow-missing-template-keys` is a command used with Kubernetes'' `kubectl` tool to synchronize RBAC (Role-Based Access Control) resources between your local configuration and the actual cluster. The `--allow-missing-template-keys` flag permits the reconciliation process to continue even if there are missing keys in the templates, meaning that the YAML files defining RBAC rules may not have complete mappings for all required fields. This flag can be helpful when dealing with incomplete or evolving RBAC configurations. However, using it comes with a risk of creating potentially inconsistent RBAC rules. It''s generally recommended to use this flag with caution and only when necessary.'
        dry-run: '[AI] `kubectl auth reconcile --dry-run` is a command used with the Kubernetes command-line tool, `kubectl`, to perform a dry run of reconciling RBAC (Role-Based Access Control) resources in a Kubernetes cluster. The `auth` subcommand is used for managing authentication and authorization, while `reconcile` initiates the process of synchronizing the cluster''s current state with the desired state, as defined in the configured ClusterRoleBindings and RoleBindings. The `--dry-run` flag instructs `kubectl` to display what would be done without actually applying the changes. This is useful for understanding the effects of a specific configuration change before making it persistent.'
        filename: '[AI] `kubectl auth reconcile` is a command used with the Kubernetes `kubectl` tool to synchronize RBAC (Role-Based Access Control) resources in a Kubernetes cluster. The `--filename` flag specifies a file containing custom RBAC rules that should be applied or updated in the cluster. When this command is run, Kubernetes will merge the contents of this file with existing RBAC rules, creating or updating as necessary to ensure the desired state is met.'
        kustomize: '[AI] `kubectl auth reconcile --kustomize` is a command used with Kubernetes'' `kubectl` tool to synchronize RBAC (Role-Based Access Control) resources between your local configuration and the actual cluster. The `--kustomize` flag specifies that you want to use Kustomize, a customization framework for Kubernetes manifests, to apply patches or differences between the desired and the actual state. So, in simpler terms, this command is used to ensure that the RBAC rules defined locally are up-to-date with the current cluster state.'
        output: '[AI] `kubectl auth reconcile --output` is a command used with Kubernetes'' `kubectl` tool to update RBAC (Role-Based Access Control) resources in a cluster based on the current context and configuration. The `--output` flag specifies the output format, typically `json` or `yaml`, for the result of the reconciliation process. This command synchronizes the local Kubernetes configuration with the actual cluster state, ensuring that RBAC rules are consistent between the client and the cluster.'
        recursive: '[AI] `kubectl auth reconcile --recursive` is a command used with Kubernetes'' `kubectl` tool to synchronize RBAC (Role-Based Access Control) resources in a cluster with the given authentication provider''s resources. The `--recursive` flag means that this operation will be performed not only for the top level objects but also recursively for their child objects as well. This ensures that all RBAC rules defined in the cluster and their dependencies are correctly configured, reducing the potential for access control issues.'
        remove-extra-permissions: |-
            [AI] `kubectl auth reconcile --remove-extra-permissions` is a command used with Kubernetes' `kubectl` tool to manage RBAC (Role-Based Access Control) permissions for users and clusters.

            This specific command is used to remove any extra or unnecessary permissions that may exist beyond what is defined in the Kubernetes manifest files. It helps maintain the principle of least privilege by ensuring that users and services have only the required access to run effectively, while minimizing potential security risks from unwarranted access.

            The reconcile action updates the actual RBAC rules based on the desired state specified in the Kubernetes manifests, and the `--remove-extra-permissions` flag instructs the command to also remove any excess permissions that do not match those defined in the manifests. This results in a more secure and streamlined access control environment within the Kubernetes cluster.
        remove-extra-subjects: '[AI] `kubectl auth reconcile --remove-extra-subjects` is a command used with Kubernetes'' `kubectl` tool for managing RBAC (Role-Based Access Control) resources. This command triggers the reconciliation of RBAC resources, specifically focusing on removing any extra subjects from them that are not needed anymore. Subjects in this context refer to entities that have permissions, such as users or service accounts. By running `--remove-extra-subjects`, you ensure your Kubernetes environment maintains a clean and secure access control configuration.'
        show-managed-fields: '[AI] `kubectl auth reconcile --show-managed-fields` is a command used with Kubernetes'' `kubectl` tool to update and synchronize RBAC (Role-Based Access Control) resources in a cluster based on the current configuration of Authenticators, Authorizers, and ClusterRoles. The `--show-managed-fields` flag displays the fields managed by the `kubectl auth` subcommand during reconciliation. This includes fields that were modified or created as a result of the reconcile process. This command ensures that the RBAC rules are consistent with the defined policies, and can be used to troubleshoot any potential discrepancies.'
        template: |-
            [AI] `kubectl auth reconcile --template` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. The `auth` subcommand is for managing RBAC resources in Kubernetes, and the `reconcile` action triggers a process to ensure that the actual cluster state matches the desired state defined in the Kubernetes configuration files.

            The `--template` flag is used with the `kubectl create` or `kubectl apply` commands to generate YAML templates based on existing resources, rather than applying or creating resources directly. In this context, the command generates a YAML template for RBAC resources that need reconciliation based on the current cluster state. The output of this command can be used to review the changes that would be made before actually applying them with `kubectl apply`.
