# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: future-incompatibilities
aliases:
    - future-incompat
description: Reports any crates which will eventually stop compiling
flags:
    --id=: identifier of the report generated by a Cargo command invocation
    -h, --help: Print help
    -p, --package=: Package to display a report for
documentation:
    command: '[AI] `cargo report future-incompatibilities` is a Cargo command used to check for dependencies in your project that may have upcoming incompatible changes. The output provides a list of packages and the specific version range where the incompatibility was detected, helping developers stay informed and prepare for potential breaking changes.'
    flag:
        help: |-
            [AI] The `--help` option in the command `cargo report future-incompatibilities` is used to display help information about this specific sub-command when using the Cargo build tool in Rust programming language.

            This command checks for potential incompatibilities between the current project dependencies and their future versions, based on the declared minimum required version in the `Cargo.toml` file. By appending `--help`, users will receive a detailed explanation of how to use this command, including any necessary flags or arguments, and what output they can expect.
        id: '[AI] The `--id` option used with the `cargo report future-incompatibilities` command in Cargo (Rust''s package manager) generates a list of crate dependencies that have potential incompatibilities with the specified target triple or Rust version. The output is displayed as a table, each row showing the dependency name, its current version, and the recommended minimum version to avoid future incompatibilities. By providing an `--id` (or --json) flag, you can save this report as a JSON file instead of displaying it on the terminal.'
        package: '[AI] The `--package` option in the Cargo report command generates a list of potential incompatibilities between the specified Rust package and its dependencies, based on their declared version requirements. These reports can help developers identify and address potential version conflicts or deprecated dependencies in their projects before they cause issues during build or runtime.'
