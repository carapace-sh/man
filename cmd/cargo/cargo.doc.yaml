# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: doc
aliases:
    - d
description: Build a package's documentation
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --bin*=: Document only the specified binary
    --bins: Document all binaries
    --document-private-items: Document private items
    --example*=: Document only the specified example
    --examples: Document all examples
    --exclude*=: Exclude packages from the build
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Document only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --no-deps: Don't build documentation for dependencies
    --open: Opens the docs in a browser after the operation
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Document all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package to document
    -q, --quiet: Do not print cargo log messages
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo doc` is a command used in Rust programming language projects built with Cargo build system. It generates and updates the documentation for the project using the Rustdoc tool, creating or updating HTML files in the `docs/src-html` directory, which can be viewed locally or published online.'
    flag:
        all: '[AI] `cargo doc --all` is a command used in Rust programming language''s build tool, Cargo. It generates or updates documentation for all the projects listed in the project''s `Cargo.toml` file. The `--all` flag tells Cargo to include documentation for dependencies as well. This results in a complete and up-to-date set of documentation being generated.'
        all-features: '[AI] `cargo doc --all-features` is a command used in Rust programming language''s build system, Cargo. This command generates and updates the documentation for all features of the current crate (Rust project). Features are optional components that can be enabled or disabled when using the crate. The documentation includes HTML files which can be viewed locally or deployed to various documentation sites.'
        bin: '[AI] `cargo doc --bin` is a command used in Rust programming language''s Cargo build tool. This command generates and builds the documentation for the current project using the `--bin` (binary) target. The resulting documentation will include information about the specified binary executable, making it easily accessible to users or developers.'
        bins: '[AI] `cargo doc --bins` is a command used in Rust programming language''s build system, Cargo. This command generates and updates the documentation for all binary packages (executables) defined in your project. The flag `--bins` tells Cargo to include the documentation for those binaries specifically. It writes the generated HTML files into the `target/doc` directory, which can then be served or opened locally using a web browser for viewing.'
        document-private-items: '[AI] `cargo doc` is a command-line tool for generating documentation for Rust projects using the `doc` attribute comments in the source code. The `--document-private-items` flag extends this functionality by including documentation for private items, which are not normally exposed outside of the local project. This allows for more comprehensive and accurate documentation generation, especially for libraries or larger projects with complex internal structures.'
        example: '[AI] `cargo doc --example` is a command used in Rust programming language''s package manager Cargo. This command generates documentation for a specific example within a library project, assuming that example code comes with its own documentation (marked with `//!` comments in Rust). The generated output will be saved as HTML files under the `docs/examples` directory of your project.'
        examples: '[AI] `cargo doc --examples` is a command used in Rust programming language''s package manager Cargo. This command generates the documentation for all examples present in a project, and saves it into the `target/docs` directory. It uses the Markdown format to document each example with its usage instructions and expected output. These generated documents can be built into HTML or PDF formats using other tools if desired.'
        exclude: '[AI] `cargo doc` is a Rust language command used to generate documentation for a project. The `--exclude` flag is an option that allows you to exclude certain crates or directories from being documented. By specifying a list of paths separated by commas, only the documentation for the excluded items will not be generated. This can help keep the generated documentation more concise and focused on the main project.'
        features: |-
            [AI] `cargo doc --features` is a command used in Rust programming language's build system, Cargo. This command generates HTML documentation for the current crate (project) and includes documentation for enabled feature flags.

            Features are optional components of a Rust crate that can be enabled or disabled during compilation. The `--features` flag passed to `cargo doc` enables the generation of documentation for all the enabled features in the project, in addition to the main documentation. This allows developers to have well-documented APIs even for secondary functionality within their crates.
        help: '[AI] `cargo doc --help` is a command used in Rust programming language''s Cargo build tool. This command generates and displays documentation for your Rust project in various formats like HTML, PDF, or EPUB. The `--help` flag is added to provide information about how to use this specific command effectively. It will display detailed usage instructions, available options, and examples to help you generate and navigate your project''s documentation.'
        ignore-rust-version: '[AI] The `cargo doc` command is a utility provided by Rust''s package manager Cargo for generating documentation for Rust projects. The `--ignore-rust-version` flag is an option that can be passed to this command to instruct it not to check the version of the Rust compiler (rustc) being used against the specified version in the project''s Cargo.toml file. In cases where using an older or newer rustc than the one specified in the manifest does not cause any issues, this flag can be useful to avoid errors caused by version checks during documentation generation.'
        jobs: '[AI] `cargo doc --jobs` is a command used in Rust programming language''s package manager, Cargo. This command generates documentation for a project using the built-in Markdown renderer and runs all tests in parallel using multiple jobs to speed up the process. The number of jobs used is determined by the system''s available CPU cores or can be explicitly set with an argument.'
        keep-going: '[AI] `cargo doc --keep-going` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for the project using the `doc` target. The `--keep-going` flag keeps the build process running even if an error occurs during the generation of some parts of the documentation. Instead of halting the entire build process, it continues generating documentation for other parts. This can be useful when dealing with large projects where not all documentation may be generated successfully at once.'
        lib: '[AI] `cargo doc --lib` is a command used in Rust programming language''s Cargo build system. This command generates documentation for a library project, instead of an executable one. The documentation is written using Rust''s built-in markdown syntax and is stored in the `docs` directory within the project. The generated HTML files can be opened in a web browser to view the documentation.'
        manifest-path: '[AI] `cargo doc` is a command in Rust programming language''s Cargo build tool. The `--manifest-path` option specifies the path to the package manifest file (Cargo.toml) when generating documentation for that package using the `doc` target. It produces HTML files containing API documentation, tests coverage reports, and other project-related information.'
        message-format: |-
            [AI] `cargo doc` is a Rust package manager command that generates documentation for your Rust project. The `--message-format` option specifies how error and warning messages should be formatted when building the documentation.

            There are three supported message formats: "plain", "json", and "yaml". Plain format displays messages directly in the terminal as text. JSON and YAML formats output messages as structured data that can be easily parsed by scripts or other tools for further processing.

            So, `cargo doc --message-format json` generates documentation and outputs error/warning messages in JSON format, while `cargo doc --message-format yaml` does the same but uses YAML format instead.
        no-default-features: '[AI] `cargo doc --no-default-features` is a command used in Rust programming language''s build system, Cargo. This command generates HTML documentation for a Rust library or executable using the `doc` target. The `--no-default-features` flag disables the inclusion of default features when generating the documentation. This can be useful when you have multiple features in your crate and want to generate documentation only for specific ones.'
        no-deps: '[AI] `cargo doc --no-deps` is a command used in Rust programming language''s build system, Cargo. This command generates the documentation for a specific Crate (Rust library or executable) without downloading and building its dependencies. The `--no-deps` flag ensures that only the local project''s documentation is generated, making it faster and reducing network usage when working on large projects with many interdependent components.'
        open: '[AI] `cargo doc --open` is a command used in Rust programming language''s build tool, Cargo. It generates or updates the documentation for your project using the Rust Documentation system (Rustdoc), and then opens the generated HTML documentation in your default web browser. This allows you to easily access and explore the documentation for your project.'
        package: '[AI] `cargo doc --package <package-name>` is a command used in Rust programming language''s build system, Cargo. This command generates and updates the documentation for a specific package in the local documentation registry. The `<package-name>` argument specifies the name of the package whose documentation will be generated or updated.'
        profile: '[AI] `cargo doc --profile` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for a specific Rust profile. Profiles allow configuring the build process differently for various targets or configurations. By specifying `--profile`, you can generate documentation for the selected profile only. The resulting HTML files will be saved in the `docs/target/<profile>/doc` directory.'
        quiet: '[AI] `cargo doc --quiet` is a command used in Rust programming language''s build tool, Cargo. This command generates and updates the documentation for a Rust project using the built-in documentator, `rustdoc`. The `--quiet` flag is used to suppress all output except errors and warnings during the documentation build process. So, only errors and warnings will be shown in the terminal after running this command.'
        release: '[AI] `cargo doc --release` is a command used in Rust programming language''s build system, Cargo. This command generates the documentation for a release build of your Rust project. The documentation is generated using the `doc` target, and the `--release` flag ensures that the documentation is built from the optimized release version of the code, rather than the debug version.'
        target: '[AI] `cargo doc --target` is a command used in Rust programming language''s package manager, Cargo. This command generates and updates documentation for a specific target within a project. By default, all targets are built, but using `--target` option allows you to build the documentation only for the specified target.'
        target-dir: '[AI] `cargo doc --target-dir` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for your project using the Rust standard library documentation and the comments in your source code. The `--target-dir` option specifies the directory where the generated HTML documentation files will be placed.'
        timings: '[AI] `cargo doc --timings` is a command used in Rust programming language''s Cargo build tool to generate detailed documentation for a project, with an emphasis on timing information. This command generates both HTML and JSON outputs where the HTML provides readable documentation, while the JSON data is used to analyze the generation process in terms of elapsed times for each stage, allowing developers to understand the performance characteristics of their documentation build system.'
        unit-graph: '[AI] `cargo doc --unit-graph` is a command used in Rust programming language''s build system, Cargo. This command generates an interactive graph representation of the dependency relationships among Crates (Rust libraries or executables) in a project. The resulting graph can be viewed using a web browser and helps in understanding the composition of the project in terms of its dependencies.'
        workspace: '[AI] `cargo doc --workspace` is a command used in Rust programming language''s build system, Cargo. It generates HTML documentation for all projects in the current workspace defined in the `Cargo.toml` file using the `docs` target. This can be useful to create a comprehensive documentation set that covers multiple related crates.'
