# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: assemble
description: Assemble and build Flutter resources
flags:
    --DartDefines*=: Additional key-value pairs that will be available as constants.
    --build-inputs=: A file path where a newline-separated file containing all inputs used will be written after a build.
    --build-outputs=: A file path where a newline-separated file containing all outputs created will be written after a build.
    --depfile=: A file path where a depfile will be written.
    --performance-measurement-file=: Output individual target performance to a JSON file.
    --resource-pool-size=: The maximum number of concurrent tasks the build system will run.
    -d, --define=: Allows passing configuration to a target, as in "--define=target=key=value".
    -h, --help: Print this usage information.
    -i, --input=: Allows passing additional inputs with "--input=key=value".
    -o, --output=: A directory where output files will be written.
documentation:
    command: '[AI] `flutter assemble` is a command used in Flutter development to build an executable application for a specific target platform (iOS, Android, web, etc.) from the project''s `build.gradle` or `pubspec.yaml` files. It compiles the Dart code, runs tests if specified, generates artifacts like APK or IPA files, and optimizes the app for deployment.'
    flag:
        DartDefines: '[AI] `flutter assemble` is a command-line tool used for building and producing a release-ready application from a Flutter project. The `--dart-defines` option is a flag that allows passing Dart compile-time definitions to the Dart VM during the build process. These definitions can be used to override constants or symbols in the code, making it useful for customizing builds based on specific configurations or environments. For instance, you might define an API key as a constant and pass it differently for development, staging, and production builds using this flag.'
        build-inputs: '[AI] The `flutter assemble --build-inputs` command is used in Flutter development to build and generate native artifacts or binaries for specified targets (like apk for Android or ipa for iOS) from the existing `built_value`, `gen_l10n`, and other `.g` files that have been generated during development. It triggers the Flutter''s `assemble` tool to perform various tasks such as code optimization, linking native libraries, creating resources directories, and generating the actual APK/IPA file for publishing or installation on specific devices.'
        build-outputs: '[AI] `flutter assemble --build-outputs` is a command used in Flutter development to build an application and generate multiple output files instead of just one apk or app bundle. These outputs can be specified using the `--build-output` option followed by the desired file path for each type, such as `--build-output android/app/build/outputs/apk/release/app-release.apk` or `--build-output ios/build/Build/Intermediates/AppStoreBuild/MyApp.app`. This command is useful when working with continuous integration systems or when multiple outputs are required for different configurations.'
        define: '[AI] `flutter assemble` is a command-line tool for compiling and building Flutter applications for various platforms. The `--define` option allows you to define custom named constants that can be used in your Dart code during the build process. These constants are then available at compile time, enabling conditional compilation or other use cases. For example, `--define=MY_CONSTANT=value` sets the value of `MY_CONSTANT` constant to `value`. This can be useful when creating multiple builds of your app with different configurations.'
        depfile: '[AI] The `flutter assemble` command is a Flutter development tool used to build and generate native code from a Flutter project for Android or iOS platforms. The `--depfile` option is an argument passed with this command which instructs the tool to output a dependency file. This file contains a list of all the packages (along with their versions) that are required by the application, making it easier to manage dependencies and keep track of version inconsistencies.'
        help: '[AI] `flutter assemble --help` is a command used in Flutter, a mobile app development framework. This command is run in the terminal or command prompt to display detailed help information about the `flutter assemble` tool. The `--help` flag requests that the command output a usage message and available options for `flutter assemble`. It provides information on how to use the tool to build and compile an existing Flutter project into executable code for specific platforms like Android or iOS.'
        input: '[AI] The `flutter assemble` command is used to build and create an executable or bundle of a Flutter application for specific platforms like Android, iOS, or web. The option `--input <project-directory>` specifies the path to the root directory of the Flutter project to be built. This allows you to build multiple projects without having to change your working directory. For example, running `flutter assemble --input /path/to/project` will create an executable or bundle for that project.'
        output: '[AI] `flutter assemble --output` is a command used in Flutter development for building and generating an armored (optimized) APK or AOT (Ahead-of-Time) compiled iOS app from the source code. The `--output` option specifies the output file path where the built artifact will be saved upon completion.'
        performance-measurement-file: '[AI] The `--performance-measurement-file` flag in Flutter''s `assemble` command is used to generate a performance measurement report during the app build process. This report provides detailed information about the performance characteristics of the app, such as frame rates, input handling latency, and rendering statistics. It helps developers identify and optimize areas of their app that require improvement for better user experience. The generated report is saved in a specified file, allowing for further analysis using profiling tools.'
        resource-pool-size: '[AI] The `--resource-pool-size` option in the Flutter `assemble` command is used to configure the size of the resource pool for the compilation process. A larger pool size allows more resources (images, fonts, etc.) to be processed concurrently, potentially speeding up the build time. However, increasing the pool size also requires more memory, so there is a trade-off between faster builds and higher memory usage.'
