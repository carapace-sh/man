# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: func
description: output coverage profile information for each function
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -pkg=: Restrict output to package(s) matching specified package pattern
    -v=: Verbose trace output level
documentation:
    command: '[AI] The `go tool cov` command with the `func` argument generates a report of the executed functions and branches during Go test execution. It reads the test result files (`.cover` or `*.out`) produced by the `go test` command and outputs human-readable text and/or XML format data representing the test coverage information for each function and branch in the source code.'
    flag:
        cpuprofile: '[AI] `go-tool-cov` is a command-line tool in Go language for handling test coverage data. The specific command `go-tool-cov func -cpuprofile <profile_file>` processes a CPU profiling output file (`<profile_file>`) generated during Go program execution with the `-cpuprofile` flag, and generates a coverage profile in the `.cover` format for the functions. This output can be further processed by other tools to analyze the test coverage of the code at the function level.'
        hw: |-
            [AI] `go-tool-cov` is a Go tool used to compute and display test coverage information for Go source files. The command `func -hw` is used to generate an HTML report from the collected coverage data. Here's a brief explanation of each part:

            * `go-tool-cov`: The name of the Go tool that computes and displays test coverage information.
            * `func`: The subcommand within the `go-tool-cov` tool used to process coverage data.
            * `-hw`: Options passed to the `func` command. In this case, `-hw` stands for "HTML report," which specifies that the output should be in HTML format.
        i: '[AI] The `go-tool-cov` is a Go tool used for computing and visualizing test coverage. The command `go-tool-cov data func -i <input>` generates functional test coverage data from the specified input Go source files (`.go`). The output is written to standard output in a tabular format, displaying the coverage information for each function and line within those functions.'
        memprofile: '[AI] The `go-tool-covdata func -memprofile` command is a part of the Go programming language''s `gcov` tool. This specific command generates memory profile data in the `.pb` format using the `func` profiling method during program execution. Memory profiles help analyze memory usage patterns for individual functions or Goroutines within a Go program.'
        memprofilerate: '[AI] The `go-tool-cov` is a Go tool used to compute and show code coverage information for Go source files. The specific command `func -memprofrate` generates memory profiles and computes function-level memory usage statistics at a specified sampling rate (specified by the flag `-memprofilerate`) for each function during the execution of the program. The results are saved in a file with the `.prof` extension, which can be visualized using various profiling tools like Google''s `pprof`. This information helps developers identify memory usage hotspots and optimize their code accordingly.'
        pkg: '[AI] The `go-tool-cov` is a command-line tool in Go programming language used to generate and analyze test coverage data. The specific command `func -pkg <package-name>` asks the tool to generate the test coverage data for the specified Go package only. This information can be later analyzed using other tools or visualizations to understand which parts of the codebase have been tested extensively, and which areas require further testing attention.'
        v: '[AI] `go-tool-cov` is a Go tool used for computing and visualizing test coverage data. The command `go-tool-cov data func -v` generates and prints out the test coverage data for the "func" package or source files under it in verbose mode, which provides detailed information about each covered line or branch during testing.'
