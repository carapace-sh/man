# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: go-tool-asm
description: go assembler
flags:
    -D*=: predefined symbol with optional simple value -D=identifier=value
    -I*=: include directory
    -compiling-runtime: source to be compiled is part of the Go runtime
    -d=: enable debugging settings
    -debug: dump instructions as they are parsed
    -dynlink: support references to Go symbols defined in other shared libraries
    -gensymabis: write symbol ABI information to output file, don't assemble
    -linkshared: generate code that will be linked against Go shared libraries
    -o=: output file
    -p=: set expected package import to path
    -shared: generate code that can be linked into a shared library
    -spectre=: enable spectre mitigations in list
    -trimpath=: remove prefix from recorded source file paths
documentation:
    command: |-
        [AI] `go-tool-asm` is a command-line tool in Go language's standard library, which stands for "assembler" and is located under the `$GOPATH/bin/asm` path. It's used to assemble x86 or x86_64 assembly code into machine code files. To use it, create an assembly file (with a `.s` extension) with the desired instructions, then run `asm` command followed by the source file name and the output file name. For example:

        ```bash
        $ go build -o asm assembler.go
        $ . /path/to/go/prefix/bin
        $ asm input.s output.o
        ```

        This would compile the `assembler.go` package containing the `asm` command and use it to assemble `input.s` into an object file named `output.o`.
    flag:
        D: '[AI] `go-tool-asm -D` is a command used in Go programming language to assemble and link source files written in the assembly language (Suffix: .s or .S) with Go code. The `-D` flag enables the generation of debug information during the assembly process, which can be useful for debugging the assembly code in a Go development environment like Delve.'
        I: '[AI] `go-tool-asm -I` is a command used in Go programming language to assemble source files written in Assembly language using the Go toolchain. The `-I` option specifies the list of import paths to be included during the compilation process. In other words, it tells the assembler where to look for header files or external assembly files while assembling the given file(s).'
        compiling-runtime: '[AI] The `go-tool-asm -compiling-runtime` command is a part of Google''s Go programming language toolchain. It''s used to assemble and link the Go runtime library written in assembly language. This process generates the native machine code required for executing Go programs with the specific OS/Architecture combination.'
        d: '[AI] `go-tool-asm -d` is a command used in Go programming language for assembling and linking Assembly source files. The `-d` flag stands for "dump" or "decremental assemble and dump," which means the tool will assemble each source file one at a time, printing out the assembled machine code for each file. This is useful for debugging and understanding the low-level details of your Go program''s assembly code.'
        debug: '[AI] `go-tool-asm -debug` is a command-line tool in Go programming language''s standard library (located in `$GOPATH/bin/asm`) that assembles and links source files written in inline assembly or assembly language into object files. The `-debug` flag enables debug information to be included in the generated object files, making it easier for debuggers like Delve (dpkg) to attach and provide more detailed information during debugging.'
        dynlink: '[AI] `go-tool-asm -dynlink` is a command-line tool from the Go programming language''s standard library. It assembles and links Go source files into machine code with dynamic linking enabled. Dynamic linking allows loading required shared libraries at runtime instead of statically linking them during compilation, reducing binary size and improving build times for large projects.'
        gensymabis: '[AI] `go-tool-asm -gensymabi` is a command used in Go programming language for generating Go bindings for C or C++ shared libraries or static libraries. The `-gensymabi` flag specifically generates the Go bindings with gCno files, which include Go symbols and C/C++ function prototypes. This allows Go programs to call functions in the native library.'
        linkshared: '[AI] `go-tool-asm` is a command-line tool in the Go programming language used for assembling source code written in inline assembly. The `-linkshared` flag is an option passed to this command that specifies linking shared libraries instead of static libraries during the linking stage of the build process. This results in creating a dynamic link library file, which can be loaded and linked at runtime by other programs or Go packages. In other words, it produces a library that can be used across multiple executables or processes, reducing code duplication and improving resource efficiency.'
        o: '[AI] `go-tool-asm -o` is a command used in the Go programming language to assemble source files written in Go''s assembly language (SSA) into machine code. The `go-tool-asm` is part of the Go toolchain, and the `-o` flag specifies the output file name for the generated machine code. For example, `go-tool-asm -o output.o input.s` would assemble `input.s` into `output.o`.'
        p: '[AI] `go-tool-asm -p` is a command-line tool provided by Go language for assembling and linking machine code and assembly files. The `-p` flag is used specifically for printing the assembler output to standard output instead of writing it to an output file. This is useful for debugging and inspection purposes during development.'
        shared: '[AI] `go-tool-asm -shared` is a command provided by the Go programming language''s assembler tool (asm). It compiles and generates a shared library file instead of a standalone executable or object file. In other words, it creates an assembly file that can be linked with other programs to share common code and functions among multiple applications. This improves performance and reduces memory usage by avoiding redundant code.'
        spectre: '[AI] `go-tool-asm -spectre` is a command-line tool used in the Go programming language ecosystem. It''s specifically part of the `go/asm` package, which provides low-level assembly code integration into Go programs. The `-spectre` flag is an option for this command that activates the Spectre ISA extension. Spectre is a set of extensions to x86 assembly language for better performance and efficiency in data center workloads. By using `go-tool-asm -spectre`, you can write Go code with Spectre extensions and compile it into assembly, allowing the resulting binary to take advantage of these performance enhancements.'
        trimpath: '[AI] `go-tool-asm` is a command-line tool from Go language''s standard library used for assembling source code written in assembler (S and ASM files). The `-trimpath` flag is an optional argument that instructs the assembler to remove the build or import paths from the output object file names. This means that the final output files will have the same base names as their corresponding source files, without any leading directories.'
