# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: vendor-gems
description: Install and commit Homebrew's vendored gems
group: developer
flags:
    --debug: Display any debugging information.
    --help: Show this message.
    --no-commit: Do not generate a new commit upon completion.
    --quiet: Make some output more quiet.
    --update: Update the specified list of vendored gems to the latest version.
    --verbose: Make some output more verbose.
documentation:
    command: '[AI] `brew vendor-gems` is a command used in Homebrew, a popular package manager for macOS, to manage external gems required by a Ruby application but not yet installed as Homebrew taps or formulae. This command fetches the specified gems from their sources and places them into the `vendor/bundle` directory of your Ruby project, allowing you to bypass dependencies managed by Bundler, if desired. The syntax is usually `brew vendor-gems path/to/Gemfile`.'
    flag:
        debug: '[AI] `brew vendor-gems --debug` is a command used with Homebrew, a popular package manager for macOS. This command downloads and installs specified Ruby gems locally instead of relying on the system''s RubyGem installation. The `--debug` flag enables verbose output to help diagnose any issues that may arise during the process.'
        help: |-
            [AI] `brew vendor-gems` is a command provided by Homebrew, a popular package manager for macOS. This command helps manage dependencies of Ruby gems, which are extensions to the Ruby programming language.

            The `--help` option that follows the command displays detailed usage and available options for the `vendor-gems` subcommand. It provides information on how to install or update local gem versions to avoid conflicts with system gems, manage a Gemfile or Gemfile.lock, and other related tasks.
        no-commit: |-
            [AI] The `brew vendor-gems` command is a feature of Homebrew, a popular package manager for macOS. It downloads and installs Ruby gems from sources other than RubyGem.org, which can help ensure that specific versions of gems are used in projects.

            The `--no-commit` flag modifies the default behavior of this command. By default, `brew vendor-gems` adds the installed gems to a .gitignore file and commits them to the current Git repository. With the `--no-commit` flag, these actions are not performed, allowing developers to manage their Git history separately from their installed gems. This can be useful for keeping a clean Git record or when working on projects with specific gem requirements that may differ from those in the main repository.
        quiet: '[AI] `brew vendor-gems` is a command provided by Homebrew, a popular package manager for macOS, used to install and manage software packages. The `--quiet` option that follows this command suppresses the output of informational messages during the execution of the command. Therefore, `brew vendor-gems --quiet` installs the required gems (Ruby libraries) using Homebrew''s gem server without displaying progress or status updates.'
        update: '[AI] `brew vendor-gems --update` is a command used with Homebrew, a popular package manager for macOS. This command retrieves and updates the Ruby gems listed in the project''s Gemfile or Gemfile.lock, storing them in the `vendor/bundle` directory instead of installing them globally via RubyGems. This local installation is often preferred for managing dependencies in a consistent way across multiple machines or environments.'
        verbose: |-
            [AI] `brew vendor-gems` is a command used with Homebrew, a popular package manager for macOS, to install missing gems (Ruby libraries) locally instead of downloading them from the internet each time a Ruby application is built or updated.

            The `--verbose` flag increases the amount of output that `brew vendor-gems` provides, giving detailed information about each step of the process, including which gems are being installed, their versions, and any dependencies or errors encountered during installation. It helps in troubleshooting and understanding the progress of the command execution.
