# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
aliases:
    - run-script
description: Runs a defined package script
group: run
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --if-present: Avoid exiting with a non-zero exit code when the script is undefined
    --loglevel=: What level of logs to report
    --no-bail: The command will exit with a 0 exit code even if the script fails
    --no-color: Controls colors in the output
    --parallel: Completely disregard concurrency and topological sorting
    --report-summary: Save the execution results of every package to "pnpm-exec-summary.json"
    --resume-from: Command executed from given package
    --sequential: Run the specified scripts one by one
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests.
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -h, --help: Output usage information
    -r, --recursive: Run the defined package script in every package found in subdirectories
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm run` is a command used in the PnPM package manager for running scripts defined in a `package.json` file under the `scripts` key. It locates and manages the required dependencies automatically, then executes the specified script with their outputs collected and passed on as arguments to the next script if there''s a dependency between them.'
    flag:
        aggregate-output: '[AI] `pnpm run --aggregate-output` is a command used with PnPM, a package manager for JavaScript projects. This command generates an aggregate output file that summarizes the outputs of multiple build scripts in a single project or multiple projects, making it easier to consume the results in continuous integration systems or other automation tools. It gathers the standard output and error streams from each build script execution and writes them into the specified output file.'
        changed-files-ignore-pattern: '[AI] `pnpm run --changed-files-ignore-pattern` is a command used with PnPM, a package manager for Node.js projects. This command modifies the behavior of automated tasks, such as testing or linting, by specifying a list of ignore patterns for files that are marked as "unchanged" during the detection of file modifications. This can help exclude large, static files or directories from unnecessary rebuilds or checks, improving build performance and reducing redundant processes.'
        color: '[AI] `pnpm run` is a command used with the Package Manager for Node.js projects called pnpm. The `--color` flag enables colored output in the terminal when running scripts defined in a package.json or pnmfile. This makes it easier to distinguish between different types of messages and follow the progress of the script execution.'
        dir: '[AI] `pnpm run --dir` is a command used with PnPM, a package manager for Node.js projects. It specifies that a given script (not explicitly mentioned in the command) should be executed in the context of a specific project directory within a multi-project workspace managed by PnPM. For example, `pnpm run --dir my-project build` would execute the `build` script inside the `my-project` subdirectory.'
        filter: '[AI] `pnpm run --filter` is a command used with pnpm, a package manager for Node.js projects. This command allows running a script only in specific packages within a multi-package project. The `--filter` option takes a regular expression pattern as an argument to filter the packages based on their names. For instance, `pnpm run --filter="my-pkg"` would run the specified script only for the package named "my-pkg". Multiple filters can be used by separating them with commas (e.g., `pnpm run --filter="my-pkg1, my-pkg2"`).'
        filter-prod: '[AI] `pnpm run --filter-prod` is a command used with the package manager, pnpm. This command runs a script marked with the "production" tag in the package.json file. It filters the scripts to only run those designated for production use, which can help ensure that development-only scripts are not accidentally executed in a production environment.'
        help: '[AI] `pnpm run --help` is a command used with PnPM, a package manager for JavaScript projects. This command displays detailed help information about the `run` feature of PnPM. It lists all available scripts defined in the `package.json` file and provides usage information for each one, including examples and optional arguments. It helps users understand what each script does and how to use it properly within their project.'
        if-present: '[AI] `pnpm run --if-present` is a command used with PnPM, a package manager for JavaScript projects. This command tells PnPM to only run a specified script if it already exists in the project''s `package.json` files. If no script with the given name exists, PnPM will not run anything. It helps prevent unnecessary script executions and keeps the build process efficient.'
        loglevel: |-
            [AI] `pnpm run` is a command used with the package manager PNPM to execute a script defined in a `package.json` or `pnpm-lock.yaml` file. The `--loglevel` flag is an option that allows controlling the verbosity of the output logs generated during the execution of the script.

            Higher log levels (e.g., `info`, `warn`, `error`, and `debug`) will display more detailed information than lower log levels (e.g., `silent` or `none`). By default, PNPM runs with minimal logging output at the 'info' level.

            For example, `pnpm run build --loglevel warn` would only display warnings and errors while suppressing informational messages during the build process. Conversely, using `--loglevel debug` would provide detailed debug information for a more comprehensive understanding of the execution flow.
        no-bail: '[AI] `pnpm run --no-bail` is a command used with PnPM, a package manager for JavaScript projects. The `--no-bail` option instructs PnPM not to stop the build process if it encounters an error during the installation or running of dependencies. Instead, it continues to run all subsequent commands in the `pnpm-run.js` file until completion. This can be useful when dealing with complex projects where errors may occur during the build process but do not prevent the final output from being generated.'
        no-color: '[AI] `pnpm run --no-color` is a command used with the package manager, pnpm. It runs a script specified in a package''s `package.json` file without displaying colors in the terminal output. This can be useful for users who prefer a plain text console or when working in an environment where colored output may not be supported.'
        parallel: '[AI] `pnpm run --parallel` is a command used with the package manager PNPM (Parallel NPM). It runs multiple tasks in parallel using the available CPU cores, which can significantly reduce build times for projects that involve multiple concurrent processes, such as compiling TypeScript files, running tests, or building assets. This flag enables faster execution of these tasks by maximizing the utilization of system resources.'
        recursive: '[AI] `pnpm run --recursive` is a command used with PnPM, a package manager for Node.js projects. The `--recursive` option tells PnPM to run a specified command not only in the current project but also in all of its sub-dependencies recursively. This means that if there are other packages within your project that also use PnPM and have their own dependencies, those dependencies will be installed and built as well when you run `pnpm run --recursive <command>`. It is useful for projects with multiple packages or monorepos where you need to perform a common task across all the projects.'
        report-summary: '[AI] `pnpm run --report-summary` is a command used with PnPM, a package manager for Node.js projects. This command generates a summary report of all tests run in the current project using the configured test runners or test scripts in package.json files. It provides an overview of tests executed, tests passed, tests failed, and any test coverage data if enabled. The output is typically displayed in the terminal and can be further processed for more detailed reporting using other tools.'
        resume-from: |-
            [AI] `pnpm run --resume-from` is a command used with PnPM, a package manager for Node.js projects. It allows resuming a previously failed build or install process. When you encounter an error during the execution of a `pnpm run` command and the process terminates before it finishes, you can use `--resume-from` to pick up where the last failure occurred.

            The command takes an optional argument specifying the name of the task that failed or the last successful task as a reference point. For instance, `pnpm run build --resume-from=lint` will resume the build process from where the linting task left off. If no argument is provided, PnPM will attempt to continue from the most recent failure.

            This command makes it easier to recover from errors and maintain a consistent build environment in your Node.js projects using PnPM as your package manager.
        sequential: '[AI] `pnpm run --sequential` is a command used with the package manager, pnpm. It runs all the scripts in a package''s `package.json` or `pnpm-lock.yaml` file in order from top to bottom under the "scripts" section and waits for each script to finish before starting the next one. The "--sequential" flag ensures that only one script runs at a time, making it useful when dealing with scripts that have side effects on shared data or the environment.'
        stream: '[AI] `pnpm run --stream` is a command used with npm packages managed by pnpm, a package manager that offers parallel installs and faster build times. The `--stream` option enables streaming build output, allowing data to be piped from the build process directly to another command or file without waiting for the build to complete. This can improve workflow efficiency in continuous integration environments or large-scale projects.'
        test-pattern: '[AI] `pnpm run --test-pattern` is a command used with PnPM, a package manager for Node.js projects. This command executes tests matching the specified test pattern(s) in your project. It searches for files or directories with extensions and names that match the given pattern(s), runs the tests using the configured testing framework (like Jest or Mocha), and reports the results. This helps to ensure code quality by running automated tests during development or continuous integration processes.'
        use-stderr: '[AI] `pnpm run --use-stderr` is a command used with pnpm, a package manager for Node.js projects. This command instructs pnpm to write error messages to the standard error stream (stderr), instead of mixing them with normal output on the standard output stream (stdout). This can be useful when working with scripts or continuous integration systems where clear distinction between errors and regular output is desired.'
        workspace-root: '[AI] `pnpm run --workspace-root` is a command used with pnpm, a package manager for JavaScript projects. This command specifies the root directory of a multi-packaged project when running a script across all packages. In other words, it allows you to execute a command or script across multiple packages in a workspace while keeping the file resolution local to each package.'
