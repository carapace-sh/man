# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: export
description: Update the underlying Git repo with changes made in the repo
flags:
    -h, --help: Print help (see more with '--help')
documentation:
    command: |-
        [AI] The `jj git export` command is not a standard Git command. It seems to be a combination of two different commands.

        `jj` is likely referring to the Jedi-Vim plugin for Vim or other text editors, which provides various Git related functions. However, there doesn't appear to be a specific `git export` function defined in the plugin documentation.

        The standard `git export` command is used to export specific files from a Git repository as an archive (zip or tarball) or in a specific format like text or CSV. It does not take any arguments directly within the command, instead you need to specify the files and format using command-line options or scripting.

        For example, to create a zip file named 'exported_files.zip' with the contents of 'file1.txt' and 'file2.txt', use:

        ```bash
        git archive --format=zip HEAD file1.txt file2.txt > exported_files.zip
        ```

        So, without more context or additional information about 'jj git export', it is difficult to provide a definitive explanation.
    flag:
        help: |-
            [AI] The `jj git export --help` command is used in Jira and Git integration tools like Jira Webhooks or Jira Software's Git SCM connector to view the available options for the `git export` command. This command is not a standalone Git command but is specific to these Jira tools.

            The primary purpose of using `jj git export` is to generate an artifact, such as a JSON or XML file, from Git data like commits, branches, or tags. The output can be used for various purposes, including automating Jira workflows and integrations with other systems.

            The `--help` option provides detailed information about the available subcommands, their arguments, and usage examples for this command in your current environment. It helps users understand how to effectively utilize the tool to achieve their desired outcomes.
