# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: codecov
description: codecov uploader
flags:
    --CL: Display a link for the current changelog
    --changelog: Display a link for the current changelog
    --version: Show version number
    -B, --branch=: Specify the branch manually
    -C, --sha=: Specify the commit SHA mannually
    -F, --flags: Flag the upload to group coverage metrics
    -N, --parent=: The commit SHA of the parent for which you are uploading coverage.
    -P, --pr=: Specify the pull request number mannually
    -Q, --source=: Used internally by Codecov, this argument helps track wrappers of the uploader
    -R, --rootDir=: Specify the project root directory when not in a git repo
    -T, --tag=: Specify the git tag
    -X, --feature=: Toggle functionalities
    -Z, --nonZero: Should errors exit with a non-zero
    -b, --build=: Specify the build number manually
    -c, --clean: Move discovered coverage reports to the trash
    -d, --dryRun: Don't upload files to Codecov
    -e, --env=: Specify environment variables to be included with this build.
    -f, --file=: Target file(s) to upload
    -h, --help: Show help
    -n, --name=: Custom defined name of the upload.
    -r, --slug=: Specify the slug manually (Enterprise use)
    -s, --dir=: Directory to search for coverage reports.
    -t, --token=: Codecov upload token
    -u, --url=: Change the upload host (Enterprise use)
    -v, --verbose: Run with verbose logging
documentation:
    command: '[AI] `codecov` is a popular open-source tool used to generate and visualize test coverage reports for various programming languages, such as JavaScript, Python, Ruby, and more. It gathers data from unit testing frameworks like Jest, Mocha, or pytest, and produces easy-to-understand HTML and interactive code map coverage reports that help developers identify untested lines and areas of their codebase. It can be integrated with continuous integration systems for automated testing and reporting.'
    flag:
        CL: '[AI] `codecov --CL` is a command used in software testing to generate and view test coverage reports for Node.js projects using the CodeCoverage (codecov) tool. The `--CL` option stands for "continuous integration," which indicates that the command is designed for use with continuous integration systems, such as Travis CI or CircleCI, to display the test coverage results in real-time during the build process.'
        branch: '[AI] `codecov --branch` is a command used with CodeCoverage reporting tools like `codecov.io` or `coveralls`. It generates a CodeCoverage report for each branch of your Git repository separately, allowing you to analyze the test coverage of specific branches and identify any potential regressions or differences in code coverage between them. This can be useful when working on multiple features or hotfixes concurrently and want to ensure consistent testing across branches before merging them back into the main codebase.'
        build: '[AI] `codecov --build` is a command used with CodeCov, a tool for collecting and reporting test coverage data. This command runs the tests in your project and generates a code coverage report. It analyzes each file in your repository to determine which lines were executed during testing and calculates the percentage of code coverage for each file. The results are then displayed in an easy-to-understand HTML report or can be integrated with continuous integration tools like GitHub Actions, Jenkins, etc., for automatic reporting on every build.'
        changelog: '[AI] `codecov --changelog` is a command used in software testing with CodeCoverage analysis tools like `codecov.io`. This command generates a changelog file that documents test coverage changes between two specific versions or commits of your codebase. It helps developers to identify added, removed, or modified code that affects test coverage and track progress towards maintaining or improving coverage over time.'
        clean: '[AI] `codecov --clean` is a command used in continuous integration workflows to remove previously generated code coverage reports. This helps ensure that new reports are only based on the most recent build and not an amalgamation of multiple builds, which can lead to inconsistencies in analysis results. By running this command, you''re instructing Codecov to delete existing report files before generating new ones.'
        dir: '[AI] `codecov --dir` is a command used in software testing to generate and view test coverage reports for a specific directory. The `--dir` option specifies the directory containing the source files to be analyzed. Codecov analyzes the tests run against those files and produces a report detailing the percentage of code coverage achieved for each file. This information can help developers identify under-tested areas and improve test suite effectiveness.'
        dryRun: '[AI] `codecov --dry-run` is a command used in continuous integration workflows to check the coverage report generation process without actually generating the reports. It simulates a run of the codecov tool against your project, showing you what files would have been processed and what the output might look like. This helps ensure that your testing infrastructure is properly set up for producing accurate code coverage data when you''re ready to generate real reports.'
        env: '[AI] `codecov --env` is a command-line option used with Codecov, a tool for collecting test coverage data from various testing frameworks and reporting it in an easy-to-understand format. The `--env` flag sets environment variables that can be used to customize the testing environment or configuration. These variables can affect how tests run, what data is collected, and how the results are reported. Using this flag allows for greater flexibility when using Codecov to analyze your project''s test coverage.'
        feature: '[AI] `codecov --feature` is a command used in software testing with CodeCov, a tool for collecting test coverage data from various testing frameworks and reporting on the percentage of code covered by each test file. The `--feature` flag is an optional argument that enables the collection and reporting of additional feature branch coverage data. This means that besides the overall project coverage, it also provides information about the coverage of individual branches in a Git workflow, which can be useful for tracking and ensuring adequate testing during development and merge requests.'
        file: '[AI] `codecov --file` is a command used by Codecov, a continuous integration testing tool for collecting and reporting test coverage data. The option `--file` specifies a file or list of files to be analyzed for test coverage. When executed with this option, codecov generates reports for the specified files only. This can help in focusing on specific parts of the codebase, improving efficiency and reducing noise in the test coverage results.'
        flags: '[AI] `codecov --flags` is a command-line option for the codecov reporting tool. It allows users to pass flags that modify the behavior of codecov during test coverage analysis. These flags can be used to include or exclude files, directories, or tests from the analysis, configure output formats, and perform other customizations. For example, `--skip-coverage skipped_file.js` can be used to exclude a specific file from the analysis results. Refer to the codecov documentation for a full list of available flags and their usage.'
        help: '[AI] `codecov --help` is a command used by Codecov, a tool for generating and publishing code coverage reports. When run with this argument, it displays detailed help information about all of Codecov''s various commands and options. This includes information on how to install and configure Codecov, as well as details on the different ways you can generate and share code coverage reports for your projects. By providing a clear overview of what Codecov can do and how to use it effectively, `codecov --help` is an invaluable resource for anyone looking to improve the test coverage of their codebase.'
        name: '[AI] `codecov --name` is a command used in software testing with code coverage analysis tools like Codecov.io or Coverage.js. This specific command option returns a list of tested files or directories, based on their names, along with the percentage of line or branch coverage for each file. The output helps developers identify which parts of the codebase have been tested and which areas still need attention to ensure comprehensive test coverage.'
        nonZero: '[AI] `codecov --non-zero` is a command used with tools like `codecov.io` or `coverage.py` to generate test coverage reports for your codebase. The option `--non-zero` filters the output to only show files that have some coverage, i.e., files where at least one line of code has been executed during testing. This helps focus on files with inadequate test coverage and improve code quality.'
        parent: '[AI] `codecov --parent` is a command used with Codecov, a tool for collecting test coverage data from various testing frameworks and reporting it in an easily understandable format. The `--parent` option is specifically used when running tests within a subdirectory of a larger project. It tells Codecov to generate a report that includes the coverage results for both the current directory (the child) and its parent directory (the parent). This way, coverage data for multiple levels of nested directories can be consolidated into a single report.'
        pr: '[AI] `codecov --pr` is a command used with Codecov, a continuous code coverage tool. It generates a report for the difference in coverage between two Git commits or pull requests (PRs). The result shows which files and lines have been covered, as well as new or removed coverage. This information helps developers to understand the impact of their changes on code coverage and ensures that regressions are minimized.'
        rootDir: '[AI] `codecov --rootDir` is a command-line option for Codecov, a tool used to measure and report test coverage for various programming languages. The `--rootDir` (or simply `-R`) option specifies the root directory of the project or monorepo that you want to analyze for code coverage. This allows Codecov to correctly identify the source files and tests related to your project and generate accurate coverage reports.'
        sha: '[AI] `codecov --sha` is a command from Codecov, a continuous code coverage tool. It generates a report showing the percentage of code coverage for each committed Git SHA. This report helps developers identify which commits introduced new code without adequate testing or regressed previously covered code.'
        slug: '[AI] `codecov --slug` is a command used in continuous integration workflows to generate and publish code coverage reports for GitHub projects. The `--slug` option specifies the unique identifier or URL path for the GitHub repository being tested, which will be included in the generated report''s title on the codecov.io dashboard. This helps users easily identify and navigate to the desired project when viewing the code coverage results online.'
        source: '[AI] `codecov --source` is a command used in software testing to generate and display code coverage reports for specific source files or directories. It is part of the Codecov tool which analyzes test results to measure the percentage of lines, branches, and functions covered by tests. The `--source` option limits the report generation to the specified sources, excluding others from the analysis. This helps developers focus on the code areas that need attention and improvement in terms of test coverage.'
        tag: '[AI] `codecov --tag` is a command used in software testing to generate and view test coverage reports for specific tags or branches in version control systems like Git. The `--tag` option filters the report based on the given tag name, enabling developers to analyze and compare code coverage between different versions or features of their projects.'
        token: '[AI] `codecov --token` is a command-line argument used with Codecov, a continuous code coverage reporting tool. The argument expects a token as its value, which is an access key provided by Codecov to authenticate and authorize the tool to access your project''s code coverage data. When you run tests in your CI/CD pipeline or locally and upload the test results to Codecov using this token, it will process the data, generate reports, and provide insights into your application''s code coverage.'
        url: '[AI] `codecov --url` is a command from Codecov, a continuous integration tool for testing code coverage. The command generates a unique URL to access an interactive HTML report showing the code coverage results of your project. This report displays the percentage of covered lines and branches in each file, allowing developers to identify and improve the test coverage of their code.'
        verbose: '[AI] `codecov --verbose` is a command used in software testing to generate detailed coverage reports using the Codecov tool. The `--verbose` option increases the output level of details, displaying extensive information about the test results and code coverage metrics such as lines covered, branches covered, and missed coverage, making it useful for developers to identify and address coverage issues more effectively.'
        version: '[AI] `codecov --version` is a command used by Codecov, a continuous code coverage tool for various programming languages, including JavaScript, Python, Ruby, and more. The command requests the version number of the installed Codecov CLI (Command-Line Interface) tool to be displayed on the terminal or command prompt. It helps users ensure they are running the latest version of Codecov and troubleshoot any compatibility issues with their projects or dependencies.'
