# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: add
description: Installs a package and any packages that it depends on
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --global-dir: Specify a custom directory to store global packages
    --ignore-scripts: Don't run lifecycle scripts
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --no-save-exact: Do not install exact version
    --no-save-workspace-protocol: Do not save packages from the workspace with a "workspace:" protocol
    --offline: Trigger an error if any required dependencies are not available
    --prefer-offline: Skip staleness checks for cached data
    --save-peer: Save package to your `peerDependencies` and `devDependencies`
    --save-workspace-protocol: Save packages from the workspace with a "workspace:" protocol
    --silent: turn off all logging
    --store-dir=: The directory in which all the packages are saved on the disk
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests
    --use-stderr: Divert all output to stderr
    --virtual-store-dir=: The directory with links to the store
    --workspace: Only adds the new dependency if it is found in the workspace
    -C, --dir=: Change to directory <dir>
    -D, --save-dev: Save package to your `devDependencies`
    -E, --save-exact: Install exact version
    -O, --save-optional: Save package to your `optionalDependencies`
    -P, --save-prod: Save package to your `dependencies`
    -g, --global: Install as a global package
    -h, --help: Output usage information
    -r, --recursive: Run installation recursively in every package found in subdirectories
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm add` is a command used with PNPM (Parcel NPM), a package manager for JavaScript projects. It is similar to npm''s `install` or yarn''s `add` commands. The purpose of `pnpm add` is to install and save new dependencies in the project''s `pnpm-lock.yaml` file. When you run `pnpm add <package-name>`, PNPM downloads the required package from a registry (like npm or yarn), then adds it to your `node_modules` folder, and updates the `pnpm-lock.yaml` file accordingly. This ensures that every developer working on the project has consistent dependencies.'
    flag:
        aggregate-output: '[AI] `pnpm add --aggregate-output` is a command used with npm package manager PnPM. It allows installing multiple packages at once and producing an aggregate output file, `package-lock.json`, that includes all the installed packages'' locks in one file, simplifying the management of dependencies across multiple projects in a workspace.'
        changed-files-ignore-pattern: '[AI] `pnpm add` is a command used in the package manager, pnpm, to install new dependencies in a Node.js project. The option `--changed-files-ignore-pattern` allows users to specify a pattern to ignore files that have been changed since the last commit when installing dependencies. This can be useful to prevent unnecessary reinstalls of dependencies or development files during continuous integration workflows, reducing build time and potential conflicts.'
        color: '[AI] `pnpm add --color` is a command used with the package manager, pnpm. This command installs a new package along with its recommended color output for the package''s installation progress and error messages in the terminal. By default, pnpm does not display colors during installation. To enable colored output, you can simply use this command when installing a new package: `pnpm add <package-name> --color`.'
        dir: '[AI] `pnpm add --dir` is a command used with npm package manager, specifically pnpm. This command is used to install a new package directly into a specific sub-directory under the current project''s node_modules instead of the default installation in the root node_modules folder. This can be useful when working on multi-package projects or managing dependencies at a granular level.'
        filter: '[AI] `pnpm add --filter` is a command used with npm package manager PnPM. It allows installing packages selectively by specifying a filter pattern. The filter can be a file name or a folder path, and the command will only install dependencies required by matching files or folders in the project. This helps keep the installed packages minimal and efficient.'
        filter-prod: '[AI] `pnpm add --filter-prod` is a command used with npm package manager, specifically PnPM, for installing new packages in a project with finer control over the installation process. The `--filter-prod` flag restricts the installation to only production dependencies, which are packages required solely for building and running the project in its final state for deployment. This command ensures that development dependencies (used only during development) aren''t accidentally installed when targeting a production environment.'
        global: '[AI] `pnpm add --global` is a command used with PnPM, a package manager for JavaScript projects that is similar to npm and Yarn. This command installs a package globally, meaning it will be available across all projects in your system rather than just within the current project directory. By default, PnPM keeps global packages separate from local project dependencies, which can lead to faster installations and reduced disk space usage compared to npm or Yarn.'
        global-dir: '[AI] `pnpm add --global-dir` is a command used with pnpm, a package manager for Node.js projects. This command is used to install packages globally, but instead of adding them to the project''s node\_modules directory or the user''s personal node\_modules directory, it installs them in a separate `pnpm-global` directory under the user''s home directory. This can be useful when you want to keep your project and global packages separate.'
        help: '[AI] `pnpm add` is a command used in the npm package manager called pnpm for installing new packages into a project. The `--help` option that follows the command is used to display detailed information about how to use the command correctly, including any available flags or arguments and their descriptions. In essence, `pnpm add --help` provides instructions on how to properly install packages using pnpm with additional context on available options.'
        ignore-scripts: '[AI] `pnpm add --ignore-scripts` is a command used with the package manager PNPM (Parallel NPM). It allows installing new packages without running their included scripts listed in the `scripts` section of the `package.json` file. This can be useful when you want to avoid unintended side effects or conflicts from the scripts during the installation process.'
        loglevel: '[AI] `pnpm add --loglevel` is a command used with pnpm, a package manager for JavaScript projects. This command is used to install new packages in a project and change the logging level to minimize or maximize verbosity. The `--loglevel` option can be set to values like "error", "warning", "info" (default), "verbose", or "silly". Using this command allows users to customize the amount of output they receive during package installation.'
        no-color: '[AI] `pnpm add --no-color` is a command used with PnPM, a package manager for Node.js projects. The `add` subcommand is used to install new packages as dependencies in the project. The `--no-color` option disables colored output from the command, making it useful when running scripts in environments like CI systems where colored output may not be desired or supported.'
        no-save-exact: '[AI] `pnpm add --no-save-exact` is a command used with the Package Manager for Node.js projects, named pnpm. This command installs a new package in your project without recording its exact version number in the package.json file under the `dependencies` or `devDependencies`. Instead, it adds the package to the `pnpm-lock.yaml` file which manages the resolved dependencies with their hashed versions for reproducibility and faster installation. This command can be useful when you prefer not to pin down specific package versions in your project''s history.'
        no-save-workspace-protocol: '[AI] `pnpm add --no-save-workspace-protocol` is a command used with pnpm, a package manager for JavaScript projects. This command is used to install a new package in the project without adding it to the workspace''s `package-lock.json` or `pnpm-lock.yaml` files. By using the `--no-save-workspace-protocol`, you are instructing pnpm not to apply automatic saving of the installed package to these lock files, giving more control over managing dependencies at the workspace level.'
        offline: '[AI] `pnpm add --offline` is a command used in the Package Manager for Node.js projects called pnpm. This command instructs pnpm to install a new package without downloading it from the internet, instead using only the local cache or downloaded packages from previous installations. The "--offline" option is useful when working in environments with limited network connectivity or when you prefer to keep your dependencies up-to-date locally.'
        prefer-offline: '[AI] `pnpm add --prefer-offline` is a command used with npm or Yarn package managers when installing dependencies for a Node.js project. This option prioritizes using locally cached packages instead of downloading them from the registry, even if they already exist in the cache and are up-to-date. This can save time during installation and improve the reliability of the build process by reducing the dependency on an internet connection.'
        recursive: '[AI] `pnpm add --recursive` is a command used in the Package Manager for Node.js projects called pnpm. This command installs new packages and their dependencies recursively across the entire project tree, not just in the current directory. By using `--recursive`, all subdirectories under the current package.json file will have their dependencies installed as well, ensuring a consistent dependency graph across the entire project.'
        save-dev: '[AI] `pnpm add --save-dev` is a command used with npm or yarn package managers, specifically with pnpm. It''s used to install packages that are required for development but not necessarily needed in the production environment. The `--save-dev` flag tells the package manager to save the dependency in the `devDependencies` section of the `package.json` file instead of the regular `dependencies`. This allows other developers or build tools to know which packages are necessary for development purposes.'
        save-exact: '[AI] `pnpm add --save-exact` is a command used with the Package Manager for Node.js projects, named pnpm. This command installs a specified package and adds it as a dependency in the project''s `package.json` file. The `--save-exact` flag ensures that the exact version of the installed package will be saved in the `package.json` file. This is useful for maintaining consistent dependencies across different environments.'
        save-optional: '[AI] `pnpm add --save-optional` is a command used with npm or pnpm package managers to install a package in a project with the optional dependency marked in the package.json file. The `--save-optional` flag indicates that the dependency is not essential for the project to run but may be useful under certain conditions. This way, the package will not be included in the `dependencies` section of package.json by default, but will appear in the `devDependencies` or `peerDependencies` sections if applicable.'
        save-peer: '[AI] `pnpm add --save-peer` is a command used with npm or Yarn package managers, specifically when using PnPM as the backend. This command installs a dependency that your project depends on, but it''s not directly required by your `package.json` file. Instead, it is listed in the `package-lock.json` (or `yarn.lock`) under `peerDependencies`. Using `--save-peer` adds these dependencies to the specified lock file for future installation consistency.'
        save-prod: '[AI] `pnpm add --save-prod` is a command used with npm packaging system PnPM. It installs new dependencies in a project and saves them as dev or production dependencies in the package.json file, depending on the "--save-dev" or "--save-prod" flag respectively. The "production" flag indicates that the packages are intended for use during production and will not be included in development builds. This helps keep the size of the production bundle minimal.'
        save-workspace-protocol: '[AI] `pnpm add --save-workspace-protocol` is a command used with npm or Yarn workspaces managed by PnPM, a package manager for JavaScript projects. This command installs packages across the entire workspace using the `--save-workspace-exports` flag instead of the default `--save` flag. The flag ensures that when a new package is added to one package in the workspace, it gets automatically added as a dependency in all other related packages as well. This helps keep the dependencies consistent across the workspace and simplifies the management of multi-package projects.'
        silent: '[AI] `pnpm add --silent` is a command used with PnPM, a package manager for JavaScript projects. This command installs new packages mentioned in the project''s `package.json` or `pnpm-lock` file without displaying progress messages or other output. It''s useful when running automated tasks or scripts where you don''t need to see the installation process.'
        store-dir: '[AI] `pnpm add --store-dir` is a command used with npm package manager, specifically pnpm, to configure where the global installations of packages are stored. By default, pnpm stores these packages in a system-wide location, but using `--store-dir <directory>` allows specifying a custom directory for global installations. This can be useful for isolating global installations across different projects or environments.'
        stream: '[AI] `pnpm add --stream` is a command used with PnPM, a package manager for Node.js projects. It allows installing and adding new dependencies as streams, which can be useful in pipelines or continuous integration environments. Instead of downloading and extracting the packages, it directly pipes the installation process to the next step in the pipeline, saving time and resources.'
        test-pattern: '[AI] `pnpm add --test-pattern` is a command used with the package manager, pnpm. It installs new packages specified by their names but also runs tests for those packages that match the given test pattern. The test pattern is a glob expression that defines which files or directories are considered test files and will be run using the testing framework configured in your project. This command simplifies the process of adding dependencies and running tests at once.'
        use-stderr: '[AI] `pnpm add --use-stderr` is a command used with npm package manager, specifically its faster alternative pnpm. This command is used to install a new package and display installation progress and errors in the standard error stream (terminal error messages), instead of mixing them with normal output. By default, pnpm shows both progress and errors on the standard output. Using `--use-stderr` allows for cleaner error reporting during the package installation process.'
        virtual-store-dir: '[AI] `pnpm add --virtual-store-dir` is a command used with npm package manager, specifically PnPM (Parallel NPM), to install packages without adding them to the global or local node\_modules directory. Instead, it creates a separate virtual store directory, allowing for better control and isolation of installed packages across multiple projects within the same workspace. This can be useful in complex development environments or when managing shared dependencies between different applications.'
        workspace: '[AI] `pnpm add --workspace` is a command provided by PnPM (Parallel NPM), a package manager for JavaScript projects. This command is used to install new dependencies directly into a multi-package workspace, which means it will automatically install the dependency across all projects in the workspace without creating separate `node_modules` folders for each project. The `--workspace` flag ensures that the dependency is installed with shared lock files and other benefits of using PnPM as a workspace manager.'
        workspace-root: '[AI] `pnpm add --workspace-root` is a command used with PnPM, a package manager for JavaScript projects. This command is used to install a new package into a specific workspace root instead of the current project directory. When you run `pnpm add <package> --workspace-root=<path>`, it installs the specified package in the given workspace root and updates the shared lockfile across all projects within that workspace. This command is useful when managing multi-project workspaces with PnPM.'
