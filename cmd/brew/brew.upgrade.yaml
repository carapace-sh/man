# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: upgrade
description: Upgrade outdated casks and outdated, unpinned formulae using the same options they were originally installed with, plus any appended brew formula options
group: main
flags:
    --appdir=: 'Target location for Applications (default: `/Applications`).'
    --audio-unit-plugindir=: 'Target location for Audio Unit Plugins (default: `~/Library/Audio/Plug-Ins/Components`).'
    --binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --build-from-source: Compile <formula> from source even if a bottle is available.
    --cask: Treat all named arguments as casks. If no named arguments are specified, upgrade only outdated casks.
    --colorpickerdir=: 'Target location for Color Pickers (default: `~/Library/ColorPickers`).'
    --debug: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.
    --debug-symbols: Generate debug symbols on build. Source will be retained in a cache directory.
    --dictionarydir=: 'Target location for Dictionaries (default: `~/Library/Dictionaries`).'
    --display-times: Print install times for each package at the end of the run.
    --dry-run: Show what would be upgraded, but do not actually upgrade anything.
    --fetch-HEAD: Fetch the upstream repository to detect if the HEAD installation of the formula is outdated. Otherwise, the repository's HEAD will only be checked for updates when a new stable or development version has been released.
    --fontdir=: 'Target location for Fonts (default: `~/Library/Fonts`).'
    --force: Install formulae without checking for previously installed keg-only or non-migrated versions. When installing casks, overwrite existing files (binaries and symlinks are excluded, unless originally from the same cask).
    --force-bottle: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.
    --formula: Treat all named arguments as formulae. If no named arguments are specified, upgrade only outdated formulae.
    --greedy: Also include casks with `auto_updates true` or `version :latest`.
    --greedy-auto-updates: Also include casks with `auto_updates true`.
    --greedy-latest: Also include casks with `version :latest`.
    --help: Show this message.
    --input-methoddir=: 'Target location for Input Methods (default: `~/Library/Input Methods`).'
    --interactive: Download and patch <formula>, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.
    --internet-plugindir=: 'Target location for Internet Plugins (default: `~/Library/Internet Plug-Ins`).'
    --keep-tmp: Retain the temporary files created during installation.
    --keyboard-layoutdir: 'Target location for Keyboard Layouts (default: `/Library/Keyboard Layouts`).'
    --language: Comma-separated list of language codes to prefer for cask installation. The first matching language is used, otherwise it reverts to the cask's default language. The default value is the language of your system.
    --mdimporterdir=: 'Target location for Spotlight Plugins (default: `~/Library/Spotlight`).'
    --no-binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --no-quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --prefpanedir=: 'Target location for Preference Panes (default: `~/Library/PreferencePanes`).'
    --qlplugindir=: 'Target location for Quick Look Plugins (default: `~/Library/QuickLook`).'
    --quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --quiet: Make some output more quiet.
    --require-sha: Require all casks to have a checksum.
    --screen-saverdir=: 'Target location for Screen Savers (default: `~/Library/Screen Savers`).'
    --servicedir=: 'Target location for Services (default: `~/Library/Services`).'
    --skip-cask-deps: Skip installing cask dependencies.
    --verbose: Print the verification and post-install steps.
    --vst-plugindir=: 'Target location for VST Plugins (default: `~/Library/Audio/Plug-Ins/VST`).'
    --vst3-plugindir=: 'Target location for VST3 Plugins (default: `~/Library/Audio/Plug-Ins/VST3`).'
documentation:
    command: '[AI] `brew upgrade` is a Homebrew command used to install or update the latest versions of installed packages, along with their dependencies, on macOS systems. It automatically manages and downloads the required files, making it an essential tool for keeping your Homebrew-managed software up to date.'
    flag:
        appdir: '[AI] The `brew upgrade --appdir` command is used with Homebrew, a popular package manager for macOS. This command initiates an upgrade process for all installations managed by Homebrew in a custom application directory specified by the user. By default, Homebrew installs software in /usr/local, but specifying an appdir allows users to keep their Homebrew installations separate from system files. The `--appdir` flag ensures that only the specified directory is affected by the upgrade process.'
        audio-unit-plugindir: '[AI] `brew upgrade --audio-unit-plugindir` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Audio Unit plugins installed via Homebrew. The `--audio-unit-plugindir` option specifies the directory where the upgraded Audio Unit plugins will be placed after installation or upgrade. By default, Homebrew installs Audio Unit plugins in `/Library/Audio/Plug-ins/Components`. This command helps keep your Audio Unit plugins up-to-date and functional with the latest macOS system updates.'
        binaries: '[AI] `brew upgrade --binaries` is a command used in Homebrew, a popular package manager for macOS. This command triggers an upgrade of outdated binaries (executable programs) installed via Homebrew to their latest versions. By using `--binaries`, you explicitly instruct Homebrew to update only the executables, leaving other parts of the installations untouched. This can help save time and resources for larger upgrades while ensuring that the user has access to the most recent versions of their binaries.'
        build-from-source: |-
            [AI] The `brew upgrade --build-from-source` command is used with Homebrew, a popular package manager for macOS. This command initiates an upgrade process where Homebrew will check for available updates to installed packages and their dependencies.

            If the updated versions of the packages are built from source (as opposed to precompiled binaries), then the `--build-from-source` flag instructs Homebrew to compile those packages from their source code during the upgrade process. This ensures that you have the latest version of the software, as well as any new features or bug fixes that might be included.

            Compiling software from source can take longer than installing precompiled binaries and may require additional system dependencies. However, using `--build-from-source` ensures that your system has the exact versions of the packages you want, and it can provide more control over the installation process in certain cases.
        cask: '[AI] `brew upgrade --cask` is a command used in Homebrew, a popular package manager for macOS. This command is used to check for and install upgrades for Homebrew Cask, which is a component of Homebrew that manages the installation of macOS applications as Homebrew packages. By running `brew upgrade --cask`, you are instructing Homebrew to look for and automatically install any available updates for your currently installed Cask applications or packages, improving their functionality with new features, bug fixes, or other enhancements.'
        colorpickerdir: '[AI] The `brew upgrade --colorpickerdir` command is used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and all installed formulae (packages) to their latest versions. The `--colorpickerdir` option sets the directory where Homebrew will look for custom color themes for its output. By default, it uses its own built-in colors. Setting this option allows users to customize the appearance of Homebrew''s command line interface.'
        debug: '[AI] `brew upgrade --debug` is a command used in Homebrew, a popular package manager for macOS. This command initiates an upgrade of all installed packages while generating extensive debug information during the process. The debug output provides detailed logs on each step taken, including dependencies being updated and any error messages that might occur. This level of detail can be useful for troubleshooting and understanding what exactly happens behind the scenes when upgrading packages with Homebrew.'
        debug-symbols: '[AI] `brew upgrade --debug-symbols` is a command used in Homebrew, a popular package manager for macOS. This command initiates an upgrade of all installed packages to their latest versions while also installing debug symbols for those packages. Debug symbols are additional files that contain detailed information about the code execution during debugging. Installing debug symbols can be helpful when attempting to debug software installed via Homebrew.'
        dictionarydir: '[AI] `brew upgrade --dictionarydir` is a command used in Homebrew, a popular package manager for macOS. This command triggers an upgrade of all Homebrew installations to their latest versions in the system. The `--dictionarydir` option specifically sets the path to a custom dictionary file for Homebrew''s translation lookups during the installation or upgrade process. In most cases, users don''t need to provide this option as Homebrew comes pre-configured with its own dictionary file.'
        display-times: '[AI] The `brew upgrade --display-times` command is used with Homebrew, a popular package manager for macOS. This command is employed to list out all installed packages along with the dates of their last version upgrades or installations. It helps users keep track of when each package was last updated and provides an overview of the system''s software updates status.'
        dry-run: '[AI] The `brew upgrade --dry-run` command is a preview function of Homebrew, a popular package manager for macOS. It simulates an upgrade of all installed packages to their latest available versions without making any changes to the system. This allows users to review the list of pending upgrades and assess potential impacts before executing the actual upgrade with `brew upgrade`.'
        fetch-HEAD: '[AI] `brew upgrade --fetch-HEAD` is a command used in Homebrew, a popular package manager for macOS. This command triggers an upgrade process that fetches the latest HEAD (tip) commit of each Homebrew formula from their respective Git repositories, without installing or applying those changes. The upgraded list is saved to ~/Library/Homebrew/Lists/upgraded-packages-todo file for later installation with `brew install` or `brew upgrade`. This approach allows users to review the changes before installing them and also helps in resolving potential dependency conflicts.'
        fontdir: '[AI] `brew upgrade --fontdir` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and also installs any available font upgrades that are managed by Homebrew in the system font directory. The `--fontdir` option specifies the target directory for the installed font files.'
        force: '[AI] `brew upgrade --force` is a command used in Homebrew, a popular package manager for macOS. This command is used to force an upgrade of all installed packages and their dependencies to the latest available versions. By default, Homebrew will only upgrade packages that have new updates available without introducing backward-incompatible changes. However, `--force` option overrides this behavior, allowing upgrades even if they may introduce such changes. It''s important to use `--force` with caution, as it could potentially cause compatibility issues or break functionality in some applications.'
        force-bottle: '[AI] `brew upgrade --force-bottle` is a command used in Homebrew, a popular package manager for macOS. This command is used to force an upgrade of currently installed bottled packages to their latest versions. A "bottled package" is a precompiled binary package that Homebrew installs instead of building from source. The `--force-bottle` option tells Homebrew to reinstall these packages even if they were already up-to-date, ensuring the latest version is installed and resolving any dependency issues.'
        formula: '[AI] The `brew upgrade --formula` command is used with Homebrew, a popular package manager for macOS. This specific command triggers an upgrade of all installed Homebrew formulae (packages), but does not reinstall or update the already-installed dependencies and casks (other types of packages). It''s useful when you want to ensure your formulae are updated to their latest versions without affecting other parts of your system.'
        greedy: '[AI] `brew upgrade --greedy` is a command used in Homebrew, a popular package manager for macOS. This command triggers an automatic upgrade of all outdated installations to their latest available versions. The `--greedy` option tells Homebrew to install the newest version of a dependency even if the current version is already satisfactory. It aims to keep the system up-to-date with the latest packages, ensuring maximum compatibility and security.'
        greedy-auto-updates: '[AI] `brew upgrade --greedy-auto-updates` is a command used in Homebrew, a popular package manager for macOS. This command triggers an automatic update of all installed packages to their latest versions and enables the "greedy" auto-update feature. "Greedy" means that Homebrew will install the latest available version of each package, even if it''s a major update (instead of just minor or patch updates). This command helps keep your system up-to-date with the latest software versions.'
        greedy-latest: '[AI] `brew upgrade --greedy-latest` is a command used in Homebrew, a popular package manager for macOS. This command initiates an automatic update of all installed packages to their latest versions, overriding any previously specified lockfiles or pinned dependencies. It is commonly used when you want to ensure that all your software is up-to-date with the latest available versions.'
        help: '[AI] `brew upgrade --help` is a command used in Homebrew, a popular package manager for macOS. This command displays detailed help information about the `brew upgrade` operation. It upgrades outdated Homebrew installations and their dependencies to their latest versions. Using `--help` provides information on available options, such as `--quiet`, which suppresses output other than error messages, or `--reinstall`, which forces a reinstallation of dependencies after an upgrade.'
        input-methoddir: '[AI] The command `brew upgrade --input-methoddir` is used in Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and all installed formulae (packages) to their latest versions. The `--input-methoddir` option specifies the custom input method directory path, which allows users to override certain keymaps or add new ones when upgrading iTerm2 or similar terminal applications. However, this option is usually not required for standard upgrades and is only relevant for users who need to modify their terminal input methods.'
        interactive: '[AI] `brew upgrade --interactive` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade process for Homebrew and its installed packages, but with an interactive interface. Instead of automatically installing upgrades for all packages, the user is prompted to approve each installation individually before it proceeds. This provides more control over which upgrades are installed at a given time.'
        internet-plugindir: '[AI] The `brew upgrade --internet-plugindir` command is used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and all installed packages to their latest versions. The `--internet-plugindir` option specifies an alternative directory for Homebrew to download plugins from over the internet, if needed. It''s useful when you have restricted network access and need to use a specific proxy or download location.'
        keep-tmp: '[AI] The `brew upgrade --keep-tmp` command is a function in Homebrew, a popular package manager for macOS. This specific command is used to upgrade Homebrew itself and all installed packages to their latest versions. The `--keep-tmp` flag tells Homebrew to keep the temporary files created during the installation or upgrade process, which can be useful for troubleshooting or for revertibility purposes. By default, Homebrew deletes these files after a successful installation or upgrade.'
        keyboard-layoutdir: '[AI] The `brew upgrade --keyboard-layoutdir` command is used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and also installs or updates the keyboard layout files in the system-wide location. It ensures that your keyboard layout configuration remains compatible with any changes made to Homebrew.'
        language: '[AI] The `brew upgrade --language` command is used with Homebrew, a popular package manager for macOS. It specifically instructs Homebrew to check for and install upgrades for any installed languages or development tools. The `--language` option limits the search to languages only. This can help keep your development environment up-to-date and ensure you''re using the latest versions of your preferred programming languages.'
        mdimporterdir: '[AI] `brew upgrade --mdimporterdir` is a command used with Homebrew, a popular package manager for macOS. This specific command initiates an upgrade of Homebrew itself and also upgrades the MDImporter, which is a plugin for Homebrew that allows for installing certain types of software packages that don''t come as part of Homebrew''s core offerings by default. The `--mdimporterdir` flag indicates that Homebrew should look in its custom MDImporter directory (usually located at `/usr/local/Homebrew/Library/Taps/homebrew-mdimporter`) for any available updates to the MDImporter plugin.'
        no-binaries: '[AI] `brew upgrade --no-binaries` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of all installed packages in your Homebrew system to their latest versions, but it skips the download and installation of new binaries (executable programs). Instead, it only updates the formulae and casks (metadata files) that define how Homebrew installs and manages each package. By excluding binary downloads with `--no-binaries`, this command saves bandwidth and time for users who may already have the latest binaries installed or prefer to manually manage their binaries.'
        no-quarantine: '[AI] `brew upgrade --no-quarantine` is a command used with Homebrew, a popular package manager for macOS. This command triggers Homebrew to check for updates and install them for all installed formulas (packages) in the system. The `--no-quarantine` option disables Gatekeeper, Apple''s security feature that checks apps for malware before installation, for packages being updated through Homebrew. By using this flag, users bypass the default security check, which might be useful when installing software from untrusted sources or in specific use cases where this override is necessary. However, it''s essential to note that disabling Gatekeeper introduces potential security risks. Always make sure you trust the source of packages before using `--no-quarantine`.'
        prefpanedir: '[AI] `brew upgrade --prefpanedir` is a command used in Homebrew, a popular package manager for macOS. The command initiates a Homebrew system upgrade, specifically instructing it to use a prefined directory (--prefpanedir) for storing configuration files during the installation or upgrade of new packages. By default, Homebrew stores these files under ~/.config/homebrew-install/, but using this command allows users to specify an alternative directory if preferred.'
        qlplugindir: |-
            [AI] The `brew upgrade --qlplugindir` command is used with Homebrew, a popular package manager for macOS. This command upgrades Homebrew itself to the latest version, and also sets the Quarantine Flag directory for Homebrew's installed plugins to the system default location.

            The "Quarantine Flag" is a security measure in macOS that requires certain applications or files to be scanned for viruses before they can be executed. By setting the directory where Homebrew's plugins are located as the Quarantine Flag directory, any new plugins installed using Homebrew will automatically be scanned by macOS for potential threats.

            The `--qlplugindir` option specifies the path to this directory, which is usually set to `/usr/local/Cellar/Homebrew/<version>/Components/` but can be changed with this command if needed. For example, `brew upgrade --qlplugindir=/Users/username/my_homebrew_plugins` would set the Quarantine Flag directory to a custom location instead of the default one.
        quarantine: '[AI] `brew upgrade --quarantine` is a command used with Homebrew, a popular package manager for macOS. This command performs an upgrade of all installed packages to their latest versions. However, it sets the Quarantine bit on the newly downloaded packages, which is a security feature in macOS that marks files as having come from an external source and requiring additional validation before they can be executed or opened. This helps protect against potential malware or other security threats.'
        quiet: '[AI] The `brew upgrade --quiet` command is a function in Homebrew, a popular package manager for macOS, used to automatically install upgrades for all installed packages without displaying any verbose output or prompts. It runs the upgrade process silently in the background.'
        require-sha: '[AI] `brew upgrade --require-SHA` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of installed packages to their latest versions while requiring the installation of specific SHA checksums for package repositories. The SHA checksums ensure the integrity and authenticity of the downloaded packages, preventing potential security risks or inconsistencies during the update process.'
        screen-saverdir: |-
            [AI] The command `brew upgrade --screen-saverdir` is a Homebrew (a popular package manager for macOS) command used to upgrade Homebrew itself and its installed formulae, while also setting the directory for custom screen savers.

            Here's a brief explanation of each part:

            1. `brew`: This is the name of the Homebrew application that manages installing, upgrading, and removing software packages on macOS using the package manager.
            2. `upgrade`: This is the command to run when you want to check for and install available upgrades for Homebrew and its installed formulae (packages).
            3. `--screen-saverdir`: This option sets the directory where Homebrew will look for custom screen savers when you install them using Homebrew. By default, this is set to ~/Library/Screen Savers, but you can change it with this option if desired.
        servicedir: '[AI] `brew upgrade --servicedir` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew''s installed packages to their latest versions. The "--servicedir" option specifies the directory where Homebrew stores its managed services. Upgrading with this option ensures that these services are also updated during the process.'
        skip-cask-deps: '[AI] The `brew upgrade --skip-cask-deps` command is used with Homebrew, a popular package manager for macOS. This command upgrades all currently installed Homebrew packages to their latest versions. The `--skip-cask-deps` flag is optional and skips the installation or updating of dependencies that come as part of Cask (Homebrew''s management of large binaries like Google Chrome, VSCode, etc.). This can save time during the upgrade process for those who prefer managing their Cask installations separately.'
        verbose: '[AI] `brew upgrade --verbose` is a command used in Homebrew, a popular package manager for macOS. This command initiates an upgrade of all installed packages to their latest versions. The `--verbose` option increases the output of the command to provide detailed information about each package being upgraded, including the current and new version numbers, installation and linking progress, and any error messages if applicable.'
        vst-plugindir: '[AI] `brew upgrade --vst-plugindir` is a command used with Homebrew, a popular package manager for macOS. This command initiates an upgrade of Homebrew itself and its installed formulas or packages to the latest available versions. The additional argument `--vst-plugindir` specifies a custom directory where VST (Virtual Studio Technology) plugins for audio workstations like Logic Pro, GarageBand, etc., are stored after installation using Homebrew. This flag ensures that any upgrades do not overwrite or interfere with these custom plugin directories.'
        vst3-plugindir: '[AI] The `brew upgrade --vst3-plugindir` command is used with Homebrew, a popular package manager for macOS. This specific command is used to perform an upgrade of Homebrew itself and all installed formulae (packages) to their latest versions. Additionally, it sets the VST3 plugin directory path for third-party Virtual Studio Technology 3 plugins. These plugins are commonly used in digital audio workstations like Ableton Live or Logic Pro X. The new plugins can then be installed directly into this directory after the upgrade.'
