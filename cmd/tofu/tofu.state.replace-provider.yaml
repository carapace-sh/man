# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: replace-provider [options] FROM_PROVIDER_FQN TO_PROVIDER_FQN
description: Replace provider in the state
flags:
    -auto-approve: Skip interactive approval.
    -ignore-remote-version: A rare option used for the remote backend only.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
documentation:
    command: '[AI] The `tofu state replace-provider` command is used in Ansible Towers, an enterprise version of Ansible, for managing and updating the external providers or plugins that extend the functionality of Ansible Playbooks. This command allows replacing an existing provider with a new one, either locally or from a Git or Ansible Galaxy repository, ensuring that your Ansible environment stays up-to-date with the latest features and bug fixes.'
    flag:
        auto-approve: |-
            [AI] The `tofu state replace-provider --auto-approve` command is used in Terraform, an open-source infrastructure as code software tool. This specific command modifies the state file of a Terraform workspace with a backend such as S3 or Consul.

            The `--replace-provider` flag instructs Terraform to replace the configuration for a specific provider (e.g., AWS, Azure) in the current working directory with new configuration. The `--auto-approve` flag automatically approves any proposed changes to the state file without requiring user confirmation, simplifying the process of updating the state when configurations have been modified outside Terraform or when using a version control system like Git.

            Overall, this command helps maintain consistency between your Terraform configuration and the actual infrastructure by updating the state file accordingly.
        ignore-remote-version: |-
            [AI] The command `tofu state replace-provider --ignore-remote-version` is used in the Tuf (The Updater Framework) to replace a specific provider in the Tuf data store with a new one, while ignoring any version checks on the remote repository.

            In other words, this command allows you to forcefully update a specific provider with a new version from the remote server without checking if there's already an updated version available or not. This can be useful when dealing with issues such as outdated providers or incompatible versions. However, it should be used with caution since it bypasses the usual version checks and update mechanisms that Tuf employs to ensure data integrity and security.
        lock: '[AI] The command `tofu state replace-provider --lock` is used in the Tofu data protection tool, which helps secure data by encrypting and tokenizing it. This specific command performs a replacement of an existing data provider with a new one, while acquiring a lock to ensure data consistency during the process. The lock prevents other operations from modifying the data concurrently, ensuring successful replacement.'
        lock-timeout: |-
            [AI] The `tofu state replace-provider --lock-timeout` command is used in Terraform, an open-source infrastructure as code software tool, to replace a specific state file in a Terraform working directory with new data from a remote source (such as Terraform Cloud), while implementing a locking mechanism.

            The `--lock-timeout` option sets the duration that Terrafarms will wait before giving up and throwing an error if it cannot acquire a lock on the state file during replacement, in seconds. This is intended to prevent multiple users from accidentally or intentionally overwriting each other's changes while working collaboratively on the same infrastructure configuration.
