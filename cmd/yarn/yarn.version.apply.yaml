# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: apply
description: Apply all the deferred version bumps at once
flags:
    --all: Apply the deferred version changes on all workspaces
    --dry-run: Print the versions without actually generating the package archive
    --json: Format the output as an NDJSON stream
    --prerelease: Add a prerelease identifier to new versions
    -R, --recursive: Release the transitive workspaces as well
documentation:
    command: '[AI] `yarn version apply` is a Yarn script command used to update the project''s package versions mentioned in the `package.json` file based on the changes made in the `.yaml` or `.yml` files located in the `yarn.lock` or `yarn.prod.yml` files, respectively. This command automates version bumping and patching for multiple packages with a single command, ensuring all the updated versions are consistent across the project''s dependencies.'
    flag:
        all: '[AI] `yarn version apply --all` is a command used in Yarn, a popular package manager for JavaScript projects. This command is used to update all packages in your project to their latest versions as specified in the lockfile (package-lock.json or yarn.lock). The `--all` flag applies this action to all dependencies, including devDependencies and optionalDependencies. It''s a convenient way to ensure that all your project''s packages are up-to-date with their latest patches and security fixes.'
        dry-run: '[AI] `yarn version --apply --dry-run` is a command used with Yarn, a popular JavaScript package manager. It performs a trial run of applying version updates to your project''s packages based on the configured lockfile (usually `yarn.lock` or `package-lock.json`). The dry-run option previews the changes without actually making any modifications to the files in your project. This way, you can review the proposed updates and their effects before committing them.'
        json: '[AI] `yarn version apply --json` is a command used in Yarn, a popular JavaScript package manager. This command is utilized for applying semantic version updates to multiple packages in a project with a single command. The `--json` option specifies that the output of the command should be in JSON format, which can then be easily processed by other scripts or tools. When executed, this command reads the versions specified in your `package.json` file and upgrades those packages to the next minor version (i.e., patch updates) without altering the major or minor project version number.'
        prerelease: '[AI] `yarn version:apply --prerelease` is a command used in Yarn, a popular JavaScript package manager. This command is utilized for managing and publishing new versions of packages with prereleases. Prereleases are intermediate builds before the final release and can be used to test new features or fixes. When this command is run, it automatically updates `package.json` and `yarn.lock` files in the project directory with the latest version number tagged as a prerelease. This enables developers to easily distribute prerelease versions for feedback before officially publishing a stable release.'
        recursive: '[AI] `yarn version apply --recursive` is a command used in Yarn, a popular JavaScript package manager. This command applies version updates to all packages in the current project and its subdirectories (recursively) according to the lockfile (yarn.lock or package-lock.json). It ensures that all dependent packages are updated to the same versions across the entire project.'
