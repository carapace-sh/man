# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: aar
description: Build a repository containing an AAR and a POM file
flags:
    --build-number=: An identifier used as an internal version number.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of the current project.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-debug: Do not build a debug version of the current project.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-release: Do not build a release version of the current project.
    --no-track-widget-creation: Do not track widget creation locations.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --output-dir=: The absolute path to the directory where the repository is generated.
    --profile: Build a version of the current project specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --target-platform=: The target platform for which the project is compiled.
    --track-widget-creation: Track widget creation locations.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] The `flutter build aar` command is used in Flutter development to build an Android Archive (AAR) file from a Flutter project. It compiles the Dart code into native ARM machine code, creates a new Android project with the generated code, and packages it as an AAR file that can be easily integrated into other Android Studio projects.'
    flag:
        build-number: '[AI] `flutter build aar --build-number` is a command used in Flutter development to generate an Android Archive (AAR) artifact for publishing or distributing to other projects built on the Android Gradle system. The `--build-number` option appends a specific build number to the AAR file name, helping to manage different versions of the library more effectively.'
        dart-define: '[AI] `flutter build aar --dart-define` is a command used in the Flutter framework for generating an Android Archive (AAR) file from a Dart project. The `--dart-define` option allows passing Dart constants as environment variables to the compiled Java code within the AAR, enabling customization without modifying the code directly. This command automates the process of building, compiling, and packaging the Flutter project for use in an Android Studio project with these defined constants.'
        debug: '[AI] `flutter build aar --debug` is a command used in Flutter development to build an Android Archive (AAR) artifact from a Flutter project for distribution or integration into another Android project. The `--debug` flag enables debuggable mode, meaning the generated AAR file will include debug symbols and other information that can be useful for debugging the Flutter code in an Android Studio environment.'
        flavor: '[AI] The `flutter build aar --flavor` command is used in Flutter development for creating and building Android Archive (AAR) files with specific application flavors. In Flutter, different application variants are called flavors. This command generates an AAR file that includes the code and resources for a specified flavor. It''s essential for distributing or publishing your Flutter app to different stores or environments while maintaining unique configurations.'
        help: |-
            [AI] `flutter build aar` is a command-line tool used in the Flutter framework for creating Android Archive (AAR) artifacts from a Flutter project. The `--help` option provides detailed usage information about this specific command.

            Here's a brief description:

            `flutter build aar --help` displays the following information:

            - Usage: A brief summary of the command, its purpose and arguments.
            - Description: An explanation of what the command does.
            - Arguments: Details about any required or optional arguments that can be used with the command.
            - Options: Information about available options that can modify the command's behavior.
            - Examples: Sample usage scenarios to help users get started quickly.

            The output of this command helps users understand how to create an AAR artifact for their Flutter project, ensuring they provide all necessary arguments and options, if any.
        no-debug: '[AI] `flutter build aar --no-debug` is a command used in Flutter development to build an Android Archive (AAR) artifact from the project''s `apk` (Android Package Kit). The `--no-debug` flag instructs Flutter not to include debug symbols during the build process, resulting in a smaller and faster release package. This command generates an AAR file that can be easily imported into other Android projects as a library dependency.'
        no-null-assertions: '[AI] `flutter build aar --no-null-assertions` is a command used in Flutter development to generate an Android Archive (AAR) file from the project''s `.dart` code. The `--no-null-assertions` flag disables null safety checks during the build process. This allows using the older Dart codebase that does not adhere to the null safety rules introduced in Flutter 2.12. It is useful when working on legacy projects or dealing with third-party packages that do not support null safety yet.'
        no-obfuscate: '[AI] `flutter build aar --no-obfuscate` is a command used in Flutter development to generate an Android Archive (AAR) file without obfuscation. This means that the code within the generated library will not be transformed to make it harder for others to read or understand, preserving its original form. The `--no-obfuscate` option is passed to the build process to disable this feature.'
        no-pub: '[AI] `flutter build aar --no-pub` is a command used in Flutter development to generate an Android Archive (AAR) file instead of an APK during the build process. The `--no-pub` option disables publishing to `pub.dev` registry, which can be useful for building libraries or projects locally without making them publicly available.'
        no-release: '[AI] `flutter build aar --no-release` is a command used in Flutter development to generate an Android Archive (AAR) artifact from the built application code without creating a release APK or publishing it to the Google Maven repository. This command can be useful when integrating third-party libraries into larger Android projects or for continuous integration and delivery pipelines. It does not create a release APK, making it suitable for development and testing purposes.'
        no-track-widget-creation: '[AI] The `flutter build aar --no-track-widget-creation` command is used in Flutter development to build an Android Archive (AAR) file without tracking widget creations. This option is useful when building libraries or reusable components for other projects, as it avoids generating unnecessary metadata related to the usage of those widgets in the builder''s project. This can lead to smaller AAR file sizes and faster build times.'
        no-tree-shake-icons: '[AI] `flutter build aar --no-tree-shake-icons` is a command used in Flutter development to generate an Android Archive (AAR) file without tree shaking the icon resources. Tree shaking is a process that removes unused code during the build process to reduce the size of the output file. However, when building an AAR for an Android library, tree shaking icons can lead to errors due to the way Flutter''s asset system works. The `--no-tree-shake-icons` option disables this optimization, ensuring that all icon resources are included in the generated AAR file.'
        null-assertions: '[AI] `flutter build aar --null-assertions` is a command used in Flutter development to generate an Android Archive (AAR) artifact from the Dart code. The `--null-assertions` flag enables null safety in Dart and generates null checks at compile time, which are translated into null checks in Java for the generated AAR file. This helps ensure that null exceptions are handled properly at compile time instead of runtime, improving app stability and reducing potential crashes.'
        obfuscate: '[AI] `flutter build aar --obfuscate` is a command used in Flutter development to create an Android Archive (AAR) artifact of an application with obfuscation applied. Obfuscation is a process of transforming code to make it more difficult for reverse engineering, protecting intellectual property and improving app performance by reducing the size of the code. The `--obfuscate` flag instructs Flutter to use ProGuard or R8 (depending on the setup) as the obfuscation tool when building the AAR file.'
        output-dir: '[AI] `flutter build aar --output-dir` is a command used in Flutter development to build an Android Archive (AAR) artifact from a Flutter project. This command generates the AAR file, which is a packaged library format used by Android Studio for dependency management, inside the specified output directory.'
        profile: '[AI] `flutter build aar --profile` is a command used in Flutter development to generate an Android Archive (AAR) artifact for publishing or distributing a Flutter library as a dependency. The `--profile` option enables Flutter''s incremental compilation and includes only the changed parts of the code during the build process, resulting in faster build times.'
        pub: '[AI] `flutter build aar --pub` is a command used in Flutter development to create an Android Archive (AAR) artifact from the existing project. The `--pub` option is added to include the dependencies declared in the pubspec.yaml file when building the AAR, allowing other projects to use the built AAR as a library dependency without having to manually add each required package. This command generates an Android packaged library that can be easily integrated into external Gradle projects.'
        split-debug-info: '[AI] `flutter build aar --split-debug-info` is a command used in Flutter to generate an Android Archive (AAR) file for a Flutter project with split debug info. Splitting debug info means that the debug information for each library in the project will be packaged separately within the AAR file. This can improve the build time and memory usage during the installation of the app on Android devices or when using tools like Gradle or Android Studio, as they only need to load the relevant debug info for the specific library they are working with.'
        target-platform: '[AI] `flutter build aar --target-platform` is a command used in Flutter, a mobile app development framework. This command generates an Android Archive (AAR) file instead of the default APK or iOS binary during the build process. An AAR file is a library packaged as a single JAR archive with metadata and resources included. This command is particularly useful when building libraries to be used in other projects as dependencies, allowing easier integration into the Gradle-based Android Studio projects.'
        track-widget-creation: '[AI] `flutter build aar --track-widget-creation` is a command used in Flutter development to build an Android Archive (AAR) artifact from a Flutter project. The `--track-widget-creation` option enables the tracking of widget creation, which can be useful when integrating custom Flutter widgets into an Android project using the Gradle build system. This allows for more efficient builds as only the changed widgets are rebuilt instead of the entire project.'
        tree-shake-icons: '[AI] `flutter build aar --tree-shake-icons` is a command used in Flutter development to generate an Android Archive (AAR) file with tree shaking for icon resources enabled. Tree shaking is a process that eliminates unused code during the build process, reducing the size of the resulting APK or AAB file. In this specific command, it applies the same concept to icon resources, ensuring only the necessary icons are included in the AAR file, resulting in smaller app bundle sizes for Android.'
