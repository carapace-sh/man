# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: match
description: Show intentions that match a source or destination
flags:
    --destination: Match intentions with the given destination.
    --namespace=: Specifies the namespace to query.
    --source: Match intentions with the given source.
documentation:
    command: |-
        [AI] The `consul intention match` command is a feature in Consul, a Connect and Service Mesh platform from Hashicorp. It allows users to compare the desired state of an application configuration (stored as Intents) with the current state in Consul's KV store or Catalog.

        The command returns true if the intended state matches the actual state, and false otherwise. This helps ensure that declared configurations are consistent with the configured services and their associated metadata. It aids in maintaining desired application states across an infrastructure.
    flag:
        destination: '[AI] The `consul intent match --destination` command is used with Consul, a service discovery and configuration management tool. This specific command filters the resources in the Consul''s intent based on their destinations. In other words, it helps to find and manage resources (services or configurations) that are intended to be deployed to specific destinations or targets, such as different environments (e.g., staging, production), nodes, or availability zones.'
        namespace: '[AI] The `consul intent match` command is a part of Hashicorp''s Consul service discovery and configuration management tool. This specific command is used to check for differences between the desired state (declared in configuration files or data centers) and the actual state of resources managed by Consul, in a given Kubernetes namespace. The `--namespace` flag filters the check to only consider resources within the specified Kubernetes namespace.'
        source: '[AI] The `consul intent match --source` command in Consul is used to retrieve resources in Consul''s data-center that have an intended state, based on a specific configuration source. This can be helpful for comparing the desired state of resources as defined in your configuration files or external backends with their current state in Consul. By specifying a source, such as `file` or `external`, you can filter the results to only show resources with that configuration source.'
