# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: upgrade
description: upgrade a release
group: main
flags:
    --atomic: if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used
    --ca-file=: verify certificates of HTTPS-enabled servers using this CA bundle
    --cert-file=: identify HTTPS client using this SSL certificate file
    --cleanup-on-fail: allow deletion of new resources created in this upgrade when upgrade fails
    --create-namespace: if --install is set, create the release namespace if not present
    --dependency-update: update dependencies if they are missing before installing the chart
    --description=: add a custom description
    --devel: use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
    --disable-openapi-validation: if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema
    --dry-run: simulate an upgrade
    --force: force resource updates through a replacement strategy
    --history-max=: limit the maximum number of revisions saved per release. Use 0 for no limit
    --insecure-skip-tls-verify: skip tls certificate checks for the chart download
    --key-file=: identify HTTPS client using this SSL key file
    --keyring=: location of public keys used for verification
    --no-hooks: disable pre/post upgrade hooks
    --pass-credentials: pass credentials to all domains
    --password=: chart repository password where to locate the requested chart
    --post-renderer=: the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
    --recreate-pods: performs pods restart for the resource if applicable
    --render-subchart-notes: if set, render subchart notes along with the parent
    --repo=: chart repository url where to locate the requested chart
    --reset-values: when upgrading, reset the values to the ones built into the chart
    --reuse-values: when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored
    --set*=: 'set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --set-file*=: 'set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)'
    --set-string*=: 'set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --skip-crds: if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled
    --timeout=: time to wait for any individual Kubernetes operation (like Jobs for hooks)
    --username=: chart repository username where to locate the requested chart
    --verify: verify the package before using it
    --version=: specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used
    --wait: if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout
    --wait-for-jobs: if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout
    -f, --values*=: specify values in a YAML file or a URL (can specify multiple)
    -i, --install: if a release by this name doesn't already exist, run an install
    -o, --output=: 'prints the output in the specified format. Allowed values: table, json, yaml'
documentation:
    command: '[AI] `helm upgrade` is a Helm (the Kubernetes Package Manager) command used to update or install charts in a Kubernetes cluster. It fetches the latest version of a chart from the specified repository, applies any changes and manages the rolling update of the resources in your release, ensuring zero downtime if possible. This command can also be used with flags like `--reuse-values`, `--force` or `--rollout-idempotency` to customize the upgrade process.'
    flag:
        atomic: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to deploy or update charts (customizable packages of Kubernetes resources). The `--atomic` flag is an optional argument for this command. It instructs Helm to perform the upgrade in an atomic way, meaning that either all the charts are updated successfully to the desired revision, or no changes are made at all if an error occurs during the process. This ensures consistency and minimizes the risk of unexpected errors or partial updates in complex deployments.'
        ca-file: '[AI] `helm upgrade` is a command-line tool used for deploying and managing applications with Helm, a popular package manager for Kubernetes. The option `--ca-file <PATH>` is passed to the `helm upgrade` command when interacting with a TLS-secured Helm repository. It specifies the path to a custom CA bundle file (Containning Certificate Authority) that will be used for authenticating and verifying the identity of the remote registry instead of using the default system CA. This ensures secure communication between your local machine and the Helm repository server.'
        cert-file: '[AI] `helm upgrade` is a command used in Helm, a popular Kubernetes package manager. The `--cert-file` option specifies the path to a client certificate file for secure communication between Helm and the Tiller server (Helm''s REST API server) using HTTPS. This flag ensures that Helm can authenticate itself securely when interacting with Tiller, enhancing security in your Helm deployments.'
        cleanup-on-fail: '[AI] `helm upgrade` is a command used in Helm, a popular Kubernetes package manager, to install, upgrade, and manage applications. The `--cleanup-on-fail` option specifies that if an upgrade fails, Helm should roll back the release to its previous state and delete any temporarily created resources that were part of the failed upgrade process. This helps prevent resource leakage and ensures a consistent cluster state.'
        create-namespace: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install, upgrade, or roll back releases. The option `--create-namespace` creates a new namespace if it does not already exist in the Kubernetes cluster before performing the upgrade or installation. It ensures that resources related to the Helm release will be managed within that specific namespace.'
        dependency-update: |-
            [AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. The `--dependency-update` option is passed to this command for managing Helm releases.

            When you use `helm upgrade` with `--dependency-update`, it not only updates the chart that you're explicitly targeting but also updates any dependent charts automatically. These dependent charts may have their own dependencies, which will be updated as well in a cascading effect. This ensures that your target application and its related components are kept up-to-date with their latest compatible versions.

            In summary, `helm upgrade --dependency-update` is used to perform an update of a Kubernetes Helm release along with its dependent charts.
        description: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. It''s utilized to install, upgrade, or roll back Kubernetes charts. The `--description` flag is optional and can be provided while using this command. It allows you to specify a brief description of what the upgrade does. This description will be displayed during the Helm release update process. Essentially, it helps maintainers and users understand the purpose of each upgrade in version history.'
        devel: '[AI] `helm upgrade --deval` is a command used in Helm, a popular package manager for Kubernetes. This command is used to install or upgrade Helm releases with changes that are still in development, directly from the Helm repository or a local chart repository. The `--devel` flag enables the use of a pre-release version of a Helm chart, which may contain new features, bug fixes, or other enhancements that have not yet been released as stable versions. By using this command, you can stay up-to-date with the latest developments in your applications and gain early access to new features. However, it''s important to note that pre-release versions may contain bugs or instability, so they should be used with caution.'
        disable-openapi-validation: |-
            [AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install or update applications. The option `--disable-openapi-values` disables OpenAPI (previously Swagger) validation during the Helm chart installation or upgrade process.

            OpenAPI (formerly known as Swagger) is a specification that describes the structure and interaction of REST APIs. Helm can validate the OpenAPI definition in the charts to ensure compatibility between the API interface and the implementation, thus preventing potential issues at runtime. However, disabling this validation can speed up the upgrade process or bypass version-incompatible changes that do not affect the application's functionality.

            In summary, using `helm upgrade --disable-openapi-validation` skips OpenAPI (Swagger) validation during the installation/upgrade process to save time or override potential compatibility issues.
        dry-run: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install, upgrade, and manage applications. The `--dry-run` option is used in conjunction with this command to perform a simulation of the intended operation without actually making any changes to your Kubernetes cluster. This allows you to see what resources would be created or updated if you were to run the command without the risk of unintended consequences. It''s useful for reviewing proposed changes before applying them in a production environment.'
        force: '[AI] `helm upgrade --force` is a command used in Helm, the popular package manager for Kubernetes. This command is used to perform an upgrade of a Helm release (a collection of Kubernetes resources managed by Helm) with force. The `--force` flag overrides any pre-upgrade and post-upgrade hooks, as well as skips any rolling update processes, allowing the upgrade to be performed even if there are pending changes or errors in the current release state. It''s important to use this command with caution, as it can lead to data loss or downtime if used on a production deployment without proper planning and testing.'
        history-max: '[AI] `helm upgrade` is a command used by Helm, a popular package manager for Kubernetes, to install, upgrade, and manage applications. The option `--history-max <number>` sets the maximum number of release histories that Helm will keep for rollbacks. By default, Helm keeps up to 5 release histories. Specifying a higher number allows more rollbacks, while specifying a lower number reduces storage usage and older rollback data.'
        insecure-skip-tls-verify: |-
            [AI] `helm upgrade` is a command used by Helm, a popular package manager for Kubernetes, to deploy or update applications on a Kubernetes cluster. The option `--insecure-skip-tls-verify` disables TLS certificate verification during the communication between Helm and the remote Kubernetes server. This means that Helm will not check the authenticity of the server's TLS certificates and trust any certificate presented by the server, even if it's potentially invalid or malicious.

            This flag should be used with caution as skipping TLS certificate verification can pose a security risk. It is recommended to use this option only in trusted environments where the security of the communication channel has already been verified. In most cases, it is safer to ensure that the server's TLS certificates are valid and trusted before running `helm upgrade`.
        install: '[AI] `helm upgrade --install` is a command used in Helm, the Kubernetes Package Manager. This command is used to install or upgrade a chart (a Helm package) in a Kubernetes cluster. The `--install` flag indicates that this is a fresh installation or an update of an existing release managed by Helm. It ensures that Helm will manage the lifecycle of the resources, including creating, updating, and deleting as necessary based on the chart''s configuration.'
        key-file: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. The `--key-file` option is used when upgrading a chart that uses Helm''s Tiller server and requires authentication. With this flag, you can specify the path to a private key file used for signing the Helm release or chart repository. This helps ensure that only authorized users are able to update or install new versions of the chart in your Kubernetes cluster.'
        keyring: '[AI] `helm upgrade` is a command-line tool used to install, upgrade, and manage Helm charts, which are packages of customizable Kubernetes applications. The `--keyring` flag is an optional argument for this command. It specifies the path to a keyring file containing GPG keys that Helm should use for signing and verifying Helm charts. This helps ensure the authenticity and integrity of the installed charts, as each chart can be digitally signed by its author before being distributed.'
        no-hooks: |-
            [AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. The `--no-hooks` flag is an option that can be passed to this command.

            When you run `helm upgrade` without any flags or options, Helm will perform a rolling update of the chart's resources in your cluster, which includes deploying new revisions of the chart's components and updating their configurations using Hook scripts defined in the chart.

            However, when you use the `--no-hooks` flag, Helm will bypass the execution of all pre-upgrade, post-upgrade, and post-install/post-upgrade Hook scripts. This means that the upgrade process will be faster as there's no need to wait for these scripts to run, but any custom logic or validation you may have defined in your Hook scripts will not be executed during the upgrade.

            Therefore, `helm upgrade --no-hooks` is an option for situations where you don't want or need the additional functionality provided by Helm's Hook scripts and are looking to perform a faster upgrade without any script execution.
        output: |-
            [AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install, upgrade, and manage applications. The `--output` option modifies the output format of Helm's progress updates and final status messages.

            When you run `helm upgrade <RELEASE_NAME> <CHART_PATH> --output json`, it returns the output in JSON format. This can be useful for processing the data with scripts or other automated tools. Other available output formats include "text" (default), "table", and "yaml".
        pass-credentials: '[AI] `helm upgrade` is a command-line tool used for deploying and managing applications with Helm, a popular package manager for Kubernetes. The `--pass-credentials` option is used to provide Helm with the necessary authentication credentials to access a Helm repository or chart registry. This flag ensures secure and encrypted transmission of the authentication data during the upgrade process. It can be implemented by using different authentication methods such as Helm''s built-in `tiller` server, Helm''s Kubernetes context, or by providing a Helm file (`.helmrc`) with the necessary credentials information.'
        password: |-
            [AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. This command is utilized to install, upgrade, or roll back versions of Helm charts. When you include the option `--password`, it's asking for a password explicitly.

            This option is intended for use when you are upgrading a chart that requires authentication, such as when using a private repository. The password must be provided in plain text, which is why this command is not commonly used due to security concerns related to exposing the password in plaintext. Instead, it's recommended to use environment variables, Helm secrets or other more secure methods for handling sensitive information.

            Therefore, `helm upgrade --password <your-password>` is a way to provide your password when upgrading a chart that requires authentication, but this method should be used with caution due to its security implications.
        post-renderer: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install, upgrade, and manage applications on a Kubernetes cluster. The `--post-renderer` option is an argument that can be passed to the `helm upgrade` command to specify a custom template renderer to use after Helm has rendered its default templates. This allows users to extend or modify the generated YAML files before they are applied to the Kubernetes cluster, enabling more complex deployment scenarios and customizations.'
        recreate-pods: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. The `--recreate-pods` flag tells Helm to recreate all the pods in a release. This means that if there are any changes in the chart or values file, or if the state of the application''s pods is out of sync with the desired state, Helm will update the Kubernetes manifest files for those pods and then recreate them to apply the changes. This can help ensure that the application is running the latest version of its containers, while minimizing downtime by using rolling updates for other parts of the application.'
        render-subchart-notes: '[AI] `helm upgrade` is a Helm command used to install or upgrade chart releases on Kubernetes clusters. The `--render-subchart-notes` flag is an optional argument that renders and displays the notes of dependent subcharts within the current chart. These notes contain important information about the subcharts, such as installation instructions or configuration options. By using this flag, users can have a better understanding of the dependencies and their associated notes during the upgrade process.'
        repo: '[AI] `helm upgrade` is a command provided by Helm, a popular package manager for Kubernetes. The `--repo` flag specifies the Helm repository to use when searching for or installing charts. Charts are packages of pre-configured Kubernetes applications and resources. By default, Helm uses its predefined repositories. With the `--repo` flag, you can specify an alternative Helm repository (a URL pointing to a Chart Hub index) to expand your chart choices.'
        reset-values: '[AI] `helm upgrade` is a command used in Helm, a popular Kubernetes package manager. The `--reset-values` option resets all the values in the release chart to their defaults before upgrading. This means that any user-defined values in the values file or overridden during installation will be discarded and the charts'' default values will take effect instead. This can be useful when starting a new project, or when you want to revert changes made to the values and restore the application to its original state.'
        reuse-values: '[AI] `helm upgrade` is a Helm command used to deploy or update Kubernetes applications managed by Helm. The `--reuse-values` option tells Helm to reuse existing values from the previous release instead of overwriting them with new values. This can be useful when updating charts while keeping some configuration unchanged to avoid unwanted changes.'
        set: '[AI] `helm upgrade` is a command used in Helm, a popular Kubernetes package manager. The `--set` option allows you to override or update values in your Helm chart without changing the value files itself. This can be useful for passing dynamic or environment-specific values during deployment. With this flag, you provide key-value pairs that will replace the corresponding values in the chart.'
        set-file: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install, upgrade, or roll back applications. The `--set-file` option allows you to override specific values in your Helm chart without modifying the chart itself. Instead, you provide a YAML or JSON file containing the overrides as arguments to this command. For instance, if you have a file named `custom-values.yaml`, you can use `helm upgrade my-release --set-file=custom-values.yaml` to apply its contents to your chart during installation or upgrade.'
        set-string: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. It is utilized to install, upgrade, or roll back versions of Helm charts. The `--set-string` flag, when used with `helm upgrade`, sets the value of a config variable in a chart to a specified string. This can be useful for passing dynamic values during chart upgrades without having to modify the values.yaml file directly.'
        skip-crds: '[AI] `helm upgrade` is a command used in Helm, a popular Kubernetes Package Manager, to deploy or update Kubernetes applications. The `--skip-crds` option is a flag passed with this command. It instructs Helm to not create or update Custom Resource Definitions (CRDs) during the upgrade process. CRDs are used to extend the Kubernetes API schema and define custom resources. By skipping the creation or update of CRDs, you''re explicitly taking responsibility for managing them separately. This flag can be useful when you want to have fine-grained control over your CRDs or if you already have them in place.'
        timeout: '[AI] `helm upgrade` is a command used by Helm, a popular package manager for Kubernetes, to install, upgrade, and manage applications on a Kubernetes cluster. The `--timeout` option sets a time limit for the upgrade process. If the upgrade takes longer than the specified time, Helm will consider it failed. The flag accepts duration values in seconds or a human-readable format like "1m30s" for one minute and thirty seconds.'
        username: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes. It is utilized to install, upgrade, and manage applications on a Kubernetes cluster. The option `--username <username>` is used to specify the Helm Hub username of the user who owns the chart repository being upgraded. This allows for fine-grained access control when using private charts stored in a Helm Hub registry.'
        values: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to upgrade or install charts (Helm packages) in a Kubernetes cluster. The `--values` option is used to specify a values file that overrides the default values defined in the chart. This flag allows users to customize the behavior of the chart without modifying its source code. When you run `helm upgrade --values my-values.yaml mychart`, Helm will merge the content of `my-values.yaml` with the values defined in the chart, creating a new set of configuration values for the upgraded or newly deployed release.'
        verify: '[AI] `helm upgrade --verify` is a command used in Helm, a popular Kubernetes package manager. This command performs a dry-run (no changes are made to the cluster) when upgrading or installing a Helm chart. It checks if there would be any differences between the current state and the desired state of the target application based on the specified chart and values. The output displays the differences, allowing you to review and make adjustments before actually applying the changes to your Kubernetes cluster.'
        version: '[AI] `helm upgrade` is a command-line interface (CLI) tool for installing, upgrading, and managing Helm charts. The specific usage `helm upgrade --version` refers to upgrading or installing a Helm chart to a new version. The "--version" flag specifies the desired Helm chart release version to deploy. When used with the "upgrade" command, it will update an existing release with the new chart version.'
        wait: '[AI] `helm upgrade --wait` is a command used in Helm, a popular Kubernetes package manager. This command is used to upgrade a Helm release with charts, which are customizable application packages, and then wait for the upgrade to complete. The `--wait` flag tells Helm to block the execution of the command until the release''s new version has been successfully deployed by Kubernetes, ensuring that the desired state is achieved.'
        wait-for-jobs: '[AI] `helm upgrade` is a command used in Helm, a popular package manager for Kubernetes, to install or upgrade charts (Helm packages). The `--wait-for-jobs` flag instructs Helm to wait until all the created Kubernetes jobs have finished before exiting. This ensures that any changes made during the upgrade process are fully deployed and ready before proceeding further.'
