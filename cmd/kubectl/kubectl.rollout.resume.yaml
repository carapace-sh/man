# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: resume RESOURCE
description: Resume a paused resource
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --field-manager=: Name of the manager used to track field ownership.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] The `kubectl rollout resume` command is used to resume a paused Kubernetes deployment rollout. When you pause a rollout using `kubectl rollout pause`, new revisions will not be applied to your clusters until you use this command to continue the process. This command allows you to pick up where you left off with the previous rollout, applying any new revisions one at a time to your clusters in a controlled manner.'
    flag:
        allow-missing-template-keys: |-
            [AI] `kubectl rollout resume` is a command used to resume a Kubernetes deployment or rollback that was previously paused with `kubectl rollout pause`. This command restarts the process of updating the replicas in the deployment.

            The option `--allow-missing-template-keys` allows the rollout to continue even if there are missing keys in the new version of the Kubernetes manifest file compared to the previous one. These missing keys will be marked as unscheduled in the new pods, but they won't prevent the rollout from proceeding. This option can be useful when upgrading a complex application with gradually changing configurations or when migrating to a new schema for your application over time.
        field-manager: '[AI] `kubectl rollout resume --field-manager` is a Kubernetes command used to resume a rolled-out deployment that was paused using `kubectl rollout pause`. This command instructs Kubernetes to continue applying the next pending change in the deployment''s rollout history, managed by a specific StrategicMigrationResource (SMR) or Deployment.strategic.autoreplicas.k8s.io controller. It does not apply new changes but resumes the application of previously queued changes.'
        filename: '[AI] `kubectl rollout resume` is a Kubernetes command used to resume a previously paused rollout, which was stopped using `kubectl rollout pause`. This command resumes the deployment or replica set rollout process, applying the next configuration change in the rollout. The `--filename` option is used to specify the file containing the configuration data for the rollout.'
        kustomize: '[AI] `kubectl rollout resume --kustomize` is a command used with Kubernetes and the `kubectl` tool to resume a previously paused or failed rollout using Kustomize custom resource definitions (CRDs). When you apply a Kustomize configuration file, you can pause or undo changes during deployment. This command resumes the rollout from the last applied patch in the Kustomize file sequence. The changes that were rolled back will be reapplied in a rolling update fashion to your cluster resources.'
        output: '[AI] `kubectl rollout resume` is a command used with Kubernetes'' `kubectl` tool to resume a previously paused rollout of a deployment or daemonset. The `--output` flag specifies the output format, and when omitted, the default output format is "none" (plain text). This command applies the changes in the next available rollout phase, resuming the progress towards the desired state for the Kubernetes resource being rolled out.'
        recursive: '[AI] `kubectl rollout resume --recursive` is a Kubernetes command used to resume a previously paused or failed rolling update for multiple levels of replica sets in a deployment. This means it will automatically continue the update process for each level (e.g., if there are multiple replicas sets in a deployment across different pod templates), ensuring that all updates eventually roll out. The `--recursive` flag instructs `kubectl` to perform this action recursively for all nested deployments within the current one. This command can be helpful when encountering issues during a rolling update and needing to resume the process from where it left off, without having to start the entire update over again manually.'
        selector: '[AI] `kubectl rollout resume` is a command used in Kubernetes to resume a previously paused rollout. The `--selector` flag specifies the label selector for the deployments or replicas you want to resume the rollout for. It helps to filter and selectively continue the deployment update process for specific resources based on their labels, instead of resuming all ongoing rollouts indiscriminately.'
        show-managed-fields: '[AI] `kubectl rollout resume` is a command used with Kubernetes to resume a previously paused or rolled back deployment. The `--show-managed-fields` option is used in conjunction with this command and it displays the fields managed by Kubernetes during the rollout process. These fields represent the changes that were planned to be applied during the rollout, but were paused or rolled back. By displaying these fields, users can understand what updates would have been made if the rollout had continued uninterrupted, helping them make informed decisions about resuming or modifying the deployment.'
        template: '[AI] The `kubectl rollout resume --template` command is used to resume a paused Kubernetes deployment or replica set rollout using a custom template for the new version''s pod specification. When you pause a rollout, you can make changes to the pod template before resuming it with this command. The `--template` option allows you to specify a Kubernetes manifest file containing the updated pod specification. This way, you can apply any necessary modifications before continuing the deployment or replica set update.'
