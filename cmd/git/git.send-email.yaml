# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: send-email
description: Send a collection of patches as email
group: interaction
flags:
    --8bit-encoding=: Encoding to assume 8bit mails if undeclared
    --annotate: Review each patch that will be sent in an editor.
    --batch-size=: send max  message per connection.
    --bcc*=: 'Email Bcc:'
    --cc*=: 'Email Cc:'
    --cc-cmd=: 'Email Cc: via `<str> $patch_path`.'
    --cc-cover: 'Email Cc: addresses in the cover letter.'
    --chain-reply-to: 'Chain In-Reply-To: fields. Default off.'
    --compose: Open an editor for introduction.
    --compose-encoding=: Encoding to assume for introduction.
    --confirm=: Confirm recipients before sending;
    --dry-run: Don't actually send the emails.
    --dump-aliases: Dump configured aliases and exit.
    --envelope-sender=: Email envelope sender.
    --force: Send even if safety checks would prevent it.
    --format-patch: understand any non optional arguments as
    --from=: 'Email From:'
    --header-cmd=: Add headers via `<str> $patch_path`.
    --identity=: Use the sendemail.<id> options.
    --in-reply-to=: Email "In-Reply-To:"
    --no-annotate: Review each patch that will be sent in an editor.
    --no-bcc: 'Email Bcc:'
    --no-cc: 'Email Cc:'
    --no-cc-cover: 'Email Cc: addresses in the cover letter.'
    --no-chain-reply-to: 'Chain In-Reply-To: fields. Default off.'
    --no-format-patch: understand any non optional arguments as
    --no-header-cmd: Disable any header command in use.
    --no-signed-off-by-cc: 'Send to Signed-off-by: addresses. Default on.'
    --no-smtp-auth: Disable SMTP authentication. Shorthand for
    --no-suppress-from: Send to self. Default off.
    --no-thread: 'Use In-Reply-To: field. Default on.'
    --no-to: 'Email To:'
    --no-to-cover: 'Email To: addresses in the cover letter.'
    --no-validate: Perform patch sanity checks. Default on.
    --no-xmailer: Add "X-Mailer:" header (default).
    --quiet: Output one line of info per email.
    --relogin-delay=: delay seconds between two successive login.
    --reply-to=: Email "Reply-To:"
    --sendmail-cmd=: Command to run to send email.
    --signed-off-by-cc: 'Send to Signed-off-by: addresses. Default on.'
    --smtp-auth=: Space-separated list of allowed AUTH mechanisms, or
    --smtp-debug=: Disable, enable Net::SMTP debug.
    --smtp-domain=: The domain name sent to HELO/EHLO handshake
    --smtp-encryption=: tls or ssl; anything else disables.
    --smtp-pass=: Password for SMTP-AUTH; not necessary.
    --smtp-server-option*=: Outgoing SMTP server option to use.
    --smtp-server-port=: Outgoing SMTP server port.
    --smtp-server=: Outgoing SMTP server to use. The port
    --smtp-ssl: Deprecated. Use '--smtp-encryption ssl'.
    --smtp-ssl-cert-path=: Path to ca-certificates (either directory or file).
    --smtp-user=: Username for SMTP-AUTH.
    --subject=: Email "Subject:"
    --suppress-cc=: author, self, sob, cc, cccmd, body, bodycc, misc-by, all.
    --suppress-from: Send to self. Default off.
    --thread: 'Use In-Reply-To: field. Default on.'
    --to-cmd=: 'Email To: via `<str> $patch_path`.'
    --to-cover: 'Email To: addresses in the cover letter.'
    --to=: 'Email To:'
    --transfer-encoding=: Transfer encoding to use (quoted-printable, 8bit, base64)
    --validate: Perform patch sanity checks. Default on.
    --xmailer: Add "X-Mailer:" header (default).
documentation:
    command: '[AI] `git send-email` is a Git command used to send emails with patch attachments. It reads email messages from the Git mailbox, formats them, and sends the emails along with the associated patches to the recipients specified in the "To:" field of the email message. This command can be used for sending patches to mailing lists or individuals for review and collaboration.'
    flag:
        8bit-encoding: '[AI] `git send-email` is a Git command used to send emails with patch attachments containing the changes made in a Git repository. The `--8bit-encoding` option specifies that the email messages and their attachments should be encoded using 8-bit character encoding, allowing non-ASCII characters in both the message content and patch filenames to be transmitted without being mangled or corrupted during transfer.'
        annotate: '[AI] `git send-email --annotate` is a Git command used to send annotated emails with patch attachments. When you create or update a commit message using `--annotate`, Git generates a signed, detached commit and creates a MIME message containing the commit message, diff, and signature. The `git send-email` command then sends this email to one or more recipients. This is often used for sharing commits via email in a distributed workflow or when working with remote repositories without direct network access.'
        batch-size: '[AI] `git send-email` is a command-line tool in Git for sending emails with patch attachments to mailing lists or individual recipients. The `--batch-size` option specifies the maximum number of emails (including attached patches) that will be sent in one batch. By default, it''s set to 1 email per send command invocation. Using a larger batch size can reduce the overall number of network connections made and help improve email delivery efficiency. However, consider the mail server capacity, recipient mailbox size and potential email filtering rules when deciding on an appropriate batch size.'
        bcc: '[AI] `git send-email` is a Git command used to send emails with patch attachments to mailing lists or individual recipients. The `--bcc` option stands for Blind Carbon Copy. It allows you to specify email addresses in the "blind carbon copy" field, which are hidden from other recipients in the "To:" and "Cc:" fields of the email. This can be useful when sending emails to multiple people while keeping some addresses private.'
        cc: '[AI] `git send-email --cc` is a Git command used to send emails with patch attachments to multiple recipients. The `--cc` option specifies additional Carbon Copy (CC) recipients, besides the primary recipient, who will receive the email but not the patch attachments. This can be useful for keeping others informed about the change without granting them commit access.'
        cc-cmd: |-
            [AI] `git send-email` is a command in Git used to send emails with patch attachments containing changes made since the last commit. The `--cc-cmd` option specifies a custom command for sending carbon copies (CC) of the email, in addition to the default recipients. This can be useful when working with mailing lists or when following specific email workflows. The format is:

            ```bash
            --cc-cmd="<command> [<arguments>]"
            ```

            Replace `<command>` and `[ <arguments> ]` with the actual command and its arguments, respectively. For example, to CC an email address using OpenSSL, use:

            ```bash
            --cc-cmd="openssl s_mail -s mysender@example.com -r recipient@example.com -t to@example.com < message.txt"
            ```
        cc-cover: '[AI] `git send-email --cc-cover` is a Git command used to send emails with your commit messages and attached patch files to a mailing list or recipients. The `--cc-cover` option ensures that all previous email threads related to the commits are included as CC (Carbon Copy) in the new email, maintaining the context of the conversation. This feature helps keep the discussion threaded and clear for further communication.'
        chain-reply-to: '[AI] `git send-email` is a Git command used to send emails with patch attachments to mailing lists or individuals. The `--chain-reply-to` option sets the Reply-To header in the email to the original sender''s address, so that replies are sent back to the list rather than to the author of the commit message. This ensures that discussion threads remain organized and easy to follow within the mailing list.'
        compose: '[AI] `git send-email` is a Git command used to send emails with patch attachments, which can be helpful for distributing changes outside of a centralized version control system. The `--compose` option instructs the command to create a new message file in your default mail editor, allowing you to modify and customize the email before sending it out. Once the email is composed and saved, `git send-email` will automatically attach the patch files and send them to the specified recipients.'
        compose-encoding: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing for email-based collaboration on Git projects. The option `--compose-encoding` sets the character encoding of the MIME message body parts in the email. By default, it''s set to ''quoted-printable''. You can use other encodings such as ''base64'' or ''7bit'', depending on your needs. This is particularly useful when dealing with non-ASCII characters or binary files in your emails.'
        confirm: '[AI] `git send-email` is a Git command used to send emails with patch attachments to a mailing list or individual recipients. The `--confirm` option is an additional safety feature that requires confirmation before each email is actually sent. This means, after entering the command and providing the list of recipients and emails with attached patches, Git will pause and wait for the user to approve sending each individual email before moving on to the next one in the list. This helps prevent accidental mass emailing or sending to the wrong recipients.'
        dry-run: '[AI] `git send-email --dry-run` is a Git command used to simulate or preview an email sending operation before actually sending it. When you run this command, Git will generate the emails based on your current commit messages and recipient addresses but won''t actually send them out. Instead, it displays the content of the generated emails in the terminal. This can help you check if the emails are being constructed as intended, verify the recipients, or test any email filters that may affect delivery.'
        dump-aliases: '[AI] `git send-email --dump-aliases` is a Git command used to display a list of email aliases configured in your Git configuration file (usually located in `~/.gitconfig`). These aliases are used to simplify the specification of frequently used email addresses when making Git commits or sending emails with Git''s built-in mailing functionality. The output is a simple key-value list, where each key represents an alias name and its corresponding value is the associated email address.'
        envelope-sender: '[AI] `git send-email` is a Git command used to send emails with patch attachments for easy review and collaboration. The option `--envelope-sender` sets the email address that appears in the From field of the generated email message. It allows users to disguise their actual email address, which can be useful for privacy or security reasons.'
        force: '[AI] `git send-email --force` is a Git command used to send emails with patch attachments, updating the recipients'' repositories with new commits. The `--force` option overwrites any existing changes in the recipients'' repositories without asking for confirmation. This can be risky as it may discard unintentionally saved work, so it should be used carefully and only when you are certain that the update is desired.'
        format-patch: '[AI] `git send-email --format-patch` is a Git command used to send emailed patches, which are diffs of changes made in a Git repository. When this command is run with the "--format-patch" option, it generates patch files in the MIME format (Message Input and Output Format) that can be sent via email. These patch files include the commit message, author information, and the diff between the commits. This allows collaborators to review and apply changes without accessing the Git repository directly.'
        from: '[AI] `git send-email --from` is a Git command used to send emails with patch attachments. The `--from` option specifies the email address from which the emails will be sent. It helps maintain a consistent sender email for your Git commits, especially when collaborating with others on a project.'
        header-cmd: '[AI] `git send-email` is a Git command used to send email notifications of committed changes to a mailing list or collaborators. The `--header-cmd` option is an argument for this command that allows specifying custom headers in the email message, using a shell command. By providing a shell command instead of static headers, users can generate dynamic and complex header information, such as inserting the current date or project-specific metadata. This option is particularly useful when working with large or complex projects, where automating email headers can save time and reduce potential errors in manually adding headers to each message.'
        identity: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing collaboration via email for projects not hosted on a public Git server. The `--identity` option sets the sender identity for the email, specifying name and email address. This does not affect your local Git commit history or email account but helps maintain a clear sender identity when collaborating on projects with others.'
        in-reply-to: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically for contributing changes to open source projects. The `--in-reply-to` option sets the In-Reply-To header in the email, simulating a reply to an existing thread. This allows your email to be threaded properly and keeps the conversation organized.'
        no-annotate: '[AI] `git send-email` is a command used to send emails with patches attached, which can be useful for distributing changes made in Git repositories. The `--no-annotate` option disables the attachment of annotated tags as messages in the email. Instead, only the diff and patch files will be included in the email. This can reduce the size of the emails and make them easier to handle.'
        no-bcc: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically used for sending commit diffs for review or collaboration. The `--no-bcc` option disables the blind carbon copy (BCC) mode when sending emails. In BCC mode, recipient email addresses are hidden from other recipients in the "To:" field and only visible in the BCC field. With this option turned off, all recipients'' email addresses will be visible in the "To:" field of the email.'
        no-cc: '[AI] `git send-email --no-cc` is a Git command used for sending email notifications about committed changes. The `--no-cc` option means that the command will not include other recipients in the "To:" field, but only the author and the committers of the commits being emailed. This can be useful if you want to keep your list of email recipients private or limited.'
        no-cc-cover: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically used for mailing list contributions. The `--no-cc-cover` option instructs it not to include the list of recipients in the body and header of the email cover. This can be useful when sending emails to a large number of recipients to keep the message size small.'
        no-chain-reply-to: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically for mailing list contributions or collaborative development. The option `--no-chain-reply-to` prevents the email from including the original email thread in the reply-to header. This means that recipients will not receive replies directed to the sender of the initial email, but instead will need to use the email''s To: field or reply all to maintain the conversation.'
        no-format-patch: '[AI] `git send-email` is a command in Git used to send emailed patches for review or collaboration. The `--no-format-patch` option disables the formatting of patches before sending. Instead, the raw patch data will be included directly in the email body as text, making it less user-friendly but preserving the exact patch format and allowing for easier customization with filters or scripts.'
        no-header-cmd: '[AI] `git send-email` is a command in Git for sending emails with patch attachments, allowing collaboration via email. The `--no-header-cmd` option disables the use of an external command to set email headers. Instead, it uses default headers based on your Git configuration and your system''s mail user agent (MUA).'
        no-signed-off-by-cc: '[AI] `git send-email` is a Git command used to send emails with patch attachments for each commit in a given range. The `--no-signed-off-by-cc` option disables the automatic addition of "Signed-off-by:" lines in both the email message and the patch, which usually serves as a confirmation from the committer that they have reviewed and approved the changes. This option may be preferred when working with projects or teams where the email signing process is centralized or automated differently.'
        no-smtp-auth: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically for mailing list contributions. The `--no-smtp-auth` option disables the use of SMTP authentication when sending emails. Instead, it relies on the system''s email client configuration or the environment variable `$MAILER_ARGS` to determine the email delivery method. This can be useful if your network or organization requires a specific email setup that doesn''t support SMTP authentication.'
        no-suppress-from: '[AI] The `git send-email` command is a Git utility used to send emails with patch attachments, allowing for collaboration via email. The `--no-suppress-from` option disables the automatic removal of the sender''s address from the "From" header in the generated emails. This might be useful when you want to ensure that recipients can clearly identify who is sending the email, especially in cases where multiple contributors are working on a project and sending patches via email.'
        no-thread: '[AI] `git send-email --no-thread` is a Git command used to send emails with patch attachments. The `--no-thread` option disables the threading of replies in the email. In other words, each email will have its own separate conversation thread instead of being nested under another email. This can be useful when you want to keep the email conversations organized or when dealing with multiple related but independent changes.'
        no-to: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing for email-based collaboration on software projects. The `--no-to` option is an argument that modifies its behavior. Specifically, it prevents the command from adding the recipients'' email addresses to the "To:" field of the email message. Instead, users must manually specify the email addresses when composing their message in their email client or using another method. This option may be useful for organizations with strict email policies, where automated email sending is not permitted.'
        no-to-cover: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing for easy and efficient distribution of changes among collaborators. The `--no-to-cover` option modifies the email header to exclude the list of affected files in the message body, keeping the email content focused on the commit message.'
        no-validate: '[AI] `git send-email --no-validate` is a Git command used to send emails with patch attachments, notifying recipients of changes made in a Git repository. The `--no-validate` option disables email address validation during sending. This can be useful when sending emails to a large number of recipients or when the email addresses may not be readily available in an easily validated format, as the command will still send the emails even if some addresses are incorrect or invalid. However, note that sending emails with invalid or incorrect addresses could result in delivery failures or unwanted emails, so it''s important to double-check the recipients'' email addresses before using this command.'
        no-xmailer: '[AI] `git send-email` is a Git command used to send emails with patch attachments generated by Git''s diff or format commands. The `--no-xmailer` option disables the use of `MUA` (Mail User Agent) like Thunderbird or Evolution for composing and sending the email. Instead, it writes the email message in a MIME format to a file, allowing you to manually send the email using your preferred mail client or the command line mail tool.'
        quiet: '[AI] `git send-email --quiet` is a Git command used to send emails with patch attachments for committed changes. The `--quiet` option reduces the amount of output and progress messages during the email sending process. This can be useful when automating the command or for running it in background, as it minimizes interruptions and focuses on completing the task silently.'
        relogin-delay: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing collaboration via email. The option `--relogin-delay` sets a delay between relogin attempts when sending emails through an SMTP server that requires authentication. This helps comply with some servers'' rate limits and can prevent being blocked due to excessive login attempts within a short period.'
        reply-to: '[AI] `git send-email` is a command-line tool for sending Git commit emails to a mailing list or individual recipients. The `--reply-to` option sets the email address that replies will be sent to, different from the sender''s address. This can be useful when wanting to hide your personal email address or using a specific account for sending emails.'
        sendmail-cmd: '[AI] `git send-email --sendmail-cmd` is a Git command used to send emails with patch attachments. The `--sendmail-cmd` option allows specifying an external mail transport agent (MTA) for sending the emails. Instead of using the system default MTA, you can specify a custom one, which could be useful when dealing with specific email servers or configurations. This command facilitates mass emailing of commit messages and patch diffs to a list of recipients.'
        signed-off-by-cc: '[AI] `git send-email --signed-off-by-cc` is a Git command used to send emails with patch attachments, following the "emailed-patch workflow" for contributing changes to projects that use email as their primary collaboration channel. The `--signed-off-by-cc` option adds the list of CC recipients to the `Signed-off-by:` line in each commit message, ensuring they acknowledge the contribution. This line acts as a digital signature, confirming they have reviewed and approve the changes before sending them out for review.'
        smtp-auth: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing collaboration via email. The `--smtp-auth` option enables authentication using Simple Mail Transfer Protocol (SMTP) servers that require it. This ensures secure and reliable email delivery by providing username and password to the SMTP server.'
        smtp-debug: '[AI] `git send-email --smtp-debug` is a Git command used to send emails with commit messages as attachments to a mailing list or recipients. The `--smtp-debug` flag enables verbose debug output, providing detailed information about the email sending process using SMTP (Simple Mail Transfer Protocol). This includes the exchange of messages between the email client and server during the sending process.'
        smtp-domain: '[AI] `git send-email` is a Git command used to send emails with patch attachments, allowing for email-based collaboration on Git projects. The `--smtp-domain` option is used to specify the domain part of the SMTP server email address, completing the full email address in the format "username@smtp-domain". For example, if your username is "myusername" and your SMTP server domain is "example.com", you would use `--smtp-domain=example.com` when sending emails using `git send-email`.'
        smtp-encryption: '[AI] `git send-email` is a Git command used to send emails with patch attachments to mailing lists or individual recipients. The `--smtp-encryption` option specifies the encryption method for SMTP communication between the local machine and the email server. It supports SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols, ensuring secure data transmission during email delivery.'
        smtp-pass: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically used for sending commits or pull requests via email. The `--smtp-pass` option is a method to provide the password for the Simple Mail Transfer Protocol (SMTP) server authentication when sending emails through this command. This is useful if your email provider requires authentication to send emails from the command line, and the password needs to be kept private. With `--smtp-pass <password>`, you can provide the password directly to the command without storing it in plain text in a configuration file or other publicly accessible location.'
        smtp-server: '[AI] `git send-email` is a Git command used to send emails with patch attachments. The `--smtp-server` option specifies the SMTP server and related settings (such as authentication) for sending emails through that server. This allows users to use an email server other than their default mail client or local mail transfer agent.'
        smtp-server-option: |-
            [AI] `git send-email` is a Git command used to send email notifications about commits and other events to mailing lists or individual recipients. The option `--smtp-server-option` allows you to specify custom SMTP (Simple Mail Transfer Protocol) server settings when sending emails. This can be useful if your organization uses a specific email server with unique requirements, such as authentication methods like TLS or SSL, or custom ports. For example:

            ```bash
            git send-email --to recipient@example.com \
              --smtp-server smtp.example.com:587 \
              --smtp-user username@example.com \
              --smtp-pass password \
              <commit-hash>
            ```

            This command sends an email with the specified `--to` recipient, using the SMTP server located at smtp.example.com on port 587, and provides the required authentication information via `--smtp-user` and `--smtp-pass`.
        smtp-server-port: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically for contributing changes to open source projects. The `--smtp-server-port` option specifies the custom port number for the Simple Mail Transfer Protocol (SMTP) server when sending emails via a non-standard SMTP server. For instance, if your email provider uses a non-default SMTP port, you can set it with this option to ensure successful email delivery.'
        smtp-ssl: '[AI] `git send-email` is a Git command used to send emails with patch attachments, typically for submitting changes to projects that use email-based workflows like the mailing list model. The `--smtp-ssl` option specifies that the SMTP server used for sending emails should use SSL/TLS encryption for secure communication between the client and the server.'
        smtp-ssl-cert-path: '[AI] `git send-email` is a Git command used to send email notifications about committed changes to a mailing list or collaborators. The option `--smtp-ssl-cert-path` specifies the path to an SSL certificate file to be used when sending emails securely over SMTP with Transport Layer Security (TLS) encryption. By providing this certificate, Git can authenticate and encrypt the connection between the email client and the SMTP server. This ensures secure transmission of the email communication containing the commit information.'
        smtp-user: '[AI] `git send-email` is a Git command used to send emails with patch attachments. The `--smtp-user` option specifies the email address associated with your SMTP server authentication. When sending emails through an SMTP server, this option allows you to provide the email address that will be used as the sender''s address in the email headers.'
        subject: '[AI] `git send-email` is a Git command used to send emails with patch attachments, making it easy to share changes made in Git repositories with others via email. The `--subject` option sets the subject line of the email message. It''s essential for clear communication about the content of the changes being shared.'
        suppress-cc: '[AI] `git send-email --suppress-cc` is a command used in Git to send email notifications about committed changes. The `--suppress-cc` option hides the list of recipients in the body of the email, keeping it visible only in the "To:" field. This can be useful when sending emails to large groups or when wanting to keep the recipient list private.'
        suppress-from: '[AI] `git send-email` is a command in Git for sending emails with patch attachments. The `--suppress-from` option tells Git to exclude the original sender''s email address from the "From" field of the generated email message. Instead, it uses only the recipient''s email address. This can be useful when you want to hide your own email address as the sender or if you''re forwarding emails on behalf of someone else.'
        thread: '[AI] `git send-email` is a Git command used to send emails with patch attachments, making it easy to share changes made in a Git repository with others. The `--thread` option adds threading to the emails, which keeps the conversation history of each topic in a single email chain. This helps maintain context during discussions and makes following the flow of emails easier for recipients.'
        to: '[AI] `git send-email` is a Git command used to send emails with patch attachments, enabling collaboration on email lists or projects where communication primarily takes place via email. The `--to` option specifies the recipient email addresses for the messages. Multiple addresses should be separated by commas. For example: `git send-email --to user1@example.com,user2@example.com <commit-hash>`.'
        to-cmd: '[AI] `git send-email` is a Git command used to send emails with patch attachments to mailing lists or individual recipients. The `--to-cmd` option modifies how email addresses are read from the `TO` field in the email message. Instead of reading addresses directly from the `TO` field, `git send-email` executes an external command for each address, passing it the address as an argument. This can be useful when dealing with complex mailing list configurations or when sending emails to recipients whose addresses are stored in a non-standard format (e.g., in a file or database).'
        to-cover: '[AI] `git send-email --to-cover` is a Git command used to send emails with patch attachments to a list of recipients. The "--to-cover" option means that the email will be sent to all recipients listed in the "To:", "Cc:," and "Bcc:" fields in the most recent commit message or the current email draft. This allows for easy mass communication of changes without revealing individual email addresses.'
        transfer-encoding: |-
            [AI] `git send-email` is a Git command used to send emails with patch attachments. The `--transfer-encoding` option specifies how the message body and patch attachments are encoded during email transmission.

            By default, `git send-email` uses 7bit encoding for message bodies and MIME (Multipurpose Internet Mail Extensions) encoding for patch attachments. However, some email servers might not support MIME type attachments, causing the email to fail.

            To overcome this issue, you can use other transfer encodings like "base64" or "quoted-printable". To set these encodings, you can pass `--transfer-encoding=<encoding>` as an argument when invoking `git send-email`. For instance, `--transfer-encoding=base64` sets base64 encoding for patch attachments. This allows the patch data to be encoded in the email body itself and reduces the chances of email delivery failure due to MIME type support issues.
        validate: '[AI] `git send-email --validate` is a Git command used to check the email messages prepared for sending using `git format-patch`. It validates the emails against various rules such as email address format, presence of a From header, and MIME type. The command does not actually send the emails but only checks their syntax and reports any issues found. This is useful when preparing a large number of patches to be sent out for review or distribution.'
        xmailer: '[AI] `git send-email` is a Git command used to send emails with patch attachments for each committed change. The `--xmailer` option sets an X-Mailer header in the email''s message body, specifying the name and version of the mailing list manager used (in this case, Git). This information can be useful for mail filtering and understanding the origin of the email.'
