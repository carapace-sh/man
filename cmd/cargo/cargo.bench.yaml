# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bench
description: Execute all benchmarks of a local package
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Benchmark all targets
    --bench*=: Benchmark only the specified bench target
    --benches: Benchmark all benches
    --bin*=: Benchmark only the specified binary
    --bins: Benchmark all binaries
    --example*=: Benchmark only the specified example
    --examples: Benchmark all examples
    --exclude*=: Exclude packages from the benchmark
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Benchmark only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --no-fail-fast: Run all benchmarks regardless of failure
    --no-run: Compile, but don't run benchmarks
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Benchmark only the specified test target
    --tests: Benchmark all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Benchmark all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package to run benchmarks for
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo bench` is a Cargo subcommand used for running and reporting on benchmarks defined in your Rust project''s `Cargo.toml`. It automatically discovers, builds, and runs the specified benchmarks. The results include statistics such as average, minimum, maximum, and standard deviation of each benchmarked function''s execution time. These statistics help evaluate the performance improvements in your code.'
    flag:
        all: '[AI] `cargo bench` is a Rust package manager tool used to execute and measure the performance of Rust code using built-in or user-defined benchmarks. The `--all` flag is an option for `cargo bench` command, which by default only runs the benches defined in the current directory''s Cargo.toml file. The `--all` flag, however, instructs `cargo bench` to run all the available benchmarks across the project tree, regardless of their location. It helps in running and measuring the performance of all defined benchmarks within a multi-crate Rust project.'
        all-features: '[AI] `cargo bench` is a Cargo subcommand for running benchmarks in Rust projects. The `--all-features` flag is used to run benchmarks for all features defined in the project''s `Cargo.toml` file. It ensures that the benchmarks for each enabled feature are executed, providing a more comprehensive assessment of the performance across the entire project.'
        all-targets: '[AI] `cargo bench` is a Cargo subcommand used for running benchmarks in Rust projects. The `--all-targets` flag instructs `cargo bench` to run benchmarks for all targets within the project, rather than just the default target. It helps in getting an overview of the performance of various parts of the codebase by executing benchmarks across multiple components or configurations.'
        bench: '[AI] `cargo bench` is a Rust programming language command-line tool provided by Cargo, the Rust package manager. The `--bench` flag is used to execute benchmarks defined in the project''s source code using the built-in benchmarking library. When you run `cargo bench --bench <benchmark_name>`, it will only run the specified benchmark test instead of all available benchmarks. It measures and reports performance metrics like number of iterations per second (iters/sec), memory usage, and other relevant statistics to help developers optimize their code for better efficiency.'
        benches: '[AI] `cargo bench` is a Rust language CLI tool used for running and managing performance tests. The command `--benches` is an option that specifies which benchmarks to run. When used with the `run` subcommand, it will execute only the named benchmarks instead of all available ones. It''s essential in continuous integration workflows or when focusing on specific performance issues.'
        bin: '[AI] `cargo bench` is a Cargo subcommand used for running and measuring the performance of Rust libraries or binaries. The `--bin` option specifies which binary to run when executing multiple binaries within a project. When using this command with a binary, it will measure its performance metrics (like execution time) during each run and report the statistics.'
        bins: '[AI] `cargo bench` is a Cargo subcommand used for running and measuring the performance of Rust binaries. The `--bins` flag is an option that specifies which binary targets to include in the performance measurement. Instead of measuring the whole project, you can measure specific binaries by providing their names or paths as arguments to this flag. This allows for more targeted and precise benchmarking results.'
        example: '[AI] `cargo bench` is a Cargo subcommand used for running and reporting on benchmarks in Rust projects. The `--example` flag is used to specify which benchmark example to run instead of the default one. When you run `cargo bench --example <example_name>`, it will only execute the benchmarks defined under that specific example name.'
        examples: '[AI] `cargo bench` is a Rust library for writing and running regression tests, often used in continuous integration workflows. The `--examples` flag is an option to this command that tells Cargo to build and run the examples within the project instead of just running the regression tests. These examples can be standalone test cases or larger pieces of code meant to demonstrate the usage of specific features within a library or application.'
        exclude: '[AI] `cargo bench` is a Rust library used to run and report on benchmarks defined in a project using the Cargo build system. The `--exclude` flag is an option for `cargo bench` that allows you to exclude specific benchmark tests from being run during the command invocation. This can be useful when you want to focus on testing a subset of your benchmarks or if certain benchmarks are known to cause issues with the benchmarking tool itself. The excluded benchmarks will not be included in the report generated by `cargo bench`.'
        features: '[AI] `cargo bench --features` is a command used in Rust programming language''s Cargo build tool to run benchmarks with specific features enabled. The `--features` flag allows specifying a comma-separated list of feature names, which will be enabled during the benchmarking process. This can be useful when testing code that depends on certain features and wanting to ensure consistent performance across different configurations.'
        help: |-
            [AI] The `cargo bench` command is a part of Rust's package manager, Cargo. It is used to run and manage benchmarks for your Rust projects. When you run `cargo bench --help`, it provides you with the following information:

            - `--help` displays this help message and exits
            - `--manifest-path PATH` specifies the manifest file (Cargo.toml) to use instead of the default one in the current directory
            - `--quiet` or `-q` suppresses progress and status messages
            - `--release` builds your project using release mode before running benchmarks
            - `--test` runs tests before benchmarks
            - `-- (arguments for individual benchmarks)` can be provided to override the default arguments for a specific benchmark, such as `--args`.

            These options allow you to customize how `cargo bench` operates when running your project's benchmarks.
        ignore-rust-version: '[AI] `cargo bench` is a Cargo subcommand used to run benchmarks for Rust projects. The `--ignore-rust-version` flag is an option that can be passed to this command. It tells Cargo to not check the Rust version specified in the project''s Cargo.toml file and instead use the currently installed Rust compiler version for running the benchmarks. This can be useful when working with multiple projects that have different Rust version requirements, or when testing benchmarks with a different Rust compiler version than what is used by default.'
        jobs: '[AI] `cargo bench` is a Rust tool for running and reporting the performance of your project. The `--jobs` flag specifies the number of parallel jobs to run when executing benchmarks. By default, it is set to one job, meaning each benchmark will be executed sequentially. With `--jobs N`, you can instruct `cargo bench` to run up to `N` benchmarks in parallel, potentially reducing the overall time required to complete the benchmarks.'
        keep-going: '[AI] `cargo bench` is a Rust library testing tool that provides a harness for executing tests with detailed statistics and progress indicators. The `--keep-going` flag is an option provided to this command, which instructs it to continue running tests even if some of them fail. This can be useful when you have large test suites or when you want to quickly check the success of a subset of your tests without being halted by failures in others.'
        lib: '[AI] `cargo bench` is a Rust command-line tool used for running and measuring the performance of Rust libraries or binaries. The `--lib` flag is an option passed to `cargo bench`. It instructs `cargo bench` to run tests on a library target, instead of a binary one. This means that the focus is on measuring the performance of the library code itself, without running any external dependencies or binaries.'
        manifest-path: '[AI] `cargo bench` is a Rust tool for running and measuring the performance of executables or libraries. The `--manifest-path` flag is used to specify the path to the Cargo manifest file, which is where `cargo` looks for project metadata such as dependencies and build scripts. By providing this flag, you ensure that `cargo bench` uses the correct configuration from the specified manifest file when running benchmarks.'
        message-format: '[AI] `cargo bench` is a Cargo subcommand used for running benchmarks in Rust projects. The `--message-format` option specifies how the output messages from the benchmark tests should be formatted. By default, Cargo uses the simple format, displaying the name of each benchmark and its corresponding time or throughput measurements. However, with the JSON format (`--message-format json`) you can get a more detailed output in JSON format that is easier to parse by other tools. Other available formats include tabular (`tabular`) and pretty (`pretty`).'
        no-default-features: '[AI] `cargo bench` is a Rust command-line tool for running and measuring the performance of tests or binaries using the Cargo test framework. The `--no-default-features` flag is used to disable all default features for the target when building or testing. This means that only the explicitly specified features will be included in the build or test, allowing fine-grained control over which features are used and potentially improving build times or reducing binary size.'
        no-fail-fast: '[AI] The `--no-fail-fast` flag for Cargo, Rust''s package manager, disables early failure of builds and tests. By default, Cargo will stop at the first error it encounters during a build or test. With this flag, it continues running the entire process before reporting any failures. This can be useful when debugging complex issues or when dealing with multiple components that depend on each other. However, note that using `--no-fail-fast` might hide errors and make it harder to identify the root cause of a problem.'
        no-run: '[AI] `cargo bench` is a Rust library command for executing and reporting on benchmarks defined in your project''s `Cargo.toml`. The `--no-run` flag is used to only generate the benchmark reports without actually running the benches. This can be useful when you want to preview the report format or compare benchmark results between different branches or builds without incurring the additional time and resource costs of running the benchmarks themselves.'
        package: '[AI] `cargo bench` is a Cargo subcommand used for running and measuring the performance of Rust libraries or binaries using the built-in benchmarking feature. The `--package` option specifies the name of the package to test, which can be a local path, Git URL, or registry URL. For example, `cargo bench --package my_project` runs benchmarks for the "my\_project" package within the current Cargo project.'
        profile: '[AI] `cargo bench` is a Rust testing tool that focuses on measuring the performance of your project using the Cargo build system. The `--profile` option is used to specify which test profile to run. Profiles allow you to fine-tune the runtime environment, such as setting environment variables or adjusting resource limits, for specific tests. By using a test profile with `cargo bench`, you can get more accurate and meaningful performance measurements tailored to your use case.'
        quiet: '[AI] `cargo bench` is a Rust language tool for executing and measuring the performance of your project''s benchmarks. The `--quiet` flag is used to suppress all output except for the final benchmark results, making it suitable for running benchmarks in automated or batch processing scenarios where detailed console output isn''t required.'
        target: '[AI] `cargo bench` is a Rust tool for running and reporting statistics on benchmarks defined in your project using the `#[bench]` attribute. The `--target` option specifies which target to run the benchmarks on. For example, `cargo bench --target=debug+desktop` runs the benchmarks for the `debug` configuration and the `desktop` target. It can also be used with multiple targets by separating them with a space, e.g., `cargo bench --target=release+web`.'
        target-dir: '[AI] `cargo bench` is a Rust command-line tool used for running and reporting on the performance of tests or binaries defined in a Cargo project. The `--target-dir` flag specifies the directory where the generated benchmark artifacts will be saved. When you run `cargo bench --target-dir <path>`, it executes the benchmarks and stores the results in the specified path, allowing for easy access and analysis.'
        test: '[AI] `cargo bench --test` is a command used in Rust programming language''s build system, Cargo. The command runs the benchmarks defined in the project using the built-in Benchmarking harness. The `--test` flag indicates that regular unit tests should also be run before and after each benchmark to ensure test suite compatibility.'
        tests: '[AI] `cargo bench --tests` is a command used in Rust programming language''s build system, Cargo. It runs the benchmarks and tests defined in a project''s `Cargo.toml` file. The `--tests` flag ensures that only the tests are run, not the benchmarks or any other targets. This is useful for quickly checking if tests pass before building or running other parts of the project.'
        timings: '[AI] `cargo bench` is a Rust package used for running and measuring the performance of Rust crates using their own test data. The `--timings` flag is an option provided by `cargo bench`. It enables detailed timing information to be printed during the benchmarking process, including the time taken to run each test case and the minimum, maximum, mean, median, and standard deviation of those times. This information can be useful for identifying which tests are taking longer than expected or exhibiting significant variability in their results.'
        unit-graph: '[AI] The `cargo bench` command is a tool provided by Rust''s package manager, Cargo, for running and reporting on the performance of your Rust project''s tests or benchmarks. The `--unit-graph` flag generates an interactive Uniform Sampling Model (USM) graph after running benchmarks. This graph helps identify trends, outliers, and performance bottlenecks within your benchmarks by displaying their distribution against a statistical model of the expected variability.'
        workspace: '[AI] `cargo bench` is a Rust library used for running and tracking benchmarks. The `--workspace` flag is used when you have multiple projects in a single Cargo workspace, and you want to run the benchmarks for all of them. It tells `cargo bench` to discover and run the benchmarks for all projects defined in the current Cargo.toml file. This can help save time by running multiple sets of benchmarks with a single command.'
