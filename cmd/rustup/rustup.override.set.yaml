# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set
description: Set the override toolchain for a directory
flags:
    --path=: Path to the directory
    -h, --help: Prints help information
documentation:
    command: '[AI] `rustup override set` is a Rust toolchain command that allows you to temporarily set a specific Rust version or toolchain as the default for your project, overriding any global or project-level settings. This can be useful when working on multiple projects with different Rust requirements without having to switch between toolchains repeatedly. The command takes the name of the toolchain or Rust version as an argument. For example: `rustup override set my_project 1.48.0`.'
    flag:
        help: |-
            [AI] `rustup override set` is a Rust tool command used to manage local overrides for Rust versions or source registry settings in `rustup`. The `--help` flag provides information about the possible usage of this command with the following options:

            1. `<name>`: A name for the override set. It's required and should be descriptive.
            2. `add <key> [value]`: Add a new key-value pair to the override set. For example, to add a Rust version override, use `-- add <rust-version>`.
            3. `remove <key>`: Remove an existing key from the override set.
            4. `use <name>`: Switch to using the specified override set.
            5. `list`: Display all available override sets and their contents.
            6. `rm <name>`: Remove an entire override set.
        path: '[AI] `rustup override set --path` is a command used with Rustup, a tool for managing multiple versions of Rust compilers and other related components. This command sets a custom path for a specific Rust toolchain override. In other words, it allows you to specify an alternative location from where Rustup should install or use a particular Rust toolchain. This can be useful when working with multiple projects that require different versions of Rust.'
