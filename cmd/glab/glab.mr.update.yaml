# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update [<id> | <branch>]
description: Update merge requests
flags:
    --draft: Mark merge request as a draft
    --lock-discussion: Lock discussion on merge request
    --remove-source-branch: Toggles the removal of the Source Branch on merge
    --reviewer*=: request review from users by their usernames, prefix with '!' or '-' to remove from existing reviewers, '+' to add, otherwise replace existing reviewers with given users
    --squash-before-merge: Toggles the option to squash commits into a single commit when merging
    --target-branch=: set target branch
    --unassign: unassign all users
    --unlock-discussion: Unlock discussion on merge request
    --wip: Mark merge request as a work in progress. Alternative to --draft
    -a, --assignee*=: assign users via username, prefix with '!' or '-' to remove from existing assignees, '+' to add, otherwise replace existing assignees with given users
    -d, --description=: merge request description; set to "-" to open an editor
    -l, --label*=: add labels
    -m, --milestone=: title of the milestone to assign, pass "" or 0 to unassign
    -r, --ready: Mark merge request as ready to be reviewed and merged
    -t, --title=: Title of merge request
    -u, --unlabel*=: remove labels
documentation:
    command: '[AI] The `glab mr update` command is used with GitLab''s CLI tool, Glab. It updates a merge request (MR) in GitLab by fetching any new changes from the remote repository and applying them to your local branch. This command helps keep your MR up-to-date with the latest developments in the project before merging it back into the main branch.'
    flag:
        assignee: '[AI] `glab` is a Git client for GitHub written in Rust, providing an alternative to the official GitHub for Windows or Mac applications. The command `glab mr update --assignee <username>` is used to update a merge request (MR) with new changes while assigning it to a specific user (specified by `<username>`). This can be useful when making iterative improvements on an MR or collaborating with team members.'
        description: '[AI] The `glab mr update --description` command is used with GitLab''s `glab` tool to fetch and apply merge requests (MRs) locally. The `--description` option specifically instructs `glab` to include the description of the MR in the Git commit message when applying it as a patch. This allows developers to keep track of the changes made by each MR during local development, making it easier to understand the context and purpose of the changes.'
        draft: |-
            [AI] `git fetch origin`: Retrieves new commits and updates local repository's remote-tracking branches from 'origin'. This is a prerequisite for the following command.

            `git pull origin <branch-name> --rebase --draft`: Fetch new commits from the remote branch, then reapply your local changes on top of them using an interactive rebase. The `--draft` flag creates or updates a draft pull request instead of merging the commits into the current branch. This allows reviewers to provide feedback before the changes are merged.
        label: '[AI] The `glab mr update --label` command is used with GitLab''s Glab tool to update a merge request (MR) with a specific label. This command fetches the latest changes from the branch associated with the MR, merges it locally, and then applies the given label to the updated MR. It also opens an editor to allow you to review and commit the local changes before pushing them back to GitLab. The label name is specified after the `--label` option.'
        lock-discussion: |-
            [AI] The `git fetch` and `git pull` commands are used to retrieve new changes from a remote repository. However, they do not prevent concurrent modifications to the same files among collaborators, which could lead to conflicts when merging the changes.

            The `glab mr update --lock-discussion` command is an alternative way to handle merge requests in GitLab using Forking Workflow. This command fetches the latest changes from the remote repository, applies them as local branches, and locks the merge request for discussion. It also creates a local branch with the same name as the merge request, so you can review and test the proposed changes before merging.

            Once the `glab mr update --lock-discussion` command is executed, other collaborators cannot modify the merge request until it's unlocked. This helps prevent conflicts and ensures that all team members have a clear understanding of the current state of the changes before merging them into the main branch.
        milestone: '[AI] The `glab mr update --milestone` command is used with GitLab''s glab tool for managing Merge Requests (MRs) from the command line. The `--milestone` option specifies which milestone to update when merging an MR, allowing you to ensure that your changes are targeted towards a specific development cycle or release goal. When you run this command, it fetches the latest state of the MR and its associated branch, then applies any new commits since the last fetch, resolves any conflicts, and finally updates the milestone association for the merged commit. This can be useful in large teams or projects where multiple MRs need to be merged against a specific milestone.'
        ready: '[AI] `glab` is a Git interface for Kubernetes, and `mr update --ready` is an `git-merge-request` subcommand used to update a merge request with the latest changes from the source branch. The `--ready` flag signifies that the command should only apply changes that do not introduce new conflicts. If conflicts are introduced, the merge request will remain in an "in progress" state and require manual resolution before it can be merged.'
        remove-source-branch: '[AI] The `glab mr update --remove-source-branch` command is a GitLab CLI (Command Line Interface) command used to update a merge request (MR) with changes from the current branch, and remove the source branch once the MR is successfully merged. This command can be useful when working in a continuous integration/delivery environment where it''s desired to keep the source branch clean after merging changes. The `--remove-source-branch` option ensures that the branch used as the source for the merge request will be deleted after the merge is completed, thus reducing clutter and maintaining a tidy repository structure.'
        reviewer: '[AI] The `glab mr update --reviewer` command is a GitLab CI/CD pipeline stage using Glab, an open-source Gitops toolkit for GitLab. This specific command updates a merge request (MR) in GitLab and assigns the specified reviewer to it. The reviewer can then review and provide feedback on the changes proposed in the MR before it''s merged into the target branch.'
        squash-before-merge: |-
            [AI] The `git lab mr update --squash` command is used in GitLab Merge Requests to apply new commits onto an existing merge request, while squashing them into a single commit with a clear and descriptive commit message.

            By using the `--squash-before-merge` option, Git will create an interactive rebase session where you can modify, combine, or drop commits before they are merged. This allows for cleaner merge histories by consolidating multiple commits into one, and enables better collaboration and code review processes.
        target-branch: '[AI] `glab mr update --target-branch` is a Git command using the Glab (GitLab CLI) tool. It updates a merge request in GitLab with the specified target branch as the new base for merging changes. In simpler terms, it pulls the latest changes from the target branch and applies them to the current branch of your local merge request, preparing it for another round of review or merging into the target branch.'
        title: '[AI] The command `glab mr update --title` is used with GitLab''s glab CLI (Command Line Interface) tool to update a Merge Request (MR) in GitLab. The `--title` option is provided to specify or update the title of the MR while performing the update. When you run this command, it fetches the latest changes from the branch associated with the MR and applies them to your local working directory. After that, it attempts to push those changes back to the remote repository creating a new MR if necessary, or updating an existing one with the provided title. This is particularly useful when making small adjustments to an MR before merging it into the target branch.'
        unassign: '[AI] `glab` is a Git client for working with GitHub and other version control platforms, developed by GitLab. The command `glab mr update --unassign` updates a merge request (MR) in GitHub without assigning it to any specific branch or person for merging. This means that the MR will remain open and unmerged, allowing changes to be made before the final merge. It''s useful when you want to incorporate additional changes or resolve conflicting issues in an MR without immediately applying those changes to your main branch.'
        unlabel: '[AI] `glab` is a Git interface tool for the GitLab CLI, and `mr` refers to Merge Request. The command `glab mr update --unlabel` is used to update an existing merge request with no new commits, but unlabel the current branch so it can be rebased or modified further. This allows developers to keep their changes in progress while keeping their merge requests up-to-date with the latest codebase.'
        unlock-discussion: '[AI] `glab mr update --unlock-dis discussion` is a GitLab CLI command used to update and unlock a Merge Request (MR) discussion for further changes. The MR must be in the locked state for this command to be effective. This command helps developers collaborate more efficiently by allowing them to make additional changes to an MR while keeping the conversation open with their team members.'
        wip: '[AI] `glab` is a Git interface tool for the GitLab API, developed by GitLab. The command `glab mr update --wip` is used to update a work-in-progress merge request (MR) with new changes. When you run this command, Git will try to fetch and apply any new commits that have been pushed to the branch associated with your MR since you last fetched or updated it. The `--wip` flag indicates that the MR is still a work in progress and not ready for merging yet.'
