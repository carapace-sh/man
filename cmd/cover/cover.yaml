# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cover
description: analyze coverage profiles
flags:
    -func=: output coverage profile information for each function
    -html=: generate HTML representation of coverage profile
    -mode=: 'coverage mode: set, count, atomic'
    -o=: file for output
    -outfilelist=: file containing list of output files (one per line) if -pkgcfg is in use
    -pkgcfg=: enable full-package instrumentation mode using params from specified config file
    -var=: name of coverage variable to generate (default "GoCover")
documentation:
    command: '[AI] The `cover` command is not a standard Unix or Linux command. It may refer to specific tools or functions in various programming environments or testing frameworks, such as `gcov` from the GNU Compiler Collection for generating code coverage reports, or `coverage.py` from Python''s unittest library for collecting test coverage data. These commands help measure and analyze the execution of code during testing to identify which parts have been executed and which parts were missed.'
    flag:
        func: '[AI] The `-func` flag in Go''s `cover` tool is used to generate a report on which functions are executed during test runs. When used with the `go test` command, it produces a coverage profile for the tested source files showing the percentage of each function''s execution relative to the total number of instructions run. This information can be helpful in identifying under-tested areas and improving test coverage.'
        html: '[AI] The `cover` command in Node.js is a part of its built-in `mocha` testing framework used to generate test coverage reports. The `--html` option with `cover` generates an HTML report of the code coverage data, displaying the results in an easily understandable format using colors and graphs. It creates a file named "coverage.html" or "index.html" by default, which can be opened in a web browser to view the test results.'
        mode: '[AI] The `cover-mode` flag in Git is used to enable or disable the recording of test coverage data during a Git commit. When this mode is enabled, Git will attempt to capture test coverage information using a tool like LCOV or JaCoCo and include it as part of the commit. This allows developers to track changes in code coverage over time and facilitate ongoing improvements. When disabled, Git does not record any test coverage data with the commit.'
        o: '[AI] The `-o` option used with the `cover` command in tools like Istanbul or JaCoCo is used to specify an output file for code coverage results. The flag takes the path of the output file as its argument, and the tool generates a report detailing the percentage of lines covered by tests into that file after running test cases.'
        outfilelist: '[AI] The `--cover-outfile` option in xUnit testing frameworks (like JUnit, MSTest, NUnit) specifies an output file where test coverage data will be written. The `--cover-outfilelist` is a variant of this option that takes a list of files instead of a single file. This allows generating multiple coverage reports in different formats or for different assemblies by providing separate output files in the list.'
        pkgcfg: '[AI] The `cover -pkgcfg` command in Go''s `cover` tool generates a package configuration file for testing coverage analysis. This file, named `cover.xml`, lists all tested source files along with their corresponding line and branch coverage percentages. It can be used by other tools like IDEs or continuous integration systems to display or analyze the test coverage statistics.'
        var: '[AI] The `cover -var` flag is used in GitHub Actions workflows to define a new job or step input variable. It sets the name (variable key) and value for the input variable. For example, `-var ''MY_VAR=some value''` sets the input variable named `MY_VAR` with the value `''some value''`. This can be useful when you want to pass dynamic or configurable values into your workflow.'
