# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: adb
description: Android Debug Bridge
flags:
    -H: name of adb server host [default=localhost]
    -L=: listen on given socket for adb server [default=tcp:localhost:5037]
    -P: port of adb server [default=5037]
    -a: listen on all network interfaces, not just localhost
    -d: use USB device (error if multiple devices connected)
    -e: use TCP/IP device (error if multiple TCP/IP devices available)
    -s=: use device with given serial (overrides $ANDROID_SERIAL)
    -t=: use device with given transport id
documentation:
    command: '[AI] ADB (Android Debug Bridge) is a versatile command-line tool that allows communication between a computer and an Android device. It enables various functions such as installing and debugging apps, pushing files to the device, rebooting, and even flashing custom recoveries or ROMs. ADB requires the Android SDK Platform-Tools package installed on your computer and a properly configured USB connection with your Android device.'
    flag:
        H: '[AI] The `adb` (Android Debug Bridge) command `adb -H <host:port>` sets the host and port for `adb` to bind to for communication between the Android device and the computer. This can be useful when running `adb` over a network or when multiple devices are connected to the same machine. The format is `<interface>:<port>`, where `interface` is typically either "localhost" or an IP address, and `port` is the number of the port to use.'
        L: '[AI] The `adb shell` command with the option `-L` (lowercase L) sets up a local forwarding for an Android Device Bridge (adb) connection. This means that it forwards a local port on the developer machine to a specific port on the Android device. By doing so, the traffic between the two ports is tunneled through the adb connection, allowing access from the developer machine to a service or application listening on the forwarded port on the device. The general syntax is `adb shell -L local_port:remote_host:remote_port`.'
        P: '[AI] The `adb` (Android Debug Bridge) command `-P <port>` option specifies an alternate port number for ADB to listen and accept connections on instead of the default 5037. This can be useful when multiple devices are connected to a host and need to use different ports for debugging.'
        a: '[AI] `adb -a` is a command used in Android Debug Bridge (ADB), a versatile tool that lets you communicate with and modify your Android device from a command-line interface. The `-a` option stands for "accept-asset-transfer" mode, which allows the transfer of files between the host machine and the device, without requiring the user authentication on the device side. This is particularly useful when dealing with large data transfers or automated scripts. However, be aware that using `adb -a` can potentially pose a security risk if your ADB connection is unsecured, as any file can be transferred to or from the device without confirmation.'
        d: '[AI] `adb` is a versatile command-line tool that comes with the Android SDK, used to communicate with and control Android devices. The option `-d` or `--device <serialno>` specifies that only the device with the given serial number should be targeted. Without this option, `adb` would try to connect to all connected devices. This is useful when working with multiple devices at once or when you want to ensure you''re targeting the correct one.'
        e: |-
            [AI] `adb` is a versatile command-line tool that comes with the Android SDK, allowing developers to communicate with and manage an Android device from a terminal or command prompt. The `adb shell` command starts a live reverse TCP connection from the device to the computer, providing a shell interface.

            The option `-e` is used with `adb shell` to start the shell session in emulated mode, which enables file transfers between the host and the device as if they were on the same filesystem. This can be useful for copying files back and forth during development or testing. The flag argument `-e` stands for "emulated", signifying that the file transfer functionality is enabled.
        s: '[AI] `adb` is a command-line tool that comes with the Android SDK, allowing users to communicate with an Android device. The `-s` option is used to specify the serial number or address of the device to which the command will be sent. For example, `adb -s <device_serial_number> shell` opens a shell session on that particular device.'
        t: '[AI] `adb` is a versatile command-line tool used to communicate with and manage Android devices. The option `-t` or `--test-only` is used to limit `adb` commands to only testing mode. This means that any shell commands run through `adb shell` will be executed in read-only mode, not making any permanent changes to the device. It''s useful for performing tests without risking data loss or unintended side effects on the device.'
