# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Initiate a Postman Collection run from a given URL or pat
flags:
    --bail=: Specify whether or not to gracefully
    --color=: Enable/Disable colored output
    --cookie-jar=: Specify the path to a custom cookie jar
    --delay-request=: Specify the extent of delay between
    --disable-unicode: Forces Unicode compliant symbols to be
    --env-var=: Allows the specification of environment
    --export-collection=: Exports the executed collection to a
    --export-cookie-jar=: Exports the cookie jar to a file after
    --export-environment=: Exports the final environment to a file
    --export-globals=: Exports the final globals to a file
    --folder=: Specify the folder to run from a
    --global-var=: Allows the specification of global
    --ignore-redirects: Prevents Newman from automatically
    --no-insecure-file-read: Prevents reading the files situated
    --postman-api-key=: API Key used to load the resources from
    --silent: Prevents Newman from showing output to
    --ssl-client-cert-list=: Specify the path to a client
    --ssl-client-cert=: Specify the path to a client
    --ssl-client-key=: Specify the path to a client
    --ssl-client-passphrase=: Specify the client certificate
    --ssl-extra-ca-certs=: Specify additionally trusted CA
    --timeout-request=: Specify a timeout for requests
    --timeout-script=: Specify a timeout for scripts
    --timeout=: Specify a timeout for collection run
    --verbose: Show detailed information of collection
    --working-dir=: Specify the path to the working
    -d, --iteration-data=: Specify a data file to use for
    -e, --environment=: Specify a URL or path to a Postman
    -g, --globals=: Specify a URL or path to a file
    -h, --help: display help for command
    -k, --insecure: Disables SSL validations
    -n, --iteration-count=: Define the number of iterations to run
    -r, --reporters=: Specify the reporters to use for this
    -x, --suppress-exit-code: Specify whether or not to override the
documentation:
    command: '[AI] `newman run` is a command used in Newman, a Node.js tool for executing Postman collections and tests. It runs the specified collection or individual test scripts within a collection file, generating reports on the fly and displaying results in the terminal.'
    flag:
        bail: |-
            [AI] `newman` is a Node.js tool for executing Postman collections and tests. The command `newman run` is used to execute one or more collections.

            The option `--bail` is a flag that, when passed to the `run` command, tells Newman to stop running tests as soon as it encounters the first failed test. This behavior can be useful when quickly checking a collection for issues, as it prevents further tests from potentially failing due to previous failures.

            Here's a brief example:

            ```bash
            newman run <collection>.json --environment <env>.json --reporter-cli --bail
            ```

            This command executes the `<collection>.json` collection file using the environment specified in the `<env>.json` file. The output is displayed using the CLI reporter, and Newman stops running tests as soon as a test fails with the `--bail` flag.
        color: '[AI] The command `newman run` is used in Newman, a Node.js tool for executing Postman collections. The option `--color` enables colored output when running tests or collections with Newman. This makes it easier to distinguish between different test results and their statuses (e.g., passed, failed) in the console output.'
        cookie-jar: '[AI] `newman` is an automated testing tool for Postman collections. The command `newman run --cookie-jar` tells Newman to execute a collection with the specified Postman environment and save any cookies from responses into a file named "cookies.json" in the current working directory. This can be useful when you want to persist cookies between tests, for example, when testing sessions that require login.'
        delay-request: |-
            [AI] `newman` is a Node.js command-line tool used for interacting with Postman collections. The `run` command executes tests defined within a Postman collection.

            The option `--delay-request` introduces a delay before sending an HTTP request during test execution. It takes an argument specifying the number of milliseconds to wait before processing the next request. For instance, `--delay-request 500` will add a half-second delay between requests. This can be useful when dealing with rate limiting or slow APIs.
        disable-unicode: '[AI] The `newman` command with the flag `--disable-unicode` is used to disable Unicode character encoding during the test execution. This can be helpful when dealing with certain APIs that may not support or have issues with Unicode characters in request or response data. By disabling Unicode, Newman ensures that only ASCII characters are used during the tests.'
        env-var: '[AI] `newman` is an open-source Node.js tool used for executing and collecting Postman collections. The `--env-var` option is used to set environment variables when running tests with Newman. It takes one or more name=value pairs as arguments, separating each pair with a space. For example: `newman run collection.json --env-var VAR1=value1 VAR2=value2`. These variables can then be accessed in the Postman collections using the `${VAR_NAME}` syntax.'
        environment: |-
            [AI] `newman` is an open-source Node.js tool used for executing Postman collections and tests. The `--environment` option is used to set or load environments, which are key-value pairs that help configure test data and other variables for running Postman requests and tests.

            When you use the command `newman run --environment <name>`, it tells Newman to execute the collection with the specified environment file (named by `<name>`). The environment file contains variables, which are loaded into the collection's tests or requests as global variables. This way, you can easily modify test data and configurations across multiple tests while keeping them consistent.
        export-collection: '[AI] The `newman` command with the `--export-collection` option is used to export an existing Postman collection as a JSON or COLLECTION file format. This can be done locally or against an active Postman server, allowing you to save and share your collection easily. The output file contains all the requests, folders, tests, and other metadata defined in the original collection.'
        export-cookie-jar: '[AI] `newman` is a Node.js command-line tool used for interacting with Postman collections and testing APIs. The `--export-cookie-jar` option is used when running tests with Newman to save cookies into a file after the tests have finished. This cookie jar can then be used in subsequent tests or other applications, allowing you to maintain state across multiple test runs.'
        export-environment: '[AI] The `newman` command with the option `--export-environment` generates an environment file from an existing `Postman` collection or an individual request. This file, usually with a `.env` extension, can be used to store and manage API key values, authentication tokens, and other sensitive data outside of the collection. The exported variables can then be sourced in scripts or other applications for automated testing or development purposes.'
        export-globals: '[AI] `newman` is an open-source tool for executing Postman collections and testing APIs. The command `newman run --export-globals` is used to execute a Postman collection with the additional action of exporting global variables as a JSON file at the end of the test run. These global variables can be defined in the `postman.collection.json` or in the environment files, and they hold values that are common across different tests within the collection. The exported JSON file can then be easily accessed for further usage outside of Postman or Newman.'
        folder: '[AI] The `newman` command with the `run` flag is used to execute tests defined in a `postman_collection.json` file located in a specified folder. The `--folder` option is used to indicate the name of the folder within the collection that contains the test scripts to be executed. For example, `newman run --collection my_collection.json --folder my_folder`.'
        global-var: '[AI] `newman` is an open-source Node.js tool used for executing Postman collections. The `--global-vars` option is a command-line argument that allows you to set global variables for your `newman` tests. These variables will be available across all tests in the current collection and can be accessed using the environment.var() function within your test scripts. For example, `newman run --global-vars "myVar=value" collection.json`. This sets the global variable `myVar` to the value `"value"` for the entire collection.'
        globals: '[AI] `newman` is an open-source Node.js tool used for executing Postman collections. The `--globals` option that can be passed with the `newman run` command allows users to define global environment variables that will be accessible during the execution of one or more tests. These variables can be used in test scripts or in collection variables. This feature is useful when there are values that need to be consistently applied across multiple tests or collections.'
        help: |-
            [AI] `newman` is an open-source JavaScript tool used for interacting with and testing REST APIs. The command `newman run --help` displays the available options and usage information for the `run` subcommand of Newman. Here's a brief overview:

            The `run` command is used to execute one or more tests from an existing Newman collection file (a JSON file with test cases defined). When you use this command with the `--help` option, it shows the following output:

            - It explains that the `run` subcommand executes test scripts defined in a collection.
            - Lists some optional parameters like `--collection`, `--envFile`, `--reporters`, and `--timeout`. These options allow you to specify the collection file, environment variables file, reporters for output, and timeout duration for tests respectively.
            - It also shows examples of how to use these options in your command line. For instance: `newman run <collection>.js --env <envFile>.json` or `newman run test_collection.js`.

            By providing the `--help` option, Newman gives you a clear understanding of what the `run` command does and how to use it effectively to execute your tests.
        ignore-redirects: |-
            [AI] `newman` is an open-source Node.js tool used to execute and manage Postman collections. The `run` command is used to execute collections or individual tests within a collection.

            The option `--ignore-redirects` is a flag that can be passed when using the `newman run` command. This flag instructs `newman` to ignore any redirect responses it may receive during test execution. By default, `newman` will follow a maximum of three redirects. Setting this flag allows tests to continue even if they encounter redirect responses.

            This can be useful when dealing with testing APIs that may return redirects due to load balancer or CDN configurations, among other reasons. However, it's important to note that ignoring redirects could mask underlying issues and should be used with caution.
        insecure: '[AI] The `newman` command is a Node.js tool for executing Postman tests. The `--insecure` option is used when running tests against an HTTPS server with self-signed or otherwise untrusted certificates. By passing this flag, Newman will bypass the default certificate validation checks, allowing tests to run even with potentially insecure connections. Use it with caution, as interacting with untrusted servers may pose security risks.'
        iteration-count: '[AI] The `--iteration-count` option in the `newman` command is used to specify the number of times a test script will be executed during the testing process. By default, Newman runs each test once. However, with this flag, you can run each test multiple times for regression testing, load testing, or other purposes. The results of each iteration are saved and can be viewed in the output to analyze trends or identify inconsistencies.'
        iteration-data: '[AI] `newman` is an open-source Node.js tool used for collecting, reporting, and managing Postman collections. The command `newman run --iteration-data <file>` instructs Newman to execute test scripts in a given Postman collection with the provided iteration data file. Iteration data is a JSON file containing dynamic values to replace placeholders in test requests or tests script code. This allows for running automated tests with varying input data for each test case, enabling better test coverage and adaptability to different environments.'
        no-insecure-file-read: '[AI] `newman` is a Node.js command-line tool for executing Postman collections. The option `--no-insecure-file-read` is used to disable reading files marked as insecure by the file system, such as those with execute or read-only permissions set for other users. This helps improve security by preventing unintended access to sensitive files while running automated tests using Newman.'
        postman-api-key: '[AI] The `newman` is a Node.js command-line tool used for running Postman collections. The option `--postman-api-key` is utilized to provide an API key that''s required by some APIs for authentication when executing tests using Newman and a Postman collection. By including this flag followed by the actual API key, you ensure secure authentication during test execution.'
        reporters: '[AI] The `--reporters` option in Jest''s `newman` command (used for running tests written with the `jest-circus` package) specifies which test reporters to use during the test run. Newman supports several built-in reporters such as "cli", "json", "junit", "lcov", and "summarize". Each reporter formats test results in a different way for various use cases, like generating an HTML report or displaying test results directly in the console. For example, to use JUnit format, you can run `newman run --reporters junit`.'
        silent: '[AI] `newman` is a command-line tool for running Postman tests. The `--silent` option is used to suppress the output of progress messages and test details during the execution of tests, making the test run more quiet or invisible. This can be useful when running large test suites or automating testing in scripts.'
        ssl-client-cert: '[AI] The `--ssl-client-cert` flag is used with the Newman testing tool for Postman. It specifies the path to an SSL client certificate file, which will be used during tests that involve making HTTPS requests. This flag helps ensure that the test environment can authenticate using a specific client certificate when interacting with SSL-enabled servers, adding an extra layer of security in automated testing scenarios.'
        ssl-client-cert-list: '[AI] The `--ssl-client-cert-list` flag is used with JMeter''s Apache JMeter''s HTTP(S) Test Script Recorder (TSR) or the Newman CLI tool for executing JMeter tests. This option specifies a file containing a list of client certificates to be used when making SSL/TLS secured HTTP requests. Each line in the file should contain the certificate in PEM format followed by its corresponding private key in similarly formatted lines. By default, JMeter or Newman does not use any client certificates, so using this flag allows you to authenticate your tests with specific SSL/TLS servers that require client certificates for secure communication.'
        ssl-client-key: '[AI] `newman` is an automated testing tool for Postman collections. The `--ssl-client-key` option is used to specify a client key file in PEM format when making HTTPS requests with Newman. This option ensures secure communication between the test runner and the server by providing a private key for client certificate authentication. When using this option, it''s essential to also provide the corresponding client certificate file using the `--ssl-client-cert` option.'
        ssl-client-passphrase: '[AI] `newman` is a Node.js command-line tool used to run and generate reports for Postman collections. The `--ssl-client-passphrase` option is used when making HTTPS requests with client certificates and private keys, which require a passphrase for authentication. This flag allows you to provide the passphrase as an argument while running Newman commands, ensuring secure communication between your application and the target API server.'
        ssl-extra-ca-certs: '[AI] `newman run` is a command-line tool for running Postman collections and tests. The option `--ssl-extra-ca-certs` allows you to specify additional SSL Certificate Authority (CA) files that Newman should trust when making HTTPS requests. This can be useful in environments where the default CA certificates may not be sufficient or when dealing with self-signed certificates. The flag expects a file path or multiple file paths to the CA certificates as arguments.'
        suppress-exit-code: '[AI] The `--suppress-exit-code` flag for JMeter''s `newman` command is used to suppress reporting of non-zero exit codes. When this option is set, Newman will continue running tests even if some tests fail or encounter errors, and it will not output an exit code different from 0, which signifies a successful run. This can be useful for continuous integration systems where failure of individual tests does not necessarily mean a failure of the entire build.'
        timeout: '[AI] `newman` is an automated testing tool for Postman collections. The command `newman run --timeout <milliseconds>` is used to execute a Postman collection with a specified timeout for each request in the collection. If a request takes longer than the set time limit, the test will fail. This option helps ensure that tests complete within a reasonable time frame and avoids tests getting stuck due to slow responses or network issues.'
        timeout-request: '[AI] The `--timeout-request` option in the Newman testing framework for Postman is used to set a timeout limit for individual requests within a collection or test suite. When this option is specified, Newman will stop executing a test case if a request takes longer than the specified time to complete. This can help prevent tests from getting stuck due to slow-running requests or network issues, enabling faster test execution and improving overall test reliability.'
        timeout-script: '[AI] `newman` is an open-source JavaScript tool used for interacting with and testing REST APIs based on Postman collections. The `--timeout-script` option is a feature that allows you to specify a custom JavaScript timeout function to be executed when a request takes longer than the specified time limit. This can be useful in cases where you want more control over how timeouts are handled, such as retrying requests or performing additional actions before giving up on a request. The script should accept one argument, which is the error message to be displayed when the timeout occurs. For example: `--timeout-script "myTimeoutFunction(error)"`.'
        verbose: '[AI] `newman` is an open-source Node.js tool used for executing Postman collections and testing APIs. The command `newman run --verbose` instructs Newman to execute a specific collection or test script in verbose mode. This means that Newman will provide detailed output during the execution process, including information about each request and response, as well as any errors encountered. It''s useful for debugging and understanding what''s happening under the hood when running tests.'
        working-dir: '[AI] `newman` is an open-source Node.js command-line tool used for executing Postman collections and tests. The `--working-dir` option specifies the working directory for running the Newman command. It is where Newman will look for collection files, environment files, and other related files when executing a test run. For example, if you have your Postman collections in a specific directory, you would use this flag to ensure that Newman looks in the correct location to find those files during the test execution.'
