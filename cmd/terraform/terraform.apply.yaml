# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: apply [options] [PLAN]
description: Create or update infrastructure
group: main
flags:
    -auto-approve: Skip interactive approval of plan before applying
    -backup?: Path to backup the existing state file before modifying
    -compact-warnings: Show wanings in a more compact form that includes only the summary messages
    -destroy: Destroy Terraform-managed infrastructure
    -input: Ask for input for variables if not directly set
    -lock: Don't hold a state lock during the operation dangerous if others might concurrently run commands against the same workspace.
    -lock-timeout?: Duration to retry a state lock
    -no-color: If specified, output won't contain any color
    -parallelism?: Limit the number of parallel resource operations
    -state-out?: Path to write state to that is different than "-state"
    -state?: Path to read and save state
documentation:
    command: '[AI] `terraform apply` is a Terraform command used to create or update infrastructure resources according to the defined configuration files. It compares the current state with the desired state, calculates the necessary changes, and applies those changes to the infrastructure. The output shows a summary of the planned changes for review and approval before actual execution. Once confirmed, the resources are provisioned or modified as specified in the configuration files.'
    flag:
        auto-approve: '[AI] `terraform apply -auto-approve` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates the application of infrastructure changes defined in a Terraform configuration file. The `-auto-approve` flag automatically approves any non-destructive changes suggested by Terraform during the apply process without requiring manual intervention or confirmation. This is useful for continuous integration and delivery workflows where automated approval is desired.'
        backup: '[AI] `terraform apply -backup` is a command used in Terraform, an open-source infrastructure as code software tool. This command creates a backup of the current Terraform state file before applying any new changes to your infrastructure. The backup is saved as a .tfstate.bak file with a timestamp. It''s an essential practice for disaster recovery and version control purposes, allowing you to easily revert back to previous states if needed.'
        compact-warnings: '[AI] `terraform apply` is a command used in Hashicorp''s Terraform tool to build, change, and update infrastructure safely and efficiently. The `-compact-warnings` option is an argument that can be passed to this command. It changes the output format of warnings during the application process. Instead of displaying each warning as a separate record, it groups them under their respective resource or module, making the output more compact and easier to read when dealing with multiple warnings in the same context.'
        destroy: '[AI] `terraform apply -destroy` is a command used in Terraform, an open-source infrastructure as code software tool. This command is used to destroy or remove previously created infrastructure configurations managed by Terraform. The "-destroy" option tells Terraform to plan and execute the destruction of resources rather than creating new ones. It''s an essential part of the Terraform workflow, allowing users to easily manage the entire lifecycle of their infrastructure.'
        input: '[AI] `terraform apply -input` is a command used in Terraform, an open-source infrastructure as code software tool. The `apply` action plans the application of infrastructure changes and creates or updates resources based on defined configuration files. The `-input` flag tells Terraform to prompt for input before executing the changes. This can be useful when applying changes that may have destructive effects, allowing users to confirm each change before it''s applied.'
        lock: '[AI] The `terraform apply -lock` command is used to create or apply a Terraform lock file. A lock file ensures that multiple users working on the same Terraform configuration do not inadvertently overwrite each other''s changes. It achieves this by recording the current state of the configuration files and the desired state, along with the Terraform version being used. When a user attempts to apply changes using `terraform apply`, Terraform checks if there is an existing lock file and requires users to first acquire the lock before proceeding. This helps prevent potential conflicts and allows for safer collaboration on infrastructure as code projects.'
        lock-timeout: '[AI] The `terraform apply` command is used to create or update infrastructure resources based on the configuration files in a Terraform project. The `-lock-timeout` option sets a time limit for Terraform to acquire and release locks on the state file, which prevents multiple users from making conflicting changes to the same resources at once. If Terraform is unable to acquire a lock within the specified timeout, it will abort the apply process and display an error message. The default value for `-lock-timeout` is 90 seconds.'
        no-color: '[AI] `terraform apply -no-color` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates the application of infrastructure changes described in your Terraform configuration files. The `-no-color` flag is optional and is used to disable colored output from Terraform during the apply process. This can be useful for scripting or running Terraform in environments where colorized output may not be supported.'
        parallelism: '[AI] `terraform apply -parallelism` is a command used in Terraform, an open-source infrastructure as code software tool. The `apply` command is used to create or update infrastructure based on defined configurations in Terraform files. The `-parallelism` flag enables parallel execution of Terraform actions during the apply process. By default, Terraform applies changes sequentially, but using this flag allows for multiple changes to be executed concurrently, potentially reducing the overall time it takes to complete the apply. This can help improve the efficiency of infrastructure deployments and updates.'
        state: '[AI] `terraform apply -state` is a command used in Terraform, an open-source infrastructure as code software tool. This command instructs Terraform to apply the changes described in the saved state file against the configured infrastructure. The state file contains the current configuration of your infrastructure and any planned changes, allowing you to track and manage your resources consistently across multiple runs. By using `apply -state`, you can ensure that your infrastructure is brought to a desired state based on your Terraform configuration files while minimizing the risk of unintended changes.'
        state-out: '[AI] `terraform apply -state-out` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates an apply process, which creates or updates infrastructure resources based on defined configurations in Terraform files. The `-state-out` flag specifies that Terraform should save the state of the applied configuration to a given file instead of overwriting the existing state file. This can be useful when working with multiple branches or environments and allows keeping separate states for each.'
