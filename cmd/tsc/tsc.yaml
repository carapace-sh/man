# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tsc
description: The TypeScript Compiler
flags:
    --all: Show all compiler options.
    --allowJs: Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.
    --allowSyntheticDefaultImports: Allow 'import x from y' when a module doesn't have a default export.
    --allowUmdGlobalAccess: Allow accessing UMD globals from modules.
    --allowUnreachableCode: Disable error reporting for unreachable code.
    --allowUnusedLabels: Disable error reporting for unused labels.
    --alwaysStrict: Ensure 'use strict' is always emitted.
    --assumeChangesOnlyAffectDirectDependencies: Have recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it.
    --baseUrl=: Specify the base directory to resolve non-relative module names.
    --build=: Build one or more projects and their dependencies, if out of date
    --checkJs: Enable error reporting in type-checked JavaScript files.
    --clean: Delete the outputs of all projects
    --composite: Enable constraints that allow a TypeScript project to be used with project references.
    --declaration=: Generate .d.ts files from TypeScript and JavaScript files in your project.
    --declarationDir=: Specify the output directory for generated declaration files.
    --declarationMap: Create sourcemaps for d.ts files.
    --diagnostics: Output compiler performance information after building.
    --disableReferencedProjectLoad: Reduce the number of projects loaded automatically by TypeScript.
    --disableSizeLimit: Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.
    --disableSolutionSearching: Opt a project out of multi-project reference checking when editing.
    --disableSourceOfProjectReferenceRedirect: Disable preferring source files instead of declaration files when referencing composite projects
    --downlevelIteration: Emit more compliant, but verbose and less performant JavaScript for iteration.
    --emitBOM: Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
    --emitDeclarationOnly: Only output d.ts files and not JavaScript files.
    --emitDecoratorMetadata: Emit design-type metadata for decorated declarations in source files.
    --esModuleInterop: Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.
    --exactOptionalPropertyTypes: Interpret optional property types as written, rather than adding 'undefined'.
    --excludeDirectories=: Remove a list of directories from the watch process.
    --excludeFiles: Remove a list of files from the watch mode's processing.
    --experimentalDecorators: Enable experimental support for TC39 stage 2 draft decorators.
    --explainFiles: Print files read during the compilation including why it was included.
    --extendedDiagnostics: Output more detailed compiler performance information after building.
    --fallbackPolling=: Specify what approach the watcher should use if the system runs out of native file watchers.
    --forceConsistentCasingInFileNames: Ensure that casing is correct in imports.
    --generateCpuProfile=: Emit a v8 CPU profile of the compiler run for debugging.
    --generateTrace: Generates an event trace and a list of types.
    --importHelpers: Allow importing helper functions from tslib once per project, instead of including them per-file.
    --importsNotUsedAsValues: Specify emit/checking behavior for imports that are only used for types
    --init: Initializes a TypeScript project and creates a tsconfig.json file.
    --inlineSourceMap: Include sourcemap files inside the emitted JavaScript.
    --inlineSources: Include source code in the sourcemaps inside the emitted JavaScript.
    --isolatedModules: Ensure that each file can be safely transpiled without relying on other imports.
    --jsx=: Specify what JSX code is generated.
    --jsxFactory=: Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'
    --jsxFragmentFactory=: Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.
    --jsxImportSource=: 'Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`'
    --lib=: Specify a set of bundled library declaration files that describe the target runtime environment.
    --listEmittedFiles: Print the names of emitted files after a compilation.
    --listFiles: Print all of the files read during the compilation.
    --listFilesOnly: Print names of files that are part of the compilation and then stop processing.
    --locale=: Set the language of the messaging from TypeScript. This does not affect emit.
    --mapRoot=: Specify the location where debugger should locate map files instead of generated locations.
    --maxNodeModuleJsDepth=: Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.
    --moduleResolution=: Specify how TypeScript looks up a file from a given module specifier.
    --newLine=: Set the newline character for emitting files.
    --noEmit: Disable emitting files from a compilation.
    --noEmitHelpers: Disable generating custom helper functions like `__extends` in compiled output.
    --noEmitOnError: Disable emitting files if any type checking errors are reported.
    --noErrorTruncation: Disable truncating types in error messages.
    --noFallthroughCasesInSwitch: Enable error reporting for fallthrough cases in switch statements.
    --noImplicitAny: Enable error reporting for expressions and declarations with an implied `any` type..
    --noImplicitOverride: Ensure overriding members in derived classes are marked with an override modifier.
    --noImplicitReturns: Enable error reporting for codepaths that do not explicitly return in a function.
    --noImplicitThis: Enable error reporting when `this` is given the type `any`.
    --noLib: Disable including any library files, including the default lib.d.ts.
    --noPropertyAccessFromIndexSignature: Enforces using indexed accessors for keys declared using an indexed type
    --noResolve: Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.
    --noUncheckedIndexedAccess: Include 'undefined' in index signature results
    --noUnusedLocals: Enable error reporting when a local variables aren't read.
    --noUnusedParameters: Raise an error when a function parameter isn't read
    --outDir=: Specify an output folder for all emitted files.
    --outFile=: Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.
    --paths: Specify a set of entries that re-map imports to additional lookup locations.
    --plugins=: List of language service plugins.
    --preserveConstEnums: Disable erasing `const enum` declarations in generated code.
    --preserveSymlinks: Disable resolving symlinks to their realpath. This correlates to the same flag in node.
    --preserveWatchOutput: Disable wiping the console in watch mode
    --pretty: Enable color and formatting in TypeScript's output to make compiler errors easier to read
    --reactNamespace=: Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.
    --removeComments: Disable emitting comments.
    --resolveJsonModule: Enable importing .json files
    --rootDir=: Specify the root folder within your source files.
    --rootDirs=: Allow multiple folders to be treated as one when resolving modules.
    --showConfig: Print the final configuration instead of building.
    --skipDefaultLibCheck: Skip type checking .d.ts files that are included with TypeScript.
    --skipLibCheck: Skip type checking all .d.ts files.
    --sourceMap: Create source map files for emitted JavaScript files.
    --sourceRoot=: Specify the root path for debuggers to find the reference source code.
    --strict: Enable all strict type-checking options.
    --strictBindCallApply: Check that the arguments for `bind`, `call`, and `apply` methods match the original function.
    --strictFunctionTypes: When assigning functions, check to ensure parameters and the return values are subtype-compatible.
    --strictNullChecks: When type checking, take into account `null` and `undefined`.
    --strictPropertyInitialization: Check for class properties that are declared but not set in the constructor.
    --stripInternal: Disable emitting declarations that have `@internal` in their JSDoc comments.
    --synchronousWatchDirectory: Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.
    --traceResolution: Log paths used during the `moduleResolution` process.
    --tsBuildInfoFile=: Specify the folder for .tsbuildinfo incremental compilation files.
    --typeRoots=: Specify multiple folders that act like `./node_modules/@types`.
    --types=: Specify type package names to be included without being referenced in a source file.
    --useDefineForClassFields: Emit ECMAScript-standard-compliant class fields.
    --useUnknownInCatchVariables: Type catch clause variables as 'unknown' instead of 'any'.
    --verbose=: Enable verbose logging
    --watchDirectory=: Specify how directories are watched on systems that lack recursive file-watching functionality.
    --watchFile=: Specify how the TypeScript watch mode works.
    -d, --dry=: Show what would be built (or deleted, if specified with '--clean')
    -f, --force=: Build all projects, including those that appear to be up to date
    -h, --help=: Print this message.
    -i, --incremental=: Enable incremental compilation
    -m, --module=: VAL  Specify what module code is generated.
    -t, --target=: Set the JavaScript language version for emitted JavaScript and include compatible library declarations
    -v, --version=: Print the compiler's version.
    -w, --watch=: Watch input files.
documentation:
    command: '[AI] `tsc` is a command-line tool for TypeScript compilation. It transpiles TypeScript code into JavaScript, making it executable in any JavaScript environment. The resulting JavaScript files retain the type checking and other features of TypeScript during development, but can be run or deployed to environments that only support JavaScript. To use `tsc`, navigate to your project directory containing TypeScript files and run `tsc` or `tsc filename.ts` for a specific file. By default, it will compile all `.ts` files in the current directory.'
    flag:
        all: '[AI] `tsc` is TypeScript Compiler. The command `tsc --all` is used to compile all TypeScript files in a project recursively. It starts from the current directory and compiles all `.ts` files, as well as those in subdirectories, producing corresponding `.js` output files. This is useful when working on large projects with multiple TypeScript modules.'
        allowJs: '[AI] `tsc` is TypeScript Compiler. The flag `--allowJs` is used to disable TypeScript checks for JavaScript files. By default, TypeScript compiler only compiles TypeScript files (files with .ts extension). When using `--allowJs`, it will also compile JavaScript files (files with .js extension) without raising any errors or warnings related to TypeScript specific features. This flag is useful when you need to compile a mix of TypeScript and JavaScript files together in the same project.'
        allowSyntheticDefaultImports: '[AI] `tsc --allowSyntheticDefaultImports` is a command-line option for TypeScript Compiler (tsc). It enables the use of Synthetic Default Imports in TypeScript projects, allowing types that have no default export but are imported with `import * as X from ''module''` syntax to be typed correctly. This flag overrides the otherwise stricter TypeScript rule against such imports and can lead to more flexible and easier-to-use import statements in some cases.'
        allowUmdGlobalAccess: '[AI] `tsc --allowUmdGlobalAccess` is a command-line option for TypeScript compiler (tsc). It enables access to UMD (Universal Module Definition) globals from external scripts. This flag allows declaring global variables or functions in UMD modules, which can be used directly in the HTML file without importing them, making it easier to use libraries with other JavaScript libraries that rely on global access. However, it''s generally recommended to avoid using this option and instead use ES Modules or CommonJS to manage dependencies for larger projects.'
        allowUnreachableCode: '[AI] The `tsc` flag `--allowUnreachableCode` is used in TypeScript compilation to disable the type checker''s error reporting for codes that are considered unreachable. It allows the compiler to ignore codes or paths of code that it determines cannot be executed under normal program flow. This flag can be useful when dealing with complex codebases, where some dead codes might not actually cause issues in the application''s runtime behavior but would otherwise generate compile-time errors. However, using this flag indiscriminately could hide potential bugs or make the codebase harder to understand and maintain.'
        allowUnusedLabels: '[AI] `tsc` is TypeScript Compiler. The option `--allowUnusedLabels` is used to allow TypeScript to emit declarations for labels that are never re-assigned or declared again in the same block, even if they are not used elsewhere in the program. This flag can be helpful when dealing with complex code structures and reducing the number of compilation warnings. However, it should be used with caution as unused labels might introduce potential bugs or make the code less readable.'
        alwaysStrict: '[AI] `tsc` is TypeScript compiler. The `--alwaysStrict` flag is a compiler option that enforces strict type-checking mode. It means that JavaScript''s implicit any types will be treated as error-prone undefined types, and variables must be explicitly declared before they are used. This flag helps catch potential type errors early in the development process.'
        assumeChangesOnlyAffectDirectDependencies: '[AI] `tsc --assumeChangesOnlyAffectDirectDependencies` is a TypeScript compilation flag that tells TypeScript to assume that only direct dependencies of changed files are affected by those changes during the compilation process. This flag can be useful in larger projects where only specific parts have been modified, and it can help reduce the amount of recompilation needed, saving time and resources. However, using this flag may increase the risk of missing potential type-checking errors in indirect dependencies that could impact the entire project. It''s essential to use it carefully and consider the implications on your project''s correctness.'
        baseUrl: '[AI] `tsc` is TypeScript Compiler. The `--baseUrl` flag is used to specify the base directory for relative paths in the source files being compiled. It helps TypeScript resolve file references correctly and efficiently, especially when working with large projects or those using multiple entry points. When you provide a base URL, TypeScript will adjust all internal imports accordingly, allowing you to avoid having to manually update import statements when restructuring your project.'
        build: '[AI] `tsc --build` is a command used in TypeScript development. It invokes the TypeScript compiler (tsc) with the build option, which instructs it to compile all TypeScript files in the current directory and its subdirectories recursively. The output will be JavaScript files. This command automates the compilation process, making it easier for developers to keep their project up-to-date with TypeScript''s latest features and improvements.'
        checkJs: '[AI] `tsc --checkJs` is a command used in TypeScript compilation. It instructs the TypeScript compiler (tsc) to perform a type checking only, without generating any output files (e.g., JavaScript). This is useful for verifying the types of your codebase without having to build and bundle your project every time. The primary goal is to identify and report any potential type errors or issues within your TypeScript source files.'
        clean: '[AI] `tsc --clean` is a command used in TypeScript development. It instructs the TypeScript Compiler (tsc) to perform a clean build, which involves deleting previously generated output files before compiling the source code again. This is typically done when making significant changes to the project or before packaging and deploying the application.'
        composite: '[AI] `tsc --composite` is a command-line option used with TypeScript compiler (tsc). It instructs the compiler to emit a single output file that contains the combined and transformed contents of multiple input files. This can be useful when working on large projects or when dealing with interdependent modules, as it simplifies managing multiple output files and reduces build complexity.'
        declaration: '[AI] `tsc --declaration` is a command used with TypeScript compiler (`tsc`) to generate declaration files along with compiled JavaScript output. Declaration files are `.d.ts` files that contain type annotations and other metadata useful for IDEs and tools, enabling advanced features like autocompletion and type checking in the development environment.'
        declarationDir: '[AI] `tsc --declarationDir` is a command-line option for TypeScript compiler (`tsc`). It generates declaration files for output directory specified in the argument instead of generating the compiled JavaScript files. These declaration files have the `.d.ts` extension and can be used by other tools, such as editors or libraries, to provide type information for the TypeScript code.'
        declarationMap: '[AI] `tsc --declarationMap` is a command-line option for TypeScript compiler (tsc). It generates corresponding .d.ts declaration files along with compiled JavaScript files. These declaration files are essential for IDEs and other tools to provide type checking, IntelliSense, and other advanced features while working on TypeScript projects.'
        diagnostics: '[AI] `tsc --diagnostics` is a command used in TypeScript compilation. It instructs the TypeScript compiler (tsc) to produce detailed error and warning messages when type checking fails or when certain options are enabled, without generating output files like JavaScript or JSX. These diagnostics provide useful information about the specific issues in the source code along with their locations, helping developers identify and fix problems more effectively.'
        disableReferencedProjectLoad: '[AI] `tsc --disableReferencedProjectLoad` is a command-line option for TypeScript Compiler (tsc). It disables the loading of referenced projects during compilation. When a TypeScript project includes references to other projects, the compiler loads and compiles those projects as well. By using `--disableReferencedProjectLoad`, you instruct the compiler not to load or compile any referenced projects and only process the files specified in the current project''s configuration. This can save time during development, especially when working on a large-scale TypeScript project with many interconnected parts.'
        disableSizeLimit: '[AI] `tsc` is the TypeScript compiler. The option `--disableSizeLimit` disables TypeScript''s size limitation checks during compilation. This can be useful when working with large projects or files, as it prevents compilation errors caused by exceeding the default maximum file sizes set by TypeScript. However, disabling this limit may increase memory usage and compilation time.'
        disableSolutionSearching: '[AI] `tsc --disableSolutionSearching` is a TypeScript compiler flag used to disable the solution searching feature during compilation. This flag prevents TypeScript from looking for multiple `tsconfig.json` files in a directory hierarchy to form a project, allowing only the specified configuration file to be used. By using this flag, the compilation process becomes faster and less resource-intensive.'
        disableSourceOfProjectReferenceRedirect: '[AI] `tsc` is TypeScript Compiler. The option `--disableSourceOfProjectReferenceRedirect` is used to disable the feature of project reference redirection in TypeScript compilation. In other words, it prevents TypeScript from automatically resolving references between projects defined in tsconfig.json files. This flag can be useful when working on multiple independent projects or when experiencing issues with automatic project reference resolution.'
        downlevelIteration: '[AI] The `--downlevelIteration` flag in TypeScript compiler (tsc) enables downlevel iteration syntax for targets that do not support it by default. This includes ECMAScript 5 and below. Downlevel iteration syntax refers to the use of `for-of` or `for-in` loops with a specific syntax, which is transpiled to `for` or `while` loops for older JavaScript versions. Enabling this flag allows TypeScript projects to use modern iteration features while still maintaining backward compatibility with older JavaScript environments.'
        dry: '[AI] `tsc --dry` is a command in TypeScript Compiler (tsc). It performs a type checking operation without actually generating any output files. In other words, it checks the TypeScript code for errors or warnings and displays them in the console but does not produce compiled JavaScript files. This can be useful during development for catching potential issues early.'
        emitBOM: '[AI] The `tsc` command with the flag `--emitBOM` is used in TypeScript compilation. This flag instructs TypeScript compiler to include a Byte Order Mark (BOM) at the beginning of output files during emission. A BOM indicates the byte order of a text file for correct rendering by different systems, especially useful for UTF-8 encoded files. Enabling this option ensures the generated JavaScript files will have proper encoding declarations for consistent handling across platforms.'
        emitDeclarationOnly: '[AI] The `tsc` flag `--emitDeclarationOnly` is used during TypeScript compilation to generate only declaration files instead of generating both compiled JavaScript files and declaration files. This can be useful when building libraries or working on large projects, as it allows for faster development cycles by only recompiling the changed TypeScript files and their dependencies. Additionally, having separate declaration files can make it easier for other developers to use your library in their own projects.'
        emitDecoratorMetadata: '[AI] `tsc --emitDecoratorMetadata` is a command-line option for TypeScript Compiler (tsc). When used, it tells the compiler to emit metadata for decorators as part of the generated output files. Decorators are special syntax in TypeScript used to add additional functionality or metadata to classes, functions, or properties. With `--emitDecoratorMetadata`, this metadata can be read and processed by other tools or frameworks at runtime, enabling features like IntelliSense, dependency injection, and more.'
        esModuleInterop: '[AI] The `--esModuleInterop` flag is a command-line option for TypeScript compiler (tsc). It enables ES Module Interop, which allows using CommonJS style imports and exports in TypeScript files marked with `lib:esnext,esModuleInterop=true`. With this flag, the TypeScript compiler generates code that can be consumed by both ES Modules and CommonJS modules. This makes it easier to gradually migrate a project from CommonJS to ES Modules without breaking existing dependencies.'
        exactOptionalPropertyTypes: '[AI] The `--exactOptionalPropertyTypes` flag in TypeScript is used during compilation to enforce stricter type checking for optional properties with an `any` type. By default, optional properties of type `any` are treated as having no types at all, but this flag allows TypeScript to treat them as having the `undefined` type instead. This means that if an optional property is not provided, a type error will be reported during compilation. It helps catch potential bugs related to optional property usage and improves code reliability.'
        excludeDirectories: '[AI] `tsc` is TypeScript Compiler, and `--excludeDirectories` is one of its command-line options. This flag is used to exclude entire directories from being compiled during the TypeScript compilation process. By specifying `--excludeDirectories <directory_path>`, you can exclude all files in the specified directory and its subdirectories from being compiled. This can be useful when you have large projects with unnecessary or duplicate files that you don''t want to compile, thus saving time and resources.'
        excludeFiles: '[AI] `tsc --excludeFiles` is a command-line option for TypeScript compiler (`tsc`). It allows you to specify one or more files or directories that should be excluded from the compilation process. This can be useful when you have large projects and want to exclude certain files or directories, such as test files or build artifacts, from being compiled during every build cycle. For example, `tsc --excludeFiles="**/tests/*.ts" "**/{node_modules,bower_components}/*"` will exclude all `.ts` files under the `tests` directory and all files under the `node_modules` and `bower_components` directories from being compiled.'
        experimentalDecorators: '[AI] The `--experimentalDecorators` flag is a command-line option for TypeScript compiler (tsc). It enables support for decorators in the TypeScript code during compilation. Decorators are a feature that allows adding metadata to classes, methods, properties, and other elements at runtime. This flag makes TypeScript compile code using experimental decorator syntax even if it is not officially supported yet by JavaScript. Therefore, using this flag allows developers to write modern, more expressive TypeScript code, but keep in mind that the generated JavaScript may have different behavior or compatibility issues with various environments.'
        explainFiles: '[AI] `tsc --explainFiles` is a command-line option for TypeScript Compiler (tsc). It generates explanation files for each output file that are created during compilation. These explanation files, named with the suffix `.map.json`, contain metadata about the source code positions of the generated JavaScript output, enabling source map support in the debuggers and other development tools. This option helps to preserve the original TypeScript source information when working with compiled JavaScript files in a debugging environment.'
        extendedDiagnostics: '[AI] `tsc` is TypeScript compiler. The `--extendedDiagnostics` flag is an optional argument that provides more detailed and actionable error messages when compiling TypeScript code. With this flag, the compiler generates not only the standard errors but also suggestions for possible solutions or workarounds. This can help developers to quickly identify and fix issues in their code.'
        fallbackPolling: '[AI] `tsc --fallbackPolling` is a command-line option for TypeScript compiler (tsc). It enables fallback polling mode for watching files during compilation. In this mode, TypeScript checks for file changes at a fixed interval when no other events are detected. If left untouched, it defaults to 1 second. This can be useful in environments where other event-based change detection methods may not be available or reliable.'
        force: '[AI] The `tsc` command with the `--force` flag is used in TypeScript development to compile TypeScript files even if the output files are up-to-date. This can be useful when making changes that don''t affect the existing JavaScript code, such as updating type annotations or refactoring, but still wanting to trigger a build for consistency. The `--force` option overrides the default behavior of only recompiling files with changes.'
        forceConsistentCasingInFileNames: '[AI] The `tsc` flag `--forceConsistentCasingInFileNames` is used during TypeScript compilation to ensure that the case of file names in the project matches consistently between the file system and the corresponding import statements in the source code. By default, TypeScript allows some discrepancies between the actual file name and its imported alias, but this flag enforces a strict match. This can prevent potential issues with incorrect imports or unintended side effects due to different casing in file names.'
        generateCpuProfile: '[AI] `tsc` is TypeScript Compiler. The `--generateCpuProfile` flag is used to generate a CPU profiling report in JavaScript Interactive Profile Format (JSIPF) while TypeScript is compiling your source code. This data can be further analyzed using various profiling tools like Chrome DevTools or Node.js''s `v8-profiler` package, providing insights into the execution time of different parts of your code, helping you optimize and improve performance.'
        generateTrace: '[AI] `tsc` is TypeScript compiler. The `--generateTrace` flag is an optional argument that enables source map generation for compiled TypeScript files. Source maps allow the original TypeScript source code to be mapped to the generated JavaScript output during debugging in a web browser or other debugging tools, providing better error messages and easier debugging experience.'
        help: '[AI] `tsc` is TypeScript compiler. The command `tsc --help` displays a detailed help message about how to use the TypeScript compiler. It lists all available options and their descriptions, allowing users to understand how they can configure the compilation process. Some common flags include `--target`, which specifies the JavaScript version to compile against, and `--moduleResolution`, which configures module resolution strategy. Users can refer to this help message when setting up their build system or when troubleshooting issues with TypeScript compilation.'
        importHelpers: |-
            [AI] `tsc --importHelpers` is a TypeScript compilation flag that tells TypeScript Compiler (tsc) to include specified external helper files as part of the compilation process. This means that the contents of these helper files will be treated as if they were written in the same file as the main source code, allowing their types and modules to be accessible without having to import them manually in every file.

            By default, tsc does not include external helper files in the compilation output unless they are imported explicitly using `import` statements. The `--importHelpers` flag is used when you want to share common helper functions or modules across multiple files without repeating the import statements. It simplifies the codebase by making these helpers available at the top level of the compilation unit, without having to import them every time.
        importsNotUsedAsValues: '[AI] `tsc` is TypeScript compiler. The `--importsNotUsedAsValues` flag is an optional compiler option. It instructs TypeScript to emit a warning message when an import declaration is not used as a value in the current file. In other words, if you have imported a module but did not use any of its exported values directly in your code, this flag will generate a warning during compilation. This can help developers ensure that they are using all the necessary imports and reduce potential issues related to unused imports.'
        incremental: '[AI] `tsc --incremental` is a flag used with TypeScript compiler (tsc). It enables incremental compilation, which means that only files that have been changed since the last compilation will be recompiled instead of recompiling the whole project each time. This significantly reduces the build time for large projects and improves productivity.'
        init: '[AI] The `tsc` command with the option `--init` is used to create a new TypeScript project configuration file, named `tsconfig.json`, in the current directory. This file defines various settings for the TypeScript compiler such as entry files, output directories, and type checking options. It sets up a basic TypeScript development environment and allows for easy customization as needed.'
        inlineSourceMap: '[AI] `tsc --inlineSourceMap` is a command-line option for TypeScript compiler (tsc). It instructs the compiler to generate source maps, which are files that map generated code back to the original source files during debugging in a browser environment. With the `--inlineSourceMap` flag, the source maps are embedded directly into the output JavaScript files instead of being stored separately, making it more convenient for deployment and reducing network requests.'
        inlineSources: '[AI] `tsc --inlineSources` is a command-line option for TypeScript compiler (`tsc`). It instructs the compiler to embed source code of imported modules directly into the output files instead of generating separate `.js` files for them. This can be useful for debugging and minimizing the number of files that need to be transferred over the network when deploying an application, especially in a single-page application context.'
        isolatedModules: '[AI] `tsc --isolatedModules` is a command-line option for TypeScript compiler (tsc). It enables isolated modules mode during compilation, which means each module is compiled into its own self-contained JavaScript file with no external dependencies or side effects on other files. This feature helps to avoid naming conflicts between different modules and improves tree shaking during the bundling process in production environments.'
        jsx: '[AI] `tsc` is TypeScript Compiler. The flag `--jsx` is used to specify that JSX should be enabled in the compiled TypeScript code. JSX is a syntax extension for JavaScript, commonly used with React and Angular frameworks, which allows writing HTML-like syntax in JavaScript/TypeScript files. By enabling this flag during compilation, the TypeScript compiler generates valid JavaScript output with embedded JSX, ready to be used in the target environment (browser or Node.js).'
        jsxFactory: '[AI] `tsc` is TypeScript Compiler. The `--jsxFactory` flag is used to specify a custom factory function for JSX syntax in a TypeScript file. This allows using a specific library or component framework that might not be the default one (React for instance). By providing this flag with a factory function as an argument, you override the default behavior and let TypeScript know which library or component should be used while compiling.'
        jsxFragmentFactory: '[AI] `tsc` is TypeScript Compiler. The `--jsxFragmentFactory` flag is an option used during TypeScript compilation. It specifies a custom JSX fragment factory to be used when compiling TypeScript files with JSX syntax. A fragment factory is a function that creates fragments in React. This flag allows the use of a custom implementation instead of the default one provided by React.'
        jsxImportSource: |-
            [AI] `tsc --jsxImportSource` is a command-line option for TypeScript compiler (`tsc`). It specifies the location where TypeScript should look up for JSX import statements. By default, TypeScript assumes that JSX imports come from the `react` or `preact` packages. However, if you're using a custom library like `Meteor`, which has its own JSX syntax, you can use this option to inform the compiler about the correct source location for those imports. For instance:

            ```bash
            tsc --jsxImportSource ./my-library/src
            ```

            This command tells the TypeScript compiler that JSX imports should be resolved from the `./my-library/src` directory.
        lib: '[AI] `tsc` is TypeScript Compiler. The `--lib` flag specifies the libraries to be included during compilation. It can be a single library name or a comma-separated list of multiple library names. For example, `--lib dom,esnext` includes both the DOM library and the ESNext library in the compilation process. This flag helps in developing TypeScript applications that rely on specific libraries or modules.'
        listEmittedFiles: '[AI] `tsc --listEmittedFiles` is a command provided by TypeScript Compiler (tsc). It generates a list of files that will be output during a TypeScript compilation, based on the input files and the configuration in tsconfig.json file. This command helps developers to understand which files will be generated as output, without actually running the compiler. It is useful for debugging, testing or for verifying if all required files are included in a build process.'
        listFiles: '[AI] `tsc --listFiles` is a command-line option for TypeScript Compiler (TypeScript Compiler, or tsc, is a tool for converting TypeScript code into JavaScript). It generates a list of files that will be compiled when you run the compiler with this flag. This can help you to identify which files are being processed by the compiler and can be useful for automating the build process or for understanding which parts of your project are being transpiled.'
        listFilesOnly: '[AI] `tsc --listFilesOnly` is a TypeScript compiler command-line option that generates a list of files under the project directory that will be compiled, without actually performing the compilation. This option can be useful for build systems or scripts that need to know which files will be included in the compilation without executing the compiler itself.'
        locale: '[AI] The `tsc` command with the option `--locale` is used to specify the locale configuration for TypeScript compilation. This means that you can set the locale-specific rules for format and parsing of dates, numbers, and other culture-specific formatting in your TypeScript code, which will be reflected in the generated JavaScript output. By default, TypeScript uses a neutral locale (`en-US`), but you can use this option to customize it according to your needs. For example, you could set `--locale=fr-FR` for French formatting.'
        mapRoot: '[AI] The `--mapRoot` option in TypeScript Compiler (tsc) is used to specify a directory as the root for source maps. Source maps help in mapping the compiled TypeScript code back to its original location in the source files, enabling line numbers and other debugging information during execution. With `--mapRoot`, you can set a base path for the output of absolute source map file paths, simplifying the debugging experience when dealing with complex project structures.'
        maxNodeModuleJsDepth: '[AI] `tsc` is TypeScript Compiler. The flag `--maxNodeModuleJsDepth` sets a limit on how deep TypeScript will traverse when resolving dependencies for Node.js modules. It helps prevent infinite loops and other potential issues that may arise from circular dependencies or deeply nested module structures. By default, there is no depth limit, but you can specify a number to set a maximum depth. For example, `--maxNodeModuleJsDepth 3` would allow TypeScript to traverse up to three levels deep when resolving Node.js modules.'
        module: '[AI] `tsc --module` is a command-line option for TypeScript Compiler (tsc). It specifies the JavaScript output format for the CommonJS, AMD or ES6 module systems. This option enables the compiler to transform your TypeScript code into a specific module system during compilation, ensuring compatibility with various front-end build tools and frameworks such as Webpack, RequireJS or Rollup.js.'
        moduleResolution: |-
            [AI] `tsc --moduleResolution` is a command-line option for TypeScript Compiler (tsc). It specifies how TypeScript should resolve external module references during compilation.

            There are two popular module resolution strategies: CommonJS and ES Modules. By default, TypeScript uses CommonJS. But with `--moduleResolution` you can change this behavior to use ES Modules instead, or customize the module resolution process in other ways.

            For example, if you want to use ES Modules, you can provide `--moduleResolution=esnext` option:
            ```bash
            tsc --moduleResolution=esnext yourFile.ts
            ```
            Other options include `node12`, which is a node-specific ES Module resolution strategy. Custom resolvers can be created and provided using the `--resolveJsonModules` or `--createSupplementalMappingFiles` options.

            In summary, `tsc --moduleResolution` helps you configure how TypeScript handles external module references during compilation.
        newLine: '[AI] The `--newline` flag is a command-line option for TypeScript compiler (tsc). It is used to configure the compiler to output each file with a single empty line at the end instead of the default behavior, which is to not include any trailing newlines in the output files. This option can be useful when working with text editors or version control systems that rely on specific line endings for consistent display or tracking.'
        noEmit: '[AI] The `tsc --noEmit` flag is used with TypeScript compiler (tsc). It instructs the compiler not to generate output files after compilation, meaning it will only perform type checking and report errors or warnings but won''t emit any output files. This can be useful during development for getting quick feedback on syntax and type-related issues without creating new files each time.'
        noEmitHelpers: '[AI] `tsc --noEmitHelpers` is a command-line option for TypeScript compiler (`tsc`). It disables the generation of helper files (`.d.ts`, `.js`, or `.map`) during compilation. This can be useful when working with an integrated development environment or build system that handles these file types itself, or to minimize output files and improve build performance.'
        noEmitOnError: '[AI] `tsc --noEmitOnError` is a command-line option for TypeScript compiler (tsc). It instructs the compiler not to generate output files even if there are errors during compilation. In other words, it prevents the generation of JS output files when type checking fails, allowing developers to see and address errors in their source code without having to manually clean up generated files.'
        noErrorTruncation: '[AI] The `tsc` flag `--noErrorTruncation` is used to disable error message truncation during TypeScript compilation. When this option is set, TypeScript will not truncate long error messages and instead will display the entire message, providing more context and information for debugging purposes. This can be helpful when dealing with complex issues in large codebases.'
        noFallthroughCasesInSwitch: '[AI] The `tsc` flag `--noFallthroughCasesInSwitch` is used during TypeScript compilation to disallow fallthrough cases in switch statements. In other words, it enforces that each case should cover all the possible values and prevent any remaining values from falling through to the next case. This flag helps improve code quality and avoid potential errors by ensuring exhaustiveness of switch statement coverage.'
        noImplicitAny: '[AI] `tsc` is the TypeScript compiler. The option `--noImplicitAny` is used to disable the implicit conversion of types to `any`. This means that if a variable is not explicitly typed, it will result in a compile-time error instead of being defaulted to `any` type. Implicit `any` can lead to potential TypeScript bugs and is generally discouraged, hence disabling it can improve code quality and maintainability.'
        noImplicitOverride: '[AI] The `tsc` flag `--noImplicitOverflow` is used in TypeScript compilation to disable the implicit conversion of large numbers that might result in overflow, leading to compile-time errors instead. By default, TypeScript allows such conversions for better compatibility with JavaScript, but enabling this flag forces stricter type checking and helps catch potential numeric overflow issues early during development.'
        noImplicitReturns: '[AI] `tsc --noImplicitReturns` is a command-line option for TypeScript Compiler (tsc). It disables the implicit return type inference feature of TypeScript. With this option, if a function does not have an explicitly specified return type or an explicit return statement, a compile error will be raised instead of assuming an implicit `any` return type. This can help catch potential issues related to unintended function behavior.'
        noImplicitThis: '[AI] `tsc` is TypeScript compiler. The option `--noImplicitThis` is used to enforce an explicit `this` keyword in a class or a method when `this` refers to the instance of the class. If not specified, TypeScript assumes an implicit `this` assignment based on context. With `--noImplicitThis`, the compiler will raise an error if it detects an implicit use of `this`. This option helps prevent common pitfalls and improves code clarity by making the intended usage of `this` explicit.'
        noLib: '[AI] The `tsc` command with the `--noLib` flag is used in TypeScript compilation. This flag instructs the TypeScript compiler not to include any external libraries during the compilation process. In other words, it disables the use of the TypeScript library files (e.g., `lib.d.ts`) when compiling your code. This can be beneficial when you want to have fine-grained control over which libraries are being used or when you''re working with a custom set of definitions for existing libraries.'
        noPropertyAccessFromIndexSignature: '[AI] The `tsc` command with the flag `--noPropertyAccessFromIndexSignature` is used in TypeScript compilation. This flag disables accessing properties using index signatures as if they were interfaces with optional properties. In simpler terms, it prevents developers from accessing or assigning properties to array elements using the index signature in a way that would imply optional properties. This can help prevent potential errors and improve type safety in TypeScript code.'
        noResolve: '[AI] `tsc` is TypeScript Compiler. The flag `--noResolve` disables the TypeScript compiler''s automatic module resolution feature. This means that when using this flag, developers need to provide absolute or relative paths to all files specified in import statements within their TypeScript code. It also assumes that external dependencies are installed and available under the specified node_modules directory.'
        noUncheckedIndexedAccess: '[AI] `tsc` is TypeScript Compiler, and the flag `--noUncheckedIndexedAccess` is an option used during compilation. It disables the use of indexed accesses that are marked as "unchecked" in TypeScript. This means that if you try to access an array or an object property with an index or a key that is not checked for validity at compile time, TypeScript will emit an error. By default, TypeScript allows unchecked indexed accesses in order to provide more flexibility during development. However, enabling this flag can help catch potential runtime errors and improve type safety in your code.'
        noUnusedLocals: '[AI] The `tsc` command with the flag `--noUnusedLocals` is used in TypeScript compilation. This flag instructs the TypeScript compiler to emit an error message for any local variables that are declared but not used in the current source file. In other words, it helps ensure that only needed variables are kept during the compilation process, potentially improving code quality and reducing unnecessary bloat.'
        noUnusedParameters: '[AI] `tsc` is the TypeScript compiler. The `--noUnusedParameters` flag is an option used to instruct the TypeScript compiler not to emit any warnings or errors for functions with unused parameters. This means that even if a function has parameters that are never used within that function''s implementation, TypeScript will not report an error or warning when compiling the code. By using this flag, developers can choose to ignore such issues in their codebase.'
        outDir: '[AI] `tsc --outDir` is a command-line option for TypeScript compiler (tsc). It specifies an output directory where all generated JavaScript files will be placed after compilation. For instance, if you have multiple TypeScript files in various locations and want to generate the corresponding JavaScript files in one specific folder, you can use `--outDir` followed by the desired path. This can help keep your project''s structure organized and make it easier for tools like webpack or Browserify to manage dependencies.'
        outFile: '[AI] `tsc --outFile` is a command-line option for TypeScript compiler (tsc). It tells the compiler to output the generated JavaScript files into the specified file(s) instead of the default behavior which is generating JS files in the same directory as the corresponding TypeScript files with the same names but with a .js extension. This can be useful when you want to keep your source code and compiled outputs separate for organization or build automation purposes.'
        paths: '[AI] `tsc --paths` is a command-line option for TypeScript compiler (`tsc`). It is used to specify a custom mapping of source file paths to output file paths. This can be useful when working with complex project structures or when using tools like webpack or Rollup that handle the file serving and bundling. By providing a `--paths` option, you can tell TypeScript to transform certain input paths to specific output paths during compilation. This way, you can maintain consistency between your source files and the compiled outputs even if their physical locations differ.'
        plugins: '[AI] `tsc --plugins` is a command-line option for TypeScript compiler (tsc). It is used to specify one or more plugins to be loaded during compilation. Plugins extend the functionality of TypeScript compiler and can be used for various purposes such as source maps generation, code transformations, and custom analyzers. The plugins are typically written in Node.js modules and can be installed via npm or yarn package managers.'
        preserveConstEnums: '[AI] `tsc` is TypeScript Compiler. The option `--preserveConstEnums` instructs the TypeScript compiler to keep constant enumerations during the compilation process. By default, TypeScript will remove constant enums and replace their usage with switch statements or object literals. However, using `--preserveConstEnums` prevents this behavior and keeps the original enum values in the generated JavaScript code. This can be useful when working with libraries that rely on constant enumerations or for maintaining consistency across different parts of your application.'
        preserveSymlinks: '[AI] `tsc` is TypeScript compiler. The `--preserveSymlinks` flag instructs the TypeScript compiler not to resolve or follow symbolic links during compilation, but instead treat them as files with the same name as the link. This can be useful when working with projects that make use of symbolic links and want to preserve their structure during the compilation process.'
        preserveWatchOutput: '[AI] `tsc --preserveWatchOutput` is a TypeScript compilation flag that instructs the TypeScript compiler (tsc) to keep the previous watch output when starting a new watch build. This means that the console logs and other output from the previous watch build will not be cleared, allowing for easier comparison and debugging of the current and previous builds.'
        pretty: '[AI] `tsc --pretty` is a command used in TypeScript compilation. The `--pretty` flag is optional and when included, it instructs the TypeScript compiler to output source maps and format the emitted JavaScript code with syntax highlighting and indentation for better readability. It improves the development experience during debugging by allowing the source code to correspond accurately with the generated JavaScript code.'
        reactNamespace: '[AI] `tsc` is TypeScript Compiler, and the option `--reactNamespace` (or `-jsx`) is used to configure it for compiling TypeScript files with JSX syntax. This syntax is commonly used in React and other libraries based on React, allowing you to write React components using JavaScript-like syntax instead of pure JavaScript. The flag ensures that TypeScript correctly understands and transpiles the JSX code, producing valid JavaScript output.'
        removeComments: '[AI] `tsc --removeComments` is a command-line option for TypeScript compiler (tsc). It instructs the compiler to remove all source code comments during the compilation process. The result will be an output file with only the code without any comments. This can be useful when distributing code to others or minimizing file sizes, as the comments are not necessary for the functionality of the code itself.'
        resolveJsonModule: '[AI] `tsc` is TypeScript Compiler. The `--resolveJsonModule` flag is used to enable support for importing CommonJS or AMD modules specified in JSON format (like `package.json`). With this flag, TypeScript can resolve dependencies described in these files and treat them as if they were imported using the `import` statement. This allows using npm packages in a TypeScript project without relying on tools like webpack or rollup for module resolution.'
        rootDir: '[AI] The `tsc` command with the option `--rootDir` specifies the directory to be used as the root for TypeScript compilation. All files within this directory and its subdirectories will be included in the compilation, unless explicitly excluded by other means such as the `exclude` or `files` options. This is useful when working on larger projects with multiple source files.'
        rootDirs: '[AI] `tsc` is TypeScript Compiler. The `--rootDirs` flag is used to specify one or more root directories for the TypeScript compilation. This means that TypeScript files in these directories and their subdirectories will be included in the compilation. If multiple root directories are specified, they will be treated as independent root sets, meaning each root set can have its own `tsconfig.json` file to configure compilation options separately.'
        showConfig: '[AI] `tsc --showConfig` is a command-line option for TypeScript Compiler (tsc). It''s used to display the current TypeScript compilation configuration without running the actual compilation process. This can be helpful when you want to check the settings, options, and included files of your TypeScript project without building the code.'
        skipDefaultLibCheck: '[AI] `tsc --skipDefaultLibCheck` is a command-line option for TypeScript compiler (tsc). It disables the default library checking feature of the TypeScript compiler. This means that TypeScript will not check if the imported modules exist in the specified libraries (such as "es5" or "dom"). Instead, it assumes that all the required modules are present. This flag can be useful when working with custom libraries or projects where the TypeScript definitions may not be complete or up-to-date. However, using this option might lead to compilation warnings or errors due to unresolved references.'
        skipLibCheck: '[AI] `tsc --skipLibCheck` is a command-line option for TypeScript compiler (tsc). It disables the library check feature of TypeScript during compilation. Library checks are used to ensure that all referenced libraries and dependencies have valid type definitions. By skipping this check, potentially outdated or incorrect type definitions in your project''s dependency tree will not be flagged as errors during compilation. This can save time when working on large projects with many dependencies but may increase the risk of type-related issues in your code.'
        sourceMap: '[AI] `tsc` is TypeScript compiler. The `--sourceMap` flag enables source map generation during TypeScript compilation. Source maps help in mapping generated JavaScript code back to their original TypeScript sources, making debugging easier in the browser. With a source map, the debugger can display the correct line numbers and file names from the TypeScript source instead of the generated JavaScript output.'
        sourceRoot: '[AI] `tsc --sourceRoot` is a TypeScript compiler flag used to specify a single directory as the root for TypeScript files to be compiled. All files in the specified directory and its subdirectories will be included in the compilation process. This flag can be helpful when working with large projects or when only wanting to compile specific parts of the codebase at a time. It simplifies the build configuration and reduces the need to specify multiple file paths individually.'
        strict: '[AI] `tsc` is TypeScript compiler. The `--strict` flag is used to enforce strict type-checking options in TypeScript. This flag enables all strict type-checking options by default, including: noImplicitAny, noFallthroughCasesInSwitch, and others. Enforcing strict type checking helps catch potential type errors early during development and ensures better type safety in the code.'
        strictBindCallApply: '[AI] The `--strictBindCallApply` flag in TypeScript is used to enable stricter checks for function calls, bindings, and applications (spread and rest operators). It helps prevent common mistakes like forgetting to bind `this`, misspelled method names, or incorrect usage of spread and rest arguments. By enabling this flag, the compiler will issue errors when it detects potential issues, increasing type safety and reducing runtime errors.'
        strictFunctionTypes: '[AI] The `--strictFunctionTypes` flag in TypeScript is used to enforce that all function types have an explicit return type. If not specified, TypeScript infers a `any` return type for functions. With this flag, TypeScript will raise compilation errors if it detects functions without explicitly declared return types. This helps catch potential issues related to incorrect function return types during the development process.'
        strictNullChecks: '[AI] `tsc` is TypeScript Compiler. The flag `--strictNullChecks` is an option that enhances TypeScript''s static type checking capabilities. With this flag, TypeScript strictly checks for potential null values and ensures that every variable or expression has a value before it''s used. It helps in avoiding null-related bugs at compile time.'
        strictPropertyInitialization: '[AI] The `--strictPropertyInitialization` flag in TypeScript is used during compilation to enforce strict checking of property initializations. This means that all properties must be initialized before they are used, either in the constructor or in the class. If a property is not initialized, TypeScript will raise an error. This flag helps catch potential issues related to uninitialized properties and improves code safety and maintainability.'
        stripInternal: '[AI] `tsc` is TypeScript Compiler. The flag `--stripInternal` is used to remove internal TypeScript declarations from the output files during compilation. This means that any TypeScript code defined within a file will not be included in the generated JavaScript files, resulting in smaller file sizes and potentially improved load times for your application. It''s particularly useful when you want to distribute your compiled code or use a bundler like Webpack.'
        synchronousWatchDirectory: |-
            [AI] `tsc --synchronousWatchDirectory` is a command-line option for TypeScript compiler (tsc). It enables real-time type checking and compilation of TypeScript files in a specified directory using the watch feature with synchronous file system scanning.

            When used, the compiler keeps an eye on the specified directory and its subdirectories for any TypeScript files that are added, modified or deleted. For each change detected, it compiles and checks the TypeScript code synchronously, meaning it does not start a new instance of compilation until the previous one is finished. This can be beneficial for larger projects where multiple compilation instances might cause performance issues.
        target: '[AI] `tsc --target` is a command-line option for TypeScript compiler (tsc). It specifies the JavaScript target version or environment for the output file(s). For example, `--target ES5`, `--target ES2015`, or `--target Node12` are valid options. The chosen target affects the compatibility and features of the generated JavaScript code with different JavaScript environments.'
        traceResolution: '[AI] `tsc` is TypeScript Compiler. The `--traceResolution` flag is an optional argument for the compiler. It enables more detailed output related to type resolution during the compilation process. This flag helps developers diagnose and understand issues with type declarations and module resolution in their projects, making it a useful tool for troubleshooting complex TypeScript-related problems.'
        tsBuildInfoFile: '[AI] `tsc --tsBuildInfoFile` is a command-line option for TypeScript compiler (tsc). It generates a JSON file containing build information about the TypeScript project, such as the input files, output files, and compilation options used. The file name is specified by the argument following the option. This option can be useful for tracking builds in continuous integration systems or for debugging purposes.'
        typeRoots: '[AI] `tsc` is TypeScript compiler. The option `--typesRoots <directory>` specifies a directory containing Type Definitions for custom or third-party libraries not available on the npm registry. These definition files allow TypeScript to provide type checking and IntelliSense features when working with those libraries.'
        types: '[AI] The `tsc` command with the `--types` flag is used in TypeScript, a programming language that builds on JavaScript. This flag instructs the TypeScript compiler to include specific supplementary types during compilation, enabling advanced features like declaration files, lib.d.ts files, or defining custom types and interfaces. By including these types, the TypeScript compiler can provide better type checking and IntelliSense support in IDEs.'
        useDefineForClassFields: '[AI] `tsc --useDefineForClassFields` is a compiler option for TypeScript. It instructs the TypeScript compiler to emit `__defineProperty__` or `Object.defineProperty` definitions for class fields instead of transpiling them into regular JavaScript properties. This can be useful when working with libraries that rely on these syntaxes for defining properties on classes.'
        useUnknownInCatchVariables: '[AI] The `--useUnknownInCatchVariables` flag in TypeScript is used to enable catching and handling of unknown values in catch clauses during compilation. When this option is enabled, any variable declared in a catch clause with an undefined type will be inferred as having the type `unknown`. This allows for more flexible error handling by enabling developers to use conditional types or other type-safe techniques to handle unknown errors at runtime. Without this flag, the TypeScript compiler would require that all variables in a catch clause have defined types.'
        verbose: '[AI] `tsc` is TypeScript Compiler. The `--verbose` flag is an option that increases the amount of output produced during compilation. It provides detailed information about each file being compiled, including any errors or warnings, and the progress of the compilation process. This can be useful for debugging or understanding what''s happening during the build process.'
        version: '[AI] `tsc --version` is a command used in TypeScript development. It prints out the version number of the installed TypeScript compiler (tsc). This helps developers check which version of TypeScript they are currently using, ensuring they have the correct version for their project requirements.'
        watch: '[AI] `tsc --watch` is a TypeScript command used for compiling TypeScript code with real-time feedback. When you run this command, TypeScript compiler starts watching for any file changes in your project directory. As soon as a file is modified, the compiler automatically recompiles the affected files and provides any error messages or warnings. This continuous compilation process saves time by avoiding the need to compile the entire project each time a single file is updated.'
        watchDirectory: '[AI] `tsc --watchDirectory` is a command-line option for TypeScript Compiler (`tsc`). It is used to watch for file changes in a specified directory and its subdirectories, automatically compiling and updating the output files. This flag enables continuous compilation during development, improving productivity by reducing the time spent on manual builds.'
        watchFile: '[AI] `tsc --watchFile` is a command used in TypeScript compilation. It runs the TypeScript compiler with the `--watchFile` flag, which monitors files for changes and recompiles affected dependencies automatically. This flag is useful during development to ensure that any changes made to TypeScript files are immediately reflected in the output files without having to manually trigger a build each time.'
