# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: send-pack
description: Push objects over Git protocol to another repository
group: low-level synching
flags:
    --all: push all refs
    --atomic: request atomic transaction on remote side
    --exec=: receive pack program
    --force-with-lease=: require old value of ref to be at this value
    --helper-status: print status from remote helper
    --mirror: mirror all refs
    --progress: force progress reporting
    --push-option=: option to transmit
    --receive-pack=: receive pack program
    --remote=: remote name
    --signed=: GPG sign the push
    --stateless-rpc: use stateless RPC protocol
    --stdin: read refs from stdin
    --thin: use thin pack
    -f, --force: force updates
    -n, --dry-run: dry run
    -q, --quiet: be more quiet
    -v, --verbose: be more verbose
documentation:
    command: '[AI] `git send-pack` is a Git command used to initiate a packed archive transfer from the local repository to a remote server. It creates and sends a compressed bundle of the local repository''s data (commits, refs, and other metadata) for others to pull or fetch. This is useful when dealing with slow network connections or large repositories where only specific branches or commits need to be shared.'
    flag:
        all: '[AI] `git send-pack --all` is a Git command used to push all branches and commits from one repository to another over a network. The `--all` option indicates that all branches should be pushed, not just the current branch. This command creates a pack file of the committed data and sends it to the receiving end using SSH or HTTP transport protocols. It''s an efficient way for transferring large repositories as it compresses data before sending, saving bandwidth and reducing the time required for the push operation.'
        atomic: '[AI] `git send-pack --atomic` is a Git command used for pushing commits and associated data to a remote repository. The `--atomic` option ensures that the push operation is atomic, meaning it''s treated as a single, indivisible unit. This means that if any part of the push fails, the entire operation is rolled back, preventing data corruption or inconsistencies in the repository. This option helps maintain repository integrity during the push process.'
        dry-run: '[AI] `git send-pack --dry-run` is a Git command used to simulate a packing and sending of commits and their associated data to a remote repository without actually transferring the data. This command helps verify that the correct data will be sent before executing a real pack and push operation, which can save time and resources by preventing unnecessary transfers or errors. The `--dry-run` option simply runs the command in a simulated manner without performing any actual actions on the remote repository.'
        exec: '[AI] `git send-pack --exec` is a Git command used to push commits and related objects from one repository to another over a transport protocol such as SSH or HTTP. The `--exec` option allows specifying a custom command to run after sending the pack file. This can be useful for automating tasks like building and testing the received code, or triggering other workflows upon receiving new commits. For instance, you could use it to automatically deploy changes to a production environment once they have been pushed.'
        force: '[AI] `git send-pack --force` is a Git command used for pushing commits and branches to a remote repository. The `--force` option allows overwriting existing branches at the remote end with local changes, even if it results in losing the remote changes. This command should be used carefully as it can lead to data loss if not used correctly. It is often used when you want to force-push your changes onto a remote branch, for instance, when you are creating a new branch or have made local changes that need to be pushed immediately despite conflicts with the remote repository.'
        force-with-lease: |-
            [AI] `git send-pack --force-with-lease` is a Git command used to push local repository changes to a remote repository. The `--force-with-lease` option enables fast-forward updates and prevents overwriting of remote branches with older or conflicting changes.

            When using `--force-with-lease`, Git performs a "fetch-then-push" operation: it fetches the latest version of the remote branch, checks if your local commits are based on the same tip as the remote branch, and only then pushes your commits to the remote repository. This helps maintain the integrity of the shared repository by preventing unintended overwrites or conflicts.
        helper-status: '[AI] `git send-pack --helper-status` is a Git command used to send packed refs from one Git repository to another over a transport protocol like SSH or HTTP. The `--helper-status` option provides additional information about the pack files being sent, such as their size and the number of objects they contain. This can be useful when debugging or monitoring transfers between repositories.'
        mirror: '[AI] `git send-pack --mirror` is a Git command used to push multiple branches or the entire repository history and refs to a remote server, acting as a mirror repository. This operation creates an identical local and remote repository. It is particularly useful in setting up and synchronizing repositories for public Git hosting services like GitHub or GitLab.'
        progress: '[AI] `git send-pack --progress` is a Git command used for sending commits and pack files to a remote repository over a network using the Git protocol. The `--progress` option displays progress messages during the transfer process, allowing users to monitor the upload''s status in real time. This can help ensure that large transfers complete successfully and give feedback on the transfer rate and completion percentage.'
        push-option: '[AI] `git send-pack --push-option` is a Git command used to send packed refs over a transport protocol, such as SSH or HTTP, to update a remote repository. The `--push-option` flag allows passing additional options directly to the underlying transport layer when pushing, which can be useful for configuring encryption or other advanced settings for secure transfers. For example, `git send-pack --push-option=''ssh -o "User KnownHostsFile /path/to/known_hosts"'' <remote>` can be used to specify a custom SSH known hosts file when pushing to a remote repository over SSH.'
        quiet: '[AI] `git send-pack --quiet` is a Git command used to push commits and associated data (like tags) from one Git repository to another over a network. The `--quiet` option suppresses the progress messages during the transfer process, making it more suitable for background or automated tasks where verbose output is unnecessary.'
        receive-pack: '[AI] `git send-pack --receive-pack` is a Git command used for pushing and receiving pack files over a network. The `send-pack` part pushes local commits and objects to a remote repository as a pack file, while the `--receive-pack` option makes the receiving end also act as a server, allowing clients to fetch new data by sending them a pack file. It facilitates bi-directional communication between repositories in Git.'
        remote: '[AI] `git send-pack --remote` is a Git command used to push commits and pack objects from the local repository to a remote repository. The `--remote` option indicates that this is the repository being pushed from, while `git send-pack` creates a bundle of the pushed data which can be transmitted over the network using various methods like SSH or HTTP. This command is often used for setting up new remotes or pushing commits to a remote repository without cloning or creating a local branch.'
        signed: '[AI] `git send-pack --signed` is a Git command used to push commits and associated objects from one repository (usually a local one) to another repository, often located remotely. The `--signed` option adds a GPG signature to the pack file created during the push process. This enhances security as the signed commits can be verified for authenticity.'
        stateless-rpc: |-
            [AI] The `git send-pack --stateless-rpc` command is a Git packaging operation used for pushing commits and refs over a network to a remote repository without keeping state on the sending end.

            In other words, it's a method for transferring data between Git repositories where the sending repository does not retain any information about the receiving repository after the transfer is complete. This can help reduce the memory footprint and complexity of the sending repository, as well as improve performance by reducing network traffic with repeated pushes to the same remote.

            The `--stateless-rpc` option enables the stateless protocol for this command, which further optimizes data transfer by using a request/response model instead of maintaining a long-lived connection between repositories. This can result in faster and more efficient transfers, especially over slow or unreliable networks.
        stdin: '[AI] `git send-pack --stdin` is a Git command used to initiate a packing and transfer of commits or deltas from the local repository to a remote one over a standard input stream instead of a file. The `--stdin` option tells Git to read from standard input (usually a pipe) rather than a file, making it useful in scripts or automated workflows where data is being passed directly from one process to another. This command helps maintain a consistent state between repositories by updating the remote repository with new commits or changes without having to manually create and transfer files.'
        thin: '[AI] `git send-pack --thin` is a Git command used for efficient transfer of Git repositories over network. It creates and sends a thin pack file instead of a full pack or loose objects, reducing the amount of data to be transferred significantly. Thin packs store only the difference between local and remote branches, saving bandwidth and storage space on both ends.'
        verbose: '[AI] `git send-pack --verbose` is a Git command used to send commits and pack files from one repository to another over a network connection. The `--verbose` option increases the amount of output displayed during the transfer process, providing more detailed information about each step taken in the packing and sending of data. This can be useful for debugging or understanding the transfer in detail.'
