# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: shortlog
description: Summarize 'git log' output
group: main
flags:
    --after=: Show commits more recent than a specific date.
    --all: Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>.
    --all-match: Limit the commits output to ones that match all given --grep, instead of ones that match at least one.
    --alternate-refs: Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line.
    --ancestry-path: Limit the displayed commits to those directly on the ancestry chain between the “from” and “to” commits in the given commit range.
    --author=: Limit the commits output to ones with author header lines that match the specified pattern.
    --basic-regexp: Consider the limiting patterns to be basic regular expressions; this is the default.
    --before=: Show commits older than a specific date.
    --bisect: Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good bisection refs refs/bisect/good-* on the command line.
    --boundary: Output excluded boundary commits. Boundary commits are prefixed with -.
    --cherry: A synonym for --right-only --cherry-mark --no-merges.
    --cherry-mark: Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +.
    --cherry-pick: Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.
    --dense: Only the selected commits are shown, plus some to have a meaningful history.
    --exclude=: Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider.
    --first-parent: Follow only the first parent commit upon seeing a merge commit.
    --format=: Instead of the commit subject, use some other information to describe each commit.
    --full-history: Same as the default mode, but does not prune some history.
    --glob?: Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>.
    --grep-reflog=: Limit the commits output to ones with reflog entries that match the specified pattern.
    --grep=: Limit the commits output to ones with log message that matches the specified pattern.
    --group=: Group commits based on <type>.
    --ignore-missing: Upon seeing an invalid object name in the input, pretend as if the bad input was not given.
    --invert-grep: Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>.
    --left-only: List only commits on the respective side of a symmetric difference.
    --max-count=: Limit the number of commits to output.
    --max-parents=: Show only commits which have at most that many parent commits.
    --merge: After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.
    --merges: Print only merge commits.
    --min-parents=: Show only commits which have at least that many parent commits.
    --no-max-parents: ""
    --no-merges: Do not print commits with more than one parent.
    --no-min-parents: ""
    --not: Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next --not.
    --reflog: Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>.
    --remotes?: Pretend as if all the refs in refs/remotes are listed on the command line as <commit>.
    --remove-empty: Stop when a given path disappears from the tree.
    --right-only: List only commits on the respective side of a symmetric difference.
    --show-pulls: Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent.
    --simplify-by-decoration: Commits that are referred by some branch or tag are selected.
    --simplify-merges: First, build a history graph in the same way that --full-history with parent rewriting does.
    --since=: Show commits more recent than a specific date.
    --single-worktree: By default, all working trees will be examined by the following options when there are more than one.
    --sparse: All commits in the simplified history are shown.
    --stdin: In addition to the <commit> listed on the command line, read them from the standard input.
    --tags?: Pretend as if all the refs in refs/tags are listed on the command line as <commit>.
    --until=: Show commits older than a specific date.
    -E, --extended-regexp: Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.
    -F, --fixed-strings: Consider the limiting patterns to be fixed strings.
    -P, --perl-regexp: Consider the limiting patterns to be Perl-compatible regular expressions.
    -c, --committer: This is an alias for --group=committer.
    -e, --email: Show the email address of each author.
    -g, --walk-reflogs: Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones.
    -h, --help: Show help.
    -i, --regexp-ignore-case: Match the regular expression limiting patterns without regard to letter case.
    -n, --numbered: Sort output according to the number of commits per author instead of author alphabetic order.
    -s, --summary: Suppress commit description and provide a commit count summary only.
    -w=: Linewrap the output by wrapping each line at width.
documentation:
    command: '[AI] `git shortlog` is a Git command that displays a condensed, commit-message-only log of all commits in the current repository. It provides a summary of each author''s contributions and the number of commits they have made. This command can be useful for quickly identifying who has contributed what to a project and how many commits they have made. By default, it orders the output by authors and shows only the commit messages.'
    flag:
        after: '[AI] `git shortlog --after` is a Git command that displays a summary of commits made between two specified points in a Git repository, with each commit shown as a single line containing the author, date, and message. The "after" argument specifies the commit or branch that marks the end of the commit range for the output. This command can be useful to quickly review recent changes made after a specific point in the project history.'
        all: '[AI] `git shortlog --all` is a Git command that displays a condensed, human-readable log of all commits in the current repository. The `--all` option shows commits from all branches and merged heads. Each line represents a single commit, displaying the author, date, and a brief message. It''s often used to quickly review the change history without diving deep into the branch-specific logs.'
        all-match: '[AI] `git shortlog --all` displays a summary of commit messages for all branches in the current repository. The `--all-match` option filters the output to show only commits with a message matching a given regular expression. For example, `git shortlog --all --grep="fix"` would display commits with the word "fix" in their messages. This can be useful for quickly reviewing commits related to a specific topic or bug fix.'
        alternate-refs: '[AI] `git shortlog --alternate-refs` is a Git command that shows a summary of commits in the current repository, including author names, commit messages, and the number of added and deleted lines for each commit. The key difference from the regular `git shortlog` command is that it includes commits from alternate refs, such as branches that have been merged or rebased into the current branch but not yet deleted. This allows users to see a more complete picture of the commit history in their repository.'
        ancestry-path: '[AI] `git shortlog --ancestry-path` is a Git command that displays a condensed history of commits, showing only the commit messages and the ancestry path of each commit – i.e., the sequence of parent commits leading to the given one. This command is useful for quickly viewing the commit history with focus on the branch merges or identifying the development history between multiple branches.'
        author: '[AI] `git shortlog --author` is a Git command used to display a condensed history of commits, showing only the author and the number of commits they have made. This can be useful for quickly identifying who has contributed the most changes to a repository. The output includes the author''s name, email address, and the number of commits they have made. This command does not display any commit messages or details about the individual commits.'
        basic-regexp: '[AI] `git shortlog --basic-regexp` is a Git command that generates a list of commits based on a provided regular expression pattern in the commit messages. The option `--basic-regexp` enables using regular expressions for filtering commits in the output. This command is useful when you need to quickly find and review commits with specific message content without having to manually search through all the commits.'
        before: '[AI] `git shortlog --before` is a Git command that shows a summary of commits made between two specified revisions in reverse order, i.e., starting from the earlier one. It displays each commit with its author, date, and message, along with the number of added and deleted lines for each file changed in that commit. The output is typically less verbose than a full `git log` command, making it useful for quickly reviewing the changes made between two revisions.'
        bisect: '[AI] `git shortlog --bisect` is a Git command used to find the commit that introduced a specific change or bug in a project''s history. The `--bisect` option enables an automatic binary search algorithm within Git, which helps to efficiently narrow down the commits responsible for the change to a small range. The output shows the committing author, commit message, and the SHA-1 hash of each commit, with the suspected range indicated by "(B)" or "(C)", where "(B)" marks the bad commits (introducing the change) and "(C)" marks the good commits (before the change). This command is particularly useful when dealing with large codebases or complex issues.'
        boundary: '[AI] `git shortlog --boundary` is a Git command that displays a summarized commit history with boundary marks between different branches or groups of commits. The "--boundary" option adds a blank line before and after each set of related commits, making it easier to distinguish between different branches or topics in the commit history. This can be useful for quickly identifying when and how often changes were made in different parts of a Git repository.'
        cherry: '[AI] `git shortlog --cherry` is a command used to show the difference between two sets of commits, usually from two different branches in Git. The output displays each commit with its author, date, and message, prefixed by an ">" symbol if it exists only in one branch and "<" if it''s merged into another branch. This allows for easy comparison of the changes introduced in each branch.'
        cherry-mark: '[AI] The `git shortlog --cherry-mark` command generates a text output showing the commit messages and their corresponding unique hash IDs between two branches or repositories. Each commit with unique changes is marked by a "C" cherry-pick symbol, allowing easy identification of conflicts or differences when trying to merge or apply changes between them.'
        cherry-pick: '[AI] `git shortlog --cherry-pick` is a Git command used to display a condensed, unified diff of all commits that have been passed through the cherry-pick process. The output shows each commit''s author, date, and message, followed by the differences introduced by the commit. It is useful when applying patches from one branch to another and wanting to review the changes before creating new commits in the target branch.'
        committer: '[AI] `git shortlog --committer` is a Git command that displays a condensed history of commits, showing only the committer names and the number of commits they have made in each project branch. This command provides a quick overview of who has contributed to the repository and how many commits they have made. It can be useful for identifying active contributors or tracking down specific changes made by certain individuals.'
        dense: '[AI] `git shortlog --dense` is a Git command used to display a condensed commit history, showing each author''s email address and the number of commits they have made in a single line. This is useful for quickly identifying who has contributed what to a project, with multiple commits from the same author displayed on a single line separated by a ''+'' symbol. The `--dense` option ensures that the output is printed on one line per commit, without blank lines between each entry.'
        email: '[AI] `git shortlog --email` is a Git command that generates an email-style output of the commits in the current repository, including the author name, email address, and commit message for each commit. This can be useful for quickly reviewing the commit history without having to navigate into the detailed commit view. The `--email` option specifically formats the output as if it were a series of emailed messages.'
        exclude: '[AI] `git shortlog --exclude` is a Git command used to show a condensed history of commits in a repository, excluding commits that match a given pattern in their commit messages. This can be useful for filtering out irrelevant commits when examining the history, such as merge commits or commits related to specific topics. The exclude option takes a file or a regular expression as an argument, which specifies the patterns to exclude from the output.'
        extended-regexp: '[AI] `git shortlog --extended-regexp` is a Git command used to display a more detailed commit log, using an extended regular expression pattern for matching commit messages. The output shows each commit with its author, date, message, and the number of added and deleted lines. The extended regexp option allows searching for specific patterns in the commit messages using regular expressions. This can be useful when trying to find commits related to a particular topic or bug fix.'
        first-parent: '[AI] `git shortlog --first-parent` is a Git command that displays a condensed history of commits in a repository, showing only the messages and author information for each commit, with the parent-child relationships indicated by indentation. The `--first-parent` option causes Git to show only the first parent commit for each commit, which is useful when viewing the mainline development history of a project. This can make the output cleaner and easier to read when dealing with more complex branching histories.'
        fixed-strings: '[AI] `git shortlog --fixed-strings` is a Git command that generates a human-readable output showing the number of added, modified, and deleted files, as well as the commit messages for each commit that introduces or modifies specific text strings fixed in the commits. The `--fixed-strings` option filters the output to only show commits that change the specified strings exactly, ignoring commits where the strings are changed partially or in a different context.'
        format: '[AI] `git shortlog --format` is a Git command used to display a condensed history of commits in a project, usually showing the author, number of added and deleted lines, and the commit message for each commit. The `--format` option allows customization of the output format, which can include additional information such as the SHA-1 hash or the date of the commit. By default, it displays the commits in reverse chronological order.'
        full-history: '[AI] `git shortlog --full-history` is a Git command that generates a list of commits with their author, date, and a detailed message. The `--full-history` option includes all commits in the current branch, merges, and their individual parent commits, if applicable. Each commit entry displays the difference between the previous commit and the current one, providing a summary of changes made in each commit. This is useful for understanding the detailed history of a Git repository.'
        glob: '[AI] `git shortlog --glob` is a Git command that generates a list of commits based on a given glob pattern. It shows the author, commit message, and the number of added and deleted lines for each commit matching the specified pattern in the commit messages. This can be useful for filtering and reviewing commits related to specific topics or changes in a large repository.'
        grep: '[AI] `git shortlog --grep` is a Git command used to display a summary of commits that match a given search term in the commit messages. The `--grep` option filters the output to only show commits with messages containing the specified text pattern. It provides an easy way to quickly find and review the commits associated with a particular change or feature, without having to navigate through the entire commit history.'
        grep-reflog: '[AI] `git shortlog --grep-reflog` is a Git command used to display a condensed history of commits that match a given reflog message. In simpler terms, it shows the list of commits with messages containing a specified search term in their reflog messages. This command is particularly useful for quickly identifying and reviewing commits related to specific changes or issues across multiple branches or commit histories.'
        group: '[AI] `git shortlog --group` is a Git command that displays the commit messages for each unique author, with the commits ordered by date within each group. It provides a summary of who made which contributions to a repository and when, grouped by author. This can be useful for understanding the authorship and history of different parts of a project.'
        help: |-
            [AI] `git shortlog` is a Git command that generates a summary of commits in a repository, usually between two branches or between the current branch and the remote origin. The `--help` option provides a brief explanation of the command's functionality:

            ```plaintext
            git shortlog [<commit-range>] --help

            Short log - lists commits with their message, author, date, and statistic

            USAGE:
               git shortlog [<options>] [<rev1>..<rev2> | <branch1>...<branch2> | --all | --no-merges | --quit]

            OPTIONS:
               -n                       format output as newline-delimited text (default is tab-separated)
               --pretty=<format>        specify custom output format
               --date=<datefmt>         show only commits that match <datefmt>
               --no-merges               exclude merges in the output
               --quit                   stop at first error (for scripts)
            ```

            This command is useful when you want to get a compact and readable summary of the changes between two points in your Git repository.
        ignore-missing: '[AI] `git shortlog --ignore-missing` is a Git command that generates a summary of commits between two branches or commit ranges, ignoring any commits with missing parents. The output includes the author, date, and message for each commit. This can be useful when comparing branches where some commits may not exist in one branch due to merge conflicts or rebase operations. By using `--ignore-missing`, Git will exclude those commits from the output instead of reporting an error.'
        invert-grep: '[AI] `git shortlog --invert-grep` is a Git command that shows the commits that do not match a given text pattern in the commit messages. The `--invert-grep` option inverts the matching of the search term, displaying commits with messages not containing the specified text. This can be useful to find commits that introduced a specific change or fixed an issue without modifying the related message.'
        left-only: '[AI] `git shortlog --left-only` is a Git command that generates a list of commits with only their commit messages, but from the perspective of a specific branch or set of branches. The `--left-only` option filters the output to show only commits that are not part of the current branch or branches being compared. This can be useful for comparing the differences in commit history between two branches and identifying commits unique to each one.'
        max-count: '[AI] `git shortlog --max-count` is a Git command used to display a summary of commits in a given repository, showing the author, date, and message for each commit. The `--max-count` option limits the output to show only a specified number of commits per author. This can be useful to quickly review the recent changes made by individual authors without having to sift through a long list of all the commits in the repository.'
        max-parents: '[AI] `git shortlog --max-parents` is a Git command that displays a summarized commit history with only the author, commit message, and number of parents for each commit. The `--max-parents 1` option filters the output to show commits with at most one parent, meaning only leaf or root commits are displayed. This can be useful when trying to understand the main flow of development in a project without getting bogged down by detail of every merge or branch point.'
        merge: '[AI] `git shortlog --merge` is a Git command that generates a list ofcommitswith their authors, messages, and statistics for merging two branches or repositories. It combines the commits that have similar messages or identical changes into a single entry in the output. This can be useful for reviewing the differences between branches or identifying which commits need to be merged. The `--merge` option is used to show a merged format, where commits with common elements are listed together and the differences between them are indicated.'
        merges: '[AI] `git shortlog --merges` is a Git command that displays a condensed history of merges between branches or commits. It lists each merge commit with the parent commits it merged, the author and committer dates, and a brief message describing the changes introduced by the merge. The output is typically easier to read than the full merge commit history, as it groups related merge commits together and provides a more concise summary of their changes.'
        min-parents: '[AI] `git shortlog --min-parents` is a Git command that displays a condensed log history, showing only the messages of merged commits where at least a specified number of parents exists in the merge commit. The option `--min-parents=N` sets the minimum number of parents required for a commit to be displayed. This can be useful when dealing with complex merges or long histories to focus on specific merges that involve multiple branches.'
        no-max-parents: '[AI] `git shortlog --no-max-parents` is a Git command that generates a summary of commits in a repository, but unlike the default `git shortlog`, it does not limit the output to commits with unique parent histories (i.e., no merge commits). This option displays more detailed information about the entire commit history, including merge commits and their parents.'
        no-merges: '[AI] `git shortlog --no-merges` is a Git command that generates a compact and simple output showing the author, committer date, and message for each unique commit, excluding merge commits. The output lists only the root parent commits of each branch or commit history, making it useful for quickly reviewing the sequence of non-merge changes in a project''s Git repository.'
        no-min-parents: '[AI] `git shortlog --no-min-parents` is a Git command used to display a summary of commits in the current repository, but with the difference that it includes non-fast-forward commits even if they share the same parent(s). In other words, it shows all commits, not just those that created new branches. This can be useful for seeing the full commit history, including merge commits and conflicts, when working on complex projects or collaborating with others.'
        not: '[AI] `git shortlog --not` is a Git command that displays the list of commits that do not have any added or modified files in their changeset. In other words, it shows commits that only contain changes to the commit message or metadata without affecting the file content.'
        numbered: '[AI] `git shortlog --numbered` is a Git command used to display a compact, numbered commit history. Each committed message is followed by the number of introduced newlines and the SHA-1 commit hash. This output format can be useful for quickly reviewing the sequence and number of commits in a repository.'
        perl-regexp: '[AI] `git shortlog` is a Git command used to display a summary of commits that match a given regular expression. The `--perl-regexp` option makes Git interpret the regular expression using Perl''s regular expression syntax, providing more complex and powerful search capabilities compared to basic shell regular expressions. This can be useful for searching specific patterns or commit messages across multiple commits in a repository.'
        reflog: '[AI] `git shortlog --reflog` is a Git command used to display a condensed, human-readable log of commits between two revisions or branches. It shows the author, date, and number of lines added and deleted in each commit, along with the commit message (if present). The `--reflog` option includes commits that exist only in the local reflog, not yet pushed to a remote repository.'
        regexp-ignore-case: '[AI] `git shortlog --regexp-ignore-case` is a Git command used to display a condensed log of commits that match a given regular expression pattern, with case insensitivity. The `--regexp-ignore-case` option makes the search for the given pattern case-insensitive. This can be useful when looking for specific text in commit messages across branches or repositories without being concerned about the letter casing.'
        remotes: '[AI] `git shortlog --remotes` is a Git command that displays a condensed history of commits that were pushed to the remote repositories, but not yet fetched or merged into the local repository. It provides a summary of each commit with the author, the number of added and deleted lines, and the commit message. This command can be useful for reviewing the changes made by team members before merging them into your local branch.'
        remove-empty: '[AI] `git shortlog --remove-empty` is a command used in Git version control system to display a condensed log of commits, with each commit represented as a single line containing the author, date, and message. The `--remove-empty` option filters out any commits with empty messages, resulting in a cleaner output that only shows commits with meaningful commit messages.'
        right-only: '[AI] `git shortlog --right-only` is a Git command that displays a condensed log of commits, showing only the author and the messages of the commits that have been made to the current branch, with the latest commit appearing first. This option is useful when you want to quickly see who made the most recent changes to the project and what those changes were without having to browse through the full commit history.'
        show-pulls: '[AI] `git shortlog --show-pulls` is a Git command that displays a condensed history of commits with their corresponding pull requests. It shows the author, commit message, and a refname representing the branch or remote where each commit was merged. This command is useful for reviewing the changes made in multiple branches during a merge process, particularly in a team environment.'
        simplify-by-decoration: '[AI] `git shortlog --simplify-by-decoration` is a Git command that generates a summary of commits in a repository, with an emphasis on showing branches and tags as decorations instead of listing them as separate commits. This results in a cleaner and more concise output where each commit message is displayed only once, followed by the list of branches or tags to which it belongs. The decoration is represented as a prefix to the commit message, allowing easy identification of commits that introduced new features on a branch or fixed bugs on a tag.'
        simplify-merges: '[AI] `git shortlog --simplify-merges` is a Git command that generates a summary of commits in the current repository, but it merges consecutive commits that only differ by their commit messages into a single entry. This can make the output cleaner and easier to read when dealing with a series of small, related commits that have been merged together. The simplified output lists each unique commit message followed by the number of commits with that message.'
        since: '[AI] `git shortlog --since` is a Git command used to display a summarized log of commits that were made to a repository since a specified date. The output includes the author, number of added and deleted lines, and the commit message for each commit. It''s useful for quickly reviewing recent changes in a project.'
        single-worktree: '[AI] `git shortlog --single-worktree` is a Git command that generates a summary of commits made in the current repository, showing the author, commit message, and number of added and deleted lines for each commit. The `--single-worktree` option ensures that the output only includes commits made against the current branch or commit, as opposed to merging branches where multiple worktrees exist. This command is useful for quickly reviewing the recent changes in a repository and understanding who made them and what was changed.'
        sparse: '[AI] `git shortlog --sparse` is a Git command that generates a human-readable diff summary for all commits that have modified specific files or directories within a repository. The `--sparse` option allows you to filter the output by only showing commits related to the specified files or directories, even if they contain other changes as well. It''s useful when you want to focus on the history of specific files without having to sift through unrelated changes in the output.'
        stdin: '[AI] `git shortlog --stdin` is a Git command that generates a list of commit messages and their associated SHA-1 hashes, which can be fed as input to another command or file via the standard input stream (`--stdin` option). It shows the author, committer date, and message for each committed change in a given branch or range of commits. This is often used to process or analyze commit history programmatically.'
        summary: '[AI] `git shortlog --summary` is a Git command that generates a summarized output of the commits made to a repository, showing the author, number of added and deleted lines in each commit, and a brief message for each commit. The output is formatted as a table, making it easier to quickly review the changes made across multiple commits.'
        tags: '[AI] `git shortlog --tags` is a Git command used to display a summarized commit history with only the tags and their associated commit messages. It provides a quick way to see the tagged versions in a project, along with their corresponding commit messages and authors. This can be useful for tracking the progression of releases or for easily identifying specific tagged versions.'
        until: '[AI] `git shortlog --until` is a Git command used to display a list of commits that occurred before or up to a specified date. The `--until` option followed by a date specifies this limit. Each commit''s message, author, and hash are displayed along with the number of added and deleted lines. This can be helpful for understanding the change history of a project between certain dates.'
        w: '[AI] `git shortlog -w` is a Git command that generates a patch-like format output showing the author, committer, and message of each commit in the current branch or specified range, written to the terminal or a file. The `-w` option makes Git write output directly to the terminal or a file without creating individual patch files. This command is often used for bulk editing or mass-applying commits in a text editor.'
        walk-reflogs: '[AI] `git shortlog --walk-reflogs` is a Git command that generates a commit difference listing for all the reachable refs in the current repository, following the reflog history. It shows the author, committer date, and message of each committed change, as well as the number of added and deleted lines. This command can be useful to review the commit history or compare differences between branches or commits.'
