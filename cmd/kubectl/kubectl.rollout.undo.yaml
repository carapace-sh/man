# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: undo (TYPE NAME | TYPE/NAME) [flags]
description: Undo a previous rollout
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --to-revision=: The revision to rollback to. Default to 0 (last revision).
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl rollout undo` is a Kubernetes command used to revert the latest deployment change for a specific Kubernetes resource, such as a Deployment or ReplicaSet. This command undoes the most recent rollout, rolling back the application to its previous version. It''s important to note that this action might cause downtime and potential data loss, depending on the nature of your application and the rollback strategy in place. Always ensure you have proper backup and rollback strategies before using this command.'
    flag:
        allow-missing-template-keys: '[AI] The `kubectl rollout undo` command is used to revert a Kubernetes deployment to a previous version. The `--allow-missing-template-keys` flag allows the application of a deployment or template that may have missing keys in its YAML manifest file, which would normally cause an error. This flag can be useful when making manual changes to a deployment configuration and inadvertently removing or forgetting some keys, but still wanting to apply the overall change rather than having to recreate the entire YAML file. It''s important to note that the use of this flag may result in warnings and potential issues with the deployed resources.'
        dry-run: '[AI] `kubectl rollout undo --dry-run` is a command used in Kubernetes to simulate the effect of rolling back a deployment to a previous revision, without actually making the change. This can be useful for testing or reviewing the effects of reverting a deployment before committing to the change. The `--dry-run` option causes Kubectl to print the changes it would make if executed in a real environment, allowing users to review and assess the impact before executing the command in a live environment.'
        filename: '[AI] `kubectl rollout undo` is a command used with Kubernetes and `kubectl`, its command-line interface. This command allows you to revert the last deployment or rollout of a Kubernetes resource, such as a Deployment or a DaemonSet. The `--filename` flag specifies the name of the file that contains the previous version of the YAML manifest for the resource, which will be used to undo the deployment or rollout. In other words, this command helps you go back in time to a previous state of your application by reverting the latest change made with `kubectl apply` or similar commands.'
        kustomize: '[AI] `kubectl rollout undo --kustomize` is a command used with Kubernetes and the `kubectl` tool to revert the latest deployment or rollback to a specific previous state defined in a Kustomize file. Kustomize is a configuration management system for Kubernetes that allows managing declarative configurations as difference files, extensions, and patches. When using this command, you specify the Kustomize file that contains the desired previous state, which then undoes the latest rollout to apply those changes.'
        output: '[AI] `kubectl rollout undo` is a command used in Kubernetes to revert the latest deployment change for a specific application or pod. The `--output` option specifies the format of the output. For instance, using `--output=yaml` will return the configuration YAML files that were rolled back. This can be useful when you want to review the previous version''s configuration before applying additional changes.'
        recursive: '[AI] `kubectl rollout undo --recursive` is a command used with Kubernetes and `kubectl`, its command-line interface, to revert the latest deployment changes made on a Kubernetes cluster. The `--recursive` flag indicates that this rollback should not only be applied to the most recently deployed revision but also to any dependent resources. This means that if there are multiple versions of related components, all the way back to the base image or configuration, they will be rolled back in a recursive manner. Essentially, it''s an efficient way to restore a previous state of a complex deployment with interconnected components.'
        selector: '[AI] The `kubectl rollout undo` command is used to revert a Kubernetes deployment to a previous version. The `--selector` option specifies the label selector for the desired deployment. By using this command, you can undo the last rolling update or force the deployment to rollback to a specific commit or tag in your repository if version history is being tracked with a Gitops tool like Flagger or Jenkins X.'
        show-managed-fields: '[AI] `kubectl rollout undo --show-managed-fields` is a Kubernetes command used to revert the last deployment or rolling update for a particular resource (e.g., Deployment, DaemonSet, ReplicaSet, etc.) to its previous state. The `--show-managed-fields` flag displays the fields that will be modified during the rollback process. This command is helpful when you need to revert an update unintentionally applied and want to review the changes before confirming the rollback.'
        template: '[AI] `kubectl rollout undo` is a command used with Kubernetes and `kubectl`, its client tool, to revert a previous deployment change in a managed Kubernetes environment. The `--template` option modifies the behavior of this command by allowing the user to specify a custom template file instead of rolling back to the previously deployed revision. With this option, users can create a new Deployment or DaemonSet configuration from scratch without creating a new resource object in the cluster. The net effect is that the desired state of the application is defined anew using the provided template file.'
        to-revision: '[AI] `kubectl rollout undo` is a command used with Kubernetes to revert a deployment to a previous version specified by the `--to-revision` argument. When you apply a new configuration to a deployment, Kubernetes creates a new revision in its history. This command allows you to rollback and restore the previously functioning version of your application by undoing the last rollout operation. It''s an essential tool for reverting mistakes or resolving issues that might arise after making changes to your deployments.'
