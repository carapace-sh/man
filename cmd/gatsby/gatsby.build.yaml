# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
description: Build a Gatsby project
flags:
    --graphql-tracing: Trace every graphql resolver, may have performance implications.
    --no-uglify: Build site without uglifying JS bundles.
    --open-tracing-config-file=: Tracer configuration file.
    --prefix-paths: Build site with link paths prefixed with the pathPrefix.
    --profile: Build site with react profiling.
documentation:
    command: '[AI] `gatsby build` is a command used in GatsbyJS, a popular static site generator built with React. It triggers the construction of a production-ready version of your Gatsby site. The process includes running data plugins to fetch and transform data, applying specified transformations on files, generating images, creating an optimized bundle with webpack, and producing static HTML files, CSS, and JavaScript assets that can be easily deployed to any hosting service.'
    flag:
        graphql-tracing: '[AI] `gatsby build --graphql-tracing` is a command used in GatsbyJS, a popular static site generator. This command enables GraphQL tracing during the Gatsby build process. With graphql-tracing enabled, detailed logs are generated that track each GraphQL query and its corresponding results. These logs can be useful for debugging and optimizing GraphQL queries in a production environment by identifying performance issues or potential data leaks. The logs are saved in a file named `tracing.json`, which can be analyzed using tools like the Gatsby Cloud interface or external profiling tools like Apollo Studio.'
        no-uglify: '[AI] `gatsby build --no-uglify` is a command used in Gatsby JS, a popular static site generator. This command initiates the build process of a Gatsby site without applying source code minification (uglification) for the output JavaScript files. Minification is typically applied to optimize and reduce file size, but with `--no-uglify`, the build process preserves the original formatting and comments in the generated code for easier debugging and analysis.'
        open-tracing-config-file: '[AI] `gatsby build --open-tracing-config-file` is a command used in GatsbyJS, a popular static site generator. This command is used during the build process to enable OpenTracing for distributed tracing. The `--open-tracing-config-file` option specifies the path to a JSON file containing OpenTracing configuration details. These configurations help identify and correlate requests between services in complex microservices architectures, enabling better monitoring and debugging of production applications.'
        prefix-paths: '[AI] `gatsby build --prefix-paths` is a command used in Gatsby, a popular static site generator. This command is used during the build process to configure how imported relative file paths are handled. The `--prefix-paths` flag allows you to specify a mapping of prefixes to directories, which will be prepended to imported paths. This can be useful when working with monorepos or complex project structures where files may not be located in the same directory as the component importing them. The result is that Gatsby can correctly resolve the import paths even if they''re not directly next to the component file.'
        profile: '[AI] `gatsby build --profile` is a command used in GatsbyJS, a popular static site generator. This command initiates the production build process of a Gatsby site and generates a detailed profile report. The profile report provides insights into the performance of the Gatsby site during the build process, including information about which plugins took the most time to run and other valuable optimization data. The `--profile` flag enables and saves this detailed report for further analysis.'
