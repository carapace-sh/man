# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: javac
description: Reads Java class and interface definitions and compiles them into bytecode and class files
flags:
    --add-modules=: Root modules to resolve in addition to the initial modules
    --enable-preview: Enable preview languge features
    --limit-modules=: Limit the universe of observable modules
    --module-source-path=: Specify where to find input source files for multiple modules
    --module-version=: Specify version of modules that are being compiled
    --module=: Compile only the specified module
    --processor-module-path=: Specify a module path where to find annotation processors
    --release=: Compile for a specific VM version
    --system=: Override location of system modules
    --upgrade-module-path=: Override location of upgradeable modules
    -?: Print help message
    -A: Options to pass to annotation processors
    -J: Pass flag directly to the runtime system
    -Werror: Terminate compilation if warnings occur
    -X: Print help on extra options
    -bootclasspath, --boot-class-path=: Override location of bootstrap class files
    -classpath, --class-path=: Specify where to find user class files and annotation processors
    -cp=: Specify where to find user class files and annotation processors
    -d: Specify where to place generated class files
    -deprecation: Output source locations where deprecated APIs are used
    -encoding=: Specify character encoding used by source files
    -endorseddirs=: Override location of endorsed standards path
    -extdirs=: Override location of installed extensions
    -g?: Generates all debugging information
    -h: Specify where to place generated native header files
    -help: Print help message
    -implicit?: Specify whether or not to generate class files for implicitly referenced files
    -nowarn: Generate no warnings
    -p, --module-path=: Root modules to resolve in addition to the initial modules
    -parameters: Generate metadata for reflection on method parameters
    -proc?: Control whether annotation processing and/or compilation is done.
    -processor=: Names of the annotation processors to run; bypasses default discovery process
    -processorpath, --processor-path=: Specify where to find annotation processors
    -profile=: Check that API used is available in the specified profile
    -s: Specify where to place generated source files
    -source=: Provide source compatibility with specified release
    -sourcepath, --source-path=: Specify where to find input source files
    -target=: Generate class files for specific VM version
    -verbose: Output messages about what the compiler is doing
    -version, --version: Version information
documentation:
    command: '[AI] "javac" is a command-line compiler for the Java programming language. It takes one or more `.java` source files as arguments and compiles them into corresponding `.class` bytecode files in the same directory by default. These bytecodes can then be run on the Java Virtual Machine (JVM) to execute the code.'
    flag:
        '?': '[AI] The command `javac -?` in Java programming language is used to display help information about the Javac compiler. The `-?` option is also known as the help or verbose option. When executed, it will print out detailed usage information for Javac, including valid options and their descriptions.'
        A: '[AI] The `-A` option in the `javac` compiler for Java programming language is used to enable all warnings. It does not produce any error messages or change the compiled output, but it increases the verbosity of the compilation process by reporting all potential issues that do not cause compilation errors but might indicate coding mistakes. This flag helps developers maintain a higher code quality and can be used in addition to other compiler flags for stricter checks.'
        J: '[AI] The `-J` option in the `javac` compiler is used to specify the path to the Java Virtual Machine (JVM) or the Java Runtime Environment (JRE) that should be used when compiling Java code. This option overrides the default JVM or JRE set in the system environment variables. For example, `javac -J/path/to/jvm/or/jre MyFile.java` would compile `MyFile.java` using the specified JVM or JRE.'
        Werror: '[AI] `javac -Werror` is a command-line option used with the Java Compiler (javac) tool. The `-Werror` flag enables all warnings to be treated as errors, causing the compilation process to fail if any warning messages are generated during the compile step. This can help developers catch potential issues early in the development cycle and maintain code quality.'
        X: '[AI] `javac -X` is not a valid option for the Java compiler (`javac`) in standard usage. The `-X` flag is an experimental or extended option, meaning it may not be supported across all JDK (Java Development Kit) versions and could potentially have unintended side effects. Its use is generally discouraged unless one has a specific need for an advanced feature. For more information on the standard options of `javac`, refer to the Java Language Specification or the documentation provided with your JDK installation.'
        add-modules: |-
            [AI] `javac --add-modules` is a command-line option used with Oracle JDK's Java Compiler (javac). This option allows you to explicitly specify one or more modules that your source code depends on at compile time. The specified modules will be automatically included in the compiled class files, making sure they are available during runtime.

            This feature is a part of JDK 9 and later versions, which support the Java Platform Module System, enabling modular development to improve code organization, reusability, and security.
        boot-class-path: '[AI] `javac --boot-class-path` is a command-line option for Java Compiler (javac) in Java Development Kit (JDK). This option allows specifying one or more classpaths as values to be used during the compilation of Java source files. The classes or libraries present in these paths will be accessible to the compiler, enabling it to use types defined in those classes if required. Essentially, this flag enables static linking of external classes or libraries during Java compilation.'
        class-path: '[AI] `javac --class-path` is a command-line option for the Java Compiler (javac) tool. It specifies a list of JAR or ZIP files, or directories containing compiled classes to be used as the classpath during compilation. The classpath determines where the compiler looks for user-defined classes and libraries. For example, `javac --class-path /path/to/mylibrary.jar MyClass.java` would compile `MyClass.java`, using any classes defined in `mylibrary.jar`.'
        cp: |-
            [AI] `javac -cp` is a command-line option used with the Java Compiler (javac) tool. The `-cp` flag, short for "--class-path", specifies a list of directories or JAR files that contain classes or libraries needed to compile the source code. For example:

            ```bash
            javac -cp /path/to/library.jar MyClass.java
            ```

            In this case, `MyClass.java` depends on some classes in `library.jar`. By including the JAR file in the classpath, the Java compiler can locate and use those classes during compilation.
        d: '[AI] `javac -d` is a command-line option used with the Java Compiler (javac). This option, short for "--destination-folder", is used to specify an output directory where the generated .class files will be placed after compilation. It does not create or modify any existing file structure in the output directory; instead it simply places all the .class files inside it. For instance, `javac -d outputDirectory SourceFile.java` compiles `SourceFile.java` and stores the resulting .class files within `outputDirectory`.'
        deprecation: '[AI] The `javac` compiler flag `-deprecation` is used to ask the Java compiler to report any usage of deprecated APIs (Application Programming Interfaces) in the source code during compilation. Deprecated APIs are identified as outdated, unrecommended, or potentially risky to use, and their usage may lead to compatibility issues or security vulnerabilities. By enabling this flag, developers can be warned about such usages and take appropriate actions to update or remove them from their codebase. This helps ensure that the software remains current, efficient, and secure.'
        enable-preview: '[AI] `javac --enable-preview` is a command-line option used with the Java Compiler (javac) tool. This option enables preview features, which are new language constructs and enhancements that are not yet finalized or officially released in the current Java version. Preview features can be experimented with and tested for potential future use in your codebase. These features may change or be removed in subsequent versions, making it important to stay informed about their status in the JDK development roadmap.'
        encoding: '[AI] `javac -encoding` is a command-line option used with the Java Compiler (javac) tool to specify the character encoding of source code files. This option ensures that the compiler reads the source files correctly when the files use an encoding other than the platform''s default or UTF-8. The argument to `-encoding` is the name of the desired character encoding, such as "UTF-16" or "ISO-8859-1". For example: `javac -encoding ISO-8859-1 SourceFile.java`.'
        endorseddirs: '[AI] `javac -endorseddirs` is a command-line option for the Java Compiler (javac) tool. It specifies one or more directories containing endorsed standard library JAR files. The endorsed standard libraries take precedence over the default system classpath when loading classes at runtime, ensuring compatibility with specific versions of the Java SE APIs.'
        extdirs: '[AI] The `-extdirs` option is a command-line argument for the `javac` compiler in Java. It allows users to specify one or more directories where custom classes and packages, located outside of the standard classpath, can be found during compilation. This flag enables the use of user-defined classes and extensions located in those specified directories without modifying the system classpath.'
        g: '[AI] The `-g` option in the `javac` compiler for Java programming language generates debugging information along with the compiled bytecode. This information includes line numbers, local variable names, and other data that can be used to debug the compiled code using a debugger or other tools. By default, this option is disabled, so if you want to generate debugging information, you must explicitly include it when compiling your Java source files.'
        h: '[AI] The `javac -h` command is used with the Java Compiler (javac) to display help information about its usage. The `-h` flag is an option that requests the generation of a help message, providing detailed information on various options and their arguments that can be used with javac. This information can be useful for developers when they need to compile Java code using specific flags or configurations.'
        help: '[AI] `javac -help` is a command used in Java programming language to display help information about the Javac compiler. It provides detailed information about various options and usage of the compiler, allowing users to understand how to compile Java code effectively and with desired features. This includes options for specifying source files, setting classpath, enabling or disabling various warnings, and more.'
        implicit: '[AI] The `-implicit` option in the `javac` compiler for Java programming language is used to enable or disable the implicit export of packages during compilation. When this option is set to `-implicit:none`, no packages are automatically exported, meaning that only explicitly declared packages and their public types can be accessed outside the package. If set to `-implicit:all`, all non-private packages and their public types will be implicitly exported, allowing access from other modules or projects without an explicit import statement. By default, `javac` does not have this option set, following the Java Platform Module System''s principle of strong encapsulation and explicitly declaring imports to control access.'
        limit-modules: '[AI] The `javac` command with the `--limit-modules` option is used in Java 9 and later versions to restrict the compilation of modules to a specific set during the Java compilation process. This helps in preventing unintended usage of dependencies and enhances modularity by only allowing the specified modules and their dependencies to be compiled. It improves code isolation and security by limiting the scope of the compilation.'
        module: '[AI] `javac --module` is a command-line option for the Java Compiler (javac) tool in JDK 9 and later versions. It allows compilation of sources using a specific module as the root of the module graph. This flag facilitates modular programming in Java by enforcing a clear boundary between different parts of the application during the build process. This results in improved code organization, reduced name collisions, and better reusability of components.'
        module-path: '[AI] The `javac --module-path` option is used with the Java Compiler (javac) when working with Javalab''s Platform Module System (JPMS), also known as Project Jigsaw. This flag specifies a list of directories or JAR files that contain the modules required for compilation. These modules are referenced using the `--add-modules` option and help to create modular Java applications, which enhance application security and code organization. The JPMS enables developers to define their own modules and explicitly declare dependencies, allowing better encapsulation of code.'
        module-source-path: '[AI] The `javac` flag `--module-source-path` is used to specify one or more directories containing the source code for Java 9+ modules during compilation with the `javac` command-line compiler. This allows the compiler to locate and build modular applications using sources outside of the current module''s directory. The flag value can be a list of separate directories, separated by semicolons (;) on Windows or colons (:) on Unix systems. For example: `javac --module-source-path /path/to/directory1:/path/to/directory2 MyModule.java`.'
        module-version: |-
            [AI] `javac --module-version` is a command-line option used with the Java Compiler (javac) tool. It's part of JDK 9 and later versions, which support the JMOD format for creating modular applications.

            This option allows specifying a particular module version while compiling sources. The format is `--module-version <module-name>/<module-version>`. For example, `--module-version mymodule/1.0.0`. This can be useful when working with multiple versions of the same module or dealing with dependencies in a modular project.
        nowarn: '[AI] `javac -Nowarn` is a command-line option used with the Java Compiler (javac) tool. It instructs the compiler to suppress specific warning messages during compilation. The warnings that are suppressed are specified using the `-XSuppressWarnings` or `-warning-name:` flags followed by the warning message names. For example, `javac -nowarn @:-processing:-3045` will suppress the "deprecation" warning. Multiple warnings can be suppressed at once by providing a list of warning messages. This option is useful when intentionally ignoring certain compiler warnings for specific circumstances.'
        parameters: |-
            [AI] The `javac` compiler's `-parameters` option is used for generating and including method parameter information in compiled Java class files. This information, represented as an attribute table named `CodeAttribute` with type `attribute_info` called `"RuntimeVisibleParameterAttributes"`, is essential for some advanced features like Reflection API or JVM debuggers.

            This flag ensures that the corresponding class file contains these attributes when compiling a Java source file using `javac`. Without it, the runtime and other tools might not have access to this data.
        proc: '[AI] `javac -proc` is a command-line option used with the Java Compiler (javac) tool. It generates and displays the compilation processing information for the source files being compiled. This includes detailed class and method level information such as accessibility, annotations, and attribute data. The output is in the form of a `.class` file containing `CONSTANT_Pool_info`, `Field_info`, `Method_info`, and other structures. It''s useful for deep code analysis, debugging, and understanding the class file structure.'
        processor: '[AI] `javac` is the Java Compiler tool in the Java Development Kit (JDK). The option `-processor` is used to specify a processor (also known as an annotation processor) that will be applied during compilation. Annotation processors are tools that analyze source code for annotations and generate corresponding output, such as new classes or methods. By using `-processor <processor_class>`, you instruct the compiler to apply the specified annotation processor to the sources being compiled.'
        processor-module-path: '[AI] `javac --processor-module-path` is a command-line option used with the Java Compiler (javac) when working with the Java Processing API for modular source code. It specifies the path to one or more JAR files containing annotated processors, which are used to generate source code during compilation. This flag allows you to apply custom processing logic to your Java modules, resulting in dynamic code generation and increased flexibility within the Java platform.'
        processor-path: '[AI] `javac` is the Java Compiler tool in the Java Development Kit (JDK). The `--processor-path` option is used to specify a list of processor paths for annotation processing. Annotation processors are tools that analyze source code files annotated with specific annotations and generate additional source code or metadata. By setting the `--processor-path`, you allow `javac` to invoke these processors during compilation, enabling advanced features like automatic code generation and type checking based on custom annotations.'
        profile: '[AI] The `-profile` option in the `javac` compiler for Java is used to specify a profiling file generated by the Java Mission Control (JMC) or VisualVM tools. This data helps the compiler identify specific methods or classes that require optimization, improving compilation time and resource usage, especially when working with large codebases or complex applications. The resulting optimized class files will exhibit enhanced performance characteristics in the execution environment.'
        release: '[AI] `javac --release` is a command-line option used with Oracle''s Java Compiler (javac). It specifies the version of the Java SE Platform API that the source code complies with. For example, `--release 8` indicates that the source code adheres to the rules and syntax of Java SE 8. This option helps ensure compatibility and consistency in programming by enforcing the use of only the specified or later APIs during compilation.'
        s: |-
            [AI] The `-s` option in the `javac` compiler for Java programming language is used to generate and display the compilation hierarchy or the source file dependencies. When you compile a Java program using this option, it not only compiles the specified source files but also generates a file named `.java_toolcache/compiled.<your_project_name>/manifest-<timestamp>.cfg` containing the compiled classes and their dependencies in a hierarchical format.

            This manifest file can be helpful for understanding how different parts of your Java application depend on each other during the compilation process. It's especially useful when dealing with large projects where source files are spread across multiple packages or directories.
        source: '[AI] `javac -source` is a command-line option used with the Java Compiler (javac) tool. This option instructs the compiler to retain the original format of source code from the input files during the compilation process. This can be useful when compiling code that uses newer language features or APIs which are not supported by the target JDK version. By preserving the source form, tools like decompilers or debuggers can better understand and interpret the compiled code.'
        source-path: '[AI] `javac --source-path` is a command-line option used with the Java Compiler (javac) tool. This option specifies a list of directories containing source files, in addition to the files specified on the compiler''s classpath. It allows compiling sources from multiple locations in one compile command, making it easier for managing larger projects with many source files spread across various directories.'
        system: '[AI] `javac --system` is a command-line option for the Java Compiler (javac) tool. It is used to specify a custom system property file, overriding the default Java Virtual Machine (JVM) settings. The property file should be in the Java Properties format, containing key-value pairs that define the properties. This flag enables fine-grained control of JVM arguments for specific compilation tasks.'
        target: '[AI] `javac -target` is a command-line option used with the Java Compiler (javac) tool. It specifies the target platform for the generated bytecode, which in turn determines the required class file format and the supported JVM features. For example, `-target 11` indicates generating code for Java SE 11 or later platforms. This can be useful when writing multi-platform Java code or ensuring compatibility with specific JVM versions.'
        upgrade-module-path: |-
            [AI] `javac --upgrade-module-path` is a command-line option for Java Compiler (javac) in OpenJDK or Oracle JDK. This option facilitates the compilation of Java 9 and higher modules using older versions of the JDK.

            By setting `--upgrade-module-path`, javac will perform a module graph resolution with the specified paths, applying any necessary module version upgrades automatically. The module graph is analyzed to identify dependencies that require an upgrade due to new API usage, and the compiler applies the required upgrade. This can help maintain compatibility between older codebases and newer Java versions while minimizing manual effort in upgrading the project's dependency management.

            Usage example: `javac --upgrade-module-path /path/to/dependencies MyClass.java`
        verbose: '[AI] The `javac -verbose` command is used with the Java Compiler (javac) to produce detailed output during the compilation process. This includes printing the name of each source file being compiled, the compiler flags used, and the names of any classes or interfaces being defined in each file. It provides a more detailed view into the compilation process for debugging or educational purposes.'
        version: '[AI] `javac --version` is a command used in Java programming to check the version of the installed Java Compiler (Javac). When executed in a terminal or command prompt, it displays the version number and other relevant details such as vendor and compilation mode. It helps developers ensure they are using the correct compiler version for their project requirements.'
