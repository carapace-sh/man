# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run [OPTION…] APP [ARGUMENT…]
description: Run an app
group: run
flags:
    --a11y-bus: Proxy accessibility bus calls (default except when sandboxed)
    --add-policy=: Add generic policy option
    --allow=: Allow feature
    --app-path=: Use PATH instead of the app's /app
    --arch=: Arch to use
    --branch=: Branch to use
    --command=: Command to run
    --commit: Run specified commit
    --cwd=: Directory to run the command in
    --device=: Expose device to app
    --disallow=: Don't allow feature
    --env-fd=: Read environment variables in env -0 format from FD
    --env=: Set environment variable
    --file-forwarding: Enable file forwarding
    --filesystem=: Expose filesystem to app (:ro for read-only)
    --help-all: Show all help options
    --installation=: Work on a non-default system-wide installation
    --instance-id-fd: Write the instance ID to the given file descriptor
    --log-a11y-bus: Log accessibility bus calls
    --log-session-bus: Log session bus calls
    --log-system-bus: Log system bus calls
    --no-a11y-bus: Don't proxy accessibility bus calls
    --no-documents-portal: Don't start portals
    --no-session-bus: Don't proxy session bus calls
    --no-talk-name=: Don't allow app to talk to name on the session bus
    --nodevice=: Don't expose device to app
    --nofilesystem=: Don't expose filesystem to app
    --nosocket=: Don't expose socket to app
    --ostree-verbose: Show OSTree debug information
    --own-name=: Allow app to own name on the session bus
    --parent-expose-pids: Make processes visible in parent namespace
    --parent-pid=: Use PID as parent pid for sharing namespaces
    --parent-share-pids: Share process ID namespace with parent
    --persist=: Persist home directory subpath
    --remove-policy=: Remove generic policy option
    --runtime-commit: Use specified runtime commit
    --runtime-version=: Runtime version to use
    --runtime=: Runtime to use
    --sandbox: Run completely sandboxed
    --session-bus: Proxy session bus calls (default except when sandboxed)
    --share=: Share with host
    --socket=: Expose socket to app
    --system: Work on the system-wide installation (default)
    --system-no-talk-name=: Don't allow app to talk to name on the system bus
    --system-own-name=: Allow app to own name on the system bus
    --system-talk-name=: Allow app to talk to name on the system bus
    --talk-name=: Allow app to talk to name on the session bus
    --unset-env=: Remove variable from environment
    --unshare=: Unshare with host
    --usr-path=: Use PATH instead of the runtime's /usr
    -d, --devel: Use development runtime
    -h, --help: Show help options
    -p, --die-with-parent: Kill processes when the parent process dies
    -u, --user: Work on the user installation
    -v, --verbose: Show debug information, -vv for more detail
documentation:
    command: '[AI] `flatpak run` is a command used in the Flatpak package management system to execute a specific application or command within its isolated environment. This ensures that only the required resources are accessed, and the application runs without interfering with the host system or other applications. It takes the format `flatpak run <application-id or remote-name> [command]`. For instance, `flatpak run org.example.calculator` would open the calculator application, while `flatpak run org.example.calculator calc 3 + 4` would execute the calculator application with the command "calc 3 + 4".'
    flag:
        a11y-bus: '[AI] The `flatpak run --a11y-bus` command is used in Flatpak, a software deployment and application packaging system, to start a Flatpak application with accessibility bus permissions. The accessibility bus allows an application to receive and respond to accessibility events, enabling it to interact with assistive technologies like screen readers or voice recognition software. This flag grants the specified application these permissions when it is run.'
        add-policy: '[AI] `flatpak run --add-policy` is a command used in Flatpak, a software deployment and application packaging system. This command allows you to add or modify application sandboxing policies for specific applications. By adding a policy, you can grant or deny access to certain system resources or capabilities to the concerned application, enhancing security and isolation. Policies can control various aspects like network access, filesystem permissions, environment variables, and more. This command line is typically used by system administrators to fine-tune application security in their environments.'
        allow: '[AI] `flatpak run --allow` is a command used in the Flatpak application packaging system to grant privileges to a running application sandbox. The `--allow` option specifies a list of permissions or interfaces that the application can access from the host system. These permissions could include accessing specific devices, network interfaces, or system services. The command runs the specified Flatpak application and grants it the requested privileges.'
        app-path: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to execute a command inside a specific Flatpak application container. The `--app-path` option specifies the path to the application bundle or its executable within the container. Using this command, you can run an application with all its dependencies satisfied by the Flatpak runtime without needing to install it system-wide.'
        arch: '[AI] `flatpak run --arch` is a command used in Flatpak, a software deployment and application packaging system. This command allows running a Flatpak application with a specific architecture. The `--arch` option takes an architectural identifier as its argument, such as `x86_64` or `armv7l`. By specifying an architecture, the command ensures that the correct version of the application is executed for the given architecture, ensuring compatibility and performance optimizations.'
        branch: '[AI] `flatpak run --branch` is a command used in Flatpak, a software deployment and packaging system. This command runs a specific branch of a Flatpak application in an isolated environment. The isolation ensures that the application does not interfere with the host system or other applications. By specifying `--branch`, you can run a different branch or commit of the application, enabling testing and development of newer features without affecting the stable production version.'
        command: |-
            [AI] `flatpak run` is a command used in the Flatpak application packaging system. The `--command` option is used to execute a specific command within a running application container. This allows users to run custom commands on a Flatpak application, similar to using SSH to run commands on a remote server.

            For example, `flatpak run org.example.app com.custom.command arg1 arg2` would run the command "com.custom.command" with arguments "arg1" and "arg2" inside the container of application "org.example.app". This can be useful for troubleshooting or performing tasks that are not covered by the application's provided interface.
        commit: '[AI] `flatpak run --commit` is a command used in the Flatpak application packaging system. It starts a new run of a given Flatpak application with its current state, and commits those changes to create a new version for distribution. This can be useful for testing local modifications before publishing an update to the repository. The flag `--commit` actually creates a new manifest file and checks it into the branch or remote repository specified for the application.'
        cwd: '[AI] `flatpak run` is a command-line utility provided by Flatpak, a software deployment and application packaging system. The `--cwd` option specifies the working directory for the command that follows. So, when you use `flatpak run <application> --cwd <directory>`, it runs the specified application in the given directory as its working directory. This can be useful if you want to provide a specific directory context for the application to operate within.'
        devel: '[AI] `flatpak run --devel` is a command used in the Flatpak application packaging system. It runs a specific Flatpak application with its development environment enabled. This means that the application gets access to additional development tools and libraries, which can be useful for testing and debugging. The development environment is installed separately from the regular runtime environment for better isolation and security.'
        device: |-
            [AI] `flatpak run --device` is a command used in the Flatpak application packaging system. It allows launching a Flatpak application with access to specific devices or hardware interfaces, enabling better integration between the host and the application.

            When running an application with this command, Flatpak makes those devices available inside the application sandbox. Common examples of devices are input devices (keyboards, mice) and network interfaces. This can be useful for applications that require direct hardware access, such as graphics tablets or VPN clients.

            Here is an example usage:

            ```bash
            flatpak run --device=/dev/input/mice MyApp.flatpak
            ```

            In this example, `MyApp.flatpak` is the name of the Flatpak application package and `/dev/input/mice` refers to the device file for input mice. This command launches the application with access to input devices.
        die-with-parent: '[AI] The `--die-with-parent` flag is a option for the `flatpak run` command in the Flatpak application packaging system. It instructs the running flatpak application to terminate when its parent process terminates, making it exit gracefully along with the parent process instead of keeping running in the background. This behavior can be desirable in some cases where you want the child process to have the same lifecycle as the parent, for instance in testing or scripting scenarios.'
        disallow: '[AI] `flatpak run --disallow` is a command used in the Flatpak application packaging system. It modifies the runtime permissions of an already running application container, disallowing it to access certain system resources or interfaces. This can be useful for increasing security and isolation by restricting what the app can do within the system. The `--disallow` option takes a comma-separated list of capabilities or interfaces to block. For example, `flatpak run --disallow=network.socket,org.freedesktop.Notifications.Produce` would prevent an application from creating network sockets and producing notifications.'
        env: '[AI] `flatpak run --env` is a command used in the Flatpak package management system. It launches an application packaged with Flatpak, passing custom environment variables to the application''s runtime. This can be useful when you need to set specific environment variables for an application that isn''t handling them correctly in its own code. The syntax is `flatpak run <application> --env <VARIABLE_NAME=VALUE> ...` where `<application>` is the name or ref of the Flatpak-installed app, and `<VARIABLE_NAME=VALUE>` are the environment variables to be set.'
        env-fd: '[AI] `flatpak run --env-fd` is a command used in the Flatpak application packaging system. It runs a Flatpak application with a custom environment file descriptor, allowing the passing of key-value pairs as environment variables to the application. The option `--env-fd` takes an input file descriptor, typically obtained using `open(2)` or `exec(3)` in a host system script, which is then read by the Flatpak runtime to set up the specified environment variables for the running application.'
        file-forwarding: '[AI] `flatpak run --file-forwarding` is a command used in the Flatpak application platform to forward local files or directories to a running application sandboxed by Flatpak. This allows applications to access specific host files without requiring explicit file permissions or package rebuilds. The syntax is `flatpak run <application> --file-forwarding=[<src-path>:][<dest-path>[:mode]]`, where `<application>` is the name of the Flatpak application, and `<src-path>` is the path on the host system to be forwarded, while `<dest-path>` is the desired destination path inside the application sandbox. The optional `mode` specifies read-only (ro), read-write (rw), or append-only (a) access. For example, `flatpak run org.example.app --file-forwarding=/host/data:/app/data:rw` forwards the /host/data directory to the /app/data location inside the application sandbox with read-write permissions.'
        filesystem: |-
            [AI] `flatpak run` is a command-line tool provided by Flatpak, a software deployment and application packaging system. The `--filesystem` option modifies the container's filesystem access permissions for the running application.

            With this flag, the application can access a specific host directory or mount a given path as a read-write or read-only filesystem inside the container. It enhances the isolated sandboxing nature of Flatpak applications by allowing them to interact with the host's file system when necessary. This is particularly useful for applications that require access to shared data, configuration files, or other resources on the host.
        help: |-
            [AI] `flatpak run` is a command-line utility provided by Flatpak, a software deployment and application packaging system. This command allows running a Flatpak application as if it were installed locally, without the need to actually install it. The `--help` option provides a summary of how to use this command:

            ```bash
            flatpak run [OPTIONS] <IMAGE> [COMMAND...]
            Runs a command in a Flatpak sandbox

            Usage:
              flatpak run [OPTIONS] <IMAGE> [COMMAND...]

            Options:
              -h, --help             Show this help message and exit
                  --no-start          Do not start the application before running the command
                  --filesystem=PATH   Mount a local filesystem at PATH in the sandbox
                  --environment=VAR=VALUE Set an environment variable
                  --kill-on-done       Kill the container when done (default: False)
              -V, --version           Print version information and exit

            <IMAGE>: An image to run, e.g., "org.example.App@x86_64" or "ref/branch"
            [COMMAND...]: The command to run inside the container
            ```

            This help message explains that `flatpak run` takes an image (a Flatpak application) and a command as arguments, provides options like mounting local filesystems, setting environment variables, and more. It also shows how to get version information using the `--version` option.
        help-all: '[AI] `flatpak run` is a command-line tool for running applications packaged with Flatpak, a desktop application distribution and runtime. The `--help-all` option is used to display help information for all available subcommands and their respective options. In other words, it provides a comprehensive list of what you can do with the `flatpak run` command and how to use each command, making it easier for users to understand the capabilities and usage of the tool.'
        installation: '[AI] The `flatpak run --install` command is used in the Flatpak packaging system to install a new application or runtime. The `--install` option indicates that the operation should be performed as an installation, making it available system-wide for all users. The `run` command is used to execute a Flatpak application or bundle locally without installing it permanently. Combining these two options in one command results in an installation of the application or runtime.'
        instance-id-fd: '[AI] The `flatpak run` command is used to launch a Flatpak application bundle with its own environment and filesystem. The option `--instance-id-fd` (short for "file descriptor") specifies that the output of the instance ID (a unique identifier for this particular instance of the application) should be written to a file descriptor rather than being printed to standard output. This can be useful for further processing or passing the instance ID as an argument to another command.'
        log-a11y-bus: '[AI] The `flatpak run` command is used to execute a Flatpak application with additional options. The specific option `--log-a11y-bus` instructs Flatpak to forward accessibility logs from the application to the system''s accessibility bus. This can be useful for developers and users who need to inspect or analyze the accessibility features of an application. It is a diagnostic tool that facilitates the identification and resolution of accessibility issues.'
        log-session-bus: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to execute a Flatpak application with its dependencies ensured and isolated from the host system. The `--log-session-bus` option is used to forward the application''s D-Bus messages to the system''s session bus, enabling communication between the application and other parts of the desktop environment. This allows the application to interact with other applications and services on the system in a controlled manner.'
        log-system-bus: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to launch a specific application or bundle. The `--log-system-bus` option tells Flatpak to forward D-Bus messages from the running application to the system bus, making them available to other applications and system components. This can be useful for debugging and development purposes, as it allows inspecting and intercepting D-Bus messages exchanged between applications and the system.'
        no-a11y-bus: '[AI] The `--no-a11y-bus` flag is an option used with the `flatpak run` command in the Flatpak application packaging system. It disables the accessibility bus for the specified application, meaning that it prevents the application from using the accessibility services provided by the host system or other applications. This can be useful in certain situations where you want to isolate an application from interacting with accessibility services to maintain security or privacy. However, it may also limit the functionality of assistive technologies for users with disabilities.'
        no-documents-portal: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to execute a specific application or its components. The `--no-documents-portal` option is passed as an argument to disable the use of the Documents app from the desktop environment''s default applications list when opening files from within the application. This can be useful for applications that need to access files without showing a file chooser dialog or allowing unexpected external interference.'
        no-session-bus: '[AI] `flatpak run` is a command-line utility for executing applications packaged with Flatpak, a software distribution system. The `--no-session-bus` option disables the creation of a new session bus for the application being run. This can be useful in certain scenarios where an existing session bus or no session bus is desired, such as when running automated tests or scripts outside of a user session. By not creating a new session bus, the application will run directly in the calling process''s environment and won''t have its own separate sandboxed runtime.'
        no-talk-name: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to execute a command within a specific application container. The `--no-talk-name` option that follows the command prevents the container from emitting its display name to the system message bus. This can be useful for running background tasks without revealing the identity of the container, maintaining privacy and security.'
        nodevice: '[AI] `flatpak run --nodevice` is a command used in the Flatpak application packaging system. It allows running a Flatpak application without giving it access to the host''s devices or input/output (I/O) ports. This can be useful for security reasons, as it prevents the application from interacting directly with hardware or other applications on the host system.'
        nofilesystem: '[AI] The `flatpak run --nofilesystem` command is used to execute a Flatpak application without mounting its filesystem. Flatpaks are containerized applications that run in isolation, providing enhanced security and consistency. When using the `--nofilesystem` option, the application''s filesystem is not accessible to the host system or other containers. This can be useful for running potentially untrusted applications without risking the host system''s files.'
        nosocket: '[AI] `flatpak run` is a command-line tool used to execute applications sandboxed by Flatpak, a software deployment and application packaging system. The `--nosocket` option disables the use of Unix domain sockets for inter-application communication within the sandbox. This can be useful when running applications in isolated environments or when dealing with specific security concerns. By omitting socket communications, potential attack vectors are minimized.'
        ostree-verbose: '[AI] `flatpak run --ostree-verbose` is a command used in the Flatpak package management system for Linux. It invokes a Flatpak application or bundle with the `--ostree-verbose` option, which increases the verbosity of output during the OSTree update check and application launch. Essentially, this command ensures that any OSTree-related actions taken are accompanied by detailed information about what is being done, making it useful for debugging and understanding system updates at a deeper level.'
        own-name: '[AI] `flatpak run --own-name` is a command used in Flatpak, a software deployment and packaging system. This command allows running an application packaged with Flatpak as a separate user session with its own unique name, providing better isolation and security for the application''s data. The specified name will be displayed on the login screen, enabling users to easily identify and select the application session to launch.'
        parent-expose-pids: '[AI] `flatpak run --parent-expose-pids` is a command used in the Flatpak application packaging system. It allows a child Flatpak application to expose the Process IDs (PIDs) of its parent processes to its own sandboxed environment. This enables inter-process communication between the parent and child applications, which can be necessary for certain use cases such as complex workflows or sharing data between applications. When using this command, any PIDs specified will be accessible to the child application''s subprocesses.'
        parent-pid: '[AI] `flatpak run --parent-pid` is a command used in Flatpak, a software deployment and sandboxing system. This command allows running a Flatpak application with a specific parent process ID (PID). The parent PID specifies which existing process the new application will be attached to, sharing its namespace for inter-process communication and resource management. This feature can be useful for debugging or integrating applications into an existing system environment.'
        parent-share-pids: '[AI] The `flatpak run` command is used to execute a Flatpak application with specific settings. The option `--parent-share-pids` enables inter-application Process ID (PID) sharing between the parent and child applications. This means that if the parent application terminates, all its child processes will also be terminated. This setting can be useful for ensuring the proper termination of related processes when an application is closed.'
        persist: '[AI] `flatpak run --persist` is a command used in the Flatpak application packaging system. It instructs Flatpak to run a specific application with persisted data, meaning that any changes made to the application''s files during execution will be saved beyond the life of the running instance. This command is useful when you want to ensure that an application retains its state and configurations between launches.'
        remove-policy: '[AI] `flatpak run --remove-policy` is a command used in Flatpak, a software deployment and packaging system. It removes the default security policy for an installed application or runtime, allowing it to bypass the usual sandboxing and run with unrestricted privileges. This can be useful for testing or debugging purposes, but it''s important to note that running applications without their intended policies in place may introduce potential security risks.'
        runtime: '[AI] `flatpak run` is a command-line utility provided by Flatpak, a software deployment and package management system. The `--runtime` option specifies the runtime environment to be used for running the application. In other words, it determines which version of the operating system''s libraries and dependencies are used when executing the application. Using this command allows you to ensure consistent environments across different systems and isolate applications from each other.'
        runtime-commit: '[AI] `flatpak run` is a command provided by Flatpak, a software deployment and application packaging system. The `--runtime-commit` option specifies that the latest committed runtime (a collection of libraries and dependencies for an application) should be used when running the application. This ensures the application uses the most recent available versions of its dependencies. If no runtime is specified, Flatpak will use the default one installed on your system.'
        runtime-version: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to launch an installed application with its dependencies. The `--runtime-version` option specifies which version of the runtime (the base set of libraries and tools that an application relies on) to use for running the application. This can be useful when you want to ensure that a specific version of the runtime is used, for instance, for testing or debugging purposes.'
        sandbox: '[AI] `flatpak run --sandbox` is a command used in the Flatpak application packaging and deployment system. It starts a new instance of an application with its own isolated environment, called a sandbox. This sandbox ensures that the application runs in a containerized environment with restricted access to the host system''s resources and files, improving security and stability. The command `flatpak run` followed by the application identifier activates the specified application within its respective sandbox.'
        session-bus: '[AI] `flatpak run` is a command used in the Flatpak application packaging system to execute a command within the context of a specific Flatpak application. The `--session-bus` option is used to connect the command to the system bus, allowing it to interact with other system services and applications as part of the same user session. This can be useful for running system-level commands or tools that require access to the session bus to function properly within a sandboxed environment.'
        share: '[AI] `flatpak run --share` is a command used in the Flatpak application packaging system. It allows launching a Flatpak application with an additional option to share a Unix socket, file or directory between the host and the running application sandbox. The `--share` flag followed by the path specifies the item to be shared, which can then be accessed from the application using its regular file system path or Unix domain socket address. This feature enhances inter-process communication and cooperation between the host and the Flatpak application.'
        socket: '[AI] `flatpak run --socket` is a command used in Flatpak, a desktop application packaging and deployment system. This command allows running a Flatpak application and establishing a communication channel between it and another process through Unix domain sockets. The receiving process listens on the socket and sends or receives data as needed. This mechanism facilitates inter-application communication and can be particularly useful for IPC (Inter-Process Communication) scenarios.'
        system: '[AI] `flatpak run --system` is a command used in the Flatpak application packaging system. It allows running a Flatpak application with system privileges, meaning the application can access and modify files owned by the root user. The `--system` option specifies that the application should be installed globally for all users on the system rather than per-user. This command is useful when you need to run applications with higher permissions or make changes that affect the whole system.'
        system-no-talk-name: '[AI] The `flatpak run` command is used to execute a Flatpak application with its dependencies. The `--system-no-talk-name` option is used to specify that the application being run is a system application, meaning it''s installed for all users on the system and not just the current user. This option also sets the `XDG_SYSTEM_PREFIX` environment variable to the system prefix path, which allows the application to access system-wide resources and directories.'
        system-own-name: '[AI] `flatpak run` is a command used in the Flatpak application packaging system. The `--system-own-name` option specifies that the application being run should be registered as a system-wide application, meaning it will be available for all users on the system rather than just the user who installed it. When an application is run with this flag, it will also receive a well-known name, which simplifies launching the application from the command line or other applications. The application''s configuration files and data will be stored in the system-wide Flatpak directories, making them accessible to all users.'
        system-talk-name: |-
            [AI] `flatpak run --system` is a command used in the Flatpak package manager for Linux distributions. It allows running a Flatpak application with system privileges, meaning the application has access to system resources and can make changes that affect all users on the system.

            The `--talk-name` option is an argument provided along with this command, which outputs the name of the communicating process in a way that other system processes can understand. It's typically used for debugging or communication between different applications running with system privileges.
        talk-name: '[AI] `flatpak run` is a command from Flatpak, a software deployment and application packaging system. The `--talk-name` option is used to ask an application for its display name, which is the human-readable name that will be shown to users in interfaces like menus or launchers. So, running `flatpak run --talk-name <application>` will output the name of the specified Flatpak application.'
        unset-env: '[AI] `flatpak run --unset-env` is a command used in Flatpak, a software deployment and packaging system. This command allows you to unset (remove) an environment variable for a specific application or runtime running inside a Flatpak sandboxed environment. By doing so, you can modify the behavior of the application without modifying its source code or the global environment. It''s useful when you want to isolate your changes and keep the original state for other uses.'
        unshare: '[AI] `flatpak run --unshare` is a command used in the Flatpak application packaging system. It allows running a Flatpak application in an unconfined environment, meaning it runs with minimal system restrictions and no interaction with the host system''s X11 or network stack. This command is often used for testing purposes or when you need to run an application isolated from your main system. Keep in mind that unconfined environments can pose potential security risks as they bypass most of Flatpak''s default isolation features.'
        user: '[AI] `flatpak run --user` is a command used in the Flatpak application packaging system to execute a Flatpak application with user privileges. This command allows running applications that require access to user-specific data or functionality, without granting them full system permissions. When you use `--user`, Flatpak will run the application within the user''s environment and utilize their home directory for data storage.'
        usr-path: '[AI] `flatpak run` is a command used in Flatpak, a software deployment and application packaging system. It allows executing a command within the environment of a specific Flatpak application or runtime. The `--usr-path` option specifies the path to use for the global user data directory (also known as "user root"). This can be useful when running applications that rely on certain global configurations or libraries, which are not available in the default isolated sandbox of the application. Essentially, it lets you share resources between the host system and the running application while still maintaining containerization.'
        verbose: '[AI] `flatpak run --verbose` is a command used in the Flatpak package management system. The `--verbose` option increases the amount of output displayed during the execution of a Flatpak application or bundle. The `run` command itself starts and manages the execution of a Flatpak application, providing additional information about the running instance, including its environment variables, file descriptors, and other runtime resources. Overall, this command can be helpful for debugging and understanding the behavior of a specific Flatpak application.'
