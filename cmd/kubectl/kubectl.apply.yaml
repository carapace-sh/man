# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: apply (-f FILENAME | -k DIRECTORY)
description: Apply a configuration to a resource by file name or stdin
group: advanced
flags:
    --all: Select all resources in the namespace of the specified resource types.
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --cascade?: Must be "background", "orphan", or "foreground". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --force: If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
    --force-conflicts: If true, server-side apply will force the changes against conflicts.
    --grace-period=: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
    --openapi-patch: If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types.
    --overwrite: Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration
    --prune: Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.
    --prune-allowlist*=: Overwrite the default allowlist with <group/version/kind> for --prune
    --prune-whitelist&*=: Overwrite the default whitelist with <group/version/kind> for --prune
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --server-side: If true, apply runs in the server instead of the client.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --timeout=: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
    --validate?: Validation mode.
    --wait: If true, wait for resources to be gone before returning. This waits for finalizers.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: The files that contain the configurations to apply.
    -k, --kustomize=: Process a kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl apply` is a command used with Kubernetes to deploy or update applications and configuration resources in a cluster from manifest files. It sends the contents of a manifest file to the Kubernetes API server, which then creates or updates the corresponding resources based on the definitions in the manifests. The changes are persisted in the cluster until explicitly deleted or updated again through `kubectl apply`. This command is frequently used for continuous integration and delivery (CI/CD) pipelines and configuration management tasks to keep Kubernetes deployments in sync with the desired state specified in the manifest files.'
    flag:
        all: |-
            [AI] `kubectl apply --all` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. The `apply` subcommand is used to create or update Kubernetes resources based on the differences between the current state and the desired state specified in YAML files or manifest data.

            The `--all` flag is optional and when used, it automatically applies all the YAML files in the current directory recursively. This can be useful for deploying multiple related resources, such as a deployment, service, and ingress resource for a single application, with a single command. It's important to note that `--all` should only be used when you're sure that all the YAML files in the directory are related to the same application and will not cause unintended consequences when applied together.
        allow-missing-template-keys: |-
            [AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a given YAML file. The `--allow-missing-template-keys` flag is an optional argument that allows applying the YAML file even if it's missing some required keys.

            When a YAML file defining a resource is incomplete, i.e., it lacks some essential keys (which are mandatory according to the Kubernetes API specification), the `kubectl apply` command would normally throw an error and refuse to apply the changes. However, with the `--allow-missing-template-keys` flag, Kubernetes will ignore missing keys in the YAML file and still attempt to apply the available configurations.

            In essence, this flag lets you apply a YAML file that may have some missing required keys and proceeds with creating or updating resources based on the present information. It is essential to note that using this flag could result in suboptimal or inconsistent configurations, and it's recommended to use it cautiously only when necessary.
        cascade: |-
            [AI] `kubectl apply --cascade` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to apply changes to multiple related Kubernetes objects in a single operation.

            When you have multiple interconnected YAML files defining different types of Kubernetes resources, such as Deployments, Services, and ConfigMaps, applying each file separately might lead to inconsistencies or errors due to dependencies between these resources. In this scenario, using `kubectl apply --cascade` is beneficial.

            The `--cascade` flag instructs `kubectl` to apply changes not only to the provided YAML file but also to other dependent objects that are referenced within it. This ensures that all related resources are updated in a consistent manner, reducing the risk of errors and conflicts. It's an efficient way to manage complex Kubernetes applications with interconnected components.
        dry-run: '[AI] `kubectl apply --dry-run` is a command used with the Kubernetes `kubectl` tool to check the effects of applying a given Kubernetes manifest file or yaml definition, without actually creating or updating the resources in the cluster. This can be useful for validating changes before making them persistent, as it allows you to review the proposed modifications and their expected impact on your cluster''s current state, without any risk of unintended consequences. It returns the difference between the actual and desired state of the cluster in the form of Kubernetes manifests, which can be reviewed and acted upon at your discretion.'
        field-manager: |-
            [AI] `kubectl apply` is a command-line tool for deploying and managing applications on Kubernetes clusters. The `--field-manager` flag is an optional argument that enables using Kustomize for managing and syncing customizations to Kubernetes resources.

            With `--field-manager`, you can use Kustomize files, which are YAML or JSON documents defining sets of patches, called "customizations," to be applied to existing Kubernetes resources. This allows for incremental updates without affecting the entire resource and enables rolling back changes easily. Additionally, it supports multi-manifests, enabling the management of multiple related resources as a single entity.
        filename: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a local file. The `--filename` option specifies the path to the YAML or JSON configuration file that defines the resource(s) to be applied or updated in the cluster. When you run `kubectl apply --filename <file_path>`, Kubernetes processes the contents of the file and makes the necessary changes to your cluster, ensuring that your desired state is met. The command can create new resources if they don''t exist, or update existing ones based on the configuration in the file.'
        force: '[AI] `kubectl apply` is a command-line utility used to deploy or update Kubernetes resources from a configuration file or directly from YAML manifests. The `--force` flag, when used with this command, overwrites existing resources without prompting for confirmation, even if the applied configuration differs in non-material ways, such as comments or whitespace. This can be useful when you want to apply changes quickly and confidently without interruption. However, it''s important to exercise caution when using `--force`, as applying changes forcefully might cause unintended consequences.'
        force-conflicts: |-
            [AI] `kubectl apply` is a command-line tool used to deploy and manage applications on a Kubernetes cluster. The `--force-conflicts` flag is an optional argument that allows applying resources even if there are conflicts between the desired state in the file and the existing state on the cluster.

            When you use `apply` without `--force-conflicts`, it will only apply the changes if there are no conflicts, meaning that resources with the same name but different specifications will cause an error and prevent the application from being deployed.

            With the `--force-conflicts` flag, Kubernetes will attempt to merge any conflicts automatically. If a conflict cannot be resolved automatically, the application will still fail to deploy, but you'll have more information about which resources caused the conflict. This can be useful when making complex changes or when dealing with resources that may change frequently in your cluster.

            However, it is important to note that using `--force-conflicts` comes with increased risks as it may result in unintended consequences and potential data loss if not used carefully. Always ensure you understand the potential impacts before applying a configuration with conflicts enabled.
        grace-period: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a configuration file or directly from the standard input. The `--grace-period` flag sets the duration during which the system will honor delete requests on objects before marking them as deleted and evicting their pods (if applicable). This provides a window for users to rescue or save data before the resource is permanently removed, preventing accidental deletions. It''s useful when dealing with stateful applications or critical workloads, where rolling back or restoring from a backup may be necessary. The duration can be specified in seconds or using common time units such as minutes or hours.'
        kustomize: '[AI] `kubectl apply --kustomize` is a command used in Kubernetes to apply changes to your cluster based on customization files defined using the Kustomize format. The Kustomize format allows managing complex Kubernetes configurations as a collection of patches or differences to base manifests, making it easier to manage and deploy multiple YAML files together. Using `kubectl apply --kustomize`, you can specify a directory containing these customization files, and Kubernetes will apply the changes defined in them in the order and dependencies specified within the Kustomize configuration.'
        openapi-patch: '[AI] `kubectl apply --openapi-patch` is a command used with Kubernetes to update resources by applying patches defined in OpenAPI format (also known as JSON schema). This command allows making incremental changes to the existing YAML files or Cluster-wide API objects, without having to edit and reapply the entire YAML file. The patch files are supplied in JSON schema format, which is a standardized way of describing the structure and validation rules for APIs and data. This command is useful when making small changes to complex Kubernetes configurations while ensuring that the new configuration still conforms to the intended schema.'
        output: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a definition file or manually specified YAML manifest. The `--output` flag is an optional argument that specifies the format for the output of the operation. It can be set to various formats like json, yaml, go-template, or even stdout for no special formatting. By default, `kubectl apply` will show the status of the applied resources once the operation completes.'
        overwrite: '[AI] `kubectl apply` is a command-line tool used to deploy or update applications on Kubernetes clusters. The `--overwrite` flag modifies how `kubectl apply` handles conflicts when applying YAML manifests. With this flag, `kubectl apply` will replace the existing resources with the new ones, discarding any differences between the current state and the desired state in the YAML files. This can be useful when making large changes to resource configurations or when dealing with conflicting changes from multiple teams. However, it should be used with caution as it may cause unintended consequences if not fully understood.'
        prune: '[AI] `kubectl apply --prune` is a command used in Kubernetes to update the desired state of resources in a cluster based on the changes made in a YAML file or configuration manifest. The `--prune` flag, specifically, instructs `kubectl apply` to delete resources that no longer exist in the given manifest. In other words, it cleans up any unnecessary resources in the cluster by syncing the current state with the desired state defined in the YAML file or manifest. This helps keep the Kubernetes cluster clean and streamlined.'
        prune-allowlist: '[AI] `kubectl apply --prune-allowlist` is a command used with Kubernetes to apply changes to YAML files and manage Kubernetes resources. The `--prune-allowlist` flag is an optional argument that enables the deletion of resources not specified in the YAML files during an apply operation. It''s helpful for keeping infrastructure consistent by removing unwanted or outdated resources while applying new configurations.'
        prune-whitelist: '[AI] `kubectl apply --prune-whitelist` is a command used with Kubernetes and `kubectl`, its command-line interface. This option is utilized to remove resources in your cluster that do not match the definition files you are applying. The `--prune-whitelist` flag filters the deletion only to the resources defined in the provided files, thus avoiding accidental deletion of unintended resources. It helps to keep your Kubernetes configuration in sync with your actual running resources.'
        record: '[AI] `kubectl apply` is a command-line utility used to deploy or update resources in Kubernetes clusters. The `--record` flag is an optional argument for this command. When using `apply --record`, changes are applied in the background, creating a record of these changes in etcd (Kubernetes'' cluster-wide data store). This allows users to view and rollback changes using `kubectl history`. It''s useful when you want to track and manage your resource configurations over time.'
        recursive: '[AI] `kubectl apply --recursive` is a command used with Kubernetes to apply changes to multiple YAML files in a recursive manner, meaning it will go through subdirectories and apply the contents of all YAML files found. This can be useful when making updates to large or complex Kubernetes deployments where multiple files are interconnected, as it ensures that all related resources are updated consistently. The changes are applied according to the definitions in each file, which may include creating, updating, or deleting resources based on their respective manifests.'
        selector: '[AI] `kubectl apply` is a command-line tool used to deploy and manage applications on Kubernetes clusters. The `--selector` option filters the objects in a Kubernetes resource that should be updated or created based on their labels. Labels are key-value pairs attached to resources in Kubernetes, allowing for easy identification and selection of specific resources. Using `apply --selector` allows users to apply changes only to resources with matching labels, reducing potential impact on unrelated resources within the cluster.'
        server-side: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a local file or configuration. The `--server-side` flag is an optional argument that instructs the kubectl client to send the changes directly to the Kubernetes server for processing, without waiting for the response from the server or syncing the local state with the remote cluster. This approach allows for faster and more efficient application of changes, especially when dealing with large-scale deployments or frequent updates. However, it also means that the client does not perform any reconciliation or error handling, so it''s essential to ensure that the changes are correctly defined and compatible with the target environment before applying them using this flag.'
        show-managed-fields: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a configuration file or directly from the command line. The `--show-managed-fields` flag is an optional argument that can be used with `apply`. When this flag is provided, it will display the fields in the resource manifest that have been managed by `kubectl apply`. These are the fields that have been changed since the last applied version of the resource. This information can be helpful for understanding what modifications were made during the application process.'
        template: '[AI] `kubectl apply --template` is a command used in Kubernetes for applying configurations defined in custom templates written in the Go Text template language (Golang `text/template`). This command allows you to generate and apply Kubernetes manifests dynamically, making it an effective tool for automating infrastructure deployment with dynamic data or configuration. The process involves creating a .yaml file using the provided template, evaluating expressions within the template against your environment variables or input files, and finally applying the resulting YAML manifest via `kubectl`.'
        timeout: '[AI] `kubectl apply` is a command-line tool used to deploy or update Kubernetes resources from a configuration file. The `--timeout` flag sets the maximum time `kubectl` waits for the application of changes before reporting an error. It takes a duration value in the format "Nm" or "Ns", where N is a number and m/s is a unit of measurement for minutes or seconds, respectively. For example, `--timeout=30s` sets a timeout of 30 seconds. If the changes are not applied within this timeframe, an error will be thrown.'
        validate: '[AI] `kubectl apply --validate` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command applies changes defined in a Kubernetes configuration file against the current state of the cluster, but it does not actually make those changes. Instead, it validates the YAML files against the current cluster state and returns any differences or errors that would occur if the changes were applied. This can help prevent unintended modifications to running clusters and promote safe deployment practices.'
        wait: |-
            [AI] `kubectl apply` is a command-line tool used for deploying and managing applications on Kubernetes clusters. The `--apply` flag instructs `kubectl` to create or update the specified resources based on the given YAML file, or from standard input.

            The `--wait` flag, when used with `apply`, makes `kubectl` wait for the resources to be fully deployed and available before exiting. This ensures that the changes are fully propagated across the cluster before continuing with other tasks. The progress is displayed in real-time using status updates until the resources are ready.
