# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: config
description: Modify configuration values in .condarc
flags:
    --add=: Add one configuration value to the beginning of a list key.
    --append=: Add one configuration value to the end of a list key.
    --describe=: Describe given configuration parameters.
    --env: Write to the active conda environment .condarc file
    --file=: Write to the given file.
    --get=: Get a configuration value.
    --json: Report all output as json.
    --prepend=: Add one configuration value to the beginning of a list key.
    --remove-key=: Remove a configuration key (and all its values).
    --remove=: Remove a configuration value from a list key.
    --set=: Set a boolean or string key
    --show-sources: Display all identified configuration sources.
    --show=: Display configuration values as calculated and compiled.
    --stdin: Apply configuration information given in yaml format piped through stdin.
    --system: Write to the system .condarc file at '/opt/miniconda3/.condarc'.
    --validate: Validate all configuration sources.
    --write-default: Write the default configuration to a file.
    -h, --help: Show this help message and exit.
    -q, --quiet: Do not display progress bar.
    -v, --verbose: Use once for info, twice for debug, three times for trace.
documentation:
    command: '[AI] `conda config` is a command used in Anaconda and Miniconda distributions to configure various settings of the Conda environment manager. It can be used to view, edit, or set global and user-specific configuration files. Common uses include setting default channels for package installations, configuring proxy servers, or specifying custom build environments. The command supports subcommands like `--show`, `--set`, `--prepend`, `--append`, and others to perform specific configuration tasks. For example, `conda config --show` displays the current configuration settings, while `conda config --set channel.priorities my_channel` sets a priority for the specified channel in the configuration file.'
    flag:
        add: '[AI] `conda config --add` is a command used in Anaconda''s Conda packaging and environment management system. This command allows you to add new key-value pairs to existing Conda configuration files, such as the `.condarc` file. It takes two required arguments: the first is the name of the configuration file (usually implied as `.condarc`), and the second are the keys and values to be added, separated by an equals sign (`=`). For example, `conda config --add . condajupyter::trail_singletons true` would add the key-value pair `condajupyter::trail_singletons=true` to the `.condarc` file. This can be used to modify Conda''s default behavior for various settings, including package channels, cache locations, and other environment options.'
        append: |-
            [AI] `conda config --append` is a command used in Anaconda's Conda package manager to append a new key-value pair to an existing configuration file. This can be useful when you want to modify the default settings for Conda without overwriting any existing configurations. The command takes two arguments: the name of the configuration file (often `~/.condarc` or `/etc/conda/conda-env.conf`) and a string containing the key and value separated by an equals sign, enclosed in quotes if necessary (e.g., "--append mykey 'value'"). For example:

            ```sh
            conda config --append /etc/conda/conda-env.conf channels mychannel
            conda config --append ~/.condarc default_environment false
            ```

            These commands would respectively add `mychannel` to the list of channels in the system-wide configuration file and set the global default environment to off in the user-specific one.
        describe: '[AI] `conda config --describe` is a command used in Anaconda or Miniconda distribution of Python and its packages manager, Conda. This command provides a detailed description of current configuration settings for Conda, including the default channels, repositories, and other various options that have been set. The output can be useful for troubleshooting issues or for documenting the state of your Conda environment.'
        env: '[AI] `conda config --env` is a command used in Anaconda, a popular data science and machine learning platform, to configure environment-related settings. Specifically, this command shows or modifies the list of active environments and their corresponding paths. The output includes the name, path, and base directory for each environment. This command helps users manage multiple Python environments within Anaconda effectively.'
        file: '[AI] `conda config --file` is a command used in Anaconda or Miniconda distribution of Python and its packages management system, Conda. This command is used to edit or create configuration files for Conda. The `--file` option specifies the path to an existing YAML or INI file that will be used as a template or modified by Conda when setting various environment variables and other configuration settings. These changes can include default channels for package installations, proxy settings, and other Conda-specific settings. Modifications made with this command take effect after a new Conda environment is activated or the configuration files are sourced in a shell script.'
        get: '[AI] `conda config --get` is a command used in Anaconda''s Conda package management system. It retrieves the value of a specific configuration option from the local or default Conda configuration file (`.condarc`). The syntax is `conda config --get <option>`, where `<option>` is the name of the configuration setting to be queried. For example, `conda config --get channels` would return the list of condas-forge and other channels used by Conda for package installation.'
        help: |-
            [AI] `conda config --help` is a command used in Anaconda or Miniconda environments to display help information about managing Conda configuration files. These files store settings for various aspects of Conda, including channels (repositories), default environment, autoupdate preferences, and other user-defined settings. The `--help` option provides a detailed list of available config subcommands, their synopses, and usage examples. For instance:

            - `conda config --help` shows the general help message for all config commands.
            - `conda config env --help` displays help information specifically about the 'env' configuration setting.

            These options can be used to modify, create, or delete configurations as needed.
        json: '[AI] `conda config --json` is a command used in Anaconda''s Conda package management system to retrieve or set configuration settings in JSON format. It can be used with various sub-commands like `--list`, `--set`, or `--get` to modify or view specific settings. For instance, `conda config --list --json` displays all the current configuration settings as a JSON object.'
        prepend: '[AI] `conda config --prepend` is a command used in Anaconda''s conda package manager for modifying configuration files. The `--prepend` option appends new entries to the beginning of the specified configuration file, effectively overriding any existing keys with the same name but giving precedence to the newly added ones. This can be useful when you want to modify or add specific settings that will apply before any other configurations in the file. For instance, you may use it to set default channels for conda installations or environment creation.'
        quiet: '[AI] The `conda config --quiet` command is a configuration setting tool for Anaconda and Miniconda, which are data science and Python programming environments. This specific command is used to modify Conda configurations with minimal output or confirmation messages displayed in the terminal or command prompt. It helps to run the command quietly without interruptions, making it useful when automating tasks or running scripts in the background.'
        remove: '[AI] `conda config --remove` is a command used in Anaconda''s Conda package management system to remove specific configurations. When you run this command followed by the configuration name, it will delete that particular configuration from your Conda settings file, located in `~/.condarc` by default. This modification can affect how Conda behaves, such as changing the defaults for channels, offline mirrors, or Subsystems like conda-forge or Anaconda Cloud. The goal is to customize Conda''s behavior according to your requirements.'
        remove-key: '[AI] `conda config --remove-key` is a command used in Anaconda''s Conda package manager to delete a specific key from the user or base configuration files. It modifies the ''.condarc'' file in your user environment or the ''conda-env.yml'' file in the base environment, removing the specified key and its associated value. This can be useful when you want to remove or modify certain settings for Conda''s behavior.'
        set: '[AI] `conda config --set` is a command used in the Anaconda distribution of Python (Miniconda included) to set user configuration options. The syntax is `conda config --set key value`, where `key` is the specific configuration setting, and `value` is the desired value for that setting. This command persists the change in the `.condarc` file, which applies to the current user''s environment. This allows users to customize their Conda installation by changing various settings like default channels, offline mirrors, and other preferences.'
        show: '[AI] `conda config --show` is a command used in Anaconda''s conda package management system to display the current configuration settings. It shows various configurations, such as file paths for packages and environments, active channels, proxy settings, and more, providing transparency into the conda environment setup.'
        show-sources: '[AI] The `conda config --show-sources` command is used in Anaconda or Miniconda environments to display a list of currently configured Conda sources or repositories. These sources are where Conda looks for packages and dependencies when installing or updating software. The output shows the name, URL, and verification status of each source. This command can be helpful for troubleshooting dependency issues or managing multiple Conda environments with different package sources.'
        stdin: '[AI] `conda config --stdin` is a command used in Anaconda''s Conda package manager to read and modify configuration settings from or write them to the standard input stream instead of files. It allows users to interactively update Conda configurations in real-time without having to edit configuration files directly.'
        system: |-
            [AI] The `conda config --system` command is used to set configuration variables that apply system-wide for the Anaconda or Miniconda distribution of the Conda package manager. These settings are stored in the site-wide `conda-env.yml` file, located in the `~/.condabin/` directory on Unix-based systems and in the environment variable `%CONDA_INSTALL_PATH%\condabin` on Windows.

            Using this command, users can set default values for various Conda settings such as the default channels, offline mode, and other global options. The changes made with `--system` will affect all Conda environments on the system. It's important to note that using `--system` may impact multiple users if used on a shared system.
        validate: '[AI] `conda config --validate` is a command used in Anaconda''s Conda package manager to check the validity of the user-level configuration file (named ".condarc" or "conda-env.yml") for any syntax errors or inconsistencies. It does not modify the configuration files; it simply reports issues found during validation. This command ensures proper functioning and compatibility with Conda operations, facilitating an efficient and error-free environment setup.'
        verbose: '[AI] `conda config --verbose` is a command used in Anaconda''s conda package management system. The `--verbose` flag increases the amount of output provided by the command, displaying detailed information about the current configuration settings of the conda environment. This can be helpful for troubleshooting or understanding how specific configurations are set within a conda environment.'
        write-default: '[AI] `conda config --write-default` is a command used in Anaconda''s conda package management system. This command writes the current values of all configuration settings to the default conda configuration file located at `~/.condarc` (on Unix-based systems) or `%USERPROFILE%\Anaconda3\conda-win.ini` (on Windows). By doing so, these settings will be applied every time a new conda environment is created or modified. This can be useful for ensuring consistent configurations across different projects or machines.'
