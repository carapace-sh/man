# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [path] [flags]
description: Create a new GitLab project/repository.
flags:
    --defaultBranch=: Default branch of the project. If not provided, `master` by default.
    --internal: 'Make project internal: visible to any authenticated user (default)'
    --readme: Initialize project with README.md
    --remoteName=: Remote name for the Git repository you're in. If not provided, `origin` by default.
    -P, --public: 'Make project public: visible without any authentication'
    -d, --description=: Description of the new project
    -g, --group=: Namespace/group for the new project (defaults to the current userâ€™s namespace)
    -n, --name=: Name of the new project
    -p, --private: 'Make project private: visible only to project members'
    -t, --tag*=: The list of tags for the project.
documentation:
    command: '[AI] `glab repo create` is a GitLab CLI command used to create a new repository within GitLab. It requires specifying the project name and optionally, a description, visibility level (public or private), and an initial branch or commit. The syntax is as follows: `glab init <project-name> [<description>] [--branch <branch-name>] [--commit <commit-sha>]`. This command interacts with GitLab''s API to create the new repository, making it a quick and efficient way to manage your projects from the command line.'
    flag:
        defaultBranch: '[AI] `glab` is a Git client for the GitLab API, developed by GitLab. The command `glab repo create --default-branch <branch-name>` creates a new repository in GitLab using the given name for the default branch. In other words, when initializing a new GitLab repository with this command, the specified branch name will be set as the initial commit and the main branch for the project.'
        description: '[AI] The `glab repo create` command is a GitLab CLI (Command Line Interface) command used to create a new repository within GitLab. The `--description` option is used to provide a brief description or summary for the newly created repository. This option helps in documenting the purpose of the repository, making it easier to identify and manage within GitLab.'
        group: |-
            [AI] `glab` is a Git client for GitHub written in Rust, which provides an alternative CLI to the official GitHub CLI (`gh`) with some additional features. The command `glab repo create --group` creates a new Git repository on GitHub with the given name and sets the repository's group ownership.

            The basic syntax is:
            ```
            glab repo create <new_repo_name> --group <owner_or_group_name>
            ```
            Replace `<new_repo_name>` with your desired new GitHub repository name, and `<owner_or_group_name>` with the name of an existing GitHub user or group that you want to associate as the repository's owner or group. This command requires authentication to GitHub using `glab` (typically achieved through environment variables or configuration files). Once executed successfully, a new Git repository is created on GitHub and can be cloned using standard Git commands.
        internal: |-
            [AI] `glab` is a Git command-line interface written in Rust, which provides an alternative to using Git over SSH or HTTPS for interacting with GitLab repositories.

            The `repo create --internal` command creates a new internal Git repository within the current GitLab project. This means that the repository will not be publicly accessible, and only users with access to the project can clone, push, or pull from it. The repository's data is stored entirely within the GitLab server, making it ideal for storing sensitive or private information.
        name: '[AI] `glab` is a Git client for GitLab written in Go language. The command `glab repo create --name <NEW_PROJECT_NAME>` creates a new repository in GitLab using the `glab` tool. This command takes an argument `--name` to set the name of the new project. Once executed, it initializes a local Git repository and links it to the remote one on GitLab with the specified project name.'
        private: '[AI] `glab repo create --private` is a command used in GitLab CLI (Command Line Interface) to create a new private repository within GitLab. When creating the repository with this option, it ensures that the project will have restricted access, meaning only users with proper authorization can view or contribute to the repository. This command helps in maintaining security and control over sensitive projects.'
        public: '[AI] The `glab repo create --public` command is used with GitLab CLI (glab) to create a new public repository in GitLab. This means that anyone can clone, fork, and make contributions to the repository without requiring authentication. It''s suitable for open-source projects or collaborative efforts where you want broad access.'
        readme: '[AI] `glab` is a Git command-line interface tool for GitLab that allows users to interact with GitLab repositories using Git commands. The command `glab repo create --readme` creates a new GitLab repository with an initial README file. In simple terms, it sets up a new GitLab repository with a default README file when creating it.'
        remoteName: '[AI] `glab` is a Git CLI tool, a part of the Glints ecosystem, which provides an alternative to using Git over SSH or HTTPS. The `repo create` command is used to create a new local Git repository. The `--remoteName` option sets a custom name for the remote URL during repository creation. For instance, `glab repo create <project-name> --remoteName origin upstream` creates a new local Git repository named `<project-name>` with the default `origin` remote name set to `upstream`.'
        tag: '[AI] The `glab repo create --tag` command is used with GitLab''s CLI (Command Line Interface) tool, Glab, to create a new repository in GitLab and assign one or more tags to the initial commit. In other words, it sets up a new GitLab repository and automatically applies specified tags to the repository''s first commit. This command simplifies the process of creating a repository and tagging commits at the same time.'
