# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fmt-merge-msg
description: Produce a merge commit message
group: low-level helper
flags:
    --into-name=: Prepare the merge message as if merging to the branch <branch>
    --log=: At most <n> commits from each merge parent will be used (20 if <n> is omitted)
    --no-log: Do not list one-line descriptions from the actual commits being merged
    -F, --file=: Take the list of merged objects from <file> instead of stdin
    -m, --message=: Use <message> instead of the branch names for the first line of the log message
documentation:
    command: '[AI] The `git fmt-merge-msg` command is a Git porcelain (user-space) command used to automatically format merge commit messages according to the conventions defined in the `.gitmessage` or `.editorconfig` files, if they exist, before creating a new merge commit. It''s designed to help keep consistent formatting across all merge commits in your Git repository.'
    flag:
        file: '[AI] `git fmt-merge-msg --file` is a Git command used to automatically format and improve commit messages during merge conflicts resolution. The `--file` option specifies the path to a file containing the list of merge commits that need to have their messages updated. When run, Git will read the specified file line by line, interpreting each entry as the message for the corresponding merge commit. It will then apply any configured message templates or style rules to produce well-formed, consistent commit messages. The result is saved back into the same file with each updated message preceded by a hash (SHA) and the corresponding author information. This command aims to improve the commit history by enforcing a consistent format for merge commits, making it easier to follow and understand the changes made in a project.'
        into-name: '[AI] `git fmt-merge-msg --into-name` is a Git command used to edit the commit message template in place, for use with interactive rebase or merge commands. The `--into-name` option specifies that the new message should be written into the existing file instead of creating a new one. This can be useful when you want to modify messages in a consistent way across multiple commits without having to create and manage extra files.'
        log: '[AI] The `git fmt-merge-msg --log` command is used to display the commit messages of merged branches in a more readable and consistent format. It is part of Git''s "format-merges" feature which can be configured using the `.gitmessage` file in the repository or globally via the user configuration. The `--log` option displays the output in the default git log format, including the commit messages, author information, and commit hash.'
        message: '[AI] The `git fmt-merge-msg --message` command is used to modify or format the commit message of a merge commit in Git. The `--message` option allows you to pass a new commit message directly as an argument, and the `fmt-merge-msg` subcommand will automatically apply any configured message formatting rules to create a more consistent and clearer commit history. This is particularly useful when working on collaborative projects or when wanting to ensure that all commit messages follow a specific style guide.'
        no-log: '[AI] The `git fmt-merge-msg --no-log` command is used to reformat and update the message of the last merge commit in the current branch without showing the history log for the commit. This can be helpful when making minor changes to the merge message, such as fixing typos or formatting issues. By using `--no-log`, you skip the interactive rebase interface and apply the message change directly.'
