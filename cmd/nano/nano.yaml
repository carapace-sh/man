# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: nano
description: Nano's ANOther editor, inspired by Pico
flags:
    -!, --magic: Also try magic to determine syntax
    -%, --stateflags: Show some states on the title bar
    -_, --minibar: Show a feedback bar at the bottom
    -A, --smarthome: Enable smart home key
    -B, --backup: Save backups of existing files
    -C, --backupdir=: Directory for saving unique backup files
    -D, --boldtext: Use bold instead of reverse video text
    -E, --tabstospaces: Convert typed tabs to spaces
    -F, --multibuffer: Read a file into a new buffer by default
    -G, --locking: Use (vim-style) lock files
    -H, --historylog: Log & read search/replace string history
    -I, --ignorercfiles: Don't look at nanorc files
    -J, --guidestripe=: Show a guiding bar at this column
    -K, --rawsequences: Fix numeric keypad key confusion problem
    -L, --nonewlines: Don't add an automatic newline
    -M, --trimblanks: Trim tail spaces when hard-wrapping
    -N, --noconvert: Don't convert files from DOS/Mac format
    -O, --bookstyle: Leading whitespace means new paragraph
    -P, --positionlog: Log & read location of cursor position
    -Q, --quotestr=: Regular expression to match quoting
    -R, --restricted: Restrict access to the filesystem
    -S, --softwrap: Display overlong lines on multiple rows
    -T, --tabsize=: Make a tab this number of columns wide
    -U, --quickblank: Wipe status bar upon next keystroke
    -V, --version: Print version information and exit
    -W, --wordbounds: Detect word boundaries more accurately
    -X, --wordchars=: Which other characters are word parts
    -Y, --syntax=: Syntax definition to use for coloring
    -Z, --zap: Let Bsp and Del erase a marked region
    -a, --atblanks: When soft-wrapping, do it at whitespace
    -b, --breaklonglines: Automatically hard-wrap overlong lines
    -c, --constantshow: Constantly show cursor position
    -d, --rebinddelete: Fix Backspace/Delete confusion problem
    -e, --emptyline: Keep the line below the title bar empty
    -f, --rcfile=: Use only this file for configuring nano
    -g, --showcursor: Show cursor in file browser & help text
    -h, --help: Show this help text and exit
    -i, --autoindent: Automatically indent new lines
    -j, --jumpyscrolling: Scroll per half-screen, not per line
    -k, --cutfromcursor: Cut from cursor to end of line
    -l, --linenumbers: Show line numbers in front of the text
    -m, --mouse: Enable the use of the mouse
    -n, --noread: Do not read the file (only write it)
    -o, --operatingdir=: Set operating directory
    -p, --preserve: Preserve XON (^Q) and XOFF (^S) keys
    -q, --indicator: Show a position+portion indicator
    -r, --fill=: Set width for hard-wrap and justify
    -s, --speller=: Use this alternative spell checker
    -t, --saveonexit: Save changes on exit, don't prompt
    -u, --unix: Save a file by default in Unix format
    -v, --view: View mode (read-only)
    -w, --nowrap: Don't hard-wrap long lines [default]
    -x, --nohelp: Don't show the two help lines
    -y, --afterends: Make Ctrl+Right stop at word ends
    -z, --suspendable: Enable suspension
documentation:
    command: '[AI] `nano` is a popular text editor in Unix-like operating systems. It''s known for its simplicity and user-friendliness. Users can open, create, edit, and save files using `nano`. To use it, simply type `nano filename` in the terminal, where "filename" is the name of the file you want to edit. Once opened, you can make edits by typing and using basic text editing keys like Ctrl+O (to write out and save changes) and Ctrl+X (to quit).'
    flag:
        afterends: '[AI] `nano` is a text editor. The `--after-ends` option is used with the `nano` command to open a file and place the cursor at the end of the last line instead of the beginning of the last line when editing the file. This can be useful for quickly appending text to an existing file without having to use extra keys or commands.'
        atblanks: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--atblanks` is not a standard flag for `nano`, but it can be implemented as a user-defined keybinding or script. This customization modifies the behavior of `nano` to automatically insert tabs at blank positions when typing, based on the current tab stop setting. It''s useful for maintaining consistent indentation while editing text files.'
        autoindent: '[AI] `nano` is a text editor utility. The option `--autoindent` is used to enable automatic indentation in `nano`. With this setting, when you press enter to start a new line within a block of code or text, the cursor will move to the correct indentation level for that language or text type. This helps maintain consistent formatting and makes the text easier to read.'
        backup: '[AI] `nano` is a text editor commonly used in Unix-like operating systems. The `--backup` option is used when saving files to create a backup of the original file with a suffix `~`. For instance, if you save a file named "data.txt", a backup will be created as "data.txt~". This can help prevent accidental loss of data by keeping a copy of the previous version. The backup is automatically created in the same directory as the original file.'
        backupdir: '[AI] `nano` is a text editor commonly used in Unix-like operating systems. The `--backupdir` option specifies a directory where `nano` will store backup copies of files before saving overwrites. When you save a file using `nano`, if the specified filename already exists, it will be backed up by appending a tilde (~) and a number to the original filename and moved to the specified backup directory. This is useful for preventing accidental loss of data when editing files.'
        boldtext: '[AI] `nano` is a text editor utility commonly used in Unix-like operating systems. The `--boldtext` option is one of its less frequently used features. When enabled, it allows users to set bold text formatting within the document being edited. This can be useful for creating headings or emphasizing certain text. However, it''s important to note that this formatting will only be visible in terminals or terminal-based environments that support bold text. In code editors with graphical user interfaces, users might prefer other methods like changing the font color or using specific symbols for headings instead.'
        bookstyle: '[AI] The `--bookstyle` option is a formatting style used with `nanoc`, a text processor for generating static websites with Markdown content. This style, specifically named "book," is designed to create output that closely resembles printed books. It uses a two-column layout for displaying source code blocks and supports features like syntax highlighting, line numbers, and code folding. The goal is to produce visually appealing and easy-to-read documentation or manuals.'
        breaklonglines: '[AI] `nano` is a text editor with various features for manipulating and editing files. The option `--breaklonglines` is used to automatically wrap long lines of text when editing a file within `nano`. This can make the content easier to read on narrow terminals or screens without scrolling horizontally. When saved, the wrapped lines will be written as multiple lines in the original file.'
        constantshow: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--constantshow` is not a common usage for this editor. However, it can be used to display constant values (i.e., unchangeable data) in a Nano script or configuration file. When using this flag, the values are shown in the editor window without the ability to modify them, ensuring the data remains constant during editing sessions.'
        cutfromcursor: |-
            [AI] `nano` is a text editor with simple and intuitive interface, often used in Unix-like operating systems. The `--cutfromcursor` option is not a standard command for `nano`, but rather an extension or customization.

            This option allows you to cut text from the current cursor position to the end of the line, when you press `Ctrl+K`. When activated, this feature behaves similarly to the `Ctrl+K Ctrl+U` shortcut in Vi/Vim, which cuts the text from the cursor to the beginning of the line. With `--cutfromcursor`, you can quickly cut text starting from your current position, making it a useful addition for efficient editing tasks.
        emptyline: '[AI] The `nano` text editor''s `--emptyline` option is used to display empty lines as blank spaces in the editor. By default, Nano hides empty lines when editing a file. With this option, all empty lines are visible. This can be helpful for maintaining consistent formatting or for better visualization of the content, especially in code files.'
        fill: '[AI] `nano` is a text editor command-line utility. The `--fill` option is used to set the filling rules for text editing. With `--fill`, you can specify how long lines should be filled when wrapping text to prevent manual line breaking. For instance, `nano --fill=72 filename` sets the default line length to 72 characters. This option helps maintain consistent formatting and readability in your text files.'
        guidestripe: '[AI] `nano` is a popular text editor for Unix-like operating systems. The `--guidestripe` option is used to display a vertical line, called a guide stripe or ruler, on the screen while editing a file with Nano. This line helps users keep track of column positions while aligning text or making other edits that require precise positioning.'
        help: '[AI] `nano --help` displays a brief help message for the Nano text editor, listing its basic usage and some common commands such as opening, saving, cutting, pasting, searching, and quitting files. It also mentions the ability to use various keyboard shortcuts and customize the editor''s appearance.'
        historylog: '[AI] The `--history-log` flag in Nano, a popular text editor for Unix-like operating systems, enables the creation of a history log file. This log records each edit session, including the opening and closing times, as well as any saved files. By default, this feature is disabled, but it can be activated by specifying `--history-log=filename` when starting Nano or adding `set history-log filename` to your `~/.nanorc` configuration file. This log can be useful for tracking and analyzing editing activity, particularly in a multi-user environment or for system administrators managing large files.'
        ignorercfiles: '[AI] The `--ignorercfiles` option in Nano, a text editor, is used to skip loading custom configuration files (e.g., `.nanorc`) located in the user''s home directory or project-specific directories when opening or creating a new file. This can be helpful when working with multiple projects that have different configuration preferences and wanting to start with a clean slate. It does not affect saving changes made to the file.'
        indicator: '[AI] The `--indicator` flag in Nano, a text editor for Unix-like operating systems, is used to display visual indicators while navigating and editing text. These indicators include arrowheads for cursor movement, a vertical bar indicating column numbers, and a horizontal bar showing the current line number. Using this flag enhances the user experience by providing clear feedback on the editing position within the file.'
        jumpyscrolling: '[AI] `--jumpyscrolling` is a flag in Nano text editor that allows for smooth scrolling through large files by jumping multiple lines at a time. When enabled, pressing the arrow keys or the Page Up and Down keys moves the cursor by larger increments, making it quicker to navigate through lengthy documents.'
        linenumbers: '[AI] The `--linenumbers` option in Nano, a popular text editor, displays line numbers along with the text in the editing window. This feature can be helpful for navigating large files or for tasks like debugging code or ensuring correct indentation. It does not affect any other functionality of Nano and can be turned on or off at any time by pressing `Ctrl+M` followed by `G`.'
        locking: '[AI] `nanoc` is a simple and fast text-based content manager. The `--locking` option in `nanoc` is used to enable file locking during compilation or build processes. With file locking enabled, no other process can modify the locked files while they are being compiled or built, preventing conflicts and ensuring consistency in the output. It''s particularly useful when multiple users are working on the same project, as it prevents unintended changes to each other''s work.'
        magic: |-
            [AI] `nano` is a popular text editor used in Unix-like operating systems. The option `--magic` is not a built-in feature of `nano`, but rather an option provided by some external plugins or configurations.

            This option enables or disables the recognition and highlighting of certain character sequences, called "magic numbers," within the text file being edited with `nano`. Magic numbers are typically used to denote specific data formats or types in binary files, and their recognition can aid in editing such files more effectively.

            For example, enabling hexadecimal magic number recognition in a binary file might display specific sequences as clickable links that allow users to edit the hexadecimal values directly within the text editor. The actual implementation of this feature may vary depending on the plugin or configuration used.
        minibar: '[AI] `nano` is a popular text editor in Unix-like operating systems. The `--minibar` option is used to disable the minibar at the bottom of the screen when editing files with nano. The minibar displays various information like file name, line number, and position, as well as some common commands. Disabling it can provide more space for editing text on the terminal window.'
        mouse: '[AI] The `--mouse` option in Nano, a popular text editor, enables mouse support when editing files in a terminal environment. This allows users to navigate and interact with the text more intuitively by clicking and dragging the mouse cursor instead of using keyboard-based commands. Additionally, right-clicking provides context menus for common actions like copy, paste, and undo/redo.'
        multibuffer: '[AI] `nano` is a text editor in Unix-like operating systems. The `--multibuffer` flag is an option that allows editing multiple files simultaneously within the same `nano` instance, using separate windows or buffers. This can be useful for comparing or editing multiple files at once. With this flag, you can switch between the buffers using keyboard shortcuts or menu items. This feature improves productivity when working on multiple related files.'
        noconvert: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--noconvert` is used to prevent `nano` from automatically converting certain characters when saving a file. This can be useful when working with files that contain specific character encodings or special characters that might be converted incorrectly during save. By using the `--noconvert` flag, you ensure that the file''s original content is preserved upon saving.'
        nohelp: '[AI] The `nano` command with the option `--nohelp` disables the display of the built-in help message when starting the text editor. This can be useful when running scripts or automated processes where you don''t want unnecessary messages to appear.'
        nonewlines: '[AI] The `nano` text editor command `--nonewlines` is an option used to prevent the automatic insertion of newline characters at the end of saved files. This can be useful when dealing with files that should not contain trailing newline characters, such as configuration or script files. By using this option, any existing newline characters in the file will be preserved and no new ones will be added when saving the file.'
        noread: '[AI] The `nano` command with the `--noread` option is used to open a new, empty text file in the Nano text editor without loading its previous content. This can be useful when you want to start from scratch without any existing text in the file.'
        nowrap: '[AI] `nano --nowrap` is a command-line option used with the text editor Nano. The `--nowrap` flag disables automatic line wrapping while editing files in the terminal. With this option, long lines will not be truncated and instead extend beyond the width of the terminal window, allowing the user to edit them without interference from line wrapping.'
        operatingdir: '[AI] `--operating-directory` is an option used with Nano, a popular text editor. This option sets the working directory for Nano when it starts up. By default, Nano uses the current directory of the terminal from which it was invoked. However, with `--operating-directory`, you can specify a different directory path. This can be useful when editing files located in different directories without having to change directories frequently.'
        positionlog: '[AI] The `--positionlog` option in Nano, a text editor, generates a log file that records the cursor position and other relevant information during the editing session. This feature is particularly useful for scripts or automated processes where keeping track of the editing position is important, as it allows resuming an editing session from the exact point where it was previously interrupted.'
        preserve: '[AI] `nano` is a popular text editor used in Unix-like operating systems. The option `--preserve` or `-p` is used when invoking nano from the command line to edit a file, ensuring that the file will be saved with the same name and location upon exiting the editor, even if it was opened as a copy or with a different name in the editor. This can help prevent accidental overwriting of files.'
        quickblank: '[AI] `nano` is a text editor commonly used in Unix-like operating systems. The `--quickblank` option, when used with the `nano` command, automatically sets an entire blank line as the new line whenever the user presses the Enter key, without displaying the cursor or blinking caret character. This can be useful for quickly adding multiple empty lines to a file without interruption from the editor''s normal behavior.'
        quotestr: '[AI] `nano` is a text editor. The option `--quotestr` is used to treat strings in a special way when editing files with `nano`. With this option, double quotes (") are treated as literals and not as delimiters for variable expansion or other shell features. This can be useful when editing configuration files or scripts where the original quotes should be preserved.'
        rawsequences: '[AI] The `nano` flag `--rawsequences` is used in bioinformatics, specifically with tools like `nanopore-basecaller`, which processes data from Nanopore sequencing technology. This flag instructs the basecaller to output raw sequencing data as unprocessed and unfiltered FAST5 files instead of the default output of basecalled FASTQ sequences. These raw FAST5 files contain the original sensor data, allowing further downstream processing for basecalling improvement or analysis using alternative methods.'
        rcfile: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--rcfile` is used to specify a custom configuration file for `nano`. When you run `nano --rcfile <filename>`, it sets the specified file as the runtime configuration for `nano` instead of using its default settings. This can be useful if there are specific preferences or keybindings that you frequently use and want to have consistently across multiple sessions.'
        rebinddelete: '[AI] `nano` is a text editor that comes with most Linux distributions. The option `--rebinddelete` is used to change the key binding for delete in `nano`. By default, delete is bound to `Backspace`, but `--rebinddelete` changes it so that deleting a character is done using the `Control + U` keys instead. This can be useful for users who prefer this binding or need to use the Backspace key for other purposes.'
        restricted: '[AI] The `nano` command with the `--restricted` option is used to open a text editor with restricted features. This means that certain actions, such as cutting, pasting, or saving files outside of the current directory, are disabled. It''s often used in a chroot environment or when working with sensitive files where modification should be limited.'
        saveonexit: '[AI] `nano` is a text editor commonly used in Unix-based systems. The option `--saveonexit` is a flag that tells `nano` to automatically save and exit the file when it''s closed, either by using the Save and Exit buttons on the user interface or by pressing `Ctrl+X`. This flag helps prevent unsaved changes from being lost in case of accidental closures.'
        showcursor: '[AI] The `--showcursor` flag in Nano, a popular text editor in Unix-like operating systems, is used to display the text cursor as a block or a blinking vertical bar. By default, Nano hides the cursor to minimize distraction from the editing process. However, users may prefer to see the cursor for better navigation and positioning within the document. Therefore, using `--showcursor` flag will make the cursor visible during editing sessions.'
        smarthome: '[AI] The `nano` flag `--smarthome` is not a standard flag for the text editor Nano. It seems to be specific to the home automation platform, Home Assistant, which uses Nano as its default editor. The `--smarthome` flag is used to open or edit a configuration file specifically for Home Assistant''s SmartHome component, enabling advanced features related to home automation control and integration.'
        softwrap: '[AI] `nano` is a popular text editor with various features, including line wrapping. The `--softwrap` option is a specific feature that allows for flexible line wrapping. In contrast to hard wrapping where the text is forced to fit within a line and potentially truncating words, soft wrapping maintains word integrity by displaying long lines as multiple lines and allowing the user to scroll horizontally to read them in full. This makes it easier to edit large files with long lines while still keeping an overview of the content.'
        speller: '[AI] The `nano` text editor comes with a built-in spell checker called `--speller`. When this option is used, `nano` checks the spelling of words in the open file as you type. If it detects a misspelled word, it underlines it in red and suggests potential correct corrections when you press `Ctrl+]`. You can then select the suggested correction using the arrow keys and confirm it by pressing `Alt+A`. This can help reduce errors and improve the accuracy of your text editing.'
        stateflags: |-
            [AI] `nano` is a popular text editor in Unix-like operating systems. The `--stateflags` option is not a widely known or commonly used flag for `nano`. It is an internal flag used by scripts or automated tools to inspect or modify the state of a `nano` session.

            The `--stateflags` option outputs various flags that describe the current state of a `nano` editing session. These flags include information about modified files, line numbers display, and other session-specific settings. The output is in a comma-separated list format for easy parsing by scripts.

            For example:

            ```bash
            $ nano --help | grep --stateflags
            --stateflags      Show and set various session flags.
            $ nano myfile --stateflags
            modified,line_number
            ```

            In the above example, the `--stateflags` option shows that the file "myfile" is modified and displays line numbers while editing in `nano`.
        suspendable: '[AI] The `--suspendable` flag in Nano, a popular text editor for Unix-like operating systems, allows the editor to be suspended and resumed from the same state later. This means that if you are editing a file in Nano and need to temporarily step away from your terminal, you can use this flag to keep the editing session alive instead of closing the editor. When you come back, you can resume the session by simply reattaching the terminal to the suspended Nano process. It''s useful for long editing tasks or multitasking between several terminal sessions.'
        syntax: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--syntax` or `-S` is used to set the file type or language mode for syntax highlighting when editing a file with `nano`. It enhances readability and makes it easier to write and understand code. For example, `nano --syntax sh myscript.sh` sets the mode to Shell script.'
        tabsize: '[AI] `nano` is a popular text editor in Unix-like operating systems. The `--tabsize` option is a command-line argument used with `nano`. It sets the number of spaces per tab for the new file or session, overriding the default value (usually 8 spaces). For example, `nano --tabsize=4 filename` sets the tab size to 4 spaces when editing the file `filename`. This can be useful when working with different coding styles or personal preferences.'
        tabstospaces: '[AI] The `nano` text editor''s `--tabstospaces` option is used to represent tab characters as spaces in a file. When enabled, each tab is converted into a specific number of spaces (typically eight) while editing the file. This may be desirable when working with source code or other types of text files that require consistent indentation and prefer spaces over tabs for that purpose. By default, `nano` uses tabs and does not automatically convert them to spaces unless explicitly told to do so through command-line options like `--tabstospaces`.'
        trimblanks: '[AI] `nano` is a text editor. The option `--trimblanks` is used when saving a file to automatically remove empty lines and trailing blank spaces, resulting in a more compact file. This can be useful for simplifying configuration files or scripts where unnecessary whitespace may not matter.'
        unix: '[AI] `nano` is a popular text editor in Unix-like operating systems. The option `--unix` is not a standard option for `nano`. However, it can be assumed that this option is used to set the text encoding to Unix (UTF-8). This might be necessary when working with files that use this encoding to ensure correct character representation.'
        version: '[AI] `nano --version` is a command used in Unix-like operating systems to check the version of the Nano text editor that is currently installed. When executed in a terminal or command prompt, it will display output similar to `Nano version 2.9.6 (using Termcap)`. The version number provided indicates the specific release of Nano that is installed on your system.'
        view: '[AI] `nano --view` is a command used with the text editor Nano to open a file in read-only mode. It allows users to view the content of a file without making any changes to it. This can be useful when wanting to check the contents of a file without modifying it accidentally or for reviewing purposes.'
        wordbounds: '[AI] `nano` is a popular text editor in Unix-like operating systems. The `--wordbounds` option is used when working with regular expressions within `nano`. With this option, the regular expression search will match whole words only. This means that the search term must appear as an entire word in the file for it to be found. For example, searching for the word "apple" in "nanoid --wordbounds apple" would not find "application" or "apple pie".'
        wordchars: '[AI] `nano` is a popular text editor with various features for manipulating and editing files. The option `--wordchars` is used to define custom word characters in `nano`. By default, `nano` recognizes common whitespace characters as words, but `--wordchars` allows you to specify additional characters as words. This can be useful when working with non-standard text formats or programming languages. The flag is typically followed by a string of characters representing the desired word characters. For example, `nano --wordchars=\*\*:` will treat `:**` as a word character.'
        zap: '[AI] `nano --zap` is a command used in the text editor Nano. It is used to remove or delete all content in the current file without creating a backup. The `--zap` option ensures that no backup files are created when using the ` Control+O ` command to write out the file. This can be useful when making intentional and irreversible changes, but should be used with caution.'
