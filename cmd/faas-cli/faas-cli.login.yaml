# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: login
description: Log in to OpenFaaS gateway
flags:
    --timeout=: Override the timeout for this API call
    --tls-no-verify: Disable TLS validation
    -g, --gateway=: Gateway URL starting with http(s)://
    -p, --password=: Gateway password
    -s, --password-stdin: Reads the gateway password from stdin
    -u, --username=: Gateway username
documentation:
    command: '[AI] The `faas-cli` (Function-as-a-Service CLI) `login` command is used to authenticate and log in to a specific Faas (Functions-as-a-Service) provider, such as OpenFaaS or Fission. This command sets up the authentication context for further interactions with the provider''s API, allowing you to deploy, manage, and scale functions using the `faas-cli`. By authenticating, you can securely access and control your functions hosted on the Faas platform.'
    flag:
        gateway: '[AI] `faas-cli login --gateway` is a command used with the FaaS (Function-as-a-Service) CLI tool to authenticate and log in to a specific FaaS gateway or provider, such as OpenFaaS or AWS Lambda. This allows you to deploy functions securely to that particular platform using your configured credentials. The `--gateway` flag specifies the URL of the target Faas gateway.'
        password: '[AI] The `faas-cli` is a command-line interface tool for interacting with Function-as-a-Service (FaaS) platforms, such as OpenFaaS or FaaSpact. The command `faas-cli login --password <password>` is used to log in to an authenticated Faas platform. This command prompts the user for the platform URL and organization name by default, but if provided, the `--url` and `--org` flags can be used instead. The `--password` flag is used to supply the login password as an argument to avoid being prompted for it during the login process.'
        password-stdin: '[AI] `faas-cli login --password-stdin` is a command used in the FaaS (Function-as-a-Service) toolchain, specifically with the FaaS CLI (Command Line Interface) tool. This command is used to log in to a specific Faas provider''s platform, such as OpenFaaS or AWS Lambda, using standard input for entering the password, making it more secure compared to typing it directly into the terminal. The flag `--password-stdin` instructs the CLI tool to read the password from the user''s terminal input instead of asking for it as a plain text argument or storing it in a configuration file.'
        timeout: '[AI] The `faas-cli login --timeout` command is used in the FaaS (Function-as-a-Service) context to authenticate and log in to a specific FaaS provider, such as OpenFaaS or AWS Lambda, using the FAAS-CLI tool. The `--timeout` option sets a timeout for the authentication process. If the authentication fails within the specified time, the command will terminate with an error. This option can be useful when dealing with slow or unresponsive FaaS providers to prevent endless waiting and improve overall workflow efficiency.'
        tls-no-verify: |-
            [AI] The `faas-cli` is a command-line interface tool for interacting with FaaS (Function-as-a-Service) platforms, such as OpenFaas or Cloud Events. The `--tls-no-verify` flag is used when logging into a Faas platform to bypass TLS certificate verification.

            This means that the `faas-cli` will not check the authenticity of the TLS certificates presented by the server during the connection. This should only be used when trusting the server's certificate authority unconditionally, as it poses a security risk by allowing man-in-the-middle attacks. It is generally recommended to use certificate verification for secure communication with FaaS platforms.
        username: '[AI] The `faas-cli login --username` command is used to log in or authenticate with a FaaS (Function-as-a-Service) platform, such as OpenFaaS or Falcon, using the Faas-cli tool. This command allows you to provide your username as an argument to simplify the login process without having to enter it interactively each time. After authentication, the Faas-cli tool will store your credentials securely in a configuration file for future use.'
