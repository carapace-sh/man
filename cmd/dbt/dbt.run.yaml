# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Compile SQL and execute against the current target database
flags:
    --defer: Defer to the state variable for resolving unselected nodes
    --exclude*=: Specify the models to exclude
    --favor-state: Defer to the state variable for resolving unselected nodes
    --log-path=: Configure the 'log-path'
    --no-defer: Do not defer to the state variable for resolving unselected nodes
    --no-favor-state: If defer is set, expect standard defer behaviour
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --selector=: The selector name to use
    --state=: Use the given directory as the source for json files to compare
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    --vars=: Supply variables to the project
    -f, --full-refresh: Drop incremental models and fully-recalculate
    -h, --help: show this help message and exit
    -m, --models*=: Specify the nodes to include
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
    -x, --fail-fast: Stop execution upon a first failure
documentation:
    command: '[AI] `dbt run` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command executes all data models in the given project directory against their respective sources, applying any logical transformations defined in those models. It generates output artifacts as defined in the model configuration files, ensuring data is consistent across various environments.'
    flag:
        defer: |-
            [AI] `dbt run --defer` is a command in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command allows users to schedule a database operation for later execution, known as deferred execution.

            When you run `dbt run --defer`, it writes the SQL statements generated by dbt models to be executed into a file named `_deferred.sql`. These SQL statements are then persisted in your version control system or database's defer system (such as Redshift, Snowflake, or BigQuery), depending on the chosen backend.

            Later, you can execute these deferred SQL statements using the `dbt run --defer up` or `--down` commands to apply or rollback the changes. This functionality is useful when executing scripts during off-hours or in controlled environments where you prefer not to immediately execute the generated SQL.
        exclude: '[AI] `dbt run --exclude` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command allows users to run all their dbt projects'' models except for those specified by the `--exclude` flag. It takes a list of model names or directories as an argument, and models in these excluded areas will not be executed during the `dbt run` operation.'
        fail-fast: '[AI] `dbt run --fail-fast` is a command used in dbt (data build tool), an open-source data transformation and testing platform. This command instructs dbt to execute each model or test file sequentially, but if any model or test fails, the entire workflow will stop immediately without running further models or tests. This flag ensures that any failure is addressed as soon as possible, preventing potential downstream errors in the data pipeline.'
        favor-state: '[AI] `dbt run --favor-state` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This command instructs dbt to prioritize running the latest saved state of models over re-executing them, even if their dependencies have changed. It can improve the performance and consistency of data pipelines by reducing the number of model executions required.'
        full-refresh: |-
            [AI] `dbt run --full-refresh` is a command used in dbt (data build tool), an open-source data transformation and testing platform. This command triggers a full refresh of the data model, which means it will:

            1. Build all artifacts from source files (SQL or other supported languages).
            2. Execute tests for each artifact.
            3. If all tests pass, materialize the results into the target database.
            4. Refresh any downstream dependencies that may have been affected by the changes.
        help: '[AI] `dbt run --help` is a command used in dbt (data build tool), an open-source data transformation and testing platform. This command displays help information about running models using dbt. It explains options such as selecting specific models or profiles, specifying output formats, and providing debug mode for detailed error messages. It''s useful when you want to understand how to execute dbt runs effectively and precisely.'
        log-path: '[AI] `dbt run` is a command in dbt (data build tool) used to execute data transformations defined in dbt projects. The option `--log-path` specifies the location where the output logs from the execution will be saved as a file. For instance, running `dbt run --log-path=logs/my_project.log` will save the logs of the execution into a file named "my\_project.log" located in the "logs" directory. This can be useful for debugging and tracking the progress of data transformations.'
        models: '[AI] `dbt run --models` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command triggers dbt to execute all defined models within a project, applying the specified database schema and generating output files based on the model definitions. The generated output is typically in the form of SQL scripts or tables in the target database.'
        no-defer: '[AI] `dbt run --no-defer` is a command in dbt (data build tool), used to execute database operations without deferring changes. The `--no-defer` flag disables the default deferred execution mode, meaning that SQL statements will be immediately run against the target database without waiting for other jobs to finish or conflicts to resolve. This can lead to faster development iterations but may also increase the risk of conflicts and errors. It''s essential to use it with caution and in controlled environments to ensure data consistency.'
        no-favor-state: '[AI] `dbt run --no-favor-state` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This command instructs dbt to execute tests and build artifacts without using any previously marked "favored states." Favored states are the results of tests that have passed in the past, which dbt may use by default if not explicitly told otherwise. By adding `--no-favor-state`, dbt will start with a clean slate for each run, disregarding previous favored states and using only the current configuration and data to produce results.'
        no-version-check: '[AI] `dbt run --no-version-check` is a command used in dbt (data build tool) projects to execute data transformations without performing version checks. This means that dbt will skip its built-in check to ensure all models and profiles are using the same project and profile versions before running. It''s useful when you want to force-run a specific model or set of models, possibly for testing or debugging purposes. However, be aware that disabling version checks might lead to inconsistent results if other parts of your data pipeline rely on version synchronization.'
        profile: '[AI] `dbt run --profile` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command executes dbt projects with a specific profile, which defines configuration settings such as database connections, output directories, and logging levels. The `--profile` option allows users to selectively apply profiles during execution, enabling them to manage different environments (e.g., development, testing, production) efficiently.'
        project-dir: '[AI] `dbt run --project-dir` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command instructs dbt to execute the defined data transformation jobs and tests located within a specific project directory. The "--project-dir" flag specifies the location of the dbt project, which includes files like `profiles.yml`, `models`, `tests`, and the `dbt_projects.yml` configuration file. This command ensures that the correct environment variables, profiles, and dependencies are utilized when running the jobs and tests within the specified project.'
        select: '[AI] `dbt run --select` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command executes a specific model or models without running any tests or other models. The `--select` option allows the user to specify one or more models by name to be executed. It''s useful when you only want to run certain models for quick testing, debugging, or data validation.'
        selector: '[AI] `dbt run --selector` is a command used in dbt (data build tool), an open-source data transformation and testing tool. This command allows users to run only specific models or tests that match certain selectors instead of running all models or tests. The `--selector` flag takes a regular expression as its argument, which is applied to the model or test names. Only models or tests with names matching the selector will be executed.'
        state: '[AI] `dbt run --state` is a command used in dbt (data build tool) to execute data transformations defined in dbt models against your database, with the added functionality of keeping track of the state of each model during execution. The `--state` flag enables dbt''s built-in state tracking, which records information such as last successful run time, errors, and other metadata for each model in a file named `dbt_projects/<project_name>/models-snapshot.json`. This snapshot allows you to resume or compare runs, making it useful for monitoring the progress of data pipelines and ensuring data consistency across different environments.'
        target: |-
            [AI] `dbt run --target` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command executes specific models or tasks defined in your dbt project, based on the provided target.

            The `--target` option allows you to specify one or more targets (models or tasks) that you want to execute. Each model or task is identified by its name in your dbt project files. When you run this command, only the specified models or tasks will be executed, applying any defined transformations and producing output artifacts as configured in your `profiles.yml` file. This can be useful when you need to quickly test or produce results from specific parts of your data pipeline.
        target-path: '[AI] `dbt run --target-path` is a command used in dbt (data build tool), which executes the data modeling workflow defined in dbt projects. The `--target-path` option specifies the location where the output files from running the models should be written. In other words, it instructs dbt to save the results of the data transformation tasks into the specified directory after they have been executed.'
        threads: '[AI] `dbt run` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. The `--threads` option specifies the number of threads to use during the execution of `dbt run`. By default, dbt uses one thread for each core available on your machine. Using `--threads <number>` allows you to increase or decrease parallelism according to your system''s capabilities. This can help speed up the data transformation process if you have multiple cores or processing units and the tasks are independent of each other.'
        vars: '[AI] `dbt run` is a command used in dbt (data build tool) for executing data models and tests defined in dbt projects. The `--vars` option allows passing key-value pairs as variables to be used in SQL queries or tests within the dbt project files. These variables can also be referenced using the `{{ ref(''VARIABLE_NAME'') }}` syntax, enabling dynamic configuration of data transformations and testing scenarios.'
