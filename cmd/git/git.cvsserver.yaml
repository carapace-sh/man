# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cvsserver
description: A CVS server emulator for Git
group: interaction
flags:
    --base-path=: Prepend path to requested CVSROOT
    --export-all: 'Don’t check for gitcvs.enabled in config '
    --strict-paths: Don’t allow recursing into subdirectories
    -V, --version: Print version information and exit
    -h, --help: Print usage information and exit
documentation:
    command: '[AI] `git-cvsserver` is not a Git command but rather a Git server protocol that allows bi-directional conversion and synchronization between Git repositories and Concurrent Versions System (CVS) repositories. It runs as a standalone daemon or can be integrated with other Git services like GitLab or GitHub Enterprise to enable CVS-Git integration. When using `git-cvsserver`, CVS clients can interact with the Git repository as if it were a CVS server, enabling seamless migration and collaboration between teams using different version control systems.'
    flag:
        base-path: '[AI] The `git cvsimporter` is a Git tool used to import data from Concurrent Versions System (CVS) repositories into Git repositories. The `--base-path` option specifies the path within the CVS repository that should be considered as the base directory for the imported Git repository. In other words, this flag instructs Git to start the import process at the specified directory in the CVS repository and import only the files and directories under that path.'
        export-all: '[AI] The `git cvsexportcommit` or `git cvsserver --export-all` command is used to export Git repository changes into a format that can be imported into Concurrent Versions System (CVS) repositories. This command generates a series of CVS format files including the RCS and admin files required for CVS to recognize and manage the imported data as a versioned project. The `--export-all` option exports all branches and commits within the Git repository into the specified CVS directory during the export process.'
        help: |-
            [AI] The `git cvsservier --help` command is not a valid Git command. There seems to be a mistake in your input as "git" and "cvsserver" are different tools. "git" is a popular version control system, while "cvsserver" is an older version control system based on Concurrent Versions System (CVS).

            If you meant to ask for help about Git's CVS-related functionality, try `git help cvsexportcommit` or `git help git-cvsimport`. These commands will give you information on how to import/export repositories between Git and CVS systems. If you are referring to a CVS server that uses Git as the backend, it is essential to understand that there isn't a standard tool called 'git cvsserver' for this purpose. Instead, use tools like Apache Subversion (Apache SVN) or Collab-CVS with appropriate configurations to enable Git repositories and CVS access.
        strict-paths: '[AI] The `git cvsimport` command with the `--strict-paths` option is used when importing files from a CVS repository into Git. This flag ensures that Git will import the files using the exact path specified in CVS, preserving the original file hierarchy. In other words, it prevents Git from moving or renaming imported directories during the import process.'
        version: |-
            [AI] The command `git cvsexportcommit --version` is not a valid Git command, but I assume you meant to use `git cvsimport` or `git cvsexportcommit` with the `--version` option instead.

            The `git cvsexportcommit --version` command is used to check the version of the CVS server that Git's built-in CVS helper utilities can connect to. This command does not interact with any repository or working directory, but only reports the version of the CVS server compatibility that the Git CVS helper utilities support.

            When executed, this command will output a string in the format "CVS Server: <version>" where "<version>" is the supported version number of the CVS server. The version number follows the semantic versioning format, for example, "CVS Server: 1.13.2". This information can be useful when configuring Git to work with a specific version control system (VCS) server like CVS.
