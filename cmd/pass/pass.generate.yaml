# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: generate
description: generate a new password
flags:
    -c, --clip: additionally put on clipboard
    -f, --force: prompt before overwriting
    -i, --in-place: only replace first line of existing
    -n, --no-symbols: without symbols
documentation:
    command: '[AI] The `pass generate` command in Pass, a password manager by Agile Bit, is used to generate new strong and unique passwords. When you save a new login in Pass or modify an existing one, you can use this command to automatically create a new password for that login using the built-in password generator. This ensures that your saved passwords are secure and not reused across different sites. The generated password is encrypted and synced across all your devices using Pass''s encryption and syncing features.'
    flag:
        clip: '[AI] The `--clip` option in the `pass generate` command is used to limit the generated output to a specific clip range within a ProRes or QuickTime file. This allows for generating only a particular segment of the video instead of the entire file. It can be helpful when working with large files or specific sections for further processing or editing.'
        force: '[AI] The `--force` flag in the context of a Pass command is used to bypass safety checks and confirmations before executing an action. It overrides the need for user input or system warnings, allowing the command to proceed with potentially risky operations without further confirmation. Use this option with caution as it can lead to data loss or other unintended consequences if not used correctly.'
        in-place: '[AI] The `--in-place` flag for the `pass generate` command in the Pass static analyzer tool indicates that the analysis results and any generated source code modifications should be applied directly to the input files instead of creating new files. This can be useful when working with a large number of files or when the output files need to be kept in the same locations as their corresponding input files.'
        no-symbols: '[AI] The `--no-symbols` option in the `gflags` or `gcc` command, when used with the `generate` subcommand, instructs the compiler to produce object files without debug information symbols. This means that the generated object files will not contain any debugging symbols, making the resulting binary smaller and faster. However, lacking these symbols can make it harder or impossible to use a debugger for debugging the compiled code.'
