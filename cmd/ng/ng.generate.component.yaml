# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: component
description: Creates a new, generic component definition in the given or default project.
flags:
    --export: The declaring NgModule exports this component.
    --flat: Create the new files at the top level of the current project.
    --project=: The name of the project.
    --selector=: The HTML selector to use for this component.
    --skip-import: Do not import this component into the owning NgModule.
    --skip-selector: Specifies if the component should have a selector or not.
    --skip-tests: Do not create "spec.ts" test files for the new component.
    --style=: The file extension or preprocessor to use for style files
    --type=: Adds a developer-defined type to the filename, in the format "name.type.ts".
    -b, --display-block: 'Specifies if the style will contain :host { display: block; }.'
    -c, --change-detection=: The change detection strategy to use in the new component.
    -m, --module=: The declaring NgModule.
    -p, --prefix=: The prefix to apply to the generated component selector.
    -s, --inline-style: Include styles inline in the component.ts file.
    -t, --inline-template: Include template inline in the component.ts file.
    -v, --view-encapsulation=: The view encapsulation strategy to use in the new component.
documentation:
    command: '[AI] The `ng generate component` command is used in Angular to create a new Angular Component with its corresponding files, including the TypeScript file, HTML template, and CSS stylesheet. This command utilizes Angular CLI (Command Line Interface) to automate the process of creating a new component following the Angular project structure.'
    flag:
        change-detection: |-
            [AI] `ng generate component` is a command used in Angular to create a new component. The `--change-detection` flag modifies how Angular detects and responds to changes in a component's input properties or data-bound templates.

            By default, Angular uses ChangeDetectionStrategy.Default, which checks each component's inputs and template for changes after every component's view is rendered. This strategy can lead to unnecessary re-renders if the component's dependencies don't change.

            Using `--change-detection=OnPush` instead sets the change detection strategy to OnPush. Angular only checks a component when one of its parent components or inputs changes, making it more efficient for components that depend on stable data and don't change frequently. If a component's @Input properties are marked as ChangeDetectionStrategy.OnPush as well, Angular won't even check the child component unless a change is detected in their input or a parent component is changed.

            Keep in mind that using OnPush change detection requires careful planning and understanding of your component hierarchy to avoid potential issues caused by delayed reactions to changes.
        display-block: |-
            [AI] The `ng generate component` command is used to create a new Angular component in a project using the Angular CLI. The `--display-block` option is not an official Angular CLI command. It seems there might be some confusion with this syntax as it does not directly relate to Angular's component generation process. To clarify, when generating a component using the Angular CLI, you can simply run:

            ```bash
            ng generate component <component-name>
            ```

            This command creates the necessary files for the new component in your project. If you meant to ask about other available options or functionalities while generating components, you can refer to the official Angular CLI documentation for more information: https://angular.io/cli/generate#components.
        export: '[AI] `ng generate component --export` is a command used in Angular to create a new Angular component with the `--export` option. This option generates not only the component file but also the related files (HTML template, CSS styles, and TypeScript metadata) with `export` keywords, making them accessible for import in other modules or components outside their own feature module.'
        flat: '[AI] `ng generate component --flat` is a command used in Angular to create a new component without generating a corresponding spec file, template file, or CSS file. The `--flat` option means that only the necessary files for the component''s functionality will be generated, keeping the number of created files minimal. This can be useful when creating reusable components or when working in a specific development workflow.'
        inline-style: '[AI] `ng generate component --inline-style` is a command used in Angular to create a new Angular component with inline styles instead of creating a separate CSS file for the component. Inline styles allow you to define styles directly within the component''s HTML or component.ts file, using the `style` property or the `::ngStyle` directive respectively. This command can be useful when building small components or prototypes where separate CSS files are not required. However, it is generally recommended to use external CSS files for larger projects to keep styles organized and maintainable.'
        inline-template: '[AI] `ng generate component --inline-template` is a command used with Angular CLI to create a new Angular component with an inline template string instead of creating a separate `.html` file for the template. This option can be useful when creating simple components or when working in a development environment where keeping files minimal is desired. By using this flag, the generated component''s template code will be directly written within its TypeScript file, reducing the number of files created and improving build times.'
        module: '[AI] `ng generate component --module` is a command used in Angular to create a new Angular Component with an existing or new Angular Module as its parent. This command generates various files for the new component under the specified `app.module.ts` or other selected module, and also imports the newly created component into the module''s declarations array. It helps maintain a clean, organized project structure by keeping related components and modules together, allowing for better modularization of an Angular application.'
        prefix: '[AI] `ng generate component --prefix` is a command used in Angular to create a new component with a custom prefix added to its name. The `--prefix` option specifies the string to be prepended to the component''s name during generation. This can be helpful for creating related components or modules with consistent naming conventions, reducing potential naming collisions and improving organization in larger Angular projects.'
        project: '[AI] `ng generate component` is a command used in Angular, a popular JavaScript framework for building web applications. This command is part of the Angular CLI (Command Line Interface) and is used to create a new Angular component. The `--project` flag specifies which Angular project directory to generate the new component in. Without this flag, the default project would be used.'
        selector: '[AI] The `ng generate component --selector` command is used in Angular to create a new Angular component with a custom selector name instead of the default one based on its file name. The custom selector can be specified using the `--selector` option followed by the desired name. For example, `ng generate component myComponent --selector=my-comp`. This will create a new component named "myComponent" with the custom selector "my-comp".'
        skip-import: '[AI] `ng generate component` is a command used in Angular to create a new Angular component using the Angular CLI (Command Line Interface). The `--skip-import` option that can be passed with this command tells the CLI not to automatically import the newly created component into the corresponding Angular module file. This means you will need to manually import the component in the appropriate place after generation if you choose to use this flag.'
        skip-selector: '[AI] `ng generate component --skip-selector` is a command used in Angular to create a new component without defining a selector for it in the Angular CLI configuration file (component.css or component.scss). This means that the new component can be later registered and used in templates with other methods, such as by using its full import path or through property bindings. The `--skip-selector` option is useful when you don''t need to define a custom selector for your component at the time of creation.'
        skip-tests: '[AI] `ng generate component --skip-tests` is a command used in Angular to create a new component without executing tests during the generation process. This option can be useful when you want to quickly generate a new component without waiting for test code and results, potentially saving time during development.'
        style: |-
            [AI] The `ng generate component --style` command is used in Angular to create a new Angular component with a specific stylesheet file or preconfigured style platform. The `--style` flag accepts values such as `scss`, `less`, or `none` (no styles).

            For instance, `ng generate component myComponent --style=scss` creates a new component named "myComponent" and sets its associated stylesheet file to be a .scss file. The Angular CLI takes care of creating the component files, including the corresponding HTML, TypeScript, and the specified stylesheet file if chosen. This command streamlines the development process by automating the creation of a new Angular component with the desired styling configuration.
        type: '[AI] `ng generate component --type` is a command used in Angular to create a new component using the Angular CLI. The `--type` option specifies the type of component to be generated. By default, Angular generates a class component. However, you can use `--type=functional` to generate a functional component instead. Functional components are stateless and do not have a class definition or a template file. They rely solely on pure functions and input properties for their functionality.'
        view-encapsulation: |-
            [AI] The `ng generate component --view-encapsulation` command in Angular is used to generate a new Angular component with a specific encapsulation strategy for the component's styles and shadow DOM.

            By default, Angular components use "Emulated" view encapsulation, which means that each component's CSS styles are isolated from other components by being wrapped in unique class names. This can lead to larger bundle sizes due to the need for these unique class names.

            However, with the "None" or "Native" view encapsulation strategy (specified with `--view-encapsulation=none` or `--view-encapsulation=native`, respectively), the component's CSS styles are not encapsulated at all and will affect other components in the application. This can lead to potential style collisions, but it may result in smaller bundle sizes and better performance.

            So, using the `ng generate component --view-encapsulation` command allows you to choose the view encapsulation strategy for a new Angular component during creation.
