# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create
description: Create an ACL token
flags:
    --accessor=: Create the token with this Accessor ID.
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --description=: A description of the token
    --expires-ttl=: Duration of time this token should be valid for
    --format=: Output format.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --local: Create this as a datacenter local token
    --meta: Indicates that token metadata such as the content hash and raft indices should be shown for each entry
    --namespace=: Specifies the namespace to query.
    --node-identity=: Name of a node identity to use for this token.
    --policy-id=: ID of a policy to use for this token.
    --policy-name=: Name of a policy to use for this token.
    --role-id=: ID of a role to use for this token.
    --role-name=: Name of a role to use for this token.
    --secret=: Create the token with this Secret ID.
    --service-identity=: Name of a service identity to use for this token.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
documentation:
    command: '[AI] `consul acl token create` is a command used in Hashicorp''s Consul service to generate and output a new ACL (Access Control List) token. This token can be used for authentication and authorization purposes when interacting with the Consul API or CLI. The created token comes with its associated roles, scopes, and policies, which define the level of access granted. The output includes the token value, its creation time, and other relevant metadata.'
    flag:
        accessor: '[AI] The `consul acl token create` command is used to generate a new Access Control List (ACL) token in Hashicorp Consul, an open-source distributed config management and service registration platform. The `--accessor` option specifies the ACL accessor to associate with the new token. An accessor defines a set of permissions for interacting with Consul''s API or key/value store. By creating a token with a specific accessor, you can control which actions that token is allowed to perform within your Consul deployment.'
        ca-file: '[AI] The `consul acl token create --ca-file` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This command creates a new Access Control List (ACL) token with the provided Certificate Authority (CA) file. The CA file is required to sign the token, ensuring its authenticity and encrypting it for secure transmission. The newly created token can be used for granting permissions to Consul resources within an ACL policy.'
        ca-path: '[AI] The `consul acl token create` is a command used in Consul, an open-source distributed configuration and orchestration tool. This specific command is used to create a new Access Control List (ACL) token. The `--ca-path` option specifies the path to the CA certificate file that will be used to sign the new token. The new token''s private key will be generated internally by Consul, and when this flag is set, Consul uses the specified CA certificate to sign the new token before it''s issued. This allows for secure distribution of tokens in an environment where certificate authorities are trusted for signing tokens.'
        client-cert: '[AI] The `consul acl token create` command is used in Hashicorp''s Consul service to generate a new Access Control List (ACL) token with a client certificate attached. ACL tokens are used for securing access to the Consul API. By specifying `--client-cert`, this command creates an ACL token bound to a specific client certificate file, enabling fine-grained access control based on certificates. This way, you can restrict API access only to approved clients and ensure secure communication between them and Consul.'
        client-key: '[AI] The `consul acl token create` command is used to generate a new Access Control List (ACL) token in Consul, an open-source tool for service discovery, configuration, and orchestration. The `--client-key` flag specifies the encryption key that will be associated with this new token. This key is used to encrypt and decrypt data for authentication and authorization purposes within Consul''s ACL system. By default, a new random key will be generated if not specified; however, providing a custom key can help manage and maintain consistency across different tokens.'
        datacenter: '[AI] The `consul acl token create --datacenter` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration, to create an Access Control List (ACL) token with datacenter specific permissions. This command creates a new token with the specified name, and assigns it the ability to manage resources within the specified datacenter. The token can be used to grant access to Consul API functionalities to other applications or users, while limiting their actions to the specific datacenter.'
        description: '[AI] The `consul acl token create` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific sub-command creates a new Access Control List (ACL) token within Consul. The `--description` option allows you to specify a descriptive name or label for the new token, making it easier to identify among other tokens in the system.'
        expires-ttl: '[AI] The `consul acl token create --expires-ttl` command is used in Consul, an open-source tool for service discovery and configuration management. This command creates a new Access Control List (ACL) token with an expiration time (TTL) that is specified. Once created, this token can be used to grant permissions to other Consul entities or services. The `--expires-ttl` flag sets the token''s expiration time in seconds, after which it will no longer be valid for use.'
        format: |-
            [AI] The `consul acl token create --format` command is used in Hashicorp Consul to generate a new Access Control List (ACL) token with the given name and permissions, and outputs the resulting token object in a specified format.

            The `--format` flag specifies the desired output format. Valid options include `json`, `hcl`, or `tab`. For instance, using `--format=json` will return the new token as a JSON object, while `--format=hcl` will output it in Hashicorp Configuration Language (HCL) format. Similarly, `--format=tab` will provide the result in tab-separated values.

            The overall command creates a new ACL token with defined permissions and returns the details of that token in the specified format for further processing or storage.
        http-addr: '[AI] The `consul acl token create --http-addr` command is used to create a new Access Control List (ACL) token in Consul, which is an open-source tool for service discovery, configuration, and orchestration. The `--http-addr` flag specifies the HTTP address where the created token will be valid, typically used to restrict access to the Consul HTTP API from specific IP addresses or hostnames. By default, Consul ACL tokens have unrestricted access, but with this flag, you can create a token that can only be used from the specified address, increasing security.'
        local: |-
            [AI] The `consul acl token create --local` command is used in the Consul access control list (ACL) system to create a new local ACL token. Consul is an open-source tool for service discovery, configuration, and orchestration. With ACLs, you can control who has access to which resources within Consul.

            This command creates a new token locally on the Consul agent, meaning that it's not stored in a remote server or external key-value store. The newly created token will have default permissions, allowing it to perform most operations within Consul, but its exact permissions can be customized later using other ACL commands.

            After creating the token, you'll receive its name and associated encryption key as output. These values are crucial for granting permissions to users or applications, as they will need to authenticate with these tokens when making API requests to Consul.
        meta: '[AI] The `consul acl token create --meta` command is used to create a new Access Control List (ACL) token in Consul, an open-source tool for service discovery, configuration, and orchestration. The `--meta` flag is optional and allows you to set custom metadata key-value pairs associated with the token. This can be useful for adding descriptive information or tags to the token for organizational purposes. The command returns a new token ID and secret, which can be used to authenticate and manage Consul resources with fine-grained access control.'
        namespace: '[AI] The `consul acl token create --namespace` command is used in the Consul access control list (ACL) system to create a new ACL token with specific permissions scoped within a given namespace. This command generates a new token with the specified name and grants it access to perform certain actions within that namespace only. The namespace argument defines the scope of the token''s permissions.'
        node-identity: '[AI] The `consul acl token create --node-identity` command is used to generate a new Access Control List (ACL) token in Consul, a popular service discovery and configuration management tool. This token comes with an associated node identity, which grants the token holder the ability to manage Consul nodes within a Consul data center. The node identity can be utilized for various tasks such as registering new nodes, managing node properties, or modifying membership in a Consul datacenter. By creating a token with the `--node-identity` flag, you''re enabling an additional level of control and functionality for that specific token.'
        policy-id: '[AI] The `consul acl token create` command in Consul is used to generate a new Access Control List (ACL) token with specified access policies. The `--policy-id` option indicates that the access policy to be associated with the new token is identified by the given ID. With this command, you can create a new ACL token and set its associated access policies in one step.'
        policy-name: '[AI] The `consul acl token create` command is used to generate a new Access Control List (ACL) token in Consul, an open-source tool for service discovery, configuration, and orchestration. The `--policy-name` option specifies the name of the ACL policy that will be associated with the newly created token. This policy determines what actions the token is allowed to perform within Consul''s key-value store and other services, such as read or write access. Therefore, this command creates a new ACL token with the specified policy, granting it the permissions defined by the policy.'
        role-id: |-
            [AI] The `consul acl token create` command is used in Consul, an open-source tool for service discovery, configuration, and orchestration. This specific command creates a new Access Control List (ACL) token with a specified role ID.

            The `--role-id` option defines the ID of the role that this token will represent. The role ID is used to define access permissions in Consul's ACL system. By assigning a specific role ID to a token, you can control which actions (like read or write) are permitted for that token within your Consul environment.
        role-name: '[AI] The `consul acl token create` command is used to generate a new ACL (Access Control List) token in Consul, an open-source distributed, highly available, and data center-aware solution to connect and secure services. The `--role-name` flag specifies the name for the new role that will be associated with the generated token. This role determines the level of access granted to the token. For instance, a "read-only" role might only allow viewing data, while an "admin" role could control all aspects of Consul.'
        secret: '[AI] The `consul acl token create --secret` command is used to generate and create a new Access Control List (ACL) token in Consul, an open-source distributed, yet simple & effective, solution to connect & secure services. This token comes with a secret key, which can be provided as an argument to the command for security reasons. The generated token has associated permissions that control access to various functionalities within Consul''s service discovery and configuration management system. These tokens enable fine-grained access control in a decentralized manner, ensuring a secure environment for managing distributed applications.'
        service-identity: |-
            [AI] The `consul acl token create --service-identity` command is used in Hashicorp Consul, an open-source distributed config and service management platform, to generate an Access Control List (ACL) token with associated service identity.

            This command creates a new ACL token along with its related Service Identity (consul's built-in identity for managing services), which can be used to grant permissions to the specific services or keys in Consul's service registry and key/value store. The resulting token is often utilized by infrastructure automation tools, such as Terraform or Ansible, to manage and interact with Consul programmatically while maintaining a secure access control environment.
        stale: '[AI] The `consul acl token create --stale` command is used to create a new Access Control List (ACL) token in Consul, but with a special flag `--stale`. This flag allows creating a token even if the Consul server''s data is not up-to-date with the leader. The new token will be added to the stale state of the token catalog and won''t be replicated to other nodes immediately. It may increase the risk of conflicts or inconsistencies, but can be useful in certain situations where creating a new token is needed urgently.'
        tls-server-name: '[AI] The `consul acl token create --tls-server-name` command is used in Consul, a connectivity and configuration management tool, to create an Access Control List (ACL) token with TLS server name verification enabled when communicating with the Consul HTTP API over Transport Layer Security (TLS). This option enhances security by ensuring that only trusted servers with verified identities can access the Consul API. The flag takes a value specifying the expected TLS server name to validate against during the communication.'
        token: '[AI] The `consul acl token create` command is used to generate and create a new Access Control List (ACL) token in Consul, an open-source distributed, yet simple & effective, configuration management, and orchestration tool. This command generates a new token with the specified access policy and outputs its encryption key and decrypted value. The generated token allows fine-grained control of who can perform specific actions within your Consul environment.'
        token-file: '[AI] The `consul acl token create` command is used to create a new Access Control List (ACL) token in Consul, an open-source tool for service discovery, configuration, and orchestration. The `--token-file` flag specifies the file where the newly created token will be saved as a text string. This flag simplifies the process of saving and managing the token by automatically writing it to the specified file upon creation.'
