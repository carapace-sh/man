# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: push [options] PATH
description: Update remote state from a local state file
flags:
    -force: Write the state even if lineages don't match or the remote serial is higher
    -lock: Don't hold a state lock during the operation
    -lock-timeout?: Duration to retry a state lock
documentation:
    command: |-
        [AI] The `tofu state push` command is not a standard Git or version control command. It seems to be specific to Tofu, a data versioning tool that allows users to manage and track changes to structured data files, such as CSV or JSON.

        When you run the `tofu state push` command in Tofu, it commits the current version of your data file(s) and pushes the changes to the remote repository. This command ensures that all collaborators working on the same data have access to the latest version, promoting a consistent and synchronized workflow.
    flag:
        force: |-
            [AI] The `tofu state push --force` command is used in Git to override local changes and forcefully update the working directory with the latest changes from the remote repository. The term "tofu" comes from the Japanese word for soybean curd, which is a neutral or undifferentiated state. In Git terminology, a tofu commit is one that has no differences with its parent commit.

            When you run `git push --force`, Git will attempt to fast-forward your local branch to match the remote branch. If there are conflicts between your local and remote changes, it will fail and give an error message. However, by adding the `--force` flag followed by `tofu state push`, you can bypass this check and forcefully update your local repository with the remote changes even if they result in a tofu commit (i.e., having no differences with the current branch). This command should be used with caution as it can potentially overwrite local changes that have not been committed yet.
        lock: |-
            [AI] The `tofu state` is a term used in concurrent programming to describe a shared memory variable that has not yet been initialized with a definite value or locked by a process for exclusive access.

            The `push -lock` directive in this context refers to a synchronization mechanism used to ensure mutual exclusion when modifying the `tofu state` variable. It's based on a locking algorithm where processes take turns in acquiring and releasing the lock, allowing only one process at a time to access and modify the shared memory.

            The flag "tofu state push -lock" indicates that we are dealing with a concurrent programming scenario where the state of a shared variable is `tofu` (undetermined), and the processes will be using the `push -lock` mechanism for mutual exclusion while modifying this shared state.
        lock-timeout: |-
            [AI] The `tofu state` flag in a distributed database or cache system refers to a state where a key or value has not yet been assigned to any node. In other words, it is an undefined or unassigned state.

            The `push` command is used to forcefully update the data on a specific node or replica.

            The `-lock-timeout` flag sets a timeout for acquiring a write lock before performing a push operation. If the lock cannot be acquired within the specified time, the operation will fail. This flag helps prevent long-running and potentially conflicting writes by ensuring that each write is isolated and does not interfere with others.
