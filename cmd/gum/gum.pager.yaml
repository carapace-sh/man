# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pager
description: Scroll through a file
flags:
    --align=: Text Alignment
    --background=: Background Color
    --bold: Bold text
    --border-background=: Border Background Color
    --border-foreground=: Border Foreground Color
    --border=: Border Style
    --faint: Faint text
    --foreground=: Foreground Color
    --height=: Text height
    --help.align=: Text Alignment
    --help.background=: Background Color
    --help.bold: Bold text
    --help.border-background=: Border Background Color
    --help.border-foreground=: Border Foreground Color
    --help.border=: Border Style
    --help.faint: Faint text
    --help.foreground=: Foreground Color
    --help.height=: Text height
    --help.italic: Italicize text
    --help.margin=: Text margin
    --help.padding=: Text padding
    --help.strikethrough: Strikethrough text
    --help.underline: Underline text
    --help.width=: Text width
    --italic: Italicize text
    --line-number.align=: Text Alignment
    --line-number.background=: Background Color
    --line-number.bold: Bold text
    --line-number.border-background=: Border Background Color
    --line-number.border-foreground=: Border Foreground Color
    --line-number.border=: Border Style
    --line-number.faint: Faint text
    --line-number.foreground=: Foreground Color
    --line-number.height=: Text height
    --line-number.italic: Italicize text
    --line-number.margin=: Text margin
    --line-number.padding=: Text padding
    --line-number.strikethrough: Strikethrough text
    --line-number.underline: Underline text
    --line-number.width=: Text width
    --margin=: Text margin
    --match-highlight.align=: Text Alignment
    --match-highlight.background=: Background Color
    --match-highlight.bold: Bold text
    --match-highlight.border-background=: Border Background Color
    --match-highlight.border-foreground=: Border Foreground Color
    --match-highlight.border=: Border Style
    --match-highlight.faint: Faint text
    --match-highlight.foreground=: Foreground Color
    --match-highlight.height=: Text height
    --match-highlight.italic: Italicize text
    --match-highlight.margin=: Text margin
    --match-highlight.padding=: Text padding
    --match-highlight.strikethrough: Strikethrough text
    --match-highlight.underline: Underline text
    --match-highlight.width=: Text width
    --match.align=: Text Alignment
    --match.background=: Background Color
    --match.bold: Bold text
    --match.border-background=: Border Background Color
    --match.border-foreground=: Border Foreground Color
    --match.border=: Border Style
    --match.faint: Faint text
    --match.foreground=: Foreground Color
    --match.height=: Text height
    --match.italic: Italicize text
    --match.margin=: Text margin
    --match.padding=: Text padding
    --match.strikethrough: Strikethrough text
    --match.underline: Underline text
    --match.width=: Text width
    --padding=: Text padding
    --show-line-numbers: Show line numbers
    --soft-wrap: Soft wrap lines
    --strikethrough: Strikethrough text
    --timeout=: Timeout until command exits
    --underline: Underline text
    --width=: Text width
documentation:
    command: '[AI] "gum pager" is not a standard Linux or Unix command. It seems to be specific to a paging tool called GUM (Graphical User Interface for Less) which is used to view and navigate large text files in a more user-friendly way than using the default pagers like ''more'' or ''less''. The "gum pager" command would likely be used within a shell script or terminal session to open a file with GUM as the pager.'
    flag:
        align: |-
            [AI] `gum` is a popular terminal reporting and progress bar tool for Node.js. The `--align` option that appears before a `gum pager` command is used to align the output of the pager in the terminal.

            With this option, the output will be positioned at the left edge or column specified by the user, ensuring consistent and neat alignment within the terminal window. This can improve the readability and organization of the displayed data. The default alignment is usually the left edge (0), but you can adjust it as needed.
        background: '[AI] `gum` is a CLI (Command-Line Interface) tool for displaying progress bars and other terminal art in Node.js. The command `gum pager --background` creates a pager that can be used to scroll through large text outputs, such as log files or terminal output. The `--background` option specifies that the pager should run in the background, allowing other terminal processes to continue running concurrently without waiting for the pager to finish. When used with `gum`, this command enables smooth and efficient handling of large data sets by providing a scrollable interface while minimizing resource usage.'
        bold: '[AI] `gum` is a popular CLI (Command Line Interface) progress bar and output formatter for Node.js. The `--bold` option is used to enable ANSI sequence codes in the output for bold text formatting in terminals that support it. The `gum pager` command is typically used in conjunction with other commands or libraries like `gulp`, `grunt`, or `mocha` for displaying progress bars, handling stream data, and formatting output in a more visually appealing way during the execution of those tasks.'
        border: '[AI] The `gum` is a popular PowerShell module for creating interactive console interfaces. The command `gum pager --border` is used to apply a border to the output displayed by a `gum pager` object. This border helps distinguish the paged output from the rest of the console and improves readability. It does not affect the functionality or ordering of the data being displayed, only its visual presentation.'
        border-background: '[AI] The `--border-background` option in the `gum pager` command is used to set the background color of the border around the output of the `gum` command in a terminal or console application. By default, this border does not have a background color. However, setting `--border-background` specifies a color, and the border around the output will be drawn with that color as its background. This can help make the output stand out more clearly from the surrounding terminal text.'
        border-foreground: '[AI] The `gum` CLI tool''s `pager` command is used to display output in a paginated format, allowing users to scroll through large text files or logs one page at a time. The option `--border-foreground` sets the foreground color of the border that separates each page to be the same as the text color. This can make it more difficult to distinguish between the content and the borders but may be preferred by users with certain color schemes or accessibility requirements.'
        faint: '[AI] `gum` is a progressive CLI (Command-Line Interface) pager for Node.js. The option `--faint` is used to display output with minimal formatting, which means it hides colors and other advanced formatting options in the terminal output for better compatibility with older terminals or scripts that require plain text. In summary, using `gum pager --faint` will show the output without any color or advanced formatting.'
        foreground: '[AI] `gum pomp --foreground` is a command used with the Gum package in PowerShell or PowerCLI. It runs a Pomp (Progress Output Maker for PowerShell) job in the foreground, displaying its output directly in the console instead of as a background task. This allows users to see real-time progress and results without having to constantly check the status of the job.'
        height: '[AI] The `gum` is a popular CLI (Command-Line Interface) packeage for Node.js used to create interactive text-based user interfaces. The `--height` option that appears with the `gum pager` command sets the maximum height of the terminal window displaying the pager. It helps prevent scrolling during the execution of a series of commands or scripts, improving the user experience by keeping the output within the visible area of the terminal.'
        help.align: '[AI] The `--help.align` option in the `gum pomeranzle` CLI tool is used to display or modify the alignment of help text output. When running a command with `gum` followed by `--help`, the `--help.align` option can be specified to choose between left-aligned or right-aligned text. For example, `gum install --help --help.align=left` will display left-aligned help text, while `gum install --help --help.align=right` will display right-aligned help text. This option is useful for customizing the output appearance to better fit in terminal windows or scripts.'
        help.background: '[AI] The `--help.background` option is used with the `gum` pager, a popular terminal interface for interacting with asynchronous tasks in Node.js applications using the `concurrently` and `cli-progress` packages. This specific option displays detailed help information about how to use the background mode feature of `gum`. In this mode, tasks are run concurrently but their outputs are displayed sequentially in the terminal, improving the readability of the output.'
        help.bold: '[AI] The `--help.bold` flag is not a valid option for the `gum` CLI (Command Line Interface) pager tool itself, but rather a formatting directive to be used in conjunction with the help output generated by `gum --help`. This directive instructs the terminal to display any help text that follows it in bold font. The primary purpose of this flag is to make the important or distinguished parts of the help text stand out clearly for easy identification and reading.'
        help.border: '[AI] The `--help.border` option in the `gum` pager command (a popular terminal pager for Node.js) is used to display border decorations around the output text. It enhances the visual presentation of the pager output by adding borders around each block of text, making it easier to distinguish between different sections. When you run `gum --help.border`, the pager will show help information with borders around the various sections such as headings, descriptions, and examples.'
        help.border-background: '[AI] The `--help.border-background` option in `gum pomp`, a popular Node.js package for creating interactive CLI applications using Gum, is used to customize the appearance of help text by setting the background color or style for borders surrounding the help text. When you run `gum pager --help --help.border-background <color>` in your terminal, it will display the help information surrounded by a border with the specified color background. This option enhances the visual appeal and readability of the help output.'
        help.border-foreground: '[AI] The `--help.border-foreground` option in the `gum pager` command is used to set the color of the border around the output when using a pager like `less` or `more`. This flag takes a color value as its argument, and changes the foreground color of the border accordingly. For example, "--help.border-foreground=red" would set the border color to red. The goal is to make the output in the terminal stand out more clearly from the rest of the terminal window.'
        help.faint: '[AI] The `--help.faint` flag is an option for the `grep` command in Unix-like operating systems, which is used for searching text files. This particular flag modifies the output of the `--help` command, making it less intense or faintly displayed on the terminal. Its purpose is to make the help message easier to read when the terminal background is set to a light color, by reducing the contrast between the help message and the terminal background.'
        help.foreground: '[AI] The `--help.foreground` option in the `gum` pager command is used to display help information for the current foreground command being run in the terminal. When you type `gum pager --help.foreground` in your terminal, it will show detailed information about the specific command being executed within `gum pager`, rather than providing an overview of all available commands or options within `gum`. This can be helpful for understanding how to use a particular command correctly and effectively.'
        help.height: '[AI] The `--help.height` option in `gumpty gum pager` is used to set the height of the pager''s output display. It takes an integer argument specifying the number of lines to be displayed at a time when scrolling through large terminal outputs. By default, the pager uses an automatic height that adjusts based on the terminal size, but this option can be used to override it with a specific value.'
        help.italic: '[AI] The command `gum pager --help` displays the help information for the Gum package''s pager feature. The `--help` option is used to request detailed help about a specific command or option. The italicized part of the command has no effect on its functionality and is likely just used for emphasis when writing or displaying the command in text.'
        help.margin: '[AI] The `--help.margin` option in the `gum` CLI (Command Line Interface) tool is used to customize the margin width of help text displayed when invoking the `help` command. It takes an integer value that specifies the number of columns to leave as blank space before and after the help text for better readability on the terminal screen. For example, `gum help <command> --help.margin 20` sets a margin of 20 columns.'
        help.padding: '[AI] The `--help.padding` option in the `gum` CLI tool is used to control the amount of padding around help text displayed when using the `gum help` command. It takes an integer value, specifying the number of columns for padding. For example, `--help.padding 4` would add padding with a width of 4 columns around the help text. The default value is usually set to zero, meaning no padding is added.'
        help.strikethrough: |-
            [AI] The `--help.strikethrough` option is not a valid flag for the `gum` CLI (Command Line Interface) tool, which is typically used for creating interactive prompts and applications in Node.js. This option seems to be incorrectly mentioned, possibly due to a typo or misunderstanding.

            The correct usage of the `--help` flag with `gum` is as follows:

            ```sh
            gum --help
            ```

            This command will display detailed information about all available commands and their options for the `gum` CLI tool.
        help.underline: '[AI] The `--help.underline` option in GUM (Generic User Message) is used to underline the help topic titles when displaying the help text. It''s an optional argument, often used together with other help flags like `--global`, `--local`, or specific command help, e.g., `gum pager --help --help.underline`. It enhances the readability and consistency of the displayed help information.'
        help.width: '[AI] The `--help.width` option in the `gum` CLI (Command Line Interface) tool relates to the width of the help message displayed when using the `help` command. Specifically, it sets the maximum column width for formatting long lines within the help output. A larger value results in more readable text, while a smaller value may truncate longer lines. For instance, you could set `--help.width 120` to limit the help message to 120 columns.'
        italic: '[AI] The `gum pom` (short for "Gum Pastel output manager") command `gum pager --italic` is used to display text output in an interactive terminal session with italic formatting enabled. The Gum library, which includes `gum pager`, provides a rich set of features for managing and formatting text-based user interfaces. By specifying the `--italic` option, you can apply the italic styling to the displayed text.'
        line-number.align: '[AI] The `--line-number.align` flag in `gum`, a popular Node.js library for creating beautiful terminal output, aligns line numbers with their corresponding text in the output. This means that columns with line numbers will have vertically aligned lines across all lines in the output, improving the visual presentation and readability of logs or error messages.'
        line-number.background: '[AI] The `--line-number.background` flag in `grep` command with `pager` option (`grep ''pattern'' file.txt | tee columned\_output.txt | less --LINE-NUMBERS --QUIT --bg=black --fs=bold`) is used to display line numbers on a colored background while viewing the search results in a pager like `less`. This makes it easier to navigate and locate specific lines within the output.'
        line-number.bold: '[AI] The command `gum pager --line-number.bold` is used in terminal applications with the Gum package installed, to display output in a pager format with line numbers highlighted in bold. This can be helpful when navigating through large or complex logs or configuration files. When you pipe output into `gum pager`, followed by this option, each line of text will have its corresponding line number displayed in bold at the beginning of the line.'
        line-number.border: '[AI] The `gum` pager is a tool used in Unix-like operating systems for paginating and filtering output. The `--line-number.border` option is one of its features that adds a border around the line numbers displayed in the leftmost column, making it easier to locate specific lines in the output.'
        line-number.border-background: '[AI] The `--flag "gum pager --line-number.border-background"` is a command line argument for the Gum package in PowerShell or Posix shells. This flag enables the line number and border background when using Gum as a pager (a tool that formats text for display in a terminal). It improves readability by highlighting the line numbers and providing a clear distinction between lines.'
        line-number.border-foreground: |-
            [AI] The `--flag "gum pager --line-number.border-foreground"` is a command-line argument for tools like Helm or Thelm in Kubernetes that customize the appearance of their output when using the Gumpty pager, which is used for displaying terminal-based multi-page text.

            This flag sets the color of the border surrounding line numbers displayed in the pager to the foreground color. In other words, it ensures that line numbers are easily readable by making their borders the same color as the text background.
        line-number.faint: |-
            [AI] `gum` is a popular terminal paging tool for Node.js, and the command `--line-number.faint` is an option used with it.

            This option displays line numbers in a faint (dimmed) color during the output of paged text. The purpose is to provide line numbering without making it too distracting or dominating within the terminal window. This can be helpful for debugging or navigating through large files and logs.
        line-number.foreground: '[AI] The `--line-number.foreground` option for the `gum pager` is used to configure the appearance of line numbers in the output of a command piped through `gum`. With this option, the line numbers are displayed in the foreground color, making them more visible against the background. This is particularly useful when working with large files or complex command outputs where locating specific lines can be challenging.'
        line-number.height: '[AI] The `--line-number.height` flag for `gum poker`, a popular CLI tool for interactive testing and debugging in Node.js, sets the height of the line number display. This can be useful when working with large files or when trying to optimize the output for better readability. For example, setting a larger height would make it easier to identify the line numbers of specific errors or issues within the codebase.'
        line-number.italic: '[AI] The `gum` flag `--line-number.italic` is used in the `zsh` terminal configuration manager to display line numbers in italic font during the output of the `gum pdfer` or other similar commands. This can make it easier for users to quickly identify the lines of code being referred to when reading error messages or logs.'
        line-number.margin: '[AI] The `--line-number.margin` flag in `gum`, a popular testing and debugging tool for Node.js, adjusts the width of the margin for displaying line numbers in output. A larger value will increase the space between the line number and the corresponding code, making it easier to read long lines or identify the origin of error messages.'
        line-number.padding: '[AI] The `--line-number.padding` option in the `gum` pager for zsh or bash is used to customize the number of spaces before and after line numbers that are displayed when outputting the result of a command in a format that supports pagination, such as `less`, `more`, or `grep`. By default, this padding is usually set to one character on each side. However, you can use the `--line-number.padding` option followed by a number to specify the desired width for both sides of the line number. For example, `gum --line-number.padding=4` would add four spaces before and after the line numbers in the output.'
        line-number.strikethrough: '[AI] The `gum` pager is a tool used to format and display text output in a more user-friendly way, especially in terminal interfaces. The command `gum pager --line-number.strikethrough` requests the pager to display line numbers before each line of text, with strikethrough syntax indicating struck-out or deleted lines within the text. This can be helpful for comparing and reviewing differences between files or identifying specific issues in logs.'
        line-number.underline: '[AI] The command `grep --line-number.under` is used with the `grep` utility in Unix-based systems for searching text files. The option `--line-number` displays the line numbers of matching lines, and the option `.underline` or `-U` enables underlining the line numbers for better visual distinction. Therefore, this command will search a file for a specified pattern and display the matching lines with their line numbers underlined.'
        line-number.width: '[AI] `gum` is a popular terminal interface for Node.js logs and events. The command `gum pager` is used to pipe output from another Node.js script or command into `gum`. The flag `--line-number.width` sets the width of the line number display in the leftmost column. A larger number will make the line numbers more detailed but take up more space in the terminal.'
        margin: '[AI] `gum pomp` is a popular Node.js package for creating colorful and interactive output in the terminal. The `--margin` option, when used with this library, sets the number of spaces between the margin of the terminal and the output. For instance, if you use `gum print.info --margin 4`, it will add a space indentation of 4 units on each side of the output. This can be helpful in making the text stand out more clearly or align with other text in your terminal.'
        match-highlight.align: '[AI] `gum` is a popular terminal reporting tool for Node.js projects like `jest`. The option `--match-highlight.align` is used to align highlighted matches in the test output. This means that when a test fails and there are multiple matches, they will be displayed side by side instead of stacked on top of each other, improving readability.'
        match-highlight.background: '[AI] The `--match-highlight.background` option in the `grep` command (aliased as `gum pager`) is used to customize the background color of the matching text when it is displayed in the terminal output. This can be helpful for improving the readability and visual separation of matched text from non-matched text within a large text file or log output.'
        match-highlight.bold: '[AI] The `gum` is a popular CLI (Command Line Interface) progress bar and verbose output generator for Node.js. The `--match-highlight.bold` flag is an option used with `gum` to enable bold text formatting when highlighting matching terms during output. This can make it easier for users to quickly identify relevant information in the command line output.'
        match-highlight.border: '[AI] The `grep` command''s `--match-highlight` option with the flag `--match-highlight.border` is used for highlighting matched patterns in the output. The border flag (`.border`) causes grep to display a border around the matched text, making it visually distinct from the surrounding content. This can be helpful when searching through large amounts of data or looking for specific patterns within complex files.'
        match-highlight.border-background: '[AI] The `--match-highlight.border-background` option in the `grep` command with `ag`, or The Silver Searcher, is used to customize the appearance of matching text in the output by changing the background color of the border around the matched highlight. By default, there is no border, and the flag sets the border background color.'
        match-highlight.border-foreground: '[AI] The `gum pager --match-highlight.border-foreground` flag is used with the GUM (Git Unified Message) pager in Git for highlighting the border of matching search terms in the output. The `--match-highlight` option enables text matching and highlighting, while `.border-foreground` sets the color of the border to be displayed in the foreground.'
        match-highlight.faint: '[AI] `gum` is a popular terminal reporting tool for PowerShell and Bash scripts. The `--match-highlight.faint` flag is an option used with `gum` to modify the highlighting of matching text in output. Specifically, it makes the highlighting less intense or "faint." This can be useful when dealing with large amounts of text or multiple matches where you want to distinguish between different levels of importance or types of matches.'
        match-highlight.foreground: '[AI] The `--match-highlight.foreground` flag in the `grep` command (alias `gum pager`) is used to specify the foreground color for highlighted matching patterns in the output. This option helps make the matched text stand out visually from the rest of the output, making it easier to identify and locate relevant information within large text files or logs.'
        match-highlight.height: '[AI] The `--match-highlight.height` flag in `grep` or `ag` (Silver Searcher) commands is used to specify the height of the text highlighted during a search match. It allows setting the number of lines before and after the matching pattern that should be highlighted, making it easier to visually identify the context around the match in the output.'
        match-highlight.italic: '[AI] `gum pager` is a tool used in terminal applications to paginate and filter text output. The option `--match-highlight.italic` is used for syntax highlighting, specifically to italicize matched text. When text within the output matches a given search pattern, it will be highlighted in italics for improved readability.'
        match-highlight.margin: '[AI] The `gum pager` is a tool used in Git for paging through output, such as commit history or diff results. The option `--match-highlight.margin` sets the number of columns before and after matching patterns (e.g., search terms) that will be highlighted. For example, if you''re searching for a specific keyword in your git log, this flag will cause the matching text to be highlighted with additional context on either side. The value following `--match-highlight.margin` specifies the number of columns to use for each side of the highlight margin.'
        match-highlight.padding: '[AI] The `--match-highlight.padding` option in the `grep` command with `ag` (Silver Searcher) flag `gum` enables adjustable padding around highlighted search results. It modifies the appearance of the search output by adding spaces between the column containing the search term and the columns on either side, making it easier to distinguish between different parts of a line. This option is particularly useful when dealing with complex file formats or long lines for better readability.'
        match-highlight.strikethrough: '[AI] The `gum pager` is a tool for displaying text output in an interactive and paginated way. The option `--match-highlight.strikethrough` enables strikethrough highlighting for matched text patterns in the output. When a search or filter matches certain text, it will be displayed with a line through it to indicate that the matching text has been removed or is no longer applicable.'
        match-highlight.underline: '[AI] The `--match-highlight.underline` option in the `grep` command with the `pager` flag (`grep --pager ...`) is used to underline the matching text when displaying search results on a terminal pager like `more` or `less`. This can help make it easier to identify the matched lines among the output.'
        match-highlight.width: '[AI] The `--match-highlight.width` flag in `grep` or `ag` (Silver Searcher) is used to set the width of the highlighted matching text in the output. A larger value will make the matched parts of the line more visible, while a smaller value will display less context around each match. This can be helpful when searching large files for specific patterns.'
        match.align: '[AI] The `gum pomeranzine` is a popular terminal pager for PowerShell, and the `--match.align` option is used to align matched patterns in the output. When you pipe an input stream to `gum`, you can use the `Select-String` cmdlet with the `--Match` parameter to find specific patterns in the data. The `--match.align` option enables vertical alignment of these matched patterns, making it easier to compare and analyze the data.'
        match.background: '[AI] The `grep` command with the option `--match-background` is used to perform regular expression matching on each line of a file, and highlights (in color) the parts of the line that match the regex pattern. The `--match` option specifies the regular expression pattern to search for.'
        match.bold: |-
            [AI] `grep` is a command-line utility for searching text files or input streams for lines containing a specified pattern. The option `--match=bold` is used with `grep` to perform a regular expression match in the filenames instead of the file contents, and to print the matching filenames in bold.

            The entire command `gum pager --match=bold` would be used within a pipeline or script to find and display the matching filenames in bold for further processing. For example:

            ```bash
            find . -type f -name "*error*" | xargs grep --quiet --match=bold "*error*" . | less --QUIT
            ```

            This command searches the current directory recursively (`.`) for files with "error" in their names and pipes the results to `grep`, which then displays the matching filenames in bold, finally passing those filenames to the `less` pager for viewing.
        match.border: '[AI] The `grep` command with the option `--match-prefix=border` is used to search for fixed strings in files. The `--match` option enables regular expression matching, while `--match-prefix="border"` specifies that the matching string "border" should be found at the beginning of each line. Therefore, this flag instructs `grep` to display only lines starting with the specified prefix string "border".'
        match.border-background: |-
            [AI] The `gum pager --match 'border-background'` command in a scripting context is used with tools like `grep` or `aws s3 ls` to filter output lines containing the specified string 'border-background'. The `--match` option of `gum pager` is for performing regular expression matching, and in this case, it's being used specifically to match lines that have 'border-background' in their content.

            For instance, if you pipe the result of a command like `aws s3 ls s3://bucket/path | grep --color=auto 'border-background'`, it will display only the lines from the output containing the string 'border-background'. When using `gum pager` instead of a plain text editor, you can further customize the viewing experience, such as pagination or highlighting.
        match.border-foreground: '[AI] The `--match.border-foreground` flag in the `gum pager` command is used to specify the color of the border foreground when displaying a list of items using the `zsh` or `bash` pager (e.g., `less`, `more`, or `paginate`). It takes a valid color name or hexadecimal code as an argument, allowing users to customize the appearance of the pager output according to their preferences.'
        match.faint: '[AI] The `grep` command with the option `--match-patern=faint` is used to search for exact patterns in files, but with the difference that only lines containing a match will be printed out, while lines without a match will be silently ignored instead of being displayed in the output. The option `--faint` is used to display unmatched lines with a null output instead of their original contents, making it easier to distinguish between matched and unmatched lines.'
        match.foreground: '[AI] The `grep` command with the option `--match-format=foreground` (abbreviated as `--match.foreground`) is used to print only the matched parts of each line, without the remaining context. The flag modifies the output format to display only the matching patterns in the foreground, without any additional formatting or context.'
        match.height: '[AI] `gum pager` is a tool used in Node.js to paginate and filter output from command line applications. The option `--match.height` sets the maximum height for the matching lines displayed in the paginated output. This means that only up to the specified number of lines will be highlighted as matches within each page of output.'
        match.italic: '[AI] The `grep` command with the option `--match-flags=italic` is used to search for regular expression patterns in files with the italic flag enabled. This flag makes `grep` highlight matched text in italics when displaying output in a terminal that supports it, improving readability. The `--match` option is used instead of the traditional `/pattern/` syntax to make `grep` treat the argument as a regular expression instead of a file name pattern.'
        match.margin: '[AI] The `grep` command with the option `--match-margin` and the flag `--match` is used for performing a fixed or regular expression search in each line of input files, but instead of showing only matching lines, it also displays the context around the match. The number before `--match-margin` indicates how many columns of context to display on either side of the match. For example, `grep --match="pattern" --match-margin=5 file.txt` will show 5 columns before and after each matching pattern in the output.'
        match.padding: |-
            [AI] `gum` is a popular CLI (Command-Line Interface) tool used for enhancing and colorizing output in Node.js projects. The option `--match.padding` is related to its testing reporter feature, `minimist`, specifically for handling test matching options.

            When using this flag, `gum` sets up a padding configuration for the test matcher. This means that when tests are run and the output is displayed, any test descriptions that do not fully fit within the terminal width will be automatically padded to make them readable on the same line. The flag ensures the padding is uniform and consistent with the rest of the test output formatting.
        match.strikethrough: '[AI] The `grep` command with the option `--match-strikethrough` is used to search for a specific pattern in one or more files, and when a match is found, it will display the line with the matching pattern preceded by two tilds (~) and followed by a hyphen (-), creating a strikethrough effect. For instance, if you run `grep --match-strikethrough ''pattern'' file.txt`, it will show lines that contain ''pattern'' but with the matched text struck through.'
        match.underline: '[AI] The `grep` command with the flag `--match-underlined` is used to search for a specific pattern in a file and highlight or underline the matched text within the matching line. The option `--match` tells `grep` to perform a regular expression match, while `--match-underlined` instructs it to print the lines with the matching pattern underlined instead of the default printing method which is usually printing the matching lines in full.'
        match.width: '[AI] The `--match.width` flag in `grep` or `ag` (Silver Searcher) is used to limit the search match to a specific width. This means that only the portion of a line matching the given regular expression that fits within the specified width will be returned as a result. This can be useful when dealing with large files or lines where you''re only interested in a specific part of the match.'
        padding: |-
            [AI] `gum` is a popular CLI (Command-Line Interface) progress bar library for Node.js applications, written in JavaScript. The `--padding` option is a parameter used with the `gum` library's `pager` function.

            The `--padding` flag sets the number of spaces before and after each progress bar, allowing users to customize the display spacing based on their terminal window layout. For example, if you want an extra space on both sides of your progress bars, use `gum.pager({ padding: 2 })`. This will create progress bars with a total of four extra spaces (two before and two after each bar).

            Here's the concise explanation: The `--padding` flag in the `gum pager` function configures the number of extra spaces displayed before and after each progress bar.
        show-line-numbers: '[AI] The `gum` pager is a tool used in Unix-like operating systems to paginate and format text output. The option `--show-line-numbers` instructs the pager to display line numbers along with the text. This can be helpful when navigating through large files or debugging code. The numbers are usually displayed in the left margin, making it easier to keep track of the specific lines being reviewed.'
        soft-wrap: '[AI] The `--soft-wrap` option in `gum`, a popular Terminal UI package for Node.js, is used to enable line wrapping when displaying long output lines that extend beyond the width of the terminal window. With this option enabled, `gum` will automatically wrap the lines at appropriate points, making the output easier to read without having to manually scroll horizontally or use horizontal scrollbars. This is particularly useful for viewing logs or other text-heavy data in the terminal.'
        strikethrough: '[AI] The `gum pager` is a tool for paginating and filtering output in Node.js, often used with other command line applications. The `--strikethrough` option is a formatting flag that changes the text color to red and underlines it with a line of equal length. It''s typically used to visually mark strikethrough text or represent negative actions or cancellations in the output.'
        timeout: '[AI] The `gum` pager is a tool used in Node.js to display output from commands in a more user-friendly way, similar to `less` or `more`. The `--timeout` option sets a timeout value for how long the pager will wait for user input before automatically advancing to the next screen of output. This can be useful to prevent the pager from waiting indefinitely if no user interaction is expected after running a command. For example, `gum --timeout 500ms file.log` would display the contents of `file.log`, wait for 0.5 seconds for user input, and then automatically advance to the next screen if none was given.'
        underline: |-
            [AI] `gum` is a popular terminal reporting tool for Node.js projects, which allows users to display progress bars and other status indicators in the console. The `--underline` option is one of its several styles that can be applied when rendering text.

            When you use the command `gum pager --underline`, it instructs `gum` to underline the text it renders, which is useful for highlighting or indicating important information in the console output. The underlined text appears with the base color and the underscore character below each character of the text.
        width: '[AI] The `gum` pager is a popular terminal paging tool for Unix-like systems, such as Git or other command line tools. The `--width` option sets the maximum column width for the pager''s output. By default, it adapts to the terminal size, but you can manually specify a width using this option to ensure consistent formatting across multiple sessions or to handle particularly wide outputs.'
