# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rust-analyzer
description: LSP server for the Rust programming language
flags:
    --log-file=: Log to the specified file instead of stderr
    --no-log-buffering: Flush log records to the file immediately
    --print-config-schema: Dump a LSP config JSON schema
    --version: Print version
    --wait-dbg: Wait until a debugger is attached to (requires debug build)
    -h, --help: Print help
    -q, --quiet: Verbosity level
    -v, --verbose*: Verbosity level, can be repeated multiple times
documentation:
    command: '[AI] Rust-analyzer is a fast and feature-rich static code analyzer for the Rust programming language. It provides comprehensive semantic analysis, type checking, autocompletion, linting, and more. You can use it as a standalone tool or integrate it into your preferred IDE or text editor. It''s open-source and continuously improving to support new language features and improve overall developer experience.'
    flag:
        help: '[AI] `rust-analyzer --help` is a command used to display detailed help information about Rust''s officially-endorsed compiler front-end and static analyzer, `rust-analyzer`. The help message includes available subcommands, their descriptions, and usage examples. It also explains the global options that can be passed to `rust-analyzer` to control its behavior. This command is useful for quickly learning about what `rust-analyzer` can do and how to use it effectively.'
        log-file: '[AI] `rust-analyzer --log-file` is a command-line option for Rust''s static analyzer, rust-analyzer. This option instructs rust-analyzer to write its logs into a specified file instead of printing them on the console. The flag takes the path to the desired log file as an argument. Using this option can be helpful when dealing with large logs or for debugging purposes, allowing for more detailed examination of rust-analyzer''s behavior.'
        no-log-buffering: '[AI] The `--no-log-buffering` flag for Rust-analyzer is used to disable log message buffering in the output. By default, Rust-analyzer collects log messages in a buffer and flushes them to stdout periodically or when the buffer size is reached. With this flag, logs are written to stdout immediately as they are generated, providing real-time feedback without waiting for the buffer to fill up or the periodic flush. This can be helpful for getting timely information during long-running analyses or complex builds.'
        print-config-schema: '[AI] `rust-analyzer --print-config-schema` is a command that generates a JSON schema defining the configuration options for `rust-analyzer`, a Rust language server. This can be useful for understanding what configuration options are available and their expected formats, which can aid in setting up custom configurations or integrations with other tools.'
        quiet: '[AI] `rust-analyzer --quiet` is a command used with Rust''s static code analyzer, `rust-analyzer`. The `--quiet` flag reduces the amount of output produced during analysis. Instead of printing detailed messages for each diagnostics or events, it only displays error codes and brief messages indicating the type of issue found. This can be useful for automated processes or when dealing with large codebases where excessive output might be distracting.'
        verbose: '[AI] `rust-analyzer --verbose` is a command used with Rust''s advanced compiler and static analyzer, rust-analyzer. The `--verbose` flag increases the amount of output generated during analysis, providing more detailed information about the diagnostic messages and the progress of the analysis itself. This can be helpful for debugging complex issues or understanding the inner workings of the tool.'
        version: '[AI] `rust-analyzer --version` is a command used to check the version of Rust''s built-in code analyzer, rust-analyzer. When run in a terminal or command prompt, it will print out the specific version number of rust-analyzer installed on your system, along with any additional build metadata if available. This information can be helpful for ensuring compatibility between different versions of Rust and its tools.'
        wait-dbg: '[AI] `rust-analyzer --wait-dbg` is a command used with Rust''s next-generation compiler and static analyzer, Rust-analyzer. The `--wait-dbg` flag instructs rust-analyzer to pause after encountering a debugger attachment request and wait for further instructions from the debugger before continuing analysis or compilation. This enables seamless integration of rust-analyzer with debugging tools like GDB or Visual Studio Debugger, allowing users to combine source code inspection, real-time error checking, and step-by-step debugging during development.'
