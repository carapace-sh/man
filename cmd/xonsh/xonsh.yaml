# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: xonsh
description: Python-powered shell
flags:
    --cache-everything: Use a cache, even for interactive commands.
    --no-rc: Do not load the .xonshrc files.
    --no-script-cache: Do not cache scripts as they are run.
    --rc=: The xonshrc files to load
    --shell-type=: What kind of shell should be used.
    --timings: Prints timing information before the prompt is shown.
    -D=: Define an environment variable
    -V, --version: Show version information and exit.
    -c=: Run a single command and exit.
    -h, --help: Show help and exit.
    -i, --interactive: Force running in interactive mode.
    -l, --login: Run as a login shell.
documentation:
    command: '[AI] "xonsh" is not a standard Unix or Linux command, but rather an advanced and feature-rich terminal session manager written in Python for Windows systems. It provides tab completion, powerful aliasing capabilities, and Unix-like shell features such as piping and redirection. xonsh aims to bring a more modern and efficient command-line experience to the Windows platform.'
    flag:
        D: '[AI] `xonsh` is a terminal session manager for Unix-like systems, written in Python. The option `-D` is used when starting the `xonsh` daemon (background process) and it stands for "daemonize." When using this flag, `xonsh` detaches from the terminal and runs as a background process, leaving its PID (Process ID) printed on the console. This allows `xonsh` to continue running even after the terminal session is closed.'
        c: |-
            [AI] `xonsh -c` is a command-line option for the XONSH shell, which stands for "XONSH script". The `-c` flag tells XONSH to execute a single command that follows this flag in the argument list, rather than starting an interactive shell session.

            For example, if you have a shell script file named `script.shx`, you can execute it using XONSH as follows:
            ```bash
            xonsh -c 'source script.shx'
            ```
            This command will read and execute the contents of the `script.shx` file as if they were typed into an interactive XONSH session. After the command completes, the shell exits.
        cache-everything: '[AI] The `--cache-everything` flag in Xonsh, a modern interactive shell, instructs it to cache every module and package used during a session. This means that once data is downloaded or loaded into memory during the initial run of a command or script, Xonsh will reuse that cached data for subsequent uses instead of redownloading or rebuilding it, resulting in faster execution times and improved user experience.'
        help: '[AI] `xonsh --help` displays a help message for the xonsh command-line shell. The message provides an overview of xonsh''s features and usage, including options for connecting to remote servers, setting up profiles, and accessing various commands and modules. It also lists the available subcommands, such as `xonsh init` or `xonsh connect`.'
        interactive: '[AI] `xonsh --interactive` is a command-line argument for the XONSH shell, which starts an interactive session of the shell. Interactive mode allows users to enter and execute commands in real time and receive instant feedback, making it ideal for tasks requiring frequent interaction with the shell. It sets up various features such as tab completion, line editing, and job control, enhancing user experience and productivity.'
        login: '[AI] `xonsh --login` is a command-line argument used with Xonsh, an interactive shell that brings together the best of PowerShell and Bash. The `--login` flag indicates that the shell should behave as a login shell. This means it will execute specific startup files during initialization to set up environment variables, configure terminal appearance, and run scripts for initializing the system or user-specific settings. By starting Xonsh with this flag, you ensure a consistent and customized environment every time you log in to your system.'
        no-rc: '[AI] `xonsh` is a modern, Pythonic shell for Windows. The `--no-rc` flag is an option that can be passed when invoking this shell. It prevents the loading of the default configuration file (also known as RC file) at startup. In other words, it runs the shell without executing any commands or settings defined in the RC file. This can be useful for starting the shell in a minimal state or for scripting purposes where you want to have full control over the environment from the beginning.'
        no-script-cache: '[AI] The `--no-script-cache` flag for the Xonsh terminal shell disables the script cache feature. This means that scripts or functions previously loaded into memory will not be automatically reused during subsequent sessions, requiring them to be reloaded each time instead. This option can be useful in security-sensitive environments where the potential risk of loading untrusted scripts from a cache outweighs the benefits of caching for performance and convenience.'
        rc: '[AI] `xonsh --rc` is a command-line option for the XONSH shell, which stands for "extensible OpenNebula SHell". It specifies that XONSH should load and execute a custom initialization script (also known as a runtime configuration or RC file) upon starting. This allows users to define various settings, aliases, functions, and other customizations for their shell environment.'
        shell-type: '[AI] `xonsh --shell-type` is an option used with the XONSH terminal session manager. The `--shell-type` argument specifies the type of shell to be launched within the session. For instance, setting it to `zsh`, `bash`, or `powershell` would start a new session with the respective shell. This allows users to manage multiple sessions running different shells from within XONSH.'
        timings: '[AI] `xonsh --timings` is a command-line option for the XONSH shell, which enables and displays the timing statistics of various shell events such as parser processing, expansion, source loading, and execution. This can help in understanding the performance characteristics of the shell and identifying potential bottlenecks for optimization purposes.'
        version: '[AI] `xonsh --version` is a command used in the XONSH shell to display the version information of the installed XONSH software. When you run this command, it will print out the version number and build details such as the commit hash or tag, the build date, and the operating system on which the build was created. This can be helpful for checking which version of XONSH you have installed and for troubleshooting any potential compatibility issues with other software or your operating system.'
