# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Run a JavaScript or TypeScript program
flags:
    --allow-env?: Allow environment access
    --allow-ffi?: Allow loading dynamic libraries
    --allow-hrtime: Allow high resolution time measurement
    --allow-net?: Allow network access
    --allow-read?: Allow file system read access
    --allow-run?: Allow running subprocesses
    --allow-write?: Allow file system write access
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --inspect-brk?: Activate inspector on host:port and break at start of user script
    --inspect?: 'Activate inspector on host:port (default: 127.0.0.1:9229)'
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --prompt: Fallback to prompt if required permission wasn't passed
    --seed=: Seed Math.random()
    --unsafely-ignore-certificate-errors?: 'DANGER: Disables verification of TLS certificates'
    --v8-flags?: 'Set V8 command line options (for help: --v8-flags=--help'
    --watch: 'UNSTABLE: Watch for file changes and restart process automatically'
    -A, --allow-all: Allow all permissions
    -c, --config=: Load configuration file
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno run` is a command used in Deno, a modern and secure TypeScript runtime. It takes one or more arguments: the first argument is the path to a Deno file (with a `.ts` or `.mjs` extension), and optional additional arguments can be provided as flags to customize the Deno execution environment. When you run `deno run <file>`, it compiles and executes the code in the specified file, using Deno''s built-in TypeScript compiler and standard libraries.'
    flag:
        allow-all: '[AI] The `deno run --allow-all` command is used in Deno, a modern and secure TypeScript runtime, to bypass default permission checks during development. It allows all permissions for the given script, effectively treating it as if it has been granted all possible permissions. This command should be used with caution, as it can potentially introduce security vulnerabilities. It''s recommended to use it only for local development and remove or tighten the allowed permissions when ready to deploy.'
        allow-env: '[AI] `deno run --allow-env` is a command used in Deno, a modern and secure TypeScript runtime. This flag allows Deno to read environment variables from the running operating system when executing a script. Without this flag, Deno would only consider environment variables explicitly defined in the script or passed as arguments to the script. By using `--allow-env`, the script can access and use environment variables set outside of its scope, enhancing the script''s flexibility for various deployment scenarios.'
        allow-ffi: '[AI] The `deno run --allow-ffi` command is used to run a Deno script with the permission to use Foreign Function Interface (FFI). FFI allows Deno to call functions written in other languages like C, C++, or Rust, enabling interoperability between different programming languages. The `--allow-ffi` flag grants this specific privilege during runtime, ensuring security by limiting FFI usage only to the specified script.'
        allow-hrtime: '[AI] The `deno run --allow-hrtime` command is used to run a Deno script with permission to use the HRTime API, which measures real time and high resolution time. This flag is necessary when writing scripts that require precise timing measurements, as the HRTime API is considered a security risk due to its potential for performance profiling and other sensitive system information access. By explicitly allowing this functionality, the Deno runtime can safely execute the script while minimizing potential security vulnerabilities.'
        allow-net: |-
            [AI] The `deno run --allow-net` command is used to run a Deno script with network permissions enabled. Deno is a type-safe, statically-typed programming language that prioritizes security. By default, Deno restricts the access of scripts to the local file system and does not allow any network communication.

            The `--allow-net` flag grants the script the ability to make network requests, which can be essential for building applications that interact with APIs or communicate over the web. However, using this flag increases the potential security risks, as it enables access to external resources. Therefore, it's crucial to ensure that the network communication is secure and necessary for your application.
        allow-read: '[AI] The `deno run --allow-read` command is used in Deno, a type-safe and secure runtime for JavaScript and TypeScript, to grant permissions for reading files during the execution of a script. When executed, this command line argument allows the Deno program to read data from specified file paths. Without this flag, Deno would deny file access by default for security reasons.'
        allow-run: '[AI] The `deno run --allow-run` command is used to execute Deno scripts with permission to run other programs or files. Deno, a modern and secure TypeScript runtime, enforces strict access control policies by default for security reasons. This flag grants the script the ability to call external modules or functions that are not part of the Deno standard library, thereby enabling greater functionality. It''s important to note that using this flag can introduce potential security risks if used carelessly, as it allows the script to interact with the file system and run other programs.'
        allow-write: '[AI] The `deno run --allow-write` command is used to execute a Deno script with the `allow-write` permission granted. Deno is a typesafe, secure runtime for JavaScript and TypeScript. This flag enables write access for the running script, allowing it to modify files or directories outside its sandboxed environment. It''s essential for scripts that need to create, update, or delete files during execution. However, using this command can pose potential security risks if not used carefully, as it allows the script to bypass Deno''s default read-only file system.'
        cached-only: '[AI] The `deno run --cached-only` command is used in Deno, a modern and secure TypeScript runtime. This flag instructs Deno to only use files from its cache instead of re-downloading or recompiling them. This can significantly improve build times for projects with large dependencies or multiple builds. However, keep in mind that this flag might not work as intended if the cache is stale or corrupted.'
        cert: '[AI] `deno run --cert` is a command used in Deno, a modern and secure TypeScript runtime. The `--cert` flag specifies a PEM-encoded X.509 certificate file as an argument, enabling TLS (Transport Layer Security) encryption for the Deno application being run. This helps secure communication between the client and server by encrypting the data transmitted between them.'
        config: '[AI] The `deno run --config` command is used to execute a Deno script with a specific configuration file. Deno is a type-safe, compiled programming language and execution environment. The `--config` flag tells Deno to load the specified configuration file before executing the script. The configuration file contains settings that can be used to customize the Deno runtime, such as import maps or environment variables. This allows for greater flexibility and customization when working with larger projects.'
        import-map: '[AI] The `deno run --import-map` flag is used in Deno, a modern and secure TypeScript runtime, to specify an import map file during program execution. An import map is a JSON file that defines custom or external module resolution rules, allowing overriding of default module imports or adding additional modules not included in the project. By using this flag, you can control the behavior of the Deno import system and adapt it to specific use cases, such as managing dependencies from multiple sources or working with monorepos.'
        inspect: '[AI] The `deno run --inspect` command is used in Deno, a modern and secure TypeScript-based runtime, to start a new Deno application with an attached debugger for remote inspection and control using popular debugging tools such as Chrome DevTools or Visual Studio Code''s built-in debugger. This flag sets up the application for remote debugging during development without needing to modify the code or configuration files. It allows developers to step through code, inspect variables, set breakpoints, and evaluate expressions in real-time while the Deno application is running.'
        inspect-brk: '[AI] `deno run --inspect-brk` is a command used in Deno, a modern and secure TypeScript runtime. This flag enables source level debugging during program execution. The `--inspect` flag starts Deno in debug mode, while `--inspect-brk` adds the breakpoint functionality. When you run your Deno application with this flag, it will start the Node inspector server and pause the execution at the first line of code. This allows you to connect a debugger (like Chrome DevTools or Visual Studio Code) and inspect, set breakpoints, and control the runtime execution.'
        location: '[AI] The `--location` flag in Deno is used to specify the location of the script or module file to be executed. It takes a string argument that represents the filesystem path relative to the Deno project root or an URL for remote modules. For example, `deno run --location=./my_script.ts` would run the script located at "./my\_script.ts" in the current directory, while `deno run --location=https://example.com/my_module@0.1.0/index.ts` would import and run the specified module from the given URL.'
        lock: '[AI] `deno run --lock` is a command used in Deno, a modern and secure TypeScript runtime. This command runs a Deno script and applies or updates the project''s lockfile (named `deno.lock`) based on the current dependencies specified in the `deno.jsonc` file. It ensures consistent and reproducible builds by managing dependencies and their versions, reducing potential version conflicts and improving overall project stability.'
        lock-write: '[AI] `deno run --lock-write` is a command used in Deno, a modern JavaScript runtime. This command writes and updates the lockfile (named `deno.lock`) based on the project''s `deno.jsonc` file, which specifies the exact versions of dependencies needed for the project to run correctly. When you run this command, Deno ensures that your project has the latest, consistent dependencies, making your codebase more reliable and easier to share with others.'
        no-check: '[AI] The `deno run --no-check` command is a flag used in Deno, a TypeScript-based runtime for building and running JavaScript and TypeScript projects. This flag disables Deno''s built-in type checking feature during execution. By using `--no-check`, you explicitly instruct Deno to bypass the compilation and checking process, allowing the code to run even if it contains type errors or other issues that would normally be reported during the build phase. This can be useful for testing purposes when you want to quickly check if a piece of code works without being interrupted by compiler warnings or errors.'
        no-remote: '[AI] The `deno run --no-remote` command is used in Deno, a modern and secure TypeScript runtime, to execute a script without using remote packages from the Deno registry. Instead, all required packages must be locally installed in the project''s `./deps` directory before running the script. This flag can help ensure better security and control over dependencies.'
        prompt: '[AI] The `deno run --prompt` command is used to start Deno, a modern and secure TypeScript runtime, in interactive mode. With this flag, Deno will not execute a specific file but instead will drop you into a REPL (Read-Evaluate-Print Loop) environment where you can write and execute TypeScript code directly from the console. This allows for quick experimentation and iterative development within the Deno ecosystem.'
        reload: '[AI] `deno run --reload` is a command used in Deno, a modern and secure TypeScript runtime. This command starts the Deno application with live-reloading capability. When you save changes to your TypeScript or JS file, the Deno server will automatically recompile and apply the updates without requiring manual restart. It''s often used for developing and testing Deno applications iteratively, increasing productivity and reducing development time.'
        seed: '[AI] The `deno run --seed` command is used to execute a Deno script with a random seed value for its built-in pseudo-random number generator (PRNG). The `--seed` option allows specifying a specific value to be used as the seed, but when omitted, Deno will use a randomly generated seed each time the command is run. This can be useful for testing or running scripts that rely on randomness with consistent results.'
        unsafely-ignore-certificate-errors: '[AI] The `--unsafely-ignore-certificate-errors` flag in Deno, a TypeScript-based runtime for building secure web applications, disables certificate validation during SSL/TLS connection establishment. In simpler terms, it tells Deno to ignore any errors related to certificate verification and proceed with the connection despite potential security risks. This flag should be used with caution only when connecting to servers with known or trusted certificates that cannot be easily updated or verified in a secure manner. It is generally not recommended for production use as it bypasses an important security measure intended to protect against man-in-the-middle attacks and other certificate-related vulnerabilities.'
        v8-flags: '[AI] `deno run --v8-flags` is a command used in Deno, a modern and secure TypeScript runtime, to pass flags directly to the V8 JavaScript engine that Deno uses under the hood. These flags can be used to configure various aspects of the V8 engine, such as performance optimization or memory management. For example, `--v8-flags="--max-old-space-size=512m"` sets a limit for the maximum old generation heap size in Deno''s V8 engine.'
        watch: '[AI] `deno run --watch` is a command used in Deno, a modern and secure TypeScript runtime. This command starts the Deno REPL (Read-Evaluate-Print Loop) and watches for file changes in the current directory and its subdirectories. Whenever a file is modified, Deno automatically reloads the script for you without requiring manual intervention. This is particularly useful for development tasks where you frequently make changes to your code and want to see the results of those changes as quickly as possible.'
