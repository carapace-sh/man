# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ios
description: Build an iOS application bundle (Mac OS X host only)
flags:
    --analyze-size: Produce additional profile information for artifact output size.
    --build-name=: A "x.y.z" string used as the version number shown to users.
    --build-number=: An identifier used as an internal version number.
    --codesign: Codesign the application bundle (only available on device builds).
    --config-only: Update the project configuration without performing a build.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-analyze-size: Do not produce additional profile information for artifact output size.
    --no-codesign: Codesign the application bundle (only available on device builds).
    --no-config-only: Update the project configuration without performing a build.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Whether to run "flutter pub get" before executing this command.
    --no-simulator: Build for the iOS simulator instead of the device.
    --no-tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Whether to run "flutter pub get" before executing this command.
    --release: Build a release version of your app (default mode).
    --simulator: Build for the iOS simulator instead of the device.
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build ios` is a command used in Flutter development to build an iOS app from the project''s source code. It compiles Dart code into ARM64 machine code using the Apple Swift compiler (LLVM) and generates the necessary bundles and frameworks for an Xcode project. The output is placed in the `ios/build/release` directory, which can be imported into Xcode to run or distribute the app on the App Store.'
    flag:
        analyze-size: '[AI] `flutter build ios --analyze-size` is a command used in Flutter development for analyzing the size of an iOS app bundle or framework. When executed, it performs static analysis on the Swift and Objective-C code to estimate the size of the resulting binary files, including images, text assets, and other resources. The output provides detailed information about the size breakdown of each component in the app, helping developers optimize their app''s file size for efficient distribution and deployment.'
        build-name: '[AI] `flutter build ios --build-name` is a command used in Flutter, a mobile app development framework, to create an IPA file for distribution on the App Store. The `--build-name` option sets a custom name for the build. This command compiles and packages your application''s Swift and Objective-C code along with the Flutter engine into an IPA file that can be installed on iOS devices or submitted to the App Store.'
        build-number: '[AI] `flutter build ios --build-number` is a command used in Flutter development to create an IPA file for iOS app distribution. The `--build-number` argument specifies a custom build number for the IPA, which can be useful for tracking different versions of the app or builds during testing and deployment. When you run this command in your terminal or command prompt, Flutter compiles and packages the application for iOS, creating an IPA file with the specified build number.'
        codesign: |-
            [AI] The command `flutter build ios --codesign` is used in Flutter development for building and code signing an iOS app. Here's a brief explanation:

            1. Building: `flutter build ios` is the base command to build an iOS app using Flutter. It compiles Swift, Objective-C or other necessary files, generates the required assets, and creates the .app file in the build/ios directory.

            2. Code signing: The `--codesign` flag is added to the base command for code signing the built app. Code signing is a critical step to ensure that your app runs on a device or is submitted to the App Store. It involves creating a provisioning profile, configuring the certificates and identities, and providing the necessary information in the scheme file.

            3. In summary, `flutter build ios --codesign` builds an iOS app using Flutter and signs it for distribution using the specified code signing identity and provisioning profile.
        config-only: '[AI] `flutter build ios --config-only` is a command used in Flutter development to generate or modify the Xcode project configuration files for building an iOS app, without actually compiling or running the app. This can be useful when making changes to scheme settings, provisioning profiles, or other project configurations that don''t require a full build. The output of this command is written to the `ios/build/outputs/flutter-container.xcworkspace` file.'
        dart-define: '[AI] `flutter build ios --dart-define` is a command used in Flutter development for generating an iOS app bundle. The `--dart-define` option allows you to define constants in Dart code that are exposed as preprocessor macros in the generated Objective-C or Swift code, enabling easier communication between the Flutter and native code. This is particularly useful when dealing with custom configurations or settings specific to the iOS platform.'
        debug: |-
            [AI] `flutter build ios --debug` is a command used in Flutter development to build an iOS application in debug mode. This command performs several tasks:

            1. Compiles Dart code into ARM64 machine code using the Flutter engine and Swift interpreter.
            2. Builds native iOS projects (using Xcode) from generated Swift and resources files.
            3. Creates or updates the iOS app in Xcode for debugging, with symbolic information included for easier debugging.
            4. Produces a `.app` file that can be installed on an iOS device for testing during development.
            5. Provides faster rebuild times by skipping code signing and provisioning profile generation.

            In summary, this command builds your Flutter app as an iOS project in debug mode, making it easier to test and debug.
        flavor: '[AI] The `flutter build ios --flavor` command is used in Flutter development to create an iOS app bundle for a specific app flavor or build type. Flavors allow you to customize your app''s features, resources, and configurations for different environments (like staging and production) or user groups. By specifying the desired flavor during the build process, Flutter will package only the required code, assets, and settings for that particular configuration.'
        help: '[AI] `flutter build ios --help` is a command used in Flutter, a mobile app development framework, to build an iOS application from its source code. The `--help` flag is added to display detailed information about this specific command and its available options. It provides users with instructions on how to use the command correctly to generate an .app file suitable for submission to the App Store or testing on a physical device. Some common options include specifying a scheme name, setting build configurations, enabling Profiles for code signing, and selecting the target device or simulator.'
        no-analyze-size: '[AI] `flutter build ios --no-analyze-size` is a command used in Flutter development to build an iOS application. The `--no-analyze-size` option disables size analysis during the build process. Size analysis is a feature that calculates the size of the app bundle and its individual components, including code, resources, and frameworks. Disabling this option can save time during the build process since size analysis can be resource-intensive. However, without size analysis, you won''t have accurate information about your app''s size.'
        no-codesign: '[AI] `flutter build ios --no-codesign` is a command used in Flutter development to build an iOS app without codesigning. This means that the process of digitally signing the app for distribution on the App Store will not be performed during this build. Instead, the output will be the app''s `.app` bundle that can be further processed manually or using other tools like Xcode for codesigning before submission to the App Store.'
        no-config-only: '[AI] `flutter build ios --no-config-only` is a command used in Flutter development to build an iOS application from the source code. The `--no-config-only` flag is optional but disables the generation of configuration files like `Scheme.json` and `Info.plist`, which are only needed for Xcode to run and debug the app. With this flag, the command focuses solely on building the application artifacts, such as IPA or app store distribution archives, ready for deployment to the App Store or testing on a device.'
        no-null-assertions: |-
            [AI] `flutter build ios --no-null-assertions` is a command used in Flutter development to build an iOS application from the source code. The `--no-null-assertions` flag disables null safety checks during the build process.

            Flutter introduced null safety in version 2.12, which helps prevent runtime errors caused by accessing null values. However, disabling this check can be useful when dealing with third-party libraries or older code that might contain nullable references. By using `--no-null-assertions`, the build process will not throw an error if it encounters nullable references, allowing the application to still be built and run on iOS devices despite these issues.
        no-obfuscate: '[AI] `flutter build ios --no-obfuscate` is a command used to build an iOS application using the Flutter framework without obfuscation. Obfuscation is a process of making code harder to read or reverse engineer, which is often used for releasing apps to protect intellectual property. By adding `--no-obfuscate` flag, this step will be skipped during the build process, resulting in clearer and readable Swift or Objective-C output code instead of obfuscated binary files.'
        no-pub: '[AI] `flutter build ios --no-pub` is a command used in Flutter development to build an iOS application from the existing project sources without running `pub get` to download and install dependencies from the pubspec.json file first. This option can be useful when the dependencies have already been installed or when there are network issues preventing the `pub get` operation from completing successfully.'
        no-simulator: '[AI] `flutter build ios --no-simulator` is a command used in Flutter development to build an iOS app for physical deployment to a device or for creating an IPA file for submission to the App Store. The `--no-simulator` flag prevents the use of the Xcode simulator during the build process, ensuring that the resulting app is optimized for native hardware and not just the simulated environment.'
        no-tree-shake-icons: |-
            [AI] `flutter build ios --no-tree-shake-icons` is a command used in Flutter development to build an iOS application from the project's source code. The `--no-tree-shake-icons` option disables tree shaking for icon files during the build process.

            Tree shaking is a technique used by the Flutter compiler to eliminate unused code and reduce the size of the resulting app. However, this optimization doesn't apply to icon files as they are typically not executed at runtime and are static assets that are included in the final binary. Disabling tree shaking for icons ensures that all icon files are bundled with the build without being removed due to potential unused references. This can help prevent issues with missing or incorrectly sized icons on target devices.
        null-assertions: '[AI] `flutter build ios --null-assertions` is a command used in Flutter development to build an iOS application using Xcode and enable null safety. The `--null-assertions` option disables null safety checks, allowing the use of the ''?'' and ''?.'' operators that were present in Dart before null safety was introduced. This can be useful when transitioning a codebase to null safety or when dealing with third-party dependencies that may not yet support null safety. Note that using this option means you''re responsible for checking for null values yourself in your code.'
        obfuscate: '[AI] `flutter build ios --obfuscate` is a command used in Flutter development for building an iOS app with code obfuscation. Obfuscation is a technique to make the source code harder to read by renaming variables, classes, and methods with unreadable names, removing unused code, and adding confusion. The `--obfuscate` option instructs Flutter to use a tool like ProGuard or R8 during the iOS build process to perform obfuscation on the generated Swift files, enhancing the app''s security by making it harder for reverse engineers to understand the underlying code structure.'
        profile: '[AI] `flutter build ios --profile` is a command used in Flutter development to create an optimized iOS app bundle or IPA file for distribution, specifically targeting the use of the "Profile" build configuration. This configuration prioritizes size reduction and minimal runtime requirements, making it suitable for production deployment on devices with limited resources. The output artifact is optimized for efficient use of system resources and minimal memory footprint.'
        pub: '[AI] `flutter build ios --pub` is a command used in Flutter development to create an IPA file for distributing an app on the Apple App Store. The `--pub` option specifies that dependencies managed by Pub, Flutter''s package manager, should be fetched before building. This ensures that the latest versions of all required packages are included in the build.'
        release: |-
            [AI] `flutter build ios --release` is a command used in Flutter development for creating an optimized and release-ready iOS application package. It performs several tasks:

            1. Compiles the Flutter code into native ARM64 machine code for the iOS platform using Swift or Objective-C.
            2. Performs tree shaking, reducing the app size by removing unused code.
            3. Strips all symbols and debug information from the built binaries, enhancing security and privacy.
            4. Optimizes the build for improved performance and smaller binary sizes.
            5. Creates a valid `.app` bundle, which is ready to be installed on an iOS device or submitted to the App Store.

            The resulting release build is more efficient and lighter in size than a debug build.
        simulator: '[AI] `flutter build ios --simulator` is a command used in Flutter development to build and run an iOS app in the Xcode simulator without connecting a physical device. The `--simulator` option tells Flutter to launch the simulator automatically after building the app. This can be useful for testing and debugging your app in various simulated environments before deploying it to the App Store.'
        split-debug-info: '[AI] The `flutter build ios --split-debug-info` command is used to generate separate debug symbol files for each individual Flutter app package in an iOS project built with Flutter. This can improve the performance of Xcode''s Symbol Navigator and other debugging tools when working on larger projects, as it allows them to load and search through symbols more efficiently. The resulting files are saved under the `Build/Intermediates/Modes/Debug-iphos` folder within your iOS project directory.'
        target: '[AI] `flutter build ios --target` is a command used in Flutter, a mobile app development framework, to create an IPA file for distributing an iOS app to the App Store or testing on physical devices. The `--target` option specifies the particular scheme (iOS project configuration) to use when building the app. This command compiles and packages the application code, assets, and dependencies into a single archive that can be installed directly onto an iOS device or submitted for App Store review.'
        tree-shake-icons: '[AI] `flutter build ios` is a command used in Flutter development to build an iOS application. The `--tree-shake-icons` option is related to icon optimization. It instructs the Flutter toolchain to apply icon tree shaking during the build process. Icon tree shaking is a technique that eliminates unused icons from the final binary, reducing app size and improving performance on devices with limited storage or memory. This can be particularly useful for larger apps with numerous icons.'
