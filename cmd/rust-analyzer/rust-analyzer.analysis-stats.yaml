# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: analysis-stats
description: Batch typecheck project and print summary statistics
flags:
    --disable-build-scripts: Don't run build scripts or load `OUT_DIR` values by running `cargo check` before analysis
    --disable-proc-macros: Don't use expand proc macros
    --memory-usage: Collect memory usage statistics
    --no-sysroot: Don't load sysroot crates (`std`, `core` & friends)
    --output=: ""
    --parallel: Run type inference in parallel
    --randomize: Randomize order in which crates, modules, and items are processed
    --skip-inference: Only resolve names, don't run type inference
    --source-stats: Print the total length of all source and macro files (whitespace is not counted)
    --with-deps: Also analyze all dependencies
    -o, --only=: Only analyze items matching this path
documentation:
    command: '[AI] `rust-analyzer analysis-stats` is a command used in Rust programming language development. It invokes Rust''s static analyzer, `rust-analyzer`, to generate statistics about the codebase being analyzed. These statistics include metrics like number of files, lines of code, and various complexity measures. The output usually is printed to the console or written to a file for further processing.'
    flag:
        disable-build-scripts: |-
            [AI] `rust-analyzer analysis-stats --disable-build-scripts` is a command used with Rust's static analyzer, rust-analyzer. The `analysis-stats` subcommand generates statistics about the analysis process, while `--disable-build-scripts` is an optional flag that disables the execution of build scripts during the analysis.

            In simpler terms, this command asks rust-analyzer to generate analysis statistics without running any build scripts in the project. This can be useful for analyzing large projects or those with complex build systems, as running build scripts can add unnecessary time and resources to the analysis process.
        disable-proc-macros: '[AI] `rust-analyzer analysis-stats --disable-proc-macros` is a command used to generate statistical analysis reports for Rust projects using Rust language server `rust-analyzer`. The `--disable-proc-macros` flag disables the processing of procedural macros during the analysis. Procedural macros are an advanced feature in Rust that allows defining new syntax and expanding it at compile time, which can make analysis more complex. By disabling their processing, the report generation may be simpler and faster.'
        memory-usage: '[AI] `rust-analyzer analysis-stats --memory-usage` is a command used to generate memory usage statistics for Rust projects analyzed by Rust language server (`rust-analyzer`). The flag `--memory-usage` instructs the tool to produce detailed reports on peak memory consumption during the analysis process. This information can be helpful in identifying potential memory bottlenecks and optimizing the performance of larger Rust projects.'
        no-sysroot: '[AI] `rust-analyzer analysis-stats --no-sysroot` is a command used with Rust''s static analyzer tool, `rust-analyzer`. The `analysis-stats` subcommand generates statistics about the code analysis, such as the number of warnings and errors. The `--no-sysroot` flag is an option that disables the use of a predefined sysroot, which is a directory containing essential system files for linking. Disabling this flag can be useful when analyzing Rust projects without depending on a specific target system or environment.'
        only: '[AI] `rust-analyzer analysis-stats --only` is a command used to generate statistical analysis reports for Rust projects using Rust''s static analyzer, `rust-analyzer`. The `--only` flag specifies that only the statistics for a particular type of analysis should be displayed. This can help developers focus on specific issues or areas of concern within their codebase.'
        output: '[AI] `rust-analyzer analysis-stats --output` is a command used with Rust''s static analyzer tool, `rust-analyzer`. This command generates statistical analysis reports for Rust projects. The `--output` flag specifies the output file where these statistics will be written in a human-readable format. These reports provide valuable information about potential issues and warnings found during analysis, helping developers to identify areas that require improvement in their Rust codebase.'
        parallel: '[AI] `rust-analyzer analysis-stats --parallel` is a command used in Rust programming language development. This command instructs `rust-analyzer`, a powerful code analyzer for Rust, to generate statistical reports about the projects'' source code using the `analysis-stats` subcommand. The `--parallel` option enables parallel processing, allowing multiple statistics to be computed simultaneously for improved efficiency.'
        randomize: '[AI] The `rust-analyzer analysis-stats --randomize` command is used to generate statistical analysis reports for Rust projects, with the added flag `--randomize` causing the selection of random projects each time it''s run. This can be helpful for observing trends or comparing statistics across different projects, as the output will not always be the same due to the randomly selected projects.'
        skip-inference: '[AI] `rust-analyzer analysis-stats --skip-inference` is a command used with Rust''s static analyzer, `rust-analyzer`. This specific command generates statistical analysis reports about the Rust codebase without performing type inference. The `--skip-inference` flag is passed to disable type inference during the analysis process, which can result in faster reporting at the cost of potentially less accurate results.'
        source-stats: '[AI] `rust-analyzer analysis-stats --source-stats` is a command used with Rust''s advanced static analyzer, rust-analyzer. This specific command generates statistics about the sources (Rust files) in a project. The output provides information such as the number of files, bytes, lines, and syntax trees analyzed. These statistics can be helpful for understanding the size and complexity of a Rust project, which can aid in planning resources or identifying potential performance bottlenecks.'
        with-deps: |-
            [AI] `rust-analyzer analysis-stats --with-deps` is a command used in Rust programming language development. The `rust-analyzer` tool is a powerful compiler frontend providing rich editing features and it can also be used to generate various statistics about the analyzed codebase.

            The `analysis-stats` subcommand generates detailed analysis reports. When run with the `--with-deps` flag, it includes dependency information in the generated statistics. This means that the report will not only show details about the inspected Rust source files but also provide an overview of the dependencies used within those files. The output is typically in JSON format and can be further processed or visualized using various tools.
