# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mod
description: Various Hugo Modules helpers.
flags:
    --cacheDir=: 'filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/'
    --cleanDestinationDir: remove files from destination not found in static directories
    --disableKinds*=: disable different kind of pages (home, RSS etc.)
    --enableGitInfo: add Git revision, date and author info to the pages
    --forceSyncStatic: copy all files when static is changed.
    --gc: enable to run some cleanup tasks (remove unused cache files) after the build
    --i18n-warnings: print missing translations
    --ignoreCache: ignores the cache directory
    --minify: minify any supported output format (HTML, XML etc.)
    --noChmod: don't sync permission mode of files
    --noTimes: don't sync modification time of files
    --path-warnings: print warnings on duplicate target paths etc.
    --poll=: set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes
    --print-mem: print memory usage to screen at intervals
    --profile-cpu=: write cpu profile to `file`
    --profile-mem=: write memory profile to `file`
    --profile-mutex=: write Mutex profile to `file`
    --templateMetrics: display metrics about template executions
    --templateMetricsHints: calculate some improvement hints when combined with --templateMetrics
    --trace=: write trace to `file` (not useful in general)
    -D, --buildDrafts: include content marked as draft
    -E, --buildExpired: include expired content
    -F, --buildFuture: include content with publishdate in the future
    -b, --baseURL=: hostname (and path) to the root, e.g. http://spf13.com/
    -c, --contentDir=: filesystem path to content directory
    -d, --destination=: filesystem path to write files to
    -l, --layoutDir=: filesystem path to layout directory
    -t, --theme*=: themes to use (located in /themes/THEMENAME/)
documentation:
    command: '[AI] `hugo mod` is a command-line tool used in the Hugo static site generator for managing modules, which are reusable components or packages, within your Hugo project. The `hugo mod` commands enable you to install, update, list, and manage dependencies between these modules and your main Hugo site. This helps simplify development, maintain consistency, and promote best practices in building and scaling your website with Hugo.'
    flag:
        baseURL: '[AI] The `hugo mod --baseURL` command is used in Hugo, a popular static site generator for building websites and blogs. This command sets the base URL of a Hugo module during development. It allows you to use relative paths within the module''s content that will correctly map to the URL structure when the module is used as a dependency in another Hugo project. The base URL should reflect the URL prefix under which this module will be served or published.'
        buildDrafts: |-
            [AI] `hugo mod --buildDrafts` is a command used in Hugo, a popular static site generator for building websites. This command is specifically used to build and serve draft (unpublished) pages during the site generation process.

            When you run `hugo`, by default it only builds and serves published content. Draft pages are excluded from the build since they're not considered ready for public viewing yet. If you want to include drafts in your build, you can use this command: `hugo mod --buildDrafts`. This will tell Hugo to include draft pages during the site generation process and serve them along with published content.

            This command is especially useful when developing a website or blog locally, as it allows you to view your draft content alongside your live content while building your site. Remember, using this command does not publish your drafts; it just makes them available on your local development server for previewing purposes.
        buildExpired: |-
            [AI] `hugo mod --buildExpired` is a command provided by Hugo, a popular static site generator for building websites and applications using the Go language. This command is used to check for and build any outdated or expired dependencies in your project's `go.mod` file.

            When you run `hugo mod --buildExpired`, Hugo will first fetch the latest versions of all dependencies listed in your `go.mod` file. It then compares these versions with the ones currently being used by your project. If it detects any differences, it proceeds to build and install the updated dependencies. The command aims to keep your project up-to-date with the latest versions of its dependencies, ensuring optimal performance and compatibility.
        buildFuture: '[AI] The `hugo mod --buildFuture` command is used in Hugo, a popular static site generator for creating blogs and websites. This command triggers a build of dependencies specified in the `go.mod` file using the `go mod` tool, and then builds the Hugo site using the updated dependencies. It ensures that the site is built with the latest versions of its dependencies, which can help avoid potential compatibility issues. The `--buildFuture` flag tells Hugo to continue building future pages as they are added or modified, instead of just building the currently selected content.'
        cacheDir: '[AI] The `hugo mod --cacheDir` command is used in Hugo, a popular static site generator for creating blogs and websites. This command sets the cache directory for Hugo''s module system. By default, the system looks for caches in the local `.hugo/modules` folder. However, you can change this location by specifying a new path using this command: `hugo mod --cacheDir /path/to/new/cache/directory`. This can be helpful if you need to manage cache files manually or if your build environment has limited storage space.'
        cleanDestinationDir: '[AI] `hugo mod --cleanDestinationDir` is a command used in Hugo, a popular static site generator for building websites and blogs. This command cleans the destination directory of any previously installed or downloaded dependencies, ensuring that only the specified dependencies listed in the go.mod file are present when running the next build or serve command. It helps maintain a clean environment by removing unnecessary files and keeping the project focused on the required packages.'
        contentDir: '[AI] `hugo mod --contentDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command sets the content directory for a Hugo module. In other words, it specifies where the user intends to store the files of the module that are intended for serving as part of the website''s content. The flag takes a path argument, such as `--contentDir=./my-content`. When this command is executed during the installation or update process of a Hugo module, the directory specified will be included in the module''s exported file structure, making its content accessible to be rendered and served by Hugo when building the website.'
        destination: '[AI] `hugo mod --destination` is a command used in Hugo, a popular static site generator for building websites and applications. This command is specifically used to save downloaded dependencies from the Go module system into a specific directory named as the argument of `--destination`. It ensures that the updated dependencies are isolated within the project''s `mod` directory and do not interfere with other projects using the same modules.'
        disableKinds: |-
            [AI] `hugo mod --disableKinds` is a command used in Hugo, a popular static site generator. It disables specific built-in kinds (content types) in your Hugo site. This can be useful when you want to prevent certain types from being processed during site builds or development.

            To use it, provide the names of the kinds you wish to disable as arguments: `hugo mod --disableKinds MyContentType1 MyContentType2`. This command modifies your site's configuration and will affect how Hugo handles these specific content types during build processes.
        enableGitInfo: '[AI] `hugo mod --enable-gitinfo` is a command used in Hugo, a popular static site generator for building websites and blogs. This command turns on the GitInfo feature within a Hugo module. GitInfo automatically fetches and displays Git commit messages and other metadata as front matter in Hugo files, allowing version information to be included in the generated website. This can be helpful for keeping track of changes and maintaining documentation.'
        forceSyncStatic: |-
            [AI] `hugo mod --forceSyncStatic` is a command used in Hugo, a popular static site generator for building websites and applications. This command is used to force synchronization of static files between the local project and the remote dependency repository.

            When you add a new dependency to your Hugo project using `hugo mod add`, Hugo automatically downloads the required package into a `mod` directory as a submodule. However, sometimes the static files (like images or CSS/JS files) in these dependencies may not be synchronized with your local project. In such cases, you can use `--forceSyncStatic` to update the static files in your project to match the latest version in the dependency repository.

            Using this command will overwrite any existing static files with the same names in your project and replace them with the updated versions from the remote repository. This can be useful when working on a team, or when updating dependencies that have had changes to their static assets.
        gc: '[AI] `hugo mod --gc` is a command used with Hugo, a popular static site generator written in Go. The `--gc` (short for "garbage collect") flag instructs Hugo to perform a garbage collection operation on its module cache before building the website. This helps ensure that unused or no longer needed dependencies are removed from the cache, reducing file size and improving build performance.'
        i18n-warnings: '[AI] The `hugo mod --i18n-warnings` command is a feature in Hugo, a popular static site generator for building websites and applications. This command generates warnings when i18n (internationalization) data files are missing or have inconsistencies with respect to the content keys used in the site. It helps developers ensure their Hugo sites support multiple languages correctly and consistently. By using this command, potential issues can be identified early in the development process, avoiding potential problems when publishing the site for a multilingual audience.'
        ignoreCache: '[AI] `hugo mod --ignoreCache` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command is used to bypass Hugo''s built-in cache and reinstall all dependencies listed in the `go.mod` file from scratch. It is typically used when there are issues with corrupted or outdated caches that prevent new dependencies from being installed correctly.'
        layoutDir: '[AI] `hugo mod --layoutDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command is utilized to set or get the layout directory used by Hugo for rendering templates. When you use `--layoutDir <path>` to set this value, you are specifying the custom path to the layout directory containing HTML template files that define the structure and appearance of your site''s components such as headers, footers, and single post pages. By default, Hugo looks for the layouts directory under the ''content/theme'' folder but this command allows you to use a different location if needed.'
        minify: '[AI] `hugo mod --minify` is a command used with Hugo, a popular static site generator for creating blogs and websites. This command is used to build and optimize the dependencies of a Hugo project by minifying them. Minification is the process of removing unnecessary characters (such as whitespace or comments) from code files to reduce their size, improving website loading speed. By using `hugo mod --minify`, you can ensure that your production site is as lean and efficient as possible.'
        noChmod: '[AI] `hugo mod --noChmod` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command disables file mode (chmod) adjustments during the installation or updating of dependencies within a Hugo module. By using this option, you maintain the existing file permissions, which can be useful if you manage your project''s file permissions manually.'
        noTimes: '[AI] `hugo mod --noTimes` is a command used in Hugo, a popular static site generator for creating blogs and websites. This specific command disables the recording of build timestamps when saving or applying modifications to a Hugo project''s dependencies or modules. By using this flag, you can prevent the build timestamps from being updated each time you save changes, which might be desirable if you prefer manual control over your version history or if you are working on an environment with inconsistent clock settings.'
        path-warnings: '[AI] The `hugo mod --path-warnings` command is used in Hugo, a popular static site generator for creating blogs and websites. This command displays warnings about potential issues with the import paths of external modules (packages) used within a Hugo project. By running this command, developers can identify and address any issues related to inconsistent or absolute import paths, helping ensure that their projects remain maintainable and up-to-date.'
        poll: '[AI] `hugo mod --poll` is a command used in Hugo, a popular static site generator for building websites and blogs. This command triggers a polling mechanism for the Go module dependency management system called "vgo" that Hugo uses. By running this command, Hugo will check for any available updates or new dependencies in the configured Go modules (specified in `go.mod` file), and apply them to your Hugo project if found. This helps keep your project up-to-date with the latest dependencies and can enhance the functionality of your site.'
        print-mem: '[AI] `hugo mod --print-mem` is a command used with Hugo, a popular static site generator written in Go. This command displays the memory usage of the Go modules (dependencies) in your Hugo project. It helps developers understand the memory footprint of their project''s dependencies and ensure they are within system limitations.'
        profile-cpu: '[AI] The `hugo mod --profile-cpu` command is used in Hugo, a popular static site generator for creating blogs and websites. This specific command profiles the CPU usage of Hugo while building or serving a website. It gathers detailed statistics about the computing resources required during the build process to help identify performance bottlenecks and optimize the workflow.'
        profile-mem: '[AI] `hugo mod --profile-mem` is a command used with Hugo, a popular static site generator written in Go. This command profiles the memory usage of all dependencies during a build process. The output provides detailed information about the memory consumed by each module during the execution of the command. This can be helpful for identifying and managing memory usage issues within your project''s dependency tree.'
        profile-mutex: '[AI] The `hugo mod --profile-mutex` command is a Hugo module management feature that ensures only one profile can be active at a time in a given Hugo site. It helps prevent conflicts and inconsistencies when multiple profiles with overlapping dependencies are used. When you run `--profile-mutex`, the system sets a lock file indicating which profile is currently active, preventing other profiles from being activated until the current one is deactivated or deleted.'
        templateMetrics: '[AI] `hugo mod --templateMetrics` is a command used in Hugo, a popular static site generator for building websites and blogs. This command generates metrics about the usage of third-party modules within a Hugo project''s `go.mod` file. The output includes details such as the name of each module, its version, and the number of imports it has within the project. Using this information, developers can identify potential dependencies they might want to update or remove for optimization purposes.'
        templateMetricsHints: '[AI] `hugo mod --templateMetricsHints` is a command used in Hugo, a popular static site generator for building websites and blogs. This command generates metrics hints for themes or modules, which are used to provide suggestions for optimizing template performance. The output includes information on functions calls, template parse time, and other factors affecting the template execution speed. These hints can be helpful for identifying bottlenecks and improving template efficiency in Hugo projects.'
        theme: '[AI] `hugo mod --theme` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command is utilized to install or update a specific theme from the Hugo Mod repository into your Hugo project. By using this command, you can easily manage dependencies of your Hugo project without having to manually download and import themes. It simplifies the process of keeping your project up-to-date with the latest theme features.'
        trace: '[AI] `hugo mod --trace` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command is utilized to display detailed tracing information while executing Go modules actions such as install, update, or check for dependencies. By using this command, you can gain insights into the exact sequence of module resolution and dependency downloads, which can be helpful in troubleshooting build issues related to dependencies.'
