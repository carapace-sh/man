# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: jar
description: create an archive for classes and resources
flags:
    --hash-modules=: Compute and record the hashes of modules matched by the given pattern
    --help-extra: Give help on extra options
    --help:compat: 'Show compat help '
    --module-version=: The module version
    --release=: Places all following files in a versioned directory of the jar
    --validate: Validate the contents of the jar archive
    --version: Print program version
    -?: Show help
    -0, --no-compress: Store only; use no ZIP compression
    -C=: Change to the specified directory and include the following file
    -M, --no-manifest: Do not create a manifest file for the entries
    -c, --create: Create the archive
    -d, --describe-module: Print the module descriptor, or automatic module name
    -e, --main-class=: The application entry point for stand-alone applications
    -f, --file=: The archive file name
    -h, --help: 'Show help '
    -i, --generate-index=: Generate index information for the specified jar archives
    -m, --manifest=: Include the manifest information from the given manifest file
    -p, --module-path: Location of module dependence for generating the hash
    -t, --list: List the table of contents for the archive
    -u, --update: Update an existing jar archive
    -v, --verbose: Generate verbose output on standard output
    -x, --extract: Extract named (or all) files from the archive
documentation:
    command: '[AI] The `jar` command is a utility in Java programming used for creating, updating, and extracting files from Java Archive (JAR) packages. It bundles one or more Java classes, libraries, manifests, and other metadata into a single JAR file for easy distribution and deployment. For example, `jar cf myapp.jar .` creates a new JAR file named "myapp.jar" with the current directory''s contents. Other common options include adding (-c) or updating (-u) existing entries in the JAR file.'
    flag:
        '?': '[AI] The `jar` command in Java is used to manage Java Archive (JAR) files. The option `-?` or `--help` is a common command-line argument used across various utilities and applications, including `jar`, to display detailed help information about the command''s usage and available options. In this context, running `jar -?` will show you the different Jar-related tasks you can perform using the `jar` utility along with brief descriptions for each option.'
        C: '[AI] The `-C` option used with the `jar` command in Java is for creating a new directory structure within the JAR file being built. It specifies a new sub-directory inside the JAR file, and all files and directories listed on the command line will be packed into that sub-directory before being added to the JAR archive. For example, `jar -cvf myarchive.jar -C mydir/ .` would create a new directory named "mydir" within the JAR file "myarchive.jar", and all files and directories under "mydir" would be packed inside it.'
        create: '[AI] `jar --create` is a command used in Java programming language for creating a new Java Archive (JAR) file. This command takes various options to specify the JAR file name, input files or directories to be included, and other metadata such as the manifest file. For example, `jar cfmyjarfile.jar MyClass1.java MyClass2.java` creates a new JAR named "myjarfile.jar" with the Java classes "MyClass1.java" and "MyClass2.java" included. The ''c'' flag indicates that the command is used for creating a new JAR file, while ''f'' specifies the name of the output file.'
        describe-module: '[AI] `jar --describe-module` is a command used in Java to provide detailed information about a JAR file or a Java Module of Reexports. When executed, it displays metadata such as the module name, version, provider, and exports of the specified JAR file or module. This can be helpful for understanding the dependencies and functionality within a Java project.'
        extract: |-
            [AI] `jar --extract` is a command used with Java Archive (JAR) files in Java programming language. It is used to extract specific files from a JAR archive into the current directory or a specified destination. The general syntax is:

            `jar --extract <archive-name.jar> <file-path-in-archive> [destination]`

            This command takes three arguments:
            1. `<archive-name.jar>`: The name of the JAR file that contains the desired files to extract.
            2. `<file-path-in-archive>`: The relative or absolute path inside the archive for the file(s) you want to extract.
            3. `[destination]` (optional): The directory where you want to extract the file(s), defaulting to the current working directory.

            For example, if you have a JAR file named "example.jar" and you want to extract the file "com/example/DemoClass.class" into the directory "/tmp", you would use:

            `jar --extract example.jar com/example/DemoClass.class /tmp`
        file: |-
            [AI] The `--file` option used with the `jar` command in Java is used to create or build a Java Archive (JAR) file from one or more specified Java class files and associated metadata (such as manifest files). The JAR file can later be used for distributing Java applications, applets, and libraries.

            Here's an example of using `jar --file`:
            ```
            jar --create --file myapp.jar MyClass.class AnotherClass.class
            ```
            This command creates a new JAR file named "myapp.jar" and adds the class files "MyClass.class" and "AnotherClass.class" to it.
        generate-index: '[AI] The `--generate-index` option is a command-line argument for Apache Maven''s `jar` goal. It generates an index file named `MANIFEST.MF` inside the JAR file containing a table of contents (TOC) of the packaged artifact. This TOC includes a list of all entries in the JAR with their size and timestamps, which can be useful for indexing or caching purposes when deploying the JAR to repositories or servers.'
        hash-modules: '[AI] The `--hash-modules` option is a feature of Apache Maven and Gradle, build automation tools used in Java development. It generates a hash value for each module in a multi-module project, allowing for efficient and reliable detection of changes to those modules during the build process. When executed with the `jar` command, it computes and prints out the hashes of all JAR files produced by the build. This helps ensure reproducibility and integrity of the built artifacts.'
        help: '[AI] `jar --help` is a command used in Java programming language to display help information about the jar (Java Archive) utility. When executed, it shows a detailed description of various jar options and arguments that can be used for creating, extracting, or manipulating Java archives. The output includes usage instructions, a list of available options with their descriptions, and examples. It''s useful when you need to understand how to use the jar command effectively.'
        help-extra: |-
            [AI] The `--help-extra` option is not a standard flag for the Java Archive (JAR) utility, which is a tool used for creating and manipulating JAR files in Java development. It seems there might be some confusion with other command-line tools or specific implementations of the JAR utility that may include an `--help-extra` option.

            If you meant to ask about other options available with the JAR utility, here are some common ones:

            1. `--create` or `-c`: Creates a new JAR file from the given files and directories.
            2. `--archive` or `-a`: Adds the given files and directories to an existing JAR archive.
            3. `--export` or `-e`: Exports one or more classes or resources from a JAR file into the file system.
            4. `--file` or `-f`: Specifies the name of the JAR file to create or manipulate.
            5. `--help` or `-h`: Displays a list of available options and usage information for the JAR utility.
        help:compat: '[AI] The `--help:compat` option in the Java Archive (JAR) command is used to display information about compatibility between different versions of the JAR file format and the Java Development Kit (JDK) or Java Runtime Environment (JRE) being used. This option helps developers ensure that their applications will run correctly on various Java platforms by checking if the JAR files they are using are compatible with the specific JDK or JRE version they plan to deploy on.'
        list: '[AI] `jar --list` is a command used with Java Archive (JAR) files in Java platform. It''s used to list the contents of a JAR file, including the names and sizes of the files inside it. The output can be redirected to a file or displayed on the terminal. For example: `jar --list myjarfile.jar > filelist.txt` will create a text file named "filelist.txt" with the list of contents in the JAR file.'
        main-class: '[AI] The `--main-class` option in the `jar` command is used when creating or building a Java Archive (JAR) file for execution. It specifies the fully qualified name of the main class that contains the `main()` method, which is the entry point of the Java application. When running the JAR file, this class will be instantiated and its `main()` method will be invoked to start the application.'
        manifest: '[AI] The `jar --manifest` command is a utility in Java used to generate or verify the manifest file of a JAR (Java Archive) package. A manifest file is an optional text document within a JAR archive that provides metadata about the packaged contents, such as the main class and version information. The `--manifest` option with the `jar` command can be used to create or update this file when building a JAR package. For verification, it can be employed with the `--file` option followed by the name of the manifest file, to check if the JAR archive''s contents match what''s declared in the manifest.'
        module-path: '[AI] `--module-path` is an option used with the Java Archive (JAR) command in Java development. It specifies a list of directories containing modules that should be made available to the JVM for usage when running a Java application or module from the specified JAR file. This flag promotes modular programming by allowing dependencies to be organized into separate, loadable modules.'
        module-version: '[AI] The `--module-version` option in the Java Archive (JAR) command is used to specify the version number of a JAR file''s module. A JAR file can be treated as an OSGi bundle or a Java 9+ module, and having an explicit version helps in managing dependencies between modules. When you build or publish your module using the Maven or Gradle build tools, they automatically include this information in the generated manifest file of the JAR. To check the version number of a specific module within a multi-module JAR file, you can use the `--describe-module` flag along with `--find-modules` and provide the fully qualified name (FQN) of the module. The output will include the module''s version information.'
        no-compress: '[AI] The `--no-compress` option used with the Java Archive (JAR) build tool''s `jar` command instructs it not to compress the output JAR file during the creation process. This results in a non-compressed JAR file, which may be useful when dealing with large files or specific use cases, such as debugging or working with IDEs that have issues with compressed JAR files. In general, this flag is used to customize the jar command output and save some processing time if compression isn''t required.'
        no-manifest: '[AI] `jar --no-manifest` is a command used with the Java Archive (JAR) utility to create or update a JAR file without including or creating a manifest file. A manifest file in a JAR contains metadata about the packages and resources inside, such as their entries'' names and versions. Using `--no-manifest` skips this step, allowing for more control over the specific contents added to the archive.'
        release: '[AI] The `--release` option in the `jar` command from Apache Maven or Apache Ant is used to create a production-ready JAR file, also known as an "uber jar." This means that the JAR file contains not only the application code but also its dependencies. The dependencies are included in the same JAR file, making it easier for deployment and execution in various environments without having to manage multiple libraries separately. This feature helps reduce the complexity of the classpath, ensuring consistent runtime configurations.'
        update: '[AI] The `--update` option used with the `jar` command in Java is utilized for updating an existing JAR file without changing its manifest file. It appends the new files to the JAR archive while keeping the original structure and metadata intact. This is often used when adding new classes or resources to an existing project without modifying the existing manifest file.'
        validate: '[AI] `jar --validate` is a command used with Java Archive (JAR) files in Java Development Kit (JDK). This command checks the integrity of JAR files by computing and verifying their Message Digital Signatures (MDS) or the Application Timestamps (APT). The flag ensures that the contents of the JAR file haven''t been tampered with, providing an extra layer of security. If the JAR file is valid, `jar --validate` will print a message confirming its authenticity.'
        verbose: '[AI] `jar --verbose` is a command-line option used with the Java Archive (JAR) utility. It instructs the JAR tool to print detailed information about the build process while creating or updating a JAR file, including the names of each file being added and the JAR entry they correspond to. This can be helpful for debugging and understanding the contents of a JAR file.'
        version: '[AI] The `jar --version` command is used to check the version of the Java Archive (JAR) tool that is installed in your Java Development Kit (JDK). This command displays the version number and a brief description or help message about the JAR utility. It''s essential for Java developers who need to manage their JAR files, build Java applications, and ensure they have the correct version of the tool for their projects.'
