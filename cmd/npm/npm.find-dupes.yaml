# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: find-dupes
description: Find duplication in the package tree
flags:
    --bin-links: create symlinks
    --fund: Display funding message
    --global-style: Use global layout
    --ignore-scripts: Disable scripts
    --legacy-bundling: Use legacy bundling
    --omit*=: omit dependency type
    --package-lock: When false ignore package.lock
    --strict-peer-deps: Fail and abort for any conflicting `peerDependencies`
    --workspaces: Enable running a command in the context fo all workspaces
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm find-dupes` is a command used in Node.js projects to identify and list packages with duplicate dependencies in the `node_modules` folder. It helps to keep your project lean by avoiding unnecessary duplications, reducing potential conflicts, and improving overall performance. To use it, simply run `npm find-dupes` in your terminal inside your project directory.'
    flag:
        bin-links: |-
            [AI] `npm find-dupes --bin-links` is a command used in Node.js package management with npm (Node Package Manager). This command helps identify and report duplicate packages with binary links in the project's dependencies tree.

            Binary links refer to symlinked packages where multiple packages have the same underlying dependency. The `--bin-links` flag makes `find-dupes` consider these as duplicates, ensuring a consistent and clean package setup within a Node.js project.
        fund: |-
            [AI] `npm find-dupes` is a command-line tool provided by npm (Node Package Manager). The `--fund` flag stands for "fundinteractive", which is an interactive mode for this command.

            The purpose of using `npm find-dupes --fund` is to help identify and manage duplicate dependencies in your Node.js project. When you run this command with the `--fund` flag, it will display a list of duplicate packages one at a time and ask for confirmation before removing them. This way, you can carefully review each duplicated package before deciding whether to delete it or keep it, preventing potential unintended consequences.
        global-style: '[AI] `npm find-dupes` is a command-line tool provided by Node Package Manager (npm) to help identify duplicate packages with identical version numbers in the global and local installation of npm. The `--global-style` flag is an optional argument that modifies the output format for global packages only, making it easier to distinguish between duplicates installed globally versus those installed locally. When using this flag, the output will display a clear distinction between global and local duplicate packages for efficient management of your npm environment.'
        ignore-scripts: '[AI] `npm find-dupes` is a command provided by npm (Node Package Manager) that helps identify duplicate packages in your project''s package.json or node_modules directory. The `--ignore-scripts` flag is an optional argument that instructs the command to exclude scripts from consideration when looking for duplicates. This means that packages with identical scripts but different dependencies will not be flagged as dupes by this command. The primary goal of using `--ignore-scripts` is to narrow down the search and focus on duplicate packages based on their dependencies rather than their scripts.'
        legacy-bundling: '[AI] `npm find-dupes` is a command used in Node.js projects to identify duplicate packages in the `node_modules` directory and their dependencies, which can help save disk space and avoid version conflicts. The `--legacy-bundling` flag is an optional argument that tells npm to use the deprecated bundling mode for resolving dependencies. This flag was used before npm v5.2.0, when bundle size analysis and tree shaking were not available by default. Using this flag may lead to less efficient dependency resolution and larger bundle sizes in modern projects, but it can still be useful in some legacy environments or for specific use cases.'
        omit: '[AI] The command `npm find-dupes --omit` is used with npm (Node Package Manager) to identify and list duplicate packages in a project''s node_modules directory without installing or modifying anything. The `--omit` flag instructs `find-dupes` to exclude the default omitted packages from the output, such as `lodash`, `react`, and `react-dom`. This can help reduce the noise in the output, focusing only on truly duplicate packages.'
        package-lock: '[AI] `npm find-dupes --package-lock` is a command used in Node.js package management with npm (Node Package Manager). This command searches for duplicate packages in the `package-lock.json` file, which is automatically generated when installing dependencies with npm. By running `npm find-dupes --package-lock`, you can identify and eliminate unnecessary duplication of packages and their versions in your project''s dependency tree, leading to a more streamlined and efficient package configuration.'
        strict-peer-deps: '[AI] `npm find-dupes --strict-peer-dependencies` is a command used in Node.js package management with npm. It searches for duplicate direct dependencies and optional devDependencies in the project''s package.json file. The `--strict-peer-dependencies` option ensures that only exact peer dependencies are reported as duplicates, rather than allowing different versions of the same dependency to be listed as both a peer dependency and a normal dependency. This can help maintain consistent dependencies across projects and avoid potential version conflicts.'
        workspace: '[AI] `npm find-dupes --workspace` is a command used in Node.js projects managed with npm (Node Package Manager). It searches for duplicate packages across the whole workspace, which means it looks into all packages in a multi-package project and their dependencies to identify any package duplications. The result will display the packages that have identical versions installed in different parts of the project. This command helps maintain a cleaner and more efficient dependency tree in larger Node.js projects.'
        workspaces: |-
            [AI] The `npm find-dupes --workspaces` command is a utility provided by npm (Node Package Manager) to help identify and list duplicate packages across multiple packages in a single Node.js project with a workspace architecture. Workspaces is a feature of npm 5.2.0 or higher that enables managing multiple related packages as a single project.

            When you run `npm find-dupes --workspaces`, it searches recursively through the entire workspaces tree and returns a list of duplicate packages in your projects, including their versions and locations. The goal is to help manage dependencies efficiently by reducing redundancy and potential version conflicts.
