# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: debug
description: Compile and begin debugging main package in current directory, or the package specified.
flags:
    --continue: Continue the debugged process on start.
    --output=: Output path for the binary.
    --tty=: TTY to use for the target program
documentation:
    command: '[AI] `dlv debug` is a command for the Delve debugger (dlv), which is used for debugging Go programs during development. It starts the delve debugger and attaches it to the running Go process identified by its process ID or name. The debugger provides various features such as setting breakpoints, inspecting variables, and stepping through code to help developers diagnose issues in their Go applications.'
    flag:
        continue: '[AI] `dlv debug --continue` is a command used with the Delve (dlv) debugger in Go programming language. It continues executing the program being debugged from the current breakpoint. When you reach a breakpoint in your Go code using other debugging commands, such as `dlv debug <pid>`, and then type `continue` or use the shorthand `c` in the Delve REPL, it will continue the execution of the program until it hits the next breakpoint. If there are no more breakpoints set, the program will run to completion.'
        output: '[AI] `dlv debug` is a command-line tool for Delve debugger, used to attach to running Go processes for debugging. The `--output` flag specifies where to write the output of delve''s verbose logging. It can be set to `stdio`, `tcp`, or a file path. When set to a file path, the log output is written to that file instead of the standard output. This can be helpful when debugging in automated environments or for later analysis.'
        tty: '[AI] `dlv debug` is a command-line tool from the Delve debugger project used for debugging Go programs. The `--tty` flag is an optional argument that specifies Delve should open a TTY (Text Teletype) connection for interactive debugging. It allows the user to interactively control the debugger, examine variables, set breakpoints, and step through code in real-time. Without this flag, Delve may run in detached mode or attach silently without an interactive console.'
