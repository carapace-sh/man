# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: publish
description: Upload a package to the registry
group: publishing
flags:
    --all-features: Activate all available features
    --allow-dirty: Allow dirty working directories to be packaged
    --dry-run: Perform all checks without uploading
    --index=: Registry index URL to upload the package to
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-verify: Don't verify the contents by building them
    --registry=: Registry to publish to
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --token=: Token to use when uploading
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package=: Package to publish
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo publish` is a command used in Rust programming language''s package manager, Cargo. It builds and publishes a crate (Rust library or binary) to the crates.io registry, making it publicly available for other developers to use as a dependency in their projects.'
    flag:
        all-features: '[AI] `cargo publish --all-features` is a command used in Rust programming language''s build system, Cargo. This command publishes all features of a crate (Rust library or executable) to the Crates.io registry, making them publicly available for other developers to use in their projects. When you run `cargo publish`, by default it only publishes the default (enabled) features. To publish all features including those that are optional or disabled, use the `--all-features` flag.'
        allow-dirty: |-
            [AI] `cargo publish` is a command-line tool used in Rust programming language for releasing crates (reusable libraries or binaries) to the crates.io registry. The `--allow-dirty` flag modifies the publishing behavior.

            When you run `cargo publish`, it by default checks that your local git repository is clean, meaning no uncommitted changes. If there are changes, it refuses to publish, asking you to commit or stash them first. This ensures consistent and stable releases.

            However, the `--allow-dirty` flag overrides this behavior, allowing you to publish even if your repository has uncommitted changes. It's important to note that using this flag might lead to inconsistent or unstable releases, so it should be used with caution.
        dry-run: '[AI] `cargo publish --dry-run` is a command used in Rust programming language''s Cargo build tool. It simulates publishing a crate (Rust library or executable) to the crates.io registry without actually doing it. This can be useful for testing your package metadata and permissions before running `cargo publish` in a production environment. The `--dry-run` flag provides feedback about what would happen if you ran the command without actually executing the publication.'
        features: '[AI] `cargo publish --features` is a command used in Rust programming language''s build system, Cargo. It publishes a crate (Rust library or binary) to the crates.io registry. The `--features` flag specifies one or more features of the crate that will be enabled for downstream projects using the published crate as a dependency. These features can add additional functionality, configure build settings, or impact the API surface area. When a project depends on the published crate, it can opt to enable specific features during its build process by including them in its `Cargo.toml` file under the `features` key.'
        help: |-
            [AI] `cargo publish` is a command-line tool used in Rust programming language for publishing crates (reusable libraries or packages) to the crates.io registry. The `--help` option provides detailed information about how to use this command. Here's a brief summary:

            When you run `cargo publish --help`, you get an output explaining that the command publishes your crate to the registry, and it accepts various options for controlling the publishing process. These include specifying a Git tag for the crate version, setting authentication credentials, enabling or disabling gzip compression, and more. Additionally, it provides usage examples with valid flags. For instance:

            ```sh
            $ cargo publish --version <TAG> --registry <REGISTRY>
            ```

            This command publishes the crate with the given version tag to the specified registry.
        index: '[AI] The `cargo publish` command with the `--index` flag is used in Rust programming language''s package manager, Cargo. This flag instructs Cargo to not only build and publish your crate (Rust library or binary), but also index it with crates.io, the default registry for Cargo. The indexing process makes the published crate discoverable and downloadable for other Rust projects using `add` or `dependencies` in their Cargo.toml file.'
        jobs: '[AI] `cargo publish --jobs` is a command used in Rust programming language''s build system, Cargo. It publishes one or more crates (Rust libraries or binaries) to the Crates.io registry. The `--jobs` flag specifies the number of parallel background jobs to use during the publish process for increased efficiency. By default, it uses one job.'
        keep-going: '[AI] `cargo publish --keep-going` is a command used in Rust programming language''s package manager, Cargo. This command publishes a new version of a Crate (Rust library or executable) to the crates.io registry. The `--keep-going` flag enables automatic continuation of the publish process after encountering transitive dependencies that fail to build or publish, without halting the entire operation. Essentially, it helps maintain the integrity and availability of your project''s dependencies while publishing updates.'
        manifest-path: '[AI] `cargo publish` is a command in Rust programming language''s package manager, Cargo. It is used to build and publish a Crate (Rust library or executable) to the crates.io registry. The `--manifest-path` flag specifies an alternative manifest file path instead of using the default one located in the project root. This can be useful when working on multiple projects with separate Cargo.toml files within the same directory.'
        no-default-features: '[AI] `cargo publish` is a command used in Rust programming language to build and distribute crates (reusable libraries or binaries) via the crates.io registry. The `--no-default-features` flag disables the publishing of default features for the crate. Default features are optional parts of the library that get included by default when a dependency is added without specifying which features to include. By using `--no-default-features`, you explicitly control which features will be published and can avoid unintended consequences of having default features enabled during distribution.'
        no-verify: '[AI] `cargo publish --no-verify` is a command used in Rust programming language''s package manager, Cargo. It is used to publish a local crate (Rust library or binary) to the crates.io registry. The `--no-verify` flag disables the verification process before publishing. This means that the code will be published without being checked against known good versions by Cargo or the crates.io server. Using this flag can potentially introduce security vulnerabilities, so it is recommended to only use it for trusted projects and in controlled environments.'
        package: '[AI] `cargo publish` is a command used in Rust programming language''s build system, Cargo. This command publishes a local package to the crates.io registry, making it publicly accessible for other projects to use as a dependency. The `--package` option specifies the name of the package to be published.'
        quiet: '[AI] `cargo publish --quiet` is a command used in Rust programming language''s build system, Cargo. It publishes a package to the crates.io registry. The `--quiet` flag suppresses progress updates during the publishing process, making it run with minimal output or noise. This command is typically used for automated builds and continuous integration environments where verbosity is not desired.'
        registry: '[AI] `cargo publish` is a command-line tool in Rust programming language used for publishing packages to the Crate Registry, which is the default registry maintained by Rust. The `--registry` flag is optional and specifies the registry URL when publishing to a custom registry instead of the default one. With this flag, you can publish your Rust package to a specific registry, making it available for other developers to use in their projects.'
        target: '[AI] `cargo publish --target` is a command used in Rust programming language''s build system, Cargo. This command publishes a specific target of a Cargo project to crates.io registry for sharing and use by others in the Rust community. The `--target` flag specifies which target (e.g., library or binary) should be published. By default, it publishes all targets defined in the project''s `Cargo.toml` file.'
        target-dir: '[AI] The `cargo publish` command is a Cargo sub-command used to publish a Crate (Rust library or executable) to the crates.io registry. The `--target-dir` option specifies the local directory where the build artifacts are located before publishing. In other words, it indicates where Cargo should look for the output of a previous build command before attempting to publish the Crate. This is particularly useful when using custom builds or build systems that do not produce artifacts in the default `target` directory.'
        token: '[AI] `cargo publish --token` is a command used in Rust programming language''s build system, Cargo. This command publishes a Crate (Rust library or executable) to the crates.io registry. The `--token` option specifies a personal access token for authentication purposes, allowing you to publish packages privately or make updates to previously published packages without having to provide your username and password each time. This command pushes the source code and metadata of the Crate to the registry.'
