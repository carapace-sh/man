# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pack-objects
description: Create a packed archive of objects
group: low-level manipulator
flags:
    --all: include objects reachable from any reference
    --all-progress: show progress meter during object writing phase
    --all-progress-implied: similar to --all-progress when progress meter is shown
    --compression=: pack compression level
    --delta-base-offset: use OFS_DELTA objects
    --delta-islands: respect islands during delta compression
    --depth=: maximum length of delta chain allowed in the resulting pack
    --exclude-promisor-objects: do not pack objects in promisor packfiles
    --filter=: object filtering
    --honor-pack-keep: ignore packs that have companion .keep file
    --include-tag: include tag objects that refer to objects to be packed
    --incremental: ignore packed objects
    --index-version=: write the pack index file in the specified idx format version
    --indexed-objects: include objects referred to by the index
    --keep-pack=: ignore this pack
    --keep-true-parents: do not hide commits by grafts
    --keep-unreachable: keep unreachable objects
    --local: ignore borrowed objects from alternate object store
    --max-pack-size=: maximum size of each output pack file
    --missing=: handling for missing objects
    --non-empty: do not create an empty pack output
    --pack-loose-unreachable: pack loose unreachable objects
    --progress: show progress meter
    --reflog: include objects referred by reflog entries
    --reuse-delta: reuse existing deltas
    --reuse-object: reuse existing objects
    --revs: read revision arguments from standard input
    --shallow: create packs suitable for shallow fetches
    --sparse: use the sparse reachability algorithm
    --stdout: output pack to stdout
    --thin: create thin packs
    --threads=: use threads when searching for best delta matches
    --unpack-unreachable=: unpack unreachable objects newer than <time>
    --unpacked: limit the objects to those that are not yet packed
    --use-bitmap-index: use a bitmap index if available to speed up counting objects
    --window-memory=: limit pack window by memory in addition to object limit
    --window=: limit pack window by objects
    --write-bitmap-index: write a bitmap index together with the pack index
    -q, --quiet: do not show progress meter
documentation:
    command: '[AI] `git pack-objects` is a Git command used to create and update Git''s packed objects, which are local, compacted, indexed representations of Git objects. It improves Git performance by reducing network traffic and I/O operations during cloning, pulling or pushing repositories. The command reads one or more files containing Git objects, and writes the packed objects to disk in .git/objects/pack directory. By default, it also creates a corresponding index file, which keeps track of the offsets within the pack file for efficient access.'
    flag:
        all: '[AI] `git pack-objects --all` is a Git command used for packing and storing objects in a more efficient, compact format called a git-packet-file or a packfile. The `--all` option instructs Git to pack all reachable objects, including loose objects and those in other local and remote repositories connected via refs. This operation results in a significant size reduction of the repository by creating a single large file for multiple objects, making it faster to transfer or clone the repository over a network.'
        all-progress: '[AI] `git pack-objects --all` is a Git command used to create and update packed Git objects in local storage, making them accessible for faster repository access. The `--all` option processes all refs in the repository, while the `--progress` flag displays progress messages during the packing process. This helps users monitor the progress of the operation without having to constantly check the status of their Git repository.'
        all-progress-implied: |-
            [AI] `git pack-objects --all` is a Git command used to create and update Git pack files. The `--all` option tells Git to process all refs in the local repository, meaning it will go through every branch and tag to find objects that need to be packed.

            The `--progress-implied` option enables progress information to be displayed during the operation. It does not require an explicit `--progress` flag to be passed as well, hence the name "implied". The progress messages help users keep track of what Git is doing while packing objects.
        compression: '[AI] The `git pack-objects --compression` command is used to create Git pack files, which are compressed archives of Git objects (commits, trees, and blobs). The `--compression` option specifies the compression method to use when creating these pack files. Git supports several compression methods, including "raw" (no compression), "lzma", "zlib", and "gzip". By default, Git uses "lzma" compression for pack files created over a network connection or when using the `git pack-objects` command with the `--standard-output` option. However, if you want to create local pack files with a specific compression method, you can use the `--compression` option to specify that method (e.g., `--compression=zlib` or `--compression=gzip`).'
        delta-base-offset: |-
            [AI] `git pack-objects --delta-base-offset` is a Git command used for object packing and optimization. When Git creates a new commit, it generates multiple objects: the tree object representing the file contents of the new commit, the parent commit object(s), and the delta objects representing the differences between the parent and child commits.

            The `--delta-base-offset` option is used when creating a new pack file from existing Git objects. It sets the offset for delta compression in the resulting pack file based on the base object being used for delta encoding. This allows multiple pack files to be combined efficiently, as they can share common base objects and only store the deltas relative to those bases. By optimizing storage in this way, `git pack-objects --delta-base-offset` improves Git repository efficiency, making it faster to transfer or clone large repositories.
        delta-islands: '[AI] `git pack-objects --delta-islands` is a Git command used for creating and processing Git pack files with delta-backed object storage. A Git pack file stores multiple objects as a single compressed archive, which can save disk space by using delta encoding for common objects. The `--delta-islands` option tells Git to write each delta object as a separate file instead of storing it as a part of another larger delta. This can be useful when working with large projects or low-memory environments, as it reduces the amount of memory required during the packing process.'
        depth: '[AI] `git pack-objects --depth` is a Git command used to create or update packed Git objects in local storage. The `--depth` option specifies the maximum compression depth for the packed objects, which can be set to either `full`, `shallow` (the default), or a specific number representing the number of generations back from the tip of the branch to pack. A shallower depth results in faster packet creation at the cost of larger storage requirements and slower cloning or fetching.'
        exclude-promisor-objects: '[AI] `git pack-objects` is a Git command used to create and update the packing area, which stores packed Git objects in a more efficient format for faster access. The `--exclude-promisor-objects` option instructs this command to exclude the creation or update of Packed Objects representing Promisory Notes. Promisory Notes are a relatively new feature introduced in Git 2.19 that enables offline creating and managing of lightweight tags, which do not require a full commit object. By excluding their objects, `git pack-objects` only processes regular commits, branches, and other standard Git objects.'
        filter: '[AI] The `git pack-objects --filter` command is used to create Git pack files, which are compacted and deduplicated representations of Git objects (commits, trees, tags, etc.). The `--filter` option allows specifying a filter to apply when packing the objects. This can be useful for customizing the object packing process, such as packing only specific types of objects or applying data compression algorithms. For example, you might use `--filter=lzma` to pack objects using the LZMA data compression algorithm, which can provide better compression ratios than the default `--filter=none`. Overall, this command helps optimize Git repository storage by reducing the amount of redundant data and improving data transfer efficiency.'
        honor-pack-keep: '[AI] `git pack-objects --honor-pack-keep` is a Git command used for efficient object storage and retrieval. It creates or updates the pack files, which are archives containing Git objects, by reading objects from the local database or other packs and writing them to new packs in a compact format. The `--honor-pack-keep` option instructs Git to keep existing pack files instead of overwriting them during this operation, preserving their content for future use.'
        include-tag: |-
            [AI] `git pack-objects --include-tag` is a Git command used to create or update Git packfiles. Packfiles are compressed archives that store Git objects (commits, trees, tags) efficiently, reducing the need for repeated access to the main repository.

            The `--include-tag` option instructs Git to include all annotated tags in the packfile being created or updated, in addition to the regular commits and trees. This is useful when transferring a Git history across networks, as it allows receiving not only the latest commit but also all the annotated tags.
        incremental: '[AI] `git pack-objects --incremental` is a Git command used to create a new Git packing object file with incremental updates, which are smaller than regular pack files. This command reads from standard input (usually piped from other Git commands) and writes the resulting pack file to the current directory. The "--incremental" option indicates that only delta-encoded objects should be written to the pack file, reducing storage requirements when the objects being packed have many similarities with existing packs.'
        index-version: '[AI] `git pack-objects --index-version` is a Git command used to create and pack immutable, compacted object files from existing loose objects in a local repository. The `--index-version` option specifies that the pack file should include the named index as a single pack entry, using the specified index version (v1 or v2). These packed objects are then more efficiently transferred over the network during clones and pushes, improving Git workflow performance.'
        indexed-objects: |-
            [AI] `git pack-objects --indexed-objects` is a Git command used to create or update the Git object database with packing and filtering of indexed objects.

            Indexed objects are Git objects that have a reference in the Git index or staging area, such as commits, trees, and blobs. This command creates or updates the pack files (`.pack` files) containing the indexed objects, making them more space-efficient by storing multiple related objects together.

            By specifying `--indexed-objects`, we're explicitly asking Git to pack only the indexed objects instead of all Git objects, which is generally faster and uses less disk space compared to packing all Git objects.
        keep-pack: '[AI] `git pack-objects --keep-pack` is a Git command used to create and update repository pack files. The `--keep-pack` option tells Git to keep the created pack file instead of deleting it after packing objects into it. This can be useful when dealing with large repositories or when transferring data between Git repositories, as it allows for more efficient data transfer and storage by reducing the number of individual objects that need to be transferred.'
        keep-true-parents: '[AI] `git pack-objects --keep-true-parents` is a Git command used to create and update packed Git objects in a repository. The `--keep-true-parents` option ensures that the parent commit hashes of each object are also saved as part of the packed object, maintaining the full commit history relationship. This helps reduce network traffic when cloning or pushing repositories over a slow connection, as it minimizes the need to transmit duplicate commits.'
        keep-unreachable: '[AI] `git pack-objects --keep-unreachable` is a Git command used to build and save pack files, which are compressed archives containing Git objects such as commits, trees, and blobs. The `--keep-unreachable` option instructs Git to keep unreachable objects in the pack file as well. Unreachable objects are those that don''t have any references pointing to them in the current repository but might still be needed for other repositories or future history commits. This command helps in reducing network traffic and disk space usage by minimizing the need to transfer or store redundant objects across multiple repositories.'
        local: '[AI] `git pack-objects --local` is a Git command used to create and save pack files locally. Pack files are an efficient data storage format in Git, as they combine multiple individual objects into a single file. By running this command with the `--local` option, you instruct Git to perform the packing process on objects that reside on the local file system, without contacting a remote repository. This can help reduce network traffic and improve performance when dealing with large or numerous repositories.'
        max-pack-size: '[AI] `git pack-objects --max-pack-size` is a Git command used to create Git pack files, which are compact binary representations of Git objects, such as commits and blobs. The `--max-pack-size` option sets the maximum size of each pack file. It helps in efficient storage and transfer of data between Git repositories by reducing the number of individual Git objects that need to be transferred. When multiple objects can be packed together to meet or undergo the specified size limit, Git will automatically do so, creating a single pack file instead of multiple smaller files.'
        missing: '[AI] `git pack-objects --missing` is a Git command used to find and pack unreachable objectIDs (hashes) that are missing in the local repository''s packed archive. These objects have references in the Git database but can''t be accessed through the normal Git commands since they don''t exist in the packed archive. The `--missing` flag instructs Git to only print the hashes of these unreachable objects. When you run this command, it outputs a list of objectIDs that need to be added to the packed archive for your repository to remain complete.'
        non-empty: '[AI] `git pack-objects --non-empty` is a Git command used to create and update Git pack files, which are compact, efficient data structures that store multiple Git objects in a single file. The `--non-empty` option ensures that only non-empty pack files (i.e., those containing Git objects) are created or updated during the operation. By optimizing storage, this command improves performance and reduces network traffic when cloning or transferring repositories between systems.'
        pack-loose-unreachable: |-
            [AI] `git pack-objects --pack-loose-unreachable` is a Git command used to remove unused, loose objects from the local Git repository.

            Loose objects in Git are individual files, while packed objects are stored as compressed archives. Over time, a Git repository can accumulate many loose objects that are no longer reachable due to deleted branches or commits.

            Running `git pack-objects --pack-loose-unreachable` will analyze the repository and identify any loose objects that are not referenced by any existing branch, tag, or commit. These unreachable loose objects will then be removed from the local file system, freeing up disk space without affecting the integrity of the repository.
        progress: '[AI] `git pack-objects --progress` is a Git command used to create and pack multiple Git objects into a single pack file. The `--progress` option displays progress messages as the packing process completes, allowing users to monitor the operation''s status in real-time. This command helps reduce network traffic when transferring objects between repositories by bundling them together in a more efficient manner.'
        quiet: '[AI] `git pack-objects --quiet` is a Git command used to create and pack multiple small Git objects into larger pack files for more efficient storage and transmission. The `--quiet` option silences informational messages during the packing process, making it useful when running Git commands in automated scripts or continuous integration environments where silence is preferred.'
        reflog: '[AI] `git pack-objects --reflog` is a Git command used to create or update the pack files that store compressed and pruned versions of objects in a local Git repository. The `--reflog` option tells Git to include the reflog data, which tracks changes to the tip of a branch or other reference. This allows you to recover deleted commits, among other things. The command generates one pack file per branch by default and writes them to the current directory.'
        reuse-delta: '[AI] `git pack-objects --reuse-delta` is a Git command used for efficient object storage. It builds and writes Git packed archives, reusing delta compressions when possible to save disk space. The `--reuse-delta` option instructs Git to use previously saved delta compressions instead of creating new ones if the input objects have not changed since they were last written to disk. This helps reduce the overall size of the Git repository by minimizing redundant data.'
        reuse-object: '[AI] `git pack-objects --reuse-object` is a Git command used to create pack files, which are compressed archives containing Git objects (commits, trees, and blobs). The `--reuse-object` option allows Git to reuse existing Git objects instead of creating new ones when packing. This can significantly reduce the disk space required for storing multiple packs with redundant objects. Essentially, this command optimizes the storage by minimizing duplicate object data across pack files.'
        revs: '[AI] `git pack-objects --revs` is a Git command used for efficient object storage and retrieval. When you run this command, Git packages and writes to a single file (a packed archive) all reachable objects based on the current tip of the branch, including their revisions, type information, and some additional metadata. This results in reduced disk space usage and faster access since objects are stored in a more compact format and retrieved in a single read operation instead of multiple individual requests.'
        shallow: '[AI] `git pack-objects --shallow` is a Git command used to create or update shallow packed objects in a local repository. Shallow packed objects store only the tip of the committed history, excluding the full history and branches. This command creates or updates these packed objects with a specific hash, making them faster to transfer or clone, as they contain only the necessary data for the current branch. It''s often used when working with large repositories over slower networks or when dealing with partial repository clones.'
        sparse: '[AI] `git pack-objects --sparse` is a Git command used to create pack files, which are compact data structures for storing Git objects efficiently, especially for large repositories. The `--sparse` option enables sparse-checkout support in the pack file, allowing for efficient transfer and storage of large or subsetted repositories over the network or between machines. This command generates a pack file with a single manifest tree object, multiple pack index objects, and numerous delta-encoded Git objects that reference the contents of your repository. Sparse checkout allows you to selectively exclude specific files or directories from being included in a Git repository without removing them entirely.'
        stdout: '[AI] `git pack-objects --stdout` is a Git command used to create and write Git object data directly to standard output stream instead of writing it into a file. The `--pack-objects` option tells Git to pack the objects (commits, trees, tags, etc.) into a single compressed pack file, and the `--stdout` option specifies that the resulting pack file should be written to the console rather than a file. This command is useful for creating Git archives or backups from the terminal without writing any files on the local machine.'
        thin: |-
            [AI] `git pack-objects --thin` is a Git command used for packing and thinning object files in a Git repository. Thinning reduces the disk space used by Git by storing only the differences between objects, instead of the full contents of each one.

            When you run this command, Git identifies and repacks all loose objects that share common ancestry into pack files. The `--thin` option tells Git to store these objects as delta-compressed (i.e., thin) pack files. This results in significant storage savings by storing only the differences between the objects instead of their full contents.
        threads: '[AI] `git pack-objects --threads` is a Git command used to create and pack multiple objects into a single file for efficient storage and transfer. The `--threads` option enables multi-threading, allowing Git to utilize multiple CPU cores or processes to speed up the packing process. This results in faster object creation and saves disk space by reducing the number of individual files required to store the objects.'
        unpack-unreachable: '[AI] `git pack-objects --unpack-unreachable` is a Git command used to unpack and remove unused, dangling objects from a Git repository''s pack files. These pack files are created when Git pushes or packs data for transfer or archival purposes. The command helps maintain the efficiency of a Git repository by removing unnecessary data, reducing the overall size of pack files and improving Git operations performance.'
        unpacked: '[AI] `git pack-objects --unpacked` is a Git command used for object deduplication and packing. It scans the local repository''s loose objects (individually stored files) and creates packfiles, which are compressed archives that contain git objects. The `--unpacked` option instructs the command to leave some objects unpacked as well. This can be useful when dealing with large repositories or when importing objects from another repository. By keeping some objects unpacked, it allows for faster access to those objects while still enjoying the benefits of object deduplication and storage efficiency that come with packing other objects.'
        use-bitmap-index: '[AI] `git pack-objects --use-bitmap-index` is a Git command used to create and update Git pack files, which store compressed objects in a repository. The `--use-bitmap-index` option tells Git to use a bitmap index instead of the regular index file for storing object references in the pack file. This results in faster packing and unpacking of objects, particularly in large repositories, since the bitmap index uses less space and allows for quicker access to object references.'
        window: '[AI] `git pack-objects --window` is a Git command used to create or update Git object pack files. These pack files store compressed Git objects (commits, trees, and blobs) that are not currently in the local repository''s main Git data structures (these objects might be part of old commits or large files). The `--window` option sets the number of windows used during the object packing process. Each window processes a range of objects, and having multiple windows allows Git to pack objects in parallel, improving the packing performance.'
        window-memory: '[AI] `git pack-objects --window-memory` is a Git command used to create and save often-used objects in a single pack file with a memory window. This window sets an upper limit on the amount of memory Git can use when creating the pack file. The command improves performance by reducing the number of times Git needs to read and write data from the disk during a Git operation. The `--window-memory` option specifies the maximum size of this memory window in megabytes.'
        write-bitmap-index: '[AI] `git pack-objects --write-bitmap-index` is a Git command used for efficient object storage and retrieval. The `--write-bitmap-index` option creates or updates a bitmap index file, which is a compact data structure that keeps track of the presence of pack files in the local repository. This allows Git to quickly determine if a needed pack exists without having to scan all packs every time. By reducing the number of disk accesses required, this command enhances the performance of Git operations.'
