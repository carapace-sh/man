# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install-ci-test
description: Install a project with a clean slate and run tests
flags:
    --ignore-scripts: do not run scripts specified in package.json
    --script-shell=: shell to use
documentation:
    command: |-
        [AI] The command `npm install-ci-test` is not a standard npm command. It seems like a custom command that combines two common npm commands: `npm install` and `npm run test`.

        `npm install` is used to download and install the specified dependencies listed in a package.json file. The `--save-dev` flag can be added to install dev dependencies.

        `npm run test`, on the other hand, runs tests defined in a test script in your package.json file, usually under the `scripts.test` key.

        So, if you've defined a custom script `"ci-test": "test"` in your package.json, then `npm install-ci-test` is an equivalent way of writing `npm install --save-dev <dependencies> && npm run ci-test`. It installs dependencies and runs tests in one go.
    flag:
        ignore-scripts: |-
            [AI] `npm install-ci-test --ignore-scripts` is a command used in Node.js projects managed with npm (Node Package Manager). This command does two things:

            1. It runs `npm install` to install or update the project dependencies mentioned in the package.json file.
            2. It also executes the continuous integration (CI) tests using the `npm run test` script defined in the package.json file, under the `scripts` key.

            However, the `--ignore-scripts` option is added to disable the execution of all npm scripts other than `test`, which allows the command to only install dependencies and run the CI tests. This can be useful when you want to perform a clean installation or when your CI system has its own testing framework that does not require running additional scripts during the test phase.
        script-shell: |-
            [AI] The command `npm install-ci-test --script-shell` is used in Node.js projects managed with npm (Node Package Manager). It runs the specified scripts located in a file named `ci-test.sh` or `ci-test.bat` under the `scripts` section of the `package.json` file inside a Unix/Linux shell environment or Windows Command Prompt, respectively.

            The primary purpose of this command is to execute automated tests and continuous integration processes during project development. The scripts contained in these files help ensure that the codebase remains stable and functional as new features are added or existing ones are modified. By invoking `npm run` with the `--script-shell` flag, you ensure that the specified scripts are executed within the correct shell environment for your operating system, allowing for cross-platform compatibility and consistency in your test runs.
