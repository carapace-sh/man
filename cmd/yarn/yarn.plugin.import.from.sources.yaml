# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: sources
description: Build a plugin from sources
flags:
    --branch=: The branch of the repository that should be cloned
    --no-minify: Build a plugin for development (debugging) - non-minified and non-mangled
    --path=: The path where the repository should be cloned to
    --repository=: The repository that should be cloned
    -f, --force: Always clone the repository instead of trying to fetch the latest commits--json   Format the output as an NDJSON stream
documentation:
    command: |-
        [AI] The `yarn plugin import` command is used to register custom Yarn plugins during the setup of a Yarn workspace. Instead of starting with `from`, it should be followed by `plugin` or `@types` keywords, indicating the type of package you are importing. For instance:

        ```bash
        yarn plugin import my-plugin --plugins-folder my-plugins
        ```

        or

        ```bash
        yarn plugin import @types/my-package --plugins-folder my-plugins
        ```

        The `from sources` part is not a valid argument for this command. If you intended to install plugins or packages from external sources, use the `add` or `install` commands instead:

        ```bash
        yarn add my-plugin
        ```

        or

        ```bash
        yarn install my-package
        ```
    flag:
        branch: '[AI] The command `yarn plugin import <plugin-name> from <source> --branch <branch-name>` is used with Yarn, a popular package manager for JavaScript projects. This command imports a specific Yarn plugin and installs it from an external source, such as a Git repository, instead of the npm registry. The `--branch` flag specifies which branch of the repository to use for the import. This can be useful when working with plugins under development or when needing a specific version that is not yet published.'
        force: '[AI] `yarn plugin import` is a command used in Yarn, a popular package manager for JavaScript projects. This command is used to install and import plugins as native modules within your project. The `--force` flag is an option that can be passed with this command to force the installation of a plugin even if it already exists in the project''s `node_modules` directory. In other words, it bypasses any potential conflicts or errors caused by having an existing version of the plugin and installs the latest or specified version instead.'
        no-minify: '[AI] The command `yarn plugin import <module> --no-minify` is used in Yarn, a package manager for JavaScript projects. This command imports and installs a custom TypeScript or JavaScript plugin as a devDependency. The `--no-minify` flag instructs the Yarn workspace not to apply any minification process during installation. In other words, it keeps the installed plugins in their original form with no code compression for easier debugging and understanding.'
        path: |-
            [AI] The `yarn plugin import` command is a feature provided by Yarn, a popular package manager for JavaScript projects. It allows you to import modules directly from source code files or custom directories, rather than installing them as npm packages.

            The `--path` option specifies the relative or absolute path to the source file or directory containing the module you want to import. For instance, if you have a custom module located at `./path/to/your/module`, you can use `yarn plugin import --path ./path/to/your/module`. This command will register the module in your project's dependency graph and make it available for import within your codebase using the standard ES6 syntax, e.g., `import MyModule from './path/to/your/module'`.
        repository: |-
            [AI] The `yarn add <package> --frozen --exact` command is used in Yarn, a popular package manager for JavaScript projects, to install a specific package version from a registry or local directory with the following flags:

            * `--frozen`: Prevents automatic updating of dependencies during installation.
            * `--exact`: Installs the exact specified package version instead of an auto-linked version.

            The command `yarn plugin import <pluginName> --repository <registryUrl>` is used to import a Yarn Plugin from a registry or local directory instead of installing it as a dependency. The `--repository` flag specifies the URL of the registry containing the plugin. Once imported, the plugin can be used in your Yarn workflow.
