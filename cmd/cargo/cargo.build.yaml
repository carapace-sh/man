# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
aliases:
    - b
description: Compile a local package and all of its dependencies
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Build all targets
    --bench*=: Build only the specified bench target
    --benches: Build all benches
    --bin*=: Build only the specified binary
    --bins: Build all binaries
    --build-plan: Output the build plan in JSON (unstable)
    --example*=: Build only the specified example
    --examples: Build all examples
    --exclude*=: Exclude packages from the build
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Build only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --out-dir=: Copy final artifacts to this directory (unstable)
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Build only the specified test target
    --tests: Build all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Build all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package to build (see `cargo help pkgid`)
    -q, --quiet: Do not print cargo log messages
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo build` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to compile and build your project, creating executables or libraries as defined in the project''s `Cargo.toml` file. The output can be found in the `target/` directory.'
    flag:
        all: '[AI] `cargo build --all` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to build all target binaries and libraries defined in the project''s `Cargo.toml` file. It performs various tasks such as compilation, linking, testing, documentation generation, etc., for each target in turn. The resulting artifacts are placed in the `target/` directory.'
        all-features: '[AI] `cargo build --all-features` is a command used in Rust programming language''s package manager, Cargo. It triggers the build system to compile and create executables or libraries for every feature defined in the project''s `Cargo.toml` file. In other words, it builds all possible combinations of features within your project. This command is useful when you want to ensure that every part of your codebase can be compiled before releasing or deploying your software.'
        all-targets: '[AI] `cargo build --all-targets` is a command used in Rust programming language''s Cargo build system. It builds and compiles every target (binary or library) defined in the project''s `Cargo.toml` file in one go. This command is useful when you want to build all the outputs of your project at once, such as testing, documentation generation, and creating binary executables for multiple platforms.'
        bench: |-
            [AI] `cargo build --bench` is a command used in Rust programming language's package manager, Cargo. This command performs two main tasks:

            1. It builds the project using the current source code and Cargo.toml configuration file. The result is an artifact or executable created under the `target` directory.
            2. It also generates benchmarks for the crate (library or binary) by running tests labeled as benchmarks. The generated benchmark results are displayed in the terminal to help measure the performance of Rust code.
        benches: '[AI] `cargo build --benches` is a command used in Rust programming language''s Cargo build system. It instructs Cargo to compile the project, including any benchmark tests defined in the project''s `Cargo.toml`. The `--benches` flag specifically tells Cargo to run those benchmarks after compilation, providing metrics on the performance of the code.'
        bin: '[AI] `cargo build --bin` is a command used in Rust programming language''s Cargo build tool. It instructs Cargo to build a project into an executable binary using the default target (often `x86_64-unknown-linux-gnu`). The `--bin` flag specifies that only the main binary target should be built, instead of all targets within the project. This results in producing just one output file which is the compiled and linked binary executable ready to run.'
        bins: '[AI] `cargo build --bins` is a command used in Rust programming language''s package manager, Cargo. It builds all targets in the current project using the default configuration and creates installable binaries for each target under the `target/install` directory. These binaries can then be easily distributed or used by other projects as dependencies.'
        build-plan: '[AI] `cargo build --build-plan` is a command used in Rust programming language''s Cargo build tool. It generates a build plan, which is a data structure containing all the tasks needed to compile and build your project, along with their dependencies and the order they should be executed. This information can then be used by other Cargo features like `cargo plan` or `cargo out-of-tree` for advanced use cases like offline builds, parallelism control, or customizing the build process.'
        example: '[AI] The `cargo build --example` command is used in Rust programming language to build and run an example project included in a Cargo workspace. Cargo is Rust''s package manager and build system, and a workspace can contain multiple projects. The `--example` flag specifies the name of the example project to be built. It compiles the source code, runs tests if any exist, and then builds the target binary or artifact as specified in the project''s `Cargo.toml` file.'
        examples: '[AI] `cargo build --examples` is a command used in Rust programming language''s package manager, Cargo. It triggers the build system to compile and create binary executables for all the examples that come with a Rust crate (a library or a binary project). The binary files are placed in the `target/examples` directory under your project''s root directory.'
        exclude: '[AI] `cargo build --exclude` is a command used in Rust programming language''s Cargo build system. It instructs Cargo to build all targets except for those listed in the `--exclude` flag. This can be useful when you want to build certain parts of your project without building others, such as tests or documentation, to save time or resources. The flag accepts a space-separated list of target names or glob patterns. For example, `--exclude=''tests,*docs''` would exclude all targets whose names match the ''tests'' or ''docs'' patterns.'
        features: '[AI] `cargo build --features` is a command used in Rust programming language''s package manager, Cargo. It builds and runs the current project, enabling specific features defined in the project''s `Cargo.toml` file. These features are optional components that extend the functionality of the main library. By using the `--features` flag, only those specified features will be included in the build process. This results in a customized binary with the desired additional capabilities.'
        future-incompat-report: '[AI] The `cargo build --future-incompat-report` command is a feature of Cargo, Rust''s package manager and build tool. This command instructs Cargo to build the project with all available future-compatible features, while generating a report detailing any potential incompatibilities between the current codebase and those features. The goal is to help developers identify and resolve issues before adopting new Rust language versions that may introduce breaking changes.'
        help: '[AI] `cargo build --help` is a command used in Rust programming language''s build system, Cargo. This command displays detailed help information about the `build` sub-command. It builds and compiles all targets in the current Cargo project, creating artifacts for each target. By using `--help`, you can learn about options and arguments that can be passed to customize this process. For instance, it could allow specifying a particular target or enabling additional warnings.'
        ignore-rust-version: '[AI] `cargo build --ignore-rust-version` is a command used in Rust programming language''s Cargo build system. The `--ignore-rust-version` flag tells Cargo to bypass version checking of the Rust compiler and proceed with building the project, even if the installed Rust compiler version does not match the one specified in the project''s `Cargo.toml` file. This can be useful when working with multiple Rust projects that require different versions of the compiler or when the system Rust compiler is outdated and a newer version is needed for the build to succeed.'
        jobs: '[AI] `cargo build --jobs` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to build the project using all available jobs in parallel. It compiles and runs tests for each target in multiple threads or processes at once, reducing the total build time.'
        keep-going: '[AI] `cargo build --keep-going` is a command used in Rust programming language''s Cargo build tool. This command instructs Cargo to continuously build and run tests for your project, even if some errors occur during the process. The flag `--keep-going` allows Cargo to automatically continue building after encountering an error, rather than halting the build process. This can be useful when dealing with complex projects or large codebases where errors may not necessarily indicate fatal issues. However, keep in mind that using this flag may mask real problems and lead to unintended consequences if not used carefully.'
        lib: '[AI] `cargo build --lib` is a command used in Rust programming language''s package manager, Cargo. This command builds and compiles a Rust library project using Cargo. The "--lib" flag indicates that the project is a library and not an executable binary. It generates an archive file (with .rlib or .cdylib suffix) that can be used for linking other projects or binaries as a dependency.'
        manifest-path: '[AI] `cargo build --manifest-path` is a command used in Rust programming language''s package manager, Cargo. It instructs Cargo to build the project specified by the given Manifest path (the `Cargo.toml` file). The build process compiles the source code and generates the binary or library output as specified in the Cargo configuration. This command does not create an installable package but only builds the target in the local system.'
        message-format: '[AI] `cargo build --message-format` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to build the project and generate output messages during the build process in a customizable format. The default message format provides basic information about the build progress. However, using `--message-format` allows specifying alternative formats for more detailed or customized output.'
        no-default-features: '[AI] `cargo build --no-default-features` is a command used in Rust programming language''s Cargo build system. The `--no-default-features` flag disables the building and linking of all default features for all dependencies in the project. This allows fine-grained control over which features are enabled during the build process, potentially reducing the size and runtime of the resulting binary.'
        out-dir: '[AI] `cargo build --out-dir` is a command used in Rust programming language''s Cargo build system. This command initiates a build process of the current project, creating an output directory named `--out-dir` (by default it is `target`) where compiled artifacts will be placed upon successful completion. The generated files can then be easily located and distributed for deployment or further use.'
        package: '[AI] `cargo build --package` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to build only the specified package or library mentioned after `--package`. It performs compilation and generates artifacts like binary executables or libraries without running tests or documentation generation. The built artifacts will be placed under the `target` directory of the project.'
        profile: '[AI] `cargo build --profile` is a command used in Rust programming language''s package manager, Cargo. It triggers a build process using a specific profile defined in the project''s `Cargo.toml` file. Profiles allow for customized compile and build settings based on different use cases (e.g., development, testing, or production). This command compiles the source code according to the specified profile''s configurations.'
        quiet: '[AI] `cargo build --quiet` is a command used in Rust programming language''s package manager, Cargo. This command initiates a local build of the project using all its dependencies without displaying any progress messages or logs. The `--quiet` flag ensures a quiet build process, meaning only error messages will be printed if an issue occurs during compilation.'
        release: '[AI] `cargo build --release` is a command used in Rust programming language''s package manager, Cargo. This command instructs Cargo to build an executable or library using release mode, which results in optimized binary files with minimal debug information for improved performance and smaller file sizes. The resulting artifacts are placed in the `target/release` directory.'
        target: '[AI] `cargo build --target` is a command used in Rust programming language''s build system, Cargo. This command instructs Cargo to compile and build the specified target (crate or library) instead of the default one. The `--target` option allows specifying the triple (architecture, OS, and feature flags) for which to build the target. For example, `cargo build --release --target x86_64-pc-windows-msvc` builds the release version of the project for a Windows PC with x86\_64 architecture using Visual Studio as the toolchain.'
        target-dir: '[AI] `cargo build --target-dir` is a command used in Rust programming language''s package manager, Cargo. This command builds the project using all the source code dependencies, creating artifacts in the specified target directory (`--target-dir`) instead of the default `.cargo/bin` or `target` directories. It does not create a runnable executable by default but generates intermediates and library outputs. This command is useful for setting up continuous integration or build servers, where you might want to store the output artifacts in a different location than the default.'
        test: |-
            [AI] `cargo build --test` is a command used in Rust programming language's package manager, Cargo. This single command does two things:

            1. It builds the project by running `cargo build`. This compiles all source code into binary files, and also creates documentation and test artifacts.
            2. After building, it runs the tests using `cargo test`. The tests are executed in the order they are written in the project's Cargo.toml file under the [tests] section.

            So essentially, this command builds the project first and then executes all tests within the project.
        tests: '[AI] `cargo build --tests` is a command used in Rust programming language''s package manager, Cargo. This command builds and runs all tests defined in the current project or workspace. The `--tests` flag tells Cargo to only run tests instead of building regular artifacts. It searches for test functions in source files with the `#[test]` attribute and executes them. This is useful for ensuring that existing functionality works correctly, and for checking new features or changes before merging them into a shared repository.'
        timings: '[AI] `cargo build --timings` is a command used in Rust programming language''s Cargo build tool. It triggers a regular build of your project, but also generates detailed timing information for each phase of the build process such as compile, test, and run. These timings are saved to a file named `default.csv` in the `target/timings` directory, which can be used for further analysis. This command is useful for understanding the performance characteristics of your project''s build process and identifying potential bottlenecks.'
        unit-graph: '[AI] `cargo build --unit-graph` is a command in Rust''s Cargo build system. It generates a dependency graph, also known as a unit graph, for the current project. The unit graph displays the interrelationships between all the crate dependencies and the target crates being built. This visualization can help in understanding the build process better, especially for larger projects with multiple dependencies.'
        workspace: '[AI] `cargo build --workspace` is a command used in Rust programming language''s Cargo build tool. It instructs Cargo to build all projects specified in the current workspace (a collection of Crates, libraries or executables) defined in the `Cargo.toml` file(s). This command will perform builds for each project and artifacts will be stored in their respective target directories within the workspace.'
