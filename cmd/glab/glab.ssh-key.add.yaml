# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: add [key-file]
description: Add an SSH key to your GitLab account
flags:
    -e, --expires-at=: The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
    -t, --title!=: New SSH key's title
documentation:
    command: '[AI] `glab ssh-key add` is a GitLab CLI (Command Line Interface) command used to add an existing SSH key to your GitLab account. This command helps securely manage SSH keys for accessing GitLab repositories without having to manually copy the key content to the GitLab web interface. When you run `glab ssh-key add`, you''ll be prompted to provide the path to the SSH private key file stored on your local machine, and the command will handle the rest by registering the key with GitLab under your account.'
    flag:
        expires-at: |-
            [AI] The `glab ssh-key add --expires-at` command is used in the GitLab CLI (Glab) to add a new SSH key with a specified expiration date. This can be helpful for enhancing security by periodically rotating or revoking access keys.

            Here's a brief explanation of its syntax and usage:

            1. `glab`: It refers to the GitLab CLI tool that is used to interact with GitLab instances, including managing SSH keys.
            2. `ssh-key add`: This is the subcommand for adding new SSH keys to your GitLab account or project.
            3. `--expires-at`: It's an optional flag that lets you set a key expiration date in the format of Unix timestamp (seconds since January 1, 1970). Using this flag will automatically add the key with the specified expiration date.

            Example usage: `glab ssh-key add ~/.ssh/id_rsa --expires-at="<UNIX_TIMESTAMP>"`
        title: '[AI] The command `glab ssh-key add --title` is used in GitLab to add a new SSH key to your GitLab account. The `--title` option allows you to provide a descriptive name or label for the key. This command typically involves copying the public key content to the clipboard, then running this command in your terminal or GitBash window with the private key file saved locally. After entering your GitLab account password and confirming the addition, the new SSH key will be associated with your account and can be used for securely pushing and pulling code from repositories.'
