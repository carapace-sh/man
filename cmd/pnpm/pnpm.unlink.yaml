# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: unlink
aliases:
    - dislink
description: Removes the link created by `pnpm link` and reinstalls package if it is saved in `package.json`
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --color: Controls colors in the output
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --stream: Stream output from child processes immediately
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -h, --help: Output usage information
    -r, --recursive: Unlink in every package found in subdirectories or in every workspace package
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm unlink` is a command used in PnPM, a package manager for JavaScript projects. It is used to remove a specific package and its locked version from the local `pnpm-lock.yaml` file without affecting the installed packages or the dependencies listed in the `package.json` file. This allows you to reinstall that package with a different version if needed.'
    flag:
        aggregate-output: '[AI] `pnpm unlink --aggregate-output` is a command used in the Package Manager for Node.js projects, pnpm. This command is utilized when you want to remove a specific package and its lockfile from your project while keeping the shared dependencies intact. The `--aggregate-output` option ensures that pnpm generates an updated `pnpm-lock.yaml` file reflecting the change made by the command. By using this command, you can manage your project''s dependencies effectively and maintain a clean and accurate lockfile.'
        color: '[AI] The command `pnpm unlink --color` is used in the package manager PnPM (Partitioned Node Package Manager) to remove a specified package from the list of dependencies without removing it from the node_modules folder. The `--color` option enables colored output for better readability during the execution of the command.'
        dir: '[AI] `pnpm unlink --dir` is a command used with npm package manager `pnpm`. It is used to remove a specific directory from the list of dependencies in the project''s `pnpm-lock.yaml` file. The `--dir` option specifies the directory path whose dependency will be removed. This command helps in managing project dependencies when there''s a need to temporarily unlink or change them, for instance, during testing or debugging.'
        help: |-
            [AI] `pnpm unlink` is a command provided by PnPM, a package manager for JavaScript projects. The `--help` option, when used with this command, displays detailed information about how to use `pnpm unlink`.

            In simple terms, `pnpm unlink` is used to remove a specific package from the local node\_modules folder and from the package-lock.json or pnpm-lock.yaml file. This command helps manage dependency conflicts and allows you to easily test different versions of packages within your project. When run with `--help`, it will output usage instructions, available options, and examples for using `pnpm unlink`.
        loglevel: '[AI] `pnpm unlink` is a command used in the pnpm package manager to remove a specific package from the global and local project''s node_modules folder. The `--loglevel` option sets the log output level for pnpm. Possible values include "error", "warning", "info", "verbose", and "silent". By default, it is set to "info", but you can use this flag to increase or decrease the verbosity of the command output.'
        no-color: '[AI] `pnpm unlink` is a command provided by PnPM, a package manager for Node.js projects. The `--no-color` option disables colored output in the terminal. The main purpose of using `pnpm unlink` is to remove a specific package from the dependency tree of a project and delete its local cache. This can be useful when troubleshooting dependency issues or switching to alternative versions.'
        recursive: '[AI] `pnpm unlink --recursive` is a command used with the package manager, pnpm. This command is used to remove or unlink a specific package from the project''s node_modules directory and from the locked file (package-lock.json or pnm-lock.yaml). The `--recursive` flag ensures that this operation is performed not only for the current project but also recursively for all subprojects in a multi-package workspace managed by pnpm.'
        stream: '[AI] `pnpm unlink --stream` is a command provided by the package manager, pnpm. This command is used to remove a specific package from the global and local project dependencies in a streamlined way without invoking the regular node_modules installation process. It''s particularly useful when dealing with large projects or when you need to manage multiple versions of a package within your project. By using `--stream` option, pnpm will unlink the packages progressively while allowing other processes to continue running. This can help reduce the impact on the build environment and improve overall performance.'
        use-stderr: '[AI] The command `pnpm unlink --use-stderr` is used to remove a specific package from the dependencies of a project managed by pnpm (Parcel bundler''s package manager). This command also sets the option `--use-stderr` which causes any output, including error messages, to be printed on the standard error stream instead of the standard output stream. This can be helpful when automating tasks or running scripts in a continuous integration environment where you might only want to see error messages and not mixed output and error messages.'
        workspace-root: '[AI] `pnpm unlink` is a command used in the PnPM package manager for managing dependency trees. The `--workspace-root` option specifies the root directory of a PnPM workspace. Together, this command unlinks (removes) a specific package from the dependencies of that workspace, allowing you to manage its installation separately.'
