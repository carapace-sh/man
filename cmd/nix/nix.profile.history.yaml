# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: history
description: show all versions of a profile
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --log-format=: Set the format of log output
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --profile=: The profile to operate on
    --quiet: Decrease the logging verbosity level
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] The `nix-profile history` command is used in Nix, a package manager for Linux and other Unix systems, to display a list of all the profile configurations that have been applied to the current system. A Nix profile is a collection of packages and their configurations managed by Nix. This command helps users keep track of the sequence of profiles that have been installed or removed, allowing them to revert back if necessary.'
    flag:
        arg: '[AI] `nix-profile` is a command in Nix packaging system used to apply and manage configuration profiles. The command `nix-profile --history --arg <args>` displays the build and application history of the currently activated Nix profile, along with optional filters specified by `<args>`. This can help in tracking changes made to installed packages and their corresponding version numbers.'
        argstr: '[AI] The `nix-profile --history --argstr` command in Nix is used to display a detailed history of all the changes made to the Nix profile, including the specific arguments passed to each command that caused those changes. The output includes the time stamp, the command invoked, and its corresponding argument string. This information can be helpful for understanding the sequence of events leading to the current state of the Nix profile.'
        debug: '[AI] `nix-profile --debug flag` is used with Nix, a package manager for Linux and other Unix systems. This flag enables debug mode when running `nix-profile`. It provides detailed output during the installation or removal of packages and their configurations, helping to diagnose potential issues. The output includes information on which profile is being activated or deactivated, the status of each individual build and install step, as well as any error messages that may occur. This flag can be useful for troubleshooting and understanding the inner workings of Nix.'
        debugger: |-
            [AI] The `nix-profile --debugger` command is a Nix Packages tool used for debugging and analyzing the state of a Nix profile, which is a directory containing configuration files and installed packages managed by Nix.

            When executed with this option, it starts an interactive debugging session where you can inspect the current state of the profile, view the build logs of packages, examine their configurations, and even modify them interactively. This can be helpful when troubleshooting issues or understanding how specific packages were built in a Nix environment.

            Additionally, `--debugger` can show the call graph, providing an overview of the dependencies between different components in the profile. It also supports stepping through build processes and examining variables at each step. Overall, it's an essential tool for advanced users working with complex configurations managed by Nix Packages.
        eval-store: '[AI] `nix-profile history --eval-store` is a Nix command that interacts with the Nix expression language''s (Nixml) evaluation store. This command retrieves the list of expressions that have been evaluated and stored in the local evaluation store, allowing users to check which expressions have previously been used or applied within their Nix profile. By providing this information, it aids in understanding the state of past configurations and can help with troubleshooting and versioning.'
        impure: '[AI] `nix-profile history --impure` is a command in Nix, a package manager for Linux and other Unix systems. This command displays the installation history of a Nix profile, showing the exact versions and timestamps of all packages installed, including those installed via impure methods such as `nix-env -iA`. Impure installations are not managed by Nix''s dependency solver, meaning they might not follow Nix''s intended dependencies or version relationships. By using this command with the `--impure` flag, you can get a complete view of all packages installed in a Nix profile, including those installed impurely.'
        include: '[AI] `nix-profile history --include` is a Nix command used to display the list of Nix profiles that have been applied to the current system, along with the corresponding commit hashes and dates. The `--include` option filters the output to only show the histories of explicitly specified profiles, rather than showing the entire profile application history. This can be useful when working with multiple profiles and needing to track the changes made to specific ones.'
        log-format: |-
            [AI] `nix-profile` is a utility provided by Nix, a package manager for Linux and other systems. The `--log-format` option when used with the `history` command alters the output format of the logs generated during the installation or removal of packages.

            By default, the history logs are saved in plain text format containing a timestamp, a brief description of the event (installation or removal), and the name and hash of the package involved. However, with the `--log-format` option, users can specify different formats for the logs, such as JSON or CSV, allowing easier processing and parsing by other tools or scripts.

            For instance, to generate JSON-formatted history logs, you would use:
            ```
            nix-profile --run "history --log-format json"
            ```
            This will produce a JSON file with the log data, which can then be processed using various JSON parsing tools. Users can also create custom formats by specifying their own format strings.
        override-flake: '[AI] `nix profile history --override-flake` is a Nix expression used to update the Flake lock file (usually located in `.nix-profile/config.nix`) with specific overrides or modifications without affecting the entire history of the profile. This command retrieves the current profile history and then applies the given overrides, creating a new versioned configuration file under `.nix-profile/config-<version>.nix`. The updated Flake configuration will be used in the next call to `nix-env -i` or similar commands.'
        print-build-logs: '[AI] `nix-profile history --print-build-logs` is a Nix command that displays the build logs of previously built profiles. The `--history` option lists all available profile versions, and `--print-build-logs` outputs the build logs for each selected profile version. This can be useful for debugging or understanding the build history of Nix profiles.'
        profile: '[AI] The `nix-profile history --profile` command is used in Nix, a package manager for Linux and other Unix systems, to display a list of previously applied profiles. Profiles contain settings and configurations for Nix, and applying a new profile can update installed packages or modify system settings. This command allows users to see which profiles have been applied in the past, making it easier to manage and revert changes if needed.'
        quiet: '[AI] The `nix-profile history --quiet` command is used in Nix, a package manager for Linux and other UnIX systems, to display a list of previous Nix profile versions that have been applied on the system, with minimal output. The `--quiet` option suppresses extra information and only displays the version numbers of the installed profiles.'
        verbose: '[AI] The `nix-profile history --verbose` command is used in Nix, a package manager for Linux and other systems, to display detailed information about the changes made by each Nix expression in the user''s Nix profile. The `--verbose` option increases the amount of output, providing more details such as the date, author, and commit message for each change. It helps users understand what has been installed or modified in their system with Nix and when.'
