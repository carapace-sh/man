# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: get
description: add dependencies to current module and install them
flags:
    -C=: Change to dir before running the command
    -a: force rebuilding of packages that are already up-to-date
    -asan: enable interoperation with address sanitizer
    -asmflags=: arguments to pass on each go tool asm invocation
    -buildmode=: build mode to use
    -buildvcs?: whether to stamp binaries with version control information
    -compiler=: name of compiler to use
    -cover: enable code coverage instrumentation
    -coverpkg=: apply coverage analysis to each package matching the patterns
    -d: only download the source code needed to build
    -gccgoflags=: arguments to pass on each gccgo compiler/linker invocation
    -gcflags=: arguments to pass on each go tool compile invocation
    -insecure: permit using insecure schemes such as HTTP
    -installsuffix=: a suffix to use in the name of the package installation directory
    -ldflags=: arguments to pass on each go tool link invocation
    -linkshared: build code that will be linked against shared libraries
    -mod=: module download mode to use
    -modcacherw: leave newly-created directories in the module cache read-write
    -modfile=: read and possibly write an alternate go.mod file
    -msan: enable interoperation with memory sanitizer
    -n: print the commands but do not run them
    -overlay=: read a JSON config file that provides an overlay for build operations
    -p=: the number of programs to run in parallel
    -pgo=: specify the file path of a profile for profile-guided optimization
    -pkgdir=: install and load all packages from dir
    -race: enable data race detection
    -t: consider modules needed to build tests
    -tags=: a comma-separated list of build tags to consider satisfied during the
    -toolexec=: a program to use to invoke toolchain programs like vet and asm
    -trimpath: remove all file system paths from the resulting executable
    -u: update modules providing dependencies
    -v: print the names of packages as they are compiled
    -work: print the name of the temporary work directory
    -x: print the commands
documentation:
    command: '[AI] `go get` is a command-line tool used in the Go programming language for downloading and installing new packages from the standard library or external sources, specified by their import paths, to your local $GOPATH. This command simplifies the process of managing dependencies in a Go project. When you use a package import statement in your Go source code, `go get` automatically downloads and installs it for you, making sure that the correct version is being used in your project.'
    flag:
        C: '[AI] `go get -C` is a command used in the Go programming language to fetch and build Go packages from their source repositories, instead of using local cached versions or downloaded binaries. The `-C` flag stands for "clean" and it instructs Go to remove the previously built artifacts before downloading and building the package, ensuring a fresh build. This command is typically used when you want to obtain the latest version of a package and its dependencies, and make sure that they are properly built.'
        a: '[AI] `go get -a` is a command used in Go programming language to download and install specified local or external Go modules, including all transitive dependencies (recursively), as defined in the `go.mod` file. This single command retrieves and manages all required packages for your project ensuring that the correct versions are used.'
        asan: '[AI] `go get -asan` is a command used in Go programming language to download and install the Google-created ASAN (Address Sanitizer) tool as a build constraint. The ASAN is a static analyzer that detects memory errors, such as use-after-free, buffer overflows, and memory leaks, during program execution. By using `go get -asan`, you''re telling Go to download the ASAN source code and integrate it into your project when building. This allows you to run your application with the ASAN tool for improved memory safety.'
        asmflags: '[AI] `go get` is a command-line tool in Go programming language used to download and install specified packages from the standard library or third-party repositories. The `-asmflags` option is a build constraint that allows passing additional flags to the assembler during the compilation of Go source code into machine code. These flags can be used for optimizing assembly code, targeting specific architectures or platforms, or enabling certain features in the assembler itself. For instance, one might use `-asmflags=-march=native` to compile with the most efficient instruction set supported by the local hardware.'
        buildmode: |-
            [AI] The `go get` command in Go programming language is used to download and install packages required by a Go project from the Go Modules repository. The `-buildmode=c-shared` or `-buildmode=c-archive` flags modify how the Go compiler builds the package's CGO.dll/CGoFiles for Windows systems or .a files for Unix systems during the `go build` process:

            1. `-buildmode=c-shared`: This flag generates shared libraries (.dll on Windows, .so on Unix) which can be loaded dynamically by other programs. It's useful when you want to share the built package with others as a dynamic library.

            2. `-buildmode=c-archive`: This flag generates static archives (.a on Unix, .lib on Windows) where the object files are combined into a single static library file. Using this mode, you don't need to link against any external libraries during the `go build` process. It's useful when you want to bundle all dependencies within your project or for building standalone applications without requiring external libraries at runtime.
        buildvcs: '[AI] The `go get` command with the `-buildvcs` flag is a Go programming language tool used to download and install dependencies listed in a Go module file (GO.mod or GO.sum). The `-buildvcs` flag instructs `go get` to also initialize, fetch, and update the version control system (VCS) within each dependency directory. This ensures that your local working copy of the dependencies is up-to-date with their respective master branches when you start a new project or need to update existing ones.'
        compiler: '[AI] `go get -compiler` is a command used in the Go programming language to download and install specific versions of the Go compiler (also known as "go tool compilation tool" or "gccgo") from the Go source repository directly into your local Go environment. The `-compiler` flag specifies that only the compiler should be fetched, without pulling in any other packages or dependencies. This command helps manage and keep the Go compiler up-to-date for developers who prefer not to use precompiled binaries or need a specific version of the compiler for testing purposes.'
        cover: '[AI] `go get -cover` is a command used in Go programming language to download necessary packages and their dependencies, as well as generating test coverage reports for those tests. It automatically runs all tests under the `*_test.go` files in the current directory or in the specified package path. The generated coverage reports can be found in `cover.out` files in the current working directory or in the test output directories. These reports provide information about which lines of code were executed during testing, helping developers to identify and improve under-tested areas.'
        coverpkg: '[AI] `go get -coverpkg` is a command used in Go programming language for generating test coverage reports. When executed, it downloads or updates the necessary packages specified in the `go.mod` file and sets up the testing environment by installing the test-specific flags and dependencies. Additionally, it compiles and runs the tests, producing a coverage report in the standard output format (`*.out`) or writing it to a file if specified with the `-o` flag. The primary usage of this command is for measuring and analyzing the effectiveness of tests in identifying code coverage during development.'
        d: '[AI] `go get -d` is a command used in the Go programming language to download the source code of specified packages from their repositories but without building or installing them. The `-d` flag stands for "download only," indicating that only the source code should be retrieved and not compiled or installed into the $GOPATH. This can be useful when you want to inspect the package''s code, make local modifications, or work offline.'
        gccgoflags: '[AI] `go get` is a command-line tool in the Go programming language used to download and install specified packages from the Go Modules repository. The `-gccgoflags` option is a flag provided with this command that allows passing compiler flags specifically for the GCC Go compiler (gccgo). When using this flag, you can provide a list of compiler flags as an argument, which will be passed on during the compilation process of the downloaded package. This could be useful when dealing with specific project requirements or optimizing the compilation process.'
        gcflags: |-
            [AI] `go get` is a command-line tool in Go programming language used to download and install packages from the standard library or third-party repositories, manage dependencies and update them to their latest versions. The `-gcflags` flag is an optional argument provided with `go get`. It's used to control the Go compiler (gc) flags when building the packages being installed. These flags can impact performance, memory usage, and other aspects of compiled code. Commonly used flags include:

            1. `-S`: Enable generating the assembly code instead of an executable or object files.
            2. `-l`: Disable linking.
            3. `-X`: Pass preprocessor definitions to the Go compiler.
            4. `-N`: Build but do not install or execute the package.
            5. Custom flags like `-o` for setting output file name, or `-w` for enabling warnings.

            Using `go get -gcflags=<flag>` allows developers to customize the build process of their dependencies during installation and ensures consistency across projects by specifying desired compiler flags.
        insecure: '[AI] The `go get` command with the `-insecure` flag is used in Go programming language to download and install external modules from Git repositories without checking their SSL certificates for validity. It bypasses the standard Go security checks, allowing the use of potentially insecure or malicious code. This flag should be used with caution as it can expose your system to security risks.'
        installsuffix: '[AI] The `-installsuffix` flag in the "go get" command of Go programming language specifies a suffix that gets appended to imported package names during installation. This means that when you run `go get <package-url>`, the binary or library files will be saved with the specified suffix instead of the default `.a` (for C packages) or no suffix (for Go packages). For example, using `go get -installsuffix=.my_suffix <package-url>` will install the package with a file name ending in `.my_suffix`. This can be useful if you want to avoid naming conflicts with other packages that might have similar names but different suffixes.'
        ldflags: '[AI] `go get -ldflags` is a command used in the Go programming language to download and install specified Go packages from the standard library, with the additional flag `-ldflags` for setting build flags. Build flags are used to set compiler flags during the build process. For instance, `-ldflags "-w -h=main"` sets the `-w` (whole program) and `-h=main` (main Go file name) flags. This command does not build or run the code; it only downloads and sets up the packages for future use.'
        linkshared: '[AI] `go get -linkshared` is a command used in Go programming language to download and install specified package dependencies, along with their transitive dependencies, from the standard Go Modules repository. The `-linkshared` flag ensures that only the required shared packages are symlinked into the current project''s `go.mod` file, preventing the installation of duplicate or unnecessary packages. This helps in managing smaller and more efficient dependency trees.'
        mod: '[AI] The `go get` command with the `-mod` flag is a feature in Go programming language''s module system. It is used to download and install specific versioned dependencies required by a Go project from the Go Mod file (go.mod). This flag ensures that the specified dependency is added or updated to the project''s go.mod file, and its correct version is installed locally for use in the project. In summary, it automates managing dependency versions and their download for a Go project.'
        modcacherw: '[AI] `go get -modcache` is a command used in Go programming language for managing dependencies. The `-modcache` flag instructs the `go get` command to use the local Go mod cache instead of downloading and installing new dependencies from external sources. This can improve build times by reusing previously downloaded dependencies.'
        modfile: '[AI] The `go get` command with the `-modfile` flag is used to manage dependencies in Go programming language projects. With this flag, you specify a file containing the Go Mod file format which defines the required and replacement modules along with their versions. When running `go get`, the Go tool downloads and installs the specified modules into your project''s `go.mod` file. This helps keep your project up-to-date with the latest dependencies while maintaining a consistent and organized dependency structure.'
        msan: '[AI] `go get -msan` is a command used in Go programming language to download and install the Memory Safety Analyzer (MSAN) tool from Google. MSAN is a static analyzer that helps detect memory safety issues such as use-after-free, null pointer dereferencing, and data races in Go code. By using `go get -msan`, you can automatically download and install the necessary MSAN packages to your Go workspace, enabling you to run memory safety checks during compilation.'
        "n": |-
            [AI] `go get -f` or `go get -download` is a command used in the Go programming language to download and install necessary packages from the Go Modules repository into the local $GOPATH. The `-f` flag means "force," which ensures that even if the required dependencies are already present, they will be updated to their latest versions.

            The alternative form, `go get -n <module>`, is used for a dry run or preview of what would be downloaded and added to the go.mod file without actually performing the installation. It shows the proposed changes in the terminal but does not modify the files on disk.
        overlay: |-
            [AI] The `go get` command with the `-overlay` flag is used in Go programming language for managing and updating external modules in a composite application, where multiple modules depend on the same external module with different versions.

            When you use this flag, Go downloads the overlay files from the specified remote repository, which are the differences between two commits or branches, instead of the entire history. This results in faster synchronization and reduced network traffic when dealing with large projects with many interdependent modules.

            The `go get` command applies these overlay files to the local modules, updating them to the desired version while preserving any local changes that might have been made to those modules. If conflicts arise between local and remote changes, they will be handled according to your Go configuration settings.
        p: '[AI] The `go get` command is a tool in Go programming language used to download and install specified Go packages from their source repositories. The `-p` flag stands for "parse and download only," meaning it will only parse the given package dependencies and download necessary modules without executing tests or building the project. This flag is useful when you want to update your dependencies without building or testing the entire project.'
        pgo: '[AI] `go get -p go` is a command used in Go programming language to download and install specific Go packages from the standard library or external repositories, directly into the Go module cache (`$GOPATH/pkg/mod`) without creating a `go.sum` file for each package. The `-p` flag tells the `go get` command to recursively download dependencies of the specified package as well. In this case, `go get -p go` is used to download and update the Go standard library packages.'
        pkgdir: '[AI] `go get -pkgdir` is a command-line option used with the `go get` tool in Go programming language. It specifies the directory where the downloaded package should be placed, instead of the default automatic detection based on the import path and current working directory. This can be useful for managing dependencies in a consistent way across different environments or projects.'
        race: '[AI] `go get -race` is a command-line tool in Go programming language used to download and install dependencies defined in a `go.mod` or `go.sum` file. The `-race` flag enables the race detector, which is a static analysis tool that identifies potential data races in the source code. By combining dependency management with race detection, this command helps developers ensure their applications are both up-to-date and free from concurrency issues.'
        t: '[AI] The `go get` command with the flag `-t` or `--toggle` is used to toggle the get and fetch subcommands'' behavior for managing Go modules in a project. When using `go get`, the default behavior is to download the latest version of the required module and its dependencies. However, with the `-t` flag, it toggles between this behavior and checking out a specific commit or branch instead of downloading the latest version. This can be useful for testing or working on older versions of modules in development.'
        tags: '[AI] The `go get` command with the `-tags` flag is used in Go programming language to download and install specified versions of packages from a Go module''s `go.sum` file, along with their associated tags. This flag allows specifying a particular tag for a specific version of a package instead of using the latest one. It helps manage dependencies and ensure that the codebase uses the desired versions of packages throughout the project.'
        toolexec: '[AI] The `go get -tools=<package-name>` command is used in Go programming language to download and install specific external tools (also known as "subcommands") that are listed as dependencies in a Go module''s `go.mod` file. The `toolexec` argument is not a valid package name for a specific tool, but rather it''s an optional flag that tells Go to execute the installed tool directly after downloading and installing it, without requiring an explicit call to the tool in the Go code. In summary, this command is used to automatically download and execute specific Go tools as part of managing a Go project''s dependencies.'
        trimpath: '[AI] `go get` is a command-line tool used in the Go programming language for managing dependencies. The `-trimpath` option, when used with `go get`, removes leading directories from imported package paths during download and installation. This means that only the last component of the import path will be stored in the `go.mod` or `go.sum` files, making them shorter and easier to manage. It also ensures consistency across different systems by reducing the impact of differences in file system paths on the import paths.'
        u: '[AI] The command `go get -u` is used in Go programming language to download and install the latest version of a specified package, along with all its dependencies, directly into the `$GOPATH` workspace. The `-u` flag stands for "update" and tells the Go get tool to update the existing packages if they already exist in the local repository or cache, or to download and install them if they are not present yet. This command is commonly used to keep the project''s dependencies up-to-date with the latest releases.'
        v: '[AI] The `go get -v` command is a tool used in the Go programming language to download and install specified packages from the Go Modules repository. The `-v` flag enables verbose output, displaying progress and details of each downloaded package and its dependencies. This command is typically run from the terminal or command prompt to update or manage project dependencies in a Go workspace.'
        work: '[AI] The `go get` command is a part of Go programming language''s standard library for managing dependencies. When you use the `-work` flag with it, you tell Go to download and install the required packages in your current project''s `$GOPATH/pkg/mod` directory instead of the global one (`$GOPATH/pkg`) by default. This helps ensure that each project has its own dependencies, reducing potential conflicts between different projects that might be using the same dependencies with different versions.'
        x: '[AI] `go get -x` is a command used in Go programming language for downloading and installing specified Go packages from their repositories, along with their dependencies, into the local $GOPATH directory. The "-x" flag displays the commands that `go get` runs to accomplish this task, making it useful for debugging or understanding the dependencies'' origins.'
