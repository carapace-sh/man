# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: wireshark
description: Interactively dump and analyze network traffic
flags:
    --capture-comment=: set the capture file comment, if supported
    --disable-heuristic=: disable dissection of heuristic protocol
    --disable-protocol=: disable dissection of proto_name
    --display=: X display to use
    --enable-heuristic=: enable dissection of heuristic protocol
    --enable-protocol=: enable dissection of proto_name
    --fullscreen: start Wireshark in full screen
    --list-time-stamp-types: print list of timestamp types for iface and exit
    --time-stamp-type=: timestamp method for interface
    -C=: start with specified configuration profile
    -D, --list-interfaces: print list of interfaces and exit
    -H: hide the capture info dialog during packet capture
    -I, --monitor-mode: capture in monitor mode, if available
    -J=: jump to the first packet matching the (display) filter
    -K=: keytab file to use for kerberos decryption
    -L, --list-data-link-types: print list of link-layer types of iface and exit
    -N=: enable specific name resolution
    -P=: personal files
    -R, --read-filter=: packet filter in Wireshark display filter syntax
    -S: update packet display when new packets are captured
    -X=: eXtension options
    -Y, --display-filter=: start with the given display filter
    -a, --autostop*=: specify stop criterion
    -b, --ring-buffer*=: run in 'multiple files' mode
    -d*=: specify layer type dissection
    -g=: go to specified packet number after "-r"
    -h, --help: display this help and exit
    -i, --interface=: name or idx of interface
    -j: search backwards for a matching packet after "-J"
    -k: start capturing immediately
    -l: turn on automatic scrolling while -S is in use
    -n: disable all name resolutions
    -o*=: override preference or recent setting
    -p, --no-promiscuous-mode: don't capture in promiscuous mode
    -r, --read-file=: set the filename to read from
    -s, --snapshot-length=: packet snapshot length
    -t=: format of time stamps
    -u=: output format of seconds
    -v, --version: display version info and exit
    -w=: set the output filename
    -z=: show various statistics
documentation:
    command: '[AI] Wireshark is a popular, open-source network protocol analyzer. It lets users see and interactively examine the detailed packets that make up network traffic in real time. With its advanced filtering and analysis capabilities, it''s widely used for troubleshooting, network security, and software development.'
    flag:
        C: '[AI] The `-C` option in Wireshark is used to specify the capture filter. It allows users to define a BPF (Berkeley Packet Filter) expression that will be applied to the packets being captured, limiting the traffic analysis to only the desired packets based on their headers or contents. This can help reduce the amount of data collected and improve performance in real-time analyses.'
        H: '[AI] The `-H` option in Wireshark is used to display a list of available interfaces for capturing network traffic, along with some basic information about each interface such as its name, description, and type. It does not initiate a capture but instead helps the user select which interface to use for capturing packets in Wireshark.'
        J: '[AI] The `-J` option in Wireshark is used to specify a JSON (JavaScript Object Notation) output format for TShark, Wireshark''s command-line utility. This option allows exporting capture data as JSON files that can be easily parsed and analyzed by various programming languages and tools for further processing and analysis. The JSON output includes packet headers and metadata in a hierarchical structure.'
        K: '[AI] The `-K` option in Wireshark is used to specify a capture filter expression. This filter is applied in real-time as packets are being captured, allowing you to focus on specific network traffic of interest. For example, `-K "tcp port 80"` would only capture packets that match the given filter criteria - in this case, TCP packets destined for port 80.'
        "N": '[AI] The `-N` option in Wireshark is used to suppress displaying of packet numbers in the capture file. This can be useful when analyzing large packets or when working with multiple captures at the same time, as it simplifies the viewing experience by removing unnecessary numerical labels from each packet.'
        P: '[AI] The `-P` option in Wireshark is used to specify a capture profile. A capture profile defines various settings for a packet capture, such as the interface to use, filter expressions, display filters, and other options. By providing a capture profile with the `-P` flag, Wireshark will apply those settings when starting a new capture.'
        S: '[AI] The `-S` option in Wireshark is used to display a list of active network interfaces and their corresponding MAC addresses, IP addresses, and other information. It allows users to select an interface for capturing packet data without having to manually browse the system for interfaces or remember their names. This can be useful when setting up a capture session in Wireshark.'
        X: '[AI] The `-X` option in Wireshark is used to enable hexdump output for packets that don''t match any of the displayed filters or for decoding protocols without a display filter. When using this option, Wireshark will display the raw hexadecimal data of each packet, along with its corresponding ASCII encoding if applicable. This can be useful for analyzing low-level details of network traffic or for debugging specific packets that aren''t being captured by filters.'
        autostop: '[AI] `wireshark --autostop` is a command-line option used with Wireshark, a popular network protocol analyzer tool. This option automatically stops the capture after one packet or one specific condition is met. It helps in quickly analyzing a specific network event without having to manually stop the capture.'
        capture-comment: '[AI] The `--capture-comment` option in Wireshark is used to add descriptive comments to captured packets during live packet captures. These comments can be added at the time of capture, providing context and making it easier to identify specific packets later in the analysis process. This feature helps improve the efficiency and effectiveness of packet analysis by allowing users to provide meaningful information about each capture file or individual packets.'
        d: '[AI] The `wireshark -d` command is used to start Wireshark in packet capture and display mode without a GUI, also known as the TTY (Teletype) or CLI (Command Line Interface) version. It allows users to analyze network traffic in real-time from the terminal or console. Users can set various filters using command-line options and save the captured packets for further analysis. It''s useful when working with scripts, automating captures, or when a GUI is not available.'
        disable-heuristic: '[AI] The `--disable-heuristic` option in Wireshark is used to disable heuristic dissectors. Heuristic dissectors are used for analyzing protocols without a defined dissector, by looking at the packet data and making an educated guess as to what the protocol is based on its contents. Disabling these dissectors can help improve performance and reduce false positives, but may also result in not being able to decode certain unknown or non-standard protocols that rely on heuristic analysis.'
        disable-protocol: '[AI] The `--disable-protocol` option in Wireshark is used to disable the decoding and display of specific network protocols during packet analysis. This can be useful for situations where certain protocols are not relevant or may cause performance issues. To use this option, you would provide a list of protocol names as arguments when starting Wireshark from the command line. For example: `wireshark --disable-protocol=SSL,SSH,DNS`. Note that disabling protocols can limit the functionality and effectiveness of Wireshark for analyzing network traffic.'
        display: '[AI] The `--display` option in Wireshark is used to configure the GUI (Graphical User Interface) where the captured packet data will be displayed. It specifies which display engine to use, such as GTK+ for X Windows or Qt for other platforms. For example, `wireshark --display gtk` would launch Wireshark using the GTK+ display engine on an X Window system.'
        display-filter: '[AI] `wireshark --display-filter` is a command-line option for the Wireshark network protocol analyzer tool. It allows users to filter the captured packet data in real-time as they are being displayed. The filter expression is provided as an argument to this option. For instance, `--display-filter "tcp port 80"` would display only packets involving HTTP traffic (port 80). This feature helps users focus on specific network conversations or traffic types for analysis.'
        enable-heuristic: '[AI] The `--enable-heuristics` option in Wireshark is used to enable heuristic dissectors during packet analysis. Heuristic dissectors are protocols or decoders that don''t have a defined protocol header, but can be identified based on the data contents within the packets. These dissectors rely on rules and patterns to determine the protocol being used. By enabling heuristic dissectors, Wireshark is able to decode and display traffic from previously unknown or custom protocols, providing more comprehensive packet analysis capabilities.'
        enable-protocol: '[AI] The `--enable-protocol` option in Wireshark is used during its compilation to enable the decoding of specific network protocols. When Wireshark is built with this option, it includes the code for decoding the specified protocols, expanding its overall capabilities to dissect and analyze those network traffic types. This can be particularly useful when working on custom or less common network environments where particular protocols are in use.'
        fullscreen: '[AI] The `wireshark --fullscreen` command is used to start Wireshark, a network protocol analyzer, in full screen mode. This means that the application will utilize the entire available screen real estate, providing more space for displaying packets and their details. It''s an effective option for those who need a larger view when capturing and examining network traffic.'
        g: '[AI] The `-g` option in Wireshark is used to display only the specified packet(s) based on their packet numbers. When you run Wireshark with this option, followed by one or more packet numbers separated by commas, it will open and immediately scroll to the specified packets, allowing for quicker analysis of specific packets within a capture file.'
        help: '[AI] `wireshark --help` is a command used in the Wireshark network protocol analyzer tool. When executed, it displays detailed help information about various aspects of Wireshark and its usage. Topics covered include installing and updating Wireshark, capturing and displaying packets, filtering and decoding packets, saving and exporting data, and using Wireshark''s graphical user interface (GUI) and command-line interface (CLI). The help text also includes information about the various options that can be used with the `wireshark` command.'
        interface: '[AI] The `wireshark --interface` command is used to start Wireshark, a popular network protocol analyzer tool, with a specific interface for capturing network traffic. By providing the interface argument, you are instructing Wireshark to open and begin listening on that particular network interface for packet data. For example, `wireshark --interface wlan0` would start Wireshark in capture mode on the wlan0 wireless interface.'
        j: '[AI] The `-j` option in Wireshark is used to specify a display filter expression for selecting the packets to be displayed in the capture window. When using this option, Wireshark processes and shows only the packets matching the specified filter, discarding others. This can help to focus on specific network traffic for analysis.'
        k: '[AI] The `-k` option in Wireshark is used for performing a live capture with only specified filters. This means that packets matching the filter expression will be displayed and stored, while all other packets are dropped during the capture process. This can help reduce the amount of data being captured and analyzed, improving performance and making it easier to focus on specific network traffic.'
        l: '[AI] `wireshark -l` is a command-line option used in Wireshark, a popular network protocol analyzer tool. This option instructs Wireshark to display a list of available interfaces or adapters on the system, along with their corresponding descriptions and hardware addresses (MAC addresses). It helps users determine which interface to use for capturing network traffic data.'
        list-data-link-types: '[AI] `wireshark --list-data-link-types` is a command-line utility used in Wireshark, a popular network protocol analyzer. This specific command displays a list of supported data link types (also known as media types or PHY layers) recognized by Wireshark. These data link types define the physical layer specifications and framing formats for different networks such as Ethernet, Wi-Fi, Asynchronous Transfer Mode (ATM), Point-to-Point Protocol (PPP), etc. Knowing which data link types are supported is essential to ensure proper packet decoding and analysis in Wireshark.'
        list-interfaces: '[AI] `wireshark --list-interfaces` is a command-line utility provided by Wireshark, a popular network protocol analyzer. This specific command''s purpose is to display information about the available network interfaces on a system. It helps network administrators and analysts identify which interfaces are present and their corresponding descriptions, names, and hardware addresses (MAC addresses), allowing them to choose the correct interface for packet capture activities.'
        list-time-stamp-types: '[AI] The `--list-time-stamp-types` option in Wireshark is used to display a list of supported packet timestamp types and their respective formats. These timestamps indicate the time at which each packet was captured or generated. Wireshark supports various timestamp sources, such as NTP, Unix time, IEEE 1588, Synchronous Ethernet, and more. The output provides a brief description of each timestamp type, along with its abbreviated name and the format string used to parse it.'
        monitor-mode: '[AI] `wireshark --monitor-mode` is a command-line option used with Wireshark, a popular network protocol analyzer. This option puts Wireshark into monitor mode, allowing it to passively capture all traffic on a specific interface without filtering or decoding the data in real-time. The captured packets are displayed once Wireshark decodes them based on their headers. This mode is useful for network troubleshooting and learning about network traffic patterns, but it may consume significant computational resources if the interface has high traffic.'
        "n": '[AI] The `-n` option in Wireshark is used to disable name resolution for Host and Port names in the packet display. This can improve performance when analyzing large packets or network traffic with many devices, as resolving names can be resource-intensive. With this option, only IP addresses and port numbers will be displayed instead of their corresponding hostnames or service names.'
        no-promiscuous-mode: |-
            [AI] The `--no-promiscuous-mode` option in Wireshark is used to disable promiscuous mode capturing. In normal operation, Wireshark's capture interface sniffs all traffic on a network segment to analyze and display packet data. However, this can raise security concerns as it may reveal sensitive information.

            By using `--no-promiscuous-mode`, Wireshark will only capture packets addressed to the interface it is running on or those explicitly allowed by a filter expression. This restriction helps maintain privacy and reduces potential security risks associated with promiscuous capturing.
        o: '[AI] The `-o` option in Wireshark is used to specify an output file for the capture. When you start a capture with Wireshark, you can use this option followed by a filename to save the captured packets to that file instead of displaying them directly in the Wireshark interface. This can be useful if you want to analyze the data later or share the capture with someone else. The output format is automatically determined by the filename extension (e.g., `.pcap` for libpcap format).'
        read-file: '[AI] `wireshark --read-file` is a command-line option used with Wireshark, a popular network protocol analyzer. This option allows decoding and displaying the contents of a previously saved capture file (pcap or pcapng format) without having to perform live capturing. It reads the specified file as input and presents the data in Wireshark''s interface for detailed analysis.'
        read-filter: '[AI] `wireshark --read-filter` is a command-line option used with Wireshark, a popular network protocol analyzer. This option allows filtering of captured packets before loading them into Wireshark''s graphical user interface for more efficient analysis. Instead of opening the entire capture file in Wireshark and applying filters afterward, you can apply the filter directly during the capture read process. The filter argument specifies a display filter expression to be applied to the packet data, making it easier to focus on specific network traffic.'
        ring-buffer: '[AI] The `wireshark --ring-buffer` command is used to start Wireshark with the option to enable the ring buffer feature. This means that Wireshark will continuously capture network traffic and store it in a circular buffer, overwriting older data as the buffer fills up. When the buffer is full, the oldest data is discarded to make room for new packets. This option is useful for long-term monitoring or analyzing intermittent network issues where capturing the entire conversation between devices may be necessary.'
        snapshot-length: '[AI] The `--snapshot-length` option in Wireshark is used to specify the maximum length of a packet capture in bytes. This means that once the size of captured packets reaches this limit, Wireshark will stop collecting data and create a new file for the next capture. The option can be set during the initialization of a capture interface or in a capture filter configuration file, allowing users to control the amount of data collected and manage disk space more effectively.'
        t: '[AI] The `-t` option in Wireshark is used to specify the display filter for capturing packets. It allows you to define a filter expression that determines which packets will be displayed and captured in real-time or in a saved capture file. This can help reduce the amount of data being analyzed, making the process more efficient, especially when dealing with large packet volumes. The syntax is `-t "filter_expression"`, where `filter_expression` is a BPF (Berkeley Packet Filter) or display filter expression that matches the desired packets.'
        time-stamp-type: '[AI] The `--time-stamp-type` option in Wireshark is used to specify the format of the timestamps in captured packet data. Wireshark supports various timestamp formats, such as Unix Epoch time (s), IEEE 1588PTP time (s and ns), and J ava System time (ms since Jan 1, 1970). The user can set the desired timestamp format by providing the corresponding type code or name to this option when starting Wireshark from the command line. For example, `--time-stamp-type NANO` sets the timestamp format to nanoseconds.'
        u: |-
            [AI] The `-u` option in Wireshark is used to specify the user interface type for capturing and displaying network traffic. It can take several values:

            * `GUI` (default): graphical user interface (interactive mode)
            * `Tshoot`: protocol expert tracing, similar to Tcpdump but with more analysis features
            * `Text`: text-based user interface (command-line mode)
            * `CaptFile`: capture file format (to save a capture for later analysis)

            For example, `wireshark -i eth0 -u Tshoot` will start Wireshark in protocol expert tracing mode.
        version: '[AI] The `wireshark --version` command is used to display the version information of Wireshark, a popular network protocol analyzer tool. When executed in a terminal or command prompt, it returns output showing the Wireshark version number, build number, and compilation options. This command helps users check for software updates or troubleshoot potential compatibility issues with other tools or systems.'
        w: '[AI] The `-w` option in Wireshark is used to specify a display filter expression for the capture. This means that only the packets matching the specified filter will be displayed in Wireshark when analyzing the captured data. For example, `-w "tcp port 80"` would only show traffic going to or from port 80 using the TCP protocol.'
        z: '[AI] The `wireshark -z` command is used in Wireshark, a popular network protocol analyzer tool, to display statistics about captured packets without having to decipher the details of each packet. The command followed by various filters can be used to query different types of statistics such as number of packets or bytes for specific protocols, source or destination addresses, or other criteria. For example, `wireshark -z interval,1s,10s,display filter "tcp.port == 80"` would display the number of packets and data volume for HTTP traffic during the last 10 seconds.'
