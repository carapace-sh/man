# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: push
description: save your local modifications to a new stash
flags:
    --no-keep-index: also apply to index
    --pathspec-file-nul: pathspec elemts are seperated by NUL
    --pathspec-from-file=: read pathspec from file
    -a, --all: also stash ignored and untracked
    -k, --keep-index: keep changed added to index
    -m, --message=: set description
    -p, --patch: interactively select hunks between HEAD and working tree
    -q, --quiet: suppress feedback messages
    -u, --include-untracked: also stash untracked
documentation:
    command: '[AI] `git stash push` is a Git command used to save your current changes in a stash, allowing you to apply them later. It doesn''t create a new stash; instead, it updates the most recent one with your current changes and pushes it to the stash list. This command is often used when you need to switch to another branch or resolve conflicts before keeping your changes.'
    flag:
        all: '[AI] `git stash push --all` is a Git command used to save all current changes in the working directory and the staging area into a new or existing stash. It allows you to temporarily store your work before switching to another branch without committing the changes. The "--all" option applies this operation to all branches or files that have local modifications. When you''re ready to come back to the saved changes, use `git stash apply` to retrieve and apply the stashed changes.'
        include-untracked: '[AI] The `git stash push --include-untracked` command is used to save all your current changes, both tracked and untracked files, into a git stash. This means that any modifications in both version-controlled and unversioned files will be saved for later application onto the working directory or another branch. The `--include-untracked` option makes git include untracked files in the stash, meaning they will not be lost when creating a new stash or when applying an old one.'
        keep-index: '[AI] `git stash push --keep-index` is a Git command used to save your current changes in a staging area or working directory without committing them, but keeping the index and the working directory as they are. This command creates a new stash entry on the top of the stack and applies any changes from the staging area or the working directory to the current branch. The `--keep-index` option ensures that the index and the working directory remain unchanged after the stashing process, allowing you to come back to the same state later.'
        message: '[AI] `git stash push` is a Git command used to save your current changes in a stash, allowing you to temporarily switch to another branch or commit without losing your work. The `--message` option allows you to provide a descriptive message for the stash, just like when committing, which can help keep track of the changes in the stash. The result is a saved set of changes that can be later applied back to the working directory using `git stash apply`.'
        no-keep-index: '[AI] `git stash push --no-keep-index` is a Git command used to save current changes in the working directory and index without creating a new stash object, instead overwriting the latest stash. The `--no-keep-index` option tells Git not to keep the current state of the index when creating the stash, resulting in a "dirty" stash that includes both the changes from the working directory and the changes from the last index state. This can be useful for temporarily saving work before switching branches or resolving conflicts.'
        patch: '[AI] `git stash push --patch` is a Git command used to save your current changes in a stash, but with an interactive session for reviewing and editing the changes before they are saved. When you use `git stash push`, Git creates a new stash, and when you add the `--patch` option, Git opens a text editor or pager where you can view and modify the changes before they are stashed. This allows you to ensure that the changes you want to save are correctly represented in the stash before they are hidden from your working directory.'
        pathspec-file-nul: |-
            [AI] `git stash push` is a Git command used to save changes in your working directory that aren't ready to be committed, but you want to keep them separate from the current branch. The `--pathspec-file-nul` option is an advanced usage of this command.

            When using the `--pathspec-file-nul` flag with `git stash push`, Git reads a file provided as an argument containing a list of paths to exclude from the stash. If this file is empty (null), Git will consider that no paths should be excluded and stash all changes in your working directory and index.

            In summary, `git stash push --pathspec-file-nul` saves all changes in your working directory and index into a stash, ignoring any specified path exclusions or using an empty file to exclude none.
        pathspec-from-file: '[AI] `git stash push --pathspec-from-file` is a Git command used to save your current changes in a stash, but only for specific files or paths instead of the entire working directory and index. The `--pathspec-from-file` option allows you to specify the list of files or paths to be included in the stash from a file. This can be useful when you want to stash changes for specific files while keeping others in your working directory.'
        quiet: '[AI] `git stash push --quiet` is a Git command used to save your current changes in a stash and then apply any new stashes on top of it. The `--quiet` option is used to suppress informational messages during the operation, making the command run silently in the background. Essentially, this command saves your work-in-progress changes into a stash and applies any newly created stashes without displaying notifications.'
