# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: switch
description: Switch branches
group: main
flags:
    --conflict=: conflict style (merge or diff3)
    --discard-changes: throw away local modifications
    --guess: second guess 'git switch <no-such-branch>'
    --ignore-other-worktrees: do not check if another worktree is holding the given ref
    --orphan=: new unparented branch
    --overwrite-ignore: update ignored files (default)
    --progress: force progress reporting
    --recurse-submodules?: control recursive updating of submodules
    -C, --force-create=: create/reset and switch to a branch
    -c, --create=: create and switch to a new branch
    -d, --detach: detach HEAD at named commit
    -f, --force: force checkout (throw away local modifications)
    -m, --merge: perform a 3-way merge with the new branch
    -q, --quiet: suppress progress reporting
    -t, --track: set upstream info for new branch
documentation:
    command: '[AI] `git switch` is a Git command used to change branches in a Git repository. It''s an alias for `git checkout`, which allows you to move from one branch to another. When you run `git switch <branch>`, Git will first attempt to create a new branch if it doesn''t exist. Then, it will set the HEAD pointer to the specified branch and switch your working directory to that branch. If the branch contains new commits not present in the current branch, Git will perform a "fast-forward" merge or fetch the missing commits if the branch is remote.'
    flag:
        conflict: '[AI] `git switch --conflict` is not a valid Git command. The closest Git commands related to handling merge conflicts are `git checkout --help` and `git merge --help`. When you use these commands with the `--allow-conflicts` or `--no-commit` option, Git will leave merge conflicts unresolved in the working directory for you to manually edit. If you encounter a conflict while performing an operation such as checking out a branch or merging branches, Git will notify you and mark the conflicting files with the "U" or "M" state. You can then open those files and resolve the conflicts by editing the conflicting sections, saving the file, and then committing the changes using `git add` and `git commit`. If you want to explicitly check for unresolved merge conflicts without making any changes, use `git status --conflicts` instead.'
        create: '[AI] `git switch --create` is a Git command used to create and checkout a new, uninitialized branch at a specific commit. This command first creates a new branch with the given name and then immediately checks out that new branch. The new branch starts from the current head commit. It''s useful when you want to create a new branch based on an existing branch or a specific commit and start working on it right away.'
        detach: '[AI] `git switch --detach` is a Git command used to create and checkout a new, independent branch from the current HEAD commit. In other words, it detaches the head pointer from the branch and moves it directly to the selected commit, creating a new "detached HEAD" state. This allows for manual committing and editing of the repository history without being tied to an existing branch. Be cautious when using this command, as changes made in this state will not be automatically merged back into any branches unless explicitly done so.'
        discard-changes: '[AI] `git switch --discard-changes` is a Git command used to discard any local changes in the working directory and checkout a new branch or reset to a previous commit. When you run this command, Git will cleanly switch to another branch without committing any local modifications. Any uncommitted changes will be lost. This can be useful when you''ve made incorrect changes or want to start fresh on a new branch.'
        force: '[AI] `git switch --force` is a Git command used to change branches forcefully. When you use this command, Git switches to the specified branch even if there are uncommitted changes in your working directory or staging area. This can lead to losing unsaved changes as the new branch may have different commit history. It''s essential to be cautious when using this command as it can result in data loss if not used correctly.'
        force-create: '[AI] The `git switch --force-create` command is used to create a new branch in Git without checking if there''s an existing branch with the same name. When you run this command followed by a branch name, Git will create a new branch with that name, even if it already exists. This can be useful when you want to forcefully create a new branch from an arbitrary commit, but be aware that using this command can overwrite existing branches without warning.'
        guess: '[AI] `git switch --guess` is a Git command used to attempt to perform an automatic checkout of a branch based on the current HEAD commit. It tries to guess which branch the user intends to checkout based on the current branch and the commits in the history leading up to it. If the guessed branch matches the intended one, the checkout will proceed. Otherwise, Git will leave the repository in its current state, and the user would need to specify the branch name explicitly using `git checkout <branch>`.'
        ignore-other-worktrees: '[AI] The `git switch --ignore-other-worktrees` command is a Git command used to checkout a branch while ignoring any other worktrees in the repository. Worktrees are separate active working directories for the same project under one Git repository. This command allows checking out a branch without raising an error when there are existing worktrees that would be affected by the switch. It is particularly useful in cases where multiple developers have independent worktrees for a project and need to switch branches while preserving their local changes in other worktrees.'
        merge: '[AI] `git switch --merge` is a Git command used to perform a "fast-forward" merge and switch to a new branch at the same time. It''s essentially an alias for `git checkout -- <branch> -- <commit>` followed by a `git merge Fetch-point`. The ''--merge'' flag instructs Git to attempt a fast-forward merge if possible, but if there are any conflicts, it will pause and allow you to resolve them manually before completing the switch to the new branch. This command is particularly useful when merging branches that have minimal or no differences.'
        orphan: '[AI] `git switch --orphan` is a Git command used to create a new branch from an existing commit without keeping any existing files in the working directory or staging area. The "--orphan" option creates a new, empty branch with the given initial commit as its parent. This can be useful when initializing a new project branch from an existing commit, but wanting to discard all current changes and start fresh. After running this command, you should manually add and commit new files using `git add` and `git commit`.'
        overwrite-ignore: '[AI] The `git switch --overwrite-ignore` command is used when you try to checkout a branch or a commit that has changes in the working directory that are not present in the index or the HEAD of the desired branch. This command allows you to overwrite those uncommitted changes with the new version from the branch, ignoring any local modifications that conflict with the new branch. It''s important to note that using this command will discard any local changes that are not tracked by Git.'
        progress: '[AI] `git switch --progress` is a Git command used to start an interactive rebase session with the current branch as the base and the next branch or commit as the first parent. It enables users to inspect and modify the commits being rebased one by one before they are applied to the current branch. This command does not automatically apply the commits, allowing for more control during the rebasing process.'
        quiet: '[AI] `git switch --quiet` is a Git command used to change branches silently. It''s similar to `git checkout`, but with the `--quiet` option, Git does not print any messages about leaving or entering a branch during the switch operation. This can be useful when you want to perform multiple branch switches in a script without having the console cluttered by messages.'
        recurse-submodules: '[AI] `git switch --recurse-submodules <branch>` is a Git command used to checkout a specified branch while also updating all of its recursive submodules to match their counterpart branches. Submodules are separate Git repositories that can be stored within another Git repository, allowing for complex project structures. By using `--recurse-submodules`, you ensure both the main and submodule projects are synchronized with their respective branches during a checkout operation.'
        track: |-
            [AI] The `git switch --track` command is used to create a new branch and immediately set it up to track a specific remote branch. This is also known as a "fast-forward" branch, where the local branch directly follows the remote branch. It's typically used when creating a new branch from an existing remote branch to keep them in sync. When you run `git switch --track <remote> <new_branch>`, Git will do the following:

            1. Create a new local branch with the given name.
            2. Set the upstream relationship of the new branch to track the specified remote branch.
            3. Switch the working directory to the new branch, so you can start making commits on it.
