# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Installs a list of packages into a specified conda environment
flags:
    --all: Update all installed packages in the environment.
    --clobber: Allow clobbering of overlapping file paths within packages, and suppress related warnings.
    --copy: Install all packages using copies instead of hard- or soft-linking.
    --dev: Use `sys.executable -m conda` in wrapper scripts instead of CONDA_EXE.
    --download-only: Solve an environment and ensure package caches are populated
    --file*=: Read package versions from the given file.
    --force-reinstall: Ensure that any user-requested package for the current operation is uninstalled and reinstalled
    --freeze-installed: Do not update or change already-installed dependencies.
    --json: Report all output as json.
    --no-channel-priority: Package version takes precedence over channel priority.
    --no-deps: Do not install, update, remove, or change dependencies.
    --no-pin: Ignore pinned file.
    --no-update-deps: Do not update or change already-installed dependencies.
    --offline: Offline mode.
    --only-deps: Only install dependencies.
    --override-channels: Do not search default or .condarc channels.
    --repodata-fn=: Specify name of repodata on remote server.
    --revision=: Revert to the specified REVISION.
    --show-channel-urls: Show channel urls.
    --strict-channel-priority: Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.
    --update-all: Update all installed packages in the environment.
    --update-deps: Update dependencies.
    --update-specs: Update based on provided specifications.
    --use-local: Use locally built packages. Identical to '-c local'.
    -C, --use-index-cache: Use cache of channel index files, even if it has expired.
    -S, --satisfied-skip-solve: Exit early and do not run the solver if the requested specs are satisfied.
    -c, --channel=: Additional channel to search for packages.
    -d, --dry-run: Only display what would have been done.
    -h, --help: Show this help message and exit.
    -k, --insecure: Allow conda to perform "insecure" SSL connections and transfers.
    -m, --mkdir: Create the environment directory if necessary.
    -n, --name=: Name of environment.
    -p, --prefix=: Full path to environment location (i.e. prefix).
    -q, --quiet: Do not display progress bar.
    -v, --verbose: Once for INFO, twice for DEBUG, three times for TRACE.
    -y, --yes: Do not ask for confirmation.
documentation:
    command: '[AI] `conda install` is a command used in Anaconda or Miniconda distributions for managing and installing software packages. It works by adding dependencies, creating environments, and managing package versions within the Conda environment management system. Users can specify one or more packages to install along with their version numbers, channels, and optional flags to modify installation behavior. For instance: `conda install numpy pandas scipy`. This command will download, build (if necessary), and install NumPy, Pandas, and SciPy packages along with any required dependencies within the default environment.'
    flag:
        all: '[AI] `conda install --all` is a command used in Anaconda or Miniconda distributions to install all the packages currently listed in your environment''s `environment.yml` or `environment.json` file. This command reads the specified file and attempts to install each mentioned package and their dependencies using the conda package manager. It is often used when setting up new environments from configuration files, ensuring a specific set of packages is consistently installed across different systems.'
        channel: '[AI] The `conda install` command is used to install packages in Anaconda or Miniconda environments. The `--channel` option specifies a particular Conda channel from which to install packages, in addition to the default channels. Channels are repositories of packages that may include newer versions, beta releases, or specific packages not available in the default channels. By including `--channel <channel-name>`, you can install packages directly from that specified channel.'
        clobber: '[AI] The `--clobber` flag is a command-line option for the Conda package manager. It is used to forcefully reinstall packages and their dependencies from scratch, overwriting any existing files in the process. This can be helpful when dealing with corrupted installations or configuration issues. However, it should be used with caution as it will delete any modified or custom files that were not intended to be part of the package installation. In summary, `conda install --clobber` is a powerful option to start from a clean slate in Conda environments.'
        copy: '[AI] The `conda install` command is a popular tool for managing packages and environments in Anaconda or Miniconda distribution of Python and R data sciences stack. The `--copy` option that follows this command instructs conda to create local copies of installable packages from the current default channels before performing installation. This means that the packages are first downloaded from their original sources and saved locally, then they are installed into the environment. By doing so, it ensures a reproducible build environment as the exact same packages will be used for future installations, even if the internet connection is not available later on or the packages get updated.'
        dev: '[AI] The `conda install` command is used to install packages in Anaconda or Miniconda environments. The `--dev` (short for --develop) flag is optional and instructs the Conda environment to install a package from source, rather than from the default channels or local cache. This flag is typically used when installing packages that are not yet available as pre-built packages in the Conda repository, such as those under active development. The `--dev` flag will clone the Git repository associated with the package and build it locally before installing.'
        download-only: '[AI] `conda install` is a command used in Anaconda distribution for installing packages and their dependencies in conda environments. The option `--download-only` tells conda to download the packages and their dependencies without actually installing them. This can be useful when you want to save time by downloading packages offline or before setting up a new system. Once the files are downloaded, you can create a new environment and install the packages using the `conda install` command with the downloaded files as the source.'
        dry-run: '[AI] `conda install --dry-run` is a command used in Anaconda or Miniconda environments for testing package installations without actually installing them. The `--dry-run` flag displays the packages that would be installed, their versions, and the net effect on the environment, allowing users to review the changes before executing the installation in real life.'
        file: |-
            [AI] `conda install` is a command-line utility in Anaconda distribution for managing and installing packages and environments. The option `--file` allows you to specify one or more files containing a list of packages to be installed instead of specifying them individually on the command line. This can be useful when managing large lists of dependencies or creating reproducible environments. For example, if you have a file named `my_packages.txt` with the following content:

            ```
            numpy
            scipy
            matplotlib
            ```

            You can install these packages by running:

            ```bash
            conda install --file my_packages.txt
            ```
        force-reinstall: '[AI] The `conda install` command with the `--force-reinstall` flag is used to force a reinstallation of a specific package in Anaconda or Conda environments. This means that Conda will uninstall the current version of the package and then reinstall it from the ground up, potentially resolving issues such as corrupted files or dependency conflicts. It is important to note that this command should be used with caution as it may remove custom configurations or saved data associated with the package.'
        freeze-installed: '[AI] The `conda install` command with the `--freeze-installed` option is used to install specific versions of packages that are currently active in the current Conda environment. This means that it will not modify or update the existing installed packages unless their specified version matches the desired one. It essentially "freezes" the current package versions in place, ensuring consistency across different runs of a Conda-based application.'
        help: '[AI] `conda install --help` is a command used in Anaconda or Miniconda distribution of Python and its packages management system, Conda. This command, when run in a terminal or command prompt, displays comprehensive help information about the "install" subcommand. It explains how to use it to install new packages or environments using Conda, with options for specifying the package name, version, channel(s), file location for offline installation, and other relevant parameters.'
        insecure: '[AI] The `conda install` command with the `--insecure` flag is used to bypass Conda''s security checks when installing packages from external sources or untrusted repositories. This can be risky as it may introduce vulnerabilities or incompatible software into your environment. Use this option with caution and only when you trust the source of the packages.'
        json: '[AI] `conda install` is a command-line tool for managing packages and environments in Anaconda distribution. The option `--json` requests that output be printed in JSON format. This means that instead of the default tabular text output, the command will produce a JSON object containing metadata about the installed package or environment, such as its name, version, size, description, and dependencies.'
        mkdir: '[AI] The `conda install` command is a popular tool in the Anaconda distribution for managing and installing packages and dependencies for various data science and scientific computing projects. The option `--mkdir` creates a new directory to contain the freshly installed packages before executing the installation process. In summary, `conda install --mkdir <package_name>` will create a new directory if it does not exist and then proceed to install the specified package inside that directory.'
        name: '[AI] The `conda install` command is used to install packages in Anaconda or Miniconda distribution of Python. The option `--name <name>` specifies the name for a new or existing conda environment. When creating a new environment, this argument sets its name. For example, `conda install --name myenv`. When listing or activating an environment, use just `conda activate myenv`.'
        no-channel-priority: '[AI] The `conda install` command with the `--no-channel-priority` option tells Conda to give equal priority to all channels specified in the default configuration file and in the environment''s `channels` file, instead of respecting the channel priority order defined by the configuration files. This can be useful when dealing with multiple versions or packages from different channels that need to be installed without any conflicts or prioritization issues.'
        no-deps: '[AI] The `conda install` command with the `--no-deps` flag is used when installing a package in Anaconda or Conda environments without resolving and installing its dependencies. This can be useful when you know that specific dependencies are already available in your environment or when you want to install a package in an isolated way, without affecting other packages'' dependencies. It installs only the requested package, skipping the dependency resolution step.'
        no-pin: '[AI] The `conda install` command with the `--no-pin` flag tells Conda not to use pinning when installing packages. Pinning is a feature in Conda that locks the specific version of a package to be installed based on the given version number or hash. With `--no-pin` turned off, Conda will instead choose the latest compatible version available from the default and/or priority channels. This can sometimes lead to installing newer packages than what is currently pinned but may also bring in unintended dependencies or changes.'
        no-update-deps: '[AI] The `conda install` command is used in Anaconda or Miniconda environments for installing new packages and their dependencies. The `--no-update-deps` option is an argument that can be passed to this command to instruct Conda not to update the existing dependencies of other installed packages during installation. This allows you to keep your existing package versions unchanged, which can be useful when testing specific package configurations or dependencies.'
        offline: '[AI] `conda install --offline` is a command used in Anaconda or Miniconda distribution of Python for creating an offline package cache. This means that instead of connecting to the Conda servers each time to install new packages, the necessary packages and their dependencies are downloaded and stored locally during the initial run of this command. In subsequent uses, `conda install` can be run without internet connection by using the locally saved packages in the offline cache. This is useful for environments where reliable internet access may not be available or to speed up installations.'
        only-deps: '[AI] The `conda install` command with the `--only-deps` option is used to install only the dependencies of a given package, without installing the package itself. This can be useful when you want to ensure that specific dependencies are installed and up-to-date for a particular project or environment in Conda. The flag filters out the installation of the main package and focuses only on the dependencies listed in the metadata file associated with that package.'
        override-channels: '[AI] The `conda install` command with the `--override-channels` flag is used to install a package from a specific channel, even if there''s a version in the default channels that has priority. This can be useful when you want to forcefully install a particular version of a package from an external channel or a local conda environment. The command looks like this: `conda install <package-name> --override-channels <channel-url>`. Note that using `--override-channels` can potentially conflict with other conda environments, so use it with caution.'
        prefix: '[AI] The `conda install` command is used to install packages in Anaconda and Miniconda environments. The `--prefix` flag specifies the installation prefix directory for the package. By default, packages are installed in the base environment''s site-packages directory. However, using `--prefix` allows you to install packages into a specific virtual environment or custom location. For example, `conda install --prefix /path/to/new/environment package_name` installs the package in the given new environment directory instead of the default one.'
        quiet: '[AI] `conda install --quiet` is a command used in Anaconda or Miniconda distributions to install packages silently. The `--quiet` flag suppresses the progress bar and installation messages, providing a quiet installation process. This option can be useful for automating scripting or batch installation processes where verbosity is not required.'
        repodata-fn: '[AI] `conda install` is a command used in Anaconda or Miniconda distribution of Python and other data sciences tools to install, manage, and update packages. The option `--repodata-fn` specifies the filename for the local Conda repository metadata file to be used during installation. This can be useful when working offline or with custom repositories, as it allows specifying a local file instead of downloading the metadata from remote servers. For example, `conda install package_name --repodata-fn /path/to/metadatafile.json` would install "package\_name" using the Conda repository metadata stored in "/path/to/metadatafile.json".'
        revision: '[AI] The `conda install` command is used to install packages in Anaconda and Conda environments. The `--revision` option specifies that the package should be installed from a specific revision in the Conda Forge or Anaconda Cloud channels. This can be useful when you want to install a specific version of a package that may not be available as a tagged release. The revision number is typically obtained from the output of `conda search` or `anaconda list --verbose`. For example, `conda install --revision 12345678 my_package` would install the package "my\_package" using revision 12345678.'
        satisfied-skip-solve: '[AI] `conda install --satisfied-skip-solve` is a command used in Anaconda or Miniconda distribution of Python for package management. It bypasses the solver during installation and uses the cached packages that have already been downloaded and satisfy the specified dependencies, instead of solving them again from scratch. This can be useful when you want to forcefully install specific packages without interference from other dependencies or conflicts. However, it is important to note that using this command may bypass potential dependency resolution issues and could lead to inconsistencies in your environment if not used carefully.'
        show-channel-urls: '[AI] The `conda install` command with the option `--show-channel-urls` does not install any packages but instead prints out the URLs of the Conda channels currently being used or that can be added for package installation. These channels are repositories where Conda looks for packages to download and install. Knowing the channel URLs can be useful for managing your Conda environment, troubleshooting package installation issues, or setting up a private Conda environment using custom channels.'
        strict-channel-priority: '[AI] `conda install` is a command used in Anaconda and Miniconda distributions to install packages or dependencies in conda environments. The `--strict-channel-priority` option modifies the package installation process by ensuring that conda resolves dependencies from channels with higher priority levels before considering those with lower priority. This can prevent conflicts or inconsistencies in the installed packages, as it ensures that dependencies are sourced from trusted and reliable channels first.'
        update-all: '[AI] `conda install --update-all` is a command used in Anaconda or Miniconda environments for updating all installed packages to their latest versions. It performs an automatic dependency resolution, meaning it will also update any dependencies of the packages being updated. This command should be run with caution as it may result in significant changes to your environment, especially if there are compatibility issues between updated packages.'
        update-deps: '[AI] `conda install --update-deps` is a command used in Anaconda or Miniconda environments to update the dependencies of currently installed packages. It does not install new packages but instead updates the dependency versions to their latest compatible ones, ensuring that all dependencies are up-to-date and working together effectively.'
        update-specs: |-
            [AI] `conda install --update-specs` is a command used in Anaconda or Miniconda environments for managing condas packages' specifications. It updates the Conda metadata (i.e., the recipe files) of installed packages, allowing users to:

            1. Override specific package versions with newer or older ones.
            2. Install packages from different channels or repositories.
            3. Use specific package build numbers or hashes.
            4. Fulfill dependency requirements more precisely.

            By using this command, you're not updating the actual installed packages but rather the Conda metadata that describes how to install and manage them. This can be helpful when dealing with conflicts between different package versions or when needing to lock down specific package configurations for reproducible environments.
        use-index-cache: '[AI] The `conda install` command with the `--use-index-cache` option instructs the Anaconda distribution''s package manager, Conda, to use local index caches instead of fetching packages from remote servers. This can save time by reducing network traffic and download times if you have previously installed or updated packages from these repositories. It is especially useful for offline environments where internet access is limited or unreliable.'
        use-local: '[AI] The `conda install` command with the `--use-local` flag is used in the Anaconda distribution for installing packages from local files instead of fetching them from the default Conda channels. This flag can be helpful when using custom or proprietary packages that are not available online, or when working offline. It tells Conda to prioritize finding and installing packages from the local cache or directories before accessing the remote repositories.'
        verbose: '[AI] `conda install` is a command used in Anaconda distribution for installing packages or dependencies in a conda environment. The `--verbose` option increases the amount of output displayed during the installation process, providing detailed information about each step taken by conda. This includes the package name and version being installed, the source from which it is being downloaded, and any progress updates.'
        "yes": '[AI] The `conda install` command is used in Anaconda or Miniconda distributions to install packages or dependencies for Python and other projects. The `--yes` flag is an option that allows the installation to proceed without prompting for confirmation before executing each step. In other words, it automatically accepts all prompts and confirms every action with a yes response. This can be useful when running scripts or automating installations.'
