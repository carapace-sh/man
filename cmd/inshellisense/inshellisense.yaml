# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: inshellisense
description: IDE style command line auto complete
flags:
    --history: get the last command execute
    -c, --command=: command to use as initial input
    -d, --duration=: duration of the autocomplete session
    -h, --help: display help for command
    -s, --shell=: shell to use for command execution
    -v, --version: output the current version
documentation:
    command: '[AI] `InShellISession` is a PowerShell cmdlet that enables or disables IntelliSense functionality in PowerShell Console and PowerShell ISE (Integrated Scripting Environment) sessions. IntelliSense provides real-time suggestions, completions, and error underlining while typing commands and scripts. Enabling `InShellISession` improves the productivity and usability of PowerShell environments by providing context-aware assistance during scripting and command execution. To use it, simply call `Enable-HostApplication` cmdlet with the `-Force` parameter to enable IntelliSense in current session: `Enable-HostApplication -Force`. Conversely, you can disable IntelliSense with `Disable-HostApplication` cmdlet: `Disable-HostApplication`.'
    flag:
        command: '[AI] `inshellisense` is a Visual Studio Code extension that provides IntelliSense features for custom shell commands. The `--command` option is used to specify the command or script file to be executed and for which IntelliSense suggestions should be provided. When you type in the terminal, VSCode will use the information from this command to provide context-specific completions and other IntelliSense features, enhancing the user experience of working with custom shell commands within the editor.'
        duration: '[AI] The `--duration` flag for the Visual Studio Code Insights Extension (`inshellisense`) specifies the duration threshold for reporting performance issues related to extension input processing and output rendering. For example, if you set the duration to 10 milliseconds, any processing that takes longer than 10ms will be reported as a potential issue. This flag helps developers identify and optimize the performance of their extensions.'
        help: '[AI] `inshellisense --help` is a command used in Visual Studio Code (VSCode) for displaying help information about the Insight Languages Extension, also known as "Insight" or "Ishellisense". This extension provides IntelliSense features like syntax highlighting, autocompletion, and hover information for various markup languages and text-based configuration files. The `--help` flag is used to show a detailed description of the command''s usage, available options, and their meanings. It assists users in understanding how to effectively use and configure this extension within VSCode.'
        history: '[AI] `inshellisense --history` is a command for the PowerShell Integrated Shell (ISE) module. This command displays the history of previously executed commands or scripts within the ISE environment. It allows users to easily access and reuse previous commands, improving productivity and efficiency in PowerShell scripting.'
        shell: '[AI] The `inshellisense --shell` command is a feature of the Visual Studio Code (VSCode) extension called "IntelliSense" which provides smart completions and other code-assistance features in real time as the user types. The `--shell` flag specifically enables the IntelliSense mode for shell scripts, enabling it to provide suggestions, documentation, and other features tailored for shell scripting languages like Bash or PowerShell.'
        version: '[AI] `inshellisense --version` is a command used in the PowerShell scripting language to retrieve the version information of the Inline SCRIPT SHell IntelliSense (ISSH) module. ISSH provides IntelliSense support for PowerShell scripts written directly in the console or in an Integrated Development Environment (IDE). By running this command, you can determine which version of ISSH is currently installed and available for use.'
