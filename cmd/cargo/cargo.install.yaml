# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Install a Rust binary
group: package
flags:
    --all-features: Activate all available features
    --bin*=: Install only the specified binary
    --bins: Install all binaries
    --branch=: Branch to use when installing from git
    --debug: Build in debug mode (with the 'dev' profile) instead of release mode
    --example*=: Install only the specified example
    --examples: Install all examples
    --git=: Git URL to install the specified crate from
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --index=: Registry index to install from
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --list: list all installed packages and their versions
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --no-track: Do not save tracking information
    --path=: Filesystem path to local crate to install
    --profile=: Install artifacts with the specified profile
    --registry=: Registry to use
    --rev=: Specific commit to use when installing from git
    --root=: Directory to install packages into
    --tag=: Tag to use when installing from git
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --version=: Specify a version to install
    -F, --features*=: Space or comma separated list of features to activate
    -f, --force: Force overwriting existing crates or binaries
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo install` is a command used in Rust programming language''s build system, Cargo. It downloads and installs a new version of a dependency or crate directly from the crates.io registry, making it available for use in your project without having to add it manually to your `Cargo.toml` file. This is particularly useful when working with out-of-date dependencies or trying out new versions of libraries before stabilizing on one.'
    flag:
        all-features: '[AI] `cargo install --all-features` is a command used in Rust programming language''s build system, Cargo. It installs all the features of a crate (Rust package) and its dependencies, making them available system-wide. This allows for easy access to the latest version of a library and all its optional features without having to manage dependencies manually.'
        bin: '[AI] `cargo install --bin` is a command used in Rust programming language''s package manager, Cargo. This command is used to install or update a binary (executable) from a Git repository or local project, rather than just downloading its source code. When you run this command, Cargo will checkout the desired version of the repository (if it''s not already cloned), build the project and place the binary in your `$PATH`. This makes it easily accessible for execution.'
        bins: '[AI] `cargo install --bins` is a command used in Rust programming language''s package manager, Cargo. This command downloads and installs executable binaries of packages specified in a project''s Cargo.toml file using the registry at crates.io. The `--bins` flag specifies that only the binary (executable) targets should be installed, not the library dependencies themselves. This is useful when you want to use specific versioned binaries in your system path, rather than managing dependency versions yourself.'
        branch: '[AI] `cargo install --branch` is a command used in Rust programming language''s package manager, Cargo. This command is used to install a specific branch of a crate (Rust library or executable) from a Git repository instead of the default, usually `master` or `main`, branch. The git URL of the crate should be provided as an argument to this command for successful installation.'
        debug: '[AI] `cargo install --debug` is a command used in Rust programming language''s build system, Cargo. It downloads and compiles the source code of a package from the crates.io registry with debugging symbols enabled, placing it into the local `$CARGO_HOME/bin` directory for execution. These debugging symbols facilitate attaching a debugger during runtime for detailed inspection and analysis of program behavior.'
        example: '[AI] `cargo install --example` is a command used in Rust programming language''s build system, Cargo. This command downloads and installs an example project from the registry of crates.io as a local dependency. The `--example` flag tells Cargo to search for examples instead of regular crates when adding the dependency. Once installed, it can be used in your Rust project by adding the appropriate import statement in your code.'
        examples: '[AI] `cargo install --examples` is a command used in Rust programming language''s package manager, Cargo. This command downloads and builds the examples that come with crates (Rust libraries or executables) and installs them as standalone binaries on your system. These installed examples can then be easily run from anywhere without needing to build the crate every time.'
        features: '[AI] `cargo install --features` is a command used in Rust programming language''s package manager, Cargo. It installs a crate (Rust library or binary) from sources, and enables specific features defined in the crate''s `Cargo.toml` file by passing the `--features` flag followed by a comma-separated list of feature names. This allows fine-grained customization of the installed package without having to include all features in every use case.'
        force: '[AI] `cargo install --force` is a command used in Rust programming language''s package manager, Cargo. This command is used to install or update a local dependency with the given crate name forcefully. The `--force` flag overrides any existing version of the dependency and replaces it with the new one, regardless of any potential version compatibility issues. It''s important to use this command carefully as it could potentially introduce incompatibilities or break the project if used on dependencies that have major version changes without proper consideration.'
        git: '[AI] `cargo install --git` is a command used in Rust programming language''s package manager, Cargo. This command installs a crate (Rust library or executable) from a Git repository instead of a local or Crates.io registry package. The `--git` flag tells Cargo to clone the specified Git repository and then build and install the project. This is useful when working with crates that are not yet published, or have specific modifications that are required.'
        help: |-
            [AI] `cargo install` is a command-line tool provided by Rust's package manager Cargo. This specific command is used to install a dependency defined in a project's `Cargo.toml` file as a local binary or library, making it available for use in the project without having to add it to the system's package manager or download it from a registry each time.

            The `--help` flag is optional and can be appended to any command to display detailed help information about its usage. In the case of `cargo install --help`, it will output an explanation of the command, its available options, and usage examples. This can be useful for quickly understanding how to use the command correctly and effectively in your project.
        ignore-rust-version: '[AI] `cargo install` is a command-line tool for installing Rust packages, similar to npm or yarn for JavaScript. The `--ignore-rust-version` flag is an option that can be passed to this command to bypass version checking of the Rust language itself. This means that Cargo will install the specified package without checking if the installed Rust version matches the one required by the package. It''s useful when dealing with multiple Rust projects with different dependencies on Rust versions.'
        index: '[AI] `cargo install` is a command-line tool for the Rust programming language''s package manager, Cargo. The `--index` option specifies that Cargo should install packages listed in an index (a remote registry like crates.io) instead of from the local file system or Git repository. When used with `cargo install`, this flag downloads and compiles the specified packages before installing them as executables or libraries for use in your project.'
        jobs: '[AI] `cargo install --jobs` is a command used in Rust programming language''s package manager, Cargo. It downloads and builds a specific crate (package) from the Crates.io registry. The `--jobs` flag enables multiple background jobs for building the project concurrently, speeding up the installation process on multi-core systems.'
        keep-going: '[AI] `cargo install --keep-going` is a command used in Rust programming language''s package manager, Cargo. This command is used to install dependencies for a project without stopping when encountering an error or a dependency that requires user input. The `--keep-going` flag allows the installation process to continue automatically and attempt to install the next dependency, even if one fails or requires intervention. It can be useful for large projects with many dependencies or for automated build systems. However, it may result in the installation of dependencies with unintended consequences or missing required user input, so its use should be approached with caution.'
        list: '[AI] `cargo install --list` is a Cargo command used in Rust programming language''s build system. It lists out all the packages that have been installed using Cargo as dependencies for the current project, without downloading or installing any new packages. The output typically includes the package name, version number, and registry URL. This can be useful for checking which dependencies are currently being used in a project.'
        message-format: '[AI] `cargo install` is a command-line tool used in Rust programming for managing dependency installation and building projects. The `--message-format` flag is an option that specifies the format of the output messages during the installation process. By default, Cargo uses its own formatting style for progress reports and error messages. However, by using this flag, you can change the output format to other popular styles like JSON or plain text. For example, `--message-format=json` will produce an output in JSON format that can be easily parsed by scripts and automation tools.'
        no-default-features: |-
            [AI] The `cargo install` command is a popular way to build and install Rust projects using Cargo, Rust's package manager. The `--no-default-features` flag is an option that can be passed when using this command.

            When you run `cargo install`, Cargo will by default install all the features of the project's dependencies as well. However, with `--no-default-features`, only the core functionality of the dependencies will be installed, and none of their optional features will be included. This can help keep your installation leaner and more focused on the required components.

            In summary, using `cargo install --no-default-features` instructs Cargo to install only the essential parts of the project's dependencies without including any additional features.
        no-track: '[AI] The `cargo install` command is a package manager for the Rust programming language. The `--no-track` flag disables automatic package version tracking when installing or updating packages. Instead, it downloads and installs the exact package version specified in the Cargo.toml file for your project. This can be useful when you want to pin a specific package version for consistency across multiple projects or development environments.'
        path: '[AI] `cargo install --path` is a command used in Rust programming language''s package manager, Cargo. This command installs a local Rust project as a global package, using the given path to the project directory instead of the default one found in Cargo.toml file. It creates a symlink at `~/.cargo/bin` allowing easy access to the installed executable or library from the terminal.'
        profile: '[AI] `cargo install` is a command-line tool used in Rust programming for building and installing packages. The `--profile` option is used to specify a Cargo profile to use during the installation process. Profiles are configurations that contain settings like dependencies, build features, and target triples. They can be used to customize the behavior of Cargo for specific projects or environments. By using `--profile`, you can install a package with the specified configuration instead of the default one.'
        quiet: '[AI] `cargo install --quiet` is a command used in Rust programming language''s package manager, Cargo. It installs dependencies for a project quietly, without displaying progress messages during the installation process. This can be useful when running automated scripts or scripts that require minimal user interaction.'
        registry: '[AI] `cargo install --registry` is a command used in Rust programming language''s package manager, Cargo. This command is used to install a specific version of a Rust crate from the Crates.io registry. The "--registry" option specifies that the source of the crate should be searched from the Crates.io registry by default. If no other repository or local path is provided, Cargo will download and install the crate directly.'
        rev: '[AI] `cargo install --rev` is a command used in Rust programming language''s package manager, Cargo. This command is used to install or update a specific revision of a crate (Rust library or executable) from the Git repository. The Git revision can be provided as an argument following the `--rev` flag. For example, `cargo install my-crate --rev my-branch` will install or update the crate using the specified Git branch. This command allows users to have exact control over which version of the crate they use in their project.'
        root: '[AI] `cargo install --root` is a command used in Rust programming language''s build system, Cargo. This command installs a package from the crates.io registry or a local git repository as a dependency of another project, setting the root directory of that project as the installation prefix. The effect is that the installed package and its dependencies will be placed under the specified root directory instead of the default location. This can be useful for managing multiple projects with different dependencies in a single workspace while keeping the installations isolated from each other.'
        tag: '[AI] `cargo install --tag` is a command used in Rust programming language''s package manager, Cargo. This command downloads and installs a specific version of a crate (Rust library or executable) from the Crates.io registry based on its tagged release. The `--tag` flag specifies the desired tag to use for installation.'
        target: '[AI] `cargo install` is a command-line tool used in Rust programming for package management. The `--target` option specifies the target platform or architecture for building and installing the package locally. For example, `cargo install --target x86_64-pc-windows-msvc` would build and install the package for a 64-bit Windows system using Microsoft Visual Studio as the compiler. This allows developers to create customized builds tailored to their specific environments.'
        target-dir: '[AI] `cargo install` is a command used in Rust programming language for building and installing packages, managed by Cargo build tool. The `--target-dir` option specifies the directory where the installed binary or library will be placed. Instead of system-wide installation or default location, this flag allows selecting a custom directory for the installation.'
        timings: '[AI] `cargo install --timings` is a command used in Rust programming language''s package manager, Cargo. This command installs a Rust dependency with timings data. The timings data is collected during the build process and provides detailed information about how long each stage of the build took. It can be useful for understanding the performance characteristics of a project and for identifying bottlenecks.'
        version: '[AI] `cargo install --version` is a command used in Rust programming language''s package manager, Cargo. This command is not for checking the version of Cargo itself but instead for installing a Rust crate (a library or executable project) using a specific version mentioned in the command. If no version is specified, it will use the latest version available in the registry. This command downloads and compiles the source code from the registry before installing it locally in your system''s cache for reuse during build processes.'
