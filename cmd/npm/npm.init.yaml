# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: init
description: Create a package.json file
flags:
    --if-present: ""
    --scope: create scoped package
    --workspaces: Enable running a command in the context fo all workspaces
    -f, --force: remove various protections against unfortunate side effects
    -w, --workspace*=: Enable running a command in the context of the given workspace
    -y, --yes: automatically answer yes to any prompts
documentation:
    command: '[AI] `npm init` is a command used to create a new package file (package.json) for Node.js projects. It prompts you to input essential information such as the project name, version, description, entry point, tests command, repository, author, and license. Once executed, it generates and saves the provided details into a package.json file at the root directory of your project.'
    flag:
        force: '[AI] `npm init --force` is a command used in Node.js package management with npm (Node Package Manager). It creates a new `package.json` file or updates an existing one interactively, bypassing prompts for each field with default values or the current values if a file already exists. This can be useful when you want to generate or update a `package.json` file without being prompted for every field. However, be cautious as this command will overwrite any existing fields in your `package.json` file without confirmation.'
        if-present: '[AI] The `npm init --if-present` command is a shorthand version of creating or updating a package.json file for an existing npm project. If a package.json file already exists in the current directory, it will be used and updated instead of creating a new one from scratch. This can save time when working on projects where the package.json file contents rarely change.'
        scope: '[AI] `npm init --scope` is a command used in Node.js package management with npm (Node Package Manager). This command initializes a new npm package project and sets the scope, which is a prefix for the package name in the npm registry. This is useful when creating multiple packages that belong to the same organization or monorepo, as it keeps their namespaces separate. For example, `--scope=myorg` would result in a package name like `myorg/mypackage`.'
        workspace: '[AI] `npm init --workspace` is a command used with Node.js''s package manager, npm. This command initializes a new workflow for managing multiple packages within a single root directory, also known as a monorepo (Monolithic repository). It creates a `package.json` file for the root directory and sets up symlinks or references to each individual package''s `package.json`, allowing them to share common dependencies and build scripts across the workspace. This can be beneficial in managing large, complex projects with multiple interconnected packages.'
        workspaces: '[AI] `npm init --workspaces` is a command used in Node.js projects with multiple packages under one root directory. It initializes a new npm workspace, which allows managing and publishing multiple independent packages from the same repository. This command sets up the necessary `package.json` files for each package, links them together, and enables automatic installation of common dependencies across the entire workspace using `package-lock.json`. By default, all packages share the same `node_modules` directory and can have inter-project dependencies defined in their own `package.json` files.'
        "yes": '[AI] `npm init --yes` is a command used in Node.js package management with npm (Node Package Manager). It creates a new `package.json` file in the current directory with default settings and saves it to the Git repository or local file system, bypassing the interactive prompt for inputting various fields like name, version, description, etc., thereby making the process quicker and more automated.'
