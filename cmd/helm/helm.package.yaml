# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: package
description: package a chart directory into a chart archive
group: main
flags:
    --app-version=: set the appVersion on the chart to this version
    --key=: name of the key to use when signing. Used if --sign is true
    --keyring=: location of a public keyring
    --passphrase-file=: location of a file which contains the passphrase for the signing key. Use "-" in order to read from stdin.
    --sign: use a PGP private key to sign this package
    --version=: set the version on the chart to this semver version
    -d, --destination=: location to write the chart.
    -u, --dependency-update: update dependencies from "Chart.yaml" to dir "charts/" before packaging
documentation:
    command: '[AI] `helm package` is a Helm command used to build, test, and package a Helm chart into an archive file (Chart.tar.gz). This command performs several tasks: it builds any dependencies specified in the chart''s values.yaml or Dockerfiles, runs tests defined in the chart, and finally packages the chart into a format that can be distributed or deployed using Helm. The resulting package is saved to the local directory as the Chart.tar.gz file.'
    flag:
        app-version: '[AI] `helm package --app-version` is a command used in Helm, a popular Kubernetes package manager. This command builds a local chart package using the current directory as the chart location and sets the `appVersion` value in the `Chart.yaml` file to the specified version. The resultingchart can then be deployed or distributed as a single, versioned artifact.'
        dependency-update: '[AI] `helm package --dependency-update` is a command in Helm, a popular Kubernetes packaging and deployment tool. This command updates the dependencies of a Helm chart by fetching the latest versions from their repositories, without updating or installing the chart itself. It''s useful for keeping your local chart dependencies up to date, ensuring that you can deploy the latest versions of your dependent packages when you need to.'
        destination: '[AI] `helm package --destination` is a command used in Helm, a popular Kubernetes Package Manager. This command builds a local Helm package from a chart directory and saves it to a specified destination location. The option `--destination` takes the path as an argument where the output .tgz file will be saved after packaging. This can be useful when developing or testing charts before publishing them to a repository.'
        key: '[AI] The `helm package --key` command is used in Helm, a popular Kubernetes package manager, to retrieve the GPG key associated with a specific Helm repository. This key is used to verify the authenticity and integrity of the packages installed from that repository. The command retrieves the key and saves it as a PEM file in the default Helm key directory for later use during installation.'
        keyring: '[AI] `helm package --keyring` is a command used in Helm, a popular Kubernetes package manager. This command is utilized for managing and importing GPG (GNU Privacy Guard) keyrings into Helm''s repositories. By using this command with the path to a keyring file, Helm can authenticate and verify the authenticity of packages that are being installed or updated in your Kubernetes cluster. This adds an extra layer of security for your Kubernetes deployments by ensuring that only trusted packages are being used.'
        passphrase-file: '[AI] `helm package --passphrase-file` is a command used in Helm, a popular Kubernetes Package Manager. This command builds a new package for Helm Chart, which is a collection of files that define, install, and configure various applications on Kubernetes. The `--passphrase-file` flag specifies the path to a file containing the passphrase for encrypting the built chart''s Tiller server access key. This helps maintain security by keeping the access key encrypted during storage and transmission.'
        sign: '[AI] `helm package --sign` is a command used in Helm, a popular package manager for Kubernetes. This command signs a local Helm chart with your GPG key. The signed chart can then be published to a Helm repository, ensuring the authenticity and integrity of the chart. It adds a digital signature to the chart''s `chart.yml` file, making it easier for others to verify its origin before deploying.'
        version: '[AI] `helm package --version` is a command used in Helm, a popular package manager for Kubernetes. This command is used to check the version of Helm that is currently installed on your system. It prints out the version number and any other relevant build information. Running this command helps ensure that you are using the latest or desired version of Helm, which can be important for maintaining compatibility with new features or bug fixes in the Kubernetes ecosystem.'
