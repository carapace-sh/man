# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: chown
description: change file owner and group
flags:
    --dereference: affect the referent of each symbolic link
    --from=: change the owner and/or group of each file only if its current owner and/or group match those specified here.
    --help: display this help and exit
    --no-preserve-root: do not treat '/' specially (the default)
    --preserve-root: fail to operate recursively on '/'
    --reference=: use RFILE's owner and group rather than specifying OWNER:GROUP values
    --version: output version information and exit
    -H: if a command line argument is a symbolic link to a directory, traverse it
    -L: traverse every symbolic link to a directory encountered
    -P: do not traverse any symbolic links (default)
    -R, --recursive: operate on files and directories recursively
    -c, --changes: like verbose but report only when a change is made
    -f, --silent=: suppress most error messages
    -h, --no-dereference: affect symbolic links instead of any referenced file
    -v, --verbose: output a diagnostic for every file processed
documentation:
    command: '[AI] `chown` is a command in Unix and Linux systems used to change the owner and group of files and directories. Its name stands for "change owner." The basic syntax is `chown [OPTION]... OWNER:[GROUP] FILE`. For example, `chown user:group file.txt` changes the owner to ''user'' and the group to ''group'' for the file ''file.txt''. You can also use numeric UIDs and GIDs instead of usernames. Additionally, you can change ownership recursively for directories.'
    flag:
        H: '[AI] `chown` is a command-line utility in Unix and Linux systems for changing the ownership of files and directories. The option `-H` (or `--follow-symlinks`) tells `chown` to change the owner and group of a file or directory, as well as the files and directories they contain recursively, but not the symbolic links themselves. In other words, it changes the ownership for files and directories normally, but does not affect symbolic links. This can be useful when you want to preserve the existing ownership of symbolic links while changing the ownership of the linked files or directories.'
        L: |-
            [AI] The `chown` command with the `-L` option is used in Unix-based systems for changing the owner and group of a file or directory symbolically. This means that only the ownership metadata is modified, not the file itself or its contents.

            For instance, if you run `chown -L user:group filename`, it will change the record in the filesystem's inode that shows the file/directory belongs to the specified user and group without affecting the actual data within the file or directory.
        P: '[AI] `chown` is a command-line utility in Unix and Unix-like operating systems for changing the owner and group of files and directories. The `-P` option, also known as the `--preserve-permissions` flag, is used to change only the file ownership and group membership, while preserving the existing file permissions. This means that the file mode bits (read, write, execute) are not modified during the `chown` operation.'
        changes: '[AI] `chown --changes` is a command used in Unix-based operating systems to change the owner and group of files or directories recursively. The `--changes` option displays a list of files with their old and new ownership information, without making the actual changes yet. This allows users to preview the ownership modifications before executing them.'
        dereference: |-
            [AI] `chown --dereference` is a command-line option used with the Unix utility `chown`. It changes the owner, group, or both for files and directories in a Linux or Unix system.

            The `--dereference` option tells `chown` to follow symbolic links and change the permissions on the linked-to file instead of the link itself. In other words, it allows changing the ownership and permissions of the target of a symbolic link, rather than just the link itself. This can be useful when dealing with complex directory structures that make extensive use of symbolic links.
        from: '[AI] `chown --from` is not a valid option for the Unix `chown` (change owner) command. The correct usage of `chown` is to change the owner and/or group of a file or directory. There is no such option as `--from`. If you meant to ask about other options like `--recursive`, `--preserve-timestamps`, or `--dereference`, please specify them instead.'
        help: '[AI] `chown` is a command-line utility in Unix and Unix-like operating systems used to change the owner and group of files and directories. The `--help` option, when used with `chown`, displays detailed usage information for the command. It lists all possible options and their descriptions, providing guidance on how to use the command effectively. This includes details about changing file ownership and group membership, recursively applying changes to directories, preserving file metadata, and more.'
        no-dereference: '[AI] The `chown` command with the `--no-dereference` option is used to change the owner or group of a file or directory, without following any symbolic links. This means that if you run `chown --no-dereference <file or dir> <new owner or group>`, it will only modify the permissions on the specified file or directory itself and not on the files or directories that the link points to. This can be useful in cases where you want to change ownership of a symbolic link without affecting the files it refers to.'
        no-preserve-root: |-
            [AI] `chown` is a command-line utility in Unix and Linux systems used to change the owner and group of files and directories. The `--no-preserve-root` option is an optional argument that modifies the behavior of `chown`.

            Normally, when you use `chown` to change the ownership of a file or directory, if you specify a path starting from a different directory than the current one, the root directory (/) is implicitly added to the beginning of your path. For example, if you are in the /home/user directory and run the command `chown user:group /etc/file`, the system will interpret it as changing the ownership of the file at /etc/file in the /etc directory, not in the root directory.

            However, when you use the `--no-preserve-root` option, this implicit addition of the current root directory is disabled. So if you run the command `chown user:group etc/file` while being in the /home/user directory with `--no-preserve-root`, it will change the ownership of the file at etc/file in the root directory (/etc). This option can be useful when working with relative paths or when you want to explicitly specify the root directory in your command.
        preserve-root: '[AI] The `chown` command is a utility in Unix and Linux systems used to change the owner and group of files or directories. The `--preserve-root` option is used to prevent `chown` from changing the root directory (/) when trying to change the ownership of a file or a directory located under it. This is particularly useful when dealing with files or directories that have complex ownership structures and avoiding unintended changes to system files is essential.'
        recursive: '[AI] `chown` is a command-line utility in Unix and Linux systems used to change the owner and group of files and directories. The `--recursive` option, also written as `-R`, is used when you want to change the ownership recursively for an entire directory tree. This means that not only the specified file or directory''s ownership will be changed but also the ownership of all contained files and subdirectories under it. This can be useful during system administration tasks like managing permissions for large directories with complex structures.'
        reference: '[AI] The `chown` command with the `--reference` option in Linux changes the owner and group of a file or directory to match those of another file or directory. It preserves the existing permissions for the new file or directory. For example, `sudo chown --reference=/existing/file /new/file` will change the ownership of `/new/file` to be the same as that of `/existing/file`, while keeping the same permissions. This can be useful when creating multiple files with the same ownership and permissions.'
        silent: '[AI] `chown` is a command-line utility in Unix and Linux systems used to change the owner and group of files and directories. The `--silent` or `-q` option is used to suppress the normal output of `chown`. Instead of displaying a message for each file processed, it only prints an error message if an error occurs during the execution of the command. This option is useful when running `chown` in scripts or batch processes where the default output can clutter the console and distract from other important information.'
        verbose: '[AI] `chown` is a command-line utility in Unix and Linux systems used to change the ownership of files and directories. The `--verbose` option, also written as `-v`, makes `chown` display informational messages for each file or directory that its changed. These messages include the name of the file or directory being modified, the new owner and group, and any error messages if applicable. By using this option, you can see exactly which files have been modified during the `chown` command execution.'
        version: '[AI] `chown --version` is a command used in Unix-like operating systems to display the version information of the `chown` utility. When executed, it prints out the name of the chown program, its version number, and sometimes additional details such as the compilation date or the operating system it was built for. It helps users check if they have the latest or required version of the chown command for a particular task.'
