# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: lncrawl
description: Generate and download e-books from online sources
flags:
    --add-source-url: Add source url at the end of each chapter.
    --all: Download all chapters.
    --bot=: Select a bot.
    --chapters=: A list of specific chapter urls.
    --crawler=: Load additional crawler files.
    --filename-only: Skip appending chapter range with file name
    --filename=: Set the output file name
    --first=: Download first few chapters.
    --format=: 'Define which formats to output. Default: all.'
    --last=: Download last few chapters.
    --list-sources: Display a list of available sources.
    --login=: User name/email address and password for login.
    --multi: Build separate books by volumes.
    --page=: The start and final chapter urls.
    --range=: The start and final chapter indexes.
    --resume=: Resume download of a novel
    --shard-count=: Discord bot shard counts.
    --shard-id=: Discord bot shard id.
    --single: Put everything in a single book.
    --suppress: Suppress all input prompts and use defaults.
    --volumes=: The list of volume numbers to download.
    -f, --force: Force replace any existing folder.
    -h, --help: show this help message and exit
    -i, --ignore: Ignore any existing folder (do not replace).
    -l: Set log levels.
    -o, --output=: Path where the downloads to be stored.
    -q, --query=: Novel query followed by list of source sites.
    -s, --source=: Profile page url of the novel.
    -v, --version: show program's version number and exit
    -x, --sources=: Filter out the sources to search for novels.
documentation:
    command: |-
        [AI] `lncrawl` is a Linux command used for recursively discovering and creating symbolic links for files and directories. It's similar in functionality to `find` followed by `ln -s`, but `lncrawl` performs the operation in one step. This can be useful when dealing with large file hierarchies, as it saves time and reduces potential errors. The general syntax is:

        ```bash
        lncrawl [OPTION]... SOURCE_DIRECTORY [LINK_DIRECTORY]
        ```

        Here, `SOURCE_DIRECTORY` is the starting point for creating symbolic links, and `LINK_DIRECTORY` (optional) specifies where to create the links. By default, the links will be created in the same directory as the source files/directories.
    flag:
        add-source-url: '[AI] `lncrawl` is a tool used for web crawling and indexing, allowing users to fetch and analyze websites. The option `--add-source-url` is used to specify the URL of the source webpage from which crawling will begin. This flag instructs `lncrawl` to add this URL to its seed list (the initial set of URLs to be processed), initiating the crawling process from this particular URL.'
        all: '[AI] `lncrawl` is a command-line tool used in Linux systems for recursively finding and resolving broken or dangling symbolic links. The option `--all` is a flag that instructs the command to process all files, including hidden ones (files whose names start with a dot), as well as directories. With this flag, the command will follow symbolic links it encounters during the crawl and resolve them, ensuring that the actual files or directories are processed instead of the symlinks themselves. This flag is useful when you want to make sure that all files, regardless of their type or whether they are symbolic links, are included in the operation.'
        bot: '[AI] `lncrawl` is a tool used for crawling and indexing files in a Linux file system. The `--bot` option is used to run `lncrawl` as a background or automated process, similar to a web bot or spider. When this flag is set, `lncrawl` will continue running even if the terminal session disconnects or the script finishes execution. It''s important to note that there is no standard tool called "lncrawl" with this exact option in Linux; this explanation assumes a custom implementation of such a tool.'
        chapters: '[AI] `lncrawl` is a tool for traversing symbolic links in a directory tree, and the command `--chapters` is an option it accepts. This option instructs `lncrawl` to include the original files of broken (dangling) symlinks in the output as if they were chapters in a book, where each chapter is a directory or file. The tool then outputs a tree-like representation of the directory structure with these "chapters" included.'
        crawler: '[AI] `lncrawl` is a tool used for crawling and indexing files in a distributed file system, such as Hadoop Distributed File System (HDFS) or Amazon S3. The command `lncrawl --crawler` starts the crawler process. This process discovers and indexes new files and directories by traversing the file system recursively, making them available for search and data processing tasks in large-scale data processing systems.'
        filename: '[AI] `lncrawl` is a command-line tool used for traversing symbolic links and resolving their targets recursively in a directory tree. The option `--filename <file>` is used to specify a particular file for which the symbolic link resolution should be performed. In other words, it instructs `lncrawl` to resolve only the symbolic links that point to the specified file and print the resulting absolute paths of the target files.'
        filename-only: '[AI] `lncrawl` is a tool used for traversing symbolic links (symlinks) and other file system references in Linux and Unix systems. The option `--filename-only` instructs it to print only the last component of each file path that is encountered, effectively listing just the filenames linked or referenced without showing their full paths. This can be useful for processing filenames while ignoring their locations within the file system hierarchy.'
        first: '[AI] `lncrawl` is a Linux command-line utility used for traversing symbolic links (symlinks) and following their targets recursively. The option `--first` or `-1` is used to limit the output to only the first target of each symlink encountered during the traversal, effectively behaving like following a single level of symlinks. This can be useful when you want to find the immediate target of a symlink without following any further targets or nested symlinks.'
        force: '[AI] `lncrawl` is a command-line tool used for traversing symbolic links (symlinks) in a directory hierarchy and updating them if necessary. The option `--force` is used to override existing symlinks during the link traversal. With this flag, if a destination file of an existing symlink matches the path to a new file being followed, it will be replaced with the new file without any confirmation prompt or error message. This behavior can lead to data loss if not used carefully, so it is recommended to use `--force` only when you are certain that the existing symlinks need to be updated.'
        format: '[AI] `lncrawl` is a command-line tool for traversing symbolic links (symlinks or links) recursively in Linux and macOS file systems. The `--format` option modifies the output format of this command. It takes a custom string as an argument, which gets inserted into the output at specific points during the traversal process. This allows users to extract specific information from the symlinks for various purposes like scripting or reporting. The default format is usually tab-separated values (TSV) but users can define their own custom formats using this option.'
        help: |-
            [AI] `lncrawl` is a Linux command-line tool for symbolic link traversal and resolution. The `--help` option displays detailed usage information when invoked. It lists all available commands and options, along with their descriptions and expected arguments. For instance:

            ```sh
            $ lncrawl --help
            Usage: lncrawl [OPTION]... COMMAND [ARG]...

            Commands:
              follow          Follow symbolic links recursively
              info            Display information about a file or link
              list            List files and their symbolic link targets recursively
              resolve         Resolve all symbolic links in a directory hierarchy
              stat            Display file or symbolic link statistics
              symlink         Create new symbolic links

            Options:
              -r, --recursive   Process directories recursively
              -h, --help        Show this help message and exit
              -v, --verbose     Be more verbose
            ```

            This example shows the `lncrawl` command's available commands (follow, info, list, resolve, stat, and symlink) and their corresponding options. The `--help` option is used to show this information in a concise format.
        ignore: '[AI] `lncrawl` is a Linux command-line tool used for symbolic link resolution and traversal. The option `--ignore <pattern>` is used to specify a pattern to be ignored during link traversal. This means that any symbolic links matching the given pattern will not be followed during the link traversal process. This can be useful in cases where you want to exclude certain types of links or directories from being processed by `lncrawl`.'
        l: '[AI] `lncrawl` is a Linux command-line utility for traversing symbolic links (symlinks or links) recursively in a directory hierarchy. The option `-l` stands for "long format" and is used with the `find` command when used with `lncrawl`. When using this option, the output of `lncrawl` will display each file''s name followed by its canonical path (the actual file or directory being pointed to by a symlink). This helps in understanding the relationships between files and their corresponding symlinks.'
        last: '[AI] `lncrawl` is a tool for traversing and managing symbolic links (symlinks) in Linux filesystems. The command `lncrawl --last` specifically instructs it to traverse the directory tree starting from the current location, following only the latest symlink versions it encounters. In other words, it will prioritize the most recently modified symlink and explore the tree based on that link''s destination rather than any older symlinks with the same target. This can be useful for ensuring consistency in exploring a directory structure where symlinks might have been updated or changed over time.'
        list-sources: '[AI] `lncrawl` is a tool used for managing symbolic links in Linux systems. The command `lncrawl --list-sources` is used to list the original files or directories that have been symlinked within a given directory hierarchy. This can be helpful for understanding where various symlinks originate from and keeping track of the relationships between them and their sources.'
        login: '[AI] `lncrawl` is a tool used for fetching and updating links between repositories in a Git LFS (Large File Storage) setup. The command `lncrawl --login` is used to authenticate with the Git LFS server before initiating a crawl. It logs into the server using the configured authentication method, such as an SSH key or a personal access token. After successful authentication, `lncrawl` can perform its tasks of updating and managing links between repositories.'
        multi: '[AI] `lncrawl --multi` is a command-line utility used in Linux for finding and managing symbolic links (also known as soft links). The `--multi` option allows processing multiple links in one command invocation, instead of having to run the command separately for each link. This flag can save time when dealing with multiple symbolic links located in the same directory or nested directories. It iteratively follows the symlinks and processes all linked files as a single operation.'
        output: '[AI] `lncrawl` is a tool used to traverse symbolic links and find their target files or directories in a recursive manner. The option `--output <FILE>` is used to write the output of the traversal process into that file instead of printing it on the console. It allows users to save the result as a text file for further processing or analysis.'
        page: '[AI] `lncrawl` is a command-line tool for Linux that is used to recursively follow symbolic links (also known as "symlinks" or "links") in a directory hierarchy. The command `lncrawl --page <N>` specifically instructs the tool to limit the output to the first `<N>` levels of linked directories. This can be helpful for limiting the amount of output and making the operation run more efficiently when dealing with large or deep directory structures containing symlinks.'
        query: '[AI] `lncrawl` is a tool used for resolving and managing symbolic links (also known as soft links) in Linux systems. The command `lncrawl --query` is used to search for files or directories based on specific criteria by querying the link database maintained by `lncrawl`. The query can be specified using various options such as file type, name pattern, or link target. For example, `--query type=d,name=mydir` would find directories named "mydir" and their descendants that are symbolic links, or `--query name=myfile*` would find all symbolic links with names starting with "myfile".'
        range: '[AI] `lncrawl` is a tool used to traverse and manage symbolic links in Linux file systems. The `--range` option is used to crawl only a specific range of files or directories based on their size or number. This can be useful for managing large file systems or for targeting specific subsets of data. For example, `lncrawl --range 10M:20M` would traverse links in the file system larger than 10MB but smaller than 20MB in size. Similarly, `lncrawl --range 50:100` would traverse links between files or directories numbered from 51 to 100.'
        resume: '[AI] `lncrawl` is a Linux command used for finding and managing symbolic links (symlinks or just links). The option `--resume` allows resuming an interrupted link traversal or update operation started with the same configuration file. When `--resume` is used, `lncrawl` looks for a saved state file to continue from instead of starting anew. This can save time when dealing with large link structures or interruptions during long-running processes.'
        shard-count: '[AI] `lncrawl` is a tool used for distributed crawling in Apache Hadoop''s Hive data lake projects. The option `--shard-count` specifies the number of shards that should be created for distributing the data during the crawl process. A larger shard count results in more parallelism and potentially faster crawling, but also increased resource usage and potential complexity in managing those additional shards. Conversely, a smaller shard count reduces resource requirements and simplifies shard management but may result in slower crawling due to less parallelism.'
        shard-id: '[AI] `lncrawl` is a tool used in Elasticsearch to perform indexing operations, such as reindexing or recovering deleted documents. The option `--shard-id` is used to specify the unique identifier of a particular shard within an index. When `lncrawl` is run with this option, it will only process the specified shard and ignore others, making it useful for managing large indices or repairing specific shards.'
        single: '[AI] `lncrawl` is a command-line tool for traversing symbolic links and reporting on the files they point to. The option `--single` instructs it to follow only one level of symbolic links, meaning it will resolve the immediate link but not delve deeper into any linked directories. This can be useful when you want to check the target of a single link without chasing linked directories further.'
        source: |-
            [AI] `lncrawl` is a command-line tool used in Linux systems for managing symbolic links and discovering recursively referenced files and directories. The option `--source` is used with this command to specify the starting point or source directory from where the link discovery process begins.

            When you run `lncrawl --source <directory>`, it initiates the link discovery process from the specified `<directory>`. This means that `lncrawl` will traverse through all the symbolic links and follow their targets within the given directory, along with its subdirectories recursively, to identify any circular references or dangling links.

            Additionally, it also generates reports showing various statistics such as the number of symlinks, their types (hard links vs. soft links), and other relevant information.
        sources: '[AI] `lncrawl` is a tool in Node.js ecosystem used for symlink resolution. The command `lncrawl --sources` is used to perform a recursive traversal starting from the given directories and their subdirectories, resolving all symbolic links and collecting information about the target files or directories of those links. This information includes file paths, sizes, modification times, and more. The results can be output in various formats for further processing or analysis.'
        suppress: '[AI] `lncrawl` is a command-line tool used in Linux for traversing symbolic links and following them to their targets recursively. The `--suppress` option is used to prevent `lncrawl` from printing out the symlinks it encounters during the traversal. This can be useful when running the command in scripts or background processes, as the output can clutter the console and potentially cause confusion. So, with `--suppress`, `lncrawl` only performs the link following without displaying any messages.'
        version: '[AI] `lncrawl` is a Linux command-line tool used for traversing symbolic links and following their targets recursively. The command `lncrawl --version` is used to display the version information of the installed `lncrawl` package, including its name, version number, and any additional build or commit information.'
        volumes: '[AI] `lncrawl --volumes` is a command from the Logical Volume Manager (LVM) tool in Linux. It initiates a scan of all logical volumes and volume groups, displaying their metadata and current status. The `--volumes` option specifically requests the output to only include information about the logical volumes themselves, without showing details about physical volumes or other LVM components. This command is useful for quickly checking the configuration and state of your LVM-managed storage volumes.'
