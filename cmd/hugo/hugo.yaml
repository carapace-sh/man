# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: hugo
description: hugo builds your site
flags:
    --cacheDir=: 'filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/'
    --cleanDestinationDir: remove files from destination not found in static directories
    --disableKinds*=: disable different kind of pages (home, RSS etc.)
    --enableGitInfo: add Git revision, date and author info to the pages
    --forceSyncStatic: copy all files when static is changed.
    --gc: enable to run some cleanup tasks (remove unused cache files) after the build
    --i18n-warnings: print missing translations
    --ignoreCache: ignores the cache directory
    --minify: minify any supported output format (HTML, XML etc.)
    --noChmod: don't sync permission mode of files
    --noTimes: don't sync modification time of files
    --path-warnings: print warnings on duplicate target paths etc.
    --poll=: set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes
    --print-mem: print memory usage to screen at intervals
    --profile-cpu=: write cpu profile to `file`
    --profile-mem=: write memory profile to `file`
    --profile-mutex=: write Mutex profile to `file`
    --renderToMemory: render to memory (only useful for benchmark testing)
    --templateMetrics: display metrics about template executions
    --templateMetricsHints: calculate some improvement hints when combined with --templateMetrics
    --trace=: write trace to `file` (not useful in general)
    -D, --buildDrafts: include content marked as draft
    -E, --buildExpired: include expired content
    -F, --buildFuture: include content with publishdate in the future
    -b, --baseURL=: hostname (and path) to the root, e.g. http://spf13.com/
    -c, --contentDir=: filesystem path to content directory
    -d, --destination=: filesystem path to write files to
    -l, --layoutDir=: filesystem path to layout directory
    -t, --theme*=: themes to use (located in /themes/THEMENAME/)
    -w, --watch: watch filesystem for changes and recreate as needed
persistentflags:
    --config=: config file (default is path/config.yaml|json|toml)
    --configDir=: config dir
    --debug: debug output
    --ignoreVendor: ignores any _vendor directory
    --ignoreVendorPaths=: ignores any _vendor for module paths matching the given Glob pattern
    --log: enable Logging
    --logFile=: log File path (if set, logging enabled automatically)
    --quiet: build in quiet mode
    --themesDir=: filesystem path to themes directory
    --verboseLog: verbose logging
    -e, --environment=: build environment
    -s, --source=: filesystem path to read files relative from
    -v, --verbose: verbose output
documentation:
    command: '[AI] Hugo is a popular open-source static site generator written in Go language. It''s used to build websites and blogs with Markdown content, creating fast, modern, and static websites. By using Hugo, you write your content in Markdown files, then run the `hugo` command in your terminal or command prompt to generate the final HTML output for your site, which can be deployed on various platforms like GitHub Pages, Netlify, or Amazon S3.'
    flag:
        baseURL: '[AI] The `--baseURL` option in Hugo is used to specify the base URL of a Hugo site when it is published. It tells Hugo where to prefix all the generated file paths and URLs in the output site. For instance, if your site is hosted at `example.com/my-hugo-site`, you would set `--baseURL "https://example.com/my-hugo-site"` during publishing. This ensures that links within the site are correctly generated with the base URL prefix.'
        buildDrafts: '[AI] `hugo --buildDrafts` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command instructs Hugo to build and generate a static website using all Markdown files in the source directory, including drafts (unpublished posts with a `draft: true` front matter). It will create an output in the `public` folder, making the drafts publicly available once built.'
        buildExpired: |-
            [AI] The `hugo --buildExpired` command is used in Hugo, a popular static site generator for building websites and blogs. This specific command is not a flag by itself but an argument passed to the `build` sub-command.

            The `--buildExpired` flag instructs Hugo to only build content that has expiration dates set in their front matter or YAML headers, and whose expiration date has been reached. This is useful for websites that have time-sensitive content, such as blogs or news sites, where old content may no longer be relevant or accurate. By using `--buildExpired`, Hugo will exclude content that is still valid from the build process, resulting in a leaner and more up-to-date website.
        buildFuture: '[AI] The `--buildFuture` flag in Hugo is used to enable the Build Future feature. This feature allows Hugo to prebuild and cache future posts that have not yet been published. When you create a new draft post, Hugo will automatically build it during the next regular build process, even if it''s not yet ready for publication. This can help improve build times for larger sites with many posts, as the prebuilt content is served from the cache rather than being generated on the fly during each request.'
        cacheDir: '[AI] The `--cacheDir` flag in Hugo, a popular static site generator, specifies the directory where Hugo will store its cached data. Caching is used to improve build performance by storing pre-processed data from previous builds to avoid unnecessary re-processing during subsequent builds. By default, Hugo caches data to a hidden subdirectory named `.hugo` in the root of your project. However, you can use the `--cacheDir` flag to specify an alternate location or manage cache size by creating and deleting the cache directory manually.'
        cleanDestinationDir: '[AI] The `--cleanDestinationDir` flag in Hugo is used to clean or remove all existing files from the destination directory before starting a new build. This is helpful when you want to ensure a fresh build, especially when making changes to your website''s theme or configuration files that might affect the output of your site. By using this flag, you can be confident that only the newly generated files will be present in the output directory after the build process.'
        contentDir: '[AI] `hugo --contentDir` is a command-line argument used with Hugo, a popular static site generator. The `--contentDir` option specifies the local directory containing the markdown files and other static content that will be processed and included in the generated website. It helps Hugo locate and build your site from the given content.'
        destination: '[AI] The `--destination` flag in Hugo is used to specify the output directory for generated static files during the build process. When you run Hugo with this flag, it will create or overwrite the content of the specified directory with the built files, making it suitable for deploying the website to a web server or a CDN.'
        disableKinds: '[AI] `hugo --disableKinds` is a command used in Hugo, a popular static site generator written in Go. This command disables the rendering of specific content types or Kinds in Hugo. The flag takes one or more arguments representing the kind names to be disabled. When executed, Hugo will skip generating pages for the specified content types during the build process. This can be useful when working with complex sites and wanting to temporarily disable the generation of certain types of content without deleting them from the source files.'
        enableGitInfo: '[AI] `hugo --enableGitInfo` is a command-line argument used with Hugo, a popular static site generator for creating blogs and websites. This option enables Git info output in the HTML files generated by Hugo. With `--enableGitInfo`, Hugo will include Git commit information (commit hash, author name, and commit date) as additional metadata in the head of each generated HTML file, making it easier to track changes when deploying a website from a version control system like Git.'
        forceSyncStatic: '[AI] `hugo --forceSyncStatic` is a command used in Hugo, a popular static site generator for building websites and blogs from Markdown files. This command forces Hugo to rebuild and regenerate all static files (HTML, CSS, JavaScript, images, etc.) even if their sources have not changed since the last build. It overrides Hugo''s default behavior of only rebuilding changed files. This can be useful when making changes to non-Markdown assets or configuration files that require a full site rebuild without waiting for automatic detection of file changes.'
        gc: '[AI] The `hugo --gc` command is used to run Hugo, a popular static site generator, with the `--gc` (Garbage Collector) flag enabled. This flag instructs Hugo to perform an additional garbage collection process before building the website. The goal of garbage collection is to free up memory that is no longer being used by the application, which can help improve performance and prevent potential errors or crashes during the build process.'
        i18n-warnings: '[AI] The `--i18n-warnings` flag in Hugo, a static site generator, enables internationalization (i18n) warnings during build process. These warnings indicate potential issues related to i18n in the content, such as missing translations or incorrect usage of i18n identifiers. The flag helps developers ensure their multilingual websites are properly localized.'
        ignoreCache: '[AI] `hugo --ignoreCache` is a command used in Hugo, a popular static site generator for creating blogs and websites. The `--ignoreCache` flag instructs Hugo to bypass its built-in cache and regenerate all the files instead of using previously generated ones from the cache. This can be useful when making significant changes to the content or themes that might not trigger a cache rebuild, ensuring a fresh build every time.'
        layoutDir: '[AI] `--layoutDir` is a flag used in Hugo, a popular static site generator. This flag specifies the local directory where Hugo should look for custom layout files overriding the default ones. It enables users to create custom templates and modify the rendering of specific parts of their website without altering the core themes or files.'
        minify: '[AI] `hugo --minify` is a command used in Hugo, a popular static site generator for building websites and blogs. The `--minify` flag enables the production build mode during website generation. It minifies CSS, JS, and HTML files to reduce file sizes, thus improving site performance by decreasing load times. This results in a faster and more efficient website.'
        noChmod: '[AI] The `hugo --noChmod` command is used with Hugo, a popular open-source static site generator for creating websites and blogs. The `--noChmod` option is passed to Hugo during the build process to disable the automatic setting of file permissions. This means that after generating the static files, you will need to manually set the desired file permissions using an external tool or command line utility instead.'
        noTimes: '[AI] The `hugo` command with the `--noTimes` flag is used to build a Hugo website without generating updated timestamps in the `content/_index.xml` file. This flag is often employed when continuously building or deploying a site multiple times within a short time frame, as it avoids unnecessary changes in the timestamp that might trigger redundant content delivery network (CDN) requests or other unwanted side effects. In summary, using `hugo --noTimes` ensures faster builds and reduces unnecessary network traffic for websites that don''t change frequently between builds.'
        path-warnings: '[AI] The `--path-warnings` flag in Hugo is used to enable or disable path warnings during site build. When enabled, Hugo will output warnings for any file paths that don''t match the expected format, such as missing `.md` file extensions or incorrectly placed files within directories. This can help ensure consistency and accuracy of file paths within a Hugo project.'
        poll: '[AI] `hugo --poll` is a command used in Hugo, a popular static site generator for creating blogs and websites. The `--poll` flag instructs Hugo to continuously watch for changes in source files and automatically rebuild the site whenever a modification is detected. This flag improves workflow efficiency by avoiding the need to manually trigger a build every time a file is updated.'
        print-mem: '[AI] `hugo --print-mem` is a command used with Hugo, a popular open-source website framework written in Go. The flag is used to print the memory usage statistics of Hugo during site build or serve processes. It helps users monitor and manage system resources efficiently by providing real-time information about the memory consumption of Hugo operations.'
        profile-cpu: '[AI] The `--profile-cpu` flag is used with Hugo, a popular static site generator for creating blogs and websites. This flag activates the CPU profiling feature during the build process, which provides detailed information about the time taken by each function or module to execute. By analyzing this data, users can optimize their Hugo sites for better performance.'
        profile-mem: '[AI] The `--profile-mem` flag in Hugo is used to generate memory profiling data during a build process. This information can be helpful for identifying and addressing performance issues in your Hugo site, particularly larger sites with complex structures. By enabling this flag, Hugo will create a profile file containing memory usage statistics, which can be analyzed using tools like Google''s `pprof` or other memory profiling software.'
        profile-mutex: '[AI] The `--profile-mutex` flag in Hugo is used to ensure that only one build profile is active at a time during the build process. This flag prevents multiple profiles from being applied simultaneously, ensuring consistency and avoiding conflicts between different profiles'' settings. By using this flag, you can ensure that each build of your site uses a single defined set of configuration options.'
        renderToMemory: '[AI] `hugo --renderToMemory` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command instructs Hugo to render markdown files into HTML directly in memory instead of writing the output to a file. This can be useful when developing locally or when integrating Hugo with other systems that don''t support file output. The rendered HTML is then accessible through the `.Site.RegularPages` or `.Site.Docs` slice within your Go program, allowing for further processing or immediate delivery as a response to an HTTP request.'
        templateMetrics: '[AI] `hugo --templateMetrics` is a command used in Hugo, a popular open-source website engine written in Go. This command generates metrics and analysis reports for Hugo themes by running the template functions during compilation without actually generating any output files. It helps developers to optimize their templates'' performance and understand how resources are being used within the theme. The output is displayed in the console or can be saved as a JSON file for further processing.'
        templateMetricsHints: |-
            [AI] `hugo --templateMetricsHints` is a command used with Hugo, a popular static site generator for creating blogs and websites. This specific command is not a template itself but an option provided to help developers optimize their templates.

            The `--templateMetricsHints` flag generates a report that highlights potential performance issues in the Hugo templates, such as unnecessary computations or repeated rendering of the same data. It provides hints and suggestions for improvements based on template metrics analysis. By using this command, developers can enhance the performance of their sites by addressing these identified optimization opportunities.
        theme: '[AI] `hugo --theme` is a command used in Hugo, a popular static site generator for building websites and blogs. The command specifies that Hugo should use a particular theme when generating the website. A Hugo theme is a collection of files and directories that define the look and feel of a website, including HTML templates, CSS stylesheets, and JavaScript files. By using the `--theme` option followed by the name or path to the desired theme directory, you can customize the appearance of your Hugo-generated site.'
        trace: '[AI] `hugo --trace` is a command used with Hugo, a popular static site generator for creating websites and blogs. This specific command runs Hugo in debug mode, which enables more detailed output and tracing of events during the build process. The flag provides real-time feedback on what Hugo is doing at each stage of the build, making it helpful for diagnosing and resolving issues or gaining a better understanding of how Hugo processes your content.'
        watch: '[AI] `hugo --watch` is a command used in Hugo, a popular static site generator for building websites and blogs. This specific command starts Hugo in "watch mode." In this mode, Hugo automatically rebuilds your website whenever you save a file in your source directory. It continuously monitors the source files for changes and updates the output accordingly, making it ideal for development workflows where you frequently edit content or make design adjustments.'
