# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list
aliases:
    - ls
description: List Github Actions caches
flags:
    --json*=: Output JSON with the specified `fields`
    -L, --limit=: Maximum number of caches to fetch
    -O, --order=: 'Order of caches returned: {asc|desc}'
    -S, --sort=: 'Sort fetched caches: {created_at|last_accessed_at|size_in_bytes}'
    -k, --key=: Filter by cache key prefix
    -q, --jq=: Filter JSON output using a jq `expression`
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
documentation:
    command: '[AI] The `gh cache list` command is used to display a list of cached GitHub actions, packages, and pages in the GitHub Hub CLI (Command Line Interface) cache. It helps users check what items are currently stored in their local cache, which can be useful for debugging or managing the cache effectively.'
    flag:
        jq: '[AI] The command `gh cache list --jq` is used with GitHub''s gh tool, which is a CLI (Command-Line Interface) tool for interacting with GitHub. This specific command lists the contents of your local GitHub cache and filters the output using JQ, a lightweight and flexible JSON processor. The `--jq` flag passes the output to JQ for parsing and manipulating JSON data. The result is a more concise and customized output that can be easily processed further in scripts or pipelines.'
        json: '[AI] `gh cache list --json` is a command used in GitHub''s global CLI (gh) to retrieve a JSON-formatted list of cached items in your local GitHub cache. This command allows you to programmatically access and manage the list of cached files or packages, which can be useful for automating workflows, scripting tasks, or analyzing cache usage. The output includes details such as the key (unique identifier), size, and creation time for each cached item.'
        key: '[AI] `gh cache list --key` is a command used in GitHub''s `gh` CLI (Command Line Interface) tool. This command lists the keys of the cached files in the local GitHub Cache. The cache stores previously downloaded packages, large files, and other data to speed up future operations by reducing network traffic. By using `--key`, you can see which specific keys are being used for cached items.'
        limit: '[AI] `gh cache list --limit` is a command used in GitHub''s Git CLI (gh) tool to retrieve a list of cached files and their sizes, but it only shows up to a specified number of items defined by the `--limit` parameter. This command helps manage the cache size efficiently by allowing users to check which cached items are consuming space without having to view an extensive list.'
        order: |-
            [AI] `gh cache list --order` is a command used in GitHub's gh CLI tool to list cached files and directories. The `--order` option sorts the output based on specific criteria:

            1. `--order=name`: Sorts the list alphabetically by file name.
            2. `--order=size`: Sorts the list in ascending or descending order by file size. Use `--order=size --reverse` for descending order.
            3. `--order=age`: Sorts the list based on the age of the cache entry (newest first). Use `--order=age --reverse` for oldest first.

            By default, it sorts by name in ascending order.
        sort: '[AI] `gh cache list --sort` is a command used in GitHub''s `git-hub` CLI tool. This command lists the items currently cached in GitHub''s Global HomeCache. The `--sort` flag sorts the output based on specific criteria, allowing you to view the cached data in ascending or descending order. By default, it sorts by the creation time of each cache entry.'
        template: '[AI] `gh cache list --template` is a command used with GitHub''s gh CLI tool to display cached items in the local GitHub Cache. The `--template` option allows specifying a custom output format using Mustache templates. This command retrieves the list of cached keys and applies the specified template to generate customized output, typically for scripting or automated workflows.'
