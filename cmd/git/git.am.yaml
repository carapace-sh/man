# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: am
description: Apply a series of patches from a mailbox
group: main
flags:
    --abort: restore the original branch and abort the patching operation
    --committer-date-is-author-date: lie about committer date
    --continue: continue applying patches after resolving a conflict
    --directory=: pass it through git-apply
    --exclude=: pass it through git-apply
    --ignore-date: use current timestamp for author date
    --ignore-space-change: pass it through git-apply
    --ignore-whitespace: pass it through git-apply
    --include=: pass it through git-apply
    --keep-cr: pass --keep-cr flag to git-mailsplit for mbox format
    --keep-non-patch: pass -b flag to git-mailinfo
    --no-keep-cr: do not pass --keep-cr flag to git-mailsplit independent of am.keepcr
    --patch-format=: format the patch(es) are in
    --quit: abort the patching operation but keep HEAD where it is
    --quoted-cr=: pass it through git-mailinfo
    --reject: pass it through git-apply
    --rerere-autoupdate: update the index with reused conflict resolution if possible
    --resolvemsg=: override error message when patch failure occurs
    --show-current-patch?: show the patch being applied
    --skip: skip the current patch
    --whitespace=: pass it through git-apply
    -3, --3way: allow fall back on 3way merging if needed
    -C=: pass it through git-apply
    -S, --gpg-sign?: GPG-sign commits
    -c, --scissors: strip everything before a scissors line
    -i, --interactive: run interactively
    -k, --keep: pass -k flag to git-mailinfo
    -m, --message-id: pass -m flag to git-mailinfo
    -p=: pass it through git-apply
    -q, --quiet: be quiet
    -r, --resolved: synonyms for --continue
    -s, --signoff: add a Signed-off-by trailer to the commit message
    -u, --utf8: recode into utf8 (default)
documentation:
    command: '[AI] `git am` is a Git command for applying a series of changes represented by one or more patch files. The patches can be generated using `git format-patch`. When you run `git am <patchfile>`, Git applies the changes in the patch file to your current branch, creating a new commit for each change if it successfully merges with the current branch. If there are conflicts during the merge process, Git will pause and let you resolve them before continuing the application of patches.'
    flag:
        3way: '[AI] `git am --3way` is a command used in Git to apply a series of patch files, specifically three-way merge patches. This command performs a three-way merge, which means it merges changes from both the base and the patch into the working directory file, resolving any conflicts that may arise. It uses information from all three revisions (base, patch, and working directory) to produce the final result. This command is often used when merging branches or resolving merge conflicts in a more fine-grained way than a simple `git merge`.'
        C: '[AI] `git am --compile` is a Git command used for applying a series of patch files, typically obtained from a mailbox or saved in a file. The `--compile` option instructs Git to automatically apply and resolve conflicts from the patches without requiring an interactive session. This command assumes that there are no unmerged changes in the working directory before applying the patches. If conflicts arise during the application process, they need to be resolved manually.'
        abort: '[AI] `git am --abort` is a Git command used to abandon an ongoing amendment (apply-mailbox) patch session. This means if you have started applying a series of email patches using `git am`, but for some reason, decided not to complete the application or made a mistake during the process, you can use this command to undo the changes made so far and restore your working directory to its previous state before starting the patch application.'
        committer-date-is-author-date: '[AI] `git am --committer-date-is-author-date` is a command used in Git to apply a series of patches (amendments) stored in a text file, instead of taking them from the standard input. The option `--committer-date-is-author-date` is passed to make the author date and committer date identical for all the patches applied together. In other words, it sets the committer date as the same as the author date for all the patches, meaning that they will have the same timestamp when they are committed in your current Git repository.'
        continue: '[AI] `git am --continue` is a Git command used during the application of an amended patch (created with `git am --interactive`) in the Git mailbox stack. It instructs Git to continue applying the next patch in the sequence after resolving conflicts in the previous one. This command assumes that the current patch application has encountered conflicts and the user has already resolved them using a text editor or other conflict resolution tools. The `--continue` flag tells Git to proceed with the next patch in line, once it''s satisfied with the user''s changes to the current one.'
        directory: '[AI] `git am --directory` is not a valid Git command. The `git am` (Apply Mailbox) command applies individual email patches stored in a mailbox file, not specific to a directory. If you intend to apply patches to files within a certain directory during the patch application process, it''s recommended to change the working directory before running `git am`.'
        exclude: '[AI] `git am --exclude` is a command used in Git to apply a series of patch files, typically created using `git format-patches`, but with the option to exclude specific patches from being applied. The `--exclude` flag follows the `--file` or `--stdout` argument and accepts a pattern to filter out patches based on their filenames. This command is useful when you want to selectively apply patches, for instance, to skip patches that have already been applied or those that may cause conflicts.'
        gpg-sign: '[AI] `git am --gpg-sign` is a Git command used to apply a patch file (created with `git format-patch`) and sign it with GPG before applying. This ensures that the patches are authentically from their author, adding an additional layer of security in collaborative development environments. By default, the command interacts with the user''s GPG key ring, so you will be prompted to enter your passphrase if needed.'
        ignore-date: '[AI] `git am --ignore-date` is a command used in Git to apply a series of patch files (usually generated by `git format-patch`) while ignoring any changes to the commit dates. This can be useful when applying patches from different branches with conflicting commit histories, as it allows you to merge the changes without merging the commits themselves. The `--ignore-date` option tells Git to only consider the differences between files and ignore any changes to the commit timestamps.'
        ignore-space-change: '[AI] `git am --ignore-space-change` is a command used in Git for applying a series of patches (amendments) one by one from a file or standard input. The `--ignore-space-change` option tells Git to ignore whitespace differences between the files being patched, except for those changes that add or delete lines. This can be useful when dealing with text files where only the formatting needs to be adjusted between different versions.'
        ignore-whitespace: '[AI] `git am --ignore-whitespace` is a command used in Git to apply a patch file (created with `git format-patch`) while ignoring changes related to whitespace only, such as trailing spaces or indentation. This can be useful when merging code where the team agrees on a coding style but prefers to maintain flexibility within that style. The `--ignore-whitespace` option tells Git to apply the patch despite any whitespace differences.'
        include: '[AI] `git am --include` is a Git command used to apply a series of patch files, typically created with `git format-patches`. The `--include` option tells Git to automatically apply all included patches in the sequence, even if some fail. If an error occurs during application of one patch, Git will skip that patch and continue applying the remaining patches. This can be useful when applying a series of patches that may contain dependencies or have other inter-related issues.'
        interactive: '[AI] `git am --interactive` is a Git command used to apply a series of patch files, usually created by `git format-patch`. The `--interactive` option allows for an interactive mode where you can review and edit each patch before applying it. In this mode, Git displays the patches in a text editor or pager, enabling you to modify them as needed, such as changing commit messages or squashing multiple patches into one, before finally applying them. This is particularly useful when dealing with complex or numerous patches that require careful review and adjustment before merging into a codebase.'
        keep: '[AI] `git am --keep` is a Git command used to apply a patch file (created with `git format-patch`) to the current branch. The `--keep` option tells Git to keep the original patch file after application, unlike the default behavior where applied patches are deleted. This can be useful for maintaining a record of applied patches or for applying multiple patches in sequence while keeping each patch''s original file.'
        keep-cr: '[AI] `git am --keep-cr` is a command used in Git for applying a patch (AMStandalone) with Carriage Returns (CR) at the end of lines preserved. The `--keep-cr` option instructs Git to keep these CRs during the application process, ensuring that line endings are not changed. This can be useful when working on systems with different line ending conventions, such as Windows and Unix.'
        keep-non-patch: '[AI] `git am --keep-non-patch` is a command used in Git to apply a series of patch files, typically created with `git format-patches`. The `--keep-non-patch` option tells Git to keep the original email messages along with the applied patches. This means that after the application of the patches, the original emails will still be present in your Git repository, allowing you to maintain the commit history and associated metadata.'
        message-id: '[AI] `git am --message-id` is a command used in Git for applying a single patch file, typically obtained from an email or saved as a .diff or .mbox file, to your local repository. The `--message-id` option displays only the message ID of the applied commit instead of creating a new interactive commit message. This can be useful when applying multiple patches in sequence and wanting to keep consistent commit messages.'
        no-keep-cr: '[AI] The `git am --no-keep-cr` command is a Git amendment (apply) command with an added option `--no-keep-cr`. This option instructs Git not to keep the commit message''s last character as a CR (Carriage Return). This can be useful when applying patch files, especially when dealing with text editors that may add an unnecessary CR at the end of a line. By using this command, Git will discard the extra CR, ensuring consistent commit messages.'
        p: '[AI] `git am --interactive` is a Git command used to apply a series of patch files, typically created with `git format-patches`. The `--interactive` option allows you to review and edit each patch before applying it. This can be useful when resolving merge conflicts or making adjustments to the patches before applying them to your project. When using this command, Git opens an interactive pager where you can inspect and manipulate each patch, such as editing its message, splitting it into multiple patches, or skipping it altogether.'
        patch-format: '[AI] `git am --patch-format` is a command used in Git to apply a series of patch files, typically created by saving the output of `git format-patch`, with customized patch formats. The `--patch-format` option allows specifying an alternative patch format, such as unified-diff, mq-format, or stag-format, affecting how the patches are displayed or processed during application using `git am`. This can be useful for working with different patch formats or when dealing with specific project requirements.'
        quiet: '[AI] `git am --quiet` is a Git command used to apply an email patch (AMS or MHS format) to the current repository. The `--quiet` option suppresses informational messages during the application process, making the operation run more quietly in the background. It does not produce any output by default, only reporting errors if any occur during the patch application.'
        quit: '[AI] `git am --quit` is a Git command used during the application of an amended patch (created with `git am`). This command allows you to abort the application process and return control to the Git porcelain if you decide that the patch needs more work before being committed. By using `--quit`, the changes introduced by the patch will not be applied to your working directory or the index, leaving you free to make further modifications as needed.'
        quoted-cr: '[AI] `git am --quoted-cr` is a Git command used to apply a single patch file saved in a text format, such as a `.diff`, `.patch`, or `.mbox` file. The `--quoted-cr` option ensures that the patch file handles CR (carriage return) characters as literal characters rather than line breaks. This is useful when working with patches that contain binary data or special characters, which might not be correctly interpreted if treated as line breaks.'
        reject: '[AI] `git am --reject` is a command used in Git to apply a single patch file (obtained from a mailbox or saved as a file) and handle conflicts by leaving unmerged files marked with conflict markers (<<<, >>>). When using this command, any changes made locally that conflict with the patch will be preserved, allowing for manual resolution. After resolving the conflicts, you can use `git add` to stage the resolved files and complete the merge process.'
        rerere-autoupdate: '[AI] `git am --rerere-autoupdate` is a command used in Git version control system for applying patch files, specifically when using the "apply mailbox" (am) command with the Rerere autoupdate feature enabled. This option allows Git to automatically attempt to apply a patch that has already been applied and failed before. The goal is to avoid redundant effort and potential conflicts in the patch application process. With `--rerere-autoupdate`, Git will try to apply a previously seen patch with the same index contents without asking for confirmation. If successful, it will save the results in the Rerere database, making future applications faster and potentially eliminating conflicts.'
        resolved: '[AI] `git am --resolved` is a command used in Git to apply a patch (AMS, or "Application Mailbox Stack" format) while keeping the working directory and index in their current state instead of merging changes. This means that any conflicts arising from the patch application will remain unresolved and need to be manually handled by the user. It is useful when you want to review the changes introduced by a patch without automatically applying them or creating new commits. The `--resolved` option ensures that no commit is created upon successful application of the patch.'
        resolvemsg: '[AI] `git am --resolvemsg` is a command used in Git for applying an amended patch (created with `git am --author-date-order` or `git am --skip`) and resolving any conflict messages in the process. The `--resolvemsg` option generates or updates the commit message for the newly created commit. If there are no conflicts, the command will simply apply the patch and create a new commit with the existing message. Otherwise, it will open up text editors for users to edit the conflicting files and then allow them to enter a new commit message once the conflicts have been resolved. The goal is to provide flexibility in managing and resolving merge conflicts while creating informative commit messages.'
        scissors: '[AI] `git am --scissors` is a command used in Git for applying a patch (AM Standalone) with the scissors strategy. This strategy removes the patch''s changes from the current branch after applying it, effectively "cutting out" the changes and applying them to another branch or commit history. It''s useful when you want to apply someone else''s changes while keeping your working directory unmodified.'
        show-current-patch: '[AI] `git am --show-current-patch` is a command used in Git to apply an email patch file (created with `git format-patch`) and display the changes it would make before actually applying them. The `--show-current-patch` option shows the current patch being applied, allowing users to review the changes before committing them to their local repository.'
        signoff: '[AI] `git am --signoff` is a command used in Git for applying email patch files, also known as "amended" or "mailed-in" patches. This command applies the patch file and then adds a signed-off commit message at the end of the commit message. The "signed-off" part indicates that the author of the patch has verified that they have the permission to submit the change and take responsibility for it. It also helps in maintaining accountability and traceability within a collaborative development workflow.'
        skip: '[AI] `git am --skip` is a Git command used during the application of an amended or patch file, typically produced by `git format-patch`. This command skips the current patch and moves on to the next one in the sequence without applying it. The option `--skip` allows developers to ignore specific patches while keeping the patch series intact.'
        utf8: '[AI] `git am --utf8` is a Git command used to apply a patch file (created with `git format-patch`) to the current branch. The `--utf8` option ensures that the commit message in the patch file is encoded in UTF-8, which is necessary for including special characters or non-English text in the commit messages. This helps maintain consistency and readability in a multilingual team or project.'
        whitespace: '[AI] `git am --whitespace` is a command used in Git to apply a single patch file (amendment) stored in a text format, such as generated by `git format-patch`. The `--whitespace` option enables Git to automatically fix common whitespace issues, like trailing whitespaces and inconsistent line endings, while applying the patch. This helps ensure consistency across projects and makes code reviews more effective.'
