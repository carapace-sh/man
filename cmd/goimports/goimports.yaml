# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: goimports
description: updates your Go import lines
flags:
    -cpuprofile=: CPU profile output
    -d: display diffs instead of rewriting files
    -e: report all errors
    -format-only: don't fix imports and only format
    -l: list files whose formatting differs from goimport's
    -local=: put imports beginning with this string after 3rd-party packages
    -memprofile=: memory profile output
    -memrate=: if > 0, sets runtime.MemProfileRate
    -srcdir=: choose imports as if source code is from dir
    -trace=: trace profile output
    -v: verbose logging
    -w: write result to (source) file instead of stdout
documentation:
    command: '[AI] `goimports` is a command-line tool in Go programming language used to automatically determine and write import declarations for files, based on their content and the files they depend on. It analyzes Go source code files and suggests the necessary import packages that need to be included at the beginning of each file to make the code compile correctly. The suggested imports can then be written to the files using the `-w` flag or copied manually. This tool simplifies the process of managing dependencies in Go projects, ensuring correct and complete import statements.'
    flag:
        cpuprofile: |-
            [AI] `goimports` is a command-line tool in Go programming language used to automatically download and organize import packages for your Go sources. The `-cpuprofile` option is related to Go's built-in CPU profiling feature.

            When you run your Go program with the `-cpuprofile` flag followed by an output file path, the Go runtime generates a CPU profile during execution. This profile contains information about the functions and operations that consumed the most CPU time.

            The `goimports` tool does not directly interact with this flag, but when you use it to manage your imports in your Go project, it can help you set up your main program to generate the CPU profile by adding or modifying the necessary flags in your build commands. In summary, `goimports -cpuprofile` is not a standalone command but rather an aid in utilizing the Go profiling feature with proper import management.
        d: '[AI] `goimports -d` is a command-line flag used with the Go tool `goimports`. It stands for "deferred" and is used to import packages but not apply their defaults, meaning it does not execute any functions or set any global variables from the imported packages. This flag is particularly useful when writing tests or dealing with specific use cases where one only wants to import packages without executing their side effects.'
        e: '[AI] `goimports -e` is a command-line tool used in Go programming language for managing import declarations in Go source files. The `-e` flag stands for "in place," which means the tool will modify the current file directly instead of generating new files. In other words, it will update the import sections of the specified Go file with the required packages and their corresponding versions based on the existing imports and the Go mod file.'
        format-only: '[AI] `goimports` is a command-line tool in Go language for managing import sections of Go source files. The `-format-only` flag is used to format the import section of Go files according to Go''s standard rules without writing the result to a file. It is useful for checking and formatting the import sections of multiple files without modifying the original code.'
        l: '[AI] `goimports` is a command-line tool in Go programming language used for managing `go.mod` and `go.sum` files, which are responsible for managing project dependencies. The `-l` flag is an option for `goimports`. When this flag is provided, `goimports` will only list the missing import paths that need to be added in the current `go.mod` file for the project to be up-to-date. This command doesn''t make any changes to your files but only prints out the necessary information.'
        local: '[AI] `goimports` is a command-line tool in Go programming language used to analyze and update `go.mod` files based on the import declarations in source code files. The `-local` flag is an option for this command, which means that only local packages (those not in the standard library nor in external modules) will be imported or updated. In other words, using `goimports -local` ensures that only local dependencies are managed.'
        memprofile: '[AI] `goimports` is a command-line tool in Go language used to update import declarations in Go source files. The `-memprofile` flag generates a memory profile for the imported packages during the import processing phase. This flag writes the profile data into a file named `pprof.mem` by default, which can be later analyzed using various profiling tools like `pprof`. The memory profile helps identify memory consumption patterns and leaks in the codebase.'
        memrate: |-
            [AI] `goimports` is a command-line tool in Go language for managing `go.mod` and `go.sum` files, which are used to manage dependencies in Go projects. The `-memflag memrate` option is not a standard flag for `goimports`. It seems like a typo or an undefined custom flag.

            By design, `goimports` doesn't have any built-in flags related to memory usage or rate limits. If you need to monitor memory usage while using `goimports`, consider running the tool in a separate environment with sufficient resources or use system tools like `top` (Unix) or `Task Manager` (Windows) to keep track of memory consumption during the execution.
        srcdir: '[AI] `goimports` is a command-line tool in Go programming language, used to automatically process and update `go.mod` files based on import paths referenced in source code files. The `-srcdir` flag specifies the directory or directories as the starting point for finding Go source files to include in the import graph. This means that `goimports` will only consider the files inside the specified directories and their subdirectories when determining which packages to import, ensuring consistency across projects and reducing potential conflicts with external dependencies.'
        trace: '[AI] `goimports` is a tool in Go programming language used to format import statements. The `-trace` flag, when used with `goimports`, causes it to follow all dependencies recursively and update the import statements accordingly. This means that not only the direct imports of the current file will be updated but also the imports of the imported packages up to the root level. This helps in keeping a consistent and organized import structure across the entire project.'
        v: '[AI] `goimports -v` is a command-line tool used in Go programming language to automatically format and import Go packages in source code files. The `-v` flag stands for "verbose," which means it provides detailed output about the imported packages that will be added or modified during the processing. This can help developers understand the changes made by the tool, making it easier to keep their Go codebase consistent with best practices.'
        w: '[AI] `goimports -w` is a command-line tool in Go programming language used for automatically importing and organizing missing or incorrect package imports in source code files. The `-w` flag stands for "whole-project" mode, which means it recursively applies the import processing to all `.go` files within the current directory and its subdirectories. This helps keep the Go project''s import statements consistent and up-to-date.'
