# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: start [OPTIONS] CONTAINER [CONTAINER...]
description: Start one or more stopped containers
flags:
    --checkpoint-dir=: Use a custom checkpoint storage directory
    --checkpoint=: Restore from this checkpoint
    --detach-keys=: Override the key sequence for detaching a container
    -a, --attach: Attach STDOUT/STDERR and forward signals
    -i, --interactive: Attach container's STDIN
documentation:
    command: '[AI] The `docker container start` command is used to start a previously created and stopped Docker container from its saved state. The container will run with its original configuration and network settings. You need to provide the container ID or name as an argument to this command. For example, `docker container start my_container`.'
    flag:
        attach: '[AI] The `docker container start --attach` command is used to start a previously stopped Docker container and attach to its standard input, output, and error streams (stdout, stderr) in the current terminal session. This allows users to interact with the container''s processes and see their output in real-time. When you run this command, Docker will start the container and automatically connect the terminal output to the container''s logs so that you can monitor its activity.'
        checkpoint: '[AI] The `docker container start --checkpoint` command is used to start a Docker container from a specific checkpoint instead of starting it from the default state or image. A checkpoint represents the complete state of a running container at a given point in time, including its filesystem, memory, network connections, and running processes. By using this option, you can quickly resume a container''s execution from a previous saved state without having to rebuild or start the container from scratch. This is particularly useful when working with long-running containers or for troubleshooting purposes.'
        checkpoint-dir: '[AI] The `docker container start --checkpoint-dir` command is used to start a Docker container from an existing checkpoint instead of starting it from scratch or using an image. A checkpoint represents the state of a running container at a specific point in time, including its file systems, processes, and network connections. By specifying a `--checkpoint-dir` option, you can provide a directory containing the checkpoint files to use for starting the container. This can be useful when you want to resume a long-running container from a saved state rather than rebuilding it from an image or restoring its data from backups.'
        detach-keys: '[AI] The `docker container start --detach-keys` command is used to start a Docker container in detached mode with the specified key combination for attach interaction. When starting a container in detached mode, you can use the `--detach-keys` option followed by a comma-separated list of keyboard shortcut keys to specify how to attach to the container''s console. This allows you to define your preferred keyboard shortcuts and easily switch between containers using those keys. For instance, if you set the key combination as "--detach-keys=ctrl-a,shift-m", pressing those keys together will bring focus to the Docker Desktop UI and allow you to interact with the container''s console.'
        interactive: '[AI] The `docker container start --interactive` command is used to start a previously created Docker container in an interactive mode. This means that a new terminal session is opened for the container, allowing you to interact with its processes and applications as if you were logged into it directly. In other words, you can send commands to the container and see their output in real-time. This flag is useful when you need to run a command inside a container that requires user input or produces extensive output, such as debugging an application or running a complex script.'
