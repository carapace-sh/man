# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: go-tool-cgo
description: Cgo enables the creation of Go packages that call C code
flags:
    -V: print version and exit
    -debug-define: 'print relevant #defines'
    -debug-gcc: print gcc invocations
    -dynimport=: if non-empty, print dynamic import data for that file
    -dynlinker: record dynamic linker information in -dynimport mode
    -dynout=: write -dynimport output to this file
    -dynpackage=: set Go package for -dynimport output (default "main")
    -exportheader=: where to write export header if any exported functions
    -gccgo: generate files for use with gccgo
    -gccgo_define_cgoincomplete: define cgo.Incomplete for older gccgo/GoLLVM
    -gccgopkgpath=: -fgo-pkgpath option used with gccgo
    -gccgoprefix=: -fgo-prefix option used with gccgo
    -godefs: 'for bootstrap: write Go definitions for C file to standard output'
    -import_runtime_cgo: import runtime/cgo in generated code (default true)
    -import_syscall: import syscall in generated code (default true)
    -importpath=: import path of package being built (for comments in generated files)
    -objdir=: object directory
    -srcdir=: source directory
    -trimpath=: applies supplied rewrites or trims prefixes to recorded source file paths
documentation:
    command: '[AI] `go-tool-cgo` is a command-line tool bundled with Go language''s standard library. Its primary function is to compile C or C++ source code and integrate them into Go programs using the foreign function interface (FFI). The `go build` command uses `cgo` under the hood when building projects that include C or C++ dependencies. It handles compiling, linking, and managing header files required for interaction between the Go and C/C++ code.'
    flag:
        V: '[AI] `go-tool-cgo -V` is a command used in the Go programming language ecosystem to check for the version of the `cgo` tool. `cgo` is a Go compiler extension that allows calling C code from Go code. The `-V` flag is used with various Go tools to display their version information. In this specific case, `go-tool-cgo -V` will print out the version number of the installed `cgo` tool.'
        debug-define: '[AI] `go-tool-cgo` is a command-line tool in Go programming language used to generate C code for foreign function interfaces (FFIs) that can be called from Go. The `-debug-define` flag is an option passed to this tool that allows defining symbols for debugging purposes during the C code generation. These symbols can later be used in a debugger to help with debugging the generated C code. This flag helps in providing more information and control while debugging the Go program using C code generated by the `cgo` tool.'
        debug-gcc: '[AI] The command `go-tool-cgo -debug-gcc` is used with Google''s Go programming language to invoke its C compiler wrapper, named cgo. The `-debug-gcc` flag instructs cgo to build the C parts of a Go project using GCC (Gnu Compiler Collection) in debug mode. This allows for more extensive debugging information during the compilation process.'
        dynimport: |-
            [AI] `go-tool-cgo` is a part of Golang's standard library used for generating C code from Go source files, allowing the use of C or C++ libraries in Go projects. The `-dynimport` flag modifies the Go compiler's behavior when importing C or C++ libraries.

            With `-dynimport`, the linker does not statically link the C or C++ library into the Go binary but rather performs dynamic linking during runtime. This means that the required C or C++ libraries are loaded from their respective locations (typically system directories or specified in environment variables) when the program is executed, instead of being bundled with the binary itself.

            Using `-dynimport` can be beneficial when dealing with shared libraries and avoiding the problem of having multiple copies of large libraries bundled with different programs. However, it may introduce additional runtime overhead due to dynamic linking, and the required libraries might not always be available during execution on certain systems.
        dynlinker: |-
            [AI] The `go-tool-cgo` is a component of Google's Go programming language toolchain, specifically the CGO (CGO: Compiler Written in Go) package. It allows writing Go code that calls C/C++ functions and uses C libraries by generating the necessary wrapper code during compilation.

            The `-dynlinker` flag is an option provided to this tool when used with certain operating systems, like macOS or Linux. It instructs CGO to use the dynamic linker of the host system to load shared libraries at runtime instead of statically linking them into the Go binary. This approach allows loading libraries at runtime, making it easier to manage dependencies and updates for those libraries.
        dynout: |-
            [AI] `go-tool-cgo` is a Go compiler tool that allows writing Go code that calls C functions. The `-dynlib` or short form `-dll` option generates a shared library file for the output. When using both `-dynlib` and `-export-named` or its shorter version `-x`, like `go-tool-cgo -dll -x`, it is renamed to `-dynout`.

            Therefore, `go-tool-cgo -dynout` generates a shared library file with exported named symbols. This option is useful when you need to call the C functions from other libraries or programs that can load dynamic libraries.
        dynpackage: |-
            [AI] `go-tool-cgo` is a Go compiler tool that facilitates the use of C, C++, and other system libraries in Go projects. The `-dynpackage` flag is an option for `cgo`, which is used when working with dynamic libraries or shared objects.

            When using this flag, the generated C code will be compiled into a dynamic library rather than a static one. This allows the Go application to load and use the functions in the library at runtime without linking them statically during compilation. This can be useful when dealing with large or frequently changing C libraries.
        exportheader: '[AI] `go-tool-cgo` is a command-line tool in Go language''s standard library used for generating C code from Go sources during build process, facilitating interoperability with C libraries. The `-exportheader` flag generates a header file containing Go declarations of C functions and constants needed by the generated C code. This file can then be included in other Go source files to use these C dependencies.'
        gccgo: '[AI] `go-tool-cgo` is a component of the Go programming language''s standard library, specifically a build constraint. It activates the use of C bindings in Go code through the `cgo` tool. The `-gccgo` flag instructs `cgo` to use GCC (GNU Compiler Collection) as the native compiler instead of the default Clang. This allows using GCC for building C code portions when working with Go code that has C dependencies.'
        gccgo_define_cgoincomplete: |-
            [AI] `go-tool-cgo` is a Go tool used to call C code from Go programs. The `-gccgo_define_CGO_cgoinline` flag is specific to the GCC (GNU Compiler Collection) backend of `cgo`.

            This flag instructs `cgo` to define C functions as inline instead of external when building with GCC. Inlining can improve performance by reducing function call overhead, but it also increases binary size and may lead to larger compile times due to expanded code. Therefore, using this flag should be considered carefully based on the specific use case and system constraints.
        gccgopkgpath: '[AI] `go-tool-cgo` is a command-line tool in Go programming language that enables calling C code from Go. The `-gccgopkgpath` option specifies the Go package path for the C headers and libraries used by the C code, which will be accessible to the Go code using the `C.import()` function. This flag allows the Go compiler to locate the required C packages during the build process.'
        gccgoprefix: |-
            [AI] The `go-tool-cgo` is a component of Go programming language's standard library used for building Go programs that call C or C++ code. The `-gccgoprefix` flag is an option provided to this tool. It specifies the prefix to be added to the name of the C/C++ compiler while generating Go code from C/C++ sources during the build process.

            For instance, if you're using GCC as your C compiler and set `-gccgoprefix="gcc"`, then the generated Go source files will have imports like: `"C" "gcc" "..."`. The main purpose of this flag is to help manage potential naming conflicts with other C/C++ libraries that might be in use during the build process.
        godefs: '[AI] `go-tool-cgo` is a part of Go''s standard library used for building Go code that calls C or C++ code through the `C` or `Cmmo` interfaces. The `-godefs` flag, when passed to `go-tool-cgo`, tells it to generate and include a `*.godef` file during the compilation process. This file contains definitions for external C or C++ headers that are used in the Go source code, allowing the Go compiler to correctly type check the Go code. In summary, using `go-tool-cgo -godefs` helps in managing dependencies and ensuring proper type checking while calling native code from Go.'
        import_runtime_cgo: |-
            [AI] The `go-tool-cgo` is a command-line tool in Go programming language used for generating and managing C code that calls Go functions with the Go runtime. The `-import_runtime_cgo` flag is an option passed to this tool.

            This flag instructs the generator to import the Go standard library's C interface for the Go runtime into the generated C code file. This allows the C code to interact more closely with the Go runtime, including functions like `goenv`, `mmap`, and others. Including this flag helps expand the capabilities of the C code within a Go project.
        import_syscall: '[AI] `go-tool-cgo` is a compiler in the Go toolchain used to call C code from Go. The `-import_syscall` flag is an option for this compiler. When set, it automatically imports the syscall package, which provides functions for interacting with the operating system, such as reading or writing files, creating processes, or manipulating network sockets. This flag simplifies the process of using low-level C code and system calls in Go projects.'
        importpath: '[AI] The `go-tool-cgo` is a command-line tool in the Go programming language used to generate C code from Go source files that call foreign functions or use C-defined types. The `-importpath` option specifies the Go module import path, which defines the location of the package being built, enabling proper dependency resolution and compilation. It takes the form `<module-name>@<version>`, where `<module-name>` is a unique name for your project, and `<version>` can be either a specific semantic version number or set to `latest`. This flag ensures that when CGO generates C code it does so in a way that integrates properly with the Go module system.'
        objdir: '[AI] `go-tool-cgo` is a command-line tool in the Go programming language used for generating C code from Go source files. The `-objdir` option specifies the directory where the generated object files will be placed during compilation. This can be useful to manage build outputs when working with large or complex projects.'
        srcdir: '[AI] `go-tool-cgo` is a part of Go programming language''s toolchain, specifically the C compiler for Go (written in C). The `-srcdir` option is used when building Go projects that depend on C or C++ code. It sets the source directory for those external projects, helping `go build` find and compile the required C/C++ files during the Go project''s build process. In simple terms, it points to the location of the C/C++ sources in a multi-language Go project.'
        trimpath: '[AI] `go-tool-cgo` is a command-line tool in Go programming language that allows calling C code from Go. The `-trimpath` flag is used during the compilation process to remove unnecessary directory paths from the input C source files'' header files'' include directives. This helps in reducing the final binary size by excluding unused or irrelevant headers, making the build output cleaner and more efficient.'
