# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: migrate
description: Read an older version of the kubeadm configuration API types from a file, and output the similar config object for the newer version
flags:
    --new-config=: Path to the resulting equivalent kubeadm config file using the new API version. Optional, if not specified output will be sent to STDOUT.
    --old-config=: Path to the kubeadm config file that is using an old API version and should be converted. This flag is mandatory.
documentation:
    command: '[AI] `kubeadm config migrate` is a command used in Kubernetes to transfer the configuration of a master node to another machine, allowing for a safe and controlled migration process. The new node will take over as the master, ensuring minimal downtime and maintaining consistency with the previous master''s state. This command is particularly useful when performing maintenance or upgrades on existing clusters. It handles the transfer of crucial components like certificates, cluster configuration, and join tokens while preserving essential data for a seamless transition.'
    flag:
        new-config: '[AI] `kubeadm config migrate --new-config` is a command used in Kubernetes to migrate the configuration of a running Kubernetes cluster from one node to another, using `kubeadm`. This command creates a new configuration file based on the current state of the cluster and applies it to the new node. It''s typically used when upgrading or adding nodes to an existing cluster. The `--new-config` flag specifies that only the new configuration should be generated, without making any changes to the existing cluster. The resulting configuration can then be applied to the new node using `kubeadm init`.'
        old-config: '[AI] `kubeadm config migrate --old-config` is a command used to migrate the configuration of a Kubernetes cluster managed by kubeadm from one set of files to another. The `--old-config` flag specifies that the new configuration files are to be populated with the current state of the cluster, which allows for a seamless and consistent transition between configurations. This command is useful when upgrading or making changes to the Kubernetes control plane components while keeping the existing cluster state.'
