# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create
description: Create a new consul CA
flags:
    --additional-name-constraint=: Add name constraints for the CA.
    --cluster-id=: ClusterID of the consul cluster.
    --common-name=: Common Name of CA.
    --days=: Provide number of days the CA is valid for from now on.
    --domain=: Domain of consul cluster.
    --name-constraint: Add name constraints for the CA.
documentation:
    command: '[AI] The `consul tls ca create` command is used to generate a new Transport Layer Security (TLS) certificate authority (CA) in Consul, which is an open-source tool for service discovery, configuration, and orchestration. This command creates a new private key and public certificate for the CA, and then saves them as files. These files can be used to sign TLS certificates for Consul clients and servers during their secure communication. By default, the generated CA files are saved in the `$HOME/.consul/ca` directory, but users can specify a different path using the `-save-dir` flag.'
    flag:
        additional-name-constraint: '[AI] The `consul tls ca create` command in Consul is used to generate a new TLS CA certificate. The `--additional-name-constraint` option allows specifying an extended X.509 subject alternative name constraint for the certificate. This means you can define additional names or IP addresses that the certificate will be valid for, beyond the standard Common Name (CN). This can be useful for securing communications with multiple servers or services using a single certificate.'
        cluster-id: '[AI] The `consul tls ca create --cluster-id` command is used to generate a new TLS Certificate Authority (CA) in Consul, which is part of the Hashicorp''s multi-purpose discovery service and configuration management toolkit. The `--cluster-id` option specifies a unique identifier for the CA within the Consul cluster. This command creates and saves a new private key and certificate for the CA, and makes it available for use in securing client-server communication within the Consul cluster using TLS encryption.'
        common-name: |-
            [AI] The `consul tls ca create` command in Hashicorp Consul is used to generate a new TLS Certificate Authority (CA) bundle. The option `--common-name` specifies the common name to be used for the CA certificate within the generated bundle. This name identifies the entity that the CA will issue certificates for, and it is typically set to the organization or domain name. For example:

            ```bash
            consul tls ca create --common-name myorg
            ```

            This command generates a new TLS CA with the given common name "myorg", and the generated CA certificate can then be used to sign server and client certificates for services running in Consul.
        days: '[AI] The `consul tls ca create` command is used to generate a new Transport Layer Security (TLS) Certificate Authority (CA) in Consul, an open-source distributed computing platform. The `--days` flag specifies the validity period of the CA certificate in number of days. For example, if you set `--days 3650`, the CA certificate will be valid for 10 years (since there are 3650 days in a 10-year period). This helps ensure secure communication between Consul servers and clients by managing the expiration of TLS certificates.'
        domain: '[AI] The `consul tls ca create` command is used in Hashicorp Consul to generate a new Transport Layer Security (TLS) certificate authority (CA) and associated key pair. The `--domain` option specifies the domain name for the generated certificates, which helps differentiate them from other certificates and enables secure communication with Consul services using HTTPS. The newly created CA can then be used to sign server and client certificates for securing Consul communications.'
        name-constraint: '[AI] The `consul tls ca create` command in Hashicorp''s Consul service is used to generate a new TLS certificate authority (CA) with a specified name constraint. A name constraint defines the common name (CN) or subject alternative names (SAN) for the generated certificates. This constraint helps ensure that the certificates issued by the CA are only valid for specific domains or services, enhancing security and preventing potential misuse of the certificates.'
