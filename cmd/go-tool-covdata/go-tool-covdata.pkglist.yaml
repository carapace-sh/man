# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pkglist
description: output list of package import paths
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -pkg=: Restrict output to package(s) matching specified package pattern.
    -v=: Verbose trace output level
documentation:
    command: '[AI] `go-tool-covdata` is a Go tool used to process and analyze test coverage data generated during Go testing. The command `go-tool-covdata pkglist` specifically generates a list of packages in a given Go source directory, along with their respective test files and coverage profiles if available. This command can be useful for understanding which packages have tests and coverage data associated with them, allowing for focused analysis and improvement of testing efforts within the project.'
    flag:
        cpuprofile: |-
            [AI] The `go-tool-covdata pkglist -cpuprofile` command is used in Go programming language to generate a coverage profile report and a CPU profile for the specified packages.

            Here's a breakdown of the command:

            1. `go-tool`: This is the name of the Go tool that manages various Go tools.
            2. `covdata`: This is a subcommand under `go-tool`, which processes and analyzes coverage data generated during testing.
            3. `pkglist`: This is another subcommand under `covdata`, which outputs the list of tested packages along with their corresponding coverage information.
            4. `-cpuprofile`: This option generates a CPU profile, which helps identify which functions are consuming the most CPU time during program execution.
            5. The packages to be analyzed are specified as arguments after the command.

            In summary, this command generates both coverage and CPU profiling reports for the listed Go packages.
        hw: |-
            [AI] `go-tool-covdata` is a command-line tool from the Go programming language's standard library used to manage and process test coverage data. The specific command `go-tool-covdata pkglist -hw` performs the following tasks:

            1. `pkglist`: This argument instructs the tool to generate a list of packages, indicating which ones have been tested and which files within those packages have been covered by the tests.
            2. `-h` or `--help`: This flag requests the tool to display help information about itself and its subcommands. In this case, it provides details about the `pkglist` command.
            3. `-w` or `--write-output`: This flag instructs the tool to write the generated coverage report (i.e., package list) into a file instead of displaying it on the terminal. When used with the `pkglist` command, the output is usually in JSON format and written to stdout by default. With this flag, you can redirect the output to a specified file.

            So, the overall command `go-tool-covdata pkglist -hw` generates a coverage report in the form of a package list and writes it to a file, displaying help information about the `pkglist` command during the process.
        i: '[AI] The `go-tool-covdata pkglist -i` command is a part of the Go tooling ecosystem. It reads a list of Go packages in the given input file and generates a new file containing coverage data for each package. This command is used during testing to analyze the code coverage of the Go projects. The `-i` flag specifies that the input is a file listing the packages instead of individually naming them.'
        memprofile: |-
            [AI] The `go-tool-covdata pkglist -memprof` command is a part of the Go tooling ecosystem for profiling Go programs. It generates a memory profile report in the `.prof` format for the packages listed in the given Go module's `go.mod` file.

            This command specifically requests memory profiles, which differ from other types like CPU or blocking profile reports. Memory profiles help analyze and identify memory allocations and leaks by capturing the call stacks when garbage collections occur, providing insights into memory usage patterns in your program.

            In summary, this command generates a memory profiling report for all packages mentioned in your Go module's dependency tree. This information can be useful for optimizing your application's memory consumption and identifying potential memory leaks or inefficient allocations.
        memprofilerate: |-
            [AI] The `go-tool-covdata pkglist -memprofrate` command is used with the Go programming language's profiling tools. Here's a brief explanation of what it does:

            1. `go-tool-covdata`: This is a command-line tool that processes coverage data files generated by Go's testing and benchmarking features.
            2. `pkglist`: The `pkglist` subcommand generates a list of packages with their corresponding coverage information.
            3. `-memprofrate`: This flag instructs the tool to output memory profiling data at a specific sampling rate (in Hz). For example, if you run it as `go-tool-covdata pkglist -memprofrate=100`, it will sample and record memory usage data every 1 ms.

            So, in summary, the command `go-tool-covdata pkglist -memprofrate` generates a list of packages with their coverage information along with memory profiling data at a specified sampling rate.
        pkg: '[AI] The `go-tool-covdata pkglist -pkg` command is used in Go programming language to generate a list of packages for which coverage data is available. This command is part of the Go testing and profiling tools, specifically the "cov" tool. It takes the name of a package as an argument (using the `-pkg` flag) and produces an output containing the list of source files in that package for which there exists corresponding coverage data. This information can be useful for analyzing test coverage during software development.'
        v: |-
            [AI] `go-tool-covdata` is a command-line tool from the Go programming language ecosystem, specifically used for handling coverage data produced during testing. The `pkglist` subcommand generates a list of packages that were tested and includes the corresponding source file paths and coverage information.

            The `-v` flag enables verbose output mode, providing more detailed information about the packages being processed and the generated coverage data. So, when running `go-tool-covdata pkglist -v`, you will get a detailed list of tested packages along with their respective source files and coverage statistics.
