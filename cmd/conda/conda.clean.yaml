# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clean
description: Remove unused packages and caches
flags:
    --json: Report all output as json.
    -a, --all: Remove index cache, lock files, unused cache packages, and tarballs.
    -c*=: Remove temporary files that could not be deleted earlier due to being in-use.
    -d, --dry-run: Only display what would have been done.
    -f, --force-pkgs-dirs: Remove *all* writable package caches.
    -h, --help: Show this help message and exit.
    -i, --index-cache: Remove index cache.
    -p, --packages: Remove unused packages from writable package caches.
    -q, --quiet: Do not display progress bar.
    -t, --tarballs: Remove cached package tarballs.
    -v, --verbose: Can be used multiple times.
    -y, --yes: Do not ask for confirmation.
documentation:
    command: |-
        [AI] `conda clean` is a Command Line Interface (CLI) command in Anaconda Distribution for managing and maintaining the Conda environment. It has three sub-commands:

        1. `conda clean --all`: Removes all cache files, including those related to failed downloads or deleted packages. This operation may take some time and use significant disk space.

        2. `conda clean --config`: Cleans the configuration files, such as .condarc or environment specifications, which can help solve configuration issues.

        3. `conda clean <env>`: Cleans the specified Conda environment, including packages, cache files, and other related data, while leaving the base environment untouched. This command is useful when troubleshooting or when dealing with a specific environment.
    flag:
        all: '[AI] `conda clean --all` is a command used in Anaconda or Miniconda distribution of Python and R data science environments. It performs a deep cleaning of the conda cache and deleted unused packages, saved environments, and other unnecessary files. The ''--all'' option tells Conda to perform both the regular clean-up (removing build caches, metadata, etc.) as well as the force clean-up (deleting non-essential files like saved environments). This can help free up disk space and improve performance in your conda environment.'
        c: '[AI] `conda clean -c` is a command in Anaconda or Miniconda distribution of Python for managing packages and environments. The option `-c` stands for "cache." This command cleans the local conda cache, which is a folder storing downloaded packages and their dependencies. By removing unused packages and caches, it helps free up disk space and improves build and install times for future package installations.'
        dry-run: '[AI] `conda clean --dry-run` is a command in Anaconda''s conda package manager. This command performs a trial run of cleaning up the local conda environment, showing which files and directories would be deleted or modified without actually making any changes. It helps users preview the effects of `conda clean` operations, such as removing build caches, temporary files, or even uninstalling packages, before executing the commands in real mode.'
        force-pkgs-dirs: '[AI] The `conda clean --force-pkgs-dirs` command is a function in Anaconda''s Conda package management system. It is used to remove metadata and cached packages from the local conda cache, specifically targeting the "pkgs" directories under the `~/.conda/pkgs` directory. The "--force-pkgs-dirs" option ensures that the command forces the removal of these directories even if they are not empty. By doing so, it frees up disk space and helps keep the conda environment manageable.'
        help: |-
            [AI] `conda clean` is a command from Anaconda's Conda package manager. The `--help` option provides detailed information about available sub-commands and their usage. Here's a brief summary:

            - `conda clean --help`: Displays help text for all `conda clean` sub-commands.
            - `conda clean [options] [prefix [packages]]`: Removes various types of cached data. By default, it cleans the metadata and solved packages cache. You can add `--files` to also remove package files and build artifacts, or `--all` for a more thorough clean. To specify one or multiple conda environments with `prefix`, use their absolute paths or environment names. The optional `packages` argument allows you to delete specific package(s).
        index-cache: |-
            [AI] The `conda clean --index-cache` command is a function in Anaconda's Conda package manager used to clear the local index cache. This cache stores metadata about packages and their dependencies, allowing for faster conda installations and updates. However, over time, it may become large or outdated, leading to potential issues such as installation failures or slower performance.

            By running `conda clean --index-cache`, Conda deletes the cached metadata files in the local index cache directory, which are then rebuilt when needed during subsequent package installations or updates. This process frees up disk space and ensures that the local index cache is up-to-date with the latest available packages.
        json: '[AI] `conda clean --json` is a command in Anaconda''s Conda package manager used to remove metadata and cached packages that are no longer needed. The `--json` option generates output in JSON format, providing detailed information about the files and directories being cleaned. This includes the type of data (e.g., cache, metadata), the location, and the size before and after cleaning.'
        packages: '[AI] `conda clean --packages` is a command in Anaconda or Miniconda distribution of Python for managing environments. It specifically targets packages installed in the base environment or globally, and allows users to remove unused or outdated packages from their Conda installation. By running this command without any additional arguments, all metadata for packages not currently installed will be removed, while passing `--all` as an argument will also delete the actual package files. This can help keep your Conda environment lean and efficient by removing unnecessary packages and reducing disk space usage.'
        quiet: '[AI] `conda clean --quiet` is a command used in Anaconda/Miniconda distribution of Python and R data sciences environments. This command with the `--quiet` flag option runs the `conda clean` operation quietly, meaning it will not display progress messages or other detailed output during the execution. The primary purpose of `conda clean` is to remove packages that are no longer in use or that have been installed in editable mode and are not required, thus freeing up disk space and maintaining a clean environment.'
        tarballs: '[AI] The `conda clean --tarballs` command is a utility in Anaconda''s Conda packaging and dependency management system. This command is used to remove downloaded tarball (compressed file) packages that are no longer needed, thereby freeing up disk space. By deleting these unused files, Conda can focus on using the installed local cached packages for future environment creations or updates. It''s important to note that this command does not delete installed packages, only their downloaded tarballs.'
        verbose: '[AI] `conda clean --verbose` is a command in Anaconda''s conda package manager used to remove unused packages, uninstalled dependencies, and other metadata to free up disk space. The `--verbose` flag increases the output of the command to show more details about the files being deleted.'
        "yes": |-
            [AI] `conda clean --yes` is a command used in Anaconda or Miniconda distribution of Python and its packages management system, Conda. The command with the `--yes` option enables the confirmatory prompt to be skipped, meaning that it will proceed with the cleanup operation without asking for confirmation each time. Specifically, this command does one or more of the following:

            1. Removes the build and cache folders: These are temporary directories that store artifacts from package builds and installations. They can accumulate over time and take up significant space.
            2. Removes unused packages: Conda scans your environments and identifies packages that are no longer in use, and offers to remove them. This helps keep the Conda installation lean and efficient.

            Overall, `conda clean --yes` is a useful command for managing your Conda environment by removing unnecessary files and packages.
