# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: lint
description: Lint source files
flags:
    --ignore?: Ignore linting particular source files
    --json: Output lint result in JSON format
    --rules: List available rules
    --rules-exclude?: Exclude lint rules
    --rules-include?: Include lint rules
    --rules-tags?: Use set of rules with a tag
    -c, --config=: Load configuration file
documentation:
    command: '[AI] `deno lint` is a command provided by Deno, a modern JavaScript runtime, used to check the codebase for potential errors and issues without running it. It performs static analysis on TypeScript or JavaScript files using the built-in ESLint engine for Deno. The output provides suggestions for improvements, helping developers maintain code quality and adherence to best practices.'
    flag:
        config: '[AI] `deno lint --config` is a command used in Deno, a modern JavaScript runtime, to run the Deno Lint tool for checking TypeScript or JavaScript code for potential errors and style issues. The `--config` option is used to specify a custom configuration file containing rules and settings for Deno Lint to apply during the linting process. This helps ensure consistent coding standards across a project and catches issues early in the development cycle.'
        ignore: '[AI] `deno lint --ignore` is a command used in Deno, a modern JavaScript runtime. This command runs Deno''s built-in linter, but with the `--ignore` option it allows specific files or directories to be excluded from being linted. The `--ignore` flag accepts a list of glob patterns as arguments. For example, `deno lint --ignore="*.html,**/*.test.ts"` will ignore all HTML files and test files when running the linter. This is useful for large projects where certain files may not need to adhere to strict coding standards or are still under development.'
        json: '[AI] `deno lint --json` is a command used in Deno, a modern and secure TypeScript-based runtime. This command runs Deno''s built-in linter over the current directory or specified files, producing output in JSON format. The JSON output includes details about any found errors or warnings, such as file path, line number, column number, message, and severity level (error or warning). Developers can use this data to improve their codebase automatically by integrating it with continuous integration tools or other development workflows.'
        rules: '[AI] `deno lint --rules` is a command in Deno, a modern and secure TypeScript runtime. It runs the Deno Linter tool to check TypeScript files for potential errors, code smells, and style issues. The `--rules` flag specifies a set of rules to apply during the linting process. These rules can be selected from a predefined list or custom ones defined in `.denolint.json`. By using specific rules, developers can enforce consistency and maintainability across their projects.'
        rules-exclude: '[AI] `deno lint --rules-exclude` is a command-line option for Deno''s built-in lint tool. It allows you to exclude specific files or directories from being checked during the linting process. This can be useful when you have large projects with many files and want to focus on checking certain parts of the codebase, or if there are specific files that contain valid but non-standard code that you don''t want to change. The `--rules-exclude` option takes a glob pattern as its argument, which can be used to specify multiple files or directories. For example, `--rules-exclude="test/**/*.ts"` would exclude all `.ts` files in the `test` directory from the linting process.'
        rules-include: '[AI] `deno lint --rules-include` is a command used in Deno, a modern and secure TypeScript runtime. The `--rules-include` option allows you to specify a custom rules file to be loaded during the linting process. This enables enforcing specific coding guidelines or best practices beyond what''s included by default. It helps ensure consistency and maintainability in your Deno projects.'
        rules-tags: '[AI] The `--rules-tags` option in Deno''s `lint` command is used to enable or disable specific rules based on their tags. Each rule in Deno''s TypeScript type checker and ESLint plugins comes with zero or more tags that describe its functionality or severity level. By passing a comma-separated list of tag names to the `--rules-tags` option, you can selectively enable or disable rules based on their tags without affecting other rules. This is particularly useful when you want to focus on specific issues in your codebase while suppressing others.'
