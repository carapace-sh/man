# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: convert
description: Convert a Docker Compose file
flags:
    --build-branch=: Specify repository branch to use for buildconfig (default master)
    --build-repo=: Specify source repository for buildconfig (default remote origin)
    --build=: Set the type of build ("local"|"build-config"(OpenShift only)|"none")
    --controller=: Set the output controller ("deployment"|"daemonSet"|"replicationController")
    --daemon-set: Generate a Kubernetes daemonset object (deprecated, use --controller instead)
    --deployment-config: Generate an OpenShift deploymentconfig object
    --emptyvols: Use Empty Volumes. Do not generate PVCs
    --indent=: Spaces length to indent generated yaml files
    --insecure-repository: Use an insecure Docker repository for OpenShift ImageStream
    --multiple-container-mode: Create multiple containers grouped by 'kompose.service.group' label
    --push-image: If we should push the docker image we built
    --push-image-registry=: Specify registry for pushing image, which will override registry from image name.
    --pvc-request-size=: Specify the size of pvc storage requests in the generated resource spec
    --replicas=: Specify the number of replicas in the generated resource spec
    --replication-controller: Generate a Kubernetes replication controller object (deprecated, use --controller instead)
    --service-group-mode=: Group multiple service to create single workload by `label`(`kompose.service.group`) or `volume`(shared volumes)
    --service-group-name=: Using with --service-group-mode=volume to specific a final service name for the group
    --stdout: Print converted objects to stdout
    --volumes=: Volumes to be generated ("persistentVolumeClaim"|"emptyDir"|"hostPath" | "configMap")
    --with-kompose-annotation: Add kompose annotations to generated resource
    -c, --chart: Create a Helm chart for converted objects
    -d, --deployment: Generate a Kubernetes deployment object (deprecated, use --controller instead)
    -j, --json: Generate resource files into JSON format
    -o, --out=: Specify a file name or directory to save objects to (if path does not exist, a file will be created)
    -y, --yaml: Generate resource files into YAML format
documentation:
    command: '[AI] `kompose convert` is a command from the Kubernetes Kompose tool that allows you to convert a Docker Compose file into Kubernetes YAML files. This enables running multi-container applications in a Kubernetes cluster instead of Docker Swarm or standalone Docker containers. The resulting YAML files define various Kubernetes resources, such as deployments, services, and volumes, required for your application to run effectively within the Kubernetes environment.'
    flag:
        build: '[AI] `kompose convert --build` is a command from Kubernetes tool Kompose, used to convert a Docker Compose file into Kubernetes YAML files. The `--build` option instructs Kompose to include build steps in the generated YAML files, meaning that Docker images will be built when deploying the application to a Kubernetes cluster. This is particularly useful for creating and managing containerized applications that require custom builds or dependencies not available in public registries.'
        build-branch: '[AI] `kompose convert --build-branch` is a command used in Kubernetes to convert Docker Compose files into Kubernetes configs. The `--build-branch` option specifies the Git branch or commit SHA where the Dockerfiles for building images are located. This flag ensures that when the converted Kubernetes YAML files are applied, they will use the specified branch or commit for image builds. It helps maintain consistency between the Compose and Kubernetes versions of your application.'
        build-repo: '[AI] `kompose convert --build-repo` is a command used in Kubernetes to convert a Compose file (YAML format for defining and running multi-container Docker applications) into Kubernetes manifests. The `--build-repo` flag specifies that images mentioned in the Compose file should be built from a Docker repository instead of using existing local images or pulling from a registry. This is useful when you want to ensure consistent image versions across your development, testing, and production environments by building the images locally or within a private container registry.'
        chart: '[AI] `kompose convert --chart` is a command used in Kubernetes application development with Kompose, an open-source tool for defining and running multi-container Docker applications on Kubernetes. This specific command converts a Docker Compose file into Kubernetes manifest files using the latest chart definitions. The generated Kubernetes YAML files follow the Helm Chart standard and can be deployed using common Kubernetes tools such as `kubectl` or Helm.'
        controller: '[AI] `kompose convert --controller` is a command used in Kubernetes to convert Docker Compose files into Kubernetes manifests. The `--controller` option specifies that only the Kubernetes YAML files for the controller services should be generated. Controller services are those that manage and coordinate other components within a system, such as databases or message brokers. By converting these services to Kubernetes manifests using `kompose`, users can easily deploy and manage them in a Kubernetes cluster.'
        daemon-set: '[AI] `kompose convert --daemon-set` is a command used in Kubernetes to convert a Docker Compose file into Kubernetes resource definitions. The `--daemon-set` flag specifically converts a Compose file that defines a daemon set, which is a type of deployment for services that need to run as background processes on all nodes in a cluster, ensuring high availability and scalability. The output will be Kubernetes YAML files defining the converted DaemonSet object.'
        deployment: '[AI] `kompose convert --deployment` is a command from Kompose, an open-source tool for defining and running multi-container Docker applications. This command converts Kubernetes YAML deployment files to the equivalent Compose format files (dockfile or docker-compose.yml). It analyzes the specified Kubernetes deployment file(s) and generates the corresponding Compose configuration, making it easier to deploy the application using Docker Compose instead of directly with Kubernetes.'
        deployment-config: '[AI] `kompose convert --deployment-config` is a command used in Kubernetes and Docker environments to convert traditional Compose files (YAML format) into native Kubernetes resources such as Deployments, Services, and ConfigMaps. This conversion allows running containers defined in the Compose file as Kubernetes pods with managed replicas, rollouts, and other advanced features provided by Kubernetes. The `--deployment-config` flag is used to specify the output format of the generated Kubernetes resources as a single DeploymentConfig file instead of separate files for each resource type.'
        emptyvols: '[AI] `kompose convert --emptyvols` is a command used in Kubernetes to convert a Docker Compose file into Kubernetes YAML format. The `--emptyvols` option indicates that empty volume declarations in the Docker Compose file should be converted to empty PersistentVolumeClaims or empty Volumes in Kubernetes, which do not initially contain any data but can be claimed and populated later. This option allows for more fine-grained control over the persistence of data in the Kubernetes environment.'
        indent: '[AI] `kompose convert --indent` is a command used in Kubernetes to format YAML files based on a given indentation level. The `kompose` tool is used for converting Compose files (a format used by Docker) into Kubernetes manifests. The `--indent` option specifies the desired indentation level, which can be set using a number or a string value representing the desired indentation style (e.g., "2" for 2 spaces or ">4" for greater than 4 spaces). The output YAML files will then adhere to this formatting rule.'
        insecure-repository: '[AI] `kompose convert --insecure-registry` is a command used with Kompose, a tool for defining and running multi-container Docker applications. The flag enables insecure access to a Docker registry when pushing or pulling images. This means that SSL/TLS verification will be disabled, potentially making the communication between the host and the registry less secure. It''s generally recommended to use HTTPS connections for secure data transfer over the network. However, this option may come in handy when working with private registies that do not support TLS encryption or have weak security configurations.'
        json: '[AI] `kompose convert --json` is a command-line tool provided by Kubernetes Kompose, which helps to convert Docker Compose files into Kubernetes deployments, services, and other related resources. The `--json` flag instructs the command to output the generated configuration in JSON format instead of creating or updating actual Kubernetes resources in a cluster. This option is useful when you want to manually modify or inspect the generated configurations before applying them.'
        multiple-container-mode: '[AI] `kompose convert --multiple-container-mode` is a command used with Kompose, a tool for defining and running multi-container Docker applications using YAML format. This flag allows users to define multiple containers in a single Compose file as a single service with shared networks and configuration. Instead of having separate services for each container, this mode encourages a more compact representation of complex applications. When used, Kompose converts the multi-container service definition into individual Docker Compose files, one per container, maintaining the inter-container connections defined in the original file.'
        out: '[AI] `kompose convert --out` is a command from the Kubernetes tool Kompose, which converts a Docker Compose file into Kubernetes YAML files. The `--out` option specifies the output directory for the generated Kubernetes files. In simple terms, it tells Kompose to create and save the resulting Kubernetes configuration files in the specified directory.'
        push-image: '[AI] `kompose convert --push-image` is a command used with Kompose, a tool for defining and running multi-container Docker applications. The `--push-image` option tells Kompose to push the built images to a container registry after conversion. With this command, you can convert a `docker-compose.yml` file to `kubernetes-compose.yml` format (or vice versa) and automatically push the new or updated images to the specified registry. This is useful when deploying applications in Kubernetes environments where you want the newest versions of your application images.'
        push-image-registry: '[AI] `kompose convert --push-image-registry` is a command used with Kubernetes tool Kompose. This command converts traditional Docker Compose files into Kubernetes format, pushing images to a specified container registry during the process. The `--push-image-registry` flag indicates the image registry URL where the newly built images will be pushed. The conversion and image pushing help simplify the deployment of applications in a Kubernetes environment by managing containers as pods and handling orchestration tasks like scaling and self-healing.'
        pvc-request-size: '[AI] `kompose convert --pvc-request-size` is a command used with Kubernetes application definition tool, Kompose. This command modifies Persistent Volume Claims (PVCs) sizes mentioned in the Compose file format (YAML files) to match the requested size specified as an argument. It ensures that when the application is deployed using `kompose up`, the PVCs are created with the desired size for persistent data volumes.'
        replicas: '[AI] `kompose convert --replicas` is a command used with Kompose, a tool for defining and running multi-container Docker applications. This specific command option modifies the number of replicas (instances) defined for each service in a Kompose file. By default, Kompose sets the replica count to one per service container. Using `--replicas` allows you to adjust that number as desired when converting your YAML file into a Docker Compose file format. For example, `kompose convert --file myapp.yml --replicas 3 myapp.yml` sets the replica count for all services in the given Kompose file to three when generating the output Docker Compose file.'
        replication-controller: '[AI] `kompose convert` is a command-line tool used to convert Kubernetes definitions into Docker Compose files. The `--replication-controller` flag is an option for this command that specifies the conversion of Kubernetes ReplicationControllers into Docker Compose scale services. With this flag, you can define and manage the number of replicas of a containerized application using the Compose file syntax instead of the native Kubernetes YAML format. This can make it easier to deploy and manage applications with simpler tools like Docker Swarm or Docker Compose.'
        service-group-mode: |-
            [AI] `kompose convert` is a command-line tool from Kubernetes to help convert Compass (YAML) files into Kubernetes manifests. The `--service-group-mode` option controls how multiple services are grouped into a single deployment or replica set.

            With the default mode, `--service-group=none`, each service is deployed as a separate deployment or replica set. When using `--service-group-mode=cluster`, all services within the same Compass file are deployed as a single deployment or replica set, sharing the same pod network namespace and port for each exposed service. This can simplify networking and improve resource utilization when deploying multiple services that do not need to communicate with each other externally.
        service-group-name: '[AI] `kompose convert --service-group-name` is a command used with Kompose, a tool for defining and running multi-container Docker applications. This specific option changes the name of a service group in a Kompose file. A service group refers to a collection of services that are defined to run together under the same network and port mappings. By using this flag, users can modify the name assigned to the entire group of related services during the conversion process from a Docker Compose file to a Kubernetes-style configuration.'
        stdout: '[AI] `kompose convert --stdout` is a command from Kompose, a tool for defining and running multi-container Docker applications using Compose files. The command converts an existing Docker Compose file into the YAML format used by Kubernetes and outputs the result directly to the standard output stream (stdout), which can then be saved as a new file or piped to another command for further processing.'
        volumes: '[AI] `kompose convert --volumes` is a command used with Kubernetes application definition tool, Kompose. This command converts local Docker Compose files into Kubernetes formats (YAML files). The `--volumes` option ensures that all volume definitions from the Docker Compose file are correctly converted and represented in the generated Kubernetes YAML files. It preserves the original volume names, types, and other attributes, allowing a seamless transition to a Kubernetes environment.'
        with-kompose-annotation: '[AI] `kompose convert` is a command-line tool from Kubernetes Kompose project for converting Docker Compose files to Kubernetes formats (YAML files). The option `--with-kompose-annotation` instructs the tool to add Kompose annotations to the generated YAML files. These annotations help preserve some of the Docker Compose file''s behavior, making it easier to manage container configurations when deploying to Kubernetes clusters.'
        yaml: '[AI] `kompose convert --yaml` is a command used with Kompose, a tool for defining and running multi-container Docker applications using Compose files. The `--yaml` option instructs Kompose to convert a standard Kubernetes YAML file into an equivalent Compose file format, enabling users to define their application stacks in a different format if desired. This conversion can be useful when working with teams or projects that prefer one format over the other.'
