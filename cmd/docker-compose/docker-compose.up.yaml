# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: up [OPTIONS] [SERVICE...]
description: Create and start containers
flags:
    --abort-on-container-exit: Stops all containers if any container was stopped. Incompatible with -d
    --always-recreate-deps: Recreate dependent containers. Incompatible with --no-recreate.
    --attach*=: Restrict attaching to the specified services. Incompatible with --attach-dependencies.
    --attach-dependencies: Automatically attach to log output of dependent services.
    --build: Build images before starting containers.
    --exit-code-from=: Return the exit code of the selected service container. Implies --abort-on-container-exit
    --force-recreate: Recreate containers even if their configuration and image haven't changed.
    --no-attach*=: Do not attach (stream logs) to the specified services.
    --no-build: Don't build an image, even if it's policy.
    --no-color: Produce monochrome output.
    --no-deps: Don't start linked services.
    --no-log-prefix: Don't print prefix in logs.
    --no-recreate: If containers already exist, don't recreate them. Incompatible with --force-recreate.
    --no-start: Don't start the services after creating them.
    --pull=: Pull image before running ("always"|"missing"|"never")
    --quiet-pull: Pull without printing progress information.
    --remove-orphans: Remove containers for services not defined in the Compose file.
    --scale*=: Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present.
    --timestamps: Show timestamps.
    --wait: Wait for services to be running|healthy. Implies detached mode.
    --wait-timeout=: Maximum duration to wait for the project to be running|healthy.
    -V, --renew-anon-volumes: Recreate anonymous volumes instead of retrieving data from the previous containers.
    -d, --detach: 'Detached mode: Run containers in the background'
    -t, --timeout=: Use this timeout in seconds for container shutdown when attached or when containers are already running.
documentation:
    command: '[AI] `docker-compose up` is a command used to start services defined in a `docker-compose.yml` file. It builds the images if they don''t exist, creates and starts containers for each service, and attaches them to the default networks and volumes. The `up` flag keeps the containers running in the background and automatically restarts them if they stop or fail.'
    flag:
        abort-on-container-exit: '[AI] The `docker-compose up` command is used to build and start services defined in a `docker-compose.yml` file. The `--abort-on-container-exit` flag indicates that Docker Compose should stop all containers as soon as any one container exits, rather than allowing the other containers to continue running. This can be useful when you want all containers to be interconnected and dependent on each other, ensuring that they are all stopped cleanly in case of an error or failure in one container.'
        always-recreate-deps: '[AI] `docker-compose up --always-recreate-deps` is a command used with Docker Compose to start and build services defined in a `docker-compose.yml` file. The `--always-recreate-deps` flag tells Docker Compose to rebuild and recreate the dependencies of the services, even if their images already exist locally. This can be useful when you make changes to your application code or configuration files that require a new version of a dependency. It ensures that all services are built with the latest versions of their dependencies, reducing potential compatibility issues in your containerized environment.'
        attach: '[AI] `docker-compose up --attach` is a command used in Docker Compose to start and attach containers to their respective services defined in the `docker-compose.yml` file. This means that once the containers are started, you will be connected to their consoles in real-time, allowing you to interact with them directly. The output of the containers'' logs will also be displayed in your terminal. It is often used for development and debugging purposes.'
        attach-dependencies: '[AI] `docker-compose up --attach-dependencies` is a command used in Docker Compose to build, create or recreate containers, and start services defined in a `docker-compose.yml` file. The `--attach-dependencies` flag ensures that containers are started in the correct order based on their dependencies defined in the Compose file. This is useful when services depend on each other, as it guarantees that prerequisites are met before containers are brought up.'
        build: '[AI] `docker-compose up --build` is a command used to build and then run Docker services defined in a `docker-compose.yml` file. The `--build` flag instructs Docker Compose to first build any images that do not already exist based on the Dockerfiles in each service before starting the containers. This can be useful when making changes to your application code or configuration and wanting to ensure the latest image is used when starting the services.'
        detach: '[AI] `docker-compose up --detach` is a command used to start services defined in a Docker Compose file. The `--detach` option runs containers in the background, meaning their console output will not be displayed in the terminal. Containers are started with their defined configurations and networks, and Docker manages their internal communication. This command keeps the container''s process running in the background and shows only progress messages during startup. Once the services have started, you can check their logs or status using other commands like `docker-compose logs` and `docker-compose ps`.'
        exit-code-from: '[AI] `docker-compose up` is a command used to build and start services defined in a `docker-compose.yml` file. The `--exit-code-from` option specifies that the exit code of the script should be inherited from a container, instead of Docker Compose itself. This means that if any service fails, Docker Compose exits with the same error code as the failed service, allowing for more accurate error reporting and easier identification of the root cause of a failure.'
        force-recreate: '[AI] `docker-compose up --force-recreate` is a command used to start services defined in a Docker Compose file. The `--force-recreate` option ensures that containers are always recreated when they are started, even if their images have not changed. This can be useful when making changes to the Compose file or service configuration, as it guarantees that new containers will be created with the latest settings. Additionally, it automatically removes and restarts any existing containers before creating new ones.'
        no-attach: '[AI] `docker-compose up --no-attach` is a command used to build and start Docker services defined in a `docker-compose.yml` file without attaching to their containers'' console output. The `--no-attach` flag tells Docker Compose not to open a terminal for each container, allowing the build and startup process to run in the background. This command will also automatically rebuild any images that have changed since they were built.'
        no-build: '[AI] `docker-compose up --no-build` is a command used to start services defined in a `docker-compose.yml` file without building the images from the Dockerfile first. The `--no-build` flag instructs Docker Compose not to build any images before starting the containers. Instead, it uses existing images that have already been built previously. This can save time if you''ve already built the images and want to quickly start the services.'
        no-color: '[AI] `docker-compose up --no-color` is a command used to build and start services defined in a `docker-compose.yml` file using Docker Compose. The `--no-color` option disables colored output from Docker Compose. This can be useful for scripts or CI/CD environments where colorized output may not be desired or supported.'
        no-deps: '[AI] `docker-compose up --no-deps` is a command used with Docker Compose to build and start services defined in a `docker-compose.yml` file without the dependency services. The `--no-deps` flag instructs Docker Compose not to start dependent services that may have their own dependencies. This command only builds and starts the specified services, assuming their dependencies are already running.'
        no-log-prefix: '[AI] The `docker-compose up` command is used to build and start services defined in a `docker-compose.yml` file. The `--no-log-prefix` flag is an option that disables the addition of a prefix to container logs when they are displayed. This can be useful when dealing with multiple containers and wanting to distinguish between their logs more easily without having a prefix added by Docker Compose.'
        no-recreate: '[AI] `docker-compose up --no-recreate` is a command used in Docker Compose to build and start services defined in a `docker-compose.yml` file. The `--no-recreate` option prevents Docker from re-creating containers that already exist, meaning the containers'' current state will be kept instead of being recreated from scratch. This can be useful when making incremental changes to services or configurations without needing a complete container rebuild.'
        no-start: '[AI] The command `docker-compose up --no-start` is used to build and create Docker containers defined in a `docker-compose.yml` file, without starting them. This means the images are pulled or built if they don''t exist locally, their containers are created, and their networks are set up, but they remain stopped until you explicitly start them using other Docker commands like `docker-compose start`. It is often used to prepare an environment before running additional scripts or checks on the created containers.'
        pull: '[AI] `docker-compose up --pull` is a command used to build and start services defined in a Docker Compose file. The `--up` flag ensures that containers are started if they do not exist, and their configurations are updated if they do exist. The `--pull` flag tells Docker to pull the latest images for any service before starting them. This command is commonly used when making changes to the Compose file or when updating dependencies in a multi-container application.'
        quiet-pull: '[AI] `docker-compose up --quiet-pull` is a command used to start and create or update containers based on the defined services in a Docker Compose file. The `--quiet` flag suppresses output from Compose other than errors. The `--quiet-pull` flag adds to `--quiet` and also hides the progress bar and other information related to pulling images before starting the containers. In summary, it runs the services defined in the Compose file without showing any status updates or image pull progress.'
        remove-orphans: '[AI] `docker-compose up --remove-orphans` is a command used with Docker Compose to build, create, and start services defined in a `docker-compose.yml` file. The `--remove-orphans` flag instructs Docker Compose to remove containers for services that are stopped or removed from the `docker-compose.yml` file. This helps keep the container set consistent with the defined configuration. Without this flag, old containers might persist, potentially leading to resource wastage and configuration inconsistencies.'
        renew-anon-volumes: '[AI] `docker-compose up --renew-anon-volumes` is a command used with Docker Compose to start services defined in a `docker-compose.yml` file, while also creating or updating anonymous volumes with new UUIDs. Anonymous volumes are Docker volumes without named labels, and `--renew-anon-volumes` ensures they are recreated if they don''t exist or have changed since the last time the command was run. This can be useful when working with data that may change frequently, ensuring that each instance of a service starts with a clean slate for its unnamed volumes.'
        scale: '[AI] `docker-compose up --scale` is a command used with Docker Compose to start services defined in a `docker-compose.yml` file and apply a replicated scaling to one or more services. The `--scale` option followed by the number specifies the desired number of containers for each service. For example, `--scale web=3` would scale the "web" service to have three replicas running. The command will also build images if needed and create or update containers accordingly.'
        timeout: '[AI] `docker-compose up --timeout` is a command used in Docker Compose to build, create or start services defined in a `docker-compose.yml` file. The `--timeout` option sets the maximum amount of time (in seconds) for a single container startup or rebuild before considering it failed. If a container fails to start within this time limit, Docker Compose will stop attempting to start that container and report an error. This can help in cases where large containers take a long time to start or when dealing with intermittent network issues.'
        timestamps: '[AI] `docker-compose up --timestamps` is a command used with Docker Compose to build, create, and start containers based on the defined services in a `docker-compose.yml` file. The `--timestamps` option adds timestamps to the output messages of container logs, making it easier to identify when each log message was generated. This can be helpful for troubleshooting or monitoring the application within the containers.'
        wait: '[AI] `docker-compose up --wait` is a command used to build and start services defined in a Docker Compose file. The `--up` flag automatically rebuilds and recreates containers if their configuration changes, while the `--wait` flag ensures that containers are started before printing output indicating that Compose is done building, creating containers, or starting services. In summary, it builds, creates, and starts containers, waiting for them to be ready before moving on to the next task.'
        wait-timeout: '[AI] `docker-compose up --wait-timeout` is a command used with Docker Compose to start and build services defined in a `docker-compose.yml` file. The `--wait-timeout` option sets a timeout for Docker Compose to wait for services to be started before considering the operation as failed. If a service fails to start within the specified time, Docker Compose will exit with an error message. By default, there is no timeout set.'
