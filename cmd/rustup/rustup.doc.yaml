# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: doc
description: Open the documentation for the current toolchain
flags:
    --alloc: The Rust core allocation and collections library
    --book: The Rust Programming Language book
    --cargo: The Cargo Book
    --core: The Rust Core Library
    --edition-guide: The Rust Edition Guide
    --embedded-book: The Embedded Rust Book
    --nomicon: The Dark Arts of Advanced and Unsafe Rust Programming
    --path: Only print the path to the documentation
    --proc_macro: A support library for macro authors when defining new macros
    --reference: The Rust Reference
    --rust-by-example: A collection of runnable examples that illustrate various Rust concepts and standard
    --rustc: The compiler for the Rust programming language
    --rustdoc: Generate documentation for Rust projects
    --std: Standard library API documentation
    --test: Support code for rustc's built in unit-test and micro-benchmarking framework
    --toolchain=: Toolchain name, such as 'stable', 'nightly', or '1.8.0'. For more information see
    --unstable-book: The Unstable Book
    -h, --help: Prints help information
documentation:
    command: '[AI] `rustup doc` is a Rust-specific command used to install and update the Rust documentation for offline use. It''s part of Rustup, Rust''s package manager, which manages multiple Rust toolchains and their components. By running this command in your terminal, you ensure that you have the most recent Rust documentation available locally, ready to be viewed with a document viewer or search engine.'
    flag:
        alloc: '[AI] `rustup doc --alloc` is a Rust CLI command used to generate and update documentation for Rust crates using the Rust Documentation system. The `--alloc` flag indicates that the documentation should be generated for crates with the "alloc" feature, which includes documentation for types, traits, and other elements related to memory management in Rust. This command downloads or updates the required documentation sources, compiles them into HTML format, and saves them into the specified directory.'
        book: |-
            [AI] `rustup doc --book` is a Rust CLI command used to generate the Rust documentation in HTML format. The Rust documentation, also known as "The Book", is a comprehensive guide about the Rust programming language.

            The `rustup` tool is a Rust package manager and it is used to install, manage, and switch between different Rust toolchains. When you run `rustup doc --book`, it triggers the documentation build process using the currently active Rust toolchain. The generated HTML files are saved in the `doc/book` directory under your project's source code.
        cargo: |-
            [AI] `rustup doc --cargo` is a Rust-specific command used to generate and update documentation for a Cargo project. Rustup is a tool for managing multiple Rust toolchains, while Cargo is the default package manager for Rust.

            This command uses rustup to call the `doc` subcommand of Cargo, which triggers the generation or update of the project's documentation. This process involves building the project and then using a doc generator (such as Markdown or Rust's built-in doc comment format) to generate the final HTML files for each library in the project. These HTML files are saved in the `docs` directory within your project.

            By running `rustup doc --cargo`, you ensure that you have the correct toolchain setup and that Cargo is used to build and document your project. This command can be run automatically with continuous integration systems, or manually when making changes to your project's documentation.
        core: '[AI] `rustup doc --core` is a Rust tool command that generates the HTML documentation for the core Rust language standard library. The `rustup` utility is a Rust package manager, and this specific command downloads and builds the documentation using the installed Rust toolchain. The generated HTML files are saved in the `$HOME/.cache/doc/` directory by default.'
        edition-guide: '[AI] `rustup doc --edition-guide` is a Rust tool command that generates and displays documentation about the various edition options available in Rust compilers. The Rust language has different editions, which define the default behavior and features of the compiler. This command helps developers understand the differences between these editions and choose the one that best fits their project requirements.'
        embedded-book: '[AI] `rustup doc --embedded-book` is a Rust CLI command that generates an embedded HTML documentation book from the source documentation of installed Rust crates. The `--embedded-book` option produces an HTML file with all necessary dependencies and documentation included, allowing the generated book to be easily shared or viewed offline.'
        help: '[AI] `rustup doc --help` is a Rust command used to display help information about the `rustup doc` subcommand. This subcommand is part of Rustup, a Rust toolchain and package manager. The main function of this command is to generate and update documentation for Rust crates (libraries) using the Rust Documentation system, `docs.rs`. It can be used to build, publish, or check for updates of crate documentation. The help command provides information on how to use various flags and options with `rustup doc`.'
        nomicon: '[AI] `rustup doc --nomicon` is a Rust-specific command used to generate and display the offline HTML documentation for Rust''s standard library and other installed crates. The `--nomicon` flag instructs `rustup` not to include the Rust language reference (also known as "the Rust Programming Language Book" or simply "The Rust Book") into the generated documentation. This can save time during the build process for those who only need the crate documentation without the language reference.'
        path: '[AI] `rustup doc --path` is a Rust tool command that generates the HTML documentation for a specific Rust project or crate using the installed Rust documentation generators. The `--path` option specifies the path to the source directory of the project or crate for which the documentation should be generated. This command can be used to build and view the HTML documentation locally, making it easier for developers to understand the functionality and usage of their projects.'
        proc_macro: '[AI] `rustup doc --proc-macro` is a command used with Rust''s package manager, `rustup`. This command generates documentation for Rust procedural macros. Procedural macros are pieces of code that you can write in Rust to be expanded at compile time, allowing for greater metaprogramming capabilities. The generated documentation will be in HTML format and is typically used to create API documentation for libraries or tools built using Rust procedural macros.'
        reference: '[AI] `rustup doc --reference` is a Rust tool command that generates a HTML file containing cross-references for all documented Rust crates and their corresponding documentation websites. The command retrieves this information from the Rust package registry, Crates.io, using rustup, Rust''s package manager. This reference can then be used as a starting point to explore various Rust libraries or check which crates depend on others.'
        rust-by-example: '[AI] `rustup doc --rust-by-example` is a command used in Rust programming language''s package manager, `rustup`. This command generates local HTML documentation for the Rust by Example project, which provides tutorials on various Rust concepts and features. The generated documentation can be found at `$HOME/.cache/doc/rust-by-example/`, and it includes code examples, explanations, and links to related topics. This command keeps your local documentation up-to-date with the latest changes in the Rust by Example project.'
        rustc: '[AI] `rustup doc --rustc` is a Rust-specific command used to install and update the Rust compiler documentation (also known as "doc" or "docs") in conjunction with the Rust compiler itself (also known as "rustc"). The `rustup` tool, which comes with Rust''s package manager, is used to execute this command. By running `--rustc` alongside `doc`, you ensure that the documentation corresponds to the currently installed version of Rust and rustc. This can be particularly useful when developing or working on projects where keeping your tools up-to-date is essential.'
        rustdoc: '[AI] `rustup doc --rustdoc` is a Rust-specific command used to install and update the Rust documentation for the Rust compiler, `rustc`, and its associated libraries. The `rustup` tool is a Rust package manager that allows managing multiple Rust toolchains, each with its own set of packages. The `--rustdoc` subcommand downloads and installs the documentation for the selected toolchain. It''s essential for developers working on larger Rust projects or contributing to open-source Rust repositories as it provides comprehensive access to the Rust language and standard library documentation.'
        std: '[AI] `rustup doc --std` is a Rust-specific command used to generate documentation for a specific Rust standard library component. The `rustup` tool is a Rust package manager, and its `doc` subcommand invokes the Rust documentation generator, `rustdoc`. The `--std` flag specifies that the documentation for the Rust standard library should be included in the generated output.'
        test: '[AI] `rustup doc --test` is a Rust CLI command used to build and test the documentation for all the packages managed by `rustup`. It fetches the latest sources of the projects, builds their documentation using the `doc` target, and then runs tests on that generated documentation. This ensures the accuracy and consistency of the documentation across all versions of the dependencies in your project.'
        toolchain: '[AI] `rustup doc --toolchain` is a Rust command used to generate documentation for a specific Rust toolchain. Rustup is a tool for managing multiple Rust toolchains, and this command allows you to generate the HTML documentation for the selected toolchain using the `doc` command from that toolchain''s installation. The generated documentation includes the Rust standard library as well as any docs included in the crates of your current project or those specified on the command line.'
        unstable-book: |-
            [AI] `rustup doc --unstable-book` is a Rust-specific command used to download and build the unstable documentation for Rust's standard library. The Rust programming language has both stable and unstable documentation sets. The stable documentation set is well-tested and recommended for most use cases, while the unstable documentation set may contain incomplete or experimental information.

            The `rustup` tool is a Rust package manager that comes with various utilities, including one for managing documentation sets. In this context, running `rustup doc --unstable-book` instructs `rustup` to fetch and build the unstable documentation from the Rust source repository, making it available locally for further use.
