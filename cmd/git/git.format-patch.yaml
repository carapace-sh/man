# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: format-patch
description: Prepare patches for e-mail submission
group: main
flags:
    --add-header=: add email header
    --attach?: attach the patch
    --base=: add prerequisite tree info to the patch series
    --cc=: 'add Cc: header'
    --cover-from-description=: generate parts of a cover letter based on a branch's description
    --cover-letter: generate a cover letter
    --creation-factor=: 'percentage by which creation is weighted '
    --filename-max-length=: max length of output filename
    --from?: set From address to <ident> (or committer ident if absent)
    --ignore-if-in-upstream: don't include a patch matching a commit upstream
    --in-reply-to=: make first mail a reply to <message-id>
    --inline?: inline the patch
    --interdiff=: show changes against <rev> in cover letter or single patch
    --no-binary: don't output binary diffs
    --numbered-files: use simple number sequence for output file names
    --progress: show progress while generating patches
    --range-diff=: show changes against <refspec> in cover letter or single patch
    --rfc: use [RFC PATCH] instead of [PATCH]
    --signature-file=: add a signature from a file
    --signature=: add a signature
    --start-number=: start numbering patches at <n> instead of 1
    --stdout: print patches to standard out
    --subject-prefix=: use [<prefix>] instead of [PATCH]
    --suffix=: use <sfx> instead of '.patch'
    --thread?: 'enable message threading, styles: shallow, deep'
    --to=: 'add To: header'
    --zero-commit: output all-zero hash in From header
    -N, --no-numbered: use [PATCH] even with multiple patches
    -k, --keep-subject: don't strip/add [PATCH]
    -n, --numbered: use [PATCH n/m] even with a single patch
    -o, --output-directory=: store resulting files in <dir>
    -p, --no-stat: show patch format instead of default (patch + stat)
    -q, --quiet: don't print the patch filenames
    -s, --signoff: add a Signed-off-by trailer
    -v, --reroll-count=: mark the series as Nth re-roll
documentation:
    command: '[AI] `git format-patch` is a Git command used to generate patch files from existing commit differences in a Git repository. These patch files can be applied to other repositories using the `git apply` command, enabling easy code sharing and collaboration between teams or projects. The output files are typically mbox-format emails with a .diff extension that include the author, commit message, and changeset information.'
    flag:
        add-header: '[AI] `git format-patch --add-header` is a command used in Git version control system to create patch files (diffs) from existing commits with custom headers added. The `--add-header` option allows you to specify extra headers to be included in the patch file(s). This can be useful when submitting patches for review or contribution to projects, as it enables setting specific metadata like the author name, email address, or a detailed description of the changes made.'
        attach: '[AI] `git format-patch --attach` is a command used in Git to generate patch files (files with a `.patch` extension) from existing commit differences. The `--attach` option attaches the patch files as textual signatures to the email messages sent along with each patch, allowing recipients to easily review and apply the changes without needing to download additional files. This command is useful for sharing changes between team members or contributing to open-source projects.'
        base: '[AI] `git format-patch --base` is a command used in Git version control system to generate a series of patch files from existing commits. The `--base` option specifies that Git should include the common base commit between each pair of commits in the generated patch files. These patch files can then be applied using `git apply` or sent to others for code review or collaboration. This command is useful when you want to distribute your changes as a set of patch files, preserving the context of each change within the larger history of your project.'
        cc: |-
            [AI] `git format-patch --cc` is a command in Git used to generate patch files for a series of commits. The `--cc` (short for "carbon copy") option adds the email addresses of recipients in the patch file header, making it easier to send the patches via email for review or collaboration.

            The generated patch files contain the differences between each commit and its parent, along with metadata such as author information and commit messages. These patch files can be applied to other Git repositories to incorporate the changes from one branch into another.
        cover-from-description: '[AI] `git format-patch --cover-from-description` is a command used in Git to generate patch files for sharing changes with others. The `--cover-from-description` option includes a diff of the commit message in each patch file, making it easier for reviewers to understand the context and intent of each change without having to refer back to the Git repository or commit history. This can be helpful when submitting patches through email or other communication channels where the full context may not be readily available.'
        cover-letter: '[AI] `git format-patch --cover-letter` is a Git command used to generate a series of patch files (one per committed change) with attached cover letters. A cover letter is a text file included in each patch file, providing a brief description and rationale for the changes made in the corresponding commit. This command can be useful when sharing commits as patches via email or other communication channels.'
        creation-factor: |-
            [AI] `git format-patch` is a Git command used to generate patch files that can be applied with `git apply`. The `--creation-factor` option is an argument for this command.

            This argument (specified as a number) affects how Git names the patch files. By default, Git generates patch files named after the author date and a sequence number. However, with `--creation-factor`, Git includes the number of new commits between the parent and the current commit in the filename as a suffix.

            For example, if you create 3 new commits based on an older commit and use the command `git format-patch --creation-factor=2 HEAD^..HEAD > patchfiles`, Git will generate patch files named like "01-mycommitmessage-2.diff.gz" (if using 2 as the creation factor). Here, "mycommitmessage" is the commit message of your most recent commit in the sequence. The number 2 represents the number of new commits since the parent commit.
        filename-max-length: '[AI] The `git format-patch` command with the `--filename-max-length` option is used to generate a series of patch files based on existing commits in Git. This option sets the maximum length of the filename for each generated patch file. If the filenames of the affected files in the commits exceed this limit, they will be truncated in the patch filenames, preserving as much as possible of the original context while keeping the filenames manageable.'
        from: '[AI] `git format-patch --from` is a Git command used to generate a series of patch files based on existing commits in the current repository. The `--from` option specifies the starting point for the patch series, usually a commit hash or a branch name. The generated patch files can be easily applied to other repositories or shared with others for code review or collaboration.'
        ignore-if-in-upstream: '[AI] `git format-patch --ignore-if-in-upstream` is a Git command used to generate patch files for commits in the current branch that are not present in the upstream branch. In other words, it filters out and generates patch files only for local commits that have not been pushed to the remote repository yet. By doing so, you can easily review and apply these patches on other machines or share them with collaborators for code review.'
        in-reply-to: '[AI] `git format-patch --in-reply-to` is a Git command used to generate a series of patch files from a collection of commit messages and their associated commits. The `--in-reply-to` option is used to specify an email message with a valid RFC 2822 header "In-Reply-To" or "References", which tells Git that these patches represent replies to existing emails or commits in a mailing list thread. This command creates patch files suitable for sending via email as part of a threaded discussion, making it useful for contributing changes back to projects through email communication.'
        inline: '[AI] `git format-patch --inline` is a Git command used to generate patch files for sharing changes with others. The `--inline` option includes the entire content of added or modified files in the patch file itself, making it self-contained and easier for recipients to apply the patch directly without requiring the original files. This can be useful when sharing patches over email or with developers who don''t have access to the original repository.'
        interdiff: '[AI] `git format-patch --interdiff` is a command in Git used to generate a series of patch files that represent the differences between multiple commits. The `--interdiff` option adds an interdiff header at the beginning of each patch file, which shows the difference between two patches when they are applied one after the other. This can be useful for understanding the relationship between multiple related changes in a project. Each patch file contains the changes made by a single commit and can be applied using `git apply`.'
        keep-subject: '[AI] `git format-patch --keep-subject` is a Git command used to generate patch files from existing commit messages. With the `--keep-subject` option, the original commit message subject line is kept in the patch file instead of being replaced with a new, empty subject line. This can be useful when you want to preserve the context or meaning of the commit message across multiple patches or when working with tools that rely on the subject line for identification or classification purposes.'
        no-binary: '[AI] `git format-patch --no-binary` is a Git command used to generate patch files for sharing changes between teams or projects. The `--no-binary` option tells Git not to include binary files in the generated patches, keeping the files text-only. This can be useful when working with primarily text-based changes.'
        no-numbered: '[AI] `git format-patch --no-numbered` is a Git command used to generate patch files from existing commit differences. Unlike the standard usage of `git format-patch`, which creates patch files with auto-generated serial numbers in their filenames, this command does not include numbers and instead generates patch files named after the branch or tag, followed by a hyphen and the commit message. This can be useful when applying patches manually or integrating changes from multiple sources without the need for automatic numbering.'
        no-stat: '[AI] `git format-patch --no-stat` is a Git command used to generate a patch file for a specific commit or range of commits. The `--no-stat` option instructs Git to exclude the diffstat output, which displays the number of added and deleted lines for each file in the patch, from the generated patch file. This can be useful when you want to send the patch through an email or review system that doesn''t support the diffstat information. The result will be a single .patch file containing only the changeset information.'
        numbered: '[AI] `git format-patch --numbered` is a Git command used to generate a series of patch files from a set of existing commits. The `--numbered` option adds a serial number prefix to each file name, making it easier to identify the order of patches when applying them. Each patch file contains the difference between two consecutive commits, allowing for easy review and application elsewhere.'
        numbered-files: '[AI] `git format-patch --numbered-files` is a Git command used to generate a series of patch files from a set of commits, with each file having a numbered name indicating the commit order. This command can be useful for distributing changes over email or for offline review. The `--numbered-files` option ensures that the generated patch files are named based on the commit order, making it easier to keep track of the sequence when applying or reviewing them.'
        output-directory: '[AI] `git format-patch` is a command used to generate patch files that can be applied to other repositories using `git apply`. The `--output-directory` option specifies a directory where the generated patch files will be stored instead of the current working directory. This is useful when you want to save multiple patches in one location or automate the patch generation process.'
        progress: '[AI] `git format-patch --progress` is a Git command used to generate a series of patch files from the current branch''s commits. The `--progress` option provides real-time progress information during the process. Each patch file represents the difference between two successive commits in the branch, and can be applied to another repository using `git apply`. This command is often used for sharing changes with others or for tracking the evolution of a project across multiple repositories.'
        quiet: '[AI] `git format-patch --quiet` is a Git command used to generate patch files from existing commit differences. The `--quiet` option suppresses informational messages during the process, resulting in a quieter execution. This command generates one patch file per commit and each patch file includes a single commit''s changes. These patch files can be easily applied to other Git repositories using the `git apply` command.'
        range-diff: '[AI] `git format-patch --range-diff` is a command used in Git to generate patch files for multiple consecutive commits with their differences presented as range diffs. Range diffs display the difference between two commit messages or two points in the commit history, making it easier to review and apply the changes across multiple commits at once. This command outputs patch files that can be easily applied with `git am` or other patch application tools.'
        reroll-count: |-
            [AI] `git format-patch --reroll-count` is a command used to generate patch files from existing commit differences in Git. The `--reroll-count` option specifies the number of times a commit has been rebased and needs to be reapplied during the patch creation process.

            When you make changes in your local branch and then pull changes from the remote repository, Git might tell you that there are conflicts that need to be resolved. In such cases, you can use `git rebase` to apply the remote changes on top of your local changes. However, if you encounter conflicts during rebasing, you may need to manually edit the files and then use `git add` to stage the changes before continuing with the rebasing process.

            In some situations, you might need to abort the rebasing process and start over from a specific commit. In such cases, you can use the `git rebase --abort` command to stop the current rebasing process and return to the state before starting the rebasing. After fixing any conflicts manually, you can apply the patch again using the `git format-patch --reroll-count <number>` command, which generates a new patch file with the specified number of reapplications of the commits that caused the conflict. This allows you to keep track of the changes made during the rebasing process and easily apply them again if needed.
        rfc: '[AI] `git format-patch --rfc` is a Git command used to generate patch files in RFC (RFC-compliant) format for sharing changes with others via email or other means. The patches created by this command adhere to the RFC 822 email standard, making it easier for recipients to apply and review them using tools like `git am` or other patch handling software. This command generates a series of patch files, each file representing a single commit, with a filename based on the author date and commit message.'
        signature: '[AI] `git format-patch --signature` is a command used in Git to create a series of patch files, each representing a single commit. The `--signature` option adds an authorized key''s GPG signature to the patch file header, making it possible to verify the authenticity and integrity of the changes in the patches using GPG. This command generates files with a ".patch" extension that can be applied to other Git repositories or shared with others for review or collaboration.'
        signature-file: '[AI] `git format-patch` is a command in Git that creates a series of patch files, representing the differences between two Git commits. The `--signature-file` option specifies a file where the commit messages and GPG signatures will be written. With this option, each patch file contains not only the changes but also the author information (message and signature) for the associated commit. This allows others to verify the authenticity of the commits using their own keys before applying the patches.'
        signoff: '[AI] `git format-patch --signoff` is a Git command used to generate a series of patch files (one per commit) that can be applied to other repositories or shared with others for code review. The `--signoff` option adds a "Signed-off-by" line to each patch file, representing the committer''s name and email address, ensuring accountability for the changes. This command is typically used in collaboration workflows when contributing changes back to an upstream project.'
        start-number: '[AI] `git format-patch --start-number` is a command used in Git version control system to generate patch files (diffs) for a series of commits, starting from the specified number. This can be useful when you want to share changes with others without pushing them to a remote repository yet or for creating a patch for a bug report. The patch files can be applied using `git apply` command on another Git repository.'
        stdout: '[AI] `git format-patch --stdout` is a Git command used to generate a series of patch files, one per commit, in a standard mbox format, which can be emailed or applied with other tools. However, instead of writing these files to the file system, this command outputs the patch data directly to standard output (i.e., to the terminal), which is then typically piped for further processing.'
        subject-prefix: '[AI] `git format-patch` is a command in Git used to generate a series of patch files based on existing commits. The `--subject-prefix` option sets a prefix that will be added at the beginning of each patch file''s subject line, making it easier to identify and sort them when applying multiple patches. This can be useful for organizing or batching related commits together into a single patch series.'
        suffix: '[AI] `git format-patch --suffix` is a Git command used to generate patch files (in mbox or mbox-series format) for one or more existing commits, with each patch file having a user-specified suffix added to its name. This can be useful when applying patches across different systems or sharing patches with others, as the suffix can help distinguish between multiple sets of patches. The base command `git format-patch` generates the patch files without any suffix by default.'
        thread: '[AI] `git format-patch --thread` is a command used to generate a series of patch files, each representing a single commit, from the current branch or a specified range of commits. The `--thread` option includes all the emails related to a thread of commits in a single patch file, making it easier to review and apply changes that were discussed and developed collaboratively between multiple authors. This command is particularly useful for sharing changes over email or when working with distributed version control systems like Git.'
        to: '[AI] `git format-patch --to` is a command used in Git to generate a series of patch files based on the differences between two revisions in a repository. The `--to` option specifies the revision that the patches will be created with respect to. In other words, it generates the patch files as if they had been applied on top of the specified revision. These patch files can then be easily applied or shared with others using email or other means.'
        zero-commit: '[AI] `git format-patch --zero-commit` is a command used in Git to generate patch files from existing commits, with an empty initial commit message. This means that the generated patch files will have no content in their commit messages when applied, allowing users to add their own commit messages before applying the patches. It''s often used for creating patch files to be sent or reviewed through email or other platforms. The `--zero-commit` flag ensures that the initial commit message is empty.'
