# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)
description: Set a new size for a deployment, replica set, or replication controller
group: deploy
flags:
    --all: Select all resources in the namespace of the specified resource types
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --current-replicas=: Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --replicas!=: The new desired number of replicas. Required.
    --resource-version=: Precondition for resource version. Requires that the current resource version match this value in order to scale.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --timeout=: The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to set a new size
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl scale` is a command used in Kubernetes to modify the number of replicas for a running Kubernetes deployment. The syntax is `kubectl scale <deployment-name> --replicas=<desired-number>`. For example, `kubectl scale my-deployment --replicas=3` would update the number of replicas for "my-deployment" to be 3. This is useful when you want to add or remove instances of a running application to handle increased or decreased demand.'
    flag:
        all: '[AI] `kubectl scale --all` is a command used with Kubernetes to horizontally scale the number of replicas for all running Deployments or StatefulSets in a cluster to the same desired number. The exact number is not specified with this command, but can be provided as an argument (e.g., `kubectl scale --all --replicas=5`). This can be useful when needing to quickly adjust resource levels across multiple applications.'
        allow-missing-template-keys: |-
            [AI] `kubectl scale` is a command in Kubernetes used to modify the number of replicas of a running application. The `--allow-missing-template-keys` flag modifies the behavior when there are missing keys in YAML files used for deployments or services.

            With this flag, Kubectl allows scaling operations to proceed even if some template keys (placeholders) are missing in the YAML file. When not using this flag, a missing key would cause an error preventing the operation from executing.

            In practical terms, `kubectl scale --allow-missing-template-keys` enables you to perform scaling actions on your Kubernetes resources without having to update the YAML files containing all missing keys first. It is particularly useful when dealing with dynamic environments or in cases where updating the YAML files might not be an option at that moment. However, it's important to keep in mind that using this flag may lead to discrepancies between the desired and actual states of your resources.
        current-replicas: '[AI] `kubectl scale` is a command used with Kubernetes to change the number of replica pods for a running deployment. The `--current-replicas` flag specifies the current number of replicas for the deployment, allowing you to set a specific number when scaling up or down. For example, `kubectl scale deployment <deployment-name> --replicas=3 --current-replicas=5` would increase the number of replicas from 3 to 5.'
        dry-run: '[AI] `kubectl scale --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows users to simulate scaling Kubernetes resources without actually applying the changes. The `--dry-run` flag outputs what would be the Kubernetes manifest files that represent the desired state if the scaling operation were to be executed in reality. Users can then review these files and make adjustments as needed before applying them with `kubectl apply`. This command is useful for testing, planning, or previewing changes before executing them in a live environment.'
        filename: '[AI] `kubectl scale` is a command-line utility used to modify the number of replicas for Kubernetes deployments. The `--filename` option specifies the path to a YAML or JSON file containing deployment configuration details instead of using interactive arguments. For example, `kubectl scale --replicas=3 --filename=mydeployment.yaml`. This command updates the number of replicas in the specified Kubernetes deployment without manually editing the configuration files.'
        kustomize: '[AI] `kubectl scale --kustomize` is a command using the Kubernetes command-line interface (CLI) tool, `kubectl`, to update the replica count of one or more Kubernetes resources based on customized definitions in a `.yaml` or `.clms` file using the Kustomize framework. This command modifies the desired number of replicas without changing other parts of the manifest files, allowing for selective scaling.'
        output: '[AI] `kubectl scale` is a command used to change the number of replicas for a Kubernetes deployment or statefulset. The `--output` flag specifies the desired output format for the command. For instance, if you use `--output json`, it will return the scaling information in JSON format, or if you use `--output yaml`, it will return the scaled YAML manifests. By default, the command does not produce any output except for printing a success message when the operation is completed successfully.'
        record: '[AI] `kubectl scale` is a command used in Kubernetes to modify the number of replicas for a specific deployment or statefulset. The `--record` flag indicates that this operation should be recorded in the Kubernetes event log and applied as part of a rollout, meaning that the change will be gradually rolled out across instances over time, ensuring zero downtime if possible. This is useful when making updates to applications with high availability requirements. Once all instances have been updated to the new replica count, the old instances are terminated.'
        recursive: |-
            [AI] `kubectl scale --recursive` is a command used with Kubernetes and the `kubectl` tool to modify the number of replicas for multiple Kubernetes resources and their associated pods at once. The `--recursive` flag means that this operation will be applied not just to the specified resource directly, but also to all nested resources underneath it in the Kubernetes object hierarchy.

            For example, if you have a Deployment with two ReplicaSets, and each ReplicaSet has three pods, running `kubectl scale --recursive --replicas=3 <deployment-name>` will update the number of replicas for the deployment as well as those for all six replica sets (three for each) and their corresponding nine pods.

            This flag helps to streamline managing and scaling multiple related resources in a Kubernetes cluster with minimal manual intervention.
        replicas: '[AI] `kubectl scale` is a command used with Kubernetes to change the number of replicas for a specified Kubernetes deployment or statefulset. This command modifies the desired number of instances of a running pod, allowing you to easily adjust capacity and availability based on workload demands without having to delete and recreate resources manually. The general syntax is `kubectl scale <resource> --replicas=<number>`. For example, `kubectl scale deployment/myapp --replicas=3` would update the replica count for the ''myapp'' deployment to three.'
        resource-version: |-
            [AI] `kubectl scale` is a command used to change the number of replicas for a Kubernetes application. The `--resource-version` flag is an optional argument that specifies the exact desired state of the resource in case of potential version conflicts.

            When you update or roll out changes to a Kubernetes resource, Kubernetes assigns a unique version number to the new configuration. If there are any conflicting updates happening at the same time, Kubernetes might not be able to apply them in the order they were received, leading to potential version conflicts. In such cases, using `--resource-version` allows you to specify which version of the resource you want to scale, ensuring that your update is applied to the intended state.
        selector: '[AI] `kubectl scale` is a command-line tool used with Kubernetes to modify the number of replicas for a particular deployment based on a specific label selector. The `--selector` option is used to identify and target the deployment or set of deployments that should be scaled by providing the key-value pairs in the label selector format. For example, `kubectl scale --replicas=3 --selector app=my-app will update the number of replicas for all deployments with the ''app'' label equal to ''my-app''.'
        show-managed-fields: '[AI] `kubectl scale --show-managed-fields` is a command used with Kubernetes to modify the replica count of a deployment or replica set. The `--show-managed-fields` flag option is used to display the fields that will be managed by Kubernetes as a result of this scale operation, i.e., the fields in the YAML manifest file that will change after scaling. This information can be useful for understanding the effects of the scale command and for ensuring desired changes are being applied.'
        template: '[AI] `kubectl scale --template` is a command used with Kubernetes'' `kubectl` tool to update the replica count of one or more Kubernetes resources based on a template file. The `--template` flag instructs `kubectl` to use a given YAML or JSON file as a template, from which it extracts the desired resource fields and updates their values. This is particularly useful when you need to perform consistent scaling operations across multiple resources, where updating each resource individually can lead to errors or inconsistencies. By defining scaling rules in a template file, you ensure a uniform application of your desired configuration changes.'
        timeout: '[AI] `kubectl scale` is a command used to change the number of replicas for a Kubernetes deployment or statefulset. The `--timeout` flag specifies the duration for which Kubernetes should wait for the new replica set to stabilize before considering the scaling operation complete. If the deployment does not reach the desired state within the specified timeout, Kubernetes will rollback the changes and report an error.'
