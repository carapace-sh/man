# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: upload-certs
description: Upload certificates to kubeadm-certs
flags:
    --certificate-key=: Key used to encrypt the control-plane certificates in the kubeadm-certs Secret.
    --config=: Path to a kubeadm configuration file.
    --kubeconfig=: The kubeconfig file to use when talking to the cluster. If the flag is not set, a set of standard locations can be searched for an existing kubeconfig file.
    --skip-certificate-key-print: Don't print the key used to encrypt the control-plane certificates.
    --upload-certs: Upload control-plane certificates to the kubeadm-certs Secret.
documentation:
    command: '[AI] `kubeadm init phase upload-certs` is a command used in Kubernetes to upload the required SSL certificates from the `pki` directory, which was generated during the initial setup of a Kubernetes cluster using `kubeadm init`, to the etcd key value store. This allows the control-plane components to access and use these certificates for secure communication between various cluster components such as the API server, etcd and kubelet.'
    flag:
        certificate-key: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `phase upload-certs` within `kubeadm init` is responsible for uploading the necessary certificates and key files from the local machine to the etcd server in the initial control plane node. The `--certificate-key` flag specifies the path to the private key file used to sign the certificates. This phase ensures secure communication between cluster components by establishing a certificate authority (CA) for the cluster, generating and uploading SSL certificates signed with this CA.'
        config: |-
            [AI] `kubeadm init` is a command-line tool for setting up a Kubernetes cluster using kubeadm, a Kubernetes cluster management system. The `phase upload-certs` is one of the sub-phases under this command, which is responsible for uploading necessary certificates to the etcd server.

            The `--config` argument is used to specify a config file that contains the required information about the cluster setup, such as the number and type of nodes, control plane components, and networking configuration. With the help of this config file, `kubeadm init phase upload-certs` retrieves the certificates from the specified location, usually the local filesystem, and securely uploads them to the etcd server.

            This process is essential for a successful Kubernetes cluster setup since the certificates are used by various components like the kubelet, API server, and client tools to establish secure communication channels within the cluster.
        kubeconfig: '[AI] `kubeadm init` is a command-line tool for bootstrapping a Kubernetes cluster. The specific subcommand `phase upload-certs --kubeconfig` is used to upload the necessary SSL certificates to the etcd key-value store during the initialization process. This step ensures secure communication between nodes in the cluster and helps maintain security by storing the certificates in a central location managed by etcd. The `--kubeconfig` flag specifies that the output of this command should also create or update a kubeconfig file, which is used to configure client tools (such as `kubectl`) for communicating with the cluster.'
        skip-certificate-key-print: '[AI] The `kubeadm init` command is used to bootstrap a Kubernetes cluster. The specific flag `--upload-certs --skip-certificate-key-print` instructs `kubeadm` to upload the CA certificate and client certificate and key to the etcd server, but it will not print the client key to the console. This is useful when setting up a cluster in an automated or scripted environment, as you may not want to display sensitive information on the command line.'
        upload-certs: '[AI] `kubeadm init` is a command-line tool for initializing a Kubernetes cluster. The `phase upload-certs` in this context refers to a specific sub-phase of the initialization process where certificates are uploaded to the etcd server, which is part of the Kubernetes control plane. This step ensures secure communication between different components of the cluster. When you run `kubeadm init phase upload-certs --upload-certs`, you''re explicitly instructing kubeadm to execute only this sub-phase of the initialization process, without continuing on to other phases like setting up a master node or creating worker nodes. This can be useful if you want to manually perform some additional setup steps before completing the entire initialization process, such as configuring network plugins or adjusting resource quotas.'
