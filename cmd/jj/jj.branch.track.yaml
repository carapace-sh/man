# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: track [OPTIONS] <NAMES>...
description: Start tracking given remote branches
flags:
    -h, --help: Print help (see more with '--help')
documentation:
    command: |-
        [AI] The `jj` command is not a standard Git command, as it appears to be specific to the JetBrains JetBrains Suite of IDEs (IntelliJ IDEA, PyCharm, etc.). The `branch track` sub-command is used to set up a tracking relationship between a local Git branch and a remote branch. It allows you to keep your local branch in sync with the remote one by fetching new commits from it and automatically merging them into your local branch.

        In other words, `jj branch track <remote> <branch>` sets the specified local Git branch to track the specified remote branch. When you run this command, your IDE will keep the local and remote branches in sync by fetching new commits and merging them automatically. This can help ensure that your local codebase remains up-to-date with the latest changes in the project's main development branch.
    flag:
        help: |-
            [AI] `jj branch track --help` is a command used with the Jira CLI (Command Line Interface) tool, specifically the `jj` utility. This command displays help information about the `branch track` subcommand.

            The `branch track` subcommand deals with Git and Jira branch synchronization. It helps manage your local Git branches in relation to your Jira projects, enabling you to keep your codebase and issue tracking aligned. The `--help` flag is used to obtain detailed information about how to use this command effectively, including available options and their descriptions.
