# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
description: Runs unit tests in a project
flags:
    --browsers=: Override which browsers tests are run against.
    --code-coverage: Output a code coverage report.
    --code-coverage-exclude=: Globs to exclude from code coverage.
    --include=: Globs of files to include, relative to workspace or project root.
    --inline-style-language=: The stylesheet language to use for the application's inline component styles.
    --karma-config=: The name of the Karma configuration file.
    --main=: The name of the main entry-point file.
    --poll=: Enable and define the file watching poll time period in milliseconds.
    --polyfills=: The name of the polyfills file.
    --preserve-symlinks: Do not use the real path when resolving modules.
    --progress: Log progress to the console while building.
    --reporters=: Karma reporters to use. Directly passed to the karma runner.
    --source-map: Output source maps for scripts and styles.
    --ts-config=: The name of the TypeScript configuration file.
    --watch: Run build when files change.
    --web-worker-ts-config=: TypeScript configuration for Web Worker modules.
    -c, --configuration=: One or more named builder configurations
documentation:
    command: '[AI] `ng test` is a command used in Angular projects to execute unit tests and end-to-end tests with the Angular CLI. It compiles the source code, runs the tests, displays the test results, and generates a test coverage report. It uses tools like Jasmine and Karma for testing.'
    flag:
        browsers: '[AI] `ng test --browsers` is a command used in Angular projects to execute unit and end-to-end tests with specific browsers. When running tests using this command, Angular CLI supports the following major browsers: ChromeHeadless, Firefox, Safari, and Edge. By default, all browsers are included. However, you can specify one or multiple browsers to use by providing their names as arguments. For example, `ng test --browsers chrome` will run tests using only Google Chrome. This option helps ensure consistent testing across various browser environments.'
        code-coverage: '[AI] `ng test --code-coverage` is a command used in Angular projects with the Angular CLI. It runs unit tests and generates code coverage reports using tools like Istanbul or Jest. The reports display which lines of code were executed during testing, indicating the percentage of code coverage for each file. This information helps developers identify untested code and improve test coverage.'
        code-coverage-exclude: |-
            [AI] `ng test --code-coverage-exclude` is a command used in Angular projects with the Angular CLI. It runs unit tests and generates code coverage reports, but allows excluding specific files or directories from the code coverage analysis using the `--code-coverage-exclude` option. This can be useful to ignore large or complex files that may distort the overall coverage results. For instance, you might exclude libraries or test helper files by specifying their paths as arguments:

            ```bash
            ng test --code-coverage-exclude=**/node_modules/**,**/*.helper.ts
            ```

            This command excludes all files under the `node_modules` directory and those with a name ending with `.helper.ts`.
        configuration: '[AI] `ng test --configuration` is a command used in Angular projects with the Angular CLI. It runs unit and end-to-end tests using a specified test configuration file, allowing users to customize testing settings like test providers, environments, or browsers. This command enables fine-grained control over the testing process for complex projects with multiple testing needs.'
        include: '[AI] `ng test --include` is a command used in Angular projects to run specific tests instead of the entire test suite. The `--include` option allows specifying a list of files or modules whose tests should be executed. For example, `ng test --include=component.spec.ts will only run the tests associated with the given component file. This can save time when working on a specific feature or bug fix and want to focus only on the related tests.'
        inline-style-language: '[AI] The `ng test --inline-style-language` command is used in Angular projects to run unit tests with inline styles instead of external CSS files. This option is helpful when testing components in isolation without depending on the global styling configuration. By using `--inline-style-language`, Angular will include all the component''s styles directly within the test file, allowing for a more streamlined testing process.'
        karma-config: '[AI] `ng test --karma-config` is a command used in Angular projects to run unit tests with the provided Karma testing configuration. The `--karma-config` flag specifies the path to the Karma configuration file (usually named `karma.conf.js`) that sets up the testing environment, loaders, browsers, and other test execution details. This command directly interacts with the Angular CLI''s testing functionality.'
        main: '[AI] `ng test --main` is a command used in Angular projects to run only the tests specified in the main.ts file, located in the `src/test.ts` file by default. The `--main` flag tells Angular CLI to use the specified file as the entry point for testing instead of the default test entry point (`karma.conf.js`). This command helps run only the tests that are relevant to a specific part of the application without executing the entire test suite.'
        poll: '[AI] `ng test --poll` is a command used in Angular projects with the Angular CLI. It runs the unit tests and, unlike the standard `ng test`, keeps the test runner process alive and continuously checks for new tests to run as files change in the project. This behavior is enabled by the `--poll` flag. When new tests are detected, they are executed and the test results are displayed. This command allows for continuous testing during development, reducing the need to manually trigger test runs each time a file is changed.'
        polyfills: '[AI] The `ng test --polyfills` command is used during Angular testing to include polyfills for modern browser features that are not fully supported in all browsers. This ensures that tests run consistently across different environments. When you run this command, Angular''s build system (Angular CLI) adds the necessary polyfills to your test bundle.'
        preserve-symlinks: '[AI] The `--preserve-symlinks` option in the Angular CLI''s `ng test` command is used to preserve symlinked files and directories during the testing process. By default, Angular CLI resolves all symbolic links before running tests, which can lead to issues if your project structure includes symlinked dependencies or development tools. With this option enabled, Angular will not resolve symlinks during testing, allowing you to test your application with its original linked files and directories. This can be helpful in certain development environments where projects rely on symlinked packages or configurations.'
        progress: '[AI] The `ng test --progress` command is used in Angular projects to run the tests with progress reporting enabled. It''s part of Angular CLI (Command Line Interface) testing functionality. When you execute this command, Angular will find and run all tests in your project, displaying the progress of each test suite and individual test as they are being executed. This can help provide real-time feedback during the testing process, allowing you to quickly identify any failures or issues that may arise.'
        reporters: '[AI] The `ng test --reporters` command is used when running tests in Angular with Karma as the testing framework. The `--reporters` option specifies which testing reporter to use for displaying test results. Popular choices include JasmineHTMLReporter, JUnitXmlReporter, and ProgressReporter. Each reporter formats the test results differently to cater to various Continuous Integration (CI) systems or developers'' preferences. For instance, JUnitXmlReporter generates an XML file that can be consumed by Jenkins for CI reporting.'
        source-map: '[AI] The `ng test --source-map` command is used in Angular to enable source map generation during testing. Source maps help in mapping the minified or obfuscated production code back to its original source code, which is essential for debugging and understanding error messages. By running this command during testing, Angular generates a corresponding source map file alongside each test output file, allowing tools like the browser developer console or an IDE to display the original source location of errors.'
        ts-config: '[AI] `ng test --ts-config` is a command used in Angular projects with the Angular CLI. It runs the unit tests of an Angular application using the specified TypeScript configuration file instead of the default one. This can be useful when working with multiple projects or when using custom configurations for testing.'
        watch: '[AI] `ng test --watch` is a command used in Angular projects to execute automated tests with the Angular CLI. The `--watch` flag enables test watching mode, which continuously re-runs the affected tests as you make changes in your codebase. This allows for quick feedback on test failures and helps ensure code quality throughout development.'
        web-worker-ts-config: '[AI] `ng test --web-worker-ts-config` is a command used in Angular projects with TypeScript to configure and run unit tests with web workers. Web workers enable running JavaScript code in the background, separate from the main browser thread for better performance and responsiveness. By providing the `--web-worker-ts-config` flag, Angular''s TestBed configuration file is extended to include web worker settings, allowing TypeScript to be used within the tests that run in a web worker context.'
