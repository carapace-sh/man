# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pin [OPTION…] [PATTERN…]
description: disable automatic removal of runtimes matching patterns
group: install
flags:
    --installation=: Work on a non-default system-wide installation
    --ostree-verbose: Show OSTree debug information
    --remove: Remove matching pins
    --system: Work on the system-wide installation (default)
    -h, --help: Show help options
    -u, --user: Work on the user installation
    -v, --verbose: Show debug information, -vv for more detail
documentation:
    command: '[AI] `flatpak pin` is a command used in the Flatpak packaging system to manage application dependencies and updates. It allows users to set applications to a specific version or branch, preventing automatic updates or downgrades. The syntax is typically `flatpak pin <application> <version|ref>`. For instance, `flatpak pin com.example.app 1.2.3` sets the application with the ID `com.example.app` to version `1.2.3`, while `flatpak pin --set-branch com.example.app stable` sets it to the latest stable branch.'
    flag:
        help: |-
            [AI] `flatpak pin` is a command-line utility provided by Flatpak, a software deployment and application packaging system. The `--help` option is used to display detailed help information about the `pin` subcommand.

            Here's what you can do with `flatpak pin --help`:

            1. Get a quick summary of the command usage: `Usage: flatpak pin [OPTIONS] REMOTE REPOSITORY REF`
            2. See available options and their descriptions:
               * `--help`: Show this help message and exit.
               * `--repo=REPO:` Use REPO as the remote repository instead of the default one.
               * `--ref=REF:` Pin to the given reference (branch, tag or commit).
               * `--recurse`: Recursively apply the pin to all remotes and repositories that depend on this one.
               * `--user`: Apply the pin to your personal Flatpak installation instead of system-wide.
               * `--read-only`: Do not modify the pinned repository, only display information.
            3. Understand the command flow: The `pin` command lets you manage the pinned repositories, which are a way to control the updates of applications installed with Flatpak. You specify the remote repository and the reference (branch, tag or commit) that you want to pin. The options let you control how and where the pin is applied.
        installation: '[AI] `flatpak pin --installation` is a command used in the Flatpak application packaging system to manage the installation state of applications. This command sets the installation status of an application to be pinned, meaning that it is kept at a specific version and will not be automatically updated. The `--installation` option specifies that you want to manage the installation status for all installed applications, rather than just a single one. This command helps ensure consistency and stability in the system by allowing administrators or users to choose which applications they want to keep at specific versions.'
        ostree-verbose: '[AI] The `flatpak pin --ostree-verbose` command is a Flatpak subcommand used to manage application versions in an OSTREE-based system. This command sets or modifies pins on a specific Flatpak application, which in turn specifies which version of the application to run. The `--ostree-verbose` option increases the verbosity level of the output when performing the pinning operation, providing more detailed information about the filesystem changes that are being made. Essentially, it helps in debugging or understanding the underlying file modifications that occur during the pinning process.'
        remove: '[AI] `flatpak pin --remove` is a command used in the Flatpak application packaging system. It removes the "pin" or trust relationship between a user and a specific Flatpak application or remote. When an application is pinned, the user trusts that all its future updates come from the specified repository or builder. Removing the pin allows future updates to come from any trusted or untrusted source. It''s essential for security reasons to only run applications with known and trusted sources. However, it might be necessary to remove a pin if there is a need to update an application from an untrusted source, such as when testing new software.'
        system: '[AI] `flatpak pin --system` is a command used in the Flatpak package management system to set a specific version of a system-wide installed Flatpak application as pinned. This means that the application will always use this version, and future updates or installations of the same application will not overwrite it. The `--system` option specifies that the system-wide installation is the target. It''s important to note that pinning an application can prevent automatic upgrades, but it also ensures stability as the pinned version won''t be changed unless manually unpinned.'
        user: |-
            [AI] `flatpak pin --user` is a command used in the Flatpak package manager system for Linux distributions. This command allows users to set applications as "pinned" or trusted, meaning that they will always be run using the installed version of the application, instead of potentially being overridden by updates or newer versions.

            By using `--user` option, this command sets the pins for applications that are installed locally in a user's home directory rather than system-wide. This can be useful for managing and isolating user applications, ensuring consistent behavior across different systems or users.
        verbose: '[AI] `flatpak pin` is a command-line utility for Flatpak, a software deployment and application packaging system. The `--verbose` option increases the amount of output produced by the command. When used with `pin`, it displays detailed information about the actions being taken. Specifically, it lists the exact package and application identifier (AppID) being pinned or unpinned, the current version and status, and the new version or status after the pinning operation is completed. This level of detail can be useful for debugging or understanding the effects of a pinning command.'
