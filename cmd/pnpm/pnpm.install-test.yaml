# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install-test
aliases:
    - it
description: Runs a `pnpm install` followed immediately by a `pnpm test`
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --child-concurrency=: Controls the number of child processes run parallelly
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --fix-lockfile: Fix broken lockfile entries automatically
    --force: Force reinstall dependencies
    --frozen-lockfile: Don't generate a lockfile and fail if an update is needed
    --global-dir: Specify a custom directory to store global packages
    --hoist-pattern=: Hoist all dependencies matching the pattern to
    --ignore-pnpmfile: Disable pnpm hooks defined in .pnpmfile.cjs
    --ignore-scripts: Don't run lifecycle scripts
    --lockfile-dir=: The directory in which the pnpm-lock.yaml will be created
    --lockfile-only: Dependencies are not downloaded
    --loglevel=: What level of logs to report
    --modules-dir=: The directory in which dependencies will be installed
    --network-concurrency=: Maximum number of concurrent network requests
    --no-color: Controls colors in the output
    --no-frozen-lockfile: Don't generate a lockfile and fail if an update is needed
    --no-hoist: Dependencies inside the modules directory will have access only to their listed dependencies
    --no-lockfile: Don't read or generate a `pnpm-lock.yaml` file
    --no-optional: '`optionalDependencies` are not installed'
    --no-verify-store-integrity: If false, doesn't check whether packages in the store were mutated
    --offline: Trigger an error if any required dependencies are not available in local store
    --package-import-method=: configure import method
    --prefer-frozen-lockfile: If the available `pnpm-lock.yaml` satisfies the `package.json` then perform a headless installation
    --prefer-offline: Skip staleness checks for cached data, but request missing data from the server
    --public-hoist-pattern=: Hoist all dependencies matching the pattern to the root of the modules directory
    --reporter=: configure output
    --shamefully-hoist: All the subdeps will be hoisted into the root node_modules
    --side-effects-cache: Use or cache the results of (pre/post)install hooks
    --side-effects-cache-readonly: Only use the side effects cache if present, do not create it for new packages
    --store-dir=: The directory in which all the packages are saved on the disk
    --stream: Stream output from child processes immediately
    --strict-peer-dependencies: Fail on missing or invalid peer dependencies
    --test-pattern=: Defines files related to tests
    --use-running-store-server: Only allows installation with a store server
    --use-stderr: Divert all output to stderr
    --use-store-server: Starts a store server in the background
    --verify-store-integrity: If false, doesn't check whether packages in the store were mutated
    --virtual-store-dir=: The directory with links to the store
    -C, --dir=: Change to directory <dir>
    -D, --dev: Only `devDependencies` are installed regardless of the `NODE_ENV`
    -P, --prod: Packages in `devDependencies` won't be installed
    -h, --help: Output usage information
    -r, --recursive: Run installation recursively in every package found in subdirectories
    -s, --silent: No output is logged to the console, except fatal errors
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm install-test` is a command used with PnPM, a package manager for JavaScript projects. This command automates the process of installing dependencies marked as test-only in the package.json or pnpm-lock file. These dependencies are typically used to run tests and are separate from production dependencies. By running `pnpm install-test`, you ensure that your testing environment has all the necessary dependencies installed.'
    flag:
        aggregate-output: '[AI] `pnpm install-test --aggregate-output` is a command used with the package manager PnPM (Parallel NPM). It runs tests for all projects in a multi-package workspace and produces an aggregated test coverage report using tools like Jest or Mocha. The `--aggregate-output` option tells PnPM to generate a single coverage result file instead of separate files per project. This makes it easier to analyze the overall test coverage across all projects in the workspace.'
        changed-files-ignore-pattern: '[AI] `pnpm install-test --changed-files-ignore-pattern` is a command used with PnPM, a package manager for Node.js projects. This command runs tests (typically using a testing framework like Jest) and instructs PnPM to ignore specific file pattern changes when determining which packages to reinstall during the test run. This can save time by avoiding unnecessary reinstalls if only certain files have been modified.'
        child-concurrency: |-
            [AI] `pnpm install-test --child-concurrency` is a command used with PnPM, a package manager for Node.js projects. This command performs two main tasks:

            1. Installs test dependencies mentioned in the `package.json` file under the "devDependencies" or "dependencies" section using PnPM.
            2. Runs tests in parallel using child processes. The `--child-concurrency` option determines the maximum number of child processes that can run at a time. This helps to speed up testing by executing multiple tests concurrently, improving the overall test execution time.
        color: '[AI] `pnpm install-test --color` is a command used in JavaScript projects with PnPM package manager. The `install` sub-command installs specified packages, while `test` is a script defined in `package.json` file usually running tests using Jest or Mocha. The `--color` option enables the use of colored output during the test run for better readability.'
        dev: '[AI] `pnpm install-test --dev` is a command used with the package manager, pnpm. This command installs testing dependencies and marks them as development dependencies in the project''s `package.json` file. The `--dev` flag tells pnpm to include these packages only when running in development mode and not in production builds.'
        dir: '[AI] `pnpm install-test --dir` is a command used with the package manager PnPM (Parallel NPM). It installs and runs tests for packages specified in the `package.json` file, located in the directory specified by `--dir`. The command first installs the required dependencies using pnPM, and then runs the tests using a test runner like Jest or Mocha. The outcome of the tests is reported to the console, helping developers ensure the correctness of their codebase before releasing new updates.'
        filter: '[AI] `pnpm install-test --filter` is a command used with PnPM (Parallel NPM), a package manager for JavaScript projects that allows parallel installation and management of packages. This specific command runs `install-test` script, which is typically used to install test dependencies mentioned in the `test` key of the `package.json` file, and filters the installation process to only install packages that match a specified glob pattern. This can help save time by only installing the required test dependencies instead of installing all dependencies in the project.'
        filter-prod: '[AI] `pnpm install-test --filter-prod` is a command used with PnPM, a package manager for Node.js projects. It runs `install` to download and save new dependencies and then `test` to execute tests in the project. The `--filter-prod` flag is optional and limits the installation of dependencies marked as "production" or "dev" with a value of "production" in their package.json files. This means that only packages necessary for production builds are installed, excluding development dependencies.'
        fix-lockfile: |-
            [AI] `pnpm install-test --fix-lockfile` is a command used with PnPM, a package manager for JavaScript projects. This specific command performs two actions:

            1. It runs the tests in a project (denoted by `install-test`).
            2. It also fixes any potential issues with the lockfile (package-lock.json or pnpm-lock.yaml) created during the installation process of packages, ensuring that all dependencies are consistently installed across different machines. By using `--fix-lockfile`, PnPM automatically resolves any version conflicts and inconsistencies in the lockfile.
        force: |-
            [AI] `pnpm install-test --force` is a command used with PnPM, a package manager for Node.js projects. This command performs two actions:

            1. It runs `install-test`, which is a script provided by some projects for running tests as a part of their development workflow.
            2. The `--force` flag tells PnPM to install packages even if they already exist, and to overwrite any changes to package versions or lock files that may have occurred since the last installation. This can be helpful when trying to reproduce a previous state of your project's dependencies, or when dealing with inconsistencies in the package tree.
        frozen-lockfile: '[AI] `pnpm install-test --frozen-lockfile` is a command used with PnPM, a package manager for JavaScript projects. This command runs `install` with the `--test` flag to install test dependencies and locks the package versions in the current project''s `pnpm-lock.yaml` file using the `--frozen-lockfile` option. The effect is that subsequent installations will use the same exact package versions, ensuring consistency across different runs of tests or builds.'
        global-dir: '[AI] `pnpm install-test --global-dir` is a command used with PnPM, a package manager for Node.js projects. This command runs tests for packages installed globally in the directory specified by `--global-dir`. The `install-test` sub-command installs and reinstalls test dependencies, and then executes tests using the test runner configured in the `package.json` file of each installed package. This can be useful when you want to ensure that all globally installed packages have up-to-date tests, or when preparing a development environment.'
        help: '[AI] `pnpm install-test` is a command used with pnpm, a package manager for JavaScript projects. This command runs tests in a project by installing the required dependencies mentioned in the test scripts in the `package.json` file and then executing the tests using a specified test runner. The `--help` flag is an option that provides information about how to use the command correctly, including any available options or arguments. For detailed usage instructions, you can refer to the output of running `pnpm help install-test`.'
        hoist-pattern: '[AI] `pnpm install-test --hoist-pattern` is a command used with PnPM, a package manager for JavaScript projects. This command runs tests in a project and also applies the hoisting feature. Hoisting is a process where certain types of imports are moved to the top of the relevant files to improve performance by reducing the number of read operations. The `--hoist-pattern` flag specifies a pattern to determine which modules should be hoisted. With this command, you can automatically run tests and optimize your project''s import structure.'
        ignore-pnpmfile: '[AI] `pnpm install-test --ignore-pnpmfile` is a command used with PnPM, a package manager for JavaScript projects. This command runs tests in a project while bypassing the `pnpmfile` or `package-lock.json` file. In other words, it ignores any version dependencies specified in those files and installs packages based on the `package.json` file instead. This can be useful when testing new versions of dependencies before updating the project''s lock files.'
        ignore-scripts: '[AI] `pnpm install-test --ignore-scripts` is a command used with the Package Manager for Node.js projects named pnpm. This command installs and runs tests defined in the `package.json` file under the `tests` or `mochaTestFile` scripts, but it ignores any scripts marked as "scripts" in the `pnpm-lock.yaml` file. It''s useful when you want to run tests without executing other scripts like linting or build processes that might slow down your development workflow.'
        lockfile-dir: '[AI] `pnpm install-test --lockfile-dir` is a command used with PnPM, a package manager for Node.js projects. This command runs tests and installs the required dependencies mentioned in the test scripts section of the package.json or pnpm-lockfile located in the specified directory (--lockfile-dir). The installed packages are then added to the lockfile in that directory ensuring consistent dependencies across team members and builds.'
        lockfile-only: '[AI] `pnpm install-test --lockfile-only` is a command used with the Parcel build tool and npm package manager, PnPM. This command is used to update the lockfile (package-lock.json or pnpm-lock.yaml) of a project without installing any new dependencies or running tests. It''s useful for situations where you want to ensure that your project''s dependency tree remains consistent before committing changes, or when working on a team and need to make sure everyone is using the same version of dependencies.'
        loglevel: '[AI] `pnpm install-test --loglevel` is a command used with npm packaging tool, pnpm. The `install-test` subcommand installs test dependencies mentioned in the `package.json` file under the `devDependencies` or `dependencies` sections. The `--loglevel` option sets the logging level for pnpm output. A common value is `info`, but other options include `warn`, `error`, and custom levels such as `silent` or `verbose`. Using this command installs dependencies and tests with customized logging levels.'
        modules-dir: '[AI] `pnpm install-test --modules-dir` is a command used with PnPM, a package manager for JavaScript projects. This command runs tests and installs only the required test dependencies located in the specified `--modules-dir` directory. The installed packages are isolated from development dependencies using PnPM''s multi-workspace feature, allowing for efficient and clean testing environments.'
        network-concurrency: '[AI] `pnpm install-test --network-concurrency` is a command used with the package manager, pnpm. This command runs `install` and `test` scripts in parallel using multiple concurrent processes to download and install dependencies and execute tests more quickly. The option `--network-concurrency` specifies the maximum number of installations that can run in parallel at once. By default, it is set to 4, but you can adjust this value as needed to optimize your workflow.'
        no-color: '[AI] `pnpm install-test --no-color` is a command used with the PnPM package manager. It runs `install` to download and save dependencies listed in a project''s package.json file, followed by `test` to execute tests using the saved test runners and assertion libraries. The `--no-color` flag is an optional argument that instructs PnPM not to use colored output during the command execution. This can be useful when running automated scripts or working in environments where colors are not supported, such as in a text-based terminal on a headless server.'
        no-frozen-lockfile: '[AI] `pnpm install-test --no-frozen-lockfile` is a command used with PnPM, a package manager for JavaScript projects. This command runs `install` with a focus on installing and managing test dependencies. The `--no-frozen-lockfile` option instructs PnPM not to use the current lockfile when installing packages, allowing for potentially different versions of packages during development or testing phases.'
        no-hoist: '[AI] `pnpm install-test --no-hoist` is a command used with PnPM, a package manager for Node.js projects. This command installs and runs tests defined in the `test:` scripts in `package.json`, without applying the hoisting feature of PnPM. Hoisting is a performance optimization that installs common dependencies once across multiple packages and reuses them instead of duplicating installations. The `--no-hoist` flag disables this behavior, making each test installation independent.'
        no-lockfile: '[AI] `pnpm install-test --no-lockfile` is a command used with PnPM, a package manager for Node.js projects. This command runs tests without creating or using a lockfile (also known as a package-lock.json or pnpm-lock.yaml file). The lockfiles ensure that every developer has the exact same dependencies installed when working on the same project. By using `--no-lockfile`, the test environment will use the currently installed packages, which may lead to different results across machines, but can be useful for continuous integration or testing environments where the dependency versions are managed externally.'
        no-optional: '[AI] `pnpm install-test --no-optional` is a command used with npm or pnpm package managers. It runs `install` to download and save dependencies mentioned in the `package.json` file, and then runs tests with `--no-optional` flag which tells npm/pnpm not to install optional dependencies (marked as "devDependencies" or "optionalDependencies") during installation process. This can help keep the installed packages lean and focused on only the necessary dependencies for the project to run and pass its tests.'
        no-verify-store-integrity: '[AI] `pnpm install-test --no-verify-store-integrity` is a command used with PnPM, a package manager for JavaScript projects. This command runs the tests defined in a project''s test script (usually in `package.json`) and installs any missing dependencies required to run those tests. The `--no-verify-store-integrity` flag disables PnPM''s built-in store integrity verification during installation, which can speed up the process when working on development environments or dealing with potentially corrupted dependency caches.'
        offline: '[AI] `pnpm install-test --offline` is a command used with PnPM, a package manager for JavaScript projects. This command runs `install-test` script (presumably for running tests) while keeping PnPM in offline mode. Offline mode means that it will only use the locally cached packages and won''t fetch any new dependencies from the internet unless explicitly specified in the `pnpm-lock.yaml` file. This can be useful when working on a project without an internet connection or to ensure consistent test results across different environments.'
        package-import-method: '[AI] `pnpm install-test --package-import-method` is a command used with PnPM, a package manager for JavaScript projects. This command runs tests and installs the test dependencies using a specific import method. The available methods are "commonjs", "esm" (ES Module), and "auto" which infers the import format based on the file extensions. For example, `--package-import-method commonjs` will install and use CommonJS format dependencies for tests.'
        prefer-frozen-lockfile: '[AI] The `pnpm install-test --prefer-frozen-lockfile` command is used with PnPM, a package manager for Node.js projects. This command runs `pnpm install` with the additional flag `--test` to install test dependencies, and `--prefer-frozen-lockfile` to use the exact versions of packages specified in the current lockfile, preventing any automatic updates. This ensures that the tests are run with consistent dependencies across different environments.'
        prefer-offline: '[AI] `pnpm install-test --prefer-offline` is a command used with PnPM, a package manager for Node.js projects. The `--prefer-offline` flag instructs PnPM to prioritize the use of locally cached packages instead of downloading them from the internet. This can be useful when working offline or having slow network connections, as it allows you to test your project using only the packages that are already available in the local cache. The `install-test` command is used to install and run tests for a Node.js project.'
        prod: '[AI] `pnpm install-test --prod` is a command used with npm package manager, specifically with its faster alternative pnpm. The command instructs pnpm to install all project dependencies defined in the package.json file, run tests using the test scripts specified therein, and optimize the production build by setting the NODE_ENV environment variable to ''production''.'
        public-hoist-pattern: |-
            [AI] `pnpm install-test --public-hoist-pattern` is a command used with the Package Manager for Node.js projects called pnpm. This command performs two main tasks:

            1. Installs tests specified in the `package.json` file under the `devDependencies` or `dependencies` section using pnpm.
            2. Enables the feature of hoisting "public" modules, meaning that modules with a specific naming pattern (defined by the `--public-hoist-pattern` flag) will be treated as if they were imported in an entry point file and made available globally at compile time for bundlers like webpack or parcel. This simplifies the configuration of these bundlers, as you won't need to import these modules manually into each file.
        recursive: '[AI] `pnpm install-test --recursive` is a command used with PnPM, a package manager for Node.js projects. This command runs the installation of tests and their dependencies recursively across an entire multi-package project tree. It searches for a test command or a `test` script in each package''s `package.json`, installs those dependencies, and then runs the tests when done. This is helpful when managing complex projects with multiple packages that have interconnected testing needs.'
        reporter: '[AI] `pnpm install-test --reporter` is a command used with PnPM, a package manager for Node.js projects. The `install-test` subcommand installs and runs tests for the current project and its dependencies. The `--reporter` option specifies which test reporter to use when running the tests. Common reporters include `jest`, `mocha`, or `nyc`. This command automatically installs the specified test runner and reports the test results using that reporter upon test execution.'
        shamefully-hoist: '[AI] `pnpm install-test --shamelessly-hoist` is a command used with PnPM, a package manager for Node.js projects. This command is used to run tests and install only the required test dependencies without worrying about peering or hoisting dependencies. The `--shamelessly-hoist` flag explicitly instructs PnPM to hoist dependencies (make them available to all projects) even if it goes against the default scoped workflow, which aims for minimal interference between different projects in a workspace.'
        side-effects-cache: |-
            [AI] The `pnpm install-test --side-effects-cache` command is used with PnPM, a package manager for Node.js projects. This command runs `install` with test scripts and enables the side effects cache.

            The side effects cache is a feature that saves the results of installing packages and their dependencies, so subsequent installations with the same set of packages can be faster. It helps in reducing the time taken to install dependencies for tests during continuous integration.

            In simple terms, `pnpm install-test --side-effects-cache` installs the packages required to run the tests while caching their side effects for improved performance in subsequent test runs.
        side-effects-cache-readonly: '[AI] `pnpm install-test --side-effects-cache-readonly` is a command used with PnPM, a package manager for Node.js projects. This command runs tests using the installed packages and reads only from the side-effects cache to check if the test results are consistent with previous runs without modifying it. It helps ensure test determinism and improves the reliability of continuous integration systems by reducing potential false positives or negatives caused by cache modifications during testing.'
        silent: '[AI] `pnpm install-test --silent` is a command used with the Package Manager for Node.js projects called pnpm. This command installs only the test dependencies mentioned in the `package.json` file under the `devDependencies` section, without displaying any progress messages or other output in the terminal. The `--silent` flag ensures a quiet installation process.'
        store-dir: |-
            [AI] `pnpm install-test --store-dir` is a command used with PnPM, a package manager for JavaScript projects. The `install-test` part of the command runs tests defined in a project's `package.json` file under the `scripts > test` key using the test runner specified there.

            The `--store-dir` option specifies a directory where PnPM should store the installed test dependencies instead of the default global cache or the individual project caches. This can be useful when multiple projects share the same test dependencies, to avoid redundant installations and streamline the testing process.
        stream: '[AI] `pnpm install-test --stream` is a command used with PnPM, a package manager for JavaScript projects. This command installs test dependencies and runs tests in real time as they are being installed. The `--stream` option enables real-time streaming of installation progress to the console. This can be useful for large projects or when running tests continuously during development.'
        strict-peer-dependencies: '[AI] `pnpm install-test --strict-peer-dependencies` is a command used with the package manager, pnpm. This command installs test dependencies (libraries required to run tests) using pnpm and enforces strict peer dependencies. Peer dependencies are packages that must be present in the project at runtime but not part of the project itself. The `--strict-peer-dependencies` option ensures that all peer dependencies listed in the package.json file are installed as hard dependencies, avoiding potential version conflicts and improving consistency in the project environment.'
        test-pattern: '[AI] `pnpm install-test --test-pattern` is a command used with the Package Manager for Node.js projects, PnPM. This command is used to install and run tests for a project. The `--test-pattern` option specifies the test file patterns to be matched when running the tests. For example, if you have Jest tests written in `*.spec.js` files, you can use `pnpm install-test --test-pattern="**/*.spec.js"` to install and run those tests. The `--test-pattern` argument is a glob pattern that matches the test files within your project directory.'
        use-running-store-server: |-
            [AI] `pnpm install-test --use-running-store-server` is a command used in JavaScript projects managed with pnpm (parallel npm), a package manager that offers parallel installing and caching of packages.

            This specific command has two parts:

            1. `pnpm install-test`: This part runs `pnpm install` followed by running tests defined in your project's test script(s) under the `scripts` section in `package.json`. It is useful for ensuring that all dependencies are installed before testing.

            2. `--use-running-store-server`: This flag tells pnpm to use a previously started `pnpm run store:serve` (or similar) process instead of starting a new one, thus saving time and resources when running tests multiple times. In other words, it reuses the running store server for test runs.
        use-stderr: '[AI] `pnpm install-test --use-stderr` is a command used with npm or pnpm package managers. It runs the test scripts defined in a package''s `package.json` file using the given package manager (pnpm in this case), and redirects error output to standard error stream instead of mixing it with other output. This can be helpful when trying to diagnose issues during automated testing or continuous integration processes.'
        use-store-server: |-
            [AI] `pnpm install-test --use-store-server` is a command used with PnPM, a package manager for Node.js projects. This command performs two main tasks:

            1. It runs `install-test` script: This script is typically defined in the project's `package.json` file under `scripts`. It usually installs dependencies and devDependencies specified in the project's `package.json` file, and then runs tests using the installed packages.
            2. It uses PnPM's global store server: The `--use-store-server` option enables PnPM to use its global store server when installing packages instead of downloading them from registries like npm or Yarn every time. This approach improves installation speed since the packages are already cached on the server and can be quickly retrieved, especially if multiple projects share common dependencies.
        verify-store-integrity: |-
            [AI] `pnpm install-test --verify-store-integrity` is a command used with the Package Manager for Node.js projects called pnpm. This specific command has two parts:

            1. `install-test`: This part runs the normal installation process for all packages mentioned in the project's package.json and package-lock.json files. In addition, it installs packages required for running tests (listed in the test scripts of package.json).

            2. `--verify-store-integrity`: This optional flag, when used, checks the integrity of pnpm's cache (also called the 'store') after installation. It computes hashes of all downloaded packages and compares them against the ones stored in the store to ensure no tampering or data corruption has occurred. If the verification passes, it means the packages are trustworthy and ready for use.
        virtual-store-dir: '[AI] `pnpm install-test --virtual-store-dir` is a command used with PnPM, a package manager for JavaScript projects. The `install-test` subcommand installs testing dependencies mentioned in the `test:` field in the `package.json` file. The `--virtual-store-dir` option specifies a custom directory where PnPM will store these test-only packages without affecting the global or project''s regular package installations. This virtual store enables running tests with different versions of dependencies, isolated from other projects or collaborators.'
        workspace-root: '[AI] `pnpm install-test --workspace-root` is a command used with npm package manager, specifically with its faster alternative, pnpm. This command runs tests for all projects in a multi-package workspace while installing the required dependencies using pnpm. The `--workspace-root` option specifies the root directory of the workspace.'
