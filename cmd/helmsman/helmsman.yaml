# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: helmsman
description: Helmsman is a Helm Charts as Code tool
flags:
    --always-upgrade: upgrade release even if no changes are found
    --apply: apply the plan directly
    --context-override=: override releases context defined in release state with this one
    --debug: show the debug execution logs and actual helm/kubectl commands. This can log secrets and should only be used for debugging purposes.
    --destroy: delete all deployed releases.
    --diff-context=: number of lines of context to show around changes in helm diff output
    --dry-run: apply the dry-run option for helm commands.
    --force-upgrades: use --force when upgrading helm releases. May cause resources to be recreated.
    --group=: limit execution to specific group of apps.
    --keep-untracked-releases: keep releases that are managed by Helmsman from the used DSFs in the command, and are no longer tracked in your desired state.
    --kubeconfig=: path to the kubeconfig file to use for CLI requests
    --kubectl-diff: use kubectl diff instead of helm diff. Defalts to false if the helm diff plugin is installed.
    --migrate-context: updates the context name for all apps defined in the DSF and applies Helmsman labels. Using this flag is required if you want to change context name after it has been set.
    --no-banner: don't show the banner
    --no-cleanup: keeps any credentials files that has been downloaded on the host where helmsman runs.
    --no-color: don't use colors
    --no-env-subst: turn off environment substitution globally
    --no-fancy: don't display the banner and don't use colors
    --no-ns: don't create namespaces
    --no-ssm-subst: turn off SSM parameter substitution globally
    --no-update: skip updating helm repos
    --ns-override=: override defined namespaces with this one
    --replace-on-rename: Uninstall the existing release when a chart with a different name is used.
    --show-diff: show helm diff results. Can expose sensitive information.
    --skip-validation: skip desired state validation
    --subst-env-values: turn on environment substitution in values files.
    --subst-ssm-values: turn on SSM parameter substitution in values files.
    --target=: limit execution to specific app.
    --update-deps: run 'helm dep up' for local charts
    --verbose: show verbose execution logs.
    -e*=: file(s) to load environment variables from (default .env), may be supplied more than once
    -f*=: desired state file name(s), may be supplied more than once to merge state files
    -p=: max number of concurrent helm releases to run
    -v: show the version
documentation:
    command: '[AI] The term "helmsman" refers to a person who steers a ship or a vessel. They are responsible for controlling the rudder or the wheel of the boat to ensure it stays on course and navigates safely through waters. In nautical terminology, the helm is the steering mechanism of a ship, and the helmsman operates it.'
    flag:
        always-upgrade: '[AI] The `--always-upgrade` flag in Docker''s Compose file is used to ensure that services are upgraded to their latest image version whenever a change is made to the Compose file and the `up` or `restart` command is run. This can be useful for keeping services up-to-date with the latest image versions, but it may also cause more frequent downtime as services are upgraded and restarted. It''s important to note that this flag only affects how Docker Compose manages the containers, not how the application within the container is updated or managed.'
        apply: '[AI] `helm install` or `helm upgrade` are common commands used with Helm, a popular Kubernetes package manager, to deploy applications as charts. The `--apply` flag is an optional argument for these commands that, instead of installing or upgrading the entire chart in one go, applies individual changeset from a chart''s values.yaml file. Essentially, this flag allows applying a partial update to a running deployment, making it more flexible and fine-grained when managing complex Kubernetes environments.'
        context-override: '[AI] The `--context-override` flag in the Helmsman CLI (Command Line Interface) tool for Kubernetes is used to apply specific values overrides to a particular context or namespace within a Helm chart. When you run `helm install` or `helm upgrade` with this flag, any specified overrides will take precedence over the default values in the chart''s `values.yaml`. This allows users to customize their deployments without modifying the original chart.'
        debug: '[AI] The `--debug` flag in Helm, a popular Kubernetes package manager, enables detailed debugging output for Helm operations. It increases the amount and level of detail of information printed during Helm installations, upgrades, or deletions, which can be useful when troubleshooting complex issues or understanding the underlying workings of Helm commands.'
        destroy: '[AI] The `helm install` or `helm upgrade` commands are used to deploy or update Kubernetes applications using Helm, a popular package manager for Kubernetes. The `--destroy` flag that can be passed with these commands is used to delete the previously created resources when an error occurs during installation or update, or when explicitly specified by the user. In other words, it ensures that there''s no residual state of partially deployed applications left behind.'
        diff-context: '[AI] The `--diff-context` option in Git when using the `helmsman apply` or `upgrade` command with Helm, a Kubernetes package manager, affects how the output of the command is displayed. It increases the number of lines before and after the diff to make it easier to understand the changes being made. The default context is usually 3 lines, but you can specify a larger number, for example, `--diff-context=7`, to see more context in the diff output.'
        dry-run: '[AI] The `--dry-run` flag used with Helmsman, a Helm file manager, instructs it to simulate the application of changes without actually making them. This means that Helmsman will show what would be deployed or updated based on the provided configuration files, but no real resources will be modified in the cluster. It''s useful for testing and reviewing the impact of changes before executing them in a production environment.'
        e: '[AI] The `helm install` or `helm upgrade` command with the flag `-e` (or `--values`) is used to specify a YAML file containing values overrides for the given Helm chart. This allows for customizing specific parts of the chart without modifying its original source code. It enables users to manage and separate environment-specific configuration from the chart itself, enhancing the flexibility and reusability of the charts in different contexts.'
        f: '[AI] The `helmsman -f` flag is used in Docker Compose files to apply changes without re-creating services, networks, and volumes. It stands for "force" or "overwrite files on disk." This means that if there are any differences between the current state defined in the YAML file and the actual running configuration, those differences will be resolved in favor of the Compose file, effectively updating the configuration without destroying and recreating the services.'
        force-upgrades: '[AI] The `helm install` or `helm upgrade` command with the `--force-upgrades` flag is used to override Helm''s default upgrade strategy and force the installation or update of charts regardless of their current version. This can be useful when you want to apply changes even if they might result in downtime or other unwanted side effects, as the new chart versions may contain important fixes or improvements. It''s essential to understand the potential risks before using this flag and ensure proper planning and rollback strategies are in place.'
        group: '[AI] The `--group` flag in Helm, a popular Kubernetes package manager, is used to specify that the given chart or release should be installed as a Tiller daemonset or a Tiller RBAC service account in a multi-node Helm environment. This flag ensures that the Helm server component, Tiller, is deployed and managed as a single entity with defined permissions across the cluster.'
        keep-untracked-releases: '[AI] The `--keep-untracked-releases` flag in Git is a configuration option for the Git Helmsman tool, which is used to manage Helm releases. This flag instructs Helmsman not to remove untracked Helm release charts that have never been installed or tracked by Git. By default, Helmsman removes untracked Helm charts during a `helm upgrade` or `helm install` command to keep the Git repository clean and focused on managed releases. However, this flag allows you to preserve untracked charts for future use. It does not affect already tracked or installed charts, only those that are currently untracked.'
        kubeconfig: '[AI] The `helm install` or `helm upgrade` command with the `--kubeconfig` option is used to interact with a Kubernetes cluster using a specific KubeConfig file instead of the default one. This flag helps Helm, the popular package manager for Kubernetes, to locate and authenticate against the desired Kubernetes environment when deploying or updating charts. The given KubeConfig file should be accessible in the current working directory or its path should be provided with the command.'
        kubectl-diff: '[AI] `helm install` or `helm upgrade` are common commands used in Kubernetes to deploy applications using Helm, a popular package manager for Kubernetes. The `--kubectal-diff` flag, when used with these commands, generates and shows the differences between the current state of your Kubernetes resources and the desired state defined in your Helm chart before applying the changes. This allows you to review and approve the proposed modifications before they are applied to your cluster, ensuring that any intended changes are intentional and reducing the risk of unwanted updates.'
        migrate-context: |-
            [AI] The `helm install` or `helm upgrade` commands in Helm, a popular Kubernetes package manager, can be used to deploy or update applications in a Kubernetes cluster. The `--migrate-context` flag is an option for these commands, which allows specifying a new Helm release repository context.

            When you use this flag, Helm will attempt to switch the active context of your local Helm client to the new repository URL before installing or upgrading the specified chart. This can be useful when you need to use a different repository for a specific deployment, while keeping your default repository unchanged. The new context should be in the format `<name> <url>`. For example: `my-new-repo my-repo-url`.
        no-banner: '[AI] The `helmsman` is a tool used in Kubernetes to manage Helm, a popular package manager for Kubernetes. The `--no-banner` flag is an option that can be passed when invoking the `helmsman` command. This flag instructs the `helmsman` not to print the welcome banner message during execution. It''s used for suppressing the banner in scripts or automated workflows where the banner output might clutter the logs or unnecessarily add noise.'
        no-cleanup: '[AI] The `--no-cleanup` flag in Helm, a popular Kubernetes package manager, is used to prevent Helm from cleaning up previously released charts or resources during installation or upgrade. This flag is especially useful when you want to keep multiple versions of the same chart deployed for testing or debugging purposes without worrying about unintended resource cleanup. However, be aware that keeping older releases may lead to unnecessary resource consumption and potential conflicts.'
        no-color: '[AI] The `--no-color` flag for the Helm command line tool is used to disable colored output. When this option is provided, Helm will display text in plain text format without using color codes for informational messages or error messages. This can be useful for users who prefer a monochrome terminal environment or for scripts that need to parse Helm output without color interference.'
        no-env-subst: '[AI] The `helm install` or `helm upgrade` command with the option `--no-env-subst` tells Helm to not perform environment variable substitution during the rendering of templates before deploying a chart. This means that any references to environment variables in the templates will be treated as literal strings and will not be replaced with their actual values at deployment time. The flag is useful when you want to manage and set environment variables separately from Helm, or if there are sensitive data that should not be exposed during template rendering.'
        no-fancy: '[AI] The `--no-fancy` flag in Helm, a popular Kubernetes package manager, disables the use of color and other formatting options in Helm''s output. It is useful for users who prefer plain text output or who are working in environments where colored output is not supported. This can make it easier to parse Helm commands in scripts or automation tools.'
        no-ns: '[AI] The `--no-ns` flag used with the `kubectl helm install` or `upgrade` command in Kubernetes instructs Helm, the Package Manager for Kubernetes, not to create or manage Namespaces along with the released chart. By default, Helm creates a new namespace if it doesn''t exist. With `--no-ns`, you are explicitly telling Helm to use an existing namespace and not create a new one. This option is useful when working in environments where Namespaces have already been set up for specific teams or applications.'
        no-ssm-subst: '[AI] The `--no-ssm-subst` flag is used with the AWS CLI''s `helm install` or `helm upgrade` commands when working with Helm charts deployed using Amazon ECR as a chart repository. It disables the substitution of SSM parameters in values files using AWS Systems Manager Parameter Store. This means that any references to parameters in the values file will not be automatically replaced with their corresponding values during deployment. Instead, users must manually set these parameters when running `helm install` or `helm upgrade`.'
        no-update: '[AI] The `helm install` or `helm upgrade` command with the `--no-update` flag prevents Helm, a popular Kubernetes package manager, from performing automatic updates to the managed chart or release after deployment. This flag is useful when you want to manually manage updates or avoid unnecessary changes to running applications.'
        ns-override: |-
            [AI] `helm install` or `helm upgrade` are commands used with Helm, a popular Kubernetes package manager, to deploy and manage applications. The `--ns-override` flag is an option that can be passed to these commands.

            When using multiple Helm releases in the same namespace, it's common to encounter conflicts due to shared resources or component names. In such cases, you can use the `--ns-override` flag to force Helm to update the specified release in a target namespace even if it already exists. This flag is especially useful when performing rolling updates or upgrades while minimizing downtime by updating individual releases without affecting others in the same namespace.
        p: '[AI] The `helmsman -p` flag is used in Kubernetes when running Helm, a popular package manager for Kubernetes. This flag stands for "upgrade" and is used to perform an upgrade of a Helm release, which is essentially updating the charts and configuration files of a previously deployed application without disturbing its current state. This means that any new changes will be applied incrementally while maintaining the existing data and customizations of the running instance.'
        replace-on-rename: '[AI] The `--replace-on-rename` flag in Helm, a popular Kubernetes package manager, instructs Helm to replace an existing release with the same name when a chart is deployed with the same name but with a different release name or changed chart version. This behavior overrides Helm''s default behavior of installing a new release as a separate entity. The flag ensures that the updated configuration takes precedence, minimizing potential discrepancies between releases.'
        show-diff: '[AI] `helm show values` is a Helm CLI command used to display the current values of a Helm chart. The `--show-diff` flag is an optional argument that shows the difference between the current and proposed values, allowing users to review and compare changes before applying them. It helps in understanding what will be updated or added when running `helm upgrade`.'
        skip-validation: '[AI] The `--skip-validation` flag in Helm, a popular Kubernetes package manager, is used to disable chart validation during the installation or upgrade process. This means that Helm will not perform any schema or syntactic checks on the chart files before deploying them to your Kubernetes cluster. Bypassing this check can be useful when working with custom charts or making manual adjustments to chart configurations, but it''s essential to understand the potential risks involved, such as introducing errors or security vulnerabilities that might not be detected until deployment.'
        subst-env-values: '[AI] `helmsman` is a Helm wrapper tool that simplifies Helm chart deployment and management. The `--subst-env-values` option is used to substitute values in environment variables before passing them to the `helm` command. This allows you to set values dynamically, making your deployment more flexible and dynamic, especially when dealing with multi-environment deployments or using CI/CD pipelines. For example, `helmsman install mychart --subst-env-values env_var1=value1 env_var2=value2` will pass `env_var1=value1` and `env_var2=value2` as values to Helm for chart installation.'
        subst-ssm-values: '[AI] The `helm` flag `--subst-ssm-values` is used to automatically substitute values from AWS Systems Manager Parameter Store (SSM) into Helm charts during chart installation or upgrade. This helps manage and secure sensitive data, such as access keys or passwords, by storing them in SSM and referencing them at runtime instead of hardcoding them directly into the chart. The flag takes a list of paths to the parameter store keys to be substituted, in the format `key/namespace`. For example, `--subst-ssm-values my_key=my_key/my_namespace`.'
        target: '[AI] The `helm install` or `helm upgrade` command with the `--target` flag is used to create or update the Kubernetes manifest files in the `values.yaml` directory under the corresponding chart, without applying those changes to the cluster immediately. This allows for reviewing and adjusting the proposed changes before deploying them using `helm apply`.'
        update-deps: '[AI] `helm install` or `helm upgrade` with the `--update-deps` flag is used to update dependencies of a Helm chart in a Kubernetes cluster. When this option is provided, Helm will also upgrade any dependent charts that have new versions available, ensuring that the target chart runs in an environment with all its dependencies up-to-date.'
        v: '[AI] `helmsman` is a Kubernetes utility used for managing Helm repositories and releases. The `-v` flag is used to increase the verbosity of Helmsman''s output. It provides more detailed information about the commands being executed, making it easier to diagnose issues. When used with the `helmsman install` command, for instance, it will print out additional information related to the repository, chart, and release being installed.'
        verbose: '[AI] The `--verbose` flag for the Helmsman CLI tool in Kubernetes increases the level of output during Helm chart installation or upgrade operations. It provides more detailed information about each step, making it easier to diagnose any issues that may arise. This flag is useful for gaining a deeper understanding of what is happening during the deployment process and can help in troubleshooting.'
