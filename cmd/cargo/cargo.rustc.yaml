# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rustc
description: Compile a package, and pass extra options to the compiler
flags:
    --all-features: Activate all available features
    --all-targets: Build all targets
    --bench*=: Build only the specified bench target
    --benches: Build all benches
    --bin*=: Build only the specified binary
    --bins: Build all binaries
    --crate-type*=: Comma separated list of types of crates for the compiler to emit
    --example*=: Build only the specified example
    --examples: Build all examples
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Build only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --print=: Output compiler information without compiling
    --profile=: Build artifacts with the specified profile
    --target*=: Target triple which compiles will be for
    --target-dir=: Directory for all generated artifacts
    --test*=: Build only the specified test target
    --tests: Build all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package=: Package to build
    -q, --quiet: Do not print cargo log messages
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] The `cargo rustc` command is used in Rust programming language projects to compile and check the syntax of Rust source code using Rust Compiler (rustc). Cargo is a build tool for Rust, and this command is equivalent to running `rustc` directly but with some added benefits from Cargo like better error messages, project-wide dependency management, and more.'
    flag:
        all-features: '[AI] `cargo rustc --all-features` is a command used in Rust programming language''s build system, Cargo. This command instructs Cargo to run Rust compiler (rustc) with all available features. In other words, it enables all stable and experimental Rust language and library features when compiling the project. This can lead to larger binary size and potentially increased runtime performance or new functionality, depending on the specific features used in the project.'
        all-targets: |-
            [AI] The `cargo rustc --all-targets` command is used in Rust programming language to trigger a full recompile of all targets within a Cargo project.

            Cargo is the Rust package manager and build system, and `rustc` is the Rust compiler. When you run this command, Cargo will first clean the previous build artifacts using `cargo clean`, then it will call `rustc` with the `--all-targets` flag to compile every possible target (e.g., binary executables for different platforms and libraries) defined in your project's `Cargo.toml` file. This command is useful when you want to ensure a consistent build across all targets or after making changes that affect multiple targets.
        bench: |-
            [AI] `cargo rustc --bench` is a command used in Rust programming language to build and run benchmarks. Here's a breakdown of what each part does:

            1. `cargo`: A tool for managing Rust projects, including building, testing, and running commands.
            2. `rustc`: The Rust compiler, used to compile the source code into executable binaries or other artifacts.
            3. `--bench`: A flag passed to `rustc` that instructs it to build and run benchmarks instead of a regular binary. It compiles the benchmark functions defined in the Rust source code and generates test data for them.
            4. The command is usually executed from within the project directory in your terminal, so `cargo rustc --bench` would translate to running `cargo build --features bench -- --bin <your_benchmark_name> -- <args_for_your_benchmark>`.

            The output will typically include the name of each benchmarked function and their respective runtimes. This command is useful for measuring and comparing the performance of different pieces of code within a Rust project.
        benches: |-
            [AI] `cargo rustc --benches` is a command used in Rust programming language to build and run benchmarks. Here's a brief explanation of each part:

            1. `cargo`: Cargo is the package manager for Rust, it manages project dependencies and builds the project.
            2. `rustc`: Rust Compiler (Rustc) is responsible for translating Rust code into machine code.
            3. `--benches`: This flag instructs Cargo to build and run benchmarks instead of a regular binary. Benchmarks are tests that measure the performance of specific pieces of code under controlled conditions.
        bin: '[AI] `cargo rustc --bin` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to compile the current project into an executable binary named after the default target in the `Cargo.toml` file using the Rust compiler (rustc), instead of generating libraries or tests. This command is commonly used when building standalone applications with Cargo.'
        bins: '[AI] `cargo rustc --bins` is a command used in Rust programming language for building and creating executable binaries from source code using Cargo, Rust''s build tool. The `rustc` part refers to the Rust compiler, while `--bins` specifies that only the binary executables should be generated. In simpler terms, this command builds your Rust project, compiles it into executables, and places them in the `target/debug` or `target/release` directories depending on your build profile.'
        crate-type: '[AI] The `flag "cargo rustc --crate-type"` is used with Cargo, Rust''s package manager and build tool. It specifies which crate types to build when running `rustc`, the Rust compiler, via Cargo. By default, Cargo builds both library (`lib`) and executable (`bin`) crate types, but this flag can be used to override that behavior and only build a specific crate type, such as `--crate-type lib` for libraries or `--crate-type bin` for binaries.'
        example: |-
            [AI] The `cargo rustc --example` command is used to build and run an example in Rust programming language using Cargo, its build system. Here's a brief explanation:

            1. `cargo`: Cargo is the Rust package manager and build system. It manages dependencies, builds your project, tests it, and provides various other functionalities.
            2. `rustc`: Rust Compiler (`rustc`) is used to compile Rust code into executables or libraries.
            3. `--example`: The `--example` flag tells Cargo to build an example associated with the current directory's `Cargo.toml` file. An example is a small piece of code that demonstrates how to use various features and functionalities of a Rust library or binary.
            4. When you run `cargo rustc --example`, Cargo does the following:
               a. It checks if there exists an example in your project by looking for a field named `examples` in your `Cargo.toml`.
               b. If it finds an example, it builds and runs that example using `rustc`.
               c. Finally, it prints out the result of running the example.
        examples: |-
            [AI] The command `cargo rustc --examples` is used in Rust programming language to build and run examples that come with Rust's standard library. Here's a breakdown of the command:

            - `cargo`: Cargo is a build tool for Rust, it manages the project, dependencies, and builds the source code.
            - `rustc`: Rust Compiler (rustc) is used to compile Rust code into executables or libraries.
            - `--examples`: This flag tells Cargo to build and run examples instead of the main project. Examples are smaller Rust programs that demonstrate the usage of certain Rust library features.

            So, when you run this command in your terminal, it searches for examples within your project's dependencies, builds them, and then runs the tests associated with those examples.
        features: '[AI] The `--features` flag for the Rust compiler (rustc) is used to enable or disable specific compile-time features for your project. It accepts a comma-separated list of feature names, which are defined in your project''s Cargo.toml manifest file. Enabling these features may add additional dependencies or compile-time options that are required for certain functionality within your Rust codebase.'
        future-incompat-report: |-
            [AI] The `cargo rustc --future-incompat-report` command is used in Rust programming to check for potential incompatibilities with future Rust language features when using the Rust compiler (rustc).

            Here's a breakdown of the components:

            1. `cargo`: A package manager for the Rust programming language, used to build and manage projects.
            2. `rustc`: The Rust Compiler, responsible for translating Rust source code into executable or library code.
            3. `--future-incompat-report`: A flag passed to rustc that instructs it to check the codebase for potential incompatibilities with upcoming Rust language features that might become incompatible in future Rust compiler versions. If there are any incompatibilities found, they will be reported to help developers address them proactively.
        help: '[AI] `cargo rustc --help` is a command used in Rust programming language''s build system, Cargo. The command invokes Rust compiler `rustc` with the help option (`--help`) provided by Cargo. This will display detailed information about available flags and usage of the `rustc` compiler, enabling users to understand how to effectively compile their Rust projects.'
        ignore-rust-version: '[AI] The `cargo rustc --ignore-rust-version` command is used when working with Rust projects in Cargo, the Rust package manager. It instructs Cargo to use a specific version of the Rust compiler (rustc) even if there''s a newer version available in the system''s PATH. The `--ignore-rust-version` flag ensures that Cargo uses the previously set compiler version instead. This command can be useful when trying to maintain consistency across different project builds or when dealing with compatibility issues between different Rust compiler versions.'
        jobs: '[AI] The `flag "cargo rustc --jobs"` is used with Cargo, Rust''s package manager and build system, to specify the number of jobs to run in parallel during compilation with Rust''s compiler `rustc`. By default, Cargo determines an appropriate number of jobs based on the available CPU cores. However, you can override this by using the `--jobs` flag followed by a number, indicating how many jobs to run in parallel. This can be useful for optimizing build times on multi-core systems or when running builds on larger projects.'
        keep-going: '[AI] `cargo rustc --keep-going` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to continue building even if it encounters compilation errors or warnings for some crates in the project, but not for others. The `--keep-going` flag allows the build process to continue as much as possible. This can be useful when working on large projects with multiple dependencies, where a single dependency may have issues that don''t prevent the rest of the project from functioning properly. However, keep in mind that this option might mask potential issues and could lead to inconsistencies or incorrect behavior in the final product. It''s generally recommended to investigate and resolve all errors before continuing with the build process.'
        lib: |-
            [AI] `cargo rustc --lib` is a command used in Rust programming language to build and check the correctness of a library project using Cargo, Rust's package manager.

            The `cargo` part sets up the environment, downloads dependencies, and performs various tasks based on the `Cargo.toml` file. The `rustc` part invokes Rust compiler to check the syntax and semantics of the source code. The `--lib` flag tells Rust compiler that this is a library project, which will not produce an executable but only compile the library code.
        manifest-path: '[AI] `cargo rustc --manifest-path` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to use the specified manifest file (given by `--manifest-path`) as the source of build information instead of the current directory''s `Cargo.toml`. The `rustc` part signifies that Rust compiler is going to be used for compilation after the build process.'
        message-format: '[AI] `cargo rustc --message-format` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to use Rust compiler (rustc) with a specific message format. This format controls how compilation errors and warnings are displayed. The default format is "json", but other formats like "plain" or "color" can be used to customize the output for better readability or integration with other tools.'
        no-default-features: '[AI] The `cargo rustc --no-default-features` command is used in Rust programming language to invoke the Rust compiler (rustc) through Cargo, the Rust package manager. The `--no-default-features` flag disables the use of default features for all dependencies mentioned in the project''s Cargo.toml file. This allows fine-grained control over which features are included when compiling the project.'
        package: |-
            [AI] The `cargo rustc --package` command is used in Rust programming language to build and check the correctness of a specific package within a Cargo project. Cargo is Rust's package manager and build system, while `rustc` is the Rust compiler.

            Here's a brief explanation of each part:
            - `cargo`: Invokes the Cargo command-line interface (CLI) for managing Rust projects.
            - `rustc`: Specifies that you want to use the Rust compiler (`rustc`) instead of the default Cargo build.
            - `--package <package-name>`: Tells Cargo to only consider the specified package (a library or binary within a project) when executing the command, instead of building all targets in the project.
        print: '[AI] `cargo rustc --print` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to run the Rust compiler (rustc) with the `--print` flag, which tells rustc to output the compilation process as a human-readable message instead of just producing the compiled binary or error messages. This can be useful for debugging and understanding the build process in more detail.'
        profile: '[AI] `cargo rustc --profile` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to run the Rust compiler (rustc) with a specific profiling mode enabled. The flag `--profile` enables profiling during compilation. This generates additional data that can be used for performance analysis and optimization of Rust code.'
        quiet: '[AI] `cargo rustc --quiet` is a command used in Rust programming to compile source code with Cargo, Rust''s package manager and build tool. The `--quiet` flag minimizes the output during compilation, displaying only errors and warnings. It''s useful when running automated builds or when the detailed output is not needed.'
        release: |-
            [AI] `cargo rustc --release` is a command used in Rust programming language to build and create an executable or library with release mode optimizations. Here's a brief explanation of each part:

            - `cargo`: A package manager for Rust that facilitates building, testing, and publishing Rust projects. It manages project dependencies and simplifies the build process.
            - `rustc`: The Rust compiler. It translates Rust source code into machine code or other executable formats.
            - `--release`: A flag passed to `rustc` when building for release mode. This flag enables several optimizations that increase the binary size and compile time but improve performance, code size, and security. Release mode is intended for production use while development and testing are typically done in debug mode with fewer optimizations.
        target: '[AI] The `cargo rustc --target` command is used in Rust programming language''s build system, Cargo. It instructs Cargo to run the Rust compiler (rustc) with a specific target triple, which determines the architecture and operating system for the compiled binary or library. For example, `--target x86_64-pc-windows-msvc` specifies a 64-bit Windows build with MSVC toolchain. This command is often used when cross-compiling or building for non-default platforms.'
        target-dir: '[AI] The `cargo rustc --target-dir` command is used in Rust programming language''s build system, Cargo. This command instructs Cargo to run the Rust compiler (rustc) and place the compiled output files in a specified target directory (--target-dir). The rustc compiler transforms Rust source code into executable binary or library formats, which can then be used by other projects. By using this command with Cargo, you can easily manage compilation, linking, and producing the final output files for your Rust project.'
        test: |-
            [AI] The command `cargo rustc --test` is used in Rust programming language to compile and run unit tests defined in a project using Cargo, Rust's package manager.

            Here's what each part of the command does:

            1. `cargo:` - This indicates that we will use Cargo for building the project.
            2. `rustc:` - This is the Rust compiler, used to compile source code into executable binaries or libraries. In this case, it's being invoked through Cargo.
            3. `--test:` - This flag tells Rust compiler to build and run tests defined in the project.

            So, the whole command compiles your Rust project (including any dependencies) and then runs all unit tests defined for the project.
        tests: |-
            [AI] `cargo rustc --tests` is a command used in Rust programming language to compile and run tests for a project. Here's a brief explanation of each part:

            1. `cargo`: Cargo is the build system for Rust, responsible for managing dependencies, compiling source code, and running tests.
            2. `rustc`: `rustc` is the Rust compiler that translates Rust source code (`.rs`) into machine code or bytecode.
            3. `--tests`: The `--tests` flag instructs `rustc` to also compile any tests defined in the project's source files. Tests are Rust functions with specific naming patterns, which can be run independently using Cargo's test runner.
            4. When executing this command, Cargo will first check dependencies for updates, then compile your code and tests, and finally execute the tests. The results will be displayed in the terminal.
        timings: '[AI] `cargo rustc --timings` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to run Rust compiler (rustc) with the `--timings` flag. This option enables detailed compilation timings output, which can be useful for profiling and understanding the performance characteristics of your Rust codebase during the build process. The output provides information about the time spent on various phases of compilation such as parsing, checking, code generation, and optimization.'
        unit-graph: '[AI] The `cargo rustc --unit-graph` command is used in Rust programming language to generate a unit graph during compilation. A unit graph is a directed acyclic graph (DAG) that represents the compile-time dependencies between Rust source files and their corresponding compilation units. Each node in the graph corresponds to a compilation unit, and an edge from one node to another indicates that the source file of the first node imports or depends on the second node. This information can be useful for various purposes such as code analysis, testing, and optimization.'
