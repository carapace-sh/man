# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: audit
description: Checks for known security issues with the installed packages
group: review
flags:
    --audit-level=: Only print advisories with severity greater than or equal to
    --fix: Add overrides to the package.json file in order to force non-vulnerable versions of the dependencies
    --ignore-registry-errors: Use exit code 0 if the registry responds with an error
    --json: Output audit report in JSON format
    --no-optional: Don't audit "optionalDependencies"
    -D, --dev: Only audit "devDependencies"
    -P, --prod: Only audit "dependencies" and "optionalDependencies"
documentation:
    command: '[AI] `pnpm audit` is a command provided by PnPM, a package manager for Node.js projects. It performs a security scan of the project''s dependency tree to identify any known vulnerabilities in the packages and their versions. The output includes details about each issue along with recommended actions to mitigate the risk. Users can run this command to proactively maintain the security of their projects.'
    flag:
        audit-level: |-
            [AI] `pnpm audit` is a command provided by the package manager PnPM for checking security vulnerabilities in the project's dependencies. The `--audit-level` option determines the severity level of reported vulnerabilities.

            Three audit levels are available:

            1. `low`: Reports only high and critical vulnerabilities. This is the default level.
            2. `medium`: Reports all vulnerabilities, including low, medium, high, and critical ones.
            3. `highest` (or `all`): Reports all vulnerabilities, regardless of their severity levels.

            Using `pnpm audit --audit-level highest` will return all vulnerability reports for the project's dependencies.
        dev: '[AI] `pnpm audit --dev` is a command used with the package manager, pnpm. It''s specifically designed to check for vulnerabilities in the devDependencies section of your project''s package.json file. The command scans through all the listed packages and reports any security risks or outdated dependencies that can potentially impact your project. By running `pnpm audit --dev`, you ensure the development environment of your project remains secure and up-to-date.'
        fix: '[AI] `pnpm audit --fix` is a command used with the Package Manager for Node.js projects called pnpm. It performs an security audit scan on the installed project dependencies and suggests or applies automatic fixes for known vulnerabilities, improving the overall package security.'
        ignore-registry-errors: |-
            [AI] `pnpm audit` is a command provided by PnPM, a package manager for JavaScript projects. The `--ignore-registry-errors` option is used when running an audit check to ignore registry errors during the resolution of dependencies.

            By default, `pnrm audit` validates packages against the npm and pnpm registries. If it encounters a registry error (e.g., a package with a suspicious or invalid entry), it will refuse to install that dependency and show an error message.

            With the `--ignore-registry-errors` flag, PnPM will suppress such errors, allowing the installation of potentially risky packages. It may bypass warnings and security issues, which could pose risks to your project. Therefore, use this option with caution, as it disables essential security checks.
        json: '[AI] `pnpm audit --json` is a command used in the Package Manager for Node.js projects called pnpm. This command initiates an security vulnerability scan of the project''s dependencies using the built-in auditing tool. The `--json` option returns the output in JSON format, providing detailed information about any detected vulnerabilities, including affected packages, affected versions, and available updates. This output can be easily parsed and analyzed by other tools or scripts.'
        no-optional: '[AI] `pnpm audit --no-optional` is a command used with PnPM, a package manager for JavaScript projects. The `audit` sub-command checks the installed packages and their dependencies for known security vulnerabilities. The `--no-optional` flag instructs PnPM to only check the production dependencies listed in the `package.json` file, excluding the optional dependencies. This helps keep the scan focused on the critical components of the project while still ensuring the main dependencies are secure.'
        prod: '[AI] `pnpm audit --prod` is a command used with the package manager PnPM (Parallel NPM). It performs a security scan of the production dependencies listed in your `package-lock.json` or `pnpm-lock.yaml` file, and outputs potential vulnerabilities along with recommended actions to mitigate them. The "--prod" flag ensures that only production dependencies are scanned, making it suitable for use before deploying an application.'
