# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Start running maintenance on the current repository
flags:
    --auto: run tasks based on the state of the repository
    --quiet: don't report progress or other information to stderr
    --schedule: run tasks based on frequency
    --task*=: run a specific task
documentation:
    command: |-
        [AI] The `git maintenance` command is not a standard Git command. It seems like you might be referring to a custom script or a specific workflow used in certain Git projects for performing routine maintenance tasks. These tasks can include things like merging long-lived branches, deleting old and unused branches, running automated tests, and creating tags for releases.

        To use `git maintenance`, one would typically set up a custom script that automates these tasks or integrates them with other Git tools like Husky or Jenkins. The exact implementation of the command will depend on the specifics of the project's workflow and tools being used. It is recommended to consult the documentation for your project or team to learn more about how `git maintenance` is set up and used.
    flag:
        auto: '[AI] `git maintenance run --auto` is a Git command used to perform routine housekeeping tasks for a Git repository. The `--auto` flag enables the automated running of various maintenance sub-tasks, such as removing unnecessary files in the `.git` directory, cleaning up local untracked files, and updating the repositories list. This command simplifies the process of regular Git repository maintenance by automating common tasks to ensure optimal performance and organization.'
        quiet: '[AI] The `git maintenance run --quiet` command is used to perform routine Git maintenance tasks, such as pruning unreachable objects and cleaning up the repositories'' refs and dangling commits. It runs quietly in the background without producing any output on the console unless an error occurs. This option is useful when automating Git maintenance tasks and not requiring detailed feedback.'
        schedule: '[AI] The `git maintenance run --schedule` command is used to perform routine Git maintenance tasks according to a predefined schedule. It automates various Git housekeeping activities such as pruning old branches, clearing unusedpack files, and checking the integrity of packfiles. This command helps in keeping Git repositories clean and efficient by running these essential tasks at regular intervals.'
        task: |-
            [AI] The `git maintenance run --task` command is used to perform specific Git maintenance tasks. This command is part of the Git Maintenance Script, which is a collection of scripts designed to automate various Git-related tasks, such as cleaning up old branches, managing tags, and checking for orphaned commits.

            When you execute `git maintenance run --task`, you can specify which task you want to run by providing its name as an argument. For example, `git maintenance run --task gc` will run the Git Garbage Collector, which helps to optimize your repository by removing unnecessary data and improving performance.

            Other tasks that can be run with this command include:

            - prune: Delete stale branches and remote tracking branches that have been deleted upstream
            - expire: Expire old references, such as abandoned branches, merges, and tags that are no longer needed
            - fetch: Fetch the latest changes from remote repositories
            - rebase: Rebase local branches onto their upstream counterparts to keep your repository up-to-date
            - merge: Merge the latest changes from a remote branch into your current branch
            - archives: Create and manage Git archive tarballs for your repositories.

            In summary, `git maintenance run --task` is a versatile command that allows you to automate various Git maintenance tasks, helping to keep your repositories clean, efficient, and up-to-date.
