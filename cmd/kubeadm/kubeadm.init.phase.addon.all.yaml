# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: all
description: Install all the addons
flags:
    --apiserver-advertise-address=: The IP address the API Server will advertise it's listening on. If not set the default network interface will be used.
    --apiserver-bind-port=: Port for the API Server to bind to.
    --config=: Path to a kubeadm configuration file.
    --control-plane-endpoint=: Specify a stable IP address or DNS name for the control plane.
    --feature-gates=: A set of key=value pairs that describe feature gates for various features.
    --image-repository=: Choose a container registry to pull control plane images from
    --kubeconfig=: The kubeconfig file to use when talking to the cluster. If the flag is not set, a set of standard locations can be searched for an existing kubeconfig file.
    --kubernetes-version=: Choose a specific Kubernetes version for the control plane.
    --pod-network-cidr=: Specify range of IP addresses for the pod network. If set, the control plane will automatically allocate CIDRs for every node.
    --service-cidr=: Use alternative range of IP address for service VIPs.
    --service-dns-domain=: Use alternative domain for services, e.g. "myorg.internal".
documentation:
    command: '[AI] `kubeadm init phase addon all` is a command used in Kubernetes to install and enable all available addons after initializing a new Kubernetes cluster using kubeadm. Addons are extensions that provide extra functionality like load balancing, monitoring, storage or networking for the Kubernetes cluster. Running `kubeadm init phase addon all` will download, configure, and apply the manifests for all available addons in your cluster.'
    flag:
        apiserver-advertise-address: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The option `--apiserver-advertise-address` sets the IP address or hostname that the Kubernetes API server will advertise to the external world. The `addon all --apiserver-advertise-address` phase is an extension or add-on that runs this command for all nodes in a cluster during initialization. This ensures that each node''s API server reports the same external IP address, enabling proper communication and coordination among the nodes in the cluster.'
        apiserver-bind-port: |-
            [AI] `kubeadm init` is a command-line tool for initializing a Kubernetes cluster. The `phase addon all --apiserver-bind-port` flag is used to configure and install various addons during the initialization process.

            Addons are extensions that provide additional functionality to a Kubernetes cluster. They can be used to enhance security, monitoring, storage, or other aspects of your cluster.

            The `all` argument specifies that all available addons should be installed. The `--apiserver-bind-port` flag sets the port number (default is 6443) on which the Kubernetes API server will listen for incoming requests. By setting this flag during addon installation, you ensure that the addons are configured to communicate with the API server using the specified port.
        config: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `addon` subcommand, when used with `all`, installs and configures various optional features or addons for the cluster. Specifically, `--config` flag specifies that the configuration for these addons should be stored in a `kubeadm`-managed configuration directory. This means that any changes made to the addons will be persisted across master node reboots and can be easily managed with Kubernetes'' declaration-based configuration. Therefore, this command configures all available addons and stores their configurations in the `kubeadm` directory.'
        control-plane-endpoint: |-
            [AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The option `addon all --control-plane-endpoint` is an additional feature provided by Kubeadm, which installs and configures various addons for the control plane nodes.

            Specifically, this option sets up multiple addons at once, including:

            1. `kube-dns`: A DNS service for the cluster to resolve hostnames.
            2. `kube-proxy`: A network proxy that handles traffic between clients and the Kubernetes API server.
            3. `cert-manager`: An open-source, enterprise-grade certificate management solution for the cluster.
            4. `coredns` (already included in kube-dns): A highly performant DNS server which can be used in the most demanding environments.
            5. `kubernetes-cni`: Network plugins to manage network policies and pod communication within a Kubernetes cluster.

            These addons are essential for running a fully functional Kubernetes cluster, allowing services to be discovered via DNS, handling traffic to API servers securely, managing certificates for secure communication, and controlling network traffic between pods.
        feature-gates: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `addon` subcommand is used to install additional components and features in the cluster. The `all` argument specifies that all available addons should be installed. The `--feature-gates` flag enables specific experimental features that may not be enabled by default. By using `--feature-gates`, you can enable or disable certain advanced functionality, such as NetworkPolicy or CSI drivers. This command is typically used during initial cluster setup to ensure all desired addons and features are enabled.'
        image-repository: |-
            [AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `addon` subcommand is used to install and manage additional components, and the `all` argument specifies that all available addons should be installed.

            The `--image-repository` flag sets the Docker registry where the addon images are pulled from. By default, this is set to the Google Container Registry (gcr.io), but you can specify a different registry if needed. This flag ensures that when new addons are added or updated, they will be pulled from the specified image repository.
        kubeconfig: |-
            [AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `phase addon all --kubeconfig` argument is an optional flag that configures and installs various addons for the entire cluster.

            Addons are extensions that provide additional functionality to Kubernetes, such as load balancers, storage classes, or monitoring tools. By using `all`, this command will enable and configure all available addons for the cluster. The `--kubeconfig` flag specifies that the configuration files for the admin user should be created in the default location under `~/.kube/config`. This allows users to manage the cluster using the `kubectl` command-line tool with minimal setup.
        kubernetes-version: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster using kubeadm, a component of the Kubernetes toolkit. The `phase addon all --kubernetes-version` option specifies that all available addons (additional components that extend the functionality of the cluster) should be installed with the given Kubernetes version. Addons can include things like Calico for network policy management or Metrics Server for collecting and serving metrics. By using `all`, kubeadm will install all available addons at the specified Kubernetes version.'
        pod-network-cidr: '[AI] The command `kubeadm init phase addon all --pod-network-cidr` is used to install CIDR (IP address block) addons for managing Pod network overlays in a Kubernetes cluster managed by kubeadm. This command sets up the required networking components, allowing nodes to join the cluster and run applications with proper network communication between them. The `--pod-network-cidr` flag specifies the IP CIDR block used for assigning Pod IP addresses within the cluster.'
        service-cidr: |-
            [AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `addon` subcommand with the argument `all --service-cidr` installs and configures certain addons along with the main Kubernetes components.

            The `--service-cidr` flag sets the CIDR block (a range of IP addresses) for Kubernetes services within the cluster. The `all` argument specifies that all available addons will be installed, which in this case includes Flannel network plugin and other optional addons like Metrics Server, Dashboard, and StorageClass.

            By including the `--service-cidr` flag with a specific CIDR block value, you are allocating an IP address range for services to use within your cluster. This is important for proper networking between various Kubernetes components.
        service-dns-domain: '[AI] The `kubeadm init` command is used to bootstrap a Kubernetes cluster. The `phase addon all --service-dns-domain` flag enables and installs several Kubernetes addons, including the CoreDNS addon. CoreDNS is a DNS server for Kubernetes that automatically creates DNS entries for all services in the cluster using the specified domain (in this case, `--service-dns-domain`). This ensures that services within the cluster can be reached using their Kubernetes label selectors as hostnames instead of IP addresses.'
