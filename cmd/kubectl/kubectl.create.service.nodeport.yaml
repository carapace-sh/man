# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: nodeport NAME [--tcp=port:targetPort] [--dry-run=server|client|none]
description: Create a NodePort service
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --node-port=: Port used to expose the service on each node in a cluster.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --tcp*=: Port pairs can be specified as '<port>:<targetPort>'.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] The `kubectl create service nodeport` command is used to create a new Kubernetes Service of type NodePort. This means that the service will be accessible via a specific port on each node in the cluster. When you run this command, you need to provide a YAML manifest or use the `--from-file` option to specify the configuration file, which includes details like the API version, kind, metadata (name, labels), and selector for the targeted Pods. This command does not directly expose an external IP address but instead allows nodes in the cluster to access the service using the specified NodePort.'
    flag:
        allow-missing-template-keys: |-
            [AI] `kubectl create service nodeport` is a command used to create a NodePort service in Kubernetes using the `kubectl` tool. The `--allow-missing-template-keys` flag is an optional argument that allows creating resources even if there are missing keys or values in the YAML manifest file.

            When creating a Kubernetes resource, the YAML manifest file must be complete and valid. However, sometimes during configuration or development, keys might be accidentally omitted or left undefined. With the `--allow-missing-template-keys` flag, Kubernetes will still create the resource, marking any missing keys as unset instead of preventing the creation altogether.

            Using this flag can help streamline the development process by allowing for creating resources even when the configuration is not yet complete. However, be aware that using it may result in warnings and potential issues, as resources with missing keys might not function optimally or according to your intentions. It's always recommended to double-check and complete the configuration before deploying to a production environment.
        dry-run: |-
            [AI] `kubectl create service nodeport` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`, to create a new NodePort service in a Kubernetes cluster. A NodePort service exposes an application running on a set of nodes, assigning each node a unique port from the NodePort range (30000-32767 by default).

            The `--dry-run` flag is an optional argument that runs the command in "preview mode" without actually creating or modifying any resources. Instead, it outputs what would be created or modified if the command were run without the `--dry-run` flag. This allows you to see the YAML manifest or other output before executing the command in a production environment.
        field-manager: '[AI] `kubectl create service nodeport` is a command used to create a Kubernetes NodePort service. A NodePort service exposes a specific port on each node in the cluster where the service can be reached. The `--field-manager` flag is an optional argument that specifies the strategic merge patch or the rollout strategy for managing the changes to the underlying Kubernetes API objects. When you use `--field-manager`, it enables Canary and RollingUpdate strategies for your deployment, allowing for more granular control over updates in a cluster. With this flag, you can update the service gradually by updating nodes one at a time or by selecting a percentage of nodes to update first before rolling out to all nodes.'
        node-port: '[AI] The `kubectl create service nodeport` command creates a Kubernetes Service of type NodePort. This type of service exposes the application running on a set of nodes, by allocating a specific high-numbered port on each selected node and then mapping that port to the cluster IP. Clients can access the service by connecting to any node on the cluster using the NodePort number. This command does not create or deploy an application, it only sets up the service layer for accessing the application running on nodes in the cluster.'
        output: '[AI] `kubectl create service nodeport` is a command used to create a Kubernetes NodePort service. This type of service exposes an application running on a cluster using a specific node port. When you add `--output json` or `--output yaml` after the command, it will return the created service in either JSON or YAML format, respectively, instead of displaying the default output, which is a summary of the service''s creation status.'
        save-config: |-
            [AI] `kubectl create service nodeport` is a command used in Kubernetes to create a NodePort service. A NodePort service exposes a service on each Node's IP in a randomly chosen port.

            The `--save-config` flag saves the kubeconfig of the current context after creating the resource. It means that the configuration of the current context will be stored in the ~/.kube/config file, which can be useful for keeping track of changes made to your Kubernetes clusters or environments.
        show-managed-fields: '[AI] `kubectl create service nodeport` is a command used to create a Kubernetes NodePort service. This type of service exposes a specific port on each node in the cluster, allowing incoming traffic to be routed to the corresponding pod. The `--show-managed-fields` flag is an optional argument that displays the managed fields of the resource after it has been created. Managed fields are those that were set by Kubernetes during the creation process and cannot be modified directly. This flag helps in understanding the actual state of the resource including any additional metadata or annotations added by Kubernetes.'
        tcp: '[AI] `kubectl create service nodeport` is a command used in Kubernetes to create a NodePort service. This type of service exposes a specific port on each node in the cluster where the target pod is running, making it accessible from outside the cluster. The `--tcp` flag indicates that the service will handle TCP traffic only. When you run this command with a pod name as an argument, Kubernetes creates a NodePort service for that pod and assigns a free port number. Clients can then access the service using the node''s IP address and the assigned NodePort.'
        template: |-
            [AI] `kubectl create service nodeport` is a command used to create a NodePort service in Kubernetes using the kubectl tool. The `--template` option is used with custom YAML templates for generating dynamic manifests. When this option is specified, instead of creating a service from an existing YAML file, kubectl creates a new YAML template based on the provided arguments and renders it as output.

            The resulting NodePort service manifest includes fields like type `NodePort`, selector to target pods, port number for the NodePort, and metadata. By using this method, you can generate and create Kubernetes resources with dynamic values or complex structures that cannot be easily defined in static YAML files.
        validate: '[AI] `kubectl create service nodeport` is a command used to create a Kubernetes Service of type NodePort. The `--validate` flag that follows is an optional argument which requests Kubectl to perform validation checks on the provided YAML manifest file or arguments before actually creating the resource. This helps ensure the correctness and completeness of the configuration before deployment, reducing the likelihood of errors or inconsistencies in the cluster.'
