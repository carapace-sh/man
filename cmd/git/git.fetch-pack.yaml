# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fetch-pack
description: Receive missing objects from another repository
group: low-level synching
flags:
    --all: Fetch all remote refs
    --check-self-contained-and-connected: Output "connectivity-ok" if the received pack is self-contained and connected
    --deepen-relative: Argument --depth specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history
    --depth=: Limit fetching to ancestor-chains not longer than n
    --exec=: Same as --upload-pack=<git-upload-pack>
    --include-tag: If the remote side supports it, annotated tags objects will be downloaded on the same connection
    --no-progress: Do not show the progress
    --refetch: Skips negotiating commits with the server in order to fetch all matching objects
    --shallow-exclude=: Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag
    --shallow-since=: Deepen or shorten the history of a shallow repository to include all reachable commits after <date>
    --stdin: Take the list of refs from stdin, one per line
    --thin: Fetch a "thin" pack, which records objects in deltified form based on objects not included in the pack
    --upload-pack=: Use this to specify the path to git-upload-pack on the remote side, if is not found on your $PATH
    -k, --keep: Do not invoke git unpack-objects on received data, but create a single packfile out of it instead
    -q, --quiet: Pass -q flag to git unpack-objects; this makes the cloning process less verbose
    -v: Run verbosely
documentation:
    command: '[AI] `git fetch-pack` is a Git command used to retrieve and unpack packed refs from a remote repository into the local .git directory, without creating a separate branch or merging the changes. It''s an alternative to using both ''git fetch'' and ''git checkout'' in one step. This can be useful when working with older Git versions that don''t support the more common fetch-and-merge workflow.'
    flag:
        all: '[AI] `git fetch-pack --all` is a Git command used to fetch and optionally pack new commits from a remote repository into your local Git repository. It''s an alternative to using both `git fetch` and `git pack-repositories`. The `--all` option instructs Git to fetch and pack all branches in the specified remote repository instead of just the current branch. This can be useful for syncing an entire remote repository with your local one.'
        check-self-contained-and-connected: '[AI] `git fetch-pack --check-self-contained-and-connected` is a Git command used to fetch and update specific branches or commits from a remote repository into your local one. The `--check-self-contained-and-connected` option is an extra safety measure that ensures the fetched data is valid and self-contained, meaning all necessary objects referenced by the commits are present, and the fetch did not leave any dangling references. In simple terms, it checks if your local repository remains in a valid state after fetching new data from the remote.'
        deepen-relative: |-
            [AI] `git fetch-pack --deepen-relative` is a Git command used to update local shallow clones with missing or incomplete history. A shallow clone is a Git repository that only contains the current branch and its immediate history, while the full commit history of the project is stored on the remote server.

            The `--deepen-relative` flag tells Git to fetch the necessary missing commits to deepen the local repository's history relative to the currently checked-out branch. This command does not merge or apply any changes but only updates the local repository with deeper commit history, allowing users to continue working on their projects with a more complete version history.
        depth: '[AI] `git fetch-pack --depth <depth>` is a Git command used to fetch and optionally pack branches from a remote repository into local pack files, instead of creating full-sized refs or loose objects. The depth parameter specifies the number of commits to retrieve for each branch. A value of 1 means only the latest commit will be fetched. This command is useful when you want to minimize the amount of data transferred over the network or when working with low-bandwidth connections.'
        exec: '[AI] `git fetch-pack --exec` is a Git command used to fetch and unpack pack files from a remote repository, as well as execute a given command for each fetched and unpacked file. The main purpose of this command is to download only the differences between the local and remote repositories instead of cloning or pulling the entire repository again. The `--exec` option allows specifying a shell command to be run on each file after it has been unpacked, making it useful for automating certain tasks like applying patches or running tests.'
        include-tag: '[AI] `git fetch-pack --include-tag` is a Git command used to fetch and pack refs from a remote repository, along with their associated tags. This can be useful when working with repositories that have multiple local and remote branches, or when preparing to perform a release with specific tagged versions. By including the `--include-tag` option, Git will also download any tags that match the regular expression pattern given in the configuration file (by default, it fetches all tags starting with "v"). This command does not create local branches or merge remote changes; it only updates the list of available refs and tags for further use.'
        keep: '[AI] `git fetch-pack --keep` is a Git command used to retrieve and unpack pack files from a remote repository into the local repository. The `--keep` option tells Git not to delete the pack files after they have been unpacked, which can be useful when dealing with large repositories or unreliable network connections. This way, the pack files are kept locally for potential use in future fetches.'
        no-progress: '[AI] `git fetch-pack --no-progress` is a Git command used to transfer and unpack new commits from a remote repository into the local one without using progress bar or other interactive features. This command directly pulls the required pack files, extracts the needed data, and merges it with the local repository''s history. It''s an alternative to `git fetch` when you want to suppress the progress messages for any reason.'
        quiet: '[AI] `git fetch-pack --quiet` is a Git command used to fetch and optionally pack and update local branches with changes from a remote repository. The `--quiet` option suppresses all output except for error messages. This can be useful when running automated scripts or in background processes where you don''t need the detailed information that Git usually provides during fetching and updating.'
        refetch: |-
            [AI] `git fetch-pack --refetch` is a Git command used to update local branches with remote changes. It combines both `git fetch` and `git pack-receive` actions into one step.

            With `--refetch`, Git will not only download new references from the remote repository but also reset the local branch to match the latest version on the remote if there are any differences. This command is useful when your local and remote branches have diverged significantly and you want to completely update your local branch with the latest changes from the remote.
        shallow-exclude: '[AI] `git fetch-pack --shallow-exclude` is a Git command used to perform a shallow fetch of a Git repository over a network, where only the current branch and its immediate history are downloaded instead of the entire repository history. The `--shallow-exclude` option is used to exclude specific branches or refs from being fetched shallow. This can be useful when you want to keep a local full repository but still fetch new commits for your current branch without having to download the entire history of other branches, thereby saving bandwidth and disk space.'
        shallow-since: '[AI] `git fetch-pack --shallow-since` is a Git command used to fetch specific commits from a remote repository without downloading the entire history. This command fetches commits that are newer than the one you specify with the `--shallow-since` option. The result is a shallow commit, which does not contain the full history but only the specified commits and their differences compared to the local branch. This can be useful when dealing with large repositories or when you only need recent changes.'
        stdin: '[AI] `git fetch-pack --stdin` is a Git command used to receive and unpack pack files from a remote repository into the local repository. The `--stdin` option enables reading pack data from standard input instead of a file, which makes it suitable for use in scripts or over pipes. This command updates the local Fetch refs without creating new branches, allowing you to manually merge changes using other tools or workflows.'
        thin: '[AI] `git fetch-pack --thin` is a Git command used to perform a shallow clone or fetch of a Git repository. Shallow clones only download the history up to a certain point (usually the most recent commit), leaving out the entire branch history that lies beyond it. This can help reduce the disk space and download size required for the repository. The `--thin` option optimizes the shallow clone by storing only the differences between commits, instead of the full history for each commit. This results in even less storage usage compared to a regular shallow clone.'
        upload-pack: '[AI] `git fetch-pack --upload-pack` is a Git command used for transferring and updating specific branches or commits from a remote repository to a local one. Unlike regular `git fetch`, which downloads all the latest data from the remote, this command does an incremental update by only transferring the required pack files. The `--upload-pack` option enables your local repository to act as an upload-pack server and send your changes back to the remote when someone fetches or pulls from it. This is particularly useful in setups where bandwidth is limited or when working with large repositories, as it minimizes the amount of data that needs to be transferred.'
        v: '[AI] `git fetch-pack -v` is a Git command used for fetching and packing commits from a remote repository into local pack files, which can be faster than the regular fetching process when dealing with large repositories. The `-v` flag stands for "verbose," meaning it displays detailed information about the downloaded pack files during the fetch process.'
