# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]
description: Update the labels on a resource
group: settings
flags:
    --all: Select all resources, in the namespace of the specified resource types
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --field-selector=: Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
    --list: If true, display the labels for a given resource.
    --local: If true, label will NOT contact api-server but run locally.
    --overwrite: If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --resource-version=: If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -A, --all-namespaces: If true, check the specified action in all namespaces.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to update the labels
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: |-
        [AI] `kubectl label` is a command used with Kubernetes to manage metadata labels assigned to objects in a cluster. With this command, you can add, edit, or remove key-value pairs as labels for resources such as Pods, Services, or Namespaces. For example:

        * To set a new label on a Pod: `kubectl label pod <pod-name> <key>=<value>`
        * To add a label to multiple Pods: `kubectl label pods <selector> <key>=<value>`
        * To get the labels of an object: `kubectl describe <resource> <name> | grep "^  Labels:" | sed 's/^ *//' | base64 --decode`

        These are just a few examples, but you can use the command to manipulate labels in various ways for efficient management of your Kubernetes resources.
    flag:
        all: '[AI] `kubectl label --all` is a command used with Kubernetes'' `kubectl` tool to modify labels on all objects within a Kubernetes cluster. The "--all" flag is used in conjunction with the "label" subcommand, and it applies the specified label changes to all objects of any kind across the entire cluster. This command can be useful for implementing or modifying labels on a large scale. However, be aware that using `--all` without caution may lead to unintended consequences, so always double-check before executing this command.'
        all-namespaces: '[AI] `kubectl label --all-namespaces` is a command used with Kubernetes'' `kubectl` tool to manage and modify labels on objects across all namespaces in a cluster. Labels are key-value pairs that provide metadata for identifying and organizing Kubernetes resources, such as pods or services. Using the `--all-namespaces` flag allows you to apply label modifications to every namespace within your cluster instead of only modifying labels in the current namespace by default.'
        allow-missing-template-keys: '[AI] `kubectl label --allow-missing-template-keys` is a command-line option used with Kubernetes'' `kubectl` tool to update labels on resources in a cluster. With this flag enabled, it allows the use of templates or expressions in label values without requiring all keys to be defined. In other words, if a key is missing in the label value, it will not prevent the update operation from being executed. This can be useful when managing complex label configurations where keys may be dynamically generated or missing, but the overall intent of the labels remains consistent.'
        dry-run: '[AI] `kubectl label --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows you to test and preview changes to labels of resources in your cluster before actually applying them. The `--dry-run` option simulates the execution of a command without actually making any modifications to the objects in your cluster. When used with labeling, it shows you what the final state of those objects would be if the command was run without the `--dry-run` flag.'
        field-manager: '[AI] The `kubectl label` command with the `--field-manager` flag is used to manage labels in Kubernetes with a specific label selector known as a Field Manager. When you use this flag, you''re instructing kubectl to update or delete labels for resources that match a specific field manager. A field manager is an extension to Kubernetes allowing developers to define custom controllers for managing custom resources and their associated labels. The `--field-manager` flag helps in maintaining consistency across your cluster by ensuring that the labels on resources managed by a particular field manager are updated as needed.'
        field-selector: '[AI] `kubectl label --field-selector` is a command used with the Kubernetes CLI (kubectl) to selectively update or query labels on objects in a Kubernetes cluster based on specific label selector expressions defined by the `--field-selector` flag. This can help filter and manage resources efficiently, for example, to update or delete labels only for certain subsets of objects. The argument to `--field-selector` is a label query expression using JSON paths. For instance, `--field-selector=''metadata.labels.app=="my-app"` would select only the objects with the ''app'' label set to ''my-app''.'
        filename: '[AI] The `kubectl label --filename` command is used to apply or update labels on Kubernetes resources based on a file containing key-value pairs. The file should be in the format of key1=value1,key2=value2 format and named as specified by the `--filename` flag. This command modifies the labels of the selected resources within the current context.'
        kustomize: '[AI] `kubectl label --kustomize` is a command used with Kubernetes'' `kubectl` tool to manage object labels using Kustomize, a configuration management tool for Kubernetes. The `--kustomize` flag instructs `kubectl` to use a Kustomize configuration file instead of applying commands directly. This allows for the declaration and manipulation of labels in a declarative manner as part of a larger configuration.'
        list: '[AI] `kubectl label --list` is a command used with Kubernetes to list all available labels across all objects in the current namespace. The command returns key-value pairs that represent the labels assigned to various resources like pods, services, and nodes. It provides a quick overview of the labels in use within the cluster, which can be useful for label management and selectors'' understanding.'
        local: '[AI] `kubectl label --local` is a command used with the Kubernetes CLI (kubectl) to update labels of one or more resources in the current cluster, without propagating the changes to child resources. The `--local` flag modifies only the object being targeted directly and does not affect any descendants within the resource hierarchy. This is useful for making temporary or experimental label modifications without impacting other resources dependent on those labels.'
        output: |-
            [AI] `kubectl label --output` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to modify or get labels of Kubernetes objects, such as pods or services. The `--output` flag specifies how the output should be formatted. It can be set to "json", "yaml", or "wide" for displaying additional columns, among other formats. For instance, if you want to see the labels of a pod in JSON format, use:

            ```bash
            kubectl describe pod <pod-name> --selector <label-key>=<label-value> --output=json | jq '.metadata.labels'
            ```

            Replace `<pod-name>`, `<label-key>`, and `<label-value>` with the appropriate values. This will output the JSON representation of the labels for that specific pod.
        overwrite: '[AI] `kubectl label --overwrite` is a command used with Kubernetes'' `kubectl` tool to update existing labels on resources in a cluster. The `--overwrite` flag allows for replacing all existing labels, rather than just adding or modifying them, ensuring that the specified key-value pairs become the sole labels on the selected resource. This can be useful when you want to completely change the labeling of a resource without having to delete and recreate it.'
        record: |-
            [AI] `kubectl label --record` is a command used with Kubernetes' `kubectl` tool to update labels on Kubernetes resources in a record mode. In record mode, if a key already exists in the resource's metadata under the specified label key, its value will be updated instead of creating a new key-value pair. This is useful when you want to make sure that only one label with a specific key exists and its value should be updated. The general syntax for using this command is:

            ```bash
            kubectl label [TYPE]/[NAME] KEY=VALUE --record
            ```

            Replace `[TYPE]`, `[NAME]`, `KEY`, and `VALUE` with the appropriate values for your use case.
        recursive: '[AI] `kubectl label --recursive` is a command used with Kubernetes'' `kubectl` tool to recursively update labels in a namespace. It applies labels not only to the objects directly matched by the selectors but also to their descendants in the Kubernetes object hierarchy. This means that if you label an object with this command, its containers, pods, replica sets, deployments, and other related resources will also receive the specified labels. It''s particularly useful for applying consistent labels across multiple levels of resource abstractions within a namespace.'
        resource-version: '[AI] The `kubectl label` command with the `--resource-version` flag is used to update labels on Kubernetes resources while ensuring that the label changes do not conflict with ongoing or pending operations on the resource. This flag ensures that the new label values are applied only after any conflicts have been resolved, maintaining the desired state of your Kubernetes cluster. It''s a way to ensure consistency and prevent potential data loss when making updates to labels on your resources.'
        selector: '[AI] `kubectl label --selector` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows filtering and managing resources based on their labels. The `--selector` option takes a label query as an argument, which specifies a label key-value pair to select resources with. For example, `--selector=''app=nginx''` will return all resources labeled with the key ''app'' and value ''nginx''. The command can be used for various operations like adding, removing or updating labels on selected resources in a cluster.'
        show-managed-fields: '[AI] `kubectl label --show-managed-fields` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command displays managed fields when querying labels on Kubernetes resources. Managed fields are labels or annotations that are automatically maintained by the Kubernetes API server based on the resource''s metadata and its behavior under different conditions such as replicas, rollouts, or deletions. In summary, this command helps you understand the labels with special meaning in Kubernetes and their associated behavior.'
        template: '[AI] `kubectl label --template` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`, to apply labels to resources based on a given template expression. The template allows for dynamic and complex label values using Mustache templating syntax. This functionality can be useful for automating labeling tasks or implementing labeling strategies that require dynamic values. For example, you could use it to set a label with the current timestamp or the name of an environment.'
