# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [OPTIONS] IMAGE [COMMAND] [ARG...]
description: Create a new service
flags:
    --cap-add=: Add Linux capabilities
    --cap-drop=: Drop Linux capabilities
    --config=: Specify configurations to expose to the service
    --constraint=: Placement constraints
    --container-label=: Container labels
    --credential-spec=: Credential spec for managed service account (Windows only)
    --dns-option=: Set DNS options
    --dns-search=: Set custom DNS search domains
    --dns=: Set custom DNS servers
    --endpoint-mode=: Endpoint mode (vip or dnsrr)
    --entrypoint=: Overwrite the default ENTRYPOINT of the image
    --env-file=: Read in a file of environment variables
    --generic-resource=: User defined resources
    --group=: Set one or more supplementary user groups for the container
    --health-cmd=: Command to run to check health
    --health-interval=: Time between running the check (ms|s|m|h)
    --health-retries=: Consecutive failures needed to report unhealthy
    --health-start-period=: Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)
    --health-timeout=: Maximum time to allow one check to run (ms|s|m|h)
    --host=: Set one or more custom host-to-IP mappings (host:ip)
    --hostname=: Container hostname
    --init: Use an init inside each service container to forward signals and reap processes
    --isolation=: Service container isolation mode
    --limit-cpu=: Limit CPUs
    --limit-memory=: Limit Memory
    --limit-pids=: Limit maximum number of processes (default 0 = unlimited)
    --log-driver=: Logging driver for service
    --log-opt=: Logging driver options
    --max-concurrent=: Number of job tasks to run concurrently (default equal to --replicas)
    --mode=: Service mode ("replicated", "global", "replicated-job", "global-job")
    --mount=: Attach a filesystem mount to the service
    --name=: Service name
    --network=: Network attachments
    --no-healthcheck: Disable any container-specified HEALTHCHECK
    --no-resolve-image: Do not query the registry to resolve image digest and supported platforms
    --placement-pref=: Add a placement preference
    --read-only: Mount the container's root filesystem as read only
    --replicas-max-per-node=: Maximum number of tasks per node (default 0 = unlimited)
    --replicas=: Number of tasks
    --reserve-cpu=: Reserve CPUs
    --reserve-memory=: Reserve Memory
    --restart-condition=: Restart when condition is met ("none", "on-failure", "any") (default "any")
    --restart-delay=: Delay between restart attempts (ns|us|ms|s|m|h) (default 5s)
    --restart-max-attempts=: Maximum number of restarts before giving up
    --restart-window=: Window used to evaluate the restart policy (ns|us|ms|s|m|h)
    --rollback-delay=: Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s)
    --rollback-failure-action=: Action on rollback failure ("pause", "continue") (default "pause")
    --rollback-max-failure-ratio=: Failure rate to tolerate during a rollback (default 0)
    --rollback-monitor=: Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s)
    --rollback-order=: Rollback order ("start-first", "stop-first") (default "stop-first")
    --rollback-parallelism=: Maximum number of tasks rolled back simultaneously (0 to roll back all at once)
    --secret=: Specify secrets to expose to the service
    --stop-grace-period=: Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s)
    --stop-signal=: Signal to stop the container
    --sysctl=: Sysctl options
    --ulimit=: Ulimit options
    --update-delay=: Delay between updates (ns|us|ms|s|m|h) (default 0s)
    --update-failure-action=: Action on update failure ("pause", "continue", "rollback") (default "pause")
    --update-max-failure-ratio=: Failure rate to tolerate during an update (default 0)
    --update-monitor=: Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s)
    --update-order=: Update order ("start-first", "stop-first") (default "stop-first")
    --update-parallelism=: Maximum number of tasks updated simultaneously (0 to update all at once)
    --with-registry-auth: Send registry authentication details to swarm agents
    -d, --detach: Exit immediately instead of waiting for the service to converge
    -e, --env=: Set environment variables
    -l, --label=: Service labels
    -p, --publish=: Publish a port as a node port
    -q, --quiet: Suppress progress output
    -t, --tty: Allocate a pseudo-TTY
    -u, --user=: 'Username or UID (format: <name|uid>[:<group|gid>])'
    -w, --workdir=: Working directory inside the container
documentation:
    command: '[AI] `docker service create` is a command used in Docker Swarm mode to create and deploy a new service. It deploys a specified image, sets configuration options like replicas, ports, and constraints, and registers the service with the Docker Swarm manager. This command is essential for scaling and managing microservices within a Docker Swarm environment.'
    flag:
        cap-add: '[AI] `docker service create --cap-add` is a command used in Docker Swarm mode to assign Linux Capabilities to a service when it''s created. Capabilities are fine-grained permissions that allow containers to perform specific system calls. By using the `--cap-add` option, you can add one or more capabilities for a service, enhancing its security isolation and functionalities. For example, if you need a service to be able to access raw sockets, you can use `--cap-add=NET_RAW`.'
        cap-drop: '[AI] `docker service create --cap-drop` is a command used in Docker Swarm mode to create a new service with dropped Linux capabilities. Capabilities are permissions that a container can have beyond what the default user is allowed to do. By using `--cap-drop <capability>`, you can remove specific capabilities from the container, increasing its security by limiting what actions it can perform. This can be useful in security-sensitive environments where fine-grained control over container privileges is required. Note that care must be taken when dropping capabilities as some are essential for normal operation.'
        config: '[AI] `docker service create --config` is a command used in Docker Swarm mode to create a new service with a custom configuration file. The `--config` flag specifies the path to the JSON or YAML format configuration file that defines various parameters for the service such as replicas, ports, networking, and update strategy. This allows for more fine-grained control over the service''s behavior when creating it in Docker Swarm.'
        constraint: '[AI] `docker service create --constraint` is a command used in Docker Swarm mode to define constraints for the placement of services. Constraints allow you to specify rules for where Docker should run and place your services based on factors like nodes labels, availability, or health. The flag takes a JSON-formatted string as an argument describing the constraint rules. For example: `--constraint ''node.label.com.myorg=production''` will only deploy the service to nodes with the label "com.myorg=production". This can help ensure services are deployed on specific nodes or in specific environments, improving your application''s availability and security.'
        container-label: '[AI] `docker service create` is a command used in Docker Swarm mode to create and manage replicated services. The `--container-label` option sets metadata key-value pairs on the created containers. These labels can be used for filtering, querying, or selecting tasks based on their associated containers. Labels are key-value pairs that provide additional information about containers and services. They can be useful for managing large clusters with many services and containers.'
        credential-spec: |-
            [AI] `docker service create --credential-spec` is a command used to create a Docker Swarm service with specific credential settings. The `--credential-spec` option allows you to define the type of credentials and their encryption details. This can be useful in securing access to services running on a Docker Swarm cluster by encrypting the credentials and limiting access only to authorized nodes or services.

            For example, `--credential-spec file:///path/to/mycerts/ca.crt file:///path/to/mycerts/client.crt file:///path/to/mycerts/client.key` sets up the credential to use a client certificate and key for authentication, while `--credential-spec file:///path/to/mykeys/mykey.json` can be used for a JSON key file. The specified files must exist on the node where you run the `docker service create` command.
        detach: '[AI] `docker service create --detach` is a command used in Docker Swarm to create and run a new service in detached mode. Detached mode, also known as daemon mode, runs the container in the background without attaching it to the console output. This means that the container will continue running even after the command that started it has finished executing. The `--detach` flag is optional, as Docker Swarm services are created in detached mode by default when not explicitly specified otherwise.'
        dns: '[AI] `docker service create --dns` is a command used with Docker Swarm to create and configure a new service. The `--dns` flag sets the DNS server(s) for the newly created network that will be associated with the service. By default, Docker Swarm uses the native DNS server on each node in the swarm. However, you can use this flag to specify alternative DNS servers if needed. This can be useful in scenarios where you want to ensure specific DNS resolution for your services within the swarm.'
        dns-option: '[AI] The `docker service create --dns-option` command is used to configure Docker Swarm service discovery by setting custom DNS options. This allows services to be discovered using names other than their service name or network alias. For example, you can use `--dns-option=label:myapp=myservice` to make the service discoverable under the label name `myapp` instead of its service name. It is important to note that this option requires a Swarm mode cluster and is not applicable to standalone Docker containers or other networking modes.'
        dns-search: '[AI] The `docker service create` command is used to create a new Docker service in Swarm mode. The `--dns-search` option sets custom search domains for DNS queries made by the Docker network. This means that when containers created from this service make DNS queries, they will check the specified domains before the default ones. It can be helpful for environments where you want to use a custom DNS setup or have multiple services with similar names. For example: `docker service create --name my-service --publish 80:80 --dns-search mydomain.com my-image`.'
        endpoint-mode: |-
            [AI] `docker service create` is a command used to create and manage Docker Swarm services. The `--endpoint-mode` option specifies how Docker should expose and distribute the service's endpoints. There are two modes: "dns" and "vip".

            In "dns" mode (the default), Docker creates a unique DNS record for each replica of the service, allowing services to communicate with each other using their service names as DNS labels. The load balancing is done by DNS resolution.

            In "vip" mode, Docker assigns a virtual IP address to the service and configures the network routing table to route incoming traffic to that IP. This creates a stable IP address for the service, but does not provide automatic load balancing like DNS mode.
        entrypoint: '[AI] `docker service create` is a command used in Docker Swarm mode to create and deploy a new service. The `--entrypoint` option specifies the command that will be run when the service is started. This command overrides the default command for the image being used, allowing customization of how the container runs. For example, `docker service create --name my-service --image my-image:latest --entrypoint "/my-custom-script.sh" my-service`. This will run `/my-custom-script.sh` instead of the default command when `my-image:latest` is started as a service in the Swarm cluster.'
        env: '[AI] `docker service create --env` is a command used in Docker Swarm mode to create and define a new service with custom environment variables. The `--env` option allows you to set key-value pairs as environment variables for the container instances of the created service. These variables can be later accessed within the containers or used by other services or external applications interacting with the service.'
        env-file: '[AI] `docker service create --env-file` is a command used in Docker Swarm mode to create and deploy a new service with custom environment variables. The `--env-file` option specifies the path to a file containing key-value pairs for the desired environment variables. These variables will be set for all replicas of the created service.'
        generic-resource: '[AI] `docker service create --generic-resources` is a command used in Docker Swarm mode to create and define a new service with one or more generic resources. A generic resource is a config file that defines custom configurations for the service, such as environment variables or network settings. By using the `--generic-resources` flag, you can specify one or multiple configuration files in the `--publish-resolved` format when creating a new Docker service. This allows for more flexible and dynamic management of services by decoupling the definition of configurations from the service definition itself.'
        group: '[AI] The `docker service create --publish` command is used to create and publish a new Docker service in Swarm mode. The `--group` flag specifies which existing service this new service should be added to, creating or joining a specific service group if it exists. This allows for better organization and management of services within the Swarm cluster.'
        health-cmd: '[AI] The `docker service create --health-cmd` command is used to configure a health check for a Docker Swarm service. A health check is a script or command that Docker can use to periodically assess the status of a container and determine if it''s running correctly. The `--health-cmd` option allows you to specify the command that will be used as the health check. This command should return a 0 exit code when the service is healthy, and a non-zero exit code when the service is unhealthy. This helps Swarm keep your services running by automatically restarting containers if they fail the health check.'
        health-interval: '[AI] The `docker service create` command with the `--health-interval` flag is used to configure the interval at which Docker Swarm checks the health of a service. This flag takes a time value in seconds, and specifies how often Docker should check the service''s containers for signs of liveness or readiness. If a container fails the health check, Docker Swarm can take action, such as restarting the container or marking the service as unhealthy. This ensures that your services remain responsive and available in your Docker Swarm cluster.'
        health-retries: '[AI] `docker service create --health-retries` is a command used in Docker Swarm to create and configure a new service with customized health checking settings. The `--health-retries` flag sets the number of times (in failure) that Docker will attempt to probe the container before considering it unhealthy. This can help ensure that temporary issues do not cause unnecessary service disruption, or provide an early warning if a container consistently fails health checks.'
        health-start-period: '[AI] `docker service create --health-start-period` is an option used when creating a Docker Swarm service. It sets the length of time (in seconds) that a container is given to become healthy and start sending replicas'' status reports as "running" before being marked as unhealthy. If a container fails to become healthy within this period, Docker Swarm will consider it as failed and will attempt to recreate it. This option helps ensure that only containers that are running properly are reported as healthy.'
        health-timeout: '[AI] The `docker service create` command is used to create and run Docker Swarm services. The `--health-timeout` flag sets a time limit for how long Docker should wait before checking the health of a service. If a container within the service fails to respond during this time, it will be marked as unhealthy and Docker Swarm will attempt to recreate it to maintain the desired number of replicas for the service. The flag value is in seconds. For example, `--health-timeout=30s` sets a 30 second timeout before checking container health.'
        host: '[AI] The `docker service create --host` option is used when creating a Docker Swarm service to specify that the container''s network interface will be assigned to the Swarm''s overlay network and made reachable through its service name or ID, rather than being isolated on the node where it runs. In other words, this option makes the container accessible as a service across the Swarm cluster instead of being a standalone container.'
        hostname: '[AI] `docker service create --hostname` is a command used with Docker Swarm to set a custom hostname for a newly created service. When creating a service, you can use this option followed by the desired hostname to override the default automatically assigned one. This can be useful when you want to give a specific name to a service for easier identification and management within your swarm cluster.'
        init: '[AI] The `docker service create --init` command is used to create a Docker Swarm service with an additional init container. An init container runs before the main container and sets up the environment for it, ensuring that the service starts correctly. The `--init` flag instructs Docker to use this init container when creating the service. This is particularly useful in scenarios where setting up the environment or dependencies for the main container requires additional steps beyond just pulling the image.'
        isolation: |-
            [AI] `docker service create` is a command used to create and manage Docker Swarm services. The `--isolation` option specifies the security isolation level for the container.

            There are three isolation levels: default, process, and private.

            1. Default (no option or using `--isolation=default`): The container shares the same kernel and network stack as the Docker daemon, providing minimal isolation. This is the least secure option but offers better performance since it doesn't require extra system calls to communicate with the host.

            2. Process: The container runs in its own process namespace, providing more security than default as each container has its isolated PID namespace and is not visible to other containers or the host. It also provides an additional layer of security by not allowing containers to access or manipulate the host's filesystem. Use `--isolation=process` for this option.

            3. Private: This is the most secure isolation level as it combines process and user namespaces, creating a completely isolated environment for each container. It runs in its own PID namespace and also has an isolated UID/GID, making it impossible for one container to access or manipulate another container's data or filesystem. Use `--isolation=private` for this option.

            In summary, the `docker service create --isolation` option lets you choose the level of isolation for your Docker Swarm services when creating them. This can help provide additional security and control over how containers interact with one another and the host system.
        label: '[AI] `docker service create` is a command used to create and manage services in Docker Swarm mode. The `--label` option sets metadata keys and values on the created service. These labels can be used for filtering, querying, or organizing services. For example: `docker service create --name my-service --label app=my-app my-image`. This command creates a service named "my-service" with an associated label `app=my-app`, which can later be queried using the Docker Swarm API or CLI.'
        limit-cpu: '[AI] `docker service create` is a command used to create and manage services in Docker Swarm mode. The `--limit-cpu` option sets a CPU usage limit for the container. This means that the Docker Swarm manager will ensure that no single container using this service exceeds the specified CPU limit, helping to prevent containers from consuming excess resources. The syntax is `docker service create [SERVICE_NAME] --publish [PUBLISHED_PORT]:[TARGET_PORT] --limit-cpu <CPU_LIMIT> [IMAGE]`. For example, `docker service create myservice --publish 80:80 --limit-cpu 500m myimage`.'
        limit-memory: '[AI] The `docker service create` command is used to create and manage Docker Swarm services. The `--limit-memory` flag sets a memory limit for the containers running in that service. By specifying a value, you restrict the amount of memory each container can use, which helps prevent containers from using excessive resources, improving overall system stability. The value is typically provided as a size (e.g., "500mb" or "1gb"). If not set, Docker does not impose any memory limit on containers in the service by default.'
        limit-pids: '[AI] The `docker service create` command is used to create and manage Docker Swarm services. The `--limit-pids` flag sets a limit on the maximum number of processes that can be run by a single container in the service. This can be useful for resource management or to prevent containers from monopolizing system resources. For example, `docker service create --name myservice --image myimage:latest --limit-pids 10` would create a service named "myservice" with the specified image and limit the container to run at most 10 processes.'
        log-driver: '[AI] The `docker service create` command is used to create and configure a new Docker Swarm service. The `--log-driver` option sets the logging driver for the service. Logging drivers determine how logs are collected, stored, and forwarded from containers in a Swarm mode cluster. By setting `--log-driver`, you can specify which logging driver to use for the service, such as "json-file", "syslog", "gelf", or others. This option allows you to manage and centralize your logs effectively in a Docker Swarm environment.'
        log-opt: '[AI] `docker service create` is a command used to create and manage Docker Swarm services. The `--log-opt` flag is an option that can be passed when creating a service to configure logging settings for the service''s containers. Specifically, it allows setting the log driver and other log options such as max-size, max-file, and label. For example, `--log-opt type=json --log-opt max-size=10m` sets the log driver to json and maximum log file size to 10 megabytes.'
        max-concurrent: '[AI] The `docker service create --max-concurrent` command is used to configure the maximum number of concurrent tasks for a Docker Swarm service. This means that only this specified number of tasks can run at the same time for the given service instance. It helps in managing and controlling resource usage by preventing the creation of excessive tasks, ensuring optimal resource utilization and avoiding potential overloading of the system.'
        mode: |-
            [AI] `docker service create --mode` is a command used with Docker Swarm to create and define a new service. The `--mode` option specifies the replication and placement mode for the service.

            Here are some common modes:

            * `global` (default): The service runs on all available nodes in the swarm.
            * `replicated`: The service is replicated across multiple nodes, with a specified number of replicas.
            * `stateful`: The service maintains its data and state across node failures, and its ports are published for external access.
            * `global-stateful`: Combines both global and stateful modes, meaning the service runs on all available nodes and also maintains its data and state.

            These modes allow you to configure how your Docker services should be deployed within a Swarm environment.
        mount: '[AI] `docker service create --mount` is a command used in Docker Swarm mode to create a new service with specified mount points. When creating a service, you can use the `--mount` option to define one or more mount configurations. Each configuration consists of a source and a target. The source can be an external file system path, a Docker volume name, or another service''s published port. The target is the mount point within the container. This command helps in managing persistent data, sharing files between containers, or accessing external resources when running your services in a Swarm cluster.'
        name: '[AI] `docker service create` is a command used in Docker Swarm mode to create and run a new service. The `--name` option is used to specify a custom name for the service. When you run `docker service create --name <service_name> <image:tag>`, it creates a new service using the specified image and assigns the given name to it. The service is then added to the Swarm''s overlay network and is managed by Docker Swarm for scaling, updating, and other management tasks.'
        network: '[AI] The `docker service create --network` command is used to create a new Docker service in Swarm mode with a specified networking configuration. The `--network` flag can be followed by the name of an existing network or by `overlay` or `bridge` to use built-in networks. This networking setup enables communication between containers within the same service, as well as between services connected on the same network.'
        no-healthcheck: '[AI] The `docker service create` command is used to create and manage Docker Swarm services. The `--no-healthcheck` option disables the automatic health checking of the service. This means that Docker will not send any probes to verify if the service is running or responsive, and the replicas will not be replaced based on their health status. Services with no health check are always considered healthy, even if they may actually be failing or unresponsive. It''s important to note that this flag should only be used when manually ensuring the service''s availability or in specific use cases where you don''t need automatic health checks.'
        no-resolve-image: '[AI] `docker service create --no-resolve-image` is a command used in Docker Swarm to create a new service without resolving the image first. When this option is set, Docker will not attempt to pull an image before creating the service. Instead, it assumes that the image is already present on the node where the service is being created. This can be useful when you want to ensure that the service is created as quickly as possible and don''t mind if some services fail due to missing images. Once all services have been created, you can use `docker service update` or `docker service create --constraint` to update the images on nodes where they are missing.'
        placement-pref: '[AI] `docker service create --placement-pref` is a command used in Docker Swarm mode to influence where a service is deployed. The `--placement-pref` option sets preferences for node selection, such as `node.label`, `node.role`, or `availability.healthy`. These preferences are taken into account when Docker Swarm schedules the service, allowing you to control which nodes your service runs on based on their labels or roles.'
        publish: |-
            [AI] `docker service create --publish` is a command used in Docker Swarm mode to create and publish a new service. With `--publish`, you specify which ports on the Swarm manager node(s) should be mapped to the container's published ports. This allows external traffic to access the container, making it publicly available. The general syntax is:

            ```bash
            docker service create --name <service_name> --image <image>:<tag> --publish-port <host_port>:<container_port> [--replicas <num_replicas>] <command>
            ```

            Replace `<service_name>`, `<image>:<tag>`, `<host_port>`, and `<container_port>` with the actual values for your service. Additional flags like `--replicas` and `<command>` can be added as needed.
        quiet: '[AI] The `docker service create --quiet` command is used to create a new Docker service in Swarm mode with minimal output. The the `--quiet` flag reduces the amount of output displayed during the service creation process. This can be useful for automating or scripting the creation of multiple services without being interrupted by excessive console output.'
        read-only: '[AI] `docker service create --read-only` is a command used with Docker Swarm to create a new service, but with the added flag `--read-only`, it mounts the container''s filesystem as read-only during runtime. This means that any containers created from this service will not be able to modify their files or directories once they have started. It is often used in scenarios where you want to ensure that your application stays in a specific state, such as in production environments or when running containerized databases.'
        replicas: '[AI] The `docker service create --replicas` command is used to create a new Docker service in Swarm mode with a specified number of replicas. The `--replicas` option sets the number of instances of a task that should be running for this service. For example, `docker service create --name my-service --image my-image:latest --replicas 5` creates a new service named "my-service" with 5 replicas based on the image "my-image:latest". This command ensures that the specified number of instances are running at all times, automatically scaling up or down as needed.'
        replicas-max-per-node: '[AI] The `docker service create` command is used to create and manage Docker Swarm services. The option `--replicas-max-per-node <number>` sets the maximum number of replicas that can be run on a single node in a Swarm cluster. By default, there is no limit. Using this option helps ensure resource utilization and avoid overloading individual nodes with too many containers.'
        reserve-cpu: '[AI] `docker service create --reserve-cpu` is a command used in Docker Swarm mode to create a new service with reserved CPU resources. This means that the specified amount of CPU will be guaranteed for the container, even if other containers on the same node require more resources. The flag takes an optional value representing the percentage or absolute number of CPU shares to reserve. For example, `--reserve-cpu 100` reserves one full CPU core for the service. This can be useful in ensuring consistent performance for critical services running in a containerized environment.'
        reserve-memory: '[AI] The `docker service create --reserve-memory` flag is used when creating a Docker service to ensure that a minimum amount of memory is reserved for the container. This flag helps prevent the operating system from reclaiming the memory assigned to Docker, ensuring stable operation of the containerized applications. By reserving memory, Docker can guarantee that the required resources are always available for the container, even in resource-constrained environments.'
        restart-condition: |-
            [AI] `docker service create` is a command used to create and manage Docker Swarm services. The `--restart-condition` flag configures how a service should be restarted based on its desired state:

            1. `any` (default): A service is restarted whenever any task fails, including tasks caused by updates or planned rollouts.
            2. `none`: A service will not be restarted unless explicitly instructed to do so using other Docker commands.
            3. `on-failure`: A service is only restarted when a task fails due to an error rather than being intentionally stopped during an update or rollout.
            4. `unless-stopped`: Similar to `on-failure`, but a service will also be restarted if it has been manually stopped using the Docker CLI or other means.
            5. `always`: A service is always restarted whenever its task is stopped, including during planned rollouts and updates.
        restart-delay: '[AI] `docker service create --restart-delay` is a command used with Docker Swarm to create and define a new service. The `--restart-delay` flag sets the amount of time (in seconds) that Docker should wait before attempting to restart a failed service. This can be useful for preventing unnecessary restarts, especially when dealing with services that may have transient errors or require some time to start up correctly. For example, `docker service create --name my-service --restart-policy on-failure --restart-delay 30s my-image:latest` would cause Docker to wait for 30 seconds before attempting to restart the "my-service" if it fails.'
        restart-max-attempts: '[AI] `docker service create` is a command used to create and manage Docker Swarm services. The `--restart-max-attempts` option sets the maximum number of times Docker will attempt to restart a service if it fails. If the specified number is reached, Docker will consider the service as failed. By default, this value is set to 3. This option allows you to configure the desired level of resilience for your services in case of failures.'
        restart-window: '[AI] The `docker service create` command is used to create and run Docker services, which are a way of managing multi-container applications in Swarm mode. The `--restart-window` option sets the time window after a failure when Docker will attempt to restart the service. For example, `--restart-window 15s` means that Docker will try to restart the service within 15 seconds of detecting a failure. If the container fails to start again during this period, Docker will consider it to have failed permanently and will not attempt to restart it further without human intervention.'
        rollback-delay: '[AI] The `docker service create --rollback-delay` flag is used to configure the delay before Docker Swarm attempts a rollback when a service update fails. This means that if an update causes issues, Docker will wait for the specified amount of time before attempting to revert back to the previous version of the service. The delay is set in seconds and can help prevent frequent rollbacks and instability in the system. It''s important to note that this flag only applies to updates that fail, and not successful ones.'
        rollback-failure-action: |-
            [AI] The `--rollback-failure-action` flag in the `docker service create` command is used to define the action Docker Swarm should take when a rollback fails during updates or reconfigurations of Docker services.

            With this option, you can choose one of three strategies: `none`, `pause`, or `restart`.

            - **none**: No action will be taken if the rollback fails. The failed task will remain in the error state, and it is up to you to investigate and resolve the issue manually.
            - **pause**: When this option is set, Docker Swarm will pause the service update process when a rollback fails. This provides an opportunity for you to examine the logs and diagnose any issues before continuing with the update or reverting back to the previous version.
            - **restart**: If this option is specified, Docker Swarm will automatically attempt to restart the failed task when a rollback fails. This may not be ideal if there's an underlying issue that requires manual intervention or investigation. However, it can help ensure service availability in cases where quick recovery from rollback failures is essential.

            In summary, `--rollback-failure-action` allows you to control how Docker Swarm responds when a rollback fails during updates or reconfigurations of services. The available options are `none`, `pause`, and `restart`.
        rollback-max-failure-ratio: '[AI] The `docker service create --rollback-max-failure-ratio` flag is used in Docker Swarm to configure the maximum number of failures allowed before a service is rolled back. It specifies the ratio of total tasks that can fail before Docker Swarm triggers a rollback to a previous healthy version of the service. For example, `--rollback-max-failure-ratio 0.3` allows up to 30% of tasks to fail before triggering a rollback. This flag helps ensure high availability and reliability of services in Docker Swarm by automatically rolling back to a known working version when issues arise.'
        rollback-monitor: '[AI] `docker service create` is a command used to create and deploy Docker Swarm services. The `--rollback-monitor` option enables automatic rollbacks in case of service failures or updates. With this flag, Docker will monitor the health and status of your service and if it detects an issue, it can automatically revert back to the previous version or configuration that was known to be working. This feature helps maintain high availability and reliability of your applications by minimizing downtime caused by failures or updates.'
        rollback-order: |-
            [AI] `docker service create` is a command used to create and deploy Docker Swarm services. The `--rollback-mode` option enables automatic rollbacks in case of failure, while `--rollback-order` specifies the order of rollbacks when multiple revisions exist.

            With `--rollback-order`, you can define which revision to roll back to first (for example, "1" or "2") in case of service failure, allowing you to control the sequence of rollbacks for managing risk and minimizing downtime.
        rollback-parallelism: '[AI] The `--rollback-parallelism` flag in Docker''s `service create` command is used to configure the degree of parallelism for rolling back a failed service update. It specifies the maximum number of tasks that can run during a rollback operation, ensuring that the service return to its previous stable state safely and incrementally. A higher value means more tasks will be rolled back at once, but it also increases the risk of data inconsistency or other issues. The default value is 1, meaning only one task will be rolled back at a time.'
        secret: '[AI] `docker service create --secret` is a command used in Docker Swarm to create a secret, which is an encrypted data blob that can be used as an environment variable or a config file for a Docker service. This command allows you to securely store sensitive information, such as API keys or passwords, and make them available to the services in your Swarm without exposing the data in plain text. The created secret is encrypted at rest and can only be accessed by the services that have been granted access through a Docker file or an environment variable.'
        stop-grace-period: '[AI] The `docker service create` command is used to create a new Docker service in Swarm mode. The `--stop-grace-period` flag sets the time duration (in seconds) after which a service will be forcefully stopped if it does not respond to signals sent during an update or removal of the service. This can help ensure that any running processes are gracefully shutdown before the container is terminated, but if set too low, could result in data loss or other issues. The default value is 30 seconds.'
        stop-signal: '[AI] `docker service create --stop-signal` is an option used when creating a Docker service with the Swarm mode. The `--stop-signal` flag specifies the signal to be sent to containers when the service is being stopped or updated. By default, the SIGTERM signal is used. However, you can use this option to change it to another signal like SIGKILL if required. This helps in controlling how services are terminated or updated in a Swarm environment.'
        sysctl: '[AI] `docker service create --sysctl` is a command used in Docker Swarm mode to create and run a new service with custom sysctls (system call settings). Sysctls are kernel parameters that can be adjusted for optimizing network or other system behavior. The `--sysctl` flag allows you to specify key=value pairs of the desired sysctl settings as arguments to this command. For example, `docker service create --name my-service --image my-image:latest --publish 8080 80 --sysctl net.ipv4.tcp_tw_reuse=1 --sysctl net.ipv4.ip_local_port_range="32768 61000"` will create a new service with the specified image, publish port, and set two sysctl parameters for TCP connection reuse and local port range.'
        tty: '[AI] The `docker service create --tty` command is used to create a new Docker service in Swarm mode with a TTY (Text Teletype) allocation for its container. A TTY provides a virtual terminal that allows for interactive input and output, making it suitable for running applications that require user interaction or input from the console. The `--tty` flag ensures that Docker allocates a TTY when creating the service and starting the container associated with it.'
        ulimit: '[AI] The `docker service create --ulimit` command is used to set User Limit (ULIMIT) restrictions when creating a Docker service in Swarm mode. ULIMIT limits can be set for individual containers in a service to control the amount of resources they can consume, such as CPU usage or memory allocation. This command helps ensure that containerized applications run efficiently and don''t exceed resource constraints that could impact other services or the host system itself.'
        update-delay: |-
            [AI] The `--update-delay` flag in Docker's `service create` command is used to configure the delay before a service is updated or replicated. This helps prevent rolling updates from occurring too quickly, which could potentially lead to downtime or instability in your Docker environment.

            When you run a `docker service create` command, by default Docker will perform an immediate update of the service. However, you can use the `--update-delay` flag to specify a delay in seconds before the update is initiated. For example, `--update-delay 30s` would cause Docker to wait 30 seconds before updating or replicating the service. This can be useful if you have a complex application with dependencies that need time to spin up or if you want to stagger updates across multiple instances of a service to reduce the impact on your system.
        update-failure-action: |-
            [AI] `docker service create --update-failure-mode` is an option used with Docker Swarm to configure how a replicated service should behave when an update fails. The possible values are:

            1. `rollback`: When an update fails, Docker will roll back to the previous healthy version of the service.
            2. `pause`: When an update fails, the service is paused and no new tasks are scheduled. The user can then investigate and manually resume the update.
            3. `fail` (default): When an update fails, the service is stopped and the tasks associated with it are terminated. This can be useful in cases where a failed update indicates that the old version should not be running anymore.
        update-max-failure-ratio: '[AI] `docker service create --update-max-failure-ratio` is a command used in Docker Swarm to update the maximum number of failures allowed before a service is considered failed. The flag sets the ratio as a decimal number, for example `--update-max-failure-ratio=0.5` allows up to 50% failure before considering the service failed and taking action like restarting containers or creating replicas. This can be useful in managing resilient services and minimizing downtime during updates or restarts.'
        update-monitor: '[AI] The `docker service create --update-monitor` command is used to create or update a Docker Swarm service and enable the update monitoring feature. When enabled, the service will be periodically checked by the swarm manager for potential updates, ensuring that the service remains running on the most recent image version. This command helps maintain a consistent and updated service across your Docker Swarm cluster.'
        update-order: |-
            [AI] The `docker service create --update-order` command is used to specify the update ordering strategy for Docker Swarm services. This option determines the order in which services are updated when a new version is deployed. There are three strategies: "rolling-update" (the default), "rolling-replace," and "global-upgrade."

            In a rolling update, services are updated one at a time while keeping enough replicas running to ensure continuous availability. In a rolling replace, all existing instances of a service are replaced with new ones in one go. Global upgrade updates all the services of a particular task template across the entire swarm at once. This option helps maintain desired state and manage service updates efficiently within Docker Swarm environments.
        update-parallelism: '[AI] `docker service create --update-parallelism` is a command used in Docker Swarm to create and update services with custom parallelism settings for rolling updates. Parallelism refers to the number of tasks that can be updated at the same time during a service update. By default, Docker Swarm uses a rolling update strategy with one task being updated at a time. However, `--update-parallelism` flag allows specifying a custom number of tasks to be updated in parallel, improving the overall update speed and resilience of your services. The flag accepts an integer value representing the desired degree of parallelism.'
        user: '[AI] The `--user` option in the `docker service create` command sets the user account under which a Docker service runs. It specifies a user name or UID and GID, allowing you to customize the container''s security context. Using this flag ensures that the created service will run with the specified user instead of the default root user. This can be helpful for running services as non-root users for improved security or compliance purposes.'
        with-registry-auth: '[AI] `docker service create --with-registry-auth` is a command used in Docker Swarm mode to create a new service with an image that requires registry authentication to pull. The `--with-registry-auth` flag indicates that a `docker swarm join token` file, which contains the necessary credentials for accessing a Docker registry, should be passed as an argument to the command. This allows the service to authentically pull its image from the specified registry during deployment.'
        workdir: '[AI] `docker service create` is a command used to create and deploy Docker Swarm services. The `--workdir` option sets the working directory for containers in the service. This means that when containers are started from the service, they will begin with this directory as their current working directory. By default, Docker sets the working directory to "/" (root). Setting `--workdir` can be useful when you need to ensure consistency across multiple containers in a service or for applications that require a specific working directory structure.'
