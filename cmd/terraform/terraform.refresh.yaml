# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: refresh [options]
description: Update the state to match remote systems
flags:
    -compact-warnings: show warnings in a more compact form
    -input: Ask for input for variables if not directly set
    -lock: Don't hold a state lock during the operation
    -lock-timeout?: Duration to retry a state lock
    -no-color: If specified, output won't contain any color
    -parallelism?: Limit the number of parallel resource operations
    -target*?: Resource to target
    -var*=: Set a variable in the Terraform configuration
    -var-file?: Set variables in the Terraform configuration from a file
documentation:
    command: '[AI] `terraform refresh` is a command in Hashicorp''s Terraform infrastructure configuration tool. It retrieves and compares the current state of your cloud resources with your configured infrastructure, and makes note of any differences. The command does not apply or make any changes; it simply provides you with the information about what would be modified, added or removed based on the latest schema and configurations. This allows you to review and decide if you want to proceed with those changes before executing an `apply` command.'
    flag:
        compact-warnings: '[AI] `terraform refresh -compact-warnings` is a command in Hashicorp''s Terraform infrastructure configuration tool. This command performs an inventory refresh, meaning it updates Terraform with the current state of your cloud resources or infrastructure, allowing you to see any differences between your configured code and the real infrastructure. The `-compact-warnings` flag is used to display warning messages in a more compact format, reducing the amount of output for easier consumption.'
        input: '[AI] `terraform refresh -input` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates a refresh operation which retrieves the current state of remote infrastructure from the configured backend and compares it against the local plan file. The `-input` flag is optional and when used, specifies a file containing input variables for Terraform to use during the apply process after refreshing. It enables users to modify input variable values before executing the apply, ensuring configuration changes are intentional.'
        lock: '[AI] `terraform refresh -lock` is a Terraform command used to perform a locking action on your cloud provider''s state file. It ensures that multiple users working on the same infrastructure configuration do not inadvertently modify each other''s changes. The lock is released once the Terraform apply or plan command is completed successfully. This helps maintain consistency and avoid unintended drift within your infrastructure.'
        lock-timeout: |-
            [AI] `terraform refresh` is a command in Hashicorp's Terraform infrastructure configuration tool. It scans the current state of your cloud resources and compares it with your desired configuration to determine if any changes are required.

            The `-lock-timeout` option modifies the behavior of Terraform's built-in concurrency control, called State Locking. When enabled (default is 5 minutes), it sets a timeout for how long a lock will be held before being released automatically. This can prevent long-running `refresh` or other Terraform operations from preventing others from making changes in your infrastructure configuration.

            For example, if you set a lock timeout of 1 minute with the command `terraform refresh -lock-timeout=1m`, any subsequent `refresh` attempts will release the lock after waiting for just 1 minute, rather than waiting indefinitely for the first operation to complete.

            This can be useful when working on large or complex configurations, where multiple team members may be making changes simultaneously. However, setting a very short timeout value might increase the likelihood of conflicts or inconsistencies between concurrent operations.
        no-color: '[AI] The `terraform refresh -no-color` command is used in Terraform, an open-source infrastructure as code software tool, to update the state of the working directory with the latest changes from the configured remote backend without displaying color output. The `refresh` action fetches the latest configuration from the remote source of truth and merges it locally, allowing you to see what would be applied before actually applying the changes with `apply`. The `-no-color` option is for suppressing colored output when running the command in terminal environments that don''t support color.'
        parallelism: '[AI] `terraform refresh -parallelism` is a command in Terraform, an open-source infrastructure as code software tool. This command initiates a refresh operation with parallel execution of actions. In other words, it fetches the current state of remote infrastructure and updates the local Terraform configuration files by comparing the current configuration with the remote one. The `-parallelism` flag enables parallel processing of multiple actions to improve the overall speed of the refresh operation. This can help reduce the time required for large or complex configurations. However, please note that enabling parallelism may increase resource usage and could potentially lead to race conditions if not handled carefully.'
        target: '[AI] `terraform refresh -target` is a command used in Terraform, an open-source Infrastructure as Code software tool. This command initiates a refresh operation, which checks if there are any changes in the remote state of the infrastructure against the current configuration, and updates the local Terraform state accordingly. The `-target` option allows specifying one or more resource types to be updated, rather than refreshing all resources. This can help reduce the time taken for a refresh by focusing only on the resources that have been modified.'
        var: '[AI] `terraform refresh -var` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates a refresh operation without applying any changes yet. The `-var` option allows passing variable values from the local environment to override the corresponding values set in the Terraform configuration files. This can be useful when making ad-hoc adjustments for testing or troubleshooting purposes while keeping the primary configuration unaltered.'
        var-file: '[AI] `terraform refresh -var-file` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates a refresh operation, which retrieves the current state of remote managed infrastructure from the configured backend and updates the local Terraform state file. The `-var-file` option specifies a variable file that contains input variables to customize the configuration for the infrastructure being managed by Terraform. By using this command with a variable file, users can modify input values without changing the configuration files themselves, allowing for easy testing and experimentation.'
