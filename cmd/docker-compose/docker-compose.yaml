# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: docker-compose
description: Docker Compose
flags:
    --ansi=: Control when to print ANSI control characters ("never"|"always"|"auto")
    --compatibility: Run compose in backward compatibility mode
    --env-file*=: Specify an alternate environment file.
    --no-ansi&: Do not print ANSI control characters (DEPRECATED)
    --parallel=: Control max parallelism, -1 for unlimited
    --profile*=: Specify a profile to enable
    --progress=: Set type of progress output (auto, tty, plain, quiet)
    --project-directory=: Specify an alternate working directory
    --verbose&: Show more output
    --workdir&=: DEPRECATED! USE --project-directory INSTEAD.
    -f, --file*=: Compose configuration files
    -p, --project-name=: Project name
    -v, --version&: Show the Docker Compose version information
persistentflags:
    --dry-run: Execute command in dry run mode
documentation:
    command: '[AI] `docker-compose` is a tool for defining and running multi-container Docker applications. With `docker-compose`, you can define the configuration of your application''s containers, including their images, ports, volumes, environment variables, and dependencies, in a single YAML file. Then, by using the `docker-compose` command, you can build, start, stop, or manage those containers as a group. It simplifies the process of working with multiple containers and their configurations.'
    flag:
        ansi: '[AI] `docker-compose --ansi` is a command-line option for Docker Compose that controls the output format for displaying messages and logs. The `--ansi` flag enables ANSI escape codes in the output, which allows colored and formatted text to be displayed in the terminal. This can improve readability and make it easier to distinguish between different components or states in complex Docker environments.'
        compatibility: '[AI] `docker-compose --compatibility` is a command used with Docker Compose to specify that the command should use the previous version of the Compose file format when reading and processing the Compose file. This allows users to run applications with older Compose file versions that may not be compatible with the latest Compose version, thus maintaining backward compatibility.'
        env-file: '[AI] `docker-compose --env-file` is a command-line option used with Docker Compose files to load custom environment variables from an external file. The `--env-file` flag takes the path to a file containing key-value pairs for the desired environment variables. This allows separating sensitive information or configuration options from the Compose file, improving security and organization.'
        file: '[AI] `docker-compose --file` is a command-line option used with Docker Compose to specify the custom Compose file to use for building and running multi-container applications. For example, `docker-compose --file myproject/docker-compose.yml up` would use the "myproject/docker-compose.yml" file instead of the default one. This allows you to have multiple Compose files for different configurations within your project.'
        no-ansi: '[AI] `docker-compose --no-ansi` is a command-line option for the Docker Compose tool. The `--no-ansi` flag disables ANSI color sequences in the output, which can be useful when running scripts or in environments that don''t support colorized output, such as CI/CD pipelines or text editors. By using this option, the output from Docker Compose will appear in black and white without any color formatting.'
        parallel: '[AI] `docker-compose --parallel` is a flag used with Docker Compose to run services in parallel instead of sequentially. This means that multiple services can be built, created, and started at the same time, which can significantly reduce the overall build and deployment time for multi-container applications. It works by utilizing the available CPU cores effectively and allowing Docker to manage the concurrency of tasks. Note that running services in parallel might require more system resources, so ensure your infrastructure can handle it.'
        profile: '[AI] `docker-compose --profile` is a command used with Docker Compose files to specify and apply a particular profile. Profiles are named collections of configuration settings, such as environment variables or volume mounts, that can be applied to one or more services in a Compose file. By using the `--profile` option followed by the name of the profile, you can instruct Docker Compose to use those specific configurations when creating and starting services.'
        progress: '[AI] `docker-compose --progress` is a command-line option for Docker Compose, which is a tool for defining and running multi-container Docker applications. This option enables real-time build, creation, and startup progress output, allowing users to see the status of each container as it''s being created or updated in their Docker environment.'
        project-directory: '[AI] `docker-compose --project-directory` is a command-line option used with Docker Compose to specify the directory containing the `docker-compose.yml` file as the project root. It allows you to compose and manage multiple projects from different directories using the same Compose configuration file. This can be useful when working on complex multi-service applications where each service may have its own unique configuration.'
        project-name: '[AI] `docker-compose --project-name` is a command-line option used with Docker Compose to set a custom name for the current project. This name can be useful when managing multiple Compose projects in the same directory, as it makes it easier to differentiate between them and avoid potential conflicts. Using this option does not affect the functionality of the Compose file itself but helps improve organization and clarity while working with Docker Compose.'
        verbose: '[AI] `docker-compose --verbose` is a command used to run Docker Compose with increased output. The `--verbose` option causes Compose to print more detailed information about the project''s build, creating and starting services, networking, and volume setup. This can be helpful for debugging or understanding the underlying workings of a multi-container Docker application.'
        version: '[AI] `docker-compose --version` is a command used to check the version of Docker Compose installed on your system. It returns output displaying the Compose version number, revision, and other related build information. This command helps ensure that you have the required Compose version to manage your multi-container Docker applications defined in `docker-compose.yml` files.'
        workdir: '[AI] `docker-compose` is a tool for defining and running multi-container Docker applications. The `--workdir` option sets the working directory for services inside the containers defined in the Compose file. It specifies the directory on the host machine that will be used as the working directory when running commands inside the containers via `docker-compose run` or other similar commands. This can help ensure consistency and simplify command execution across services.'
