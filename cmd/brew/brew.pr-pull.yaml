# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pr-pull
description: Download and publish bottles, and apply the bottle commit from a pull request with artifacts generated by GitHub Actions
group: developer
flags:
    --artifact: 'Download artifacts with the specified name (default: `bottles`).'
    --autosquash: Automatically reformat and reword commits in the pull request to our preferred format.
    --branch-okay: Do not warn if pulling to a branch besides the repository default (useful for testing).
    --clean: Do not amend the commits from pull requests.
    --committer: Specify a committer name and email in `git`'s standard author format.
    --debug: Display any debugging information.
    --dry-run: Print what would be done rather than doing it.
    --help: Show this message.
    --ignore-missing-artifacts: Comma-separated list of workflows which can be ignored if they have not been run.
    --keep-old: If the formula specifies a rebuild version, attempt to preserve its value in the generated DSL.
    --message: Message to include when autosquashing revision bumps, deletions, and rebuilds.
    --no-cherry-pick: Do not cherry-pick commits from the pull request branch.
    --no-commit: Do not generate a new commit before uploading.
    --no-upload: Download the bottles but don't upload them.
    --quiet: Make some output more quiet.
    --resolve: When a patch fails to apply, leave in progress and allow user to resolve, instead of aborting.
    --retain-bottle-dir: Does not clean up the tmp directory for the bottle so it can be used later.
    --root-url: Use the specified <URL> as the root of the bottle's URL instead of Homebrew's default.
    --root-url-using: Use the specified download strategy class for downloading the bottle's URL instead of Homebrew's default.
    --tap: 'Target tap repository (default: `homebrew/core`).'
    --verbose: Make some output more verbose.
    --warn-on-upload-failure: Warn instead of raising an error if the bottle upload fails. Useful for repairing bottle uploads that previously failed.
    --workflows: 'Retrieve artifacts from the specified workflow (default: `tests.yml`). Can be a comma-separated list to include multiple workflows.'
documentation:
    command: '[AI] `brew pr-pull` is a Homebrew command used to fetch the latest changes from the Homebrew repository on GitHub, prepare a pull request with those changes, and open it in your default web browser for review. It''s typically used by Homebrew contributors for updating the formulae and maintaining the software packages managed by Homebrew.'
    flag:
        artifact: |-
            [AI] The `brew pr-pull --artifact` command is a part of Homebrew, a popular package manager for macOS. This specific command is used to download and install an artifact (a binary file) from a Pull Request in Homebrew's GitHub repository.

            When a developer pushes a new Pull Request containing updated or new software packages to Homebrew's repository, the changes go through a review process. Once approved, the artifacts (precompiled binaries) are made available for download using this command. The `--artifact` option tells Homebrew to only install the specified artifact and not make any other changes to the system.

            So, in simple terms, `brew pr-pull --artifact` is a tool used to install precompiled binaries from approved Pull Requests in Homebrew, helping keep macOS systems up-to-date with the latest software packages.
        autosquash: |-
            [AI] `brew pr-pull --autosquash` is a command used in Homebrew, a popular package manager for macOS. This command does two things:

            1. It fetches new changes from the upstream Git repositories of Homebrew's recipes (formulae) and merges them into your local Homebrew installation.
            2. It applies automatic squashing of merge commits using `git-rebase --autosquash`. This feature collects multiple small commits into a single commit during the rebase process, making it easier to review and maintain the project's history.
        branch-okay: |-
            [AI] `brew pr-pull --branch-okay` is a command used in Homebrew, a popular package manager for macOS. This command helps manage pull requests in Homebrew's GitHub repository.

            In simpler terms, `brew pr-pull --branch-okay` fetches and merges a specified pull request branch into the main Homebrew repository, assuming that the maintainers have approved it. This command is used when you trust the changes in the pull request and want to apply them to your local Homebrew installation for testing or use. If the `--branch-okay` flag is missing, the command would instead ask for confirmation before merging.
        clean: |-
            [AI] `brew pr-pull --clean` is a command used in Homebrew, a popular package manager for macOS. This command performs two actions:

            1. It fetches the latest changes from the Homebrew GitHub repository, updating your local Homebrew installation.
            2. It cleans up any stale files or directories that may have been left over from previous installations or updates.

            This command is particularly useful when you want to ensure your Homebrew installation is up-to-date and your system is free of unnecessary files.
        committer: '[AI] The `brew pr-pull --committer` command is a Homebrew (a package manager for macOS) subcommand used to fetch and apply a pull request''s changes with a specific committer name. This can be helpful when merging pull requests from a different branch or repository without modifying the author information. The changes are applied as if they were committed by the specified committer.'
        debug: '[AI] `brew pr-pull --debug` is a command used in Homebrew, a popular package manager for macOS. This command initiates a pull request update with enhanced debug output. In simpler terms, it fetches and merges changes from a specified Git branch or remote repository into your local Homebrew installation, while providing detailed debug information to help diagnose any potential issues that may arise during the process.'
        dry-run: '[AI] The command `brew pr-pull --dry-run` is used with Homebrew, a popular package manager for macOS. This command initiates a pull request process in a dry-run mode. In other words, it simulates the effect of merging changes from upstream repositories into your local Homebrew installation without actually making any permanent changes. It helps you to preview the impact of updates before applying them, ensuring that potential conflicts or unwanted modifications can be identified and addressed prior to execution.'
        help: '[AI] The `brew pr-pull` command is a Git extension for Homebrew, a package manager for macOS. This command is used to fetch and apply pull requests from a specified Git repository. Its help message provides details on how to use the command, including optional arguments such as the GitHub username or repository name, and branch names. It also explains that the command automatically merges the pull request into your local branch after pulling it. The goal of using this command is to easily incorporate upstream changes from a repository into your Homebrew installation.'
        ignore-missing-artifacts: '[AI] The `brew pr-pull --ignore-missing-artifacts` command is used in Homebrew, a popular package manager for macOS. This command pulls changes from a specified Git branch or remote repository, ignoring any missing artifacts during the process. Artifacts are built packages that accompany a formula in Homebrew. If some artifacts are missing but the pull request contains essential changes, you can still merge it using this command to bypass the error and continue with the update.'
        keep-old: |-
            [AI] The `brew pr-pull --keep-old` command is used in Homebrew, a popular package manager for macOS, to update a specific branch or pull request of a Homebrew formula without disturbing the currently installed formula.

            When you run this command, Homebrew will first check if there's an available updated version of the formula on the specified Git branch or pull request. If there is, it will download and install the new formula. However, instead of overwriting the existing formula, it will keep both the old and the new versions. This way, you can test the new version while still being able to revert back to the previous one if needed.
        message: '[AI] `brew pr-pull --message` is a command used in Homebrew, a popular package manager for macOS. This command helps to pull and apply a pending pull request from a Git repository without merging it into the main branch yet. The `--message` option allows you to provide a commit message that will be used when applying the pull request. This way, developers can review the changes before merging them into their main project branch.'
        no-cherry-pick: |-
            [AI] The `brew pr-pull --no-cherry-pick` command is a Homebrew (a popular package manager for macOS) subcommand used to pull changes from a specific Git branch or repository into your local Homebrew installation.

            The `--no-cherry-pick` option tells Homebrew not to apply individual Git commits one by one (also known as "cherry picking"), but instead to perform a fast-forward merge, which automatically applies all the new commits from the remote branch onto your current local branch. This is usually safer and more straightforward, as it avoids potential conflicts that might arise when applying individual commits manually.

            Here's a breakdown of the command:

            1. `brew`: Invokes Homebrew.
            2. `pr-pull`: The subcommand for pulling changes from a remote Git repository or branch into your Homebrew installation.
            3. `--no-cherry-pick`: Tells Homebrew not to use cherry picking when merging the changes.
        no-commit: '[AI] The `brew pr-pull --no-commit` command is used in Homebrew, a popular package manager for macOS, to fetch the latest changes from the upstream repository of a specific Homebrew tap (repository where Homebrew formulae are stored). The `--no-commit` option tells Homebrew not to automatically commit or merge these changes into your local Homebrew installation. Instead, it leaves the changes in a detached HEAD state, allowing you to review and manually commit them if desired. This is useful when you want to inspect and control the changes before they are applied to your system.'
        no-upload: '[AI] `brew pr-pull --no-upload` is a command used in Homebrew, a popular package manager for macOS. This command pulls changes from the upstream Git repository of a Homebrew tap (a remote repository of Homebrew recipes), merges them with your local Homebrew installation, and resolves any conflicts. However, it does not upload the changes back to the originating repository. This is useful when you want to review and test the updates before sharing them with others or merge them into a branch in a Git workflow.'
        quiet: '[AI] `brew pr-pull --quiet` is a command used in Homebrew, a popular package manager for macOS. This command performs an automated pull request merging process in quiet mode. It fetches the latest changes from upstream repositories and applies them to your local Homebrew installation without displaying any informational messages. This can be useful when running scripts or automation tasks where output is unwanted.'
        resolve: '[AI] `brew pr-pull --resolve` is a command used with Homebrew, a popular package manager for macOS. This command resolves and merges any unsynced pull requests from the Homebrew core repository into your local Homebrew installation. It also attempts to automatically merge any conflicts that may arise during the process. By using this command, you ensure your local Homebrew installation stays up-to-date with the latest changes made in the official repository.'
        retain-bottle-dir: '[AI] The `brew pr-pull --retain-bottle-dir` command is used in Homebrew, a package manager for macOS. This command pulls the latest changes from a specific branch or remote repository and keeps the bottle directories (where Homebrew stores built packages) instead of deleting them during the update process. This can be useful if you want to keep the old bottles for comparison or troubleshooting purposes.'
        root-url: |-
            [AI] The `brew pr-pull --root-url` command is used with Homebrew, a popular package manager for macOS. It's specifically related to pulling PR (Pull Request) branches from a Git remote repository.

            The `--root-url` option sets the URL of the main repository where Homebrew is hosted, typically `https://github.com/Homebrew/brew`. This allows Homebrew to fetch and merge the latest changes from that repository into your local Homebrew installation via PR branches.

            In summary, the command `brew pr-pull --root-url <URL>` fetches and merges the latest changes from the main Homebrew repository (specified by URL) into your local Homebrew installation using the latest PR branches.
        root-url-using: '[AI] `brew pr-pull --root-url-using` is a command used in Homebrew, a popular package manager for macOS. This command is used to pull and merge changes from a remote Git repository into the local Homebrew repository, using the given root URL as the source. The `--root-url-using` option specifies that the URL provided should be used as the origin URL, overriding any existing configuration. This command is typically used when working on Homebrew contributions or updates.'
        tap: '[AI] The `brew pr-pull --tap` command is used with Homebrew, a popular package manager for macOS. This specific command facilitates pulling a specific tap (a Homebrew repository) from the Homebrew server and merging its changes into the local Homebrew installation. This helps keep your Homebrew installation updated with the latest packages and formulas. It does not directly handle pull requests from GitHub, but rather pulls any changes that have been pushed to the specified tap.'
        verbose: '[AI] `brew pr-pull --verbose` is a command used in Homebrew, a popular package manager for macOS. This command initiates a pull request merge process with increased output detail. When run, it fetches the latest changes from the upstream branch (usually origin), merges those changes into the current local Homebrew branch, and resolves any potential conflicts. The `--verbose` flag enhances the command''s output to provide more detailed information during each step of the process.'
        warn-on-upload-failure: '[AI] The `brew pr-pull --warn-on-upload-failure` command is a Homebrew (a popular package manager for macOS) subcommand used to pull and merge changes from a Pull Request (PR) branch into the current local branch, while issuing a warning when an upload failure occurs. This is useful in GitHub workflows where multiple collaborators are working on a project simultaneously, allowing for easy resolution of potential conflicts before pushing the changes back upstream. In summary, this command facilitates a safer pull request merging process by alerting users to potential issues during the upload stage.'
        workflows: '[AI] `brew pr-pull --workflows` is a command used with Homebrew, a popular package manager for macOS. This specific command is designed to pull and update GitHub Pull Requests workflows configured for Homebrew taps. It retrieves the latest changes in workflow files from their respective repositories, allowing Homebrew to apply those changes to its own processes when creating or updating formulae. By keeping these workflows up-to-date, Homebrew can ensure that its formulas adhere to the latest best practices and standards set by the community.'
