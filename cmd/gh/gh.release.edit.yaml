# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit <tag>
description: Edit a release
group: Targeted commands
flags:
    --discussion-category=: Start a discussion in the specified category when publishing a draft
    --draft: Save the release as a draft instead of publishing it
    --latest: Explicitly mark the release as "Latest"
    --prerelease: Mark the release as a prerelease
    --tag=: The name of the tag
    --target=: Target `branch` or full commit SHA (default [main branch])
    --verify-tag: Abort in case the git tag doesn't already exist in the remote repository
    -F, --notes-file=: Read release notes from `file` (use "-" to read from standard input)
    -n, --notes=: Release notes
    -t, --title=: Release title
documentation:
    command: '[AI] `gh release edit` is a GitHub command used to update or modify details of a previous release in a GitHub repository. It opens the terminal interface, allowing users to change release notes, tags, and other relevant information for an existing release. When run, it displays a list of releases with their respective version tags and commit SHA hash. The user can then choose which release to edit by providing the corresponding number or tag. Once selected, the text editor of choice opens enabling users to make desired modifications before saving and committing the changes. This command is useful for correcting typos, adding new features, or updating release notes after a release has already been published.'
    flag:
        discussion-category: '[AI] `gh release edit` is a GitHub command used to update details of a specific release. The `--discussion-category` option sets or updates the discussion category for the release''s associated GitHub Discussions tab. This category helps organize and filter conversations related to the release, making it easier for users to follow and contribute to relevant discussions.'
        draft: '[AI] `gh release edit --draft` is a GitHub command used to create or update a draft release for a GitHub Package Registry. A draft release is not published and can be edited before being finally released. This command opens the interface in your default web browser to allow editing of the release details, such as tag name, title, description, and files to include. Once satisfied with the changes, you can then publish the release or discard it if needed.'
        latest: '[AI] `gh release edit` is a GitHub command used to update the details of a specific GitHub Release. The `--latest` option specifies that you want to update the most recent release. So, `gh release edit --latest` will open the terminal editor with the latest release''s metadata for editing. After saving the changes in the editor, the updated release description and/or tag will be created or replaced.'
        notes: '[AI] The `gh release edit --notes` command is used with the GitHub (Git Hub) `gh` CLI (Command Line Interface) tool to update the release notes of a GitHub Release. It takes the current release identifier as an argument and opens the release editor in your default text editor, allowing you to make modifications to the release notes before committing the changes back to GitHub. Once saved and committed, the updated release notes will be visible on the GitHub Release page.'
        notes-file: '[AI] `gh release edit --notes-file` is a command used in GitHub''s Git Hub Action (GHA) workflow for managing GitHub Releases. It allows you to update the release notes of an existing draft or published GitHub Release by providing a file containing the new release notes as its argument. The `--notes-file` flag specifies the path to this file. This command makes it convenient to automate the process of updating release notes during CI/CD pipelines or other automated workflows.'
        prerelease: '[AI] `gh release edit --prerelease` is a GitHub command used to edit an existing release draft or prerelease. It takes the release identifier as an argument and sets the release as a prerelease. A prerelease is a version of a release candidate that can be distributed before the final release. This command allows users to make adjustments, such as updating metadata, before officially releasing the software or library to the public.'
        tag: |-
            [AI] The `gh release edit --tag` command is used with GitHub's `gh` CLI tool to modify the details of a specific release tag in a GitHub repository. This includes updating the tag message, release title, or draft status. Here's a quick breakdown:

            - `gh`: It refers to GitHub's Command Line Interface (CLI) tool, which can be installed and used locally to interact with GitHub repositories.
            - `release`: This is the subcommand that deals specifically with managing releases on a repository.
            - `edit`: This action is used to modify an existing release.
            - `--tag`: This option specifies that you want to edit a specific release by its tag name, rather than using the release number or id.

            In summary, `gh release edit --tag [TAG_NAME]` allows you to update various details of a GitHub repository's release with the given tag name.
        target: '[AI] `gh release edit --target` is a command used in the GitHub CLI (Command Line Interface) tool, specifically for managing GitHub Releases. This command allows you to update an existing release draft or published release with new metadata such as tag name, title, description, and assets. The "--target" option specifies which release to edit by its index or name in the list of releases.'
        title: '[AI] `gh release edit` is a GitHub command used to update or modify details of a specific GitHub Release. The `--title` option is used to change only the title of that release. So, running `gh release edit --title <new-title>` will update the title of the selected release with the specified new title.'
        verify-tag: '[AI] `gh release edit --verify-tag` is a GitHub command used to edit a specific release draft or tagged release in a GitHub repository. The `--verify-tag` option ensures that the specified tag exists before editing the release. If the tag does not exist, an error message will be displayed. This command is useful when managing releases and ensuring that the correct tag is associated with a particular release version.'
