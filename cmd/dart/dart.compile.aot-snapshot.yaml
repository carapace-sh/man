# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: aot-snapshot
description: Compile Dart to an AOT snapshot
flags:
    --enable-asserts: Enable assert statements.
    --no-sound-null-safety: Do not respect the nullability of types at runtime.
    --sound-null-safety: Respect the nullability of types at runtime.
    --verbosity=: Sets the verbosity level of the compilation.
    -D, --define*=: Define an environment declaration.
    -S, --save-debugging-info=: Remove debugging information from the output and save it separately to the specified file.
    -h, --help: Print this usage information.
    -o, --output=: Write the output to <file name>.
    -p, --packages=: Get package locations from the specified file instead of .packages.
documentation:
    command: '[AI] `dart compile aot-snapshot` is a Dart command used for ahead-of-time (AOT) compilation of Dart code into JavaScript, generating snapshot files. These snapshot files contain precomputed data and reduce the initial loading time of an application by providing quick access to frequently used data during runtime. The output is one or more `.dart.js` files along with associated metadata files. This process improves the performance and efficiency of Dart applications in web environments.'
    flag:
        define: |-
            [AI] `dart compile aot-snapshot` is a command in Dart programming language used for ahead-of-time (AOT) compilation of Dart code into JavaScript, creating optimized and production-ready output. The `--define` option allows defining constant values or symbols that will be available as global variables during the compilation process. This can be useful to pass configuration settings or customize behavior without modifying the source code itself. For example:

            ```bash
            dart compile aot-snapshot --output main.js --define=API_KEY="mySecretKey" lib/*.dart
            ```

            In this command, `--define=API_KEY="mySecretKey"` sets the constant "API\_KEY" with the value "mySecretKey" during compilation. This value can then be accessed as a global variable in the generated JavaScript code (main.js) without requiring modifications to the source Dart files.
        enable-asserts: '[AI] `dart compile aot-snapshot` is a command-line tool provided by Dart, a programming language, used for ahead-of-time (AOT) compilation of Dart code to JavaScript. The "--enable-asserts" flag enables the generation of assertion checks during compilation. Asserts are debugging features that can be used to check conditions in the code at runtime. However, they add additional runtime overhead and can be disabled for production builds to improve performance. By using "--enable-asserts," you are including asserts in your compiled code, allowing for more thorough debugging when running the generated JavaScript files in a browser.'
        help: |-
            [AI] `dart compile aot-snapshot` is a command-line tool provided by Dart programming language for ahead-of-time (AOT) compilation of Dart code into native code. The `--help` flag is used to display detailed help information about this specific command. Here's what you can expect when using `dart compile aot-snapshot --help`:

            1. It provides an overview of the command, explaining that it compiles Dart code for snapshot creation and that the output is a standalone executable or Dart library.
            2. It lists the required arguments which include the source entry point Dart file, the output directory for the generated files, and optional flags to enable tree shaking, profile reporting, and other features.
            3. It describes each optional flag in detail, explaining its purpose and providing examples where necessary. For instance:
               * `--tree-shake-all`: Enables tree shaking for all libraries (not just the entrypoint).
               * `--output-name`: Sets the output file name of the generated executable or library.
               * `--profile`: Generates a profile report during compilation.
            4. It mentions that some flags have default values, and using them without modification may yield desired results for many use cases.
            5. Finally, it provides examples of how to use the command, including basic usage and using multiple entry points.
        no-sound-null-safety: '[AI] The command `dart compile aot-snapshot --no-sound-null-safety` is used in Dart programming language for ahead-of-time (AOT) compilation of a Dart application into JavaScript, producing snapshot files with the `--snapshot` flag. The `--no-sound-null-safety` option disables null safety checks during this process. In other words, it compiles the code without applying Dart''s modern null safety features. This can be useful when working with older Dart projects or libraries that haven''t been updated to support null safety yet.'
        output: |-
            [AI] The `dart compile aot-snapshot --output` command is used in Dart programming language for ahead-of-time (AOT) compilation of Dart code into JavaScript. Here's what each part means:

            1. `dart`: It's the Dart executable or interpreter, which runs Dart commands and scripts.
            2. `compile`: This is a command to compile source code, i.e., convert it from its original form into an executable or usable format in another environment.
            3. `aot-snapshot`: This is the specific type of compilation being done. AOT stands for "ahead-of-time," which means the Dart VM or interpreter isn't required at runtime, making it more efficient as the code is already compiled into JavaScript. A "snapshot" is a precompiled version of the Dart runtime for a specific set of libraries and dependencies.
            4. `--output`: This option specifies where the output file(s) should be saved. In this case, it's likely a single or multiple JavaScript files that can be directly loaded into web browsers or other environments without further compilation or interpretation.
        packages: '[AI] `dart compile aot-snapshot` is a Dart command used for ahead-of-time (AOT) compilation of Dart code into JavaScript, which can be directly run in a web browser without needing a Dart runtime. The `--packages` option specifies that the Dart dependencies (libraries from pubspec.yaml) should also be compiled and bundled along with the main application code. This is useful for large Dart applications where multiple packages are used, ensuring all the required dependencies are available when running the JavaScript output in a browser.'
        save-debugging-info: '[AI] The `dart compile aot-snapshot` command is used in Dart programming language for ahead-of-time (AOT) compilation of Dart code into native machine code, optimizing the application for faster execution. The `--save-debugging-info` flag adds debugging information during the AOT compilation process. This allows developers to use standard debugging tools when running the compiled code, facilitating easier debugging and issue resolution in production environments.'
        sound-null-safety: '[AI] `dart compile aot-snapshot` is a Dart command used for ahead-of-time (AOT) compilation of Dart code into native code, reducing the runtime overhead and improving the app''s performance. The `--sound-null-safety` flag enables strict null safety checking during the build process to ensure that there are no potential null reference exceptions at compile time. This helps in detecting and fixing potential null errors before deployment.'
        verbosity: '[AI] `dart compile aot-snapshot` is a Dart command used for ahead-of-time (AOT) compilation of Dart code for web applications using the Angular framework. The `--verbosity` flag increases the amount of output information provided during the compilation process, helping to diagnose any potential issues that may arise during the build. In simpler terms, it''s like asking for more details about what the compiler is doing at each step during the AOT-compilation process.'
