# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fuchsia
description: Build the Fuchsia target
flags:
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --no-null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --profile: Build a version of your app specialized for performance profiling.
    --release: Build a release version of your app (default mode).
    --runner-source=: The package source to use for the flutter_runner.
    --target-platform=: The target platform for which the app is compiled.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] The `flutter build fuchsia` command is used in Flutter development to build an application for Fuchsia, Google''s open-source operating system for modern devices. It converts the project''s code into a format that can be run on Fuchsia''s Flutter engine. The output is usually in the form of `.bin` files and other artifacts needed by the Fuchsia operating system to install and execute the application. This command should be run in the terminal or command prompt from within your project directory after setting up the necessary tools for building for Fuchsia.'
    flag:
        dart-define: '[AI] `flutter build fuchsia` is a command used to build and generate an image of a Flutter application for Fuchsia OS, a open-source operating system developed by Google. The `--dart-define` option is passed alongside this command for defining custom constants in the Dart code during the build process. These defines can be accessed in the Flutter application''s FIDL (Fuchsia Interface Definition Language) code and help in creating platform-specific configurations or implementing custom logic for Fuchsia OS.'
        debug: '[AI] `flutter build fuchsia --debug` is a command used in Flutter development for building and running applications on Fuchsia, Google''s open-source operating system. The `--debug` flag enables the debug mode for the built application, providing enhanced diagnostic capabilities for developers during testing and debugging processes. This command builds the application for Fuchsia using the Flutter toolkit and sets up the environment for attaching a debugger for further analysis.'
        help: |-
            [AI] `flutter build fuchsia` is a command used to build and generate an image of a Fuchsia project using Flutter. The `--help` option provides information about how to use this command, including any arguments or options that can be passed. Here's a summary:

            `flutter build fuchsia --help` shows the following usage:

            ```bash
            Usage: flutter build fuchsia [options] <project>

            Builds and generates an image of a Fuchsia project using Flutter.

            Options:
              --device=DEVICES, --no-devices             List of devices to deploy to (default: all).
                                                          Use `--no-devices` to skip device selection entirely.
              --mode=MODE                               Build mode: debug or release. Defaults to debug.
              --dart-define=NAME=VALUE                    Define a Dart global constant.
              --no-analyze                             Disable static analysis during build.
              --no-tree-shake                         Disable tree shaking during build.
              --release-channel=CHANNEL                Channel to publish the Fuchsia image to.
              --help                                      Show this help message and exit.
            ```

            This command requires a Flutter project as an argument, and it allows you to specify various options such as device target, build mode (debug or release), Dart define constants, disabling analysis, tree shaking, and selecting a specific release channel.
        no-null-assertions: '[AI] `flutter build fuchsia --no-null-assertions` is a command used in Flutter development for building and running applications on Fuchsia, Google''s open-source operating system. The `--no-null-assertions` flag disables the null safety feature in Dart, which is the default language for Flutter. This means that Dart will not throw a null pointer exception at compile time when a potential null value is encountered, but instead allows the code to continue running and potentially cause a runtime error if a null value is actually used. The flag is used when dealing with legacy or incomplete code that may contain null references, and is intended for use during development and testing rather than production builds.'
        no-tree-shake-icons: '[AI] The command `flutter build fuchsia --no-tree-shake-icons` is used to build a Flutter application for the Fuchsia operating system without tree shaking icons. Tree shaking is a process used during Flutter compilation that removes unused code, including unused icons, to reduce the size of the final binary. The `--no-tree-shake-icons` flag disables this optimization and keeps all the specified icons in the output, regardless of whether they''re actually used or not, resulting in a larger binary.'
        null-assertions: '[AI] `flutter build fuchsia --no-root` is a command used in Flutter development for building and running applications on Fuchsia, Google''s open-source operating system. The `--null-assertions` flag disables null safety checks during the build process. This allows potentially nullable references to be treated as non-nullable, which can be useful when working with APIs or libraries that do not enforce null safety. However, using this option may introduce runtime errors if a null value is encountered.'
        profile: '[AI] `flutter build fuchsia --profile` is a command used in Flutter development to create a Fuchsia-specific build of an application. The `--profile` argument specifies the target device or emulator for the build, which can be selected from a list of available profiles. The command compiles the Dart code into C++ and generates the necessary system images and artifacts for the Fuchsia operating system to run the app. The resulting build is optimized for Fuchsia, ensuring efficient use of system resources.'
        release: |-
            [AI] `flutter build fuchsia --release` is a command used in Flutter development to create a release build for a Fuchsia project. Fuchsia is an open-source operating system project by Google, and Flutter is a mobile application development framework.

            This command performs several optimizations, such as shrinking the code size, obfuscating the code, and enabling tree shaking, to generate a smaller and more efficient binary package for Fuchsia. The `--release` flag indicates that this build should be used for production deployment instead of development or debugging purposes.
        runner-source: |-
            [AI] `flutter build fuchsia --runner-source` is a command used in Flutter development for building and running Fuchsia projects. Here's a brief explanation:

            1. `flutter build`: This is the base command to build your Flutter project, which compiles Dart code into native machine code and generates necessary assets.
            2. `fuchsia`: This is a specific target for Flutter builds, indicating that you want to create a Fuchsia application instead of an Android or iOS app.
            3. `--runner-source`: This option specifies the location of the Fuchsia runner code, which is responsible for running the built application on the Fuchsia operating system. The source can be either a local path or a URL to a remote repository.
        target: '[AI] `flutter build fuchsia --target` is a command used in Flutter development for building and generating artifacts for the Fuchsia operating system as the target platform. This command invokes the Flutter tool to compile the Dart code, generate native code (C++ or Rust), and package them along with other required assets into a .bin file, which can be installed on Fuchsia-supported devices or emulators.'
        target-platform: '[AI] `flutter build fuchsia --target-platform` is a command used in Flutter development for building and generating an image of a Flutter application specifically for the Fuchsia operating system as the target platform. This command invokes the Flutter tool to perform various tasks such as compiling the Dart code, creating machine images using the Fuchsia SDK, and packaging the final output into an archive file. It generates an `.ffbe` file that can be used to write a bootable image or a system update package for Fuchsia.'
        tree-shake-icons: '[AI] `flutter build fuchsia` is a command used to build and generate an image for deploying Flutter applications on Fuchsia operating system. The `--tree-shake-icons` option is passed to minimize the size of the icon data included in the built image by removing unused icons. This results in a smaller image size, which is beneficial when targeting devices with limited storage or bandwidth.'
