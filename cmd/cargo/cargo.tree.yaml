# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tree
description: Display a tree visualization of a dependency graph
flags:
    --all-features: Activate all available features
    --charset=: 'Character set to use in output: utf8, ascii'
    --depth=: Maximum display depth of the dependency tree
    --exclude*=: Exclude specific workspace members
    --manifest-path=: Path to Cargo.toml
    --no-dedupe: Do not de-duplicate (repeats all shared dependencies)
    --no-default-features: Do not activate the `default` feature
    --prefix=: Change the prefix (indentation) of how each entry is displayed
    --prune*=: Prune the given package from the display of the dependency tree
    --target*=: Filter dependencies matching the given target-triple (default host platform). Pass `all` to include all targets.
    --workspace: Display the tree for all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -d, --duplicates: Show only dependencies which come in multiple versions (implies -i)
    -e, --edges*=: The kinds of dependencies to display (features, normal, build, dev, all, no-normal, no-build, no-dev, no-proc-macro)
    -f, --format=: Format string used for printing dependencies
    -h, --help: Print help
    -i, --invert*=: Invert the tree direction and focus on the given package
    -p, --package*=: Package to be used as the root of the tree
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo tree` is a Cargo subcommand that displays the dependency tree of a Rust project. It shows each direct and transitive dependency, along with their versions, to help users understand the complete set of libraries their project relies on. This command can be useful for troubleshooting version conflicts or understanding the composition of a Rust project''s dependencies.'
    flag:
        all-features: '[AI] The `cargo tree --all-features` command is used with Cargo, Rust''s package manager. It generates a tree-like output showing all the features (optional components) of your Cargo project and their dependencies, both direct and transitive. This command helps you understand the interconnectedness between different components of your project and their dependencies, making it useful for debugging build issues or managing complex projects.'
        charset: '[AI] The `cargo tree --charset` command is used with Cargo, Rust''s package manager. This specific command generates a tree representation of a project''s dependencies, including transitive ones. The `--charset` option specifies that the output should be encoded using UTF-8 character set to ensure proper display of special characters in dependency names or versions.'
        depth: '[AI] The `cargo tree --depth <num>` command is used in Cargo, Rust''s package manager, to display the dependency tree of a project up to a specified depth. The `<num>` argument specifies the number of levels deep in the dependency graph that should be shown. By default, Cargo shows the entire dependency tree without any depth limitation. Setting a positive value for `<num>` limits the displayed output to that depth. Negative values can be used to show more levels than the current depth but are generally not recommended due to the potentially large output.'
        duplicates: '[AI] The `cargo tree --duplicates` command is a Cargo sub-command used in Rust programming for generating a tree representation of dependencies and their transitive dependencies. The `--duplicates` option specifically highlights any duplicate dependencies, meaning packages or crates that have multiple instances within the project''s dependency tree. It helps in identifying potential redundancies and simplifying the overall project structure by eliminating unnecessary duplications.'
        edges: '[AI] The `cargo tree --edges` command is a utility provided by Cargo, Rust''s package manager. This command generates a directed graph representation of your project''s dependency tree with edges. Each edge signifies a direct dependency relationship between two crates in the tree. By displaying this tree, you can easily visualize and understand the inter-dependencies among all the crates involved in your Rust project.'
        exclude: '[AI] The `--exclude` option in Cargo''s tree command is used to exclude specific directories or files from the output when generating a hierarchical representation of the project''s dependencies and their transitive dependencies. You can specify one or more glob patterns, which will be matched against the paths relative to the project root. For example, `--exclude="node_modules/*"` would exclude all directories named "node\_modules" from the output. This can help simplify the tree view by hiding large portions of third-party dependencies that are not relevant to your project''s codebase.'
        features: '[AI] The `cargo tree --features` command is used with Cargo, Rust''s package manager, to display a tree-like representation of the dependencies and their featured requirements for a given project. Features are optional components or functionality provided by dependencies, which can be enabled or disabled during build time. This command helps developers understand the dependency tree, including the features that each dependency requires and provides, to better manage project dependencies and optimize build configurations.'
        format: '[AI] `cargo tree --format` is a command used in Rust programming language''s Cargo build tool. The `--format` option specifies the output format for the `cargo tree` subcommand. This command displays the dependency graph of the current project and its transitive dependencies. The `--format` option determines how this information is displayed, such as JSON, TSV, or the default plain text format.'
        help: '[AI] `cargo tree --help` is a command used in Cargo, Rust''s package manager. This command displays help information about the `cargo tree` subcommand. It provides an overview of what `cargo tree` does and how to use it effectively. Some common options include `--manifest-path`, which specifies the Cargo manifest file to use, and `--interactive`, which allows for interactive exploration of the dependency graph. The output is a tree representation of the dependencies in the project and their transitive dependencies.'
        invert: |-
            [AI] The `cargo tree --invert` command is a feature of Cargo, Rust's package manager. It generates a tree representation of your project's dependency graph, but with the root dependencies on the leaves and the dependent crates moving upwards towards the root.

            This inverse tree view can be useful for understanding how different dependencies relate to each other in more complex projects where there are multiple layers of dependencies. The output is typically presented as a text-based tree structure that shows the names and versions of each crate, along with arrows indicating the direction of the dependency relationship.
        manifest-path: '[AI] The `--manifest-path` option in Cargo, Rust''s package manager, specifies the path to the manifest file (often named `Cargo.toml`) of a Rust project. Using the `cargo tree` command with this flag will display the dependency tree of the project based on the given manifest file.'
        no-dedupe: |-
            [AI] The `cargo tree` command is a sub-command of Cargo, Rust's package manager. It is used to show a tree representation of all the dependencies in a Rust project and their transitive dependencies.

            The `--no-dedupe` flag is an option for this command which disables deduplication of packages. Deduplication is a process where Cargo identifies and merges multiple instances of the same dependency with the same version. By default, Cargo performs deduplication to save disk space and reduce redundancy. However, with the `--no-dedupe` flag, Cargo will list each occurrence of the identical package separately in the tree output, allowing users to more easily understand the origin of each dependency instance.
        no-default-features: '[AI] `cargo tree --no-default-features` is a command used with Rust''s package manager, Cargo. The `--no-default-features` option disables the use of default features for all dependencies listed in the project''s `Cargo.toml` file. This means that only explicitly specified features will be included when generating the dependency graph tree using `cargo tree`. This can help in understanding which features are actively being used by the project, allowing for better control over the project''s dependencies and potential size reduction.'
        package: '[AI] The `cargo tree --package` command is a sub-command used in Cargo, Rust''s package manager and build tool. This command displays the dependency tree for a given Rust package, showing how different packages depend on each other within the project. It helps developers understand the relationships between various components of their project and its dependencies, making it easier to manage and troubleshoot issues related to package dependencies.'
        prefix: '[AI] The `--prefix` option in Cargo, the Rust package manager, specifies a prefix path for installing crates (Rust libraries or binary packages). By default, Cargo installs crates under `~/.cargo/bin`, but with `--prefix` you can change that to another directory, like `/usr/local`. This allows multiple Rust versions or Cargo installations to coexist and have their own set of installed crates.'
        prune: '[AI] `cargo tree --prune` is a command used in Cargo, Rust''s package manager. This command generates a visualization of the dependency tree for your Rust project, showing how different crates depend on each other. The `--prune` option makes Cargo hide dependencies that have no effect on your project, i.e., dead branches or unused transitive dependencies. In other words, it simplifies the output by hiding the dependencies not contributing to building and running your application.'
        quiet: '[AI] `cargo tree` is a command-line tool for Rust projects using Cargo build system to visualize the dependency tree of crates and their versions. The `--quiet` flag modifies its output, making it less verbose or silent. Instead of displaying detailed information about each crate and its dependencies, it only shows the names and the versions in a more compact format.'
        target: '[AI] The `--target` option in Rust''s `cargo build` or `cargo run` commands specifies the target triplet for the compilation. A target triplet is a string that describes the target architecture, operating system, and other build settings for the output artifact. For example, `--target x86_64-pc-windows-msvc` builds the project for a 64-bit Windows system using Microsoft Visual Studio as the compiler. This allows creating multiple binary outputs from the same codebase for different platforms.'
        workspace: '[AI] The `cargo tree --workspace` command is used in Rust programming language''s Cargo build tool to display a tree-like representation of the dependency graph within a multi-crate workspace. This means that it shows how different crates in the workspace depend on each other, including transitive dependencies. It helps in understanding the overall structure and interconnections between crates in a complex project.'
