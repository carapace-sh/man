# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: xcarchive
description: Build an iOS archive bundle
flags:
    --analyze-size: Produce additional profile information for artifact output size.
    --build-name=: A "x.y.z" string used as the version number shown to users.
    --build-number=: An identifier used as an internal version number.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --export-options-plist=: Optionally export an IPA with these options.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-analyze-size: Do not produce additional profile information for artifact output size.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --release: Build a release version of your app (default mode).
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build xcarchive` is a Flutter command used to create an Xcode archive for submitting an app for testing or App Store distribution on iOS platforms. It compiles, tests, and packages the application code along with associated resources into a single `.xcarchive` file containing all required metadata for Xcode to further process the build for submission.'
    flag:
        analyze-size: '[AI] `flutter build xcarchive --analyze-size` is a command used in Flutter development to analyze the size of an iOS app archive. When executed, it creates an archive of your app using Xcode''s `xcarchive` format and then runs Apple''s Size Reduction Tool on it. The output provides detailed information about the overall binary size, as well as the sizes for each framework, resource, and other components within the app. This information can be used to identify potential areas for reducing the app''s size and improving its performance.'
        build-name: '[AI] `flutter build xcarchive --build-name` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store. This command builds the project using the specified `--build-name` as the name of the archive and generates an .xcarchive file, which contains the compiled binary, provisioning profiles, and other required resources for submitting the app for review.'
        build-number: '[AI] `flutter build xcarchive --build-number` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store. The `--build-number` option allows specifying a custom build number for the archive, which should be a positive integer or a string following the format `x.y.z`. This command compiles and packages the application, creating an .xcarchive file that includes all required resources and can be easily imported into Xcode for further submission processes.'
        dart-define: '[AI] `flutter build xcarchive --dart-define` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store or testing on a device via Xcode. The `--dart-define` option enables passing Dart definitions to Obj-C/Swift code during the build process, useful when interacting with native code. This command generates a .xcarchive file that contains all the necessary build artifacts for submitting an app to the App Store.'
        debug: '[AI] `flutter build xcarchive --debug` is a command used in Flutter development for creating an archive of an iOS project suitable for submission to the App Store or testing on Xcode''s Organizer. The `--debug` flag indicates that the archive should include debug symbols, enabling symbolic debugging during crash reports and other diagnostic tools. The generated `.xcarchive` file can be installed directly into Xcode for further development or submission to App Stores.'
        export-options-plist: '[AI] `flutter build xcarchive --export-options-plist` is a command used in Flutter development to generate an Xcode archive for submitting an app to the App Store or Ad Hoc distribution. This command builds the project and creates an .xcarchive file, which is a container that holds the application''s metadata, binary, and other necessary resources. The `--export-options-plist` option generates an export options plist file alongside the archive. This plist contains custom settings like provisioning profiles or signing identities required for the App Store submission process.'
        flavor: '[AI] The `flutter build xcarchive` command is used in Flutter development to create an Xcode archive for submitting an app to the App Store or TestFlight. The `--flavor` option specifies a particular build flavor to use, which is a way to manage different builds of your application (like beta, production, etc.) within the same project. This option allows you to generate an archive specific to that build flavor, ensuring the correct configurations are included for each version of your app.'
        help: |-
            [AI] `flutter build xcarchive` is a command-line tool provided by Flutter, a mobile app development framework. The `xcarchive` sub-command generates an IPA file (for iOS) or an APK file (for Android), packaged as an Xcode archive for further submission to the App Store or TestFlight.

            The `--help` flag is used to display detailed information about how to use this specific command, including all available options and arguments. When you run `flutter build xcarchive --help`, it will output a message explaining how to create an archive using the Flutter CLI tool. This information includes required configuration for signing keys, provisioning profiles, scheme, and other necessary settings.
        no-analyze-size: '[AI] `flutter build xcarchive --no-analyze-size` is a command used in Flutter development for building an archive of an iOS application without running size analysis during the build process. An Xcode archive is a packaged version of your app that includes all necessary resources, such as images and localized strings, and can be directly uploaded to App Store Connect or Xcode for testing. By adding `--no-analyze-size` flag, Flutter disables size analysis, which calculates the size information of the app bundle, reducing the build time as it is an optional step during the archive creation process.'
        no-null-assertions: '[AI] `flutter build xcarchive` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store. The `--no-null-assertions` option is an argument that disables the null safety feature introduced in Dart 2.12. This flag allows the Flutter build process to continue even if there are potential null reference errors, which can be helpful when dealing with legacy code or third-party packages that don''t fully support null safety yet. However, using this option increases the risk of runtime errors and is generally recommended to be used with caution.'
        no-obfuscate: '[AI] `flutter build xcarchive --no-obfuscate` is a command used in Flutter development for creating an archive of the iOS application for submission to the App Store or testing on Xcode. The `xcarchive` build type packages the app into an .xcarchive file, which includes the app binary, associated resources, and necessary frameworks and libraries. The `--no-obfuscate` flag indicates that code obfuscation should not be performed during the build process. Obtaining an unobfuscated archive is essential for debugging and understanding the app''s structure during development, as it allows inspecting the source code directly.'
        no-pub: '[AI] `flutter build xcarchive --no-pub` is a command used in Flutter development for creating an archive (.xcarchive file) of your iOS application for submission to the App Store or for testing on Xcode. The `--no-pub` flag indicates that the publish process to Firebase or Google Play should not be run, meaning you''ll need to handle publishing yourself. This command builds and generates the .xcarchive file locally.'
        no-tree-shake-icons: |-
            [AI] `flutter build xcarchive` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store. This command builds your application for release, generates an Xcode project file (`.xcworkspace` or `.xcodeproj`), and creates an archive file (`.xcarchive`) that contains the built app, provisioning profiles, and other required resources.

            The `--no-tree-shake-icons` flag is used to disable tree shaking for icons during the build process. Tree shaking is a technique used in Flutter and Dart to remove unused code from the final application, but it also removes unused icons. Sometimes app developers need specific icons that are not used throughout the app but are required for certain parts of the App Store Connect or Xcode submission process (like App Preview images, Icon templates, etc.). Disabling tree shaking for icons ensures these icons are included in the final archive file.
        null-assertions: '[AI] `flutter build xcarchive --null-assertions` is a command used in Flutter development to create an Xcode archive for submitting an app to the App Store or TestFlight. The `--null-assertions` option disables null safety checks in Dart code, allowing potentially null values to be used without explicit checking. This command generates an IPA file with the required certificates and provisioning profiles included.'
        obfuscate: '[AI] `flutter build xcarchive --obfuscate` is a command used in Flutter development for building an archive of an iOS app with obfuscation. Obfuscation is the process of making code harder to read or reverse engineer, which helps protect intellectual property by making it harder for others to understand and copy your code. The `--obfuscate` option enables this feature during the build process by using a tool like ProGuard or R8 (depending on the project setup) to perform the obfuscation. The resulting `.xcarchive` file is a packaged iOS app ready for submission to the App Store or for further development in Xcode.'
        profile: '[AI] `flutter build xcarchive --profile` is a command used in Flutter development to create an archive (IPA file for iOS or AAB file for Android) that includes provisions for Code Signing and Provisioning Profiles. It builds the application, gathers all required resources, and packages them into a format suitable for submission to the App Store or Google Play Store. By including the `--profile` option, Flutter will use any specified profiles (iOS: `ios/YourAppName.xcworkspace/signingProfiles/YourProfile.mobileprovision`, Android: `key.store` and `key.alias`) for signing the archive during this process.'
        pub: '[AI] `flutter build xcarchive --pub` is a command used in Flutter development to create an archive (`.xcarchive`) of an iOS project for submission to the App Store or for testing on Xcode. The `--pub` option is included to fetch and include dependencies from pub.dev, ensuring a complete project build.'
        release: '[AI] `flutter build xcarchive --release` is a command used in Flutter development for creating an archive (ipa file) for distributing an iOS app for release on the App Store. This command performs a release build, which means it optimizes the code and resources for production use, enabling smaller app size and better performance. The generated ipa file contains all the necessary components of your app, including the app executable, resources, and entitlements, ensuring a seamless submission process to Apple''s App Store.'
        split-debug-info: '[AI] `flutter build xcarchive --split-debug-info` is a command used in Flutter development for creating an Xcode archive for App Store submission or testing on a device via Xcode. The `--split-debug-info` option splits the debug symbol file from the main archived IPA file into separate files per architecture, making it easier to manage and upload to Apple''s App Store Connect. This improves the submission process and ensures efficient symbolication of crashes during app testing.'
        target: '[AI] `flutter build xcarchive --target` is a command used in Flutter development to create an archive file of an iOS app for submission to the App Store or for testing on Xcode. The "--target" option specifies the scheme name (iOS application or iOS test target) to be built within the project. The resulting .xcarchive file contains all the necessary build artifacts, including the app bundle and provisioning profiles.'
        tree-shake-icons: '[AI] `flutter build xcarchive --tree-shake-icons` is a command used in Flutter development to create an Xcode Archive for submission to the App Store or TestFlight. The `--tree-shake-icons` option enables icon size reduction, which helps to minimize the app''s binary size by removing unused icons and optimizing their sizes. This results in smaller archive file sizes without sacrificing application functionality.'
