# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: init
description: Run this command in order to set up the Kubernetes control plane
flags:
    --apiserver-advertise-address=: The IP address the API Server will advertise it's listening on. If not set the default network interface will be used.
    --apiserver-bind-port=: Port for the API Server to bind to.
    --apiserver-cert-extra-sans*=: Optional extra Subject Alternative Names (SANs) to use for the API Server serving certificate. Can be both IP addresses and DNS names.
    --cert-dir=: The path where to save and store the certificates.
    --certificate-key=: Key used to encrypt the control-plane certificates in the kubeadm-certs Secret.
    --config=: Path to a kubeadm configuration file.
    --control-plane-endpoint=: Specify a stable IP address or DNS name for the control plane.
    --cri-socket=: Path to the CRI socket to connect. If empty kubeadm will try to auto-detect this value; use this option only if you have more than one CRI installed or if you have non-standard CRI socket.
    --dry-run: Don't apply any changes; just output what would be done.
    --feature-gates=: A set of key=value pairs that describe feature gates for various features.
    --ignore-preflight-errors*=: 'A list of checks whose errors will be shown as warnings. Example: ''IsPrivilegedUser,Swap''. Value ''all'' ignores errors from all checks.'
    --image-repository=: Choose a container registry to pull control plane images from
    --kubernetes-version=: Choose a specific Kubernetes version for the control plane.
    --node-name=: Specify the node name.
    --patches=: Path to a directory that contains files named "target[suffix][+patchtype].extension".
    --pod-network-cidr=: Specify range of IP addresses for the pod network.
    --service-cidr=: Use alternative range of IP address for service VIPs.
    --service-dns-domain=: Use alternative domain for services, e.g. "myorg.internal".
    --skip-certificate-key-print: Don't print the key used to encrypt the control-plane certificates.
    --skip-phases*=: List of phases to be skipped
    --skip-token-print: Skip printing of the default bootstrap token generated by 'kubeadm init'.
    --token-ttl=: The duration before the token is automatically deleted (e.g. 1s, 2m, 3h). If set to '0', the token will never expire
    --token=: The token to use for establishing bidirectional trust between nodes and control-plane nodes.
    --upload-certs: Upload control-plane certificates to the kubeadm-certs Secret.
documentation:
    command: '[AI] `kubeadm init` is a command used to bootstrap a Kubernetes cluster on Linux systems. It sets up a local single-node Kubernetes cluster with a master node and initializes various components, including the Kubernetes control plane and etcd database. The command also creates the necessary Kubernetes configuration files and sets up `kubectl` for communicating with the cluster. After running this command, you can join worker nodes to the cluster using their IP addresses or hostnames.'
    flag:
        apiserver-advertise-address: '[AI] `kubeadm init --apiserver-advertise-address` is a command used to initialize a Kubernetes cluster using kubeadm, an open-source project for deploying and managing Kubernetes clusters. The `--apiserver-advertise-address` option specifies the IP address or hostname of the machine where the Kubernetes API server will be located. This flag is important as it allows other nodes in the cluster to discover and communicate with the API server, enabling them to join the cluster and begin scheduling workloads.'
        apiserver-bind-port: '[AI] `kubeadm init` is a command-line utility for setting up a Kubernetes cluster using kubeadm, a tool for deploying and managing Kubernetes clusters. The option `--apiserver-bind-port` specifies the port number on which the Kubernetes API server will listen for incoming requests. By default, it is set to 6443. If you want to use a different port, you can provide it as an argument to this flag when initializing your cluster with `kubeadm init`. For example, `kubeadm init --apiserver-bind-port=8080` will start the API server on port 8080 instead of the default 6443.'
        apiserver-cert-extra-sans: |-
            [AI] `kubeadm init` is a command-line tool for bootstrapping a Kubernetes cluster using Kubeadm, an open-source project for deploying and managing Kubernetes clusters. The option `--apiserver-cert-extra-sans` is used to specify additional Subject Alternative Names (SANs) when generating the TLS certificates for the Kubernetes API server.

            Subject Alternative Names (SANs) are extensions to X.509 certificates that allow specifying additional names or IP addresses in addition to the common name (CN). By default, `kubeadm init` generates self-signed certificates for the API server, and these certificates only contain the hostname of the server as the CN. With `--apiserver-cert-extra-sans`, you can add additional IP addresses or hostnames to the certificate as SANs.

            Adding extra SANs to the certificate is useful if you want to access the API server from multiple hosts or IP addresses, ensuring secure communication and avoiding SSL errors due to certificate mismatches. It's important to note that adding unnecessary SANs might affect the security of your cluster, as it increases the chances of a man-in-the-middle (MitM) attacker intercepting the traffic and impersonating one of the added SANs.
        cert-dir: '[AI] `kubeadm init` is a command-line tool used to bootstrap a new Kubernetes cluster. The `--cert-dir` option specifies the directory where `kubeadm` should place the cluster certification files, including the root certificate authority (CA) and server certificate and key. These files are necessary for secure communication between nodes in the cluster, as well as with external clients. By default, these files are generated in a random location during initialization, but using `--cert-dir` allows you to specify a specific directory where they should be stored, making it easier to manage and access them.'
        certificate-key: '[AI] `kubeadm init` is a command-line tool for setting up a Kubernetes cluster using kubeadm. The `--certificate-key` flag is an optional argument that specifies the path to the private key file used to sign the root certificate for the cluster. This key must already exist and be PEM encoded. By providing this key, `kubeadm init` will generate a self-signed CA certificate and use it to sign the server certificates during the cluster initialization process.'
        config: '[AI] `kubeadm init --config` is a command used to initialize a Kubernetes cluster using kubeadm, an open-source project used for deploying and managing Kubernetes clusters. The `--config` flag specifies that the output of the command should be saved to a file instead of executing the command directly on the current machine. This file contains the necessary configuration data for joining worker nodes to the cluster or for creating a new kubeconfig file. It is essential in production deployments and multi-node clusters where multiple nodes need to communicate with each other. The generated config file can be used with `kubeadm join` command to add more nodes to the cluster.'
        control-plane-endpoint: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `--control-plane-endpoint` option specifies the IP address or hostname of the control plane node, which will become the primary master node in the cluster. When `kubeadm init` is run with this option, it sets up the control plane components (etcd, kube-apiserver, kube-controller-manager, and kube-scheduler) on the specified node and configures the Kubernetes certificate authorities and access tokens for authentication. After running `kubeadm init`, you can join worker nodes to the cluster using their IP addresses or hostnames and the token generated during initialization.'
        cri-socket: '[AI] `kubeadm init --cri-socket` is a command used to initialize a Kubernetes cluster using Kubeadm, which is an open-source tool for deploying and managing Kubernetes clusters. The `--cri-socket` flag specifies the Unix domain socket that the Container Runtime Interface (CRI) will listen on. This allows the container runtime (such as Docker or cri-dockerd) to communicate with the Kubernetes cluster, enabling container orchestration. After running this command, the initialized cluster can be joined by other nodes to create a multi-node cluster.'
        dry-run: '[AI] `kubeadm init --dry-run` is a command used to initialize a Kubernetes cluster in a dry-run mode. It simulates the process of setting up a new cluster without actually executing any changes to the system. This can be helpful for reviewing the exact commands and configurations that will be applied before making irreversible changes in a production environment. The output includes creating a new cluster, initializing Kubernetes components, and joining worker nodes to the cluster if applicable.'
        feature-gates: '[AI] `kubeadm init --feature-gates` is a command used to initialize a Kubernetes cluster using Kubeadm with specific feature gates enabled. Feature gates are experimental or beta features in Kubernetes that can be enabled or disabled at the time of cluster creation or update. Enabling these features may require additional configuration and can impact compatibility and stability. By passing `--feature-gates` option to `kubeadm init`, you can enable specific feature gates, such as "PodPresetUseTaintManager", "ExperimentalScheduling", etc., to customize the behavior of your Kubernetes cluster.'
        ignore-preflight-errors: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `--ignore-preflight-errors` flag instructs `kubeadm` to proceed with initialization even if pre-flight checks report errors that would normally prevent the process from continuing. This can be useful in specific use cases, such as when dealing with complex environments or when attempting to resolve known issues. However, it''s important to note that ignoring these errors could potentially lead to unstable or non-functional clusters and should be used with caution.'
        image-repository: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The option `--image-repository` specifies the container registry where the official Kubernetes images are pulled from during installation. By default, this is set to the Google Container Registry (gcr.io). You can change it to another registry, such as Docker Hub or a private registry, by providing its URL in this option. For instance: `kubeadm init --image-repository=myregistry.com/`.'
        kubernetes-version: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `--kubernetes-version` flag specifies which version of Kubernetes should be downloaded and installed during the initialization process. This flag is important because it allows you to choose the desired Kubernetes version to run on your cluster, ensuring that all nodes in the cluster will have the same version of Kubernetes for consistent operation.'
        node-name: '[AI] `kubeadm init --node-name` is a command used to bootstrap a Kubernetes cluster using Kubeadm, an open-source tool for initializing clusters and joining nodes. The `--node-name` flag specifies the name of the current node that is being initialized as a worker node in the cluster. After running this command, the node will be added to the cluster, join the control plane, and start the kubelet and kube-proxy services. This allows the node to become part of the Kubernetes cluster and manage containers.'
        patches: '[AI] `kubeadm init --patches` is a command-line option used with Kubeadm, an open-source project used for initializing and managing Kubernetes clusters. This option allows you to apply custom patches in the form of JSON files during the initialization process. These patches can include things like adding new features or addressing security vulnerabilities. By providing one or more patch files with `--patches`, you can modify the behavior of Kubeadm and customize your cluster configuration.'
        pod-network-cidr: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `--pod-network-cidr` option is used to specify the CIDR block (IP address range) for the cluster''s pod network. This is necessary to ensure that each pod in the cluster has a unique IP address, and that communication between pods within the cluster functions properly. When you run `kubeadm init --pod-network-cidr=<CIDR>`, Kubernetes initializes the control plane components, sets up the required networking (using a separate CNI plugin if specified), and generates the necessary joining commands for worker nodes. The given CIDR block is then assigned to the pod network, and used to allocate IP addresses for all pods in the cluster.'
        service-cidr: '[AI] `kubeadm init` is a command used to bootstrap a Kubernetes cluster using Kubeadm, an open-source tool for initializing clusters and joining nodes. The `--service-cidr` flag is an option provided with this command that allows you to specify the CIDR (IPv4 or IPv6 address block) for Kubernetes services within the cluster. This option helps prevent potential IP address conflicts between your service subnets and other networks in your infrastructure. The default CIDR block for this flag is `10.96.0.0/12`, but you can customize it as needed.'
        service-dns-domain: '[AI] `kubeadm init` is a command-line tool for initializing a Kubernetes cluster using kubeadm, a component of Kubernetes that handles the setup and configuration of a cluster. The `--service-dns-domain` flag specifies the domain name used by CoreDNS, the default service DNS for Kubernetes, to resolve service names within the cluster. For example, if you set `--service-dns-domain=example.com`, all services in your cluster will be accessible via DNS names with a `.example.com` suffix. This is important because Kubernetes relies heavily on DNS for service discovery and communication between components in a cluster.'
        skip-certificate-key-print: |-
            [AI] `kubeadm init` is a command-line utility for initializing a Kubernetes cluster using kubeadm, a tool for deploying and managing Kubernetes clusters. The `--skip-certificate-key-print` flag is an option that can be passed to this command when initializing a new master node in the cluster.

            When this flag is used, kubeadm will skip the step of printing out the certificate key for the root CA and server certificates, which are required to join worker nodes to the cluster or communicate with the API server using `kubectl`. Instead, these keys must be manually saved and distributed to other nodes in the cluster.

            In summary, the `--skip-certificate-key-print` flag is used when initializing a Kubernetes master node to prevent the printing of the certificate keys and assume that they will be handled manually or using other methods such as storing them in a secure key management system.
        skip-phases: '[AI] `kubeadm init --skip-phases` is a command used to initialize a Kubernetes cluster with kubeadm, but it skips the phases of installing and configuring a number of components such as Certificate Authority (CA), Kubelet, kube-apiserver, etcd, and others by default. This means that some critical parts of the cluster setup will not be performed, which could lead to an insecure or unstable cluster. It is recommended to use this flag only when you have a specific reason and plan to configure these components manually afterwards.'
        skip-token-print: '[AI] The `kubeadm init` command with the `--skip-token-print` flag is used to initialize a new Kubernetes cluster without printing the join token, which is a crucial piece of information required by worker nodes to join the cluster. This flag is useful when deploying clusters in secure environments where the join token should not be exposed during the initialization process. Instead, the token must be obtained through other means such as an external secure secret storage or manually creating it and distributing it to the worker nodes.'
        token: '[AI] `kubeadm init --token` is a command used to bootstrap a Kubernetes cluster using kubeadm, an open-source project to deploy and manage Kubernetes clusters. The `--token` flag generates a new token for authentication and authorization purposes. This token is required for joining worker nodes to the master node in the Kubernetes cluster. Once the token is generated during the initialization process, it''s essential to save it securely as it will not be displayed again. Later, when adding nodes to the cluster, the `kubeadm join` command uses this token to authenticate and join the worker nodes to the master node.'
        token-ttl: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `--token-ttl` option sets the time-to-live (TTL) for the initial bootstrap token generated during the cluster initialization process. This token is used to join worker nodes to the master node. A shorter TTL increases security by reducing the lifetime of the token, but may require more frequent token rotation. Conversely, a longer TTL reduces the frequency of token rotation but may increase security risks if the token is compromised.'
        upload-certs: '[AI] `kubeadm init --upload-certs` is a command used to bootstrap a new Kubernetes cluster using kubeadm. The `--upload-certs` flag instructs kubeadm to upload the generated Certificate Authority (CA), client certificate, and server certificate to the cluster''s Etcd database instead of writing them to files. This is useful for automated installation processes or when working with cloud providers that manage certificates. By keeping the certificates in the Etcd database, they can be accessed by other nodes joining the cluster without requiring manual file transfer.'
