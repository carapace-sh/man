# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: config
description: Configure Flutter settings
flags:
    --analytics: Enable reporting anonymously tool usage statistics and crash reports.
    --android-sdk=: The Android SDK directory.
    --android-studio-dir=: The Android Studio install directory.
    --build-dir=: The relative path to override a projects build directory.
    --clear-features: Remove all configured features and restore them to the default values.
    --clear-ios-signing-cert: Clear the saved development certificate choice used to sign apps for iOS device deployment.
    --enable-android: Enable Flutter for Android.
    --enable-custom-devices: Enable Early support for custom device types.
    --enable-fuchsia: Enable Flutter for Fuchsia.
    --enable-ios: Enable Flutter for iOS.
    --enable-linux-desktop: Enable beta-quality support for desktop on Linux.
    --enable-macos-desktop: Enable beta-quality support for desktop on macOS.
    --enable-web: Enable Flutter for web.
    --enable-windows-desktop: Enable beta-quality support for desktop on Windows.
    --enable-windows-uwp-desktop: Enable  Flutter for Windows UWP.
    --no-analytics: Disable reporting anonymously tool usage statistics and crash reports.
    --no-enable-android: Disable Flutter for Android.
    --no-enable-custom-devices: Disable Early support for custom device types.
    --no-enable-fuchsia: Disable Flutter for Fuchsia.
    --no-enable-ios: Disable Flutter for iOS.
    --no-enable-linux-desktop: Disable beta-quality support for desktop on Linux.
    --no-enable-macos-desktop: Disable beta-quality support for desktop on macOS.
    --no-enable-web: Disable Flutter for web.
    --no-enable-windows-desktop: Disable beta-quality support for desktop on Windows.
    --no-enable-windows-uwp-desktop: Disable Flutter for Windows UWP.
    --no-single-widget-reload-optimization: Disable Hot reload optimization for changes to class body of a single widget.
    --single-widget-reload-optimization: Enable Hot reload optimization for changes to class body of a single widget.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `flutter config` is a command used in Flutter development to configure global settings for the Flutter environment. It allows you to set up the path to the Flutter SDK, the default project directory, and other options that apply to all your Flutter projects. This command also provides an interface for users to check or update their current Flutter configuration.'
    flag:
        analytics: '[AI] `flutter config --analytics` is a command-line tool used in Flutter development to enable or disable application analytics reporting for Firebase. When run with this command, it sets up the necessary configurations for Flutter projects to use Firebase Analytics, allowing developers to gather and analyze usage statistics and user behavior data from their apps. If analytics are already enabled, running this command again will confirm the current status.'
        android-sdk: '[AI] `flutter config --android-sdk` is a command used in Flutter development to configure the Android Studio project settings with respect to the location of the Android SDK. This command sets the path to the desired Android SDK directory, which is necessary for building and running Flutter applications on the Android platform. Ensuring this path is correctly set can prevent build errors and ensure proper compatibility with target Android devices or versions.'
        android-studio-dir: '[AI] `flutter config --android-studio-dir` is a command used in the Flutter framework to configure the path to Android Studio on your local machine. By setting this option, Flutter knows where to find and use Android Studio for building and testing your Android applications. This command ensures a smooth development workflow by avoiding potential issues with version mismatches or incorrect paths between Flutter, Dart SDK, and Android Studio.'
        build-dir: |-
            [AI] The `flutter config --build-dir` command is used to configure the build output directory for a Flutter project. When you run `flutter build`, by default, the built artifacts will be generated in the `build` directory under your project's `lib` directory. However, you can change this output directory using the `--build-dir` option. For example, if you want to generate the build outputs in a folder named "output" instead of the default location, you would use:

            ```bash
            flutter config --build-dir output
            ```

            After executing this command, the build output directory for your project will be set to `./output`. From then on, whenever you run `flutter build`, the artifacts will be generated in that location.
        clear-features: '[AI] `flutter config --clear-features` is a command used in Flutter development to clear any previously set features for the project. When you run this command, it resets the configured features back to their default values, which are typically an empty list. This can be useful if you''ve accidentally or intentionally set features that are causing issues and you want to start fresh.'
        clear-ios-signing-cert: '[AI] The `flutter config --clear-ios-signing-cert` command is used to clear the iOS signing certificates and provisioning profiles configuration in a Flutter project. This can be helpful when you need to reset your project''s signing settings, for instance if you''ve changed your Apple Developer account credentials or if you encounter issues with the certificates and provisioning profiles. Running this command will erase all existing configurations, so you will need to reconfigure them afterwards using Xcode and the Flutter CLI or by manually adding the required certificates and provisioning profiles to your project.'
        enable-android: '[AI] `flutter config --enable-android` is a command used in Flutter development to enable the Android Operating System (OS) support for building and running applications. It configures Flutter''s build system, named Fluttertools, by adding the necessary Android-specific files, such as `build.gradle`, to the project structure. This allows you to use native Android libraries and build APKs (Android Packages) using tools like Gradle or Android Studio.'
        enable-custom-devices: '[AI] `flutter config --enable-custom-devices` is a command used in Flutter, a mobile app development framework by Google. This command enables support for custom devices during project configuration. Custom devices refer to physical or virtual devices that are not recognized by default during development and testing. By running this command, Flutter''s toolchain is configured to recognize these custom devices when building or testing applications, enabling seamless development experience on those devices.'
        enable-fuchsia: '[AI] The command `flutter config --enable-fuchsia` is used to enable support for Google''s Fuchsia operating system in the Flutter development environment. This allows developers to build and test Flutter applications on Fuchsia instead of the more commonly used platforms like Android or iOS. Enabling this option may require additional setup steps, including installing the Fuchsia emulator and SDK. Using this command configures your Flutter project to recognize Fuchsia as a target platform.'
        enable-ios: '[AI] `flutter config --enable-ios` is a command used in Flutter development to enable support for building iOS applications within the Flutter project. It configures the Flutter environment by adding required tools and settings to the `.yaml` file under the `.pubspec.yaml` or `.fluttercaret` directory, allowing Flutter to build and run projects on Apple''s iOS platform.'
        enable-linux-desktop: '[AI] `flutter config --enable-linux-desktop` is a command used in Flutter, a mobile application development framework by Google. This command enables the Linux desktop mode for Flutter, allowing users to build and run applications as native desktop applications on Linux distributions instead of just building web or mobile projects. It sets up the necessary tools, such as the Yarn package manager and the FFI binding generator, required for this purpose.'
        enable-macos-desktop: '[AI] `flutter config --enable-macos-desktop` is a command used in Flutter development to enable support for building and running native applications on macOS desktops. This command modifies the `.yamll` file located in `~/.config/flutter/` by adding or updating the necessary settings related to the MacOS desktop, such as the channel, enabling the Desktop Embedder, and setting up the toolchain for the platform. With this command enabled, you can use Flutter to build standalone applications for macOS desktops that run outside of a web browser or the Flutter webview.'
        enable-web: '[AI] The `flutter config --enable-web` command is used to enable Flutter support for web development in your project. When you run this command in your terminal or command prompt, Flutter will configure your project to include the necessary tools and dependencies for building and running Flutter applications on the web using Dart''s web component library. This command does not create a new web application but prepares an existing Flutter project for web development.'
        enable-windows-desktop: '[AI] The `flutter config --enable-windows-desktop` command is used to enable support for building and running Flutter applications as desktop apps on the Windows platform within the Flutter development environment. This command configures Flutter''s build system, named `flutter`, to include the necessary components, such as the Flutter Desktop Embedder, for creating desktop applications using the Flutter framework.'
        enable-windows-uwp-desktop: '[AI] The `flutter config --enable-windows-uwp-desktop` command is used to enable support for building a Universal Windows Platform (UWP) desktop app using Flutter on a Windows operating system. UWP apps can run on a variety of devices, including PCs, tablets, and phones, and they are packaged as AppX bundles for distribution through the Microsoft Store or other channels. By enabling this option, Flutter will configure your development environment to include the necessary tools and templates for creating and building UWP desktop projects.'
        help: '[AI] `flutter config --help` is a command used in Flutter, a mobile app development framework. This command displays help information about the `flutter config` tool. It allows users to configure global settings for their Flutter development environment, such as setting up the path to the Dart SDK or the default project directory. By running this command with the `--help` flag, users can view a list of all available options and their descriptions, helping them to properly configure their setup for successful Flutter development.'
        no-analytics: '[AI] The `flutter config --no-analytics` command is used to configure Flutter development environment with the option to disable Flutter''s usage reporting and diagnostics collection. This means that Flutter will not collect or send any data about your project or development environment to Google for analytics purposes. By using this command, you can ensure more privacy during your Flutter development process.'
        no-enable-android: '[AI] `flutter config --no-enable-android` is a command used in Flutter development to configure the project settings. Specifically, it disables the enabling of the Android subproject in the .git/config file. This means that Flutter will not automatically set up the Android environment for building and running the app on an Android device or emulator. If you have already set up the Android environment outside of Flutter or prefer to manage it manually, using this command can help prevent unnecessary configuration conflicts.'
        no-enable-custom-devices: '[AI] The `flutter config --no-enable-custom-devices` command is used to disable the enabling of custom devices during Flutter project configuration. Flutter supports building and testing applications for various devices and emulators. Custom devices refer to hardware or emulators not recognized by Flutter by default. When this command is run, Flutter will skip the process of enabling such devices during configuration, meaning that those devices won''t be available for building or testing your application. This can be useful if you want to keep your project setup simple and focused on supported devices only.'
        no-enable-fuchsia: '[AI] The command `flutter config --no-enable-fuchsia` is used to configure the Flutter development environment without enabling the Fuchsia operating system support. Fuchsia is an open-source operating system project by Google, and enabling it during Flutter configuration installs additional components and tools related to Fuchsia development. However, if you don''t need these components for your project, you can use this command to keep your Flutter installation leaner and faster.'
        no-enable-ios: '[AI] The `flutter config --no-enable-ios` command is used to prevent Flutter from enabling and setting up the iOS development environment during configuration. This means that even if you have Xcode and other required tools installed on your system, they will not be configured for use with Flutter. If you want to develop for iOS using Flutter but already have the setup in place, you can simply skip this step during configuration.'
        no-enable-linux-desktop: |-
            [AI] The `flutter config` command is a utility provided by the Flutter framework to configure various aspects of the development environment. The specific option `--no-enable-linux-desktop` disables the Linux desktop mode for Flutter when running on Ubuntu or other Linux distributions.

            By default, Flutter enables Linux desktop mode which provides a graphical interface for running and debugging applications. However, some developers might prefer to use the command line interface (CLI) instead, especially for headless builds or continuous integration environments where a GUI is not required. The `--no-enable-linux-desktop` option disables this feature, allowing Flutter to be used solely through the CLI.
        no-enable-macos-desktop: '[AI] The `flutter config --no-enable-macos-desktop` command is used to prevent Flutter from enabling the development of a MacOS desktop application during its configuration process. This command is useful for developers who only intend to build mobile applications using Flutter, and do not wish to set up the additional environment required for creating desktop apps on macOS. By executing this command, Flutter will exclude the necessary setup and installation of the necessary dependencies for MacOS desktop development during its configuration.'
        no-enable-web: '[AI] `flutter config --no-enable-web` is a command used in Flutter development to configure the Flutter environment. Specifically, this command disables the enabling of the web target in the Flutter project. The web target allows developing applications for the browser using Flutter. By running this command, developers prevent the web target from being enabled during the configuration process.'
        no-enable-windows-desktop: '[AI] The command `flutter config --no-enable-windows-desktop` is used to disable the enabling of the Flutter desktop support for Windows during configuration. When running this command, Flutter will not install or configure the necessary tools and dependencies for building desktop applications using the Flutter framework on a Windows system. This can be useful if you don''t intend to develop desktop applications with Flutter on that particular setup.'
        no-enable-windows-uwp-desktop: '[AI] The `flutter config --no-enable-windows-uwp-desktop` command is used to prevent Flutter from enabling Windows UWP desktop support during configuration. When you run this command in your terminal or command prompt, Flutter will not enable the development of Universal Windows Platform (UWP) desktop apps using its desktop mode. This means that when you create a new project or build an existing one, it will not include the UWP desktop target by default.'
        no-single-widget-reload-optimization: '[AI] The `flutter config --no-single-widget-reload-optimization` command is used to disable a Flutter development optimization feature called "Single Widget Rebuilds Optimization." This feature, enabled by default, helps improve rebuild performance by only rebuilding the widget tree that has changed when a hot reload or hot restart is triggered. However, in some cases, developers may want to rebuild the entire app during development for various reasons, such as testing or debugging, and this command can be used to disable the optimization to ensure a full app rebuild occurs during each run.'
        single-widget-reload-optimization: '[AI] The `flutter config --single-widget-reload-optimization` command is used to enable or disable single widget reload optimization in Flutter. This optimization is a performance enhancement that reduces the amount of code rebuilt during hot reloads, making it faster for developers to see changes reflected in the app. When enabled, only the changed widget and its descendants are rebuilt during a hot reload instead of the entire subtree. By default, this option is disabled, but can be enabled using the command above.'
