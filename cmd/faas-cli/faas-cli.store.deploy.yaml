# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: deploy
description: Deploy OpenFaaS functions from a store
flags:
    --annotation*=: Set one or more annotation (ANNOTATION=VALUE)
    --constraint*=: Apply a constraint to the function
    --name=: Name of the deployed function (overriding name from the store)
    --network=: Name of the network
    --replace: Replace any existing function
    --secret*=: Give the function access to a secure secret
    --tls-no-verify: Disable TLS validation
    --update: Update existing functions
    -e, --env*=: Adds one or more environment variables to the defined ones by store (ENVVAR=VALUE)
    -g, --gateway=: Gateway URL starting with http(s)://
    -k, --token=: Pass a JWT token to use instead of basic auth
    -l, --label*=: Set one or more label (LABEL=VALUE)
    -n, --namespace=: Namespace of the function
documentation:
    command: '[AI] `faas-cli store deploy` is a command used in the FaaS (Function-as-a-Service) CLI toolchain for managing serverless functions. This specific command is responsible for deploying functions that have been previously built and stored in the local repository to a selected backend, such as OpenFaas or Concourse. The command takes care of packaging the function, authenticating with the backend, and triggering the deployment process, ensuring the latest version of the function is available for execution in the cloud environment.'
    flag:
        annotation: '[AI] The `faas-cli store deploy --annotation` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a function to a specific storage backend, such as S3 or Contrast.io. The `--annotation` option allows you to add custom metadata key-value pairs to the deployed function. This can be useful for adding additional information about the function that is not part of its code or configuration. The annotation data is stored alongside the function in the backend and can be retrieved later for querying or filtering purposes.'
        constraint: |-
            [AI] The `faas-cli store deploy --constraint` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a function to a specific constraint or instance of a Faas provider, such as OpenFaaS or AWS Lambda.

            The `--constraint` flag allows you to specify which constraint to deploy the function to. A constraint can be defined based on various attributes like region, memory limit, CPU limit, etc. By using this flag, you ensure that your function is deployed to the desired instance or environment, meeting specific resource requirements.
        env: '[AI] `faas-cli store deploy --env` is a command used with the FaaS-CLI (Function as a Service Command Line Interface) tool. This command deploys a function from your local storage to a specific Faas-based platform, such as OpenFaas or OpenWhisk. The `--env` flag indicates that environment variables are being passed along with the deployment. These variables will be assigned to the environment of the deployed function.'
        gateway: '[AI] The `faas-cli store deploy --gateway` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a function written in Faas format to a storage service, such as S3 or Azure Blob Storage, and simultaneously create or update a corresponding API gateway. The gateway manages and exposes the functions as RESTful APIs. This command simplifies the deployment process by handling both the storage and gateway configuration in one step.'
        label: '[AI] `faas-cli store deploy --label` is a command used with the FaaS (Function-as-a-Service) CLI tool to deploy a function to a local or remote storage, such as an S3 bucket or a FAAS OS. The `--label` option allows you to assign a custom key-value pair metadata to the deployed function for better organization and identification.'
        name: '[AI] The `faas-cli store deploy --name` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a function stored in the local FaaS store to a specific Faas provider such as OpenFaas or AWS Lambda. The `--name` flag is used to specify the name of the function to be deployed.'
        namespace: |-
            [AI] The `faas-cli store deploy --namespace` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a function from your local storage to a specific Kubernetes namespace. Here's a brief explanation of its components:

            * `faas-cli`: This refers to the FaaS CLI tool, which is used to develop, build, and deploy serverless functions.
            * `store`: This is an action provided by the Faaas-cli for managing local function storage. It is used to build and store functions locally before deploying them.
            * `deploy`: This is the main action that the CLI provides to deploy stored functions to a target platform, such as Kubernetes.
            * `--namespace`: This is an optional flag that specifies the Kubernetes namespace where you want to deploy your function. If not provided, the default namespace will be used.
        network: '[AI] `faas-cli store deploy --network` is a command used with the FaaS CLI (Function as a Service Command Line Interface) tool. This command deploys a function from your local storage to a Faas-compatible runtime, such as OpenFaas or OpenWhisk. The `--network` flag specifies that the deployment includes a network configuration for the function, allowing it to communicate with other services or access external resources.'
        replace: '[AI] The `faas-cli store deploy --replace` command is used with the FaaS (Function-as-a-Service) CLI tool to deploy a new version of an existing function stored in the local FaaS store, replacing the currently deployed version. This command overwrites the previously deployed function with the latest local version before deploying it to the target cloud provider or infrastructure.'
        secret: '[AI] The `faas-cli store deploy --secret` command is used with the FaaS-CLI (Function-as-a-Service Command Line Interface) tool to deploy a secret in the FaaS-native storage. Secrets are sensitive data, such as API keys or authentication tokens, that should be kept confidential. By using this command, you can securely store and retrieve secrets for your serverless functions without hardcoding them directly in your function code or config files. This helps improve security and compliance in your FaaS environment.'
        tls-no-verify: '[AI] `faas-cli` is a command-line interface tool for deploying functions as a service (FaaS) using the OpenFaaS platform. The specific command `faas-cli store deploy --tls-no-verify` is used to deploy functions from a local store to an OpenFaaS gateway or provider, bypassing TLS certificate verification. This can be useful for testing or insecure environments where certificate validation may not be possible or desirable. However, using `--tls-no-verify` comes with security risks as it disables the important security check of verifying the TLS certificates presented by the server. Therefore, it should only be used with caution and under controlled circumstances.'
        token: '[AI] The `faas-cli store deploy --token` command is used with the FaaS-CLI (Function as a Service Command Line Interface) tool. This command deploys a function to a specific FAAS (Function as a Service) store, such as Concourse CI or OpenFaas. The `--token` option provides an authentication token for secure access to the store''s API. By using this command, developers can easily deploy their functions and manage their applications in a cloud-native environment.'
        update: '[AI] `faas-cli store deploy --update` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command is used to update an existing function deployment in the local Faaas-cli store. The `--update` flag instructs the command to use an existing function definition in the store and update its deployed version with new changes, such as code modifications or configuration updates. The updated function will be deployed to the selected backend, such as AWS Lambda or Google Cloud Functions.'
