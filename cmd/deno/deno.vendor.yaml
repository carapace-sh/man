# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: vendor
description: Vendor remote modules into a local directory
flags:
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --lock=: Check the specified lock file
    --no-config: Disable automatic loading of the configuration file.
    --output=: The directory to output the vendored modules to
    --unstable: Enable unstable features and APIs
    -c, --config=: Specify the configuration file
    -f, --force: Forcefully overwrite conflicting files in existing output directory
    -h, --help: Print help information
    -q, --quiet: Suppress diagnostic output
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno vendor` is a command-line tool provided by Deno, a modern JavaScript runtime. It is used for managing and installing external dependencies required in a Deno project, ensuring consistent versions across multiple projects or team members. The command reads the import map (a file named `importmap.json`) of the project to identify the needed packages, then downloads, installs, and adds the vendor directory with the exact installed dependencies. This approach allows for isolation, reproducibility, and efficient caching of package versions.'
    flag:
        cert: '[AI] The `deno vendor --cert` command is a utility provided by Deno, a modern and secure TypeScript runtime. This command is used to download and manage external dependencies for a Deno project with SSL certificates. When you run this command in the terminal, it will search for import statements in your `tsconfig.json` file and download the required packages along with their dependencies. It also saves these packages in the `vendor/` directory as encapsulated modules, which ensures that the exact versions of the packages used during development are used when running the application. Additionally, it downloads SSL certificates for secure connections to remote servers and stores them in the `certs/` subdirectory. This helps ensure secure communications with external APIs or services when your Deno application makes network requests.'
        config: '[AI] `deno vendor --config` is a command used in Deno, a modern JavaScript runtime. It creates an offline-ready package directory for the specified project by downloading and installing the required dependencies from the deno.land registry directly into the project''s vendor folder. The `--config` option specifies a Deno configuration file (deno.json or deno.mjs) in the current working directory to use for resolving dependencies.'
        force: '[AI] `deno vendor --force` is a command-line utility provided by Deno, a modern runtime for JavaScript and TypeScript. This command is used to install external dependencies and lock their versions in the project''s vendor folder. The `--force` flag means that even if the current project already has some of these dependencies installed, it will replace them with the latest version specified in the project''s `deno.jsonc` file. It ensures consistency across projects when collaborating with others or working on different environments.'
        help: '[AI] `deno vendor --help` is a command used in Deno, a modern and secure TypeScript runtime. This command is part of Deno''s tooling to manage external dependencies for projects. The `--help` flag is an option that provides detailed usage information about the `deno vendor` command. It displays the purpose of the command, its syntax, and available options, helping users understand how to effectively use this tool to install and manage their project''s external dependencies.'
        import-map: '[AI] The `deno vendor --import-map` command is a utility provided by Deno, a modern and secure TypeScript runtime. This command generates an import map file that maps external packages to local, cached versions. It creates a file in JSON format (`vendor.json`) which can be used by the browser or Deno''s `importMap.js` module to resolve dependencies efficiently without having to download them from the network each time. By using this command, you can optimize your project''s performance and reduce the latency of importing external modules.'
        lock: '[AI] The `deno vendor --lock` command is a utility provided by Deno, a modern and secure TypeScript runtime. It is used for managing dependencies in Deno projects. Specifically, it generates a `vendor.json` file, which locks the exact versions of all imported modules at the time of running this command. This allows for deterministic builds and consistent behavior across different machines or environments. In summary, `deno vendor --lock` is a tool to manage project dependencies with explicit versioning for Deno applications.'
        no-config: '[AI] `deno vendor --no-config` is a command used in Deno, a TypeScript-based runtime. This command generates and manages external package dependencies for Deno projects. The `--no-config` flag disables the use of a configuration file (denomed.json) when running the command. It means that Deno will vendor all dependencies listed in the project''s import map (importmap.json) directly, without considering any overrides or customizations from the configuration file.'
        output: '[AI] `deno vendor --output` is a command-line option used with Deno, a modern JavaScript runtime. This flag instructs Deno''s bundling tool, "vendor," to output the generated bundle of third-party dependencies into a specific directory after bundling them for use within your project. The flag accepts a required argument which is the desired output directory path. For instance: `deno vendor --output=./vendor` would output the vendored dependencies into the `./vendor` folder.'
        quiet: '[AI] `deno vendor --quiet` is a command used in Deno, a modern JavaScript runtime. It''s used to install external dependencies and manage their versions in a Deno project. The `--quiet` option is used to suppress informational output during the execution of the command, making the console cleaner while automating the build process.'
        reload: |-
            [AI] `deno vendor --reload` is a command used in Deno, a type-safe and modern runtime for JavaScript and TypeScript. It is utilized to manage project dependencies and automatically updates them when changes are detected in the Deno modules or their source repositories.

            The `--reload` flag instructs Deno to monitor the specified project directories for any dependency updates or changes and applies them in real-time without requiring a manual run of the `deno install` command. This streamlines the development process, ensuring that your projects always have the latest dependencies.
        unstable: '[AI] `deno vendor --unstable` is a command used in Deno, a modern and secure TypeScript runtime. This command is used to download external dependencies and lock their versions at the project level, ensuring consistent behavior across different environments. The `--unstable` flag indicates that Deno should use the latest, potentially unstable, versions of the dependencies instead of the stable ones. This can be useful for testing new features or staying up-to-date with the latest development in external projects.'
