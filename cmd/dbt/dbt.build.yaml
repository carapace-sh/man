# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
description: Run all Seeds, Models, Snapshots, and tests in DAG order
flags:
    --defer: Defer to the state variable for resolving unselected nodes
    --exclude*=: Specify the models to exclude
    --favor-state: Defer to the state variable for resolving unselected nodes
    --indirect-selection: Select all tests that are adjacent to selected resources
    --log-path=: Configure the 'log-path'
    --no-defer: Do not defer to the state variable for resolving unselected nodes
    --no-favor-state: Expect standard defer behaviour
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml file
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --resource-type=: Limit by resource type
    --selector=: The selector name to use, as defined in selectors.yml
    --state=: Use the given directory as the source for json files to compare
    --store-failures: Store test results (failing rows) in the database
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    -f, --full-refresh: Drop incremental models and fully-recalculate
    -h, --help: show this help message and exit
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
    -x, --fail-fast: Stop execution upon a first failure
documentation:
    command: |-
        [AI] `dbt build` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command is responsible for compiling your dbt project's models, which are written in SQL or other data manipulation languages like MongoDB, into SQL files, creating an output directory with the compiled files, and generating metadata such as dependency graphs and schema information.

        By default, `dbt build` only performs the build process without running the tests. If you want to run both the build and tests, use `dbt run` instead.
    flag:
        defer: '[AI] `dbt build --defer` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command instructs dbt to build and materialize the results of selected models but without running any tests or performing any validation checks. The `--defer` flag signifies that the results will be "deferred," meaning the data will be stored in the defined output files, but dbt will not raise an error if there are issues with the logic or schema of the models. This command can be useful when you want to quickly generate the output of a model without incurring the time and resources required for testing and validation. However, using `--defer` should be done with caution as it bypasses important checks that help ensure data correctness and reliability.'
        exclude: '[AI] `dbt build --exclude` is a command used in dbt (data build tool), which allows users to exclude specific models or artifacts from being built during the build process. The `--exclude` option takes one or more arguments, which can be either model names or paths to artifact files. This can be useful when you want to skip building certain artifacts due to maintenance or testing reasons without affecting the rest of your data pipeline.'
        fail-fast: '[AI] `dbt build --fail-fast` is a command in dbt (data build tool), which instructs dbt to run its data building process, but stop at the first failure without continuing to execute other models. This flag improves development experience by reducing the time spent on diagnosing and fixing unrelated model errors that may occur during the build process. It''s particularly useful in continuous integration environments where you want to identify and address issues as soon as possible.'
        favor-state: '[AI] `dbt build --favor-state` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command instructs dbt to prioritize using previously materialized results of queries, instead of rebuilding those queries from scratch. It improves performance by reducing the time needed for query execution and data transformation. The `--favor-state` flag tells dbt to use the most recent state of the materializations that are available and meet the specified profile conditions. If no such materialization exists or if it is outdated, then the corresponding queries will be run again to produce new results.'
        full-refresh: |-
            [AI] `dbt build --full-refresh` is a command used in dbt (data build tool) for data transformation and orchestration. This command does the following:

            1. Clears the dbt cache to ensure all data models are rebuilt from scratch.
            2. Builds all data models defined in `dbt_project.yml` using their dependencies, applying any changes made to the models since the last build.
            3. Refreshes the materialized views (also known as facts or snapshots) based on the most recent data model outputs. This ensures that the aggregated and derived data in these views are up-to-date with the latest model transformations.
        help: '[AI] `dbt build --help` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command displays help information about the `dbt build` function. Specifically, it provides details on how to use this command to run data builds in dbt projects. The help output includes information on arguments, flags, and options for customizing the build process. It also explains the purpose of the `dbt build` command, which is to execute the data model transformations defined in a dbt project''s SQL files, producing materialized tables or other outputs.'
        indirect-selection: '[AI] `dbt build --indirect-selection` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command builds models that have dependencies on selected models, but do not directly depend on them. In other words, it builds models that are indirectly referenced by the model being built or tested. It''s useful when you want to build a specific branch of your data pipeline without having to build all the models in that branch first. This can save time and resources during development and testing processes.'
        log-path: '[AI] `dbt build --log-path` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command executes the build process for your dbt project, which compiles and runs your SQL models and tests them against your database. The `--log-path` option specifies the file path where the logs generated during the build process will be written to. It allows you to easily access and review the log files for troubleshooting or tracking the progress of your data pipeline.'
        no-defer: '[AI] `dbt build --no-defer` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command instructs dbt to immediately execute all pending builds, without adding them to the deferred queue for later execution. The `--no-defer` option overrides the default behavior of dbt, which is to add unfinished models or tests to the deferred queue if some errors occur during the build process. This flag can be useful when you want to ensure that all models are built and tested in one go without interruptions from other tasks or errors.'
        no-favor-state: '[AI] `dbt build --no-favor-state` is a command used in dbt (data build tool) for data transformation and orchestration. This specific command instructs dbt to build all models without applying any previously applied states. In other words, it forces a fresh build of all models from their source data, ignoring any previously saved state information. It''s useful when you want to ensure that your models start with the latest data, regardless of any prior runs or changes to the models themselves.'
        no-version-check: '[AI] `dbt build --no-version-check` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command skips the version check during the build process, which allows dbt to use the locally installed version of the project, ignoring any external or remote dependencies with specific versions. It can be useful when working on local development environments where having the exact same dependencies as in production may not be necessary or feasible.'
        profile: '[AI] `dbt build --profile` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command triggers the execution of dbt models using the specified profile. Profiles are configuration files that define different settings for connecting to databases, selecting specific models, or other customizations. The `--profile` option allows you to select a specific profile before building your data, ensuring the appropriate configurations are used during the transformation process.'
        project-dir: '[AI] `dbt build --project-dir` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command is utilized to build and materialize models in a dbt project, located in the specified directory passed as an argument `--project-dir`. It compiles dbt scripts into executable SQL, runs tests, and generates output files based on the defined model dependencies.'
        resource-type: '[AI] `dbt build --resource-type` is a command used in dbt (data build tool), which is an open-source data transformation and testing tool. This specific command instructs dbt to build and materialize resources of the specified type. Resources can be defined as artifacts derived from models, snapshots, or other dbt objects. By using `--resource-type`, you can selectively build only the resources of a particular type, such as materialized tables or snapshots, without re-running the entire model graph. This can save time and resources by avoiding unnecessary computations.'
        select: '[AI] `dbt build --select` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command is used to manually build specific models or artifacts defined in dbt projects. The `--select` flag allows users to specify the selective execution of models based on their names or keys. For example, running `dbt build --select model1 model3` would build only the models named `model1` and `model3`. This functionality is helpful when users want to quickly build specific models without building the entire project.'
        selector: '[AI] `dbt build --selector` is a command used in dbt (data build tool) to trigger the execution of specific models or tests based on selectors defined in their YAML configuration files. Selector is a key-value pair that allows filtering models during execution based on given criteria, such as environment, tags, etc. The `--selector` option followed by the selector name filters and builds only those models that match the specified selector. For example: `dbt build --selector environment:production`. This command will build and execute all models tagged with the ''environment:production'' selector.'
        state: '[AI] `dbt build --state` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command triggers a build of your dbt project using the most recently recorded state. It will not re-run tests or transformations that have already passed, which can save time if you''re only interested in running new or changed models. The `--state` flag tells dbt to use the last-known good state for the build instead of starting from scratch.'
        store-failures: '[AI] `dbt build --store-failities` is a command used in dbt (data build tool) to execute data builds and store any failed tests or materializations as artifacts for later analysis. This flag ensures that when a build encounters an error during the testing or materialization process, the failed artifacts are saved instead of being discarded. These artifacts can be accessed and investigated through dbt''s built-in reporting features or external tools for further troubleshooting. This helps developers quickly identify issues and improve data pipelines efficiently.'
        target: '[AI] `dbt build --target` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command triggers the execution of specific models or artifacts based on the provided target. The targets can be either model names or the special keyword "all", which executes all models in the project. The `dbt build` process also checks for and runs any tests related to the affected models, ensuring data validity.'
        target-path: '[AI] `dbt build --target-path` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command builds your dbt project, executes all tests, and outputs the artifacts to the specified target path. The flag `--target-path` allows users to specify where they want the output files to be saved. It ensures that each time the build is run, the output files are generated in a consistent location.'
        threads: '[AI] The `dbt build --threads` command in dbt (Data Build Tool) is used to run data building processes in parallel using multiple threads. This flag instructs dbt to utilize multiple CPU cores during the build process, which can significantly reduce the overall build time for large and complex data models. The number of threads used can be specified by providing an argument after the `--threads` flag (e.g., `dbt build --threads 4` to use 4 threads).'
