# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: search
description: search for packages
group: main
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --commit-lock-file: Commit changes to the flake's lock file
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --inputs-from=: Use the inputs of the specified flake as registry entries
    --json: Produce output in JSON format, suitable for consumption by another program
    --log-format=: Set the format of log output
    --no-registries: Don't allow lookups in the flake registries
    --no-update-lock-file: Do not allow any updates to the flake's lock file
    --no-write-lock-file: Do not write the flake's newly generated lock file
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --override-input=: Override a specific flake input (e.g. dwarffs/nixpkgs)
    --quiet: Decrease the logging verbosity level
    --recreate-lock-file: Recreate the flake's lock file from scratch
    --update-input=: Update a specific flake input (ignoring its previous entry in the lock file
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -e, --exclude: Hide packages whose attribute path, name or description contain regex
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] `nix search` is a command in Nix Package Manager used to search for available packages in the Nix Expressions or channels repository. The command takes one or more keywords as arguments and returns a list of matching packages along with their descriptions. For example, `nix search hello` would return information about any package that has "hello" in its name or description. This can help users discover and install new packages for their Nix-managed systems.'
    flag:
        arg: '[AI] `nx search --arg` is a command in Nx, a DevOps toolkit built with Angular and other technologies. This command performs a search operation using Nx''s built-in search functionality. The `--arg` flag is used to pass an argument to the search query. For example, you might use `nx search --arg=component myComponentName` to find all files related to a specific component in your Nx project.'
        argstr: '[AI] `nix search --argstr` is a command in Nix Package Manager used to search for available packages. The `--argstr` option allows specifying an argument string that will be treated as a Nix expression, enabling more precise searches. For instance, `nix search --argstr ''name ~ "firefox"'' can be used to find packages with names containing the string "firefox".'
        commit-lock-file: |-
            [AI] The `nix search --commit-lock-file` command is used in Nix, a package manager for Linux and other Unix systems. This command searches for available versions of a specific package in the Nix expression language repository but with an added feature: it creates or updates a commit-lock file.

            The commit-lock file is essential when working in a team or collaborative environment as it helps ensure that all team members install the same version of a package, preventing potential conflicts due to different versions being used. The commit-lock file specifies the exact hash of the desired package version.

            By including `--commit-lock-file` in the search command, Nix automatically generates or updates the commit-lock file with the information from the search results, ensuring that when you install a package using this lock file, everyone on your team will have the same package version.
        debug: '[AI] `flag "nix search --debug"` is a command-line argument used with Nix, a package manager for Linux and other Unix systems. This flag enables debug mode for the `nix search` command, which is used to search for available packages in Nix''s package collection. In debug mode, Nix provides more detailed output and diagnostic information, making it useful for troubleshooting and understanding complex search queries.'
        debugger: '[AI] `flag "nix search --debugger"` is a command-line option used with Nix Package Manager''s search function. It enables the use of Nix expression evaluation debugger, which provides an interactive interface for examining expressions and their execution. This can be helpful in troubleshooting complex queries or understanding the inner workings of Nix expressions.'
        eval-store: '[AI] `flag "nix search --eval-store"` is a Nix package manager command option used to evaluate and store expressions in the Nix expression language without actually building or installing anything. It allows you to compute the value of an expression, which can be useful for testing and debugging purposes, as well as for evaluating complex expressions that may take some time to execute. The result is stored in the current Nix expression context for later use.'
        exclude: '[AI] The `--exclude` option in the `nix-env` or `nix-build` command from Nix Package Manager is used to exclude specific paths or files from the search scope during package installation or building. This can be helpful when you want to avoid installing unnecessary packages or overwriting certain files unintentionally. The argument for this option should be a pattern that matches the files or directories you wish to exclude. For example, `--exclude ''*.log''` will exclude all files with .log extension from the search scope.'
        impure: |-
            [AI] The `nx search --impure` command is a part of Nx, a DevOps platform built with Angular and other technologies. This specific command is used to perform an impure search across all projects in the workspace.

            Impure search means that it considers not only exact matches but also approximate matches based on file contents. It scans through files' textual content for the given search query, making it more flexible than a pure search which only looks at file paths and names.

            This command helps developers efficiently find references to specific keywords or phrases across multiple projects within an Nx workspace without having to manually inspect each project individually.
        include: '[AI] `find` command in Nix, a package manager for Linux and other Unix systems, has an option called `--include` which is used to include specific patterns in the search. This means that only files with the specified pattern in their name will be searched and found by the command. For instance, `find . -name "*.txt" --include "pattern"` would find all ".txt" files with the name matching the given pattern.'
        inputs-from: |-
            [AI] `nix-search` is a command-line utility in Nix packaging system used to search for available package builds. The `--inputs-from` option specifies a file or a list of files from which the search should be performed. This can include Nix expressions (`.nix`) files, channels, or direct URLs. For example:

            ```bash
            $ nix-search --expression <path_to_nix_file> --inputs-from mychannel.nix
            ```

            This command will search for packages in the given Nix expression file and also in `mychannel.nix`. The option can also be used with multiple files:

            ```bash
            $ nix-search --expression <path_to_nix_file> --inputs-from file1.nix file2.nix channel.nix
            ```

            This command will search for packages in the given Nix expression file, `file1.nix`, `file2.nix`, and the specified channel.
        json: '[AI] `flag "nix search --json"` is a command-line option used with Nix Package Manager to perform a search for packages and return the results in JSON format. This can be useful for automating tasks or integrating with other systems that require data in this format. The flag modifies the behavior of the ''nix search'' command, which normally displays search results in the terminal, by providing JSON output instead.'
        log-format: '[AI] `flag "nix search" --log-format` is an option in Nix packaging system used to customize the format of the logs generated during a search operation. The log format string specifies how various pieces of information, such as the searched package name, version, and availability status, should be displayed in the output. For example, `--log-format=''%N %v %b''` would display the searched package name (%N), version (%v), and availability (%b) in the log.'
        no-registries: '[AI] The `nix-search` command is a utility in Nix package manager for searching available packages. The `--no-registries` option instructs it to search only in the local Nix store rather than consulting remote registries. This can be useful when you want to check which packages are already installed locally or to avoid network access during CI builds.'
        no-update-lock-file: '[AI] `nix-search` is a command-line utility from Nix package manager used to search for available packages in the Nix expressions or channels. The `--no-update-lock-file` option is passed to prevent `nix-search` from updating the lock file during the search process. This can be useful when you want to perform a quick search without affecting your current system configuration or if you''re working offline and don''t have access to the latest channel updates. By omitting this flag, `nix-search` would update the lock file with the results of the search, which may not be desired in certain situations.'
        no-write-lock-file: '[AI] `nix search` is a command-line utility in Nix Pakages Manager used to search for available package versions. The option `--no-write-lock-file` is passed to prevent the creation of a write lock file while performing the search operation. A write lock file is used by Nix to ensure that multiple processes don''t modify the same database concurrently, ensuring data consistency. By skipping this option, searches can be performed more quickly but at the risk of potential conflicts if multiple users are searching the Nix expression language repository simultaneously.'
        override-flake: '[AI] `nix-search --override-flakes` is a command provided by Nix, a package manager for Linux and other systems. This command searches for available Nix expressions in the system''s channels, allowing users to install or update packages. The `--override-flakes` option tells Nix to prioritize using the specified flake (a new type of package in Nix) over any existing ones, even if they have the same name and version. This can be useful when debugging or working with unstable or custom packages.'
        override-input: |-
            [AI] `flag "nix search" with subcommand "--override-input"` is a Nix expression used to modify the input given to a Nix command or function before it's searched. Instead of using the default input, the `--override-input` option allows you to provide a specific value for the search. For instance, in a Nix expression:

            ```nix
            { search, pkgs }: search { name = "myPackage"; } --override-input "{ version = "1.0.2"; }
            ```

            This command searches for the package named `myPackage`, but sets its version to `1.0.2` before executing the search, ensuring that only the version `1.0.2` of `myPackage` is returned in the search results.
        print-build-logs: '[AI] The `nix-search --print-build-logs` command is a utility provided by Nix, a package manager for Linux and other Unix systems. This command searches the local Nix expression and configuration files for a given keyword or pattern, and then prints out the build logs of the matching builds. These build logs contain detailed information about the construction process of each Nix expression, including any error messages or warnings that may have occurred during the build. This can be helpful in troubleshooting issues with specific packages or configurations within the Nix environment.'
        quiet: '[AI] The `nix-search --quiet` command is a part of Nix Package Manager, which is used to search for available packages in the Nix expression language. The `--quiet` option suppresses the output of the search results, meaning that only the presence or absence of matches will be indicated. No additional information such as package names or versions will be displayed.'
        recreate-lock-file: '[AI] `nix search --recreate-lock-file` is a command used in Nix Pakages Manager to force the creation of a new lock file when searching for package versions. A lock file records the exact version of packages that will be built or installed, preventing version conflicts and ensuring reproducibility of builds. When using `nix search`, this option ensures that a new lock file is generated even if an existing one exists, enabling you to search for updated packages while maintaining a fresh lock file.'
        update-input: '[AI] `nix-search --update-input` is a command in Nix Pakages Manager used to update the input files of a specific Nix expression or configuration. This means that it will fetch the latest version of the external packages or sources specified in the expression and save them as input files, ready for building or installing with Nix. It''s particularly useful when working with custom configurations where external dependencies need to be kept up-to-date.'
        verbose: '[AI] `nix-search --verbose` is a command from Nix Package Manager, which performs a search for available packages in the Nix expression language. The `--verbose` option increases the output''s detail level, displaying more information about each matched result, including the package name, version, and a brief description.'
