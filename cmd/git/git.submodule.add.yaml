# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: add
description: Add the given repository as a submodule
flags:
    --depth: create a shallow clone of that depth
    --dissociate: use --reference only when cloning
    --name=: set submodule name
    --progress: report progress status
    --reference=: reference repository
    -b, --branch=: branch of repository to add as submodule
    -f, --force: alllow adding an otherwise ignored submodule path
documentation:
    command: '[AI] `git submodule add` is a Git command used to add an existing external project as a Git Submodule to your main Git repository. The syntax is as follows: `git submodule add <repository_url> [<subdirectory>]`. This command adds the specified external project under the given subdirectory in your main repository and initializes the submodule''s Git repository with the provided URL. After running this command, the submodule will be included in your Git repository as a nested repository and can be tracked, updated, and committed separately.'
    flag:
        branch: |-
            [AI] `git submodule add --branch` is a Git command used to add a new remote repository as a submodule in your main Git repository, and checkout a specific branch of that submodule.

            In simpler terms, this command does the following:

            1. Adds a new Git submodule to your current Git project, by specifying the URL of the external repository.
            2. Sets the initial commit of the submodule in your project's Git history.
            3. Checks out the specified branch of the submodule within your project's submodule directory.

            This command is useful when you want to keep a specific version of an external project as part of your main project, and have that version be easily tracked and updated with Git.
        depth: '[AI] `git submodule add --depth` is a Git command used to add an existing local or remote Submodule as a new Submodule in your Git repository. The "--depth" option specifies the depth of commit history to be fetched for this Submodule. A value of "shallow" (the default) will only fetch the necessary commits to build the current project, while a value of "recursive" will fetch the full history for all Submodules and their own Submodules recursively. This can impact repository size and cloning time.'
        dissociate: |-
            [AI] `git submodule add --dissociate` is a Git command used to update a submodule with a new commit while detaching it from its current state in the superproject.

            When you run `git submodule add <url> <path>`, Git clones the repository at the specified URL into a new subdirectory within your project, and adds that subdirectory as a Git submodule to your superproject's .gitmodules file. This command is typically used when initializing or updating an existing submodule in your project.

            The `--dissociate` option changes how this command behaves. Instead of adding a new submodule, it updates the existing one with the new commit from the specified URL while removing the current submodule's commit history from the superproject. In other words, it overwrites the current submodule with the latest version at the remote repository and forgets the previous commit history within your superproject.

            This command can be useful when you want to update a submodule to a new commit while ignoring the changes made in that submodule's history that are not part of your superproject. However, note that after running `git submodule add --dissociate`, you will lose the previous commit history of the submodule within your superproject.
        force: '[AI] `git submodule add --force` is a Git command used to add an existing local or remote Git repository as a submodule in your main Git repository. The `--force` option is used when you want to override any existing submodule configuration in your main Git repository. This command will update the submodule''s URL and commit if necessary, allowing you to add or update a submodule that may have changed since it was last added or committed in your main repository.'
        name: '[AI] `git submodule add --name <remote> [<submodule_path>]` is a Git command used to add an existing Git repository as a submodule within another Git repository. The `--name` option specifies the name of the submodule in the superproject''s `.gitmodules` file and the remote URL is provided by `<remote>`. If the path to the local submodule directory is specified by `[<submodule_path>]`, it will be cloned into that location. Otherwise, it will be cloned in a subdirectory with the same name as the remote.'
        progress: '[AI] `git submodule add --progress` is a Git command used to add an existing local or remote Submodule to your Git project. The `--progress` option displays progress bars during the submodule''s clone or fetch process. This command modifies the `.gitmodules` file in your project and creates a new subdirectory for the added Submodule. When you run this command, it sets up the necessary Git links between your main repository and the Submodule, allowing you to manage both repositories as one cohesive unit within your project.'
        reference: '[AI] `git submodule add --reference` is a Git command used to add an existing local or remote Git repository as a submodule in another Git repository. The `--reference` option tells Git to create a reference to the given submodule instead of cloning it into the subdirectory. This can save time and disk space when working with large or multiple repositories, as only the necessary references are transferred.'
