# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: restart RESOURCE
description: Restart a resource
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --field-manager=: Name of the manager used to track field ownership.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl rollout restart` is a Kubernetes command used to restart a specific deployment or replica set''s pods with new containers images without altering the number of replicas or changes in configuration. This command triggers a rolling update, which means that the old and new pods will run simultaneously during the update process, allowing for minimal downtime. The rollout continues until all pods have been updated.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl rollout restart` is a command used to roll out a new version of a Kubernetes deployment, which updates the running pods with the latest container image. The `--allow-missing-template-keys` flag allows for deployments with templates that have missing keys in their YAML manifests to still be applied. This flag can be useful when gradually updating a complex application where not all components may be ready for an update at the same time, and missing keys can be filled in later without preventing the overall deployment from proceeding.'
        field-manager: '[AI] `kubectl rollout restart` is a command used with Kubernetes and `kubectl`, its command-line interface. This command triggers a rolling update of a deployment, which means new replicas are created with the latest changes while old ones are gradually terminated. The `--field-manager` flag is optional and specifies that this command should only apply to deployments managed by the given GitRepo or External source, rather than affecting all deployments in the current namespace. This can be useful when working with continuous delivery workflows.'
        filename: '[AI] `kubectl rollout restart` is a Kubernetes command used to update and restart the pods of a deployed application. The `--filename` flag specifies the YAML file containing the updated configuration for the deployment or daemonset. This command applies the changes described in the file, creates a new revision, and then gradually rolls out the updated version to the cluster. Once all the pods have been updated, they are restarted to apply the changes.'
        kustomize: |-
            [AI] `kubectl rollout restart --kustomize` is a command used in Kubernetes to update and roll out a new version of a resource, while applying customizations using Kustomize files. Here's how it works:

            1. Identify the resource: Specify the resource type (e.g., deployment, daemonset) and its name.
            2. Update the resource configuration: Prepare your desired changes in Kustomize files. These YAML files define customizations for the resources and are stored in a directory.
            3. Apply the updates: Use `kubectl` to apply the Kustomize files, causing the update of the resource's configuration: `kubectl apply -k <path-to-your-directory>`.
            4. Roll out the new version: Once updated, you can use `kubectl rollout restart` to initiate a rolling update of your resource. With the `--kustomize` flag, it will utilize the Kustomize files for the rollout process: `kubectl rollout restart deployment <deployment-name> --kubernetes-manifest-file <path-to-your-directory>/<filename.yaml>`.
            5. Progressive update: The new version of your resource is rolled out progressively, meaning that old pods are replaced with new ones one at a time. This allows you to monitor and validate the state of your application during the upgrade process.
        output: '[AI] `kubectl rollout restart` is a command used in Kubernetes to update the running instances of a deployment by restarting them. The `--output` flag specifies the output format for the command''s response, which can be set to `json`, `yaml`, or `wide`. By using `--output json`, you will get the response in JSON format, and with `--output yaml`, you will receive the response in YAML format. The default format is tabular output, denoted by `--output wide`.'
        recursive: '[AI] `kubectl rollout restart --recursive` is a command used with Kubernetes to update and rollback deployments. The `--recursive` flag instructs Kubernetes to rollback changes not only for the top-level deployment but also for all nested deployments or DaemonSets that may exist within the rolled-out application. This command helps ensure consistency across the entire application stack and simplifies managing complex applications with multiple interdependent components.'
        selector: '[AI] The `kubectl rollout restart` command is used to restart the pods that match the given selector in a Kubernetes deployment. This command triggers a rolling update, which means that it updates the pods one at a time while maintaining availability and minimizing downtime. When you add the `--selector` flag with a label key-value pair, it specifies which pods to be updated based on their labels. For instance, if you have a deployment named "myapp" with a label "app=myapp", then the command `kubectl rollout restart deployment myapp --selector app=myapp` would restart all the pods in the "myapp" deployment with the label "app=myapp".'
        show-managed-fields: '[AI] `kubectl rollout restart` is a command used with Kubernetes to update the replicas of a deployed application with new container images. The `--show-managed-fields` flag that follows the `restart` action, displays the specific fields managed by Kubernetes during the rolling update process. This flag provides information on which fields were modified or created as part of the update. In summary, it helps to debug and understand the changes made during a rolling update in your Kubernetes cluster.'
        template: '[AI] `kubectl rollout restart` is a command used in Kubernetes to update the container images for a running deployment. The `--template` flag specifies that a new template (a YAML file defining the desired state of the application) should be used for creating the updated deployment. After the new deployment is created, Kubernetes rolls out the update by gradually replacing existing pods with new ones based on the updated image. This process ensures zero downtime for your applications during updates.'
