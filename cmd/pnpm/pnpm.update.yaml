# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update
aliases:
    - up
    - upgrade
description: Updates packages to their latest version based on the specified range
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --color: Controls colors in the output
    --depth=: How deep should levels of dependencies be inspected
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --global-dir: Specify a custom directory to store global packages
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --no-optional: Don't update packages in "optionalDependencies"
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests.
    --use-stderr: Divert all output to stderr
    --workspace: Tries to link all packages from the workspace
    -C, --dir=: Change to directory <dir>
    -D, --dev: Update packages only in "devDependencies"
    -L, --latest: Ignore version ranges in package.json
    -P, --prod: Update packages only in "dependencies" and "optionalDependencies"
    -g, --global: Update globally installed packages
    -h, --help: Output usage information
    -i, --interactive: Show outdated dependencies and select which ones to update
    -r, --recursive: Update in every package found in subdirectories or every workspace package
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm update` is a command used in the package manager, pnpm. It retrieves and installs the latest versions of specified packages from the npm registry or from local dependencies defined in the `pnpm-lock.yaml` file. This command ensures that your project uses the most up-to-date packages to run efficiently and avoid potential security vulnerabilities. By default, it updates all the packages listed in the `package.json` file. However, you can specify the packages to update using their names or paths, such as `pnpm update package-name`.'
    flag:
        aggregate-output: '[AI] `pnpm update --aggregate-output` is a command used with the package manager PnPM (Parallel NPM). It updates all dependencies of the current project and its subprojects, and produces an aggregate output file containing the final packages sizes and versions. This output can be useful for tracking the impact of updates on the overall project size or for creating a consistent environment across multiple projects.'
        changed-files-ignore-pattern: |-
            [AI] `pnpm update` is a command provided by PnPM, a package manager for Node.js projects. The `--changed-files-ignore-pattern` option is used to ignore specific file patterns when checking for updated packages that may have changed their dependencies.

            When running an update with this flag, PnPM will still install any new or updated dependencies, but it won't prompt you to manually review and merge changes in the ignored files. This can be useful when dealing with large projects where specific file patterns are known not to require manual intervention during updates.

            For example, if you want to ignore all `.css` files during an update:
            ```bash
            pnpm update --changed-files-ignore-pattern='**/*.css'
            ```
        color: '[AI] `pnpm update --color` is a command used with the package manager, pnpm. The `update` action installs the latest versions of dependencies listed in the `package.json` or `pnpm-lock.yaml` file. The `--color` flag enables colored output during the installation process. This makes it easier to identify which packages are being installed and any error messages that may appear.'
        depth: '[AI] `pnpm update --depth` is a command used with the Package Manager for Node.js projects, called pnpm. This command is used to update the dependencies listed in the package.json or pnpm-lock file with specific depth. The depth option controls how deep pnpm will traverse the dependency tree when updating packages. A value of "0" (the default) means only directly listed dependencies are updated, while a positive number indicates that the specified level of transitive dependencies will be updated as well. For example, `pnpm update --depth 2` would update not just the directly listed dependencies but also their direct dependencies up to two levels deep.'
        dev: '[AI] `pnpm update --dev` is a command used with PnPM, a package manager for Node.js projects. This command updates the development dependencies listed in the `package.json` file under the `devDependencies` object, without affecting the production dependencies. The updated packages are downloaded and installed locally, ready to be used in the project.'
        dir: '[AI] `pnpm update --dir` is a command used with the package manager, pnpm. It updates the specified packages in the directory rather than the current project only. This means that when you run this command in a directory containing multiple projects using pnpm as their package manager, all projects within that directory will have their dependencies updated to the latest versions.'
        filter: '[AI] `pnpm update` is a command provided by the package manager, pnpm. It is used to install or update specified packages in your project. The `--filter` option allows you to specify a filter pattern to apply only to specific packages when running the update command. For instance, `pnpm update --filter @scope/*` updates all packages under the given scope.'
        filter-prod: '[AI] `pnpm update --filter-prod` is a command used with the package manager PnPM for managing JavaScript projects'' dependencies. It updates only the production dependencies listed in the `package.json` file under the key `"production"` or `"dev"` and prefix `"dependencies."`, leaving development dependencies untouched. This command helps maintain a clean separation between production and development dependencies during continuous integration or deployment processes.'
        global: '[AI] `pnpm update --global` is a command used with the Package Manager for Node.js projects called pnpm. This command updates the installed global packages, which are packages that can be used across multiple projects and have a consistent version across them. The global packages are managed separately from project-specific dependencies and are typically installed using the `--global` flag or by prefixing the package name with `@global`. When you run `pnpm update --global`, pnpm fetches the latest versions of the specified global packages from the registry and installs them in your system''s node_modules folder.'
        global-dir: '[AI] `pnpm update --global-dir` is a command used with pnpm, a package manager for Node.js projects. This command updates the global installations of packages in a specific directory instead of the default one (usually `~/.pnpm`). By providing the `--global-dir` option followed by the target directory path, you can update or install packages globally in that custom location.'
        help: |-
            [AI] `pnpm update` is a command provided by PnPM, a package manager for JavaScript projects. This command is used to install the latest versions of specified packages in your project or update all packages to their newest versions.

            The `--help` option that follows the command is used to display detailed information about how to use this specific command effectively. It provides usage instructions, flags and options available, examples, and other relevant information for the user. Essentially, it helps users understand how they can update their packages with PnPM in various scenarios.
        interactive: '[AI] `pnpm update --interactive` is a command used with the package manager PnPM (Performance-optimized Node Package Manager). It initiates an interactive update process for your project''s dependencies. Instead of automatically installing the new versions of packages, it allows you to review and selectively choose which updates to apply. This can be useful in managing updates of large projects or when dealing with breaking changes in specific dependencies.'
        latest: '[AI] `pnpm update --latest` is a command used with npm package manager PnPM (Parallel NPM). This command is used to install the latest versions of all dependencies listed in the package.json file of your Node.js project. The --latest flag ensures that the most up-to-date packages are installed, which can help keep your project using the latest features and security patches. It performs parallel downloads for faster installation, a feature exclusive to PnPM.'
        loglevel: '[AI] `pnpm update --loglevel` is a command used with pnpm, a package manager for JavaScript projects. This command updates the installed packages in your project to their latest versions and adjusts the `package-lock.json` or `pnpm-lock.yaml` file accordingly. The `--loglevel` option sets the logging level to control the amount of output during the update process. Possible log levels include: "error", "warn", "info", "verbose" (default), and "silent". Setting a higher log level filters out less important messages, while setting it to a lower level increases the amount of output for better visibility into the update process.'
        no-color: '[AI] `pnpm update --no-color` is a command used with the package manager, pnpm. It updates all installed packages in your project to their latest versions. The `--no-color` flag is an option that disables colored output during the update process. This can be useful for running scripts in terminal environments where colors may not be supported or preferred.'
        no-optional: |-
            [AI] `pnpm update --no-optional` is a command used with pnpm (Parallel NPM), a package manager for JavaScript projects. This command updates installed packages in your project to their latest versions, but it does not install any optional dependencies marked with the `^` or `~` caret symbols in the `package.json` file's dependency section.

            This option is useful when you only want to update your essential dependencies and exclude the optional ones, potentially reducing the risk of unintended changes in your project.
        prod: '[AI] `pnpm update --prod` is a command used with PnPM, a package manager for JavaScript projects. This command updates all project dependencies to their latest production-ready versions, which are optimized for production use and free of development-only features or bugs. The updated packages will be saved in the `node_modules/.pnpm/` folder instead of the common `node_modules/` directory. It''s beneficial for maintaining a clean and efficient project setup focused on production.'
        recursive: '[AI] `pnpm update --recursive` is a command used with the Package Manager for Node.js projects, called pnpm. This command updates all dependencies recursively in the current project and its sub-dependencies. When run, it will check for updated versions of all listed dependencies in package.json files, both at the root level and within nested sub-projects, and install the latest available versions if specified in their respective lockfiles or package manifests. This ensures that an entire ecosystem of interconnected projects can be kept up to date with minimal effort.'
        stream: '[AI] `pnpm update --stream` is a command used with the package manager, pnpm. This command enables real-time dependency updates in streams, also known as continuous integration or continuous delivery pipelines. It allows for automatic dependency updating without interrupting the ongoing build process. Updates are fetched and installed as soon as they become available, ensuring that the application always uses the latest dependencies. This can improve security and stability by keeping dependencies up-to-date.'
        test-pattern: '[AI] `pnpm update --test-pattern` is a command used with PnPM, a package manager for Node.js projects. This command updates only the packages in your project that match the given test pattern and have new versions available. The test pattern is a glob expression used to specify which packages'' tests should be run during the update process. For instance, `--test-pattern=**/*.test.js` would update and run tests for any package with JavaScript files named `*.test.js`. This can help ensure that your project''s tests pass after updating dependencies.'
        use-stderr: '[AI] `pnpm update --use-stderr` is a command used with pnpm (Parcel NPM), a package manager for JavaScript projects. This command instructs pnpm to output error messages to the standard error stream instead of the standard output stream during the package updating process. By doing so, it allows other scripts or processes running in the terminal to continue displaying their output without being mixed with the error messages from `pnpm update`. This can be useful for maintaining a clear console view when multiple scripts are executed simultaneously.'
        workspace: '[AI] `pnpm update --workspace` is a command used with the package manager, pnpm. It updates all packages listed in a pnpm workspace to their latest versions. A pnpm workspace is a collection of related projects that share common dependencies. When you run `pnpm update --workspace`, pnpm will recursively install and update the dependencies for each project within the workspace while ensuring consistent dependency versions across all projects. It''s an efficient way to manage multiple projects with shared dependencies in one workspace.'
        workspace-root: '[AI] `pnpm update --workspace-root` is a command used with PnPM, a package manager for JavaScript projects. This command updates all packages in a multi-package workspace to their latest versions. The `--workspace-root` option specifies the root directory of the workspace. It searches for `pnpm.config.js` files recursively in that directory and its subdirectories, and treats them as separate workspaces. This command automatically handles dependencies between packages in the workspace and ensures consistent versions across the entire project.'
