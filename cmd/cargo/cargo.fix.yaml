# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fix
description: Automatically fix lint warnings reported by rustc
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Fix all targets (default)
    --allow-dirty: Fix code even if the working directory is dirty
    --allow-no-vcs: Fix code even if a VCS was not detected
    --allow-staged: Fix code even if the working directory has staged changes
    --bench*=: Fix only the specified bench target
    --benches: Fix all benches
    --bin*=: Fix only the specified binary
    --bins: Fix all binaries
    --broken-code: Fix code even if it already has compiler errors
    --edition: Fix in preparation for the next edition
    --edition-idioms: Fix warnings to migrate to the idioms of an edition
    --example*=: Fix only the specified example
    --examples: Fix all examples
    --exclude*=: Exclude packages from the fixes
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Fix only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --profile=: Build artifacts with the specified profile
    --target*=: Fix for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Fix only the specified test target
    --tests: Fix all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --workspace: Fix all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package(s) to fix
    -q, --quiet: Do not print cargo log messages
    -r, --release: Fix artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo fix` is a command used in Rust programming language''s Cargo build tool. It automatically searches for and applies suggested fixes to common issues in your project''s dependencies, such as outdated versions or security vulnerabilities. It uses a curated list of known issues from crates.io registry and other sources to identify and suggest the best available solution. This command helps keep projects up-to-date with the latest patches and improvements for their dependencies.'
    flag:
        all: '[AI] `cargo fix --all` is a command used in Rust programming language''s build system, Cargo. It automatically applies suggested fixes to all warnings and errors in every package in the project. This command aims to improve code quality and maintainability by applying common, safe, and non-controversial improvements throughout the project.'
        all-features: '[AI] `cargo fix --all-features` is a command used in Rust programming language''s Cargo build tool. This command invokes Cargo''s `fix` subcommand with the `--all-features` flag. The `fix` subcommand automatically applies suggested fixes to warning and error messages in a project''s source code, while the `--all-features` flag enables all available features for fixing. In essence, it applies all available fixes across all features in a Rust project.'
        all-targets: '[AI] `cargo fix --all-targets` is a command used in Rust programming language''s Cargo build tool. This command runs the autocorrect and formatting checks across all targets (projects) defined in the current Cargo project, applying suggested fixes automatically to improve code consistency and adherence to Rust best practices. It can help maintain a clean and well-formatted codebase throughout the project.'
        allow-dirty: '[AI] `cargo fix` is a CLI tool for automatically fixing common issues in Rust projects using other tools like `clippy`, `rustfmt`, and `edition`. The command `cargo fix --allow-dirty` overrides the default behavior of `cargo fix` which only applies changes to unstaged files. By adding `--allow-dirty`, you allow `cargo fix` to also make changes to files that are already staged or committed in your Git repository, potentially introducing unwanted changes. This should be used with caution and only when you trust the source of the suggested fixes.'
        allow-no-vcs: |-
            [AI] `cargo fix` is a popular CLI tool used to automatically fix various warnings and errors in Rust projects' `Cargo.toml` files and Rust codebase using approved community guidelines. The `--allow-no-vcs` flag modifies the default behavior of `cargo fix`.

            By default, `cargo fix` requires that your Cargo project has a version control system (VCS) initialized in its root directory. However, `--allow-no-vcs` flag disables this requirement and allows `cargo fix` to proceed without checking for an initialized VCS. This flag can be useful when working on projects without a VCS or when testing `cargo fix` locally before integrating it into a project with a VCS.
        allow-staged: '[AI] `cargo fix --allow-staged` is a command used in Rust programming language''s Cargo build tool. It runs automated code fixes and reformats the code according to the Rust community''s preferred style guide (either Rustfmt or clippy). The `--allow-staged` flag enables staged application of the fixes, meaning that the user can review the proposed changes before committing them to the Git repository. This allows for more control over the codebase and potential adjustments before finalizing the changes.'
        bench: '[AI] `cargo fix --bench` is a command used in Rust programming language''s build system, Cargo. It runs the auto-fixing tool `cargo-fix` on benchmarks defined in the project''s Cargo.toml file. The goal is to automatically detect and correct common coding errors and improve code quality in benchmarked Rust code.'
        benches: '[AI] `cargo fix --benches` is a command used in Rust programming language''s Cargo build tool. It runs automated code fixes across all benches (test cases specifically focused on measuring performance) in your project. By using this command, developers can efficiently address potential issues and improve the efficiency of their benchmarks.'
        bin: '[AI] `cargo fix --bin` is a command used in Rust programming language''s Cargo build tool. It automatically applies recommended and safe fixes to the project''s source code, specifically focusing on binary targets (executables or libraries packaged for distribution). This command aims to improve code quality and consistency across your project without requiring manual intervention.'
        bins: '[AI] `cargo fix --bins` is a command used in Rust programming language''s Cargo build tool. It automatically applies suggested fixes to outdated dependencies within the project''s binary (executable) targets. In simpler terms, it checks for and updates the versions of crates (libraries) used by your executables to their latest compatible versions without requiring a manual update in the `Cargo.toml` file.'
        broken-code: '[AI] `cargo fix --broken-code` is a command used in Rust programming language''s package manager, Cargo. It automatically fixes various kinds of warnings and errors in the source code of a Rust project. The `--broken-code` flag specifically tells Cargo to only attempt fixing the issues that cause the project to fail to build or run, ensuring that the project remains functional after the fixes are applied.'
        edition: '[AI] `cargo fix --edition` is a command used in Rust programming language''s package manager, Cargo. This command is used to automatically apply recommended and customized fixes to your Rust codebase based on the given edition. The `--edition` flag specifies which version of Rust''s language edition (EDition) your project uses. By providing this information, `cargo fix` ensures that its suggested fixes are compatible with your project''s language settings.'
        edition-idioms: '[AI] `cargo-fix` is a Cargo subcommand that automates various code fixes in Rust projects. The `--edition-idioms` option instructs `cargo-fix` to apply suggested idioms according to the latest Rust edition. Rust editions introduce new language features and idioms that can make your code more concise and effective. By using `--edition-idioms`, you can gradually adopt these improvements into your project, ensuring your code stays modern and efficient.'
        example: '[AI] `cargo fix --example` is a command used in Rust programming language''s Cargo build tool. It applies and previews automatic code fixes, specifically to the examples within a project''s source code tree. This command searches for common coding errors or best practices violations and proposes corrections, providing users with a preview of how these changes will affect their code before applying them permanently.'
        examples: '[AI] `cargo fix --examples` is a command used in Rust programming language''s Cargo build tool. This command is used to automatically fix common coding errors or stylistic issues in example codes that come with Rust libraries. It runs the `cargo-fix` tool, which is an extension of `cargo`, and applies fixes to all the example projects within a given crate (library). The goal is to ensure consistency and improve code quality across examples.'
        exclude: '[AI] `cargo fix --exclude` is a command used with Cargo, Rust''s package manager. This command helps to apply automated code fixes across your project using various linting tools, like rust-ci-lint or clippy. The `--exclude` flag allows you to exclude specific directories or files from being checked and fixed during the process. This can be useful when there are files that produce false positives, or files which should not be modified by the fixer. For instance, if you have a directory named "excludes" under your project root, you could run `cargo fix --exclude=''path/to/your/project/**/excludes''` to exclude all subdirectories containing an ''excludes'' folder from being checked.'
        features: |-
            [AI] `cargo fix --features` is a command used in Rust programming language's Cargo build system. This command is used to automatically apply and manage dependencies' featured-based updates, ensuring that your project stays up-to-date with the latest stable versions of the features you depend on.

            By running `cargo fix --features`, you allow Cargo to analyze your project's dependencies and their features, then it will update them in a safe and efficient way. This command can save time and effort compared to manually updating each dependency one by one. Additionally, it provides a better control of what is being updated, ensuring that the unwanted side effects are minimized.
        help: '[AI] `cargo fix --help` is a command used in Rust programming language''s Cargo build tool. This command displays detailed help information about the `cargo-fix` subcommand, which is a plugin that automatically fixes various warnings and errors in Rust code. The help output explains how to install it, its usage, available options, and other related details.'
        ignore-rust-version: '[AI] `cargo fix` is a CLI tool for automatically fixing common issues in Rust projects'' `Cargo.toml` files. The command `--ignore-rust-version` tells `cargo fix` to bypass checking and possibly updating the specified Rust version. This might be useful when you want to keep your project using an older Rust version for compatibility reasons, but still want to use `cargo fix` for other tasks.'
        jobs: '[AI] `cargo fix --jobs` is a command used with Cargo, Rust''s package manager. This command runs autocorrections and format adjustments across multiple jobs in parallel, improving efficiency. It processes each job independently, allowing users to make progress on their project faster by leveraging multiple CPU cores.'
        keep-going: '[AI] `cargo fix --keep-going` is a command used with Cargo, Rust''s package manager. This command runs automated code fixes with Cargo''s built-in linter and autocorrector, but unlike the default behavior where it stops at the first error, it continues processing subsequent errors and attempts to automatically fix as many issues as possible before exiting. This can save time by addressing multiple issues in one go, making the codebase more consistent, and improving overall code quality.'
        lib: '[AI] `cargo fix --lib` is a command used in Rust programming language''s Cargo build system. It initiates an automated process to fix various warnings and errors related to library dependencies within the project''s Cargo.toml file and its associated source code. The goal is to improve the project''s codebase by applying suggested changes from Rust''s built-in linter tools, ensuring better code quality and compatibility with other projects using the library.'
        manifest-path: '[AI] `cargo fix` is a command-line tool for automatically fixing common issues in Rust projects managed by Cargo, the Rust package manager. The `--manifest-path` option specifies the path to the `Cargo.toml` manifest file of the project. Using this option, `cargo fix` will only apply its rules to the given project instead of all projects in the current directory. This is useful when working with multiple Rust projects and wanting to fix issues in a specific one.'
        message-format: '[AI] `cargo fix` is a CLI tool for automatically fixing common issues in Rust projects using various linters and formatters, such as `clippy`, `rustfmt`, and `edition`. The command `cargo fix --message-format` sets the output message format for the tool. By default, it provides verbose and quiet modes. However, you can specify custom formats using templates or by using external files. This option allows users to customize the output messages according to their preferences or development environments.'
        no-default-features: '[AI] `cargo fix` is a command-line tool used to automatically fix various types of warnings and errors in Rust projects'' Cargo.toml files and Rust code. The `--no-default-features` flag is an optional argument that disables activating default features for the dependencies listed in the Cargo.toml file when running `cargo build` or similar commands. This can be useful when you want to control which features are activated explicitly, potentially reducing unnecessary feature dependencies and optimizing build times.'
        package: '[AI] `cargo fix --package` is a command used in Rust programming language''s Cargo build tool. It automatically applies common code fixes across all or specified packages listed in the project''s Cargo.toml file. This includes fixing warnings and errors, adding missing dependencies, and other code improvements. It simplifies maintaining code quality and consistency within a multi-package Rust project.'
        profile: '[AI] `cargo fix --profile` is a command used with Cargo, Rust''s package manager, to automatically apply suggested and safe fixes for warnings and errors in your Rust project. The `--profile` flag is optional and allows you to specify a particular Cargo profile to use when running the command. Profiles let you customize build configurations like target features or dependencies for specific scenarios. Using `--profile` ensures that any fixes applied take into account the intended configuration of your project.'
        quiet: '[AI] `cargo fix --quiet` is a command used with Cargo, the package manager for Rust programming language. This command runs automated code fixes across all projects in the current directory and its subdirectories using various linters and formatters. The `--quiet` flag suppresses progress updates and error messages during execution to provide a quieter experience.'
        release: '[AI] `cargo fix --release` is a command used in Rust programming language''s Cargo build tool. It automatically applies various fixes to your project, including linting issues, formatting errors, and tests run. The `--release` flag instructs Cargo to build the project in release mode which optimizes the code for better performance and smaller binaries.'
        target: '[AI] `cargo fix --target` is a command used with Cargo, Rust''s package manager. This command runs automatic fixing tools on the specified target (crate or binary) under the project''s `Cargo.toml`. The `--target` flag lets you specify which target to apply fixes to, allowing for fine-grained control over the fix process.'
        target-dir: '[AI] `cargo fix` is a CLI tool for automatically fixing common issues in Rust projects using a configurable set of rules. The `--target-dir` flag specifies the directory where the generated output from running the fixer should be placed. For instance, if you have multiple target platforms for your project, you can run `cargo fix --target-dir=neteq/target/x86_64-pc-windows-msvc` to only apply the fixes for the Windows x86\_64 platform in that directory.'
        test: |-
            [AI] `cargo fix --test` is a command used in Rust programming language's build system, Cargo. It performs two main tasks:

            1. `cargo fix`: This part of the command runs automated code fixes in the project. It applies suggested edits from various linting tools like clippy and rust-fmt to improve code quality.

            2. `--test`: This option instructs Cargo to run all tests defined in the project's `Cargo.toml` file. After `cargo fix` makes any necessary adjustments, it executes tests to ensure that the code still functions correctly after the applied fixes.
        tests: '[AI] `cargo fix --tests` is a command used in Rust programming language''s build system, Cargo. This command runs `cargo fix` with an additional argument `--tests`. `cargo fix` is a tool for automatically fixing common coding errors and inconsistencies in your project. The `--tests` flag instructs it to also apply the fixes to the test code of your project. Essentially, it ensures that not only your production code but also your tests are error-free and consistent with Rust''s best practices.'
        timings: '[AI] `cargo-fix` is a tool for automatically fixing warnings and errors in Rust code using various linters and formatters like `clippy`, `rustfmt`, and `rust-src`. The command `cargo fix --timings` generates detailed timing reports for each lint and formatter that was run during the auto-fixing process. These reports can be useful for understanding which tools take the most time to execute and identifying potential performance bottlenecks in the Rust project''s CI/CD pipeline.'
        workspace: '[AI] `cargo fix --workspace` is a command used with Cargo, Rust''s package manager and build tool. This command performs automated code fixes across an entire workspace consisting of multiple Cargo projects. It searches for and automatically applies common coding conventions and best practices, ensuring consistent code quality throughout the projects under its scope.'
