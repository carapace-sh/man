# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: generate [flags]
description: Generate a changelog for the repository/project
flags:
    --config-file=: The path of changelog configuration file in the project's Git repository. Defaults to .gitlab/changelog_config.yml.
    --date=: The date and time of the release. Uses ISO 8601 (2016-03-11T03:45:40Z) format. Defaults to the current time.
    --from=: The start of the range of commits (as a SHA) to use for generating the changelog. This commit itself isn't included in the list.
    --to=: The end of the range of commits (as a SHA) to use for the changelog. This commit is included in the list. Defaults to the HEAD of the default project branch.
    --trailer=: The Git trailer to use for including commits. Defaults to Changelog.
    -v, --version=: The version to generate the changelog for. The format must follow semantic versioning. Defaults to the version of the local checkout (like using git describe).
documentation:
    command: '[AI] `glab changelog generate` is a GitLab CLI (Command Line Interface) command used to create or update a changelog file based on the merge requests and commits in your current Git repository. It automatically extracts the commit messages and merge request descriptions, formats them according to the chosen template, and saves the output as a changelog file (usually in markdown format). This can help simplify the process of creating and maintaining a clear and concise changelog for your project.'
    flag:
        config-file: '[AI] The command `glab changelog generate` is a GitLab CLI (Command Line Interface) tool used to generate a changelog file based on Git commits. The option `--config-file` specifies a configuration file that customizes the format and other settings for the generated changelog. The overall effect of running `glab changelog generate --config-file [filename]` is creating a well-formatted changelog using commit messages from the Git history, following the rules defined in the provided configuration file.'
        date: '[AI] The `glab changelog generate --date` command is a GitLab CI/CD feature used to automatically generate a changelog file based on the commits since a specific date. The `generate` sub-command creates the file, and the `--date` option specifies the desired date. This can be useful for project maintainers to easily keep track of changes made to their projects and create well-documented releases.'
        from: |-
            [AI] `glab` is a Git command-line interface for GitHub written in Rust. The `changelog generate` subcommand generates a Markdown or text file containing a list of Git commits, following the format of a GitHub-style changelog.

            The `--from` option specifies the branch or tag from which to generate the changelog. For example, `glab changelog generate --from main` will generate a changelog for all commits in the `main` branch. The default is usually the current branch.
        to: '[AI] The `glab` is a GitHub Action for local development with GitHub. The command `glab changelog generate --to` generates a changelog file based on the committed changes in the current Git repository, up to and including the latest commit specified by `--to`. This means that the command will only consider the commits made up to the specified commit when generating the changelog. The resulting changelog can be used to create a release note or update a project documentation.'
        trailer: '[AI] `glab` is a GitHub Action for local Git operations, and the command `glab changelog generate --trailer` generates a CHANGES.md or CHangelog.md file based on the local Git commits. The `--trailer` option adds a standard trailer at the end of each entry with author information, date, and commit hash. This command helps in creating a well-structured changelog for a project.'
        version: '[AI] The command `glab changelog generate --version` is used in GitLab to generate a new changelog entry based on the current Git commit. The `--version` option is specific to generating a changelog entry for merge requests that introduce a new version number in the project''s semantic versioning scheme. This command automates the process of creating well-formatted and structured changelogs following the Angular, Bump or Calendar format.'
