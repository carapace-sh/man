# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: kube
description: Start local proxy for Kubernetes access.
flags:
    --as-groups=: Configure custom Kubernetes group impersonation.
    --as=: Configure custom Kubernetes user impersonation.
    -c, --cluster=: Specify the Teleport cluster to connect
    -f, --format=: 'Optional format to print the commands for setting environment variables, one of: unix, command-prompt, powershell, text. Default is unix.'
    -n, --kube-namespace=: Configure the default Kubernetes namespace.
    -p, --port=: Specifies the source port used by the proxy listener
documentation:
    command: '[AI] The `tsh proxy kube` command is used in Traffic Server (TSH) to configure a proxy for Kubernetes traffic. This command sets up Traffic Server as a reverse proxy that forwards incoming requests to the appropriate services running within a Kubernetes cluster, based on the provided Kubernetes configuration. It simplifies the process of configuring Traffic Server to handle dynamic containerized workloads in a Kubernetes environment.'
    flag:
        as: '[AI] `tsh proxy kube --as` is a command using Traefik, a reverse proxy and load balancer for modern applications. The `kube` argument specifies that it''s configured for use with Kubernetes. The `--as` flag indicates that the command should run as a Traefik daemonset or deployment in the Kubernetes cluster, managing and configuring ingress rules automatically.'
        as-groups: |-
            [AI] The `tsh proxy kube --as-groups` command is a part of Traefik, an open-source Edge Router for Docker and microservices. This specific command configures the Traefik proxy to assume Kubernetes group memberships when performing RBAC (Role-Based Access Control) checks.

            In other words, it enables Traefik to use Kubernetes cluster roles and service accounts to determine if a request is allowed or not. The `--as-groups` flag instructs Traefik to include group memberships in the RBAC checks alongside user roles. This can be useful when working with complex Kubernetes environments where multiple users or services may need access to different parts of an application based on their group memberships.
        cluster: |-
            [AI] The `tsh proxy kube --cluster` command is used in Traefik, a reverse proxy and load balancer for modern applications, to configure it as a proxy for Kubernetes clusters.

            The `--cluster` flag specifies that the Traefik proxy will be managing and communicating with one or more Kubernetes clusters directly. It sets up Traefik as a Kubernetes ingress controller, enabling it to automatically create, update, and delete routes based on Kubernetes Ingress resources.

            This setup allows for easier deployment, scaling, and management of applications using the Ingress model in Kubernetes while leveraging Traefik's advanced features like dynamic circuit breaking, rate limiting, and more.
        format: '[AI] `kubectl tsh proxy` is a command in Kubernetes used to create or manage a tunnel between your local machine and a remote Kubernetes cluster. The option `--format=json` that follows the `kubectl tsh proxy` command, is used to output the result in JSON format for further processing by scripts or other tools. This can be useful when automating tasks or working with large sets of data.'
        kube-namespace: '[AI] The command `tsh proxy kube --kube-namespace` is used with Traefik, an open-source Edge Router for dynamic applications at the edge of a modern infrastructure. This specific command configures Traefik to act as a proxy for Kubernetes, targeting requests to services within the specified Kubernetes namespace. It sets up Traefik as an intermediary between clients and Kubernetes services, handling routing, load balancing, SSL termination, and other traffic management tasks.'
        port: |-
            [AI] The `tsh proxy kube --port` command is used to configure Traefik, a popular reverse proxy and load balancer for Kubernetes, to expose a specific service or pod running in a Kubernetes cluster on a particular port.

            Here's a breakdown of the components:

            1. `tsh`: This refers to Traefik's command-line interface (CLI) tool.
            2. `proxy`: This is the command that sets up the proxy configuration.
            3. `kube`: This option specifies that the configuration will be for a Kubernetes cluster.
            4. `--port`: This flag defines the port number on which Traefik should listen and forward incoming requests to the appropriate services within the Kubernetes cluster.

            Example usage: `tsh proxy kube --port 8080` would configure Traefik to expose services on port 8080 within the Kubernetes cluster.
