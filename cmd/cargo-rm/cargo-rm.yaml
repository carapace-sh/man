# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-rm
description: Remove a dependency from a Cargo.toml manifest file
flags:
    --manifest-path=: Path to the manifest to remove a dependency from
    -B, --build: Remove crate as build dependency
    -D, --dev: Remove crate as development dependency
    -V, --version: Prints version information
    -h, --help: Prints help information
    -p, --package=: Package id of the crate to remove this dependency from
    -q, --quiet: Do not print any output in case of success
documentation:
    command: '[AI] `cargo-rm` is a Cargo extension command that allows you to remove dependencies from your Rust project''s `Cargo.toml` file. It''s particularly useful when you no longer need certain dependencies and want to simplify your project or reduce its size. To use it, add the `cargo-rm` crate to your `Cargo.tomls` file under `[dev-dependencies]` or `[features]` sections if applicable, then run the command in your terminal with `cargo rm <DEPENDENCY>`. This will remove the specified dependency from your project''s manifest file.'
    flag:
        build: |-
            [AI] `cargo-rm --build` is a command used in Rust programming language's build system, Cargo. This command combines two actions: removal of dependencies with `cargo rm`, and building the project with `cargo build`.

            When you run `cargo rm <dependency>`, it removes the specified dependency from your `Cargo.toml` file, meaning that Rust will no longer download or use that package during compilation. Running `--build` after `rm` triggers a new build process which recompiles the project without the removed dependency. This is useful when you want to test how your project behaves without a certain dependency, or if you're trying to resolve conflicts between multiple dependencies.
        dev: '[AI] `cargo-rm --dev` is a command used in Rust programming language''s build system, Cargo. The `--dev` flag tells Cargo to remove dependencies marked as development or optional in the project''s `Cargo.toml` file during the build process. These dependencies are usually libraries that are not required for the main functionality of the project but are useful for testing, documentation, or other development purposes. By running `cargo rm --dev`, you can remove these unnecessary dependencies to minimize the final binary size or reduce the building time.'
        help: |-
            [AI] `cargo-rm` is a Cargo subcommand for removing crates and their dependencies from your project's `Cargo.toml`. Its help message provides an overview of its usage:

            ```text
            Usage: cargo rm [options] [CRATE]...

            Removes CRATES from the workspace, or the default crate if no CRATES are given.

            Options:
              -r, --recursive         Remove dependencies and their transitive dependencies
              -d, --features=FEATURES  Features to activate for the removed crates
                  --locked             Remove locked editions as well
              -V, --verbose            Be more verbose during removal
              -h, --help               Print help information
            ```

            This command lets you remove specific crates from your Cargo.toml file. The `--recursive` option can be used to remove not only the specified crate but also its dependencies and their transitive dependencies. You can also activate or deactivate features using the `--features` option, and use `--locked` to remove locked editions as well. For more detailed information, use the `--help` flag.
        manifest-path: '[AI] `cargo-rm` is a Cargo subcommand used to remove (rm) dependencies listed in a Rust project''s package manifest. The `--manifest-path` option specifies the path to the manifest file, which is typically located at `Cargo.toml` in the root directory of your project. So, running `cargo rm --manifest-path <path_to_Cargo.toml>` will remove dependencies listed in that particular Cargo manifest.'
        package: '[AI] `cargo-rm --package` is a command used in Cargo, Rust''s package manager. The `--package` option specifies the name of the Rust crate package to remove from the project''s dependencies. `cargo-rm` is a utility that performs a safe removal of outdated or unwanted packages from your Cargo.toml file, ensuring that your project keeps its desired dependencies up-to-date and clean.'
        quiet: '[AI] `cargo-rm` is a Cargo subcommand used to remove (rm) build artifacts and dependencies in Rust projects. The `--quiet` flag is an option that silences the output of the command, meaning it does not print any messages or progress indicators during execution. Therefore, using `cargo rm --quiet` will remove specified dependencies and artifacts without displaying any feedback in the terminal.'
        version: '[AI] `cargo-rm` is a Cargo subcommand used to remove dependencies in Rust projects managed by Cargo. The command `cargo-rm --version` displays the current version of `cargo-rm` being used in the terminal or console. This can be helpful for checking which version is installed and ensuring that it''s up-to-date with the latest available version.'
