# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: images [OPTIONS] [REPOSITORY[:TAG]]
description: List images
group: common
flags:
    --digests: Show digests
    --format=: 'Format output using a custom template:'
    --no-trunc: Don't truncate output
    -a, --all: Show all images (default hides intermediate images)
    -f, --filter=: Filter output based on conditions provided
    -q, --quiet: Only show image IDs
documentation:
    command: '[AI] `docker images` is a command used to list all available Docker images on your local system. It shows details such as image name, tag, size, and the time it was created or last updated. This command is useful for checking which images are currently available in your system''s image repository before pulling or using them.'
    flag:
        all: '[AI] `docker images --all` is a command used in Docker to list all available images on your local system. The `--all` option includes both the dangling (incomplete) and manual images that are not automatically removed by Docker. Dangling images occur when you build an image, but then delete or update the base image used to build it. Manual images are those that have been manually pulled from a registry but not used in any running containers. The output displays each image''s name, tag, size, and ID.'
        digests: '[AI] `docker images --digests` is a command used in Docker to list all managed local images along with their corresponding digital signatures (digests) appended as suffixes to their repository tags. It helps ensure image authenticity and integrity before using or distributing them, by allowing verification that the images have not been tampered with during transfer or storage.'
        filter: '[AI] `docker images --filter` is a command used to filter the output of the `docker images` command in Docker. It allows you to refine the list of images based on specific criteria, such as their name, tag, size, or other attributes. The filter flag accepts various expressions that can be combined using logical operators. For instance, `docker images --filter "dangling=true"` returns only the images with the status "dangling," meaning they are not reachable by any container or another image. Other examples include `--filter "reference=''<image-name>:<tag>''"` to list images with a specific name and tag, and `--filter "size > 1024m"` to show only the images larger than 1GB. The exact syntax of the filter expressions depends on your use case and can be found in Docker documentation.'
        format: '[AI] `docker images --format` is a command used to retrieve information about Docker images in a customizable format. The `--format` option allows specifying a Go template to transform the output of the `docker images` command into a desired format, such as JSON or tab-separated values (TSV). This can be useful for processing the output with other tools like scripts and spreadsheets. The default output format is a table listing image name, tag, size, and creation time.'
        no-trunc: '[AI] The `docker images --no-trunc` command is used to list all Docker images on your system, but with the additional option of not truncating the image names and tags in the output. By default, Docker only shows the first few characters of each name or tag, followed by an ellipsis (...). With `--no-trunc`, you can see the entire names and tags for better readability when dealing with long image names.'
        quiet: '[AI] The `docker images --quiet` command is used to list all Docker images installed on a system in a minimal, plain text format without any extra metadata or columns other than image name and tag. It''s an efficient way to quickly obtain a list of images for scripting or automated processes.'
