# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: go-carpet
description: show test coverage for Go source files
flags:
    --256colors: use more colors on 256-color terminal
    --args=: pass additional arguments for go test
    --file=: comma-separated list of files to test
    --func=: comma-separated functions list
    --include-vendor: include vendor directories for show coverage
    --summary: only show summary for each file
    --version: get version
documentation:
    command: '[AI] The term "go-carpet" is not a standard command in Go programming language or any widely used tool in the IT industry. It seems to be non-existent and requires additional context for understanding its purpose and usage.'
    flag:
        256colors: '[AI] The `go-carpet` flag `--256colors` is a configuration option for terminal applications built with the Carbon terminal library in Go language. It specifies that ANSI color sequences with 256 distinct colors should be used instead of the more common 16 standard colors and intensities. This results in a wider range of visible colors when running such applications in compatible terminals.'
        args: |-
            [AI] The `go-carpet --args` is a command-line argument for the `go-carpet` tool, which is typically used in the context of Go programming. This argument allows passing custom arguments to be given to the underlying Carpet open-source framework when using go-carpet as a wrapper or interface.

            For example, if Carpet has certain flags or options that need to be set for specific use cases, these can be passed via `go-carpet --args` in the form of key-value pairs, e.g., `--args="key=value"`, making it easier to configure Carpet while utilizing go-carpet.

            Keep in mind that the actual functionality or requirements for using this argument depend on the specific implementation and configuration of both go-carpet and Carpet. It's essential to consult their official documentation for further details.
        file: '[AI] The `go-carpet` is a command-line tool used for formatting Go source code with a consistent style. The option `--file` or `-f` is used to specify a particular Go file or files as arguments, instructing the `go-carpet` to format only those files instead of the entire working directory. For instance, running `go-carpet --file main.go mypackage/file.go` will format both `main.go` and `mypackage/file.go`.'
        func: '[AI] The `go-carpet --func` command is a part of the go-carpet tool in Go programming language. It is used to run only specific functions from multiple Go files without building an entire Go application. The `--func` option specifies one or more function names separated by commas, and go-carpet will build and run only those functions. This is useful for testing or developing individual functions in isolation.'
        include-vendor: '[AI] The `go-carpet --include-vendor` command is a custom Go build flag used to include vendor dependencies during the build process. Vendor dependencies are third-party packages stored in the `vendor/` directory, which was an old method for managing external package dependencies before Go Modules were introduced. By using this flag, all the files under the `vendor/` directory will be included in the final Go binary or library, ensuring that they''re available at runtime without relying on external sources.'
        summary: '[AI] `go-carpet` is a command-line tool for managing and deploying Kubernetes applications using Carbon, an open-source Kubernetes application platform by Microsoft. The `--summary` option is used to display a summary of the current state of managed resources within the platform. This includes information such as the number of deployed applications, replicas running, available resources, and any identified issues or warnings. It provides an overview of the health and status of your Kubernetes clusters and applications within Carbon.'
        version: '[AI] `go-carpet --version` is a command used to check for the current version of the "go-carpet" tool or package, which is typically installed and executed using the Go programming language. The command retrieves and displays the version number, allowing users to ensure they are running the latest or desired version, or to troubleshoot potential compatibility issues with other dependencies.'
