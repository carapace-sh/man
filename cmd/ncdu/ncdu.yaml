# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ncdu
description: NCurses Disk Usage
flags:
    --color=: Set color scheme
    --confirm-quit: Confirm quitting ncdu
    --exclude-caches: Exclude directories containing CACHEDIR.TAG
    --exclude-kernfs: Exclude Linux pseudo filesystems
    --exclude=: Exclude files that match PATTERN
    --si: Use base 10 (SI) prefixes instead of base 2
    "-0": UI to use when scanning
    "-1": UI to use when scanning
    "-2": UI to use when scanning
    -L, --follow-symlinks: Follow symbolic links
    -V: Print version
    -X, --exclude-from=: Exclude files that match any pattern in FILE
    -e: Enable extended information
    -f=: Import scanned directory from FILE
    -h, --help: This help message
    -o=: Export scanned directory to FILE
    -q: Quiet mode, refresh interval 2 seconds
    -r: Read only
    -v, --version: Print version
    -x: Same filesystem
documentation:
    command: '[AI] `ncdu` is a cross-platform, recursive disk usage analysis tool written in Rust. It provides an interactive tree-like output to help users identify and eliminate large files or directories, reducing overall disk consumption. By running `ncdu` followed by the path to a directory, users can explore its contents in a hierarchical view with real-time updates on file size and usage statistics.'
    flag:
        "0": '[AI] `ncdu` is a command-line tool for finding and deleting large files in a directory tree. The option `-0` is used to display file sizes in a zero-padded format, making it easier to identify very large files. For example, with a size of 123MB, it would be displayed as `123M`. This can be useful when scanning directories for potential disk space consumers.'
        "1": '[AI] `ncdu` is a disk usage analysis tool for Linux and Unix systems. The command `ncdu -1` is used to display the file and directory listings in a single column format. The number "-1" specifies the output format. This makes it easier to quickly scan through long lists of files and directories, particularly when dealing with large directories or analyzing disk usage.'
        "2": '[AI] `ncdu` is a disk usage analysis tool, often used in Linux systems. The `-2` option is used to display output in two columns: one for file and directory names, and another for their sizes. This format provides a quick overview of large files and directories in terms of disk space consumption.'
        V: '[AI] `ncdu` is a disk usage analysis tool written in Rust programming language. The `-V` option is used to display the version information of the `ncdu` software when run in the terminal or command line interface. It provides details such as the version number, build date, and Git commit hash if applicable.'
        color: '[AI] `ncdu` is a disk usage analysis tool written in Rust. The `--color` option enables color output, making it easier to visually identify large directories and files based on their size and type. For instance, directories are usually displayed in blue, while executable files may be shown in green, and compressed files in red. This can help users quickly assess where disk space is being used most extensively.'
        confirm-quit: '[AI] `ncdu` is a disk usage analysis tool for Linux and macOS, written in Rust. The `--confirm-quit` option is a safety feature when used with the interactive mode of the command. With this flag set, ncdu will prompt the user for confirmation before exiting the program, preventing accidental termination that could lead to unwanted changes or deletions.'
        e: '[AI] `ncdu` is a file system size estimator and disc usage analyzer written in Rust. The command `ncdu -e` is used to interactively explore the file system, providing real-time statistics on the directory size as you navigate through it using the keyboard. By adding the `-e` flag, `ncdu` enters an interactive mode where you can use various commands like `d`, `u`, `r`, and others to navigate directories up or down, list subdirectories, delete files/directories, etc. This mode allows for more detailed exploration and management of large file systems.'
        exclude: '[AI] `ncdu` is a disk usage analysis tool for finding large files and directories. The option `--exclude` is used to exclude specific patterns or files from the analysis. For example, `ncdu --exclude=''.*'' --exclude=''/path/to/folder/'' will skip directories and files matching the given pattern or path during the analysis, allowing for a more focused view of disk usage.'
        exclude-caches: '[AI] `ncdu` is a disk usage analysis tool written in Rust. The option `--exclude-caches` is used to exclude directories that are typically used as caches by various applications and systems, such as `/var/cache`, `/tmp`, and `~/.cache`. By excluding these directories from the analysis, the output will provide a more accurate representation of the disk usage consumed by user data.'
        exclude-from: |-
            [AI] The `ncdu` (NcDuplicates) command is a disk usage analysis tool for finding and deleting duplicated files in Linux and Unix systems. The option `--exclude-from` allows users to specify a file containing a list of patterns or paths to exclude from the analysis. This can be useful when there are certain directories or file types that should not be considered during the disk usage analysis. For example, you might have a file named `excludes.txt` with the following content:

            ```bash
            /path/to/directory1/
            *.log
            ```

            You can then use this command to analyze disk usage while excluding the specified directories and file types:

            ```bash
            ncdu --exclude-from=excludes.txt
            ```
        exclude-kernfs: '[AI] The `ncdu` command is a disk usage analyzer for Linux and other Unix systems. The option `--exclude-kernfs` is used to exclude the kernel file system (`/sys`, `/proc`) from being displayed in the disk usage analysis. These directories are not part of the regular user file system, and their contents are managed by the kernel rather than user files. By excluding them, the output of `ncdu` will focus only on the user-accessible directories and files.'
        f: '[AI] `ncdu` is a disk usage analysis tool, written in Rust. The option `-f` is used to force recursive scanning of directories and following symbolic links during the analysis process. This means that the entire file hierarchy under the specified directory will be analyzed, including hidden files and directories, as well as symbolic links. The output shows the size of each directory and the files it contains, allowing users to easily identify large directories or files.'
        follow-symlinks: '[AI] `ncdu` is a disk usage analysis tool for finding huge files and directories. The command `ncdu --follow-symlinks` is used to recursively scan directories including their symbolic links. By using `--follow-symlinks`, the size of the symlinked directories and files will be included in the calculation of the total disk usage, providing a more accurate representation of the actual disk usage in the file system.'
        help: |-
            [AI] `ncdu` is a file system usage analyzer written in Rust. The command `ncdu --help` displays the help information for using this tool. Here's a summary of what you might find:

            - `ncdu` is a tool to find big files and directories.
            - Usage: `ncdu [OPTIONS] [PATH]...` or `ncdu [--json] [OPTIONS] [PATH]...`.
            - Options include: `-l, --long` to display detailed information for each file; `-q, --quiet` for silent output; `-r, --recursive` for recursive search; `--human-readable` or `-h` for human readable format; and `--json` for JSON output.
            - By default, it will interactively display the largest files and directories under the given paths.
            - Press 'q' to quit at any time, or 's' to sort by a different column.
        o: '[AI] `ncdu` is a command-line disk usage analyzer for Linux and other Unix systems. The option `-o` or `--output` is used to change the output format. By default, `ncdu` displays the output in a tree structure. With the `-o` option, you can specify different formats such as JSON, tabular, or custom templates using `-T`. For example, `ncdu -o json > report.json` will generate a JSON report that can be processed further by other tools.'
        q: '[AI] `ncdu` is a disk usage analysis tool for finding big files and directories. The option `-q` quiets progress reports during the scan, making the output display only the total size and the list of largest files and directories.'
        r: '[AI] `ncdu` is a command-line disk usage analyzer for finding and removing large files in Unix-like operating systems. The option `-r` or `--recurse` enables recursive scanning, allowing `ncdu` to display the size of directories and their contents, including subdirectories. This can help identify large directories and files that contribute to disk usage.'
        si: '[AI] `ncdu` is a file system usage analyzer written in Rust. The command `ncdu --si` is used to display the size information in an human-readable format (--si option) along with the depth of directories (default is one level) when scanning the directory tree for file usage statistics. This can help identify large files and directories that consume a significant amount of disk space.'
        version: '[AI] `ncdu` is a file system utility that displays size usage of directories in a tree-like format. The command `ncdu --version` is used to display the version information of the installed `ncdu` application, including its name, version number, and compilation details. This can be helpful for checking which version of `ncdu` is currently being used and for troubleshooting any potential issues with compatibility or functionality.'
        x: '[AI] `ncdu` is a file system size estimator and disk usage analyzer for Unix-like systems. The option `-x` or `--one-file-system` limits the analysis to a single file system. When used with `ncdu`, this option helps in focusing on the disk usage of a specific file system without getting overwhelmed by the data spread across multiple mounted filesystems.'
