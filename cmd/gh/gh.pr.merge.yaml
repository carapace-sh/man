# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: merge [<number> | <url> | <branch>]
description: Merge a pull request
group: Targeted commands
flags:
    --admin: Use administrator privileges to merge a pull request that does not meet requirements
    --auto: Automatically merge only after necessary requirements are met
    --disable-auto: Disable auto-merge for this pull request
    --match-head-commit=: Commit `SHA` that the pull request head must match to allow merge
    -A, --author-email=: Email `text` for merge commit author
    -F, --body-file=: Read body text from `file` (use "-" to read from standard input)
    -b, --body=: Body `text` for the merge commit
    -d, --delete-branch: Delete the local and remote branch after merge
    -m, --merge: Merge the commits with the base branch
    -r, --rebase: Rebase the commits onto the base branch
    -s, --squash: Squash the commits into one commit and merge it into the base branch
    -t, --subject=: Subject `text` for the merge commit
documentation:
    command: '[AI] The `gh pr merge` command is used in GitHub''s Command-Line Interface (CLI) tool, `git-hub`, for merging a pull request locally. When you run this command, it fetches the latest state of the branches involved in the pull request, applies the changes from the pull request branch to your local working directory using a three-way merge strategy, and then creates a new commit with the merge message provided or defaulting to "Merge pull request ...". Finally, you can push this commit to update the target branch in the remote repository, effectively merging the pull request.'
    flag:
        admin: '[AI] The `gh pr merge --admin` command is a GitHub CLI (Command Line Interface) command used to merge a pull request with admin privileges. When a pull request has conflicts or requires additional approval, regular users may not have the permission to merge it. In such cases, an administrator can use this command to resolve any merge conflicts and merge the pull request into the main branch. This helps in maintaining the repository''s integrity while allowing for efficient collaboration.'
        author-email: '[AI] The `gh pr merge --author-email <email>` command is used in GitHub''s Git CLI (Command Line Interface) to merge a pull request while specifying an author email for the commit message. This can be useful when creating a merged commit with a different author email than your own, maintaining a clear record of who made each change in a collaborative project. The `<email>` should be an existing GitHub email address associated with a user account.'
        auto: |-
            [AI] `gh pr merge --auto` is a GitHub command used to automatically merge a pull request (PR) with fast-forward changes. It assumes that there are no conflicts between the branches being merged, and the changes in the PR can be cleanly applied to the target branch without further intervention. The `--auto` flag tells GitHub's merge engine to perform this action without requiring confirmation from you or any other collaborators.

            This command is useful when merging small and non-conflicting changes, as it saves time by streamlining the merge process. However, it should be used with caution since automatic merges could potentially introduce unwanted side effects if there are conflicts between branches that were not resolved beforehand. In larger projects or when dealing with more complex changes, it's generally recommended to review the differences carefully and manually merge the PR using a pull request workflow.
        body: '[AI] `gh pr merge --body` is a command used in GitHub''s Git Hub CLI (gh) for managing pull requests. This command merges the specified pull request into its target branch with a commit message set to the content provided after the `--body` flag. The merged code will be integrated into the main project upon running this command. It streamlines the process of resolving and closing pull requests by automatically creating a merge commit, allowing for easier review and tracking.'
        body-file: '[AI] `gh pr merge --body-file` is a GitHub CLI command used to merge a pull request (PR) with a specific file containing merge commit messages as its body. When you have a large or complex PR, it''s often more convenient to write and edit the commit messages offline in a text editor before merging. By using `--body-file`, you can specify the path to that file when running the `gh pr merge` command, allowing GitHub to apply the commits with the provided commit messages during the merge process. This helps keep your commit history clear and organized while maintaining control over the merge commit messages.'
        delete-branch: '[AI] The `gh pr merge --delete-branch` command is a GitHub CLI (Command Line Interface) operation used to merge a pull request and delete its associated source branch. After merging, the local and remote branches are updated with the latest changes, and the source branch is deleted from the remote repository to avoid clutter and maintain a clean branching model. This command helps streamline the merge and cleanup process when working on GitHub projects.'
        disable-auto: '[AI] The `git hub pr merge --disable-auto` command is used to manually merge a pull request (PR) in GitHub instead of using the fast-forward merge method with no commit. When you use this command, GitHub will open a new page for reviewing and confirming the merge. This can be useful when there are conflicts or other issues that require manual intervention before merging. The `--disable-auto` flag instructs GitHub to disable automatic merging and instead present the PR for manual review and merge.'
        match-head-commit: '[AI] The `git pr merge --match-head-commit` command is used to perform a fast-forward merge in GitHub''s command line interface (CLI) using a commit SHA or branch name as an argument. It specifically seeks to find and merge the upstream branch that matches the current head commit, which makes it useful for merging pull requests with conflicting changes that require manual resolution. This command sets up a merge commit when there are conflicts, allowing users to manually resolve any issues before completing the merge process.'
        merge: '[AI] The `gh pr merge --merge` command is used in GitHub''s GitHub CLI (gh) to perform a merge commit on a pull request (PR). When you run this command, GitHub merges the changes from the PR branch into the base branch, creating a new commit with two parents representing both branches. This is often referred to as a "merge commit" or "fast-forward merge." By default, GitHub resolves any potential conflicts automatically using its built-in merge algorithm. Once the merge is complete, it closes the associated PR and sets the merged branch as the default one for future pull requests from that source branch.'
        rebase: |-
            [AI] The `git pr merge --rebase` command is used in Git to merge a pull request (PR) using the rebase workflow. This means that instead of creating a new branch for the PR changes and then merging it into the target branch, the changes are applied directly onto the target branch, resulting in a cleaner commit history.

            The `git pr merge` command is a shorthand for both fetching the remote branch (typically the branch associated with the PR) and then rebasing the current local branch onto that remote branch. This allows you to review, squash, or reword the commits during the rebase process before they're merged into the target branch. It's often used in collaborative development workflows for keeping commit histories tidy and cohesive.
        squash: '[AI] `gh pr merge --squash` is a GitHub command used to merge a pull request with the squashing option. This means that multiple commit messages are combined into a single commit, creating a cleaner and more concise commit history. The squash process allows developers to reword or edit commit messages before they are merged into the main branch, ensuring consistent and clear messaging.'
        subject: |-
            [AI] The `gh pr merge --subject` command is a GitHub CLI (Command Line Interface) command used to automatically merge a pull request and update its associated branch with a new commit message.

            The `--subject` option sets the commit message for this merge operation. This can be useful when you want to provide a clear description of what changes were made in the merged code. The flag accepts a string argument, which becomes the new commit message. After executing this command, both the pull request and the branch are updated with the merged changes and the provided commit message.
