# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create
description: Create an environment based on an environment definition file
flags:
    --force: Force creation of environment
    --json: Report all output as json
    --no-default-packages: Ignore create_default_packages in the .condarc file
    --offline: Offline mode
    --solver=: Choose which solver backend to use
    -C, --use-index-cache: Use cache of channel index files, even if it has expired
    -d, --dry-run: Only display what can be done with the current command, arguments, and other flags
    -f, --file=: Environment definition file
    -h, --help: Show this help message and exit
    -k, --insecure: Allow conda to perform "insecure" SSL connections and transfers
    -n, --name=: Name of environment
    -p, --prefix=: Full path to environment location
    -q, --quiet: Do not display progress bar
    -v, --verbose: Use once for info, twice for debug, three times for trace
documentation:
    command: '[AI] `conda-env create` is a command used in Anaconda and Miniconda environments to create a new conda virtual environment with a specified name and optional base environment. The new environment can be later activated for installing and managing packages independently from other environments.'
    flag:
        dry-run: '[AI] `conda create --dry-run` is a command used in Anaconda''s Conda environment management system. It simulates the creation of a new conda environment, including the specified package installations, without actually creating it. The output shows which packages would be installed if the command were run with `--dry-run` replaced by `--create`. This is useful for checking the effect of creating an environment with certain packages before actually doing so.'
        file: '[AI] The `conda env create` command with the `--file` option is used to create a new Conda environment based on the specifications defined in a Conda environment file. This file, typically named `environment.yml` or `environment.txt`, contains a list of required packages and their versions for the desired environment. When you run `conda env create --file <filename>`, it creates a new environment with the specified packages and saves the environments'' metadata in the YAML or text format defined by the file.'
        force: '[AI] `conda-env create --force` is a command used in Anaconda or Miniconda to create a new Conda environment with a specific name, even if that environment already exists. The `--force` flag overwrites any existing environment with the same name without asking for confirmation. It''s useful when you need to recreate an environment from scratch.'
        help: |-
            [AI] `conda create` is a command in Anaconda's conda package manager for creating new environments (isolated working spaces with specific packages and their versions). The `--help` option displays detailed help information about using this command. Here's a brief summary:

            ```bash
            conda create --help
            ```

            Creates a new conda environment with the given name and optional specifications, such as a base environment or package lists. Optional arguments include:

            - `--name NAME`: The name of the new environment to create.
            - `--file FILE.txt`: A text file listing packages (including channels) and their versions to install in the new environment.
            - `--clone SOURCE_ENV`: Create a new environment identical to the given source environment, including all packages and dependencies.
            - `--prefix PATH`: Path where packages for this environment will be installed. Defaults to ~/anaconda3 (on Windows) or /anaconda3 (on other systems).
            - `--dry-run`: Print a summary of what would be done if the create command were run without this option.

            For more detailed information, use the `--help-detail` flag.
        insecure: '[AI] The `conda-env create --insecure` command is a function in Anaconda''s Conda package management system used to create new conda environments with optional permissions bypassing safety checks. This flag allows the creation of an environment without requiring user confirmation for actions such as installing packages from untrusted sources, effectively ignoring potential security risks. It should be used with caution and only when explicitly needed, as it may introduce vulnerabilities into your Conda environments.'
        json: '[AI] `conda-env create --json` is a command used in Anaconda''s Conda environment management system to create a new conda environment with an empty environment.json file. The option `--json` tells Conda to output the newly created environment configuration as a JSON file instead of creating and activating the environment. This command sets up a new, blank environment structure that can be filled with specific packages and dependencies later using other Conda commands or by editing the environment file manually.'
        name: '[AI] `conda create` is a command used in Anaconda and Miniconda distributions to create and manage isolated Python environments in Conda. The `--name` option follows this command and specifies the name of the new environment that will be created. So, `conda create --name myenv` would create a new environment named "myenv".'
        no-default-packages: '[AI] The `conda create` command with the `--no-default-packages` option is used to create a new Anaconda or Miniconda environment without installing any default packages. This means that only the explicitly specified packages will be installed in the new environment during creation. If no packages are listed, an empty environment will be created. This can be useful when setting up reproducible environments for specific projects with exact package versions.'
        offline: '[AI] The `conda env create --offline` command is used to create a new Anaconda or Miniconda environment using local packages stored in the cache files instead of connecting to remote servers for downloading packages. This can be useful when working in environments with limited internet connectivity, or when wanting to ensure reproducibility by using specific versioned packages that have been previously saved locally. The command takes the name of the new environment as an argument and creates it with the specified local package files.'
        prefix: '[AI] `conda create` is a command used in Anaconda or Miniconda distribution of Python for creating new Conda environments. The option `--prefix` specifies the root directory where the new environment will be installed. For example, `conda create --prefix /path/to/new_env` creates a new environment with the given path as its installation directory. By default, Conda installs environments in the `~/anaconda3` or `~/miniconda3` folder, depending on your distribution. So, if no prefix is provided, the new environment will be created there.'
        quiet: '[AI] `conda create` is a command used in Anaconda and Miniconda distributions to create new conda environments. The `--quiet` option is used to suppress or minimize output during environment creation. This can be useful when creating multiple environments or automating the process with scripts, as it avoids cluttering the terminal with unnecessary messages. The main effect of `conda-env create --quiet` is to create a new conda environment silently.'
        solver: '[AI] The `conda-env create` command is used to create a new conda environment in Anaconda or Miniconda distribution. The `--solver` option specifies which package solver to use when installing packages into the new environment. By default, conda uses its own solver (called "conda-forge") for dependency resolution. However, you can also specify other solvers such as "mjk" or "pip" using `--solver` flag. Using a different solver may affect which packages are installed and how they interact with each other. For example, if you want to install packages that are not available in the default conda-forge channel, you might need to use the "pip" solver and manually install those packages using pip commands.'
        use-index-cache: '[AI] The `conda env create --use-index-cache` command is used in Anaconda or Miniconda distribution of the Conda package manager to create a new environment using the existing index cache instead of fetching packages from the default or remote servers again. This can save time and bandwidth if you have previously downloaded the packages and want to create an identical environment on another machine or rebuild an environment that was accidentally deleted. The `--use-index-cache` option tells Conda to use the local index cache files instead of connecting to the internet to download the same packages again.'
        verbose: '[AI] `conda-env create --verbose` is a command used in Anaconda or Miniconda to create a new conda environment with detailed output. The `--verbose` option increases the level of output, providing more information about the creation process including the packages being installed and their versions. This can be useful for understanding exactly what is included in the new environment.'
