# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
description: run Go test(s)
flags:
    -asan: run in address sanitizer builder mode
    -banner=: banner prefix
    -compile-only: compile tests, but don't run them
    -k: keep going even when error occurred
    -list: list available tests
    -msan: run in memory sanitizer builder mode
    -no-rebuild: overrides -rebuild (historical dreg)
    -race: run in race builder mode (different set of tests)
    -rebuild: rebuild everything first
    -run=: run only those tests matching the regular expression
    -v: verbosity
documentation:
    command: '[AI] The `go test` command is a part of the Go programming language''s standard library for running tests associated with Go source files. When executed in a terminal or command prompt, it searches for `.go` files with test functions (functions named `Test*`) in the current directory and its subdirectories, then runs those tests using the specified testing framework. It reports the results of each test run, including any failures or errors.'
    flag:
        asan: |-
            [AI] `go-tool-dist test -asan` is a command used in Go programming language for running unit tests with AddressSanitizer (ASAN) memory safety checking tool enabled. Here's a breakdown of the components:

            1. `go-tool-dist`: This is a command line utility in Go that includes various subcommands, such as `test`, for building and testing Go programs. The `dist` part refers to distributional utilities.

            2. `test`: The `test` subcommand of `go-tool-dist` runs tests written in the Go language. It discovers and executes test cases within the source code.

            3. `-asan`: This flag enables AddressSanitizer (ASAN) while running the tests. ASAN is a static analyzer and runtime memory error detector that helps find errors related to memory management, such as buffer overflows or use-after-free.
        banner: '[AI] The `go-tool-dist test` command is a Go programming language tool used to run tests for Go projects. The `-banner` option displays a banner before running the tests. It''s often used by project maintainers to add custom branding or information to the test output, making it clear which test suite is being run.'
        compile-only: '[AI] `go-tool-dist test -compile-only` is a command used in Go programming language for testing and compiling source files without running tests or executing the main function. The `test` command in Go toolchain is used to run tests, but with the `-compile-only` flag, it only compiles the source files needed for testing (and the test files themselves) instead of actually executing the tests. This can be useful when you want to check if your code changes have resulted in valid binary files without affecting or depending on test results.'
        k: '[AI] `go-tool-dist test -k` is a command used in Go programming language to run tests with the coverage report enabled using the Go testing tool `go test`. The `-k` flag stands for "keep", which tells the tool not to clean the test output directory before running the tests. This means that if you have previously generated coverage reports, they will be preserved and appended to in this run instead of being overwritten.'
        list: '[AI] `go-tool-dist test -list` is a command used in Go programming language to list all tests defined in the current module or project. The `go-tool-dist` is the Go distribution tool and the `test` flag runs the testing tool with various options. In this specific case, the `-list` option generates a list of test files instead of running them, providing information about the location and names of test cases for further reference or automation purposes.'
        msan: '[AI] `go-tool-dist test -msan` is a command used in Go programming language for running tests with memory safety analysis. The `go-tool-dist` is the Go distributor tool, and `test` is the testing command. The `-msan` flag enables memory safety analysis during test execution using Google''s Memory Safety Analyzer (MSAN). This command checks if there are any memory bugs such as use-after-free, double free, or null pointer dereferencing in the Go source code under test.'
        no-rebuild: |-
            [AI] The command `go-tool-dist test -no-rebuild` is used in Go programming language to run unit tests without rebuilding the existing project first. Here's a brief explanation:

            - `go-tool-dist`: This is the short form of `go get -d`, which is a Go command for downloading and extracting the source code of required packages that your project depends on, but not yet installed or built. It creates a local directory named `go-cache`.
            - `test`: This is a Go command to run tests in the current module or the specified package using the test files under the `test` directory.
            - `-no-rebuild`: This flag instructs Go not to rebuild the project before running the tests, even if there are changes in the source code. It saves time and resources by skipping unnecessary builds when only tests need to be executed.
        race: '[AI] `go-tool-dist test -race` is a command used in Go programming language for performing race detection during testing. This command runs the Go test tool (`go test`) with the additional flag `-race`. The `-race` flag enables the Race Detector, which helps identify potential data races in concurrent Go programs by executing tests twice and comparing the results to find discrepancies caused by concurrent access to shared variables. This can help developers ensure thread safety and improve the reliability of their multi-threaded or concurrent code.'
        rebuild: |-
            [AI] `go-tool-dist test -rebuild` is a command used in Go programming language to execute integrated testing and rebuild all tests and the application. Here's what each part does:

            1. `go-tool`: This refers to the Go toolchain, which includes various tools like `go build`, `go test`, etc.
            2. `dist`: This is a subcommand of the Go tool that performs a distribution build of your Go project, which generates optimized binaries and static libraries.
            3. `test`: This is another subcommand of the Go tool used for running tests in your project. It discovers, runs, and reports on all tests defined in the `go.mod` file.
            4. `-rebuild`: This flag instructs Go to not only run the tests but also rebuild any test files or packages that have changed since the last build. This ensures that the tests are executed with the most recent code changes.
        run: '[AI] `go-tool-dist test` is a command used in Go programming language to run unit tests. The `test` argument specifies the testing directory or file, and `-run` option allows you to specify the name of the test function or case to run explicitly. So, `go-tool-dist test -run` <TestName> will only execute the specified test in the Go project.'
        v: '[AI] `go-tool-dist test` is a command provided by Go programming language''s `govbuild` tool (short for "go build and test distribution"). The `test` sub-command is used to run the tests associated with the current Go module. The `-v` flag stands for "verbose," which means it will display more detailed information during the testing process, including test names as they are run, and any error or failure messages. So in essence, this command runs all tests in the Go module and provides detailed output about each test''s execution.'
