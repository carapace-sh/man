# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: audit
description: Perform a vulnerability audit against the installed packages
flags:
    --environment=: Which environments to cover
    --exclude=: Array of glob patterns of packages to exclude from audit
    --ignore=: Array of glob patterns of advisory ID's to ignore in the audit report
    --json: Format the output as an NDJSON stream
    --severity=: Minimal severity requested for packages to be displayed
    -A, --all: Audit dependencies from all workspaces
    -R, --recursive: Audit transitive dependencies as well
documentation:
    command: '[AI] `yarn npm audit` is a command used to check for known security vulnerabilities in the dependencies of your Node.js project. This command is actually a wrapper around `npm audit` and uses Yarn as the package manager, allowing you to run the security check within your existing Yarn workflow. The output will display any packages with known vulnerabilities, along with recommended actions to mitigate those risks.'
    flag:
        all: '[AI] `yarn npm audit --all` is a command used in JavaScript project development with Yarn package manager. This command initiates an NPM audit of all the projects'' dependencies in the current directory and their subdirectories, checking for known vulnerabilities and suggesting safer alternatives. The goal is to maintain a secure and up-to-date dependency tree by identifying and addressing potential risks.'
        environment: '[AI] The `yarn npm audit --environment` command is used in JavaScript project development with Yarn package manager. It runs the `npm audit` command, which checks for known security vulnerabilities in your project''s dependencies and their direct dependencies. The `--environment` option specifies a Node.js runtime environment, such as "node14.x" or "mainnet", that influences the list of allowed packages based on the environment''s packageJson file. This command helps maintain the security of your project by identifying and suggesting solutions for any found vulnerabilities.'
        exclude: '[AI] `yarn npm audit --exclude` is a command used to run an NPM audit for vulnerability scanning in a Yarn project, but it excludes specific packages or directories from the scan by passing the `--exclude` option followed by the packages or directories to be excluded. This allows users to focus on addressing vulnerabilities in their dependencies while excluding those that are intentionally included and managed outside of npm or are known to be safe.'
        ignore: '[AI] The `yarn npm audit --ignore` command is used to run an NPM audit scan with Yarn package manager, but ignore specific packages or vulnerabilities that are flagged during the scan. The `--ignore` option takes a list of packages or vulnerability types to be excluded from the report. This can be useful when dealing with false positives or dependencies with known and accepted risks.'
        json: '[AI] `yarn npm audit --json` is a command used in Node.js projects to check for known vulnerabilities in the project''s dependencies. The `audit` command scans the `package-lock.json` or `yarn.lock` file and outputs any security issues it finds. The `--json` option tells the command to output the results as a JSON object, which can be easily parsed and processed by scripts or other tools.'
        recursive: '[AI] `yarn npm audit --recursive` is a command used in JavaScript project development with Yarn package manager. The `npm audit` part is an NPM (Node Package Manager) command that checks the installed packages for known vulnerabilities. The `--recursive` flag expands the search to transitive dependencies, meaning it will also scan and report any vulnerabilities found in the dependencies of your project''s dependencies. This helps ensure the entire ecosystem remains secure.'
        severity: '[AI] `yarn npm audit --severity` is a command used to scan your project''s dependencies for known vulnerabilities using the Node Package Manager (npm). The `--severity` flag filters the output based on the severity level of the reported vulnerabilities. It accepts three levels: "high", "medium", and "low". By default, it shows all vulnerabilities regardless of their severity. This command helps maintain the security of your project by keeping dependencies up-to-date and free from known risks.'
