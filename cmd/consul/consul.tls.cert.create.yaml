# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create
description: Create a new certificate
flags:
    --additional-dnsname=: Provide an additional dnsname for Subject Alternative Names.
    --additional-ipaddress=: Provide an additional ipaddress for Subject Alternative Names.
    --ca=: Provide path to the ca.
    --cli: Generate cli certificate.
    --client: Generate client certificate.
    --days=: Provide number of days the certificate is valid for from now on.
    --dc=: Provide the datacenter.
    --domain=: Provide the domain.
    --key=: Provide path to the key.
    --node=: When generating a server cert and this is set an additional dns name is included of the form <node>.server.<datacenter>.<domain>.
    --server: Generate server certificate.
documentation:
    command: '[AI] The `consul tls cert create` command is used to generate new Transport Layer Security (TLS) certificates for Consul, a connectivity and service discovery tool. This command generates both the server certificate and key, as well as a client certificate and key in PEM format. These certificates can then be used to secure Consul communication and ensure encrypted data transfer between Consul servers and clients.'
    flag:
        additional-dnsname: '[AI] The `consul tls cert create` command is used in Hashicorp Consul to generate TLS (Transport Layer Security) certificates for securing Consul''s HTTP and gRPC interfaces. The `--additional-dnsname` flag allows specifying extra Fully Qualified Domain Names (FQDNs) to be included in the generated certificate, apart from the default one which is the server address. This can be useful for configuring Consul to answer DNS queries and support multiple services that have different FQDNs. The additional DNS names will be included as Subject Alternative Names (SANs) in the TLS certificates.'
        additional-ipaddress: '[AI] The `consul tls cert create` command is used in Hashicorp''s Consul service to generate new Transport Layer Security (TLS) certificates for secure communication between different components of the Consul cluster or with external clients. The `--additional-ipaddress` option allows you to specify additional IP addresses that should be included in the TLS certificates, beyond the default server address. This can be useful if your Consul servers have multiple network interfaces or public IP addresses. By including all relevant IP addresses in the TLS certificates, you ensure secure communication from any of those addresses.'
        ca: '[AI] `consul tls cert create --ca` is a command used in Hashicorp Consul, an service discovery, configuration, and orchestration tool. This specific command generates a new Transport Layer Security (TLS) certificate for Consul servers using the specified Certificate Authority (CA) for signing the certificate. The CA is a trusted entity that signs digital certificates, ensuring their authenticity and encryption capabilities. By utilizing this command, you create a secure communication channel between your Consul servers and clients.'
        cli: |-
            [AI] `consul tls cert create --cli` is a command used in the Consul service discovery and configuration tool to generate new Transport Layer Security (TLS) certificates. The `--cli` option indicates that this action is being performed using the Consul CLI (Command-Line Interface).

            The `consul tls cert create` subcommand generates a new private key, Certificate Signing Request (CSR), and signed TLS certificate for the specified server or client. The generated files can be used to secure Consul communication with TLS encryption. These files typically include:

            1. Private key file
            2. CSR file
            3. Signed server certificate file
            4. Signed client certificate file (for client certificates)

            The command will prompt for the required information like common name, organization name, and location to generate the TLS certificates. The generated files can then be used to configure Consul clients or servers with secure communication.
        client: '[AI] `consul tls cert create --client` is a command provided by Hashicorp Consul to generate TLS (Transport Layer Security) certificates for clients communicating with a Consul server over HTTPS. The `--client` flag specifies that the command will generate certificates for client-side communication, as opposed to creating certificates for the server or other intermediaries. These client certificates can then be used to secure and authenticate communication between the client applications and the Consul server.'
        days: '[AI] `consul tls cert create` is a command from Hashicorp''s Consul service to generate new Transport Layer Security (TLS) certificates for secure communication between Consul servers and clients. The `--days` option specifies the number of days these certificates will be valid, after which they will expire. This helps maintain security by ensuring that old certificates are not inadvertently used after their expiration date.'
        dc: '[AI] The `consul tls cert create --dc` command is used in Hashicorp Consul to generate Transport Layer Security (TLS) certificates for a specific data center (DC). This command creates and manages TLS certificates for secure communication between servers and clients within the specified data center. These certificates are essential for securing API and RPC communications, encrypting data, and verifying identities within the Consul service mesh.'
        domain: '[AI] The `consul tls cert create` command is used in Hashicorp Consul to generate and manage Transport Layer Security (TLS) certificates for securing client-server communication between Consul components. The `--domain` flag specifies the domain name that will be included in the generated TLS certificates. This domain should match the one configured on the Consul server or clients for secure communication. The command generates a private key and a certificate signing request (CSR), then uses the specified domain to request a certificate from an external Certificate Authority (CA) or self-signs a certificate using the local CA configuration, depending on the setup. The generated certificates are saved as files, typically in PEM format, for use in securing Consul communication.'
        key: '[AI] The `consul tls cert create` command is a part of Hashicorp Consul, an open-source distributed, highly available, and data center aware solution to connect and secure services. The `--key` flag is used to specify the path to the existing private key file when creating a new Transport Layer Security (TLS) certificate. This command generates a new Certificate Signing Request (CSR), signs it with the specified private key, and then generates a new X.509 TLS certificate and its corresponding key. The output of this command is typically the new certificate and key files, which can be used for securing Consul communication between servers or clients.'
        node: '[AI] `consul tls cert create --node` is a command in Hashicorp Consul, an service discovery, configuration, and orchestration tool. This specific command is used to generate new Transport Layer Security (TLS) certificates for a Consul node. The node identities are automatically managed by Consul''s built-in certificate authority, ensuring secure communication between nodes in the cluster.'
        server: '[AI] The `consul tls cert create --server` command is used to generate and manage TLS (Transport Layer Security) certificates for Consul, an open-source distributed, highly available, and data center management tool. This command creates a new server certificate and key, or renews existing ones, signed by the configured Certificate Authority (CA). The generated certificates are saved as files in the specified directory, ready to be used for securing Consul communication between servers and clients over HTTPS.'
