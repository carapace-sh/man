# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit [<number> | <url> | <branch>]
description: Edit a pull request
group: Targeted commands
flags:
    --add-assignee*=: Add assigned users by their `login`. Use "@me" to assign yourself.
    --add-label*=: Add labels by `name`
    --add-project*=: Add the pull request to projects by `name`
    --add-reviewer*=: Add reviewers by their `login`.
    --remove-assignee*=: Remove assigned users by their `login`. Use "@me" to unassign yourself.
    --remove-label*=: Remove labels by `name`
    --remove-project*=: Remove the pull request from projects by `name`
    --remove-reviewer*=: Remove reviewers by their `login`.
    -B, --base=: Change the base `branch` for this pull request
    -F, --body-file=: Read body text from `file` (use "-" to read from standard input)
    -b, --body=: Set the new body.
    -m, --milestone=: Edit the milestone the pull request belongs to by `name`
    -t, --title=: Set the new title.
documentation:
    command: '[AI] `gh pr edit` is a GitHub CLI (Command Line Interface) command used to open an existing pull request for editing directly in your default text editor or IDE. This allows you to make changes to the files in the pull request and then resubmit those changes, updating the pull request with the latest modifications. The command assumes that you have already authenticated with GitHub and are currently working on a local clone of the repository.'
    flag:
        add-assignee: '[AI] The `gh pr edit --add-assignee` command is a GitHub CLI (Command Line Interface) command used to update an existing pull request by adding an assignee. This means that you can assign a specific developer or team to be responsible for reviewing and merging the changes made in the pull request. This helps ensure that the right people are involved in the review process, improving code quality and collaboration within a development team.'
        add-label: '[AI] The `gh pr edit --add-label` command is a GitHub command used in the GitHub CLI (Command Line Interface) to add a label to an open pull request. This command takes the ID or title of the pull request as an argument and appends a new label to it without opening the file for editing. This can be useful for quick actions like marking a PR with a specific status or tag, such as "wip" (work in progress), "docs", or "review-needed".'
        add-project: '[AI] The `gh pr edit --add-project` command is used with GitHub''s `gh` CLI (Command Line Interface) tool to modify an existing pull request on a GitHub repository. More specifically, it adds or associates a new project with the pull request. This can be useful when working on multiple projects within one repository or when collaborating with team members. It does not change the content of the pull request itself but updates the project association for better organization and tracking purposes.'
        add-reviewer: '[AI] The `gh pr edit --add-reviewer` command is a GitHub Desktop or Git CLI action used to add a reviewer to an open pull request (PR) on a GitHub repository. This command allows you to specify the user or username of the reviewer to be added, ensuring that they are notified and given the opportunity to provide feedback on your changes before they''re merged. By including this person in the review process, collaboration and code quality can be improved.'
        base: '[AI] The `gh pr edit --base` command is a GitHub CLI (Command Line Interface) command used to open an existing pull request for editing in your default text editor or IDE. The `--base` flag specifies the branch that the base of the pull request is based on, allowing you to make changes to the current state of that branch before creating a new commit and pushing it to GitHub. This command facilitates in-depth collaborative work on pull requests, making it easier for developers to discuss and improve their code together.'
        body: '[AI] The `gh pr edit --body` command is a GitHub CLI (Command Line Interface) command used to interactively edit the body text of an existing pull request. This command opens the pull request file(s) in your default editor, allowing you to modify and save changes directly from that environment, which will then be committed and pushed automatically back to the branch associated with the pull request. The edited content is applied to the pull request description without creating a new commit on the branch. Once saved, GitHub applies those changes to the pull request, updating its description for further review or merging if all checks pass.'
        body-file: '[AI] The `gh pr edit --body-file` command is a GitHub CLI (Command Line Interface) command used to open an existing pull request for editing, allowing users to modify its body content directly from the terminal. The `--body-file` option specifies a local file that contains the new or updated body text. After making changes in the file, users can save and commit the file, which will update the pull request description with the new content. This command simplifies the process of editing pull requests without using a web browser.'
        milestone: '[AI] The `gh pr edit --milestone` command is a GitHub CLI (Command Line Interface) command used to edit an existing pull request and associate or change its associated milestone. This command modifies the metadata of the pull request, updating the milestone without altering the changes made in the branch being merged. It helps in managing pull requests as part of a project''s development workflow by assigning them to specific milestones for better organization and tracking.'
        remove-assignee: '[AI] The `gh pr edit --remove-assignee` command is a GitHub CLI (Command Line Interface) command used to modify an open Pull Request. Specifically, it removes the current assignee of the pull request without assigning a new one. This can be useful when you want to unassign yourself or someone else from a pull request that no longer requires their attention. It''s important to note that using this command requires authentication through GitHub CLI and the necessary permissions for editing pull requests.'
        remove-label: '[AI] The `gh pr edit --remove-label` command is used with GitHub''s `git-hub` (gh) CLI tool to remove a label from an open pull request in a GitHub repository. The `--remove-label` flag specifies which label to be removed. This operation can be useful when you need to update or change the labeling scheme for your pull requests, or when a label is no longer needed.'
        remove-project: '[AI] The `gh pr edit --remove-project` command is used with GitHub''s `git-hub` CLI tool (short name `gh`) for GitHub actions. This command removes the current project from the active pull request being edited. When you open an existing pull request for editing, it may contain files from other projects in your repository. By running this command, only the files related to the project you want to keep will remain in the pull request. It''s helpful when managing complex repositories and ensuring each pull request focuses on specific changes.'
        remove-reviewer: '[AI] The `gh pr edit --remove-reviewer` command is a GitHub CLI (Command Line Interface) command used to remove a reviewer from a pull request without merging or closing it. This command modifies the current branch, updating the associated pull request with the new changes and removing the specified reviewer''s name. It can be useful when you need to make further changes to a pull request before being ready for a particular reviewer to re-review your work.'
        title: '[AI] `gh pr edit --title` is a command used in the GitHub CLI (Command Line Interface) tool, Gh. It allows you to open an existing pull request for editing directly from the terminal. The "--title" option sets or updates the title of the pull request. Once you''ve made your changes, GitHub will automatically commit and push them for you.'
