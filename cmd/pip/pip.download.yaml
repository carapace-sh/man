# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: download
description: Download packages
flags:
    --abi*=: Only use wheels compatible with Python abi <abi>
    --extra-index-url=: Extra URLs of package indexes to use
    --global-option=: Extra global options to be supplied to the setup.py call
    --implementation=: Only use wheels compatible with Python implementation <implementation>
    --no-binary*=: Do not use binary packages
    --no-build-isolation: Disable isolation when building a modern source distribution
    --no-clean: Don't clean up build directories.
    --no-deps: Don't install package dependencies
    --no-index: Ignore package index
    --only-binary*=: Do not use source packages
    --platform*=: Only use wheels compatible with <platform>
    --pre: Include pre-release and development versions
    --prefer-binary: Prefer older binary packages over newer source packages
    --progress-bar=: Specify type of progress to be displayed
    --python-version=: The Python interpreter version to use for wheel
    --require-hashes: Require a hash to check each requirement against
    --src=: Directory to check out editable projects into
    --use-pep517: Use PEP 517 for building source distributions
    -c, --constraint*=: Constrain versions using the given constraints file
    -d, --dest=: Download packages into <dir>
    -f, --find-links=: If a URL or path to an html file, then parse for links
    -i, --index-url=: Base URL of the Python Package Index
    -r, --requirement*=: Install from the given requirements file
documentation:
    command: '[AI] `pip download` is a command used in Python for installing packages from the Python Package Index (PyPI) repository. When you run this command followed by the name of a package, pip will automatically search and download the latest version of that package along with its dependencies if specified, saving them as .whl or .egg files in your local Python site-packages directory. This makes it easier for developers to manage and use third-party libraries within their projects.'
    flag:
        abi: '[AI] The `pip download --abi` command is used in Python programming language to download a specific version of a package from the PyPI (Python Package Index) repository, with the specified ABIs (Application Binary Interfaces). The `--abi` flag allows specifying which ABIs are required for the package to be installed. For instance, if you use this command with `pip download numpy --abi=mkl`, it will download a version of NumPy that includes the MKL (Math Kernel Library) optimized for Intel''s Math Kernel Library. This can help ensure compatibility with specific system libraries and hardware configurations.'
        constraint: '[AI] `pip download` is a command-line tool for installing Python packages using PIP, the Package Installer for Python. The `--constraint` option is used to specify a particular source for the package installation or to enforce a specific version or tag of a package. With this option, you can ensure that specific dependencies are met or that a specific version of a package is installed instead of letting pip automatically choose. For instance, `pip download --constraint "index-url=https://example.com/simple/" package_name` would install the specified package from the index URL provided. This can be useful when you want to ensure consistency in your development environment or when working with specific package versions that are not publicly available through PyPI.'
        dest: '[AI] The `pip download` command is a sub-command of Pip, which is a package manager for Python. It is used to download specific Python packages from the PyPI (Python Package Index) repository without installing them directly. The `--dest` option specifies the local directory where the downloaded packages will be saved instead of the default location. For instance, `pip download --dest=/path/to/directory package-name` will download and save the package in the specified directory.'
        extra-index-url: '[AI] `pip download --extra-index-url` is a command used with Pip, which is a package manager for Python. The `--extra-index-url` option allows specifying an additional URL to search for packages when installing or updating them. This can be useful when accessing private package repositories or when the default PyPI index does not have the desired package version.'
        find-links: '[AI] `pip download --find-links` is a command used with pip, the Python package installer. This command is used to download packages from external index URLs (referred to as find-links) instead of the default PyPI repository. The downloaded wheel or source files can then be manually installed using other methods like `pip install`. It''s often useful when dealing with private repositories or specific package versions not available in PyPI.'
        global-option: '[AI] `pip download` is a command used in Python programming language for installing packages locally or globally using Pip, which is a package manager for Python. The `--global-option` is an option used with the global installation of a package. It allows passing certain options to the installed package or the pip system itself on a per-user basis. For instance, `pip download --global-option=index-url=https://example.com/simple` sets the index URL for all future installations made using pip globally.'
        implementation: |-
            [AI] The `pip download` command is a utility in Python's package installer, pip. It is used to download specific versions of packages from the PyPI (Python Package Index) repository without installing them.

            The `--implementation` option specifies which Python implementation's packages to download. For instance, if you have multiple Python versions installed on your system and want to download packages for a specific one, use this option:

            ```bash
            pip download <package-name> --implementation <python-implementation>
            ```

            Replace `<package-name>` with the name of the package you want to download and `<python-implementation>` with the name of the Python implementation (e.g., "CPython" or "PyPy"). This will only download the packages compatible with that Python version, preventing potential conflicts between different versions.
        index-url: '[AI] The `pip download --index-url` command is used with Pip, which is a package manager for Python. This specific command allows users to specify an alternate URL for the package index from which Pip will fetch the packages and their dependencies before installing them. By default, Pip uses the Python Package Index (PyPI) as its index source, but this command enables users to point Pip to a custom or private PyPI server instead. This can be useful in situations where the default index is not reachable, or when working with organizations that maintain their own PyPI servers for their internal packages.'
        no-binary: '[AI] `pip download --no-binary` is a command used with PIP (Python Package Installer) to download source code for installing Python packages instead of precompiled binary files. By using the `--no-binary` option, PIP will only download the source code for the specified package(s), allowing users to manually compile and install the software if needed or use it for offline installation.'
        no-build-isolation: '[AI] The command `pip download --no-build-isolation` is used in Python packaging and installation with Pip, which is a package manager for Python. The option `--no-build-isolation` disables the build isolation feature in Pip. Build isolation ensures that every virtual environment or project has its own unique set of installed packages. With this option disabled, packages from different projects or environments might interfere with each other during installation. This can potentially lead to version conflicts and unexpected behavior. In contrast, enabling build isolation (default setting) helps maintain a clean and isolated environment for your Python projects.'
        no-clean: '[AI] The `pip download --no-clean` command is used in Python programming language to download specific package files from PyPI (Python Package Index) without deleting previously downloaded packages or their associated metadata files. This can be useful when you want to save time by reusing previously downloaded packages instead of redownloading them. The `--no-clean` option prevents Pip from cleaning up the local cache before downloading the new package.'
        no-deps: '[AI] The command `pip download --no-deps` is used in Python programming language for installing a specific package without any of its dependencies. The `--no-deps` option disables the automatic installation of dependencies, which can be useful when you want to manage dependencies manually or have specific versions of packages and their dependencies installed already. It downloads only the package files from the PyPI repository (Python Package Index), but does not install them directly, leaving it up to the user to use `pip install` with appropriate flags for installation.'
        no-index: '[AI] The `pip download --no-index` command is a pip (Python Package Installer) command used to download a specific package from a trusted location, bypassing PyPI indexes. This can be useful when you want to ensure that you''re installing an exact version of the package from a known source or when you have limited network access. The `--no-index` flag instructs pip not to consult the PyPI index for this operation.'
        only-binary: '[AI] `pip download --only-binary` is a command used with pip, which is a popular package manager for Python. This command is used to download and install wheel files instead of source code when available in the PyPI repository. Wheels are precompiled binary packages that can be installed directly without the need for additional compilation steps. Using `--only-binary` ensures that you get the binary wheels if they exist for the specified package, which can save time and resources during installation.'
        platform: '[AI] `pip download --platform` is a command used with pip, which is a package installer for Python. The `--platform` option specifies the operating system and architecture of the desired installation file. This command will download the most compatible package version for the specified platform instead of installing it directly. The downloaded files are saved in the current directory as wheel or compressed archive format files.'
        pre: '[AI] `pip download --pre` is a command used with Pirate (Pip Installs Packages) to install packages from pre-releases instead of stable versions. The `--pre` flag specifies that the desired package should be fetched in its pre-release form, rather than the latest released version. This command downloads the files without actually installing them; if you want to install the pre-released package, use `pip install --pre` instead.'
        prefer-binary: '[AI] `pip download --prefer-binary` is a command used with pip, which is a package manager for Python. The `--prefer-binary` option instructs pip to prioritize installing precompiled binary packages instead of building them from source code during the installation process. This can save time and resources, especially when dealing with large or complex packages, as it avoids the need for compiling the package''s source code locally.'
        progress-bar: '[AI] `pip download --progress-bar` is a command used in the Python packaging tool (pip) to download packages from the PyPI repository with real-time progress indication displayed during the download process. The `--progress-bar` flag enables the progress bar feature, providing users with an overview of the downloading process and its current status. This can be helpful for large downloads or when monitoring multiple downloads concurrently.'
        python-version: |-
            [AI] The `pip download` command is a utility of Pip, which is a package manager for Python. It is used to download Python packages and their dependencies from the PyPI (Python Package Index) repository.

            The option `--python-version` allows specifying a particular version of Python that should be used during the installation process. For instance, if you run `pip download --python-version 3.9 package_name`, Pip will download and build the package using Python 3.9. This command is helpful when dealing with multiple Python versions on your system to ensure the correct version of Python is being used for a specific project.
        require-hashes: '[AI] `pip download --require-hashes` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository with verified authenticity. The `--require-hashes` flag ensures that the installed packages have the same cryptographic hashes as those published on PyPI to prevent man-in-the-middle (MITM) attacks or tampered package distribution. This command downloads the required wheels or sources, checks the hashes, and installs the verified packages.'
        requirement: |-
            [AI] The `pip download` command is a utility in Python's package installer (pip) for downloading specific packages and their dependencies from the PyPI (Python Package Index) repository without installing them. The `--requirement` option is used to specify the requirement file which lists the package names and their versions to be downloaded.

            So, instead of manually listing all packages and versions during installation, you can create a text file with `.txt` or `.in` extension containing pip-style dependency requirements, then use the `pip download --requirement <filename>` command to download only those packages mentioned in the file along with their dependencies. This is useful for caching packages locally, creating offline installers, or managing complex dependencies for large projects.
        src: '[AI] `pip download --source` is a command used with pip, which is a package manager for Python. This specific command is used to download a source distribution of a Python package instead of the more common wheel or executable installer. The source distribution includes the full Python source code and can be useful for customizing or extending the package before installation. The `--src` option specifies that only the source archive should be downloaded, without installing it.'
        use-pep517: '[AI] `pip download --use-pep517` is a command used with Pirate Installer Packaging System (Pip), which is a package manager for Python. This specific command tells Pip to install a package using the PEP 517 standard, which introduces support for source distribution and wheel packages with a single `pyproject.toml` file instead of the traditional `setup.py` and `requirements.txt`. The `--use-pep517` flag instructs pip to look for this file format when downloading the package. This approach simplifies dependency management and build processes in Python projects.'
