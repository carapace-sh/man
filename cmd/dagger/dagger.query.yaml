# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: query [flags] [OPERATION]
aliases:
    - q
description: Send API queries to a dagger engine
group: exec
flags:
    --doc=: Read query from file (defaults to reading from stdin)
    --var*=: List of query variables, in key=value format
    --var-json=: Query variables in JSON format (overrides --var)
persistentflags:
    --focus: Only show output for focused commands
    -m, --mod=: Path to dagger.json config file for the module or a directory containing that file. Either local path (e.g. "/path/to/some/dir") or a github repo (e.g. "github.com/dagger/dagger/path/to/some/subdir")
documentation:
    command: '[AI] `dagger query` is a command used in Dagger, a dependency injection framework for Java. It allows users to introspect and inspect the graph of objects created by Dagger. The command takes an optional argument specifying a particular node or subgraph in the Dagger object graph to query, and it returns information about the nodes, their dependencies, and other metadata. This can be useful for debugging and understanding the dependency relationships within a Dagger application.'
    flag:
        doc: '[AI] `dagger query --doc` is a command used in Dagger, an open-source build and dependency management system for Java and Android projects. This command is used to generate documentation for Dagger components and modules. The `--doc` flag instructs Dagger to include the Javadoc and Kotlin docs for the specified components and modules during the build process. The generated documentation can be found in the `docs/java-reference` or `docs/kotlin-reference` directory based on the language used in the project.'
        var: |-
            [AI] The `dagger query --var` command is a part of Dagger, an open-source dependency management tool for Go. This command is used to retrieve the value of a variable defined in a YAML file that is used by Dagger to configure builds or other tasks.

            The syntax for this command is `dagger query --var=<variable_name>`. When executed, it returns the value associated with the given variable name from the active workspace configuration or the default configuration if no workspace is specified. This can be useful for inspecting values that are used to customize builds or other Dagger tasks without having to modify the YAML files directly.
        var-json: '[AI] The `flag "dagger query --var-json"` is used with Dagger, an open-source dependency injection framework for Java. This flag instructs Dagger to return variable values in JSON format instead of the default protocol buffers. It''s useful when integrating Dagger with other tools or systems that can process JSON data more easily.'
