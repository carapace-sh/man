# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Run a Dart program
flags:
    --enable-asserts: Enable assert statements.
    --enable-vm-service=: Enables the VM service and listens on the specified port for connections
    --no-enable-asserts: Enable assert statements.
    --no-pause-isolates-on-exit: Do not pause isolates on exit when running with --enable-vm-service.
    --no-pause-isolates-on-start: Pause isolates on start when running with --enable-vm-service.
    --no-pause-isolates-on-unhandled-exceptions: Do not pause isolates when an unhandled exception is encountered when running with --enable-vm-service.
    --no-warn-on-pause-with-no-debugger: Do not print a warning when an isolate pauses with no attached debugger when running with --enable-vm-service.
    --observe=: The observe flag is a convenience flag used to run a program with a set of common options useful for debugging.
    --pause-isolates-on-exit: Pause isolates on exit when running with --enable-vm-service.
    --pause-isolates-on-start: Pause isolates on start when running with --enable-vm-service.
    --pause-isolates-on-unhandled-exceptions: Pause isolates when an unhandled exception is encountered when running with --enable-vm-service.
    --verbosity=: Sets the verbosity level of the compilation.
    --warn-on-pause-with-no-debugger: Print a warning when an isolate pauses with no attached debugger when running with --enable-vm-service.
    -D, --define=: Define an environment declaration.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `dart run` is a command used in Dart programming language to execute Dart scripts or build and run Dart applications from the terminal or command prompt. When you run `dart run <script_or_main_file>`, it directly executes the provided Dart script file without the need for compiling it first into machine code. If you''re running a packaged application, `dart run` automatically locates the main entry point and runs it. This command simplifies the build and execution process in Dart projects.'
    flag:
        define: '[AI] `dart run` is a command-line tool used to execute Dart scripts or applications. The `--define` option allows you to define named constants that can be accessed within the Dart code without having to hardcode values. For example, `dart run --define MY_CONST=value my_script.dart`. In your script, you can access `MY_CONST` as if it were a global variable (`import ''dart:io''; runIfMain(() { print(MY_CONST); });`). This is useful for providing configuration values or environment variables to scripts without having to modify their source code.'
        enable-asserts: '[AI] `dart run --enable-asserts` is a command used in Dart programming language to run a script with assertions enabled. Assertions are checks that developers add to their code to ensure that the program is running correctly and logically. If an assertion fails, it raises an error, indicating a problem in the execution of the code. By enabling assertions during runtime with `--enable-asserts`, Dart will execute those checks along with the script, helping to detect potential issues early on during development.'
        enable-vm-service: '[AI] The `dart run --enable-vm-service` command is used to start a Dart application with the Dart VM service enabled. The Dart VM service provides features like automatic restarting of the application when code changes are detected, and it can also be used for remote debugging and profiling. When you use this flag, the Dart application not only starts in the normal way but also sets up a communication channel between the IDE or other tools and the Dart VM to enable these additional features.'
        help: '[AI] `dart run --help` is a command used in Dart programming language to display help information about the `dart:run` script tool. It provides an overview of how to use this tool to execute Dart scripts or applications from the command line, along with details on available options and arguments for customizing the execution process.'
        no-enable-asserts: '[AI] The `dart run --no-enable-assert` command is used to run a Dart script or application without enabling assertions. Assertions are checks built into the Dart language that help developers catch programming errors during development. By passing the `--no-enable-assert` flag, these checks are deliberately disabled, allowing the code to run with potentially undetected errors in production environments. This can be useful for specific use cases where performance is a priority over extensive error checking.'
        no-pause-isolates-on-exit: '[AI] `dart run --no-pause-isolates-on-exit` is a command-line option used with the Dart programming language''s `dart run` tool to execute a Dart script or application. This flag prevents the Dart Virtual Machine (ISOLATE) from pausing when the main isolate exits, allowing the script or application to terminate cleanly without waiting for user interaction or other isolated tasks to complete. In practical terms, this option is useful when running automated tests, continuous integration builds or long-running background processes.'
        no-pause-isolates-on-start: '[AI] The `--no-pause-isolates-on-start` flag is a command-line argument for Dart, the programming language''s executable. When used with `dart run`, this flag instructs the Dart Virtual Machine (VM) not to pause at the beginning of execution and wait for attachment of debugger isolates (lightweight processes). This can be useful for running scripts or applications without interruption from a debugger during startup.'
        no-pause-isolates-on-unhandled-exceptions: '[AI] The `--no-pause-isolates-on-unhandled-exceptions` flag is a command-line argument for Dart''s `dart run` tool. When used, it disables the default behavior of stopping the Dart VM when an unhandled exception occurs within an isolate (a lightweight concurrent computing unit in Dart). With this flag, the Dart process continues to run without pausing, allowing for more robust error handling and production-level deployment. This can be desirable for background tasks or services where it''s preferred not to interrupt the normal flow of execution when an unhandled exception occurs within an isolate.'
        no-warn-on-pause-with-no-debugger: |-
            [AI] The `dart run` command is used to execute a Dart application from the command line. The `--no-warn-on-pause-with-no-debugger` flag modifies how Dart handles pause events during execution.

            With this flag, Dart will suppress warning messages when it encounters a paused event (i.e., when a breakpoint is hit or a `debugger;` statement is encountered) and if there's no debugger attached to the process. This can be useful for running automated tests or scripts where you don't want to be interrupted by debugger prompts.
        observe: '[AI] `dart run --observe` is a command used in Dart programming to start a Dart application with live reloading. When you run this command in your terminal, it will build and start your Dart application. With the `--observe` flag, any changes made to your Dart code files will be automatically detected and reflected in the running application without requiring a full rebuild or restart. This is particularly useful for development workflows where you want to quickly test and iterate on your code.'
        pause-isolates-on-exit: '[AI] The `--pause-isolates-on-exit` flag is a command-line option used with Dart''s `dart run` tool. This option causes the Dart Virtual Machine (Dart VM) to pause the execution of all isolates (lightweight processes in the Dart runtime system) when the main isolate terminates, allowing you to attach a debugger or inspect their states before they are garbage collected. This can be useful for debugging and profiling multi-isolate Dart applications.'
        pause-isolates-on-start: '[AI] The `dart run --pause-isolates-on-start` command is a Dart application launching option that instructs the Dart Virtual Machine (VM) to pause the execution of each isolate (a lightweight concurrent computation unit in Dart) as it starts. This allows developers to debug and inspect the initialization process of each isolate separately using tools like Visual Studio Code''s Dart extension or the Dart Debugger.'
        pause-isolates-on-unhandled-exceptions: '[AI] The `--pause-isolates-on-unhandled-exceptions` flag is a command-line argument for Dart''s `dart run` tool. It instructs the Dart Virtual Machine (isolates) to pause execution when an unhandled exception occurs in any isolate within the application. This can be helpful during development, as it allows the debugger or REPL to catch and handle the exception before the application terminates unexpectedly.'
        verbosity: '[AI] `dart run --verbosity` is a command used in Dart programming language to increase the output of information during the execution of a Dart script or application. The `--verbosity` option increases the level of detail provided in the console output, helping developers diagnose issues and understand the flow of the program. This can include displaying more detailed error messages, logging statements, and other debugging information.'
        warn-on-pause-with-no-debugger: |-
            [AI] The `--warn-on-pause-with-no-debugger` flag is a command-line argument used with Dart, the programming language's executable. This option is designed to warn the user when they attempt to run a Dart application in debug mode without actually having a debugger attached.

            When you run your Dart application using `dart run`, by default, it will not enter a debugger if no debugger is available or explicitly requested. However, some IDEs and development tools might pause the execution of the application during certain events, which could potentially lead to unintended behaviors.

            By using the `--warn-on-pause-with-no-debugger` flag, Dart will print a warning message whenever it detects that an attempt is made to pause execution in this manner without having a debugger attached. This can help prevent unexpected behavior and ensure that you're aware of the consequences when running your application without a debugger.
