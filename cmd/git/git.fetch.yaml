# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fetch
description: Download objects and refs from another repository
group: main
flags:
    --all: fetch from all remotes
    --auto-gc: run 'gc --auto' after fetching
    --deepen=: deepen history of shallow clone
    --depth=: deepen history of shallow clone
    --dry-run: dry run
    --filter=: object filtering
    --negotiation-tip=: report that we have only objects reachable from this object
    --progress: force progress reporting
    --recurse-submodules=: control recursive fetching of submodules
    --refmap=: specify fetch refmap
    --set-upstream: set upstream for git pull/fetch
    --shallow-exclude=: deepen history of shallow clone, excluding rev
    --shallow-since=: deepen history of shallow repository based on time
    --show-forced-updates: check for forced-updates on all updated branches
    --unshallow: convert to a complete repository
    --update-shallow: accept refs that update .git/shallow
    --upload-pack=: path to upload pack on remote end
    --write-commit-graph: write the commit-graph after fetching
    -4, --ipv4: use IPv4 addresses only
    -6, --ipv6: use IPv6 addresses only
    -P, --prune-tags: prune local tags no longer on remote and clobber changed tags
    -a, --append: append to .git/FETCH_HEAD instead of overwriting
    -f, --force: force overwrite of local reference
    -j, --jobs=: number of submodules fetched in parallel
    -k, --keep: keep downloaded pack
    -m, --multiple: fetch from multiple remotes
    -n: do not fetch all tags (--no-tags)
    -o, --server-option=: option to transmit
    -p, --prune: prune remote-tracking branches no longer on remote
    -q, --quiet: be more quiet
    -t, --tags: fetch all tags and associated objects
    -u, --update-head-ok: allow updating of HEAD ref
    -v, --verbose: be more verbose
documentation:
    command: '[AI] `git fetch` is a Git command used to retrieve new commits and their associated data (such as tags or branches) from a remote repository without merging them into your local branch. It updates your local Git repository with the latest changes, allowing you to see what''s new on the remote branches but keeps your current branch unchanged. It is an essential command for collaborative development and keeping your local repository up-to-date.'
    flag:
        all: '[AI] `git fetch --all` is a Git command used to retrieve all the latest commits and branches from all the remote repositories that are configured in your local Git repository. It downloads new changes, but doesn''t merge or apply them locally â€“ it just makes your local repository up-to-date with the remotes. This command fetches data in detached mode by default, meaning it does not create any new local branches if there are new branches on the remote repositories that don''t exist locally.'
        append: '[AI] `git fetch --append` is a Git command used to fetch new commits from a remote repository and update your local repository''s remote-tracking branches with the latest changes. The `--append` option tells Git to append the fetched commits onto the end of the existing local branch history instead of creating a new branch or resetting the current one. This is useful when you want to incorporate the remote changes into your local development without creating a separate branch for it.'
        auto-gc: '[AI] `git fetch --auto-gc` is a Git command used to fetch new changes from a remote repository, and additionally runs `git prune` and `git repack --auto` (alias for `git repack --wec --keep-unreachable --fixed`) commands with the --prune and --autocfg options. This helps in managing local Git repositories by removing unreachable objects, packing loose objects into a single pack file, and optimizing repository storage. In summary, it fetches new changes, cleans up local Git data, and improves overall repository performance.'
        deepen: '[AI] `git fetch --deepen` is a Git command used to update your local repository with deeper commits from a remote repository. The `--deepen` option causes Git to rebuild the missing commit history, ensuring that your local repository and the remote one are in sync at a deeper commit level. In simpler terms, it fetches the deepest version of the committed history from the remote and updates your local repository accordingly.'
        depth: '[AI] `git fetch --depth` is a Git command used to fetch branches and their corresponding commits from a remote repository but with a shallow or limited depth history. The `--depth` option specifies the number of generations of commits to be fetched, starting from the most recent commit on each branch. By default, this value is set to `0`, meaning the full history will be fetched. A common use case for using `git fetch --depth <number>` is when you want to save disk space or reduce network bandwidth usage while still being able to access the latest commits and merge them into your local branches later.'
        dry-run: '[AI] `git fetch --dry-run` is a Git command used to simulate a fetch operation without actually downloading or modifying any data from the remote repository. This can be useful for testing and troubleshooting purposes, allowing you to verify that your local Git configuration correctly specifies the remote repositories, branches, and other settings before performing an actual fetch operation. The output of this command shows what would be fetched, including any new branches or commits, without making any changes to your local repository.'
        filter: '[AI] `git fetch --filter` is a Git command used to retrieve new commits and branches from a remote repository without merging or creating local tracking branches. The `--filter` option allows you to specify what types of objects to fetch, such as only the tip of each branch (shallow fetch) using `--prune` or only the delta between the current and the next tip of the branch using `--tags`. This command updates your local repository with the latest changes but leaves the existing branches untouched.'
        force: '[AI] `git fetch --force` is a Git command used to update your local repository with changes from a remote repository, overwriting any local commits that may conflict with the fetched commits. The `--force` option is used when you want to discard any local commits and replace them with the latest commits from the remote branch. This can be risky if there are uncommitted changes in your local repository, so it should be used with caution. It does not modify the remote repository.'
        ipv4: '[AI] `git fetch --ipv4` is a Git command used to fetch new commits and updates from a remote repository. The `--ipv4` option specifies that Git should use IPv4 addresses when communicating with the remote server, instead of using IPv6 addresses or other methods like hostnames. This can be useful in certain network environments where IPv4 is preferred or required for communication.'
        ipv6: '[AI] `git fetch --ipv6` is a Git command used to retrieve new commits and updates from a remote repository, specifically using IPv6 addresses instead of IPv4. The `--ipv6` option enables Git to use IPv6 addresses for communicating with the remote server over the network. This command does not change any local data but only updates your local Git repository with the latest information available in the remote repository.'
        jobs: '[AI] `git fetch --jobs` is a Git command used to fetch new commits and branches from a remote repository. The `--jobs` option tells Git to perform multiple fetches concurrently, using as many background processes as your system allows, improving the overall speed of the fetching process. This can be useful when fetching from large or multiple repositories.'
        keep: '[AI] `git fetch --keep` is a Git command used to fetch new commits and branches from a remote repository without deleting or merging any local changes. The `--keep` option keeps your local branch tracking reference up-to-date, allowing you to manually merge the fetched commits when ready. This can be useful when collaborating on a project with others or working on multiple branches simultaneously.'
        multiple: '[AI] `git fetch --multiple` is a Git command used to retrieve new commits and branches from remote repositories without creating local merged branches. The `--multiple` option allows fetching multiple branches in one go, making it an efficient way to keep your local repository up-to-date with the latest changes from various branches in the remote repository.'
        "n": '[AI] `git fetch -n` is a Git command used to fetch new commits from a remote repository without merging or modifying the local working directory or index. The `-n` option, also known as the `--dry-run` or `--no-commit` flag, tells Git to simulate the operation and show what would be done without actually doing it. This can help users preview changes before committing them to their local repository.'
        negotiation-tip: '[AI] `git fetch --negotiation-tip` is a Git command used to perform a fetched update from a remote repository with fast-forward or non-fast-forward updates. It initiates a fetch operation and, if possible, performs an automatic merge (fast-forward) of the new branches with the local branches in the background. However, if there''s a conflict between the remote and local branches, it will not attempt to automatically merge but instead leave the merged files as unmerged. This command is often used when you want to update your local repository with the latest changes without merging them immediately. It also helps in resolving conflicts manually and maintaining control over merges.'
        progress: '[AI] `git fetch --progress` is a Git command used to retrieve new commits and updates from a remote repository. The `--progress` option displays the transfer progress bar for each file being fetched, providing real-time feedback on the data transfer process. This can be helpful when fetching large repositories or when working over slow connections.'
        prune: '[AI] `git fetch --prune` is a Git command used to update your local repository with any new changes from a remote repository, while also removing any stale branches or remote-tracking references that no longer exist on the remote. This can help keep your local list of branches clean and up-to-date. In summary, it fetches new data and prunes (removes) unnecessary remote-tracking branches at the same time.'
        prune-tags: '[AI] `git fetch --prune-tags` is a Git command used to fetch new branches and tags from a remote repository, while also removing any stale local tags that no longer exist on the remote. This command helps keep your local tag list up-to-date with the remote repository by eliminating tags that are no longer needed. It''s useful for maintaining a clean and efficient local Git environment.'
        quiet: '[AI] `git fetch --quiet` is a Git command used to retrieve new commits and updates from a remote repository without displaying any output or progress messages in the console. The "--quiet" option suppresses the default informational messages during the fetch process, making it useful for automated scripts or background tasks where you don''t need to see the output. It only updates your local Git repository with the latest changes, it does not merge or apply anything locally.'
        recurse-submodules: '[AI] `git fetch --recurse-submodules` is a Git command used to fetch not only the main repository, but also its subrepository dependencies. In other words, it retrieves all the submodule updates from their respective repositories as defined in the .gitmodules file of the main project and merges them into the local working directory. This command helps ensure that the submodules are kept up-to-date with the latest changes.'
        refmap: '[AI] `git fetch --refmap` is a Git command used to fetch branches and their associated refs from a remote repository into your local repository, creating or updating local refs with the same name as the fetched refs, but with an "@" prefix in the ref names. This allows you to track the remote branches more easily and see the differences between your local and remote branches. The `--refmap` option maps the remote refs to local refs for later use with commands like `git pull`, `git push`, or `git merge`.'
        server-option: '[AI] `git fetch --server-option` is a Git command used to retrieve new commits and other branch information from a remote repository. The `--server-option` flag allows you to pass custom options directly to the underlying transport protocol (like HTTP or SSH) when communicating with the remote server. This can be useful in specific situations, such as when dealing with proxies or authentication servers, where additional configuration is required. The option string follows the `--server-option` flag and is typically passed as a key-value pair, for example: `git fetch --server-option ''ProxyUser: myusername'' <remote>`.'
        set-upstream: '[AI] `git fetch --set-upstream` is a Git command used to fetch new commits and branches from a remote repository, and at the same time, set the upstream branch relation for the local branch with the fetched branch. This means that after running this command, any further push or pull operations will be done using the newly fetched upstream branch as the default remote for the current branch. This can be useful when working on a new local branch that isn''t yet tracked by Git and needs to be associated with a remote branch.'
        shallow-exclude: '[AI] `git fetch --shallow-exclude` is a Git command used to fetch remote branches or commits with shallow clones. A shallow clone only downloads the pack files and the tip of each branch, but does not download the entire history. The `--shallow-exclude` option allows excluding specific branches from being fetched as shallow. This can be useful when you want to keep a full local copy of some branches while fetching others as shallow clones for efficiency or bandwidth reasons.'
        shallow-since: '[AI] `git fetch --shallow-since` is a Git command used to fetch specific commits from a remote repository without downloading the entire history. The `--shallow-since` option specifies that only commits older than the given commit hash or date should be fetched, resulting in a shallow clone with minimal disk space requirements and faster transfer times. It''s particularly useful when working on large repositories or when only interested in newer changes since a certain point.'
        show-forced-updates: '[AI] `git fetch --show-forced-updates` is a Git command used to fetch updates from a remote repository. The `--show-forced-updates` option is used to display a message when an update is force-pushed to the remote branch, which overwrites existing commits. This can be useful for enforcing stricter control over shared repositories where you want to prevent accidental or malicious force pushes.'
        tags: '[AI] `git fetch --tags` is a Git command used to retrieve new tags from a remote repository that are not currently available locally. It does not merge or change any local commits, but only updates the list of available tags in your local Git repository. This can be useful for tracking new releases or maintaining an up-to-date list of tags for collaboration with other developers.'
        unshallow: |-
            [AI] `git fetch --unshallow` is a Git command used when cloning a repository directly from a bare repository instead of a public remote server, such as GitHub or GitLab. This results in a shallow clone where only the history up to the most recent commit on each branch is downloaded, rather than the entire repository history.

            The `--unshallow` flag is used to deepen the cloned repository by downloading the missing commits and objects required to make the local repository a fully-fledged one. This is necessary for certain Git operations like merging or checking out old branches that depend on the complete history of the repository.
        update-head-ok: '[AI] `git fetch --update-head-ok` is a Git command used to fetch new commits and updates from a remote repository without performing a merge or creating a new commit in your local branch. The `--update-head-ok` option allows Git to automatically fast-forward your local branch to match the updated remote branch if there are no conflicts. This command is particularly useful when working with multiple branches or remote repositories and you want to keep your local repository up-to-date without creating a new commit for every fetch.'
        update-shallow: '[AI] `git fetch --update-shallow` is a Git command used to fetch new commits from a remote repository but it creates a shallow clone, meaning that only the history up to the most recent common ancestor of the local and remote branches is downloaded. This reduces the amount of data transferred and disk space required, making it faster for large or distant repositories. However, it also means that you won''t have access to the entire history and will be unable to perform certain operations like creating new branches based on remote branches.'
        upload-pack: '[AI] `git fetch --upload-pack` is a Git command used to fetch branches and download only the necessary pack files from a remote repository, instead of a full clone or fetch with all objects and refs. The pack files contain compressed data of commits, trees, and other Git objects needed for the remote branches. This command is useful when working over slow networks or when you don''t need to have a local copy of the entire repository but only want to update your local branches with the latest changes from the remote.'
        verbose: '[AI] `git fetch --verbose` is a Git command used to fetch new commits and branches from a remote repository. The `--verbose` option increases the output of the command, providing detailed information about each step of the fetching process. This includes the remote name, branch name, and the SHA-1 commit hashes being fetched. It helps in debugging and understanding the Git workflow better by showing more information on the screen.'
        write-commit-graph: '[AI] `git fetch --write-commit-graph` is a Git command used to fetch commits and their commit graphs from a remote repository, then update the local repository''s commit-graph file (refs/original/HEAD) with the new data. This helps maintain consistency between the local and remote repositories, ensuring an accurate representation of the shared history. It is particularly useful when working with large or complex repositories where network bandwidth or storage capacity may be limiting factors.'
