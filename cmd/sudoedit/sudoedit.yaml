# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: sudoedit
description: edit files as another user
flags:
    --help: display help message and exit
    -A, --askpass: use a helper program for password prompting
    -B, --bell: ring bell when prompting
    -C, --close-from=: close all file descriptors >= num
    -D, --chdir=: change the working directory before running command
    -R, --chroot=: change the root directory before running command
    -S, --stdin: read password from standard input
    -V, --version: display version information and exit
    -g, --group=: run command as the specified group name or ID
    -h, --host=: run command on host (if supported by plugin)
    -k, --reset-timestamp: invalidate timestamp file
    -n, --non-interactive: non-interactive mode, no prompts are used
    -p, --prompt=: use the specified password prompt
    -u, --user=: run command (or edit file) as specified user name or ID
documentation:
    command: '[AI] `sudoedit` is a command used in Unix-based systems for opening a file with the default text editor, but with superuser (root) privileges. When you use `sudoedit <filename>`, it opens the file in the text editor with read and write permissions for editing, effectively giving you superuser access to modify the file''s content. Once you save and close the file in the editor, the changes are saved permanently with the root permissions. This command is particularly useful when you need to edit system files that typically have restricted permissions.'
    flag:
        askpass: '[AI] `sudoedit` is a command-line utility in Unix and Linux systems that allows users to edit files with superuser privileges. The option `--askpass` is used when the system does not have sudo set up to accept passwords from the terminal. With this option, `sudoedit` will prompt for a password whenever an editor is launched under superuser privileges, ensuring that only authorized users can make changes to the files. This provides an additional layer of security.'
        bell: '[AI] `sudoedit` is a command-line utility that allows users to edit files with superuser privileges. The option `--bell` enables a bell or beep sound when saving changes in the edited file. This can be useful for notifying users of changes made in real time during collaborative editing sessions or script execution.'
        chdir: '[AI] `sudoedit` is a command-line utility in Unix and Linux systems that opens a text editor with superuser privileges. The `--chdir` option changes the working directory to a specified path before opening the editor. For instance, `sudoedit --chdir=/path/to/directory file.txt` will open `file.txt` in a text editor with root permissions and set the working directory as `/path/to/directory`. This can be useful when you need to edit multiple files in a specific directory with elevated privileges.'
        chroot: |-
            [AI] `sudoedit` is a command-line editor in the Sudo (Short for SuperUser DO) package that allows users to edit files with superuser privileges. The `--chroot` option changes the root directory of the user running the command, confining it to a specific sub-tree of the file system.

            With `sudoedit --chroot <directory> <file>`, you can edit the specified file as a superuser within the given chrooted environment. This feature is often used in security contexts to restrict editing capabilities to a particular directory tree, preventing potential harm caused by malicious scripts or user errors that could affect the system at large.
        close-from: '[AI] `sudoedit` is a versatile command-line tool that allows users to edit files with elevated privileges. The `--close-from` option is an argument that can be used in conjunction with `sudoedit`. It instructs the editor (by default Vi or Vim) to close all files starting from a specified file, leaving the currently open file(s) untouched. This can be useful when working on multiple files that need to be saved and closed in a particular order while maintaining elevated privileges.'
        group: '[AI] The `sudoedit` command with the `--group` option is used to edit files with the default editor specified for a given system or user group, rather than an individual user. This can be useful in managing and enforcing consistent editing practices across multiple users within a group. For example, if you want all members of the "developers" group to use Vim as their default editor when using `sudoedit`, you would set up the group''s `/etc/group` file accordingly and then utilize this option. When a user runs `sudoedit <filename> --group`, the file will be opened in the configured editor for that group, ensuring consistency in the editing environment.'
        help: |-
            [AI] `sudoedit` is a command-line utility that allows users to edit files with root privileges. When you run `sudoedit <filename>`, it opens the file in your default text editor with root permissions. The `--help` option provides information about how to use `sudoedit`. Here's a brief explanation of the output:

            - It starts by displaying the command usage: `sudoedit [OPTIONS] [FILE]...`
            - Following that, it lists the options you can use with `sudoedit`, such as `--help`, `--quiet`, `--verbose`, and others.
            - The `--help` option itself displays a detailed help message explaining:
              - What `sudoedit` does.
              - How to use it to edit files.
              - Available options for customizing its behavior.
            - It concludes by stating that more information can be obtained by visiting the project's website or reading its manual page using `man sudoedit`.
        host: |-
            [AI] `sudoedit` is a command-line tool in Unix-based systems that allows users to edit files with superuser (root) privileges. The option `--host` is not a standard option for `sudoedit`. It seems you might be confusing it with other similar commands or tools, such as `ssh-keygen`, which have a `--host` option.

            In the context of `sudoedit`, there's no official documentation about a `--host` flag. If you meant to ask about editing files on a specific remote host using `sudoedit`, the usual way would be using SSH and setting up passwordless authentication or using keys, then use `sudoedit <remote_user>@<remote_host>:<path/to/file>`.
        non-interactive: |-
            [AI] `sudoedit` is a command used in Unix and Linux systems for editing files with superuser privileges. The `--non-interactive` option is an argument that can be passed to the command to suppress the prompt for a password. With this option, the user does not need to enter a password every time they use `sudoedit`, making it more efficient for automated tasks and scripts where multiple edits are required.

            For example, if you want to edit several files with superuser privileges without being prompted for a password, you can use the following command:
            ```
            sudoedit --non-interactive /path/to/file1 /path/to/file2 ...
            ```
            This command opens the specified files in a text editor (by default, Vim) with superuser permissions and does not ask for a password. If the file is already open in an editor, it will be edited directly without opening a new editor session.
        prompt: '[AI] `sudoedit` is a command-line utility in Unix-based systems that allows users to edit files with superuser (root) privileges. The option `--prompt=PROMPT_STRING` sets a custom prompt string for the `sudo` password prompt. For example, `sudoedit --prompt="Enter password: " filename` will display "Enter password: " instead of the default "Password: ". This can be useful for improving the user experience or adding additional security checks, such as multifactor authentication, to the sudo editing process.'
        reset-timestamp: '[AI] `sudoedit` is a command-line utility in Unix-based systems for editing files with superuser privileges. The `--reset-timestamp` option is used to reset the modification time and access time of the original file after editing with `sudoedit`. This means that the timestamps will not reflect the time the file was edited within `sudoedit`, keeping the original file''s metadata unchanged.'
        stdin: |-
            [AI] `sudoedit` is a command-line utility in Unix-like operating systems that allows users to edit files with superuser privileges. The `--stdin` option is used when you want to edit a file by piping its content to `sudoedit` instead of specifying the file as an argument.

            When using `sudoedit --stdin`, the standard input (usually from a pipe or redirection) is treated as the contents of the file to be edited, and the editor is run with superuser privileges. Any changes made to the file are saved back to standard output along with the corresponding file paths. The user does not need to explicitly save the changes; they are automatically applied upon exiting the editor.

            This option can be useful for scripts or automated tasks that require editing files as a root user without having to manually open and edit them in an editor with sudo privileges.
        user: |-
            [AI] `sudoedit` is a command-line utility in Unix and Linux systems that allows users to edit files with superuser (root) privileges without actually logging in as root. The `--user` option specifies which user's default editor will be used when invoking the text editor.

            When using `sudoedit`, without the `--user` option, the system default text editor is launched. With `--user=<username>`, the specified user's default text editor is opened instead:

            ```bash
            $ sudoedit --user=john file.txt
            ```

            This command will open the file `file.txt` in the text editor associated with user 'john', allowing them to make changes with root privileges.
        version: '[AI] `sudoedit` is a command-line tool that allows users to edit files with elevated privileges. The `--version` option is used to display the version information of the `sudoedit` utility installed on the system. When you run `sudoedit --version`, it will output the version number, compilation time, and other relevant details about the installed `sudoedit`.'
