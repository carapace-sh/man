# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cache
description: Modify the syntax-definition and theme cache
hidden: true
flags:
    --blank: Create completely new syntax and theme sets (instead of appending to the default sets).
    --source=: Use a different directory to load syntaxes and themes from.
    --target=: Use a different directory to store the cached syntax and theme set.
    -b, --build: Initialize or update the syntax/theme cache by loading from the source directory.
    -c, --clear: Remove the cached syntax definitions and themes.
    -h, --help: Prints help information
documentation:
    command: '[AI] The `bat` command with the `cache` sub-command is a feature of Bat, a portable, drop-in replacement for Bash and PowerShell. This command displays the size and hit rate of the Bat file caching mechanism, which stores frequently used files in memory to improve performance by reducing disk I/O. The output includes the total cache size, current cache size, number of cached items, and cache hit rate (percentage of requests that were served from the cache).'
    flag:
        blank: '[AI] The `bat` command is a lightweight and configuration-free replacement for Bash scripts. The `--blank` option used with the `bat cache` command is responsible for adding or updating an entry in the cache, which stores previously displayed terminal output as a cleanly formatted text file. When you use `bat cache --blank`, it adds a blank entry into the cache, creating an empty file with the desired formatting and syntax highlighting when it''s later displayed using `bat` command.'
        build: |-
            [AI] `bat cache --build` is a command used in Bat, a simple and powerful Command Line Interface (CLI) tool for Windows. This command is responsible for building and caching Bat scripts, similar to how package managers like npm or yarn cache dependencies for Node.js projects.

            When you run `bat cache --build`, Bat will first build your Bat script by executing its commands and generating any necessary outputs. After the script has been built successfully, Bat will cache the generated outputs so that they can be reused in subsequent runs of the script without having to re-execute the same command steps every time. This caching process can significantly improve the performance and consistency of your Bat workflows.
        clear: '[AI] The `bat` command is a popular, simple-to-use, and configurable batch file processor for Windows. The `--clear` option used with the `bat cache` command is used to clear the cache of previously processed batches. This can help in cases where you want to ensure that the most recent version of a batched script is run, as the cache stores the results of previously processed batches, which can lead to stale data if not cleared.'
        help: |-
            [AI] `bat` is a lightweight, cross-platform command-line tool for interacting with files in your batch files and text files. The `--help` option is used to display detailed help information about a specific `bat` command or subcommand.

            When you run the command `bat --help`, it shows an overview of all available top-level commands, their brief descriptions, and usage examples. When you run a command like `bat cache --help`, it displays help information specifically for the `cache` subcommand. This can provide more detailed explanations of the available options and their functions within the context of the `cache` subcommand.
        source: '[AI] The `bat cache --source` command in Bat, a PowerShell-based batch language, is used to clear the cache of downloaded packages and reinstall them from their original sources. This command ensures that you are using the latest versions of packages by fetching them directly from their sources instead of using previously cached copies. It helps maintain the consistency and up-to-date status of your Bat environment.'
        target: |-
            [AI] The `bat cache --target` command in BAT (Batch) scripts is used to manage files in the BAT scripting cache. Specifically, it allows you to specify a target file or directory for the cache. When you run this command with no options, it displays the current target. To set a new target, use `--set <file_or_directory>`. For example:

            ```bash
            bat cache --target --set my_script.bat
            ```

            Setting the target file or directory means that BAT will look for included files (using `@include` statements) in this location before searching in other directories. This can be useful when working with complex scripts where files may be organized in a specific way.
