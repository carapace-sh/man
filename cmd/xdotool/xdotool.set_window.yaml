# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set_window
description: Set properties about a window
flags:
    --class=: Set window class
    --classname=: Set window class name
    --icon-name=: Set window WM_ICON_NAME
    --name=: Set window WM_NAME
    --overrideredirect=: Set window's override_redirect value
    --role=: Set window WM_WINDOW_ROLE
    --urgency=: Set window urgency hint
documentation:
    command: |-
        [AI] `xdotool` is a versatile tool for automating interactive tasks in the X Window System. The specific command you mentioned, `xdotool set_window`, is used to modify properties of an open X11 window.

        With `set_window`, you can perform actions such as:
        - Setting the focused or active window (using option `--focus`).
        - Moving a window to a new position by specifying its absolute or relative coordinates (using options `--move_window` and `--float_move`).
        - Resizing windows by changing their width, height, or size proportionally (using options `--resize`, `--float_resize`, and others).
        - Changing the window's state, such as maximizing, minimizing, or tiling it (using options like `--maximize`, `--minimize`, and `--shade`).

        To use this command, provide its arguments in the following order:
        ```bash
        xdotool set_window <window_id> <option> [<arguments>]
        ```
        Replace `<window_id>` with the ID or title of the window you want to modify and `<option>` with the desired action (e.g., "--focus", "--move_window", etc.). Additional arguments, if necessary, depend on the chosen option. For example:
        ```bash
        xdotool set_window --float_move 0 100 200 300 400
        ```
        This command moves a floating window with an ID of '0' to position (100, 200) on the X screen.
    flag:
        class: |-
            [AI] The `xdotool` command is a powerful tool for automating and interacting with X11 applications from the terminal. The specific command you mentioned, `xdotool set_window --class`, is used to send focus and input to a window based on its class name.

            The syntax is `xdotool set_window --class <className> [<windowID>]`. If no window ID is provided, it will find and interact with the first matching window. This command can be useful for automating tasks where you need to bring a specific application or window to the front and input data into it. For example, `xdotool set_window --class "Google-Chrome" --rollout focus` would bring the Google Chrome window to the front, while `xdotool type <text> --class "Text_editor"` would type text into a text editor window.
        classname: |-
            [AI] `xdotool` is a versatile tool for interacting with X11 applications from the command line. The `set_window` subcommand is used to modify properties of an open window, and the `--classname` option specifies the name of the window class whose property will be modified.

            For example, `xdotool set_window --classname "Firefox" --desktop 3` would move the Firefox window to desktop number 3. The command `xdotool set_window --classname "Google-Chrome" --iconify` would iconify (minimize) the Google Chrome window.

            These commands can be useful for automating tasks in a graphical environment, such as moving windows between desktops or minimizing and restoring them based on certain conditions.
        icon-name: |-
            [AI] `xdotool` is a versatile tool for interacting with X11 windows using the command line. The `set_window` subcommand, specifically `xdotool set_window --icon-name`, is used to change the icon name displayed in the window manager for a specific X11 window.

            By providing the window ID as an argument, followed by the desired icon name, this command allows users to customize the appearance of open windows and help identify them more easily within a cluttered workspace.
        name: |-
            [AI] `xdotool` is a versatile and powerful tool for automating various tasks in X11 environments. The `set_window` command is one of its features, used to modify properties of an open window. Specifically, the `--name` option sets or changes the name of the window.

            For example, `xdotool set_window --name "Terminal" <window_id>` would rename the window identified by `<window_id>` as "Terminal". This command is useful for scripting or automating actions on specific windows with clear labels, such as renaming a minimized window to make it easier to find and bring to focus.
        overrideredirect: '[AI] `xdotool` is a versatile tool for interacting with X11 windows programmatically. The command `xdotool set_window --overrideredirect <windowID>` sets the overrideredirect flag of the specified window, making it able to bypass the composite manager and be drawn directly on the X server, bypassing compositing effects like transparency or shadows. This can be useful in certain automation scripts or applications that require low-level interaction with windows.'
        role: |-
            [AI] `xdotool` is a powerful, versatile tool for automating interactive tasks in the X11 desktop environment. The `set_window` command with the `--role` option allows you to set the role of an open window. A role is a label that describes the function or purpose of a window. For example, you might use this command to mark a specific window as your "main" or "focused" window in scripts or automated workflows:

            ```bash
            xdotool set_window --roll main <window_id>
            ```

            Replace `<window_id>` with the unique identifier of the window you want to modify. Note that the window identification method can vary â€“ it could be based on its title, class, or other properties. To find the appropriate window ID, use tools like `xdotool search` or `xwininfo`.

            By setting a role, you may tailor your automation scripts to interact with specific windows based on their roles rather than their exact titles or classes, ensuring more robust and maintainable scripts.
        urgency: '[AI] `xdotool` is a system tool for interacting with X11 graphical applications in a programmatic way. The command `xdotool set_window --urgency <windowID>` sets the urgency hint of a window to "Urgent". This makes the window manager prioritize the window and bring it to the front of all other windows when it is switched to or restored from being minimized or hidden. Windows with the urgency hint are often displayed in a blinking or flashing state to draw attention to them.'
