# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pgrep
description: look up processes based on name and other attributes
flags:
    --ns=: match the processes that belong to the same namespace as <pid>
    --nslist=: list which namespaces will be considered for the --ns option.
    -F, --pidfile=: read PIDs from file
    -G, --group=: match real group IDs
    -L, --logpidfile: fail if PID file is not locked
    -O, --older=: select where older than seconds
    -P, --parent=: match only child processes of the given parent
    -U, --uid=: match by real IDs
    -V, --version: output version information and exit
    -a, --list-full: list PID and full command line
    -c, --count: count of matching processes
    -d, --delimiter=: specify output delimiter
    -f, --full: use full process name to match
    -g, --pgroup=: match listed process group IDs
    -h, --help: display this help and exit
    -i, --ignore-case: match case insensitively
    -l, --list-name: list PID and process name
    -n, --newest: select most recently started
    -o, --oldest: select least recently started
    -r, --runstates=: match runstates
    -s, --session=: match session IDs
    -t, --terminal=: match by controlling terminal
    -u, --euid=: match by effective IDs
    -v, --inverse: negates the matching
    -w, --lightweight: list all TID
    -x, --exact: match exactly with the command name
documentation:
    command: '[AI] `pgrep` is a command-line utility in Unix and Unix-like operating systems used to search for processes based on their names or other properties, such as their parent process ID or the pattern in their command line arguments. It returns the process IDs of matching processes, which can then be used with other commands to interact with those processes, like `kill` or `ps`. The basic syntax is `pgrep [OPTION]... [PATTERN]`, where `[OPTION]...` are various modifiers for the search and `[PATTERN]` is the name or property of the process to search for.'
    flag:
        count: '[AI] `pgrep` is a command-line utility in Unix and Linux systems used for searching processes based on their names or properties. The option `--count` is used to display the number of processes matching the given search criteria instead of just listing the process IDs (PIDs). For instance, `pgrep --count <pattern>` returns the count of processes with the specified name or property in the output. This can be useful for quickly checking how many instances of a specific process are currently running.'
        delimiter: '[AI] The `pgrep` command with the `--delimiter` option is used in Unix-based systems for searching processes based on their names, but with the added functionality of specifying a custom delimiter character for the output. By default, `pgrep` separates process IDs (PIDs) from their respective names by whitespace characters. However, with `--delimiter=DELIM`, you can replace `DELIM` with any other single character to separate the PID and name instead. For example, using `--delimiter=:` would output something like `pid:name`. This can be useful for parsing output in scripts or piping it to other commands.'
        euid: '[AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for running processes based on their names or other attributes. The option `--euid <UID>` filters the results based on the Effective User ID of the process. This means that only processes with the specified UID value will be displayed when using this option. For example, `pgrep --euid 1000` would show processes owned by the user with UID 1000.'
        exact: '[AI] `pgrep` is a command-line utility in Unix-like operating systems for searching processes based on their names. The option `--exact` (or `-x`) instructs `pgrep` to match the process name exactly, without considering partial matches or variants. This means that only the exact string provided as an argument will be searched, making the search more specific and potentially faster. For instance, using `pgrep --exact myprocessname` would return only the process with that exact name and exclude processes with similar but not identical names.'
        full: '[AI] `pgrep` is a command-line utility in Unix-like operating systems for searching processes based on their names. The option `--full` (or just `-f`) is used with `pgrep` to search processes whose names match the given pattern, not only exact matches. It searches the entire name of the process, including the prefixes and suffixes, making it more flexible than using an exact match. For example, `pgrep -f ''sshd''` will return any processes with names containing the string "sshd", such as "sshd-keygen" or "sshd\_config".'
        group: '[AI] The `pgrep` command with the `--group` option in Linux is used to search for processes based on their controlling terminal''s TTY or session group ID. It displays a list of processes belonging to a specific group ID, helping system administrators manage and identify related processes. This can be useful when dealing with complex systems and sessions.'
        help: |-
            [AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for running processes based on their names. The `--help` option displays detailed information about how to use `pgrep`. Here's a brief explanation:

            1. **Search**: `pgrep [option] ... [pattern]`: Searches for processes whose names match the given pattern.
            2. **Options**:
               - `-l, --list`: Lists only the process IDs (PIDs) that match the search criteria.
               - `-f, --fixed-strings`: Matches the pattern against the whole command line of each process, not just its name.
               - `-i, --ignore-case`: Ignores case when matching the pattern.
            3. **Examples**:
               - To find a process named 'firefox': `pgrep firefox`.
               - To list all processes with the word 'ssh' in their command line: `pgrep -f ssh`.
            4. **Help message**: Running `pgrep --help` displays detailed information about available options and examples for using `pgrep`.
        ignore-case: '[AI] `pgrep` is a command-line utility in Unix and Unix-like operating systems used to search for running processes by their names. The option `--ignore-case` (short form: `-i`) is used to perform case-insensitive pattern matching when searching for process names. This means that the search will match process names with any combination of upper or lower case letters as long as the overall pattern matches. For example, `pgrep --ignore-case ''apache''` would return both processes named "Apache" and "apache2".'
        inverse: '[AI] `pgrep` is a command-line utility in Unix and Linux systems used to search for processes based on their names or other attributes. The option `--invert-match` or simply `-v` reverses the matching behavior, meaning it returns the processes that do not match the given pattern instead of those that do. For example, `pgrep --inverse <pattern>` would return processes whose names do not contain the specified string.'
        lightweight: '[AI] `pgrep` is a command-line utility in Unix-based systems used to search for running processes by their names. The `--lightweight` option is an argument given to `pgrep` to perform a quick and less resource-intensive search, compared to the default method which may involve loading additional information about each matched process. By using `--lightweight`, only the Process ID (PID) of matching processes is displayed.'
        list-full: |-
            [AI] `pgrep` is a command-line utility in Unix and Unix-like operating systems used to search for running processes by their names. The option `--list-full` or `-f` increases the output's verbosity, displaying more detailed information about each matching process.

            When using `pgrep --list-full <process_name>`, it displays not only the process ID (PID) but also the parent PID, command line arguments, and the entire command line used to start the process. This extensive output can be helpful in debugging or understanding the relationships between various processes in a system.
        list-name: '[AI] `pgrep` is a command-line utility in Unix-like operating systems for searching processes based on their names or other properties. The option `--list-name` or `-l` is used with it to display only the process name matching the given pattern, instead of the default output which includes the process ID (PID) as well. So, if you run a command like `pgrep --list-name <pattern>`, it will print out just the names of processes that match the specified pattern.'
        logpidfile: '[AI] `pgrep` is a command-line utility in Unix-based systems used to search for processes based on their names or other attributes. The option `--logpidfile` causes `pgrep` to write the process ID (PID) of matching processes to a specified file, instead of printing them directly to the terminal. This can be useful for logging and automation purposes.'
        newest: '[AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for processes based on their names or other attributes. The option `--newest` is not a standard option for `pgrep`, but some implementations may provide an extended version called `pgrep3` that includes this option. This option allows you to find the most recently started process with the given name. For example, `pgrep --newest <process-name>` will return the process ID (PID) of the most recent instance of the named process.'
        ns: '[AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for running processes based on their names. The option `--ns` (or `--namespaced`) is used with `pgrep` to search processes within a specific namespace. This flag can be useful when working with containers or other multi-namespace environments, allowing you to filter processes based on their container names instead of the global system processes.'
        nslist: '[AI] `pgrep` is a command-line utility in Unix and Linux systems used to search for processes based on their names or other attributes. The `--nslist` option is an argument that can be used with `pgrep` to display the namespace IDs (NSIDs) of the matching processes'' namespaces. This option provides information about which namespaces contain the specified processes, which can be useful in containerized environments or for debugging process isolation issues. The output of `pgrep --nslist [process-name]` will be a list of NSIDs separated by spaces.'
        older: '[AI] The `pgrep` command with the option `--older` is used in Unix-based systems to search for processes based on their name or other attributes, but with a focus on displaying the older ones first. When you use `pgrep` without any specific sorting option, it typically shows the most recent matches first. However, by adding the `--older` flag, the output is sorted in the reverse order of when each process was started, i.e., oldest processes appear at the beginning. This can be useful when trying to identify and manage long-running or older processes that might be consuming excessive resources.'
        oldest: '[AI] The `pgrep` command with the option `--oldest` is used to find the process with the oldest start time among those matching a given pattern. It searches for processes based on their names or other identifying information and returns the Process ID (PID) of the oldest matching process. This can be useful in various system administration tasks, such as identifying long-running processes that might be consuming excessive resources.'
        parent: '[AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for running processes based on their names or other characteristics. The `--parent` option is an argument that refines the search criteria, allowing you to find child processes of a specific parent process ID. In summary, using `pgrep --parent [PID]` will return the list of child processes having the specified parent process ID.'
        pgroup: '[AI] The `pgrep` command with the option `--pgroup` in Unix-based systems is used to search for processes by their process group ID (PGID). It allows users to find and manage groups of related processes based on their PGIDs, which can be helpful for debugging or managing complex processes. By default, `pgrep` searches for processes based on their names or patterns in the command line argument list. With `--pgroup`, you can specify a PGID to locate all processes belonging to that group, making it an essential tool for system administrators and power users.'
        pidfile: '[AI] `pgrep` is a command-line utility in Unix-like operating systems used to search for processes based on their names or other properties. The option `--pidfile` causes pgrep to look for a process whose process identifier (PID) is recorded in the given file. In other words, it searches for a process with a PID matching the one stored in the specified file.'
        runstates: |-
            [AI] `pgrep` is a command-line utility in Unix and Linux systems used to search for processes based on their names or other attributes. The option `--runstates` allows users to specify the desired state of the running process, such as "running", "sleeping", "stopped", or a combination of these.

            For example, `pgrep --runstates running sleeping` will display the PIDs (Process IDs) of processes that match the specified search term and have either the "running" or "sleeping" state. This option can be useful for quickly identifying specific processes based on their current state.
        session: '[AI] The `pgrep` command with the option `--session` is used in Unix-based systems to search for processes based on their session ID (SID) instead of their name or other common properties. With this option, you can find and manage processes that belong to a specific session, which is useful when working with terminal multiplexers like screen or tmux. The format for using this option is `pgrep --session <sid>`, where `<sid>` is the ID number of the session you''re interested in.'
        terminal: '[AI] `pgrep` is a command-line utility in Unix and Linux systems for searching processes based on their names or other attributes. The option `--terminal` or `-l` is used with `pgrep` to display only the process IDs (PIDs) as output, without printing any additional information such as the commmand name or the size of the process. In summary, using `pgrep --terminal <pattern>` will print only the list of PIDs matching the given pattern.'
        uid: '[AI] `pgrep` is a command-line utility in Unix and Linux systems used to search for running processes based on various criteria such as process names or IDs (PIDs). The option `--uid <UID>` filters the output to display only the processes owned by the specified user ID. For example, `pgrep --uid 1000` will show processes belonging to the user with UID 1000. This can be helpful in managing and identifying processes that belong to specific users.'
        version: '[AI] `pgrep --version` is a command used in Unix-like operating systems to display version information about the ''pgrep'' utility, which stands for "Process Grep." It allows users to search for processes based on their names or other attributes using regular expressions. When run with the `--version` option, it outputs the current version of pgrep installed on the system.'
