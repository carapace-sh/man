# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: remove
aliases:
    - rm
    - uninstall
    - un
description: Removes packages from `node_modules` and from the project's `package.json`
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --global-dir: Specify a custom directory to store global packages
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -D, --save-dev: Remove the dependency only from "devDependencies"
    -O, --save-optional: Remove the dependency only from "optionalDependencies"
    -P, --save-prod: Remove the dependency only from "dependencies"
    -h, --help: Output usage information
    -r, --recursive: Remove from every package found in subdirectories or from every workspace package
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm remove` is a command used with PNPM (Parallel NPM), a package manager that aims to provide faster and more reliable package installations by parallelizing the installation process. This command is used to uninstall or remove specified packages and their dependencies from the project''s node_modules folder. To use it, you simply pass the package name(s) as argument(s). For example: `pnpm remove react react-dom`.'
    flag:
        aggregate-output: '[AI] `pnpm remove --aggregate-output` is a command used with npm package manager, specifically with pnpm, which is a faster and more efficient alternative to npm. This command is used to uninstall packages from a project while preserving the aggregate output file. The aggregate output file contains information about the installed packages, their versions, and other metadata across the entire workspace. By using `--aggregate-output`, you can remove specific packages without losing this collective information, ensuring consistent and accurate package management across your project.'
        changed-files-ignore-pattern: '[AI] `pnpm remove --changed-files-ignore-pattern` is a command used with pnpm, a package manager for Node.js projects. This command removes specified dependencies from the project''s `package-lock.json` or `pnpm-lock.yaml` file without affecting files that match the provided ignore pattern. The `--changed-files-ignore-pattern` flag is used to specify a regular expression that ignores changes in certain files during the dependency removal process. This can be useful when you want to remove dependencies from the lock file but don''t want it to modify specific files, like configuration files or source code files.'
        color: '[AI] `pnpm remove` is a command provided by the PnPM package manager for managing dependencies in JavaScript projects. The `--color` option, if included, enables colored output during the execution of this command. This means that when you run `pnpm remove --color <package-name>`, it will display error messages and other information with colors to make them easier to distinguish in the terminal. If you prefer a monochrome output or your terminal doesn''t support colors, you can omit the `--color` flag.'
        dir: '[AI] `pnpm remove --dir` is a command used with pnpm (Parallel NPM), a package manager for JavaScript projects. This command is used to delete specific local and global installed packages from the project or the global registry. The `--dir` option specifies the directory where the packages are located, which can be either `node_modules` for local packages in a project or `~/.pnpm/global` for global packages. When you run this command followed by the package name, it will remove that particular package from the specified directory.'
        filter: '[AI] `pnpm remove` is a command used in the Package Manager for Node.js projects, named pnpm. This command is used to uninstall specific packages from your project''s node\_modules directory. The `--filter` option allows you to specify one or more package names to be removed. For example, `pnpm remove --filter my-package` would uninstall the "my-package" dependency from your project.'
        filter-prod: '[AI] `pnpm remove` is a command provided by the Package Manager for Node.js (pnpm) to uninstall specified packages from a project''s node_modules folder. The `--filter-prod` option filters out packages marked as devDependencies and only removes production dependencies. This command can be useful when preparing a production environment or reducing the size of a project package.'
        global-dir: |-
            [AI] `pnpm` is a package manager for Node.js projects, an alternative to npm or yarn. The command `pnpm remove --global-dir` is used to uninstall global packages installed with pnpm.

            The `--global-dir` option specifies the global packages directory path, which by default is `~/.pnpm/global/`. This command removes the specified package globally from this directory. If no package name is provided, it will remove all global packages.
        help: '[AI] `pnpm remove` is a command provided by PnPM, a package manager for Node.js projects. The `--help` flag is used to display detailed information about how to use this command effectively. In brief, `pnpm remove <package-name>` removes a specific package from the project''s `node_modules` directory and the corresponding lockfiles (`package-lock.json` or `pnpm-lock.yaml`). By adding `--help`, users will be provided with instructions on correct usage, available options, and examples to ensure they can remove packages securely within their projects.'
        loglevel: |-
            [AI] `pnpm remove` is a command provided by the package manager PnPM, used to uninstall specific packages from your project. The `--loglevel` option is an argument that allows you to control the verbosity of the output logged during the removal process.

            By default, `pnpm remove` prints basic information about the packages being removed and any dependencies they may leave behind. Setting the log level to a higher value, such as `warn`, `info`, or `debug`, will display more detailed information at each corresponding level. For example, setting it to `debug` would provide extremely detailed logs about every step taken during the removal process.

            Setting a lower log level, like `error` or `silent`, can be used to suppress certain messages and make the output cleaner. In summary, `pnpm remove --loglevel` helps control the amount and type of information displayed during the package removal process.
        no-color: '[AI] `pnpm remove --no-color` is a command used with the PnPM package manager for JavaScript projects. It''s used to remove a specific package from your project''s node_modules folder and lockfile (package-lock.json or pnm-lock.yaml). The `--no-color` flag is an optional argument that disables colored output in the console. This can be useful when working with scripts or continuous integration systems, as it removes potential color conflicts and makes the output easier to parse.'
        recursive: |-
            [AI] `pnpm remove --recursive` is a command used with pnpm (Parallel NPM), a package manager for Node.js projects, to uninstall specific packages and their dependencies recursively across the entire project tree.

            When you run this command followed by a list of package names, pnpm will first delete the listed packages from the current project's `node_modules` directory. Next, it will traverse through the subdirectories in the project tree, identifying and removing the same packages and their dependencies in their respective `node_modules` directories as well.

            This command can be helpful when you want to clean up unused or unwanted packages across multiple levels of your Node.js project structure.
        save-dev: '[AI] `pnpm remove --save-dev` is a command used with the Package Manager for Node.js projects called pnpm. This command is used to uninstall packages listed in the devDependencies section of the package.json file, which are dependencies required only during development and not for running the application itself. By using `--save-dev`, pnpm will update the package.json file to remove the uninstalled packages from the devDependencies section.'
        save-optional: '[AI] `pnpm remove --save-optional` is a command used with npm or pnpm package managers to uninstall an optional dependency from a JavaScript project. Optional dependencies are packages that are not essential for the core functionality of the project but may be useful in certain scenarios. The `--save-optional` flag indicates that the dependency will only be removed from the project''s `package.json` file under the optional `"optionalDependencies"` field, leaving it available if required but no longer included by default when the project is installed or built.'
        save-prod: '[AI] `pnpm remove --save-prod` is a command used with npm package manager, specifically with pnpm (Parallel NPM), for managing dependencies in a Node.js project. This command removes packages listed in the `package.json` file under the `dependencies` field for production builds, excluding them from being installed when running `pnpm install --production`. This helps keep the production bundle lean and focused on only required dependencies.'
        stream: '[AI] `pnpm remove --stream` is a command provided by PnPM, a package manager for Node.js projects. This command is used to remove a specific package and its locked versions from the local and global cache, as well as from all `node_modules` directories in the project. The `--stream` option makes the removal process streamlined by allowing it to run in the background without waiting for the output or confirmation prompts. This can be particularly useful when performing bulk operations or automating workflows.'
        test-pattern: '[AI] `pnpm remove --test-pattern` is a command used with npm package manager, specifically its faster alternative pnpm. This command is used to uninstall packages that match a given test pattern from the project''s node_modules directory and lockfiles (package-lock.json or pnmlock.yaml). The `--test-pattern` option specifies a glob pattern to filter the packages to be removed, allowing for selective package removal based on their test dependencies.'
        use-stderr: '[AI] `pnpm remove --use-stderr` is a command used with pnpm, a package manager for Node.js projects. This command is used to uninstall (remove) specific packages from a project''s `node_modules` directory. The `--use-stderr` option is used to display error messages in the standard error stream instead of the console output being mixed with regular output. This can be useful when dealing with large or complex projects where you want to separate errors from normal output for better visibility and troubleshooting.'
        workspace-root: '[AI] `pnpm remove` is a command provided by PnPM, a package manager for JavaScript projects. The `--workspace-root` option specifies the root directory of a PnPM workSpace, which contains multiple packages. With this command, you can delete a specific package from the entire workspace instead of just the current project. This can be useful when you want to remove a shared dependency across multiple projects.'
