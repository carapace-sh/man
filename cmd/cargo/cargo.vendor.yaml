# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: vendor
description: Vendor all dependencies for a project locally
flags:
    --manifest-path=: Path to Cargo.toml
    --no-delete: Don't delete older crates in the vendor directory
    --respect-source-config: Respect `[source]` config in `.cargo/config`
    --versioned-dirs: Always include version in subdir name
    -h, --help: Print help
    -q, --quiet: Do not print cargo log messages
    -s, --sync*=: Additional `Cargo.toml` to sync and vendor
documentation:
    command: '[AI] `cargo vendor` is a Rust package manager command used to download and manage dependencies with fixed versions. It fetches the specified dependency crates from the registry and saves them as local, editable crates in a `vendor` directory within your project''s `.cargo` directory. This allows you to have exact control over the dependencies'' versions while keeping the global registry synchronized. The command is typically used when dealing with projects that depend on outdated or unpublished packages.'
    flag:
        help: '[AI] `cargo vendor --help` is a command used in Rust programming language''s package manager, Cargo. It requests help information about the `vendor` subcommand of Cargo. The `vendor` subcommand downloads and installs dependencies declared in a project''s `Cargo.toml` file directly into the project''s target directory instead of managing them as separate packages. Using `cargo vendor --help` provides information on how to use this command, including available options and flags.'
        manifest-path: '[AI] `cargo vendor --manifest-path` is a command used in Rust programming language''s build tool, Cargo. It is used to download and install external crates as editable sources into the project''s workspace based on the specified manifest path. The argument `--manifest-path` indicates the location of the Cargo.toml file that lists the required dependencies. This command helps manage and keep the project up-to-date with its dependencies by fetching their source code directly, rather than just their crates.ml index entries.'
        no-delete: '[AI] `cargo vendor --no-delete` is a command used in Rust programming language''s package manager, Cargo. This command downloads and installs the necessary external dependencies listed in the project''s Cargo.toml file without deleting previously downloaded packages that are still needed. The `--no-delete` flag ensures that only missing dependencies are deleted and re-downloaded, maintaining the consistency of the installed packages.'
        quiet: '[AI] `cargo vendor --quiet` is a command used in Rust programming language''s Cargo build tool. The `--quiet` flag reduces the amount of output that is displayed during the execution of the `vendor` subcommand. The goal is to suppress progress messages, allowing for a quieter build process.'
        respect-source-config: '[AI] `cargo vendor --respect-source-config` is a command used in Rust programming language''s Cargo build tool. This command interacts with the Cargo dependency management system to install and manage external crates (libraries) as local copies instead of adding them as Git submodules or other remote sources. The `--respect-source-config` flag tells Cargo to use the configuration of the dependencies specified in the project''s Cargo.toml file when deciding which version of each dependency to install, ensuring consistency between projects and reproducibility of builds.'
        sync: '[AI] `cargo vendor --sync` is a command used in Rust programming language''s package manager, Cargo. This command syncs the local dependency tree of a Cargo project, ensuring that the latest versions of all the project''s dependencies are downloaded and installed as vendor crates. It also creates a Git repository named `vendor` within the project directory to store these vendor crates. This command is useful when you want to ensure your project uses the exact dependency versions that were used during development or when building a production artifact.'
        versioned-dirs: '[AI] `cargo vendor --versioned-dirs` is a command used with Cargo, Rust''s package manager. This command is used to install specific versions of dependencies into separate directories under the `vendor/versions` directory in your project. The `--versioned-dirs` flag instructs Cargo to create a new directory for each versioned dependency, ensuring that multiple versions of the same dependency can coexist in your project without conflicts. This is useful when working on a Rust project with multiple subprojects or when testing different versions of dependencies.'
