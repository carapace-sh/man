# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create -f FILENAME
description: Create a resource from a file or from stdin
group: basic beginner
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --edit: Edit the API resource before creating
    --field-manager=: Name of the manager used to track field ownership.
    --raw=: Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    --windows-line-endings: Only relevant if --edit=true. Defaults to the line ending native to your platform.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files to use to create the resource
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create` is a command-line utility used with Kubernetes to create various types of resources such as deployments, services, pods, and config maps in a cluster. It takes the desired resource definition YAML file or JSON data as an argument and creates the specified resource in the active namespace. For instance, `kubectl create -f my-deployment.yaml` will create a deployment using the contents of the "my-deployment.yaml" file.'
    flag:
        allow-missing-template-keys: '[AI] The `kubectl create --allow-missing-templates-keys` command is used when creating Kubernetes resources using a YAML file, allowing for missing keys in the template. By default, Kubernetes requires that all keys specified in the template be present in the actual resource data being created. However, with this flag, you can create resources even if some of the keys are missing in the data. This can be useful when creating resources from incomplete or partial templates, but keep in mind that it may result in unexpected behavior or errors.'
        dry-run: '[AI] `kubectl create --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows users to check what resources would be created without actually executing the creation. The `--dry-run` flag instructs `kubectl` to output the manifest YAML file that would have been applied if the command were run without `--dry-run`, helping users understand and validate changes before making them persistent in the cluster.'
        edit: '[AI] `kubectl create --edit` is a command used with Kubernetes to create a new resource, such as a deployment or service, and then immediately enter the YAML file for that resource in an editor for manual editing before applying the changes in the cluster. It combines the steps of creating and editing into one command, providing a more interactive experience when configuring complex resources.'
        field-manager: '[AI] `kubectl create --field-manager` is a command used with the Kubernetes command-line interface (CLI) tool `kubectl`. This option is utilized when creating Kubernetes resources, such as deployments or services, to declare and apply custom fields that are not part of the standard YAML manifest schema. The flag `--field-manager` allows users to define their custom fields using JSON-patched YAML format, enabling fine-grained control over specific resource attributes while creating them programmatically. This can be useful when dealing with complex or dynamic configurations.'
        filename: '[AI] `kubectl create --filename` is a command used in Kubernetes to create resources from a file. The `--filename` flag specifies the path to the YAML or JSON file that defines the desired Kubernetes resource, such as a Deployment, Service, or ConfigMap. When run, `kubectl` reads the file and creates the resource in the cluster according to its definitions.'
        kustomize: '[AI] `kubectl create --kustomize` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows users to create Kubernetes resources using customization files written in the Kustomize format. Kustomize is a method for managing and deploying applications to Kubernetes through declarative config files. With this command, you can apply multiple patches or modifications to a base configuration file, resulting in a final manifest that creates or updates resources based on those changes. It''s an efficient way to manage complex Kubernetes environments with numerous interrelated configurations.'
        output: '[AI] `kubectl create --output` is a command used in Kubernetes to create a new resource, such as a deployment or a service, and output the result in a specific format. The `--output` flag specifies the desired output format, which can be `json`, `yaml`, or `template`. For example, `kubectl create deployment my-app --image=my-image:latest --output yaml > my-deployment.yaml` will create a new deployment and save the YAML definition to a file called `my-deployment.yaml`.'
        raw: '[AI] `kubectl create --raw` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a new resource in a Kubernetes cluster based on the raw Kubernetes YAML manifest provided as input. The flag `--raw` indicates that the next argument will be the content of the YAML file rather than the name of the file. In other words, it bypasses the need to create or edit a file locally before applying it to the cluster. Instead, you can directly pass the YAML manifest in-line to the command for immediate creation.'
        record: '[AI] `kubectl create --record` is a command used with the Kubernetes command-line interface (CLI) tool to create a new resource in a Kubernetes cluster. The `--record` flag is optional, but when included, it tells `kubectl` to update the records of the changes made in the manifest file and apply them to the cluster, creating or updating the resource accordingly. This command can be used for declarative management of Kubernetes resources and helps maintain the desired state in the cluster.'
        recursive: '[AI] `kubectl create --recursive` is a command used in Kubernetes to create multiple interconnected Kubernetes resources at once. This means that instead of creating individual resources one by one using separate `create` commands, you can define the parent-child relationships between resources in a YAML file and use `--recursive` flag to apply them all together. The command applies the provided YAML manifest, creating each resource in order based on their dependencies, ensuring that all necessary resources are created as a complete unit.'
        save-config: '[AI] `kubectl create --save-config` is a command used in Kubernetes to create a new resource, such as a deployment or a service, and save the resulting configuration in a file on your local machine. This can be useful for creating a new resource based on an existing one, or for sharing the configuration with others. The flag `--save-config` tells `kubectl` to write the output of the command, which would normally just display information, into a YAML file instead.'
        selector: '[AI] `kubectl create` is a command used in Kubernetes to create new resources, such as pods, services, or deployments. The `--selector` option sets labels for the created resource, allowing you to select and manage it based on those labels using queries like `kubectl get --selector`. It helps in filtering and managing objects with specific labels in your Kubernetes cluster.'
        show-managed-fields: '[AI] `kubectl create --show-managed-fields` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a new resource in a Kubernetes cluster and displays the managed fields after creation. Managed fields are the fields in the object that were managed by the Kubernetes API server during creation or update of the resource. These fields indicate the differences between the desired state and the current state, making it easier to understand the changes made by `kubectl` or other tools.'
        template: |-
            [AI] `kubectl create --template` is a command in Kubernetes using the `kubectl` CLI tool. It generates and applies YAML manifests based on a given template file or string. This allows creating multiple resources with common properties in one go, reducing manual YAML file creation. The syntax is:

            ```bash
            kubectl create --from-file=<template-file> -o yaml > <manifest.yaml>
            kubectl apply -f @<manifest.yaml>
            ```

            Or using a string template:

            ```bash
            kubectl create --template="<template-string>" -o yaml > <manifest.yaml>
            kubectl apply -f <manifest.yaml>
            ```

            Replace `<template-file>` with the path to a file containing the template, and `<template-string>` with the string template itself. The generated `manifest.yaml` can be reviewed before applying it using `kubectl apply -f <manifest.yaml>`.
        validate: '[AI] `kubectl create --validate` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a new resource in the Kubernetes cluster based on the provided manifest file or from stdin input, but it doesn''t apply or make the changes persist in the cluster yet. The `--validate` flag is used to check whether the provided YAML file is valid against the schema without actually creating it. This way, you can catch any errors and inconsistencies before applying the configuration changes. It helps maintain the desired state of your Kubernetes deployment.'
        windows-line-endings: '[AI] `kubectl create --windows-line-endings` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This specific command sets the line ending style for files created or updated by `kubectl`, between Windows (CRLF) and Unix (LF). Setting `--windows-line-endings` to true will create or update YAML files with CRLF line endings suitable for use in Windows environments. If omitted, the default is Unix LF line endings.'
