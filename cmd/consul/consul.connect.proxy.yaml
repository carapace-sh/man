# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: proxy
description: Runs a Consul Connect proxy
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --listen=: Address to listen for inbound connections to the proxied service.
    --log-json: Output logs in JSON format.
    --log-level=: Specifies the log level.
    --pprof-addr=: Enable debugging via pprof.
    --proxy-id=: The proxy's ID on the local agent.
    --register: Self-register with the local Consul agent.
    --register-id=: ID suffix for the service.
    --service-addr=: Address of the local service to proxy.
    --service=: Name of the service this proxy is representing.
    --sidecar-for=: The ID of a service instance on the local agent that this proxy should become a sidecar for.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
    --upstream=: Upstream service to support connecting to.
documentation:
    command: '[AI] `Consul Connect Proxy` is a component of the Consul service discovery and configuration management platform. It acts as a network proxy that automatically configures itself based on the service registrations in a Consul cluster. The proxy allows communication between services within the cluster using their registered names, simplifying inter-service communication and reducing the need for manually managing infrastructure configurations.'
    flag:
        ca-file: '[AI] The `--ca-file` flag in the Consul Connect proxy command is used to specify the file path to a CA (Certificate Authority) certificate. This certificate is used to sign and authenticate SSL/TLS certificates issued by Consul Connect for service registration and communication between services in a mesh network. By providing this flag, users can configure Consul Connect to use their own trusted CA certificates instead of the default one provided by Consul. This enhances security by using known and trusted CA certificates for certificate validation in a production environment.'
        ca-path: '[AI] The `--ca-path` flag in the Consul Connect Proxy command is used to specify the location of a directory containing trusted CA (Certificate Authority) certificates for client TLS (Transport Layer Security) termination. When using the Consul Connect proxy to secure traffic between services, this flag helps verify the authenticity of clients connecting to the proxy by validating their certificates against the provided CA certificates. This adds an extra layer of security and ensures that only trusted clients are able to communicate with the services proxied through Consul Connect.'
        client-cert: '[AI] The `consul connect proxy --client-cert` flag is used with the Consul Connect Proxy in a Service Mesh architecture. It specifies that the proxy should use a client SSL certificate for secure communication between services. This certificate is typically issued by a trusted CA and is unique to each service instance. By using client certificates, Consul Connect ensures secure and encrypted communication between services, enhancing security in microservices-based applications.'
        client-key: '[AI] The `consul connect proxy` is a component of Hashicorp''s Consul service mesh that handles inter-service communication using Envoy as the proxy server. The `--client-key` flag is used to specify the client certificate for Authenticator and TLS configuration when the proxy acts as a client towards upstream services. It ensures secure communication between the Consul Connect proxy and other services in the mesh.'
        datacenter: '[AI] The `consul connect proxy --datacenter` flag is used with Consul Connect, a service mesh solution provided by Hashicorp''s Consul platform. This flag sets the datacenter name for the Consul agent acting as a sidecar proxy. When multiple datacenters are configured in a Consul setup, this flag helps ensure that service-to-service communication occurs within the same datacenter for optimal performance and security.'
        http-addr: '[AI] The `--http-addr` flag in Consul Connect Proxy is used to specify the HTTP interface address for the Connect proxy. This is where other services in the Consul service registry can send HTTP requests to communicate with the proxy, allowing them to perform tasks such as service discovery and secure communication using Consul''s built-in Service Mesh functionality. The flag accepts an IP address and port number format, e.g., `0.0.0.0:8001`.'
        listen: '[AI] The `--listen` flag in the Consul Connect Proxy command is used to specify the network interface and address on which the proxy should listen for incoming connections. The Consul Connect Proxy is a component of the Consul service discovery and connectivity platform, designed to create secure, dynamic, and fine-grained connectivity between microservices. By default, the Consul Connect Proxy listens on all available network interfaces (`0.0.0.0`) using random available ports for each connection. However, using the `--listen` flag allows you to explicitly configure a specific interface and address, which can be useful in certain networking environments or security policies. For example, you might use an IP address of `192.168.1.5:8001` to bind the proxy to that particular interface and port.'
        log-json: '[AI] `consul connect proxy` is a component of Hashicorp''s Consul service mesh, which acts as a sidecar proxy in a Kubernetes environment to handle inter-service communication using the Envoy proxy. The `--log-json` flag is an option provided with this command that enables JSON formatted logging for the Consul Connect proxy. This can be useful for collecting and analyzing logs in downstream tools like Elasticsearch or Splunk, which often prefer JSON input format.'
        log-level: '[AI] `consul connect proxy --log-level` is a command-line option used with Consul''s Connect Proxy tool to configure the log level for the proxy''s output. The log level determines the verbosity of the logs, ranging from "critical" (only errors) to "debug" (detailed information). By setting this flag, you can control the amount and detail of logging produced by the Consul Connect Proxy to help with troubleshooting or for informational purposes.'
        pprof-addr: '[AI] The `--pprof-addr` flag in the Consul Connect proxy configuration sets the address on which to listen for Prometheus PerfProfiling (PProf) requests. This allows Consul Connect''s internal processes to be profiled and monitored using external tools like Prometheus, providing insights into their performance and resource usage.'
        proxy-id: '[AI] The `consul connect proxy --proxy-id` is a flag used with Consul''s Connect Proxy, which is a part of the Consul service discovery and configuration management platform. This flag sets the unique identifier for the proxy in the Consul service registry. When multiple proxies are configured in a Consul cluster, each one needs a distinct ID so they can be identified and managed effectively. The ID can be any string value and is used internally by Consul to manage routing rules, health checks, and other proxy-related configurations.'
        register: '[AI] `consul connect proxy --register` is a command used with the Consul service discovery and connect toolset. It starts the Consul Connect proxy and registers the proxy with the Consul server, allowing it to discover and connect to services registered in the Consul catalog automatically. The `--register` flag ensures that the proxy also becomes a registered agent with Consul, enabling it to participate in service discovery and health checks.'
        register-id: '[AI] The `consul connect proxy --register-id` flag is used with the Consul Connect Proxy, which is a component of the Consul service discovery and configuration platform. When this flag is set, it assigns a unique register ID to each service instance that the Consul Connect Proxy registers with Consul. This can be helpful in managing multiple instances of the same service, as each instance will have a distinct identifier. The register ID also plays a role in service discovery and load balancing, allowing Consul to route traffic to specific instances based on their IDs.'
        service: '[AI] The `consul connect proxy --service` command is used with the Consul service discovery and connecting toolset. It configures the Consul proxy to forward traffic to specific services that have been registered in the Consul service registry. This enables communication between microservices or containers, providing a more flexible and dynamic infrastructure. When using `--service`, you specify the name of the desired service as an argument, and the proxy will automatically route incoming traffic on its assigned port to the correct backend service instance.'
        service-addr: '[AI] `consul connect proxy --service-addr` is a command used with the Consul service discovery and connect tool. The `--service-addr` option specifies the IP address and port of the Consul Connect agent running the sidecar proxy for a service in a containerized environment. When this flag is provided, the proxy automatically registers itself as a client with the Consul server, and begins forwarding traffic to other services registered within the same Consul cluster using their service names. This enables inter-service communication between microservices in a consistent and discovery-driven manner.'
        sidecar-for: '[AI] `consul connect proxy --sidecar-for` is a flag used with Consul, an open-source tool for service discovery and configuration management. This specific flag is used to configure the Consul Connect proxy to act as a sidecar container in Kubernetes environments. With this flag, the Consul Connect proxy container will be deployed alongside other application containers and handle traffic between them using the sidecar model. The purpose of this setup is to simplify security configuration and service discovery for microservices architectures running in Kubernetes.'
        stale: '[AI] `consul connect proxy --stale` is a flag used with Consul''s Connect Proxy tool. It instructs the proxy to continue forwarding traffic for services even if their registrations have become stale or have been removed from the Consul service registry. This can help ensure continuity of traffic during Consul service registration changes or outages, but may also introduce potential security risks by allowing traffic to services that are no longer registered or have been removed for a reason.'
        tls-server-name: '[AI] The `--tls-server-name` flag in Consul Connect''s Proxy setting specifies the TLS server name that will be used for secure communication between services in a Consul Connect network. It is important to configure this value correctly to ensure proper identification of servers during encryption and authentication. Incorrect use may result in connectivity issues or security vulnerabilities.'
        token: '[AI] The `consul connect proxy --token` is a command used in the Consul service discovery and connecting applications together. The `--token` option specifies an ACL token for secure communication between services. When Consul''s Connect proxy is started with this token, it allows only services that have been granted the appropriate permissions by the Consul ACL policy to communicate through the proxy. This adds an extra layer of security to your service-to-service communication in a Consul-based microservices architecture.'
        token-file: '[AI] The `consul connect proxy --token-file` is a command used in the Consul service discovery and connecting services tool. This option specifies the file path to a token file containing an access token required for secure communication between proxied services. By default, Consul Connect does not require authentication between services, but using this option enables encrypted communication between services with mutually trusted tokens.'
        upstream: '[AI] The `consul connect proxy --upstream` flag is used with the Consul Connect service mesh proxy. It specifies that the proxy should operate in upstream mode, where it forwards incoming traffic to the registered services in the Consul service registry. In other words, the flag tells the proxy to act as a client and send requests to services discovered through Consul, rather than serving requests itself or acting as a gateway between services.'
