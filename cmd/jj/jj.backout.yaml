# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: backout
description: Apply the reverse of a revision on top of another revision
flags:
    -d, --destination*=: The revision to apply the reverse changes on top of
    -h, --help: Print help (see more with '--help')
    -r, --revision=: The revision to apply the reverse of
documentation:
    command: '[AI] The `jj backout` command is specific to the Vim text editor''s plugin, Ultimate-Jump (jj). It allows users to undo their most recent jump or navigation action, effectively moving the cursor back to its previous location before making a jump using the jj plugin. This command is useful when you accidentally navigate to the wrong place in your document and want to quickly return to where you were before.'
    flag:
        destination: '[AI] The `jj backout --destination` command in Git is used to move the current branch back to a previous commit, effectively undoing some changes made on the branch. The `--destination` option specifies where to move the branch tip after the backout, typically the name of a new branch that will be created to store the state of the branch before the change was made. This command creates a new commit with a message describing the backout and keeps the history intact.'
        help: '[AI] `jj backout --help` is a command used in Jupyter Notebooks with version control systems like Git. It displays help information about the `jj backout` sub-command in Jupyter''s jupyter_github interface. This command allows users to create a new notebook from an earlier commit, effectively undoing changes made since that commit. Using it with `--help` provides details on how to use this command, including any optional arguments and their meanings.'
        revision: '[AI] `jj backout --revision` is a Git command used to revert specific file changes to a previous commit, using the revision number as an argument. This command does not create a new commit with a message describing the change, but instead undoes the changes made in that commit and leaves the working directory and index in the state they were before that commit. If no revision is specified, Git will use the most recent commit as the reference point for the revert.'
