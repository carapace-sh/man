# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mailinfo
description: Extracts patch and authorship from a single e-mail message
group: low-level helper
flags:
    --quoted-cr=: action when quoted CR is found
    --scissors: use scissors
    -b: keep non patch brackets in subject
    -k: keep subject
    -m, --message-id: copy Message-ID to the end of commit message
    -n: disable charset re-coding of metadata
    -u: re-code metadata to i18n.commitEncoding
documentation:
    command: '[AI] `git mailinfo` is a Git porcelain command used to extract email messages related to a specific commit or branch tip. It parses the reflog and message history, and extracts the relevant email headers, creating a new .eml file for each message. The command can be used with an optional argument specifying a reference or a tag. The output files are saved in the current directory by default.'
    flag:
        b: '[AI] The `git mailinfo` command is a Git porcelain (command-line) tool used to extract email messages related to a particular commit or branch. The option `-b <branch>` specifies that you want to extract the emails associated with the given Git branch, rather than a specific commit. This can be useful for reviewing the discussion history surrounding a branch before merging it into another branch or sharing it with others.'
        k: '[AI] `git mailinfo` is a Git porcelain command used to inspect and process emails that were used to create a commit. The `-k` option stands for "keep messages," which means that after extracting the email messages into individual files, those files will not be deleted by default. This can be useful if you want to save or further process the email content separately from Git.'
        message-id: '[AI] `git mailinfo --message-id` is a Git command used to extract and show email messages associated with a particular commit or branch tip. The `--message-id` option specifically requests Git to display the Message-ID header of the email, which uniquely identifies each email message within an email thread. This command can be useful for traceability and investigating the communication history behind Git commits.'
        "n": '[AI] `git mailinfo` is a Git porcelain command used to extract email information from a commit or a tree object. The `-n` option, when used with this command, tells Git to only display the author and committer names and emails without showing any other information like messages or commit IDs. In summary, using `git mailinfo -n` will return just the author and committer email addresses associated with a given Git object.'
        quoted-cr: '[AI] `git mailinfo` is a Git command used to process emails containing patches and generate related Git objects and commits. The `--quoted-cr` option is one of its sub-options. It specifically tells Git to interpret CR (Carriage Return) characters as part of a quoted-printable encoding, ensuring that the message text and patch data in the email remain intact during the import process.'
        scissors: '[AI] The `git mailinfo --scissors` command is a Git porcelain (command-line interface) tool used to process Mbox email files containing Git patch series. The `--scissors` option specifically removes the header and footer lines from each patch, keeping only the actual diff hunks. This allows for easier parsing or further processing of the patch content.'
        u: '[AI] `git mailinfo -u` is a Git command used to show the email address of the author or committer of a specific commit. It takes one argument, which is typically the hash or ref of the commit in question. For example, running `git mailinfo -u <commit-hash>` will display the email address associated with that commit. This command can be useful for quickly accessing email addresses when working with Git repositories.'
