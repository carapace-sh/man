# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build [OPTION…] DIRECTORY [COMMAND [ARGUMENT…]]
description: Build in directory
group: build
flags:
    --add-policy=: Add generic policy option
    --allow=: Allow feature
    --bind-mount=: Add bind mount
    --build-dir=: Start build in this directory
    --device=: Expose device to app
    --disallow=: Don't allow feature
    --env-fd=: Read environment variables in env -0 format from FD
    --env=: Set environment variable
    --filesystem=: Expose filesystem to app (:ro for read-only)
    --help-all: Show all help options
    --log-session-bus: Log session bus calls
    --log-system-bus: Log system bus calls
    --metadata=: Use alternative file for the metadata
    --no-talk-name=: Don't allow app to talk to name on the session bus
    --nodevice=: Don't expose device to app
    --nofilesystem=: Don't expose filesystem to app
    --nosocket=: Don't expose socket to app
    --ostree-verbose: Show OSTree debug information
    --own-name=: Allow app to own name on the session bus
    --persist=: Persist home directory subpath
    --readonly: Make destination readonly
    --remove-policy=: Remove generic policy option
    --sdk-dir=: Where to look for custom sdk dir (defaults to 'usr')
    --share=: Share with host
    --socket=: Expose socket to app
    --system-no-talk-name=: Don't allow app to talk to name on the system bus
    --system-own-name=: Allow app to own name on the system bus
    --system-talk-name=: Allow app to talk to name on the system bus
    --talk-name=: Allow app to talk to name on the session bus
    --unset-env=: Remove variable from environment
    --unshare=: Unshare with host
    --with-appdir: Export application homedir directory to build
    -h, --help: Show help options
    -p, --die-with-parent: Kill processes when the parent process dies
    -r, --runtime: Use Platform runtime rather than Sdk
    -v, --verbose: Show debug information, -vv for more detail
documentation:
    command: '[AI] `flatpak build` is a command used in the Flatpak package management system to create new, distributable packages from existing project sources. It builds an application or runtime from its source code repository, applying any necessary patches, compiling the code, and packaging it into a Flatpak bundle. The resulting .flatpak file can be further distributed, installed, and run on different systems using Flatpak.'
    flag:
        add-policy: '[AI] `flatpak build` is a command used in Flatpak, a software deployment and application packaging system, to build an application bundle from its source code. The `--add-policy` option modifies the build process by adding custom policies for the resulting Flatpak application. These policies define access control rules and capabilities that specify what the application can do on the system. For example, a policy might allow an application to access certain files or system features. Policies are defined in JSON format in files called `metadata.json` or `appdata.xml`. The `--add-policy` option allows developers to include custom policies during the build process to fine-tune the application''s capabilities.'
        allow: '[AI] `flatpak build` is a command-line tool for building and packaging applications into Flatpaks, which are application sandboxes in the Flatpak platform. The `--allow` option grants permission to use specific external dependencies that are not included in the Flatpak runtime, allowing them to be installed alongside the application being built. This is necessary when an application requires libraries or other resources that are not available by default in the Flatpak runtime.'
        bind-mount: '[AI] `flatpak build` is a command used to create a new Flatpak application bundle from sources. The `--bind-mount` option specifies that certain host directories should be mounted into the application sandbox, allowing the bundled application to access these directories as if they were part of its own file system. This can be useful for sharing data or libraries between the host and the application without having to package them into the bundle itself.'
        build-dir: '[AI] `flatpak build` is a command used in the Flatpak application packaging system to build an app bundle from its source code. The `--build-dir` option specifies the directory where the build process should be carried out. In other words, it sets the working directory for the build process. The resulting bundle will be saved in the `$OS/app/<application>` directory by default upon successful build completion.'
        device: '[AI] `flatpak build --device` is a command used in Flatpak, a software deployment and package management system. This command instructs Flatpak to build a new Flatpak bundle for an application using the specified device or development environment, which can include things like additional libraries, drivers, or hardware access. The `--device` option is used to specify a machine or container as the development environment for building the bundle. This command does not create or manage the device itself; it only uses an existing one during the build process.'
        die-with-parent: '[AI] `flatpak build --die-with-parent` is a command used in Flatpak, a software deployment and packaging system. This command instructs the builder to run the application being packaged with the same process ID as its parent, causing it to terminate when the parent does. This behavior can be useful for applications that are intended to run as part of a larger system or desktop session and should not outlive the session.'
        disallow: '[AI] `flatpak build --disallow` is a command used in the Flatpak application packaging system. It instructs the builder to disallow the use of specific runtimes or libraries during the build process that are not explicitly listed in the project''s manifest file. This helps ensure consistency and security by restricting the dependencies used for building an application, preventing potential conflicts or unwanted introductions of external packages.'
        env: |-
            [AI] `flatpak build` is a command-line tool used in the Flatpak application packaging system. The `--env` option sets environment variables for the build process of a Flatpak application.

            When you run `flatpak build --project-dir=<path> --env="VAR1=value1 VAR2=value2"` (replace `<path>` with your project directory and `VAR1`, `VAR2`, `VALUE1`, and `VALUE2` with your specific variable names and values), Flatpak will create a new, isolated build environment for the application. The `--env` option sets the specified variables in this build environment, which can be used during the build process to set things like compile flags or dependency paths.

            The resulting artifacts from the build process are then added to your local Flatpak repository for later use and deployment.
        env-fd: '[AI] `flatpak build` is a command used in the Flatpak application packaging system to build new app images from their sources. The option `--env-fd` (short for "file descriptor") allows passing environment variables as FDs instead of key=value pairs in the .flatpak-manifest file. This can be useful when dealing with large environment variables or when dynamically setting them during the build process.'
        filesystem: '[AI] The `flatpak build` command is a part of Flatpak, a software deployment and application packaging system for Linux and other Unix-based operating systems. The `--filesystem` option is used to specify the filesystems or mount points that should be available to the builder during the construction of a new Flatpak application bundle. This means that the specified filesystems will be accessible to the software being built, allowing it to read or write files from those locations if needed. The resulting Flatpak application bundle will then include the specified filesystems as part of its runtime environment.'
        help: |-
            [AI] `flatpak build` is a command-line utility provided by Flatpak, a software deployment and packaging system for Linux. It is used to build new Flatpak applications or runtimes from their source code. The `--help` option provides information about how to use this command with various arguments. Here's a brief explanation:

            - `flatpak build`: The main command to build a Flatpak application or runtime.
            - `--help`: Displays help information about the `flatpak build` command, including its usage and supported options.
            - Supported arguments include (but are not limited to):
              - `--branch <branch>`: Specifies the Git branch or commit to build from.
              - `--repo <repository>`: The path to the local repository where the built artifacts will be stored.
              - `--force`: Forces a rebuild even if the source code has not changed since the last build.
              - `--no-sources`: Skips downloading the sources during the build process.

            For more detailed information, you can refer to the official Flatpak documentation.
        help-all: '[AI] `flatpak build` is a command-line tool provided by Flatpak, a software deployment and application packaging system. The `--help-all` option is used to display help information for all subcommands and their respective options and arguments. In other words, it shows a comprehensive list of every possible action that can be taken with the `flatpak build` command and how to use them.'
        log-session-bus: '[AI] `flatpak build` is a command-line tool used in the Flatpak application packaging system. The `--log-session-bus` option instructs Flatpak to log messages related to the D-Bus session bus to the standard error stream during the build process. This can be helpful for debugging issues that may arise during the creation of a new Flatpak application bundle.'
        log-system-bus: '[AI] `flatpak build` is a command used to build and bundle applications into portable, sandboxed units for distribution via Flatpak, a popular application packaging system. The option `--log-system-bus` instructs the tool to output debug log messages related to system bus communication to the standard error stream during the build process. This can be helpful for developers to diagnose issues with their applications'' interaction with system services and other applications via D-Bus, the inter-process communication (IPC) technology used by Flatpak.'
        metadata: '[AI] `flatpak build --metadata` is a command used in the Flatpak application packaging system to generate or update metadata files for an application bundle. These metadata files contain important information about the bundle, such as its name, description, dependencies, and entry points. The output of this command can be saved in a .flatpak-manifest file or passed directly to `flatpak build-finished` to create a new Flatpak image with the updated metadata.'
        no-talk-name: '[AI] `flatpak build` is a command used in the Flatpak application packaging system to build a new app bundle from its source code. The `--no-set-name` option prevents the automated setting of the final name for the resulting app. This can be useful when manually customizing or overriding the app''s display name, description, or other metadata before publishing it on Flatpak repositories.'
        nodevice: '[AI] `flatpak build --nodevice` is a command used in Flatpak, a software deployment and packaging system. This command initiates the creation of a new Flatpak application bundle without installing any development headers or libraries on the building system. The resulting bundle can then be installed on other systems as a regular user application. It''s useful when developing and distributing applications that don''t rely on system development tools for their functionality.'
        nofilesystem: '[AI] `flatpak build` is a command used to create a new Flatpak application bundle from source code. The `--nofilesystem` option instructs the builder to not include any filesystems or external dependencies in the resulting bundle, making it smaller and more self-contained. This can be useful for distributing applications with minimal external requirements.'
        nosocket: '[AI] `flatpak build --nosocket` is a command used in the Flatpak application packaging system to build an application bundle without creating a socket file during the build process. The "--nosocket" option disables the creation of a socket file that allows communication between the running application and its hosting system. This can be useful when developing or testing applications where socket communications are not required, or for security reasons, as it reduces the potential attack surface by avoiding the creation of an unnecessary network endpoint.'
        ostree-verbose: '[AI] `flatpak build --ostree-verbose` is a command used in Flatpak, a software deployment and package management system. This command initiates the process of building a new Flatpak application bundle using OSTree as the backend for version control and file storage. The `--ostree-verbose` flag increases the verbosity of the output during the build process, providing more detailed information about each step in the build, commit, and manifest generation stages.'
        own-name: '[AI] `flatpak build --own-name` is a command used in the Flatpak application packaging system to build a new Flatpak application package from an existing source code repository or directory. The `--own-name` option specifies the name that the newly built application package will have when it''s installed on other systems. This allows developers to have control over the final name of their applications in the Flatpak runtime environment.'
        persist: '[AI] `flatpak build --persist` is a command used in the Flatpak application packaging system to build an existing source code tree into a new or updated Flatpak application bundle. The `--persist` flag instructs Flatpak to keep previously installed dependencies and modifications, allowing for incremental builds and reducing download size if the same dependencies are already installed on the system. This can save time and network bandwidth in cases where multiple applications share common dependencies.'
        readonly: |-
            [AI] `flatpak build --readonly` is a command used in the Flatpak application packaging system. This command initiates the process of building a new Flatpak application package from the source code, but with the important distinction that it creates a read-only file system snapshot of the resulting build environment.

            In other words, this command allows you to create an immutable and consistent image of the build environment for your application, which is crucial when you want to distribute the package to other systems without worrying about differences in their environments that might cause compatibility issues. The resulting `.flatpak-manifest` file can then be used to install the package on other systems using Flatpak.
        remove-policy: '[AI] `flatpak build --remove-policy` is a command used in the Flatpak packaging system to remove specific security policies from a Flatpak application bundle during the build process. This command allows developers to override the default security settings and create more permissive or custom policies for their applications. The result is a Flatpak package with adjusted security policies that can be installed with fewer restrictions on the target system.'
        runtime: '[AI] `flatpak build` is a command-line tool in the Flatpak application packaging system used to build and create new Flatpak applications or runtimes. The `--runtime` option specifies that the building process should create a new runtime instead of an application. A runtime contains a set of shared libraries, development headers, and other system components required for running applications. By using this flag during the build process, you can create a new Flatpak runtime bundle which can then be installed on various systems to provide consistent environments for running applications across different platforms.'
        sdk-dir: '[AI] `flatpak build` is a command used in Flatpak, a software deployment and packaging system. The `--sdk-dir` option specifies a directory containing the development tools and libraries that will be used during the building process of a new application package. It allows developers to use specific versions of dependencies for their projects, ensuring consistent builds across different systems. In summary, `flatpak build --sdk-dir` is used to build an application package using a specified set of development tools and libraries located in the given directory.'
        share: |-
            [AI] `flatpak build --share` is a command used in Flatpak, a desktop application packaging and deployment system. This command builds a new Flatpak application bundle using an existing source code repository or local project directory. The key distinction of this command is the `--share` flag which enables the creation of a shared build tree.

            With a shared build tree, multiple developers can work on the same codebase in parallel, each having their own separate workspace and modifications, while still sharing common dependencies and build tools. This improves collaboration and productivity within development teams. The resulting Flatpak packages, with their shared dependencies, are then easily deployed across various systems using Flatpak's runtime.
        socket: '[AI] `flatpak build --socket` is a command used in the Flatpak application packaging system. It instructs Flatpak to create a new application bundle during the build process, specifically focusing on creating and managing custom inter-application communication channels via Unix domain sockets. By using this command, developers can enable their applications to securely communicate with each other using these sockets, facilitating more complex interactions between applications within the Flatpak environment.'
        system-no-talk-name: '[AI] `flatpak build` is a command used in Flatpak, a software deployment and packaging system for Linux. The `--system` flag tells Flatpak to build the package for the system installation instead of a user installation. The `--no-take-name` flag prevents Flatpak from automatically generating a name for the new build based on the source repository name, allowing the developer to specify a custom name for the new build instead.'
        system-own-name: '[AI] `flatpak build` is a command used in Flatpak, a software deployment and packaging system for Linux and other Unix-based systems. The `--system-own-name` option specifies that the resulting Flatpak application bundle should be installed with system-wide ownership. This means that the application will be available for all users on the system instead of just the user who built or installed it. When building and installing a Flatpak application using this flag, the application will have a consistent name across all users and will not conflict with locally installed applications with the same name.'
        system-talk-name: |-
            [AI] `flatpak build` is a command used in Flatpak, a software deployment and packaging system for Linux. The `--system` option tells Flatpak to build a Flatpak bundle for the system rather than for a user. The `--talk-name` option specifies the human-readable name for the system service or daemon that will be provided by the bundle.

            So, `flatpak build --system <project-directory> --talk-name <service-name>` creates a Flatpak package from the given project directory, intended to run as a system service with the specified name.
        talk-name: '[AI] `flatpak build` is a command used in the Flatpak application packaging system to build new app bundles from their source code. The `--talk-name` option is used to specify the name of the resulting build artifact or application bundle when it''s published. This name will be visible to users and appear in the Flatpak repository and application listings.'
        unset-env: '[AI] `flatpak build` is a command used in Flatpak, a software deployment and packaging system for Linux. The `--unset-env` option is passed to this command to remove an environment variable from the build environment. This can be useful when building packages in a consistent way across different systems or when isolating the build process from the host environment. By unsetting an env var, you ensure that it does not interfere with the build process.'
        unshare: '[AI] `flatpak build --unshare` is a command used in the Flatpak application packaging system to build a new Flatpak app bundle without creating or using a container for the build environment. The `--unshare` flag disables the creation of a new container, allowing the build process to be executed directly in the host system''s environment. This can be useful when building apps that have specific dependencies on the host system or when trying to minimize the size and complexity of the resulting app bundle.'
        verbose: '[AI] `flatpak build --verbose` is a command used in the Flatpak application packaging system to build a new Flatpak package from an existing source. The `--verbose` option increases the amount of output during the build process, providing detailed information about each step taken by the builder, including any warnings or errors that may occur. This can be useful for debugging and understanding the underlying build processes.'
        with-appdir: '[AI] `flatpak build` is a command used in the Flatpak application packaging system to build an application bundle from its source code. The option `--with-appdir` specifies that a custom application directory (appdir) should be used during the build process, instead of the default one. This can be useful when building applications with non-standard directories for their binaries or configuration files. The resulting Flatpak bundle will have this custom appdir as its root directory.'
