# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list [flags]
aliases:
    - ls
description: List merge requests
flags:
    --author=: Filter merge request by Author <username>
    --mine&: Get only merge requests assigned to me
    --not-label*=: Filter merge requests by not having label <name>
    --search=: Filter by <string> in title and description
    -A, --all: Get all merge requests
    -M, --merged: Get only merged merge requests
    -P, --per-page=: Number of items to list per page
    -a, --assignee*=: Get only merge requests assigned to users
    -c, --closed: Get only closed merge requests
    -d, --draft: Filter by draft merge requests
    -l, --label*=: Filter merge request by label <name>
    -m, --milestone=: Filter merge request by milestone <id>
    -o, --opened&: Get only open merge requests
    -p, --page=: Page number
    -r, --reviewer*=: Get only merge requests with users as reviewer
    -s, --source-branch=: Filter by source branch <name>
    -t, --target-branch=: Filter by target branch <name>
persistentflags:
    -R, --repo=: Select another repository using the `OWNER/REPO` or `GROUP/NAMESPACE/REPO` format or full URL or git URL
    -g, --group=: Select a group/subgroup. This option is ignored if a repo argument is set.
documentation:
    command: '[AI] The `glab mr list` command is used in GitLab to list all merge requests (MRs) for a given project. It''s a short form of GitLab''s Merge Request interface, provided by the `glab` CLI tool. This command helps developers quickly view available MRs for review or merging without having to visit the GitLab web interface directly.'
    flag:
        all: '[AI] `glab` is a Git interface for the Kubernetes cluster using `kubectl`, `Helm`, and other tools. The command `glab mr list --all` lists all merge requests (MRs) across all repositories in the current cluster. The `--all` option includes MRs from all branches, not just the current branch.'
        assignee: '[AI] The `glab mr list --assignee` command is used with GitLab''s CLI tool, Glab, to list Merge Requests (MRs) where a specific user is set as the assignee. This helps developers to focus on MRs that require their attention or collaboration. The `--assignee` option filters the results to only show MRs with the given GitLab username.'
        author: '[AI] The `glab` command with the argument `mr list --author` is used to list Merge Requests (MRs) in GitLab that were created by a specific author. The `glab` tool is a GitOps CLI for GitLab, and this command retrieves a list of MRs filtered by the provided author name.'
        closed: '[AI] `glab` is a GitHub CLI tool for interacting with GitHub repositories. The command `glab mr list --closed` lists all merged pull requests (merged meaning the changes have been integrated into their respective branches) in your current repository. The `--closed` flag filters the results to only include closed merges, i.e., pull requests where the merge button on GitHub has been clicked and the changes have been fully incorporated into the branch.'
        draft: '[AI] `glab` is a GitLab CLI tool for interacting with GitLab repositories. The command `glab mr list --draft` lists all the draft merge requests in the current GitLab project. Draft merge requests are those that have been started but not yet submitted for review. By using the `--draft` flag, we filter the output to only show draft merge requests.'
        label: '[AI] The `glab` command with the argument `mr list --label` is used to list all merge requests (MRs) in GitLab with a specific label. `glab` is a CLI tool for interacting with GitLab, and this command retrieves information about MRs based on their assigned labels. The label is a metadata tag that can be applied to MRs for organization and filtering purposes.'
        merged: '[AI] The `glab mr list --merged` command is used in GitLab to list merged merge requests. Merge requests are a way to collaboratively propose and review changes to a repository. When a merge request is merged, it applies the proposed changes to the target branch. This command displays a list of all merge requests that have been successfully merged in the GitLab project.'
        milestone: '[AI] The `glab` command with the argument `mr list --milestone` is a GitLab CI/CD tool, specifically a subcommand of Glab, which is an unofficial GitLab CI/CD client for interacting with GitLab merging requests (MRs) and pipelines. The command `mr list` lists all MRs in the current project, while the flag `--milestone` filters the results to only show MRs associated with a specific milestone. In summary, it is used to list MRs linked to a given milestone within a GitLab project.'
        mine: '[AI] `glab` is a Git interface for the `tmux` and `vim` users, developed as an alternative to `git`. The command `glab mr list --mine` lists all the merge requests (MRs) in your local Git repository that you have submitted. The `--mine` option filters the list to show only MRs associated with commits that are present in your local repository.'
        not-label: '[AI] The `glab mr list --not-label` command is used with GitLab''s CLI tool (Glab) to list merge requests that do not have a specific label assigned. The `--not-label` option filters the output to only show merge requests which do not match the given label.'
        opened: '[AI] `glab mr list --opened` is a GitLab CLI command used to list merged requests (merged branches or merge commits) that have been opened in GitLab. The `--opened` flag filters the output to only show merge requests that are currently open, meaning they have not yet been closed or merged fully into their target branches.'
        page: |-
            [AI] `glab` is a Git interface for the Kubernetes command-line tool `kubectl`. The command `glab mr list --page` lists all merge requests (MRs) managed by GitLab in a repository, and displays them in paginated format.

            `glab` fetches MR information from GitLab server using its API. The `list` subcommand shows the list of MRs with their IDs, titles, and statuses. The `--page` option is used to navigate through multiple pages of results if there are more MRs than can be displayed in a single page.

            For example, `glab mr list --page 2` would display the MRs starting from the second page.
        per-page: '[AI] `glab mr list --per-page` is a GitLab CLI command used to list merged merge requests. The `--per-page` option specifies the maximum number of merged merge requests (up to 100) that will be displayed per page of results when querying the GitLab server. This can help manage large numbers of merged merge requests more efficiently.'
        reviewer: '[AI] The `glab mr list --reviewer` command is used with GitLab''s Glab tool, which is a CLI (Command-Line Interface) for GitLab. This specific command lists the merge requests (MRs) that have been assigned to or are being reviewed by a specified reviewer. The reviewer can be specified using their username or email address.'
        search: '[AI] `glab mr list --search` is a GitLab CLI command used to list Merge Requests (MRs) in a repository based on a given search query. The command interacts with GitLab''s API to fetch MRs that match the specified search term, which can be a branch name, commit message, author, or any other text-based information associated with MRs. The output is usually displayed as a list of MR numbers and titles in the terminal.'
        source-branch: '[AI] `glab` is a Git interface for GitHub written by GitHub. The command `glab mr list --source-branch` lists Merge Requests (MRs) with their source branches in GitLab or GitHub, using the `glab` tool. It allows you to view MRs and their associated branch information in a concise table format. This command helps manage and keep track of merge requests during code review and collaboration processes.'
        target-branch: '[AI] The `glab mr list --target-branch` command is used with GitLab''s glab tool to list merge requests (MRs) for a specific branch. The `--target-branch` option specifies the name of the branch in GitLab repository that you want to view MRs for. This command helps developers keep track of ongoing work, review progress, and collaborate effectively on their projects.'
