# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: style
description: Apply coloring, borders, spacing to text
flags:
    --align=: Text Alignment
    --background=: Background Color
    --bold: Bold text
    --border-background=: Border Background Color
    --border-foreground=: Border Foreground Color
    --border=: Border Style
    --faint: Faint text
    --foreground=: Foreground Color
    --height=: Text height
    --italic: Italicize text
    --margin=: Text margin
    --padding=: Text padding
    --strikethrough: Strikethrough text
    --underline: Underline text
    --width=: Text width
documentation:
    command: '[AI] "Gum style" is a visual effect filter in Adobe After Effects that simulates the look of traditional hand-drawn animation by adding random distortion, wobble, and shake to layers. It creates an organic, imperfect, and expressive appearance often used in cartoon or animated titles.'
    flag:
        align: "[AI] The `--align` option in the `gum style` command is used to specify how multiple lines of output should be aligned within a single terminal tab or console window.\n\nWhen you run `gum style` with the `--align` flag followed by a value, such as `left`, `right`, or `center`, Gum will automatically align subsequent lines based on that alignment setting. For example:\n\n```bash\necho \"Key: Value\" | gum style --color blue --align left\n# Output: Key: Value (blue, aligned to the left)\n\necho \"Key:\" \"\\$(printf \"%s: %s\\n\" \"Value1\" \"Value2\" )\" | gum style --color yellow --align right\n# Output: Value1: Key \n#          Value2:\n```\n\nThis can be helpful when dealing with complex output and ensuring that columns or rows line up correctly for easier reading."
        background: '[AI] The `--background gumstyle` flag is a command-line option used with tools like `curl` or `wget` to display output progress bars in a graphical user interface (GUI) style, specifically the "gumstyle" theme. This style shows a more detailed and visually appealing progress bar compared to the default textual progress indicators. However, it requires an environment where GUI elements can be displayed, typically on graphical terminal emulators or desktop environments, not in a headless or console-only setup.'
        bold: '[AI] The "gum style --bold" is a designation used in Adobe Illustrator or other vector graphic software to apply a specific type of brush stroke effect called "Gumption''s Brushes" or "Gum Penn" brushes, with the "bold" variant making the lines appear thicker. These brushes mimic the look and feel of hand-drawn ink strokes.'
        border: '[AI] The `--gum-style flag --border` is used in GitHub Actions workflows to configure the layout of the GitHub Markdown preview for output in a GitHub comment or email. Specifically, it sets the border style for the table of contents and code blocks displayed in the preview, making them stand out visually. The flag does not affect the actual GitHub repository files or commit messages.'
        border-background: '[AI] The `gum style --border-background` is a CSS property used with the Gumshoe JavaScript testing library for writing tests in a BDD (Behavior Driven Development) style. It sets the background color of an element''s border. For instance, `element.style.border = ''2px solid red''; element.className += '' --border-background-blue'';` would set the border width to 2 pixels, the border color to solid red, and the border background color to blue.'
        border-foreground: '[AI] The `gum style --border-foreground` flag in GUM (Graphical Userfeedback for Node.js) is used to set the foreground color of the border around an interactive terminal control sequence (CTS). This allows for customization of the appearance of CTSs, such as making the border stand out more clearly against the background. The exact effect depends on the terminal''s support for colored borders and the specific color value specified.'
        faint: '[AI] The `--faint` option in the `gum` style for Git commands reduces the output to a minimal, faintly colored format. It''s often used when working with scripts or automated processes where detailed output is not required. This flag hides most decorative elements and messages, focusing on the raw Git data.'
        foreground: '[AI] The `--foreground` option in the `gum-style` command is used to specify that the output from a command or script should be written directly to the console, without any buffer or paging. This is often used when you want to see the output in real time and don''t need the additional functionality provided by a pager such as less or more. The flag does not affect the appearance or formatting of the output itself, which would typically be handled by other options or configurations specific to your terminal or editor.'
        height: '[AI] The `--height gum-style` is a command-line argument used in some text-based applications, such as Git or Tmux, to configure their output to display in the "Gum Stickers" or "gum style" format for height measurements. In this format, each line''s height is represented by a vertical stack of rectangular blocks (resembling stickers), with the number of blocks indicating the line height. The flag helps users visually determine the heights of different text areas in their terminal application for easier comparison and configuration.'
        italic: '[AI] The `--gum style "--italic"` argument is used with command-line tools like PowerShell or Git for configuring the output style of text. Specifically, it sets the italic formatting style. Italic text appears slanted and is often used to emphasize words or phrases.'
        margin: '[AI] The `gum style --margin` flag is used in GUM (Git Unified Modeling) language, which is a configuration file for Git hooks. This specific flag sets the margin size for Git diff and blame output. It takes one or two numerical values representing horizontal and vertical margins respectively, with each value being the minimum number of columns to leave empty before displaying content. For example, `--margin 2 1` would set a left and bottom margin of 2 columns and a right and top margin of 1 column.'
        padding: '[AI] The `--padding` option in the `gum style` command is used to apply padding to the output of Gum, a popular interactive CLI (Command Line Interface) library for Node.js. The padding can be specified as a number or a string, and it adds spacing around the output text or elements. This can enhance the visual appeal and readability of the CLI interface.'
        strikethrough: '[AI] The `--strikethrough` option under Markdown''s Gumstyle flag is used to apply a strikethrough formatting to selected text. When this option is enabled, any text surrounded by two hyphens (`--`) or two asterisks (`**`) will be displayed with a line through it in the output document, visually representing crossed-out text. For example: `--text-to-strike-through--` or `**text-to-strike-through**`.'
        underline: |-
            [AI] The `--underline` option in Markdown, when used with a flags like `gum style`, is used to apply an underline style to the specified text or link. In Markdown syntax, this would look like:

            ```markdown
            **__text__** --underline
            ```

            or

            ```markdown
            **_[link](url)_** --underline
            ```

            The `gum style` part is likely referring to a custom CSS or formatting rule defined by the Gum text editor or a specific workflow in use. It does not directly affect the underline behavior, but rather applies other visual styles to the text or link at the same time. The underline will be applied automatically based on the Markdown syntax with the `--underline` flag.
        width: '[AI] The `--width` option in the `gum style` command is used to specify the width of the terminal window for formatting text output. It ensures that the text is displayed within the defined width to prevent truncation and maintain readability. This flag is commonly used with other `gum` commands, such as `gum list`, `gum table`, or `gum json`, which format data output in various ways. The exact usage may vary depending on the specific command being run, but generally involves passing both the `--width` option followed by a numeric value to represent the desired terminal width.'
