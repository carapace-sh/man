# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit [<repository>]
description: Edit repository settings
group: Targeted commands
flags:
    --add-topic*=: Add repository topic
    --allow-forking: Allow forking of an organization repository
    --allow-update-branch: Allow a pull request head branch that is behind its base branch to be updated
    --default-branch=: Set the default branch `name` for the repository
    --delete-branch-on-merge: Delete head branch when pull requests are merged
    --enable-auto-merge: Enable auto-merge functionality
    --enable-discussions: Enable discussions in the repository
    --enable-issues: Enable issues in the repository
    --enable-merge-commit: Enable merging pull requests via merge commit
    --enable-projects: Enable projects in the repository
    --enable-rebase-merge: Enable merging pull requests via rebase
    --enable-squash-merge: Enable merging pull requests via squashed commit
    --enable-wiki: Enable wiki in the repository
    --remove-topic*=: Remove repository topic
    --template: Make the repository available as a template repository
    --visibility=: Change the visibility of the repository to {public,private,internal}
    -d, --description=: Description of the repository
    -h, --homepage=: Repository home page `URL`
documentation:
    command: '[AI] `gh repo edit` is a GitHub CLI (Command Line Interface) command used to edit files in a repository directly from the terminal. This command fetches the current branch, opens the specified file(s) in your default editor, saves and commits the changes, and pushes them back to the repository. It simplifies the process of making small edits without having to create a new branch or use an IDE/text editor.'
    flag:
        add-topic: '[AI] `git hub repo edit --add-topic` is a command used in GitHub''s Git interface for managing repositories. It allows you to add or remove topics (labels) from a repository, making it easier to organize and filter your projects based on specific themes or subjects. The `--add-topic` flag specifically signifies that you want to add a new topic, rather than removing an existing one.'
        allow-forking: '[AI] The `git hub repo edit --allow-forking` command is used to modify a GitHub repository''s settings to allow forking of that repository by other users. Forking allows users to create their own copy of the repository, make modifications, and submit pull requests for proposed changes to be merged back into the original project. This command is typically used by repository owners or collaborators who want to encourage community contributions and collaboration on a GitHub project.'
        allow-update-branch: '[AI] `gh repo edit` is a GitHub CLI command used to edit files in a repository directly from the command line. The `--allow-update-branch` flag enables automatic fast-forward updates to the branch in GitHub, allowing you to push changes without having to create a pull request or resolve merge conflicts. This flag assumes that there are no conflicts between your local and remote branches. Be cautious when using this command as it bypasses the usual review process for merging changes into a branch.'
        default-branch: |-
            [AI] The `gh repo edit --default-branch` command is used with GitHub's `gh` CLI (Command Line Interface) tool. It allows you to update the default branch of a repository in one easy step. This can be useful if, for example, you have accidentally set up a new branch as the default instead of the main or master branch.

            When you run this command followed by the repository's username and the desired branch name: `gh repo edit <username>/<repository> --default-branch <branch_name>`, GitHub will automatically fork the repository (if not already forked), make the specified change in the remote repository, and then create a pull request for the change. After reviewing and merging the pull request, the default branch of the original repository will be updated to the specified one.
        delete-branch-on-merge: '[AI] The `gh repo edit --delete-branch-on-merge` command is a GitHub CLI (Command Line Interface) command used to configure a repository to automatically delete source branches when a pull request is merged. This can help maintain a clean and organized branch structure in your GitHub repository by reducing the number of stale or unnecessary branches. When you merge a pull request, the specified source branch will be automatically deleted, preventing the accumulation of unused branches over time.'
        description: '[AI] `git hub repo edit --description` is a Git command used to edit the description of a repository hosted on GitHub using the Git command line interface. This command combines two actions: `git hub` (which isn''t a standard Git command) is assumed to be an alias for `git fetch origin`, and `repo edit` is a GitHub-specific command that opens the specified file for editing in your default text editor or web browser, allowing you to modify its content. After saving and committing the changes, they will be pushed back to the repository on GitHub.'
        enable-auto-merge: '[AI] `git hub repo edit` is a command used to open and edit files in a GitHub repository using the web interface without cloning or downloading the code locally. The `--enable-auto-merge` flag enables automatic merging of changes made through GitHub''s web editor back into the main branch once the changes have been reviewed and approved. This streamlines the process for making small updates and ensures that the repository remains in sync with the latest codebase.'
        enable-discussions: '[AI] `git hub repo edit --enable-discussions` is a GitHub command used to modify repository settings via the Git command line interface. This specific command enables the Discussions feature, which allows users to submit and reply to questions or feedback under specific issues or pull requests within a repository. It requires authentication with GitHub using SSH keys or personal access tokens.'
        enable-issues: '[AI] The `gh repo edit --enable-issues` command is a GitHub CLI (Command Line Interface) command used to modify a repository, enabling the Issues functionality. This command modifies the `.github/ISSUES_ADMIN.yml` file in a repository to allow users to create and manage issues, making it easier for collaborators to report bugs or suggest improvements. The changes made with this command apply only to repositories that support the Issue Tracking feature.'
        enable-merge-commit: |-
            [AI] `git hub repo edit` is a GitHub command-line interface (CLI) tool used to edit files in a repository hosted on GitHub. The `--enable-merge-commit` option modifies the default commit behavior when pushing changes back to the repository.

            Without this flag, GitHub will create a pull request for your changes instead of directly merging them into the main branch. However, with `--enable-merge-commit`, you can merge your changes directly to the target branch. This bypasses the pull request workflow and simplifies the process if you're confident that the change is ready to be merged.

            In summary, using `git hub repo edit --enable-merge-commit` allows you to make edits to a file in your GitHub repository, merge those changes directly into the branch without creating a pull request, and push the updated branch to the remote repository.
        enable-projects: '[AI] The `gh repo edit --enable-projects` command is a GitHub CLI (Command Line Interface) command used to modify the settings of a GitHub repository. Specifically, this command enables the projects feature for the targeted repository. Projects in GitHub allow users to group repositories by a specific topic or team, making it easier to manage and navigate multiple repositories. By enabling this feature, you can link related projects together and view them as a collection on your GitHub account.'
        enable-rebase-merge: '[AI] The `gh repo edit` command is a GitHub CLI (Command Line Interface) tool used to create and edit files in a repository without forking or cloning it locally. The option `--enable-rebase-merge` enables the rebase merging strategy during pull request creation. This means that when pushing changes to the branch, GitHub will first rebase your commits against the target branch''s latest commits, and then merge the result into the target branch instead of creating a new separate commit for each change. This can lead to cleaner and more linear commit histories in pull requests.'
        enable-squash-merge: '[AI] The `git hub repo edit` command with the `--enable-squash-merge` option is used to open an editor interface in GitHub for creating or editing a file in a repository. When you make changes and save, Git Hub will perform a squash merge, which means all your commits will be combined into a single commit with a single author and message. This can help keep the commit history cleaner by reducing the number of individual commits. It''s often used for making multiple small changes in one go or preparing a pull request.'
        enable-wiki: '[AI] `gh repo edit --enable-wiki` is a command used with the GitHub CLI (Git Hub command-line interface) to modify repository settings. The specific option `--enable-wiki` enables or disables the Wiki feature for the target repository. When used, it sets the Wiki to an enabled state, allowing users to create and edit Wiki content within the repository.'
        homepage: '[AI] The `gh repo edit --homepage` command is used with GitHub''s `git-hub` CLI tool to update the homepage field of a GitHub repository. Homepage refers to the website or URL displayed as the primary link for the repository on GitHub. This command allows you to change the homepage without having to make changes to your repository files directly, making it convenient for managing repository metadata.'
        remove-topic: '[AI] `git hub repo edit` is a GitHub command-line tool used to edit various aspects of a repository, such as its description or topics. The specific command `--remove-topic` is used to remove an existing topic from the repository''s list of topics. This can be useful when you no longer want a certain topic to be associated with your repository. When you run this command, GitHub will prompt you for authentication and then ask which topic you''d like to remove. After confirming the removal, the topic will no longer appear in the repository''s list of topics.'
        template: '[AI] `gh repo edit --template` is a GitHub CLI command used to create or update a file in a repository using a custom template. The `--template` option specifies the path to the template file, which will be rendered with placeholders before being applied to the target file. This command allows for efficient and automated editing of files directly from the command line.'
        visibility: '[AI] `gh repo edit --visibility` is a command used with the GitHub CLI (gh) to update the visibility settings of a repository. The `--visibility` option allows you to set the repository to be either public or internal. A public repository can be accessed by anyone, while an internal repository is only accessible to members of the organization that owns the repository. This command helps in managing the accessibility and security of your GitHub repositories.'
