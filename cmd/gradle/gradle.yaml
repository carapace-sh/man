# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gradle
description: Gradle Build Tool
flags:
    --build-cache: Enables the Gradle build cache. Gradle will try to reuse outputs from previous builds.
    --configure-on-demand: Configure necessary projects only. Gradle will attempt to reduce configuration time for large multi-project builds. [incubating]
    --console=: Specifies which type of console output to generate. Values are 'plain', 'auto' (default), 'rich' or 'verbose'.
    --continue: Continue task execution after a task failure.
    --daemon: Uses the Gradle Daemon to run the build. Starts the Daemon if not running.
    --export-keys: Exports the public keys used for dependency verification. [incubating]
    --foreground: Starts the Gradle Daemon in the foreground.
    --include-build: Include the specified build in the composite.
    --max-workers=: Configure the number of concurrent workers Gradle is allowed to use.
    --no-build-cache: Disables the Gradle build cache.
    --no-configure-on-demand: Disables the use of configuration on demand. [incubating]
    --no-daemon: Do not use the Gradle daemon to run the build. Useful occasionally if you have configured Gradle to always run with the daemon by default.
    --no-parallel: Disables parallel execution to build projects.
    --no-scan: Disables the creation of a build scan. For more information about build scans, please visit https://gradle.com/build-scans.
    --offline: Execute the build without accessing network resources.
    --parallel: Build projects in parallel. Gradle will attempt to determine the optimal number of executor threads to use.
    --priority=: Specifies the scheduling priority for the Gradle daemon and all processes launched by it. Values are 'normal' (default) or 'low' [incubating]
    --profile: Profile build execution time and generates a report in the <build_dir>/reports/profile directory.
    --project-cache-dir=: Specify the project-specific cache directory. Defaults to .gradle in the root project directory.
    --refresh-dependencies: Refresh the state of dependencies.
    --refresh-keys: Refresh the public keys used for dependency verification. [incubating]
    --rerun-tasks: Ignore previously cached task results.
    --scan: Creates a build scan. Gradle will emit a warning if the build scan plugin has not been applied. (https://gradle.com/build-scans)
    --status: Shows status of running and recently stopped Gradle Daemon(s).
    --stop: Stops the Gradle Daemon if it is running.
    --update-locks: Perform a partial update of the dependency lock, letting passed in module notations change version. [incubating]
    --warning-mode=: Specifies which mode of warnings to generate. Values are 'all', 'fail', 'summary'(default) or 'none'
    --write-locks: Persists dependency resolution for locked configurations, ignoring existing locking information if it exists [incubating]
    -D, --system-prop=: Set system property of the JVM (e.g. -Dmyprop=myvalue).
    -F, --dependency-verification=: Configures the dependency verification mode (strict, lenient or off) [incubating]
    -I, --init-script=: Specify an initialization script.
    -M, --write-verification-metadata: Generates checksums for dependencies used in the project (comma-separated list) [incubating]
    -P, --project-prop=: Set project property for the build script (e.g. -Pmyprop=myvalue).
    -S, --full-stacktrace: Print out the full (very verbose) stacktrace for all exceptions.
    -a, --no-rebuild: Do not rebuild project dependencies.
    -b, --build-file=: Specify the build file.
    -c, --settings-file=: Specify the settings file.
    -d, --debug: Log in debug mode (includes normal stacktrace).
    -g, --gradle-user-home=: Specifies the gradle user home directory.
    -i, --info: Set log level to info.
    -m, --dry-run: Run the builds with all task actions disabled.
    -p, --project-dir=: Specifies the start directory for Gradle. Defaults to current directory.
    -q, --quiet: Log errors only.
    -s, --stacktrace: Print out the stacktrace for all exceptions.
    -t, --continuous: Enables continuous build. Gradle does not exit and will re-execute tasks when task file inputs change.
    -v, --version: Print version info.
    -w, --warn: Set log level to warn.
    -x, --exclude-task=: Specify a task to be excluded from execution.
documentation:
    command: '[AI] "Gradle" is a build automation tool used primarily for Java projects. It manages and automates various tasks such as compiling source code, running tests, creating packages, generating documentation, and managing project dependencies. Gradle uses a Groovy-based Domain Specific Language (DSL) for defining builds, making it flexible and powerful. It is open-source and supports multi-project builds, parallel execution, and intelligent caching among other features.'
    flag:
        build-cache: '[AI] The `--build-cache` option in Gradle is used to enable or disable the build cache. The build cache is a feature that stores compiled Java classes, downloaded dependencies, and other output files to speed up subsequent builds. When you run `gradle build --build-cache`, Gradle will check if it has cached versions of the required inputs before executing tasks. If a cached version exists, it will be used instead of recompiling or downloading again, which can significantly reduce build times for repeated builds. Conversely, using `gradle build --no-build-cache` disables the use of the cache and forces Gradle to perform all tasks from scratch.'
        build-file: '[AI] The `--build-file` option in Gradle is used to specify a custom build script file instead of using the default `build.gradle` file located in the project root directory. This can be useful when working with multi-project builds or when managing several independent projects each having its own `build.gradle` file. The specified file should be located in the project root or in one of its subdirectories, and it must adhere to the Gradle build script syntax.'
        configure-on-demand: '[AI] `--configure-on-demand` is a Gradle build flag that allows Gradle to only download and cache the configurations (i.e., dependencies) for the tasks being executed instead of downloading all configurations upfront during the initialization phase. This can save time, especially when working with large projects or when certain configurations are not needed for every task run. It results in a more incremental build process.'
        console: '[AI] `gradle --console` is a command-line argument for Gradle, a build automation tool. It starts a Gradle build with an interactive console log that displays each task execution in real time, along with its output and any related messages or exceptions. This can be helpful for debugging build issues or for understanding the flow of a complex build.'
        continue: '[AI] The `--continuous` or `--continue` flag in Gradle is used to enable the continuous build mode. In this mode, Gradle will automatically rebuild the project whenever a change is detected in the source files or in the Gradle build script itself. This can be useful for development environments where frequent builds are required as it saves time by avoiding the need to manually trigger each build. The continuous build mode also provides real-time feedback on build failures, allowing developers to quickly address any issues.'
        continuous: '[AI] The `--continuous` flag in Gradle is used to run the build process in continuous mode, also known as "incremental" or "watch" mode. In this mode, Gradle monitors input files for changes and automatically re-runs affected tasks when a change is detected, without requiring a manual build invocation. This can save time and resources by only rebuilding what''s necessary.'
        daemon: '[AI] The `--daemon` flag in Gradle is used to run Gradle as a background service. When you execute `gradle --daemon`, it starts Gradle daemon in the background, which keeps running and reuses JVM instances for subsequent builds. This results in faster build times as the JVM does not need to be started from scratch every time you run a command. If the daemon detects changes in the project, it triggers a new build automatically.'
        debug: '[AI] `gradle --debug` is a command-line argument used with Gradle, a build automation tool. This option enables debug logging, which outputs detailed information about Gradle''s execution flow and internal processes to the console. It can help in diagnosing issues, understanding complex build configurations or identifying performance bottlenecks.'
        dependency-verification: '[AI] The `--dependency-verification` flag in Gradle is used to perform a verification check of all project dependencies. It scans the project''s build configuration, downloads the required dependency metadata from repositories, and compares it with the declared dependencies in the `build.gradle` file. This helps ensure that the actual versions of the dependencies being used match the expected versions, reducing the risk of potential version conflicts or compatibility issues within your project.'
        dry-run: '[AI] The `--dry-run` flag in Gradle is used to execute a build without actually making any changes to the file system. It simulates the build process and reports what would have been done, helping to prevent unintended side effects or errors. This is particularly useful for testing configurations or scripts before applying them to your project.'
        exclude-task: '[AI] The `--exclude-task` flag in Gradle is used to exclude a specific task from being executed during the build process. This can be useful when you want to skip certain tasks due to dependencies on external systems or resources that may not be available at the moment. By providing the name of the task as an argument, `gradle --exclude-task myTask`, Gradle will exclude the specified task from being executed, allowing other tasks in the project to continue executing.'
        export-keys: '[AI] The `gradle --export-keys` command is a task in Gradle, a build automation tool. It generates a file containing all the public keys of the signed artifacts and certificates used in the project''s signing configuration. This file can be imported into various systems, such as Maven or JFrog Artifactory, for managing and verifying the authenticity of the artifacts during distribution.'
        foreground: '[AI] The `--foreground` flag in Gradle is used to run a Gradle build as a foreground process, meaning that it will not detach from the terminal and run in the background. This option is useful when you want to keep an eye on the build progress or when the build might take a long time to complete. When using this flag, Gradle will print its output directly to the console instead of writing it to a file or a log.'
        full-stacktrace: '[AI] The `--full-stacktrace` flag is a command-line option used in Gradle, a build automation tool. When executed with this flag, Gradle will output a detailed stack trace when an error occurs during the build process. A stack trace is a report of the active threads and method calls at the time an exception was thrown, providing useful information for diagnosing and fixing errors.'
        gradle-user-home: '[AI] The `--gradle-user-home` option is a command-line argument for Gradle, a build automation tool. It specifies the directory where Gradle stores its global settings and caches. By default, this is located under the user''s home directory as `~/.gradle`. However, you can use this flag to set a custom location for this directory when running Gradle from the command line. This may be useful in cases where multiple projects on different machines need to share the same configurations or caches.'
        include-build: '[AI] The `--include-build` flag in Gradle is used to include the build script (usually named `build.gradle`) of a sub-project or multi-project build when executing a task from the root project level. This allows dependencies between projects to be resolved correctly and ensures that changes made in the sub-project''s build script are reflected when building the root project.'
        info: '[AI] The `--info` command is a Gradle (a build automation tool) option used to display detailed information about the running Gradle project. It provides a comprehensive output, which includes the Gradle version being used, the JVM arguments and system properties, the configuration of the project''s daemon, and other relevant settings and information. This command can help diagnose potential issues and provide a better understanding of how Gradle is configured and running for a specific project.'
        init-script: '[AI] The `--init-script` flag is a command-line option for Gradle, a build automation tool. It allows you to specify a script file containing Groovy code to be run during the initialization of a new Gradle project. This can be useful for setting up custom tasks, configuring plugins, and defining project structures according to specific requirements or best practices. The script is executed once during the creation of the project, allowing for efficient configuration and standardization across multiple projects.'
        max-workers: '[AI] The `--max-workers` option in Gradle is used to limit the number of parallel build jobs. When you run Gradle with this option, it specifies the maximum number of jobs that can be executed concurrently. This can help manage resources and prevent overloading your system if you have limited CPU or memory. By default, Gradle determines the number of available processors on your machine and uses that as the number of parallel jobs. Setting `--max-workers` to a specific value allows you to override this behavior and limit the number of parallel jobs for your build.'
        no-build-cache: |-
            [AI] The `--no-build-cache` flag is a command-line option for Gradle, a build automation tool. This flag disables the use of the Gradle build cache. The build cache is a feature that stores compiled Groovy and Java classes, as well as downloaded dependencies, to speed up the build process by reusing previously computed results. By passing `--no-build-cache`, you instruct Gradle not to use the build cache during the build process, which can be useful when:

            1. You want to ensure that every build starts from scratch (e.g., for debugging or testing).
            2. You experience issues with the build cache (corrupted or outdated data).
            3. Your project dependencies have changed since the last build.

            Keep in mind, disabling the build cache may slow down the build process as Gradle will need to rebuild and redownload all the required dependencies each time you run a build.
        no-configure-on-demand: |-
            [AI] The `--no-configure-on-demand` flag in Gradle is used to prevent on-demand configuration of projects or sub-projects. This means that all projects or sub-projects specified in the build script will be configured upfront when starting a Gradle build, instead of configuring each project only when it's needed during the execution of the build.

            Using this flag can lead to faster build initialization time, especially for large multi-project builds with many interdependent projects. However, it may increase memory usage and disk I/O since all projects are configured at once.

            It's important to note that this flag should be used with caution, as it might not be suitable for all use cases. For instance, if your projects have significant differences in their dependencies or configurations, you might want to keep the on-demand configuration behavior to minimize unnecessary work and potential issues.
        no-daemon: '[AI] The `--no-daemon` flag in Gradle is used to prevent Gradle from using its daemon process. A daemon process is a background process that stays running even after you finish your build task, ready to serve subsequent builds more quickly. By passing `--no-daemon`, Gradle will not use the daemon process and instead start a new JVM instance for each build task. This can be useful when debugging or dealing with specific issues where you want to ensure that a clean JVM environment is used for each build.'
        no-parallel: '[AI] The `--no-parallel` flag in Gradle is used to disable parallel execution of tasks. Gradle is a build automation tool that can execute multiple tasks concurrently to improve build time efficiency. However, this feature may not be desirable in certain situations, such as when dealing with resource-intensive tasks or when using underpowered machines. The `--no-parallel` flag disables parallel execution and forces Gradle to run one task at a time, ensuring that system resources are fully utilized by each task sequentially.'
        no-rebuild: '[AI] The `--no-rebuild` flag is a command-line option for Gradle, a popular build automation tool. This option is used to prevent Gradle from re-executing tasks that have already been executed and whose output files are up-to-date. By using this flag, you can force Gradle to skip the re-building process for specific tasks or the entire project, which can save time if you want to check the build configuration or investigate issues without going through the full build process.'
        no-scan: '[AI] The `--no-scan` flag in Gradle is used to disable the built-in dependency scanning feature of Gradle projects. When this option is passed during execution, Gradle will not perform any automatic resolution or downloading of dependencies. This can be useful when working with offline repositories, custom Ivy or Maven repositories, or when using a third-party dependency management tool instead of Gradle''s built-in functionality.'
        offline: '[AI] The `--offline` flag in Gradle is used to disable internet access during the build process. This means that Gradle will only use locally cached dependencies instead of downloading new ones from remote repositories. This can be useful when building a project offline or when having unstable network connections, as it ensures consistency and reproducibility of builds. It can also significantly speed up the build time if the project depends on large numbers of dependencies.'
        parallel: |-
            [AI] The `--parallel` flag in Gradle is used to enable parallel execution of tasks. When this option is passed during a Gradle build, multiple tasks can be executed simultaneously, which can significantly reduce the overall build time, especially for projects with numerous interdependent tasks.

            Gradle determines the number of parallel tasks based on the available CPU cores and other factors, such as memory usage. The `--max-parallel-forks` option can be used to override the default value and set a specific limit on the number of concurrent tasks. Using too many parallel tasks could lead to increased resource contention and potentially longer build times.
        priority: |-
            [AI] The `--priority` option is a command-line argument for Gradle, a build automation tool. It instructs Gradle to prioritize the execution of tasks based on their priority level.

            By default, Gradle sorts tasks by their dependency order and executes them accordingly. However, with `--priority`, you can explicitly assign priorities to tasks using the `priority` property in your build scripts (e.g., Groovy or Kotlin DSL). Tasks with higher priority levels will be executed before those with lower ones, allowing for more control over task execution order and potentially speeding up your build process if certain high-priority tasks have many dependencies.

            For example: `gradle clean --priority myHighPriorityTask`. This would execute the task 'myHighPriorityTask' before any other tasks in the build.
        profile: '[AI] The `--profile` option in Gradle is used to apply a custom configuration called a Gradle profile. Profiles contain settings that can be used to configure various aspects of a Gradle build, such as project dependencies, JVM arguments, or custom tasks. By using the `--profile` option, you can selectively apply these configurations to your build, making it easier to manage and customize complex projects.'
        project-cache-dir: '[AI] The `--project-cache-dir` flag in Gradle is used to specify a custom directory for storing the project metadata and third-party dependencies that are cached during build processes. By default, Gradle manages this cache automatically, but specifying a custom cache directory can be helpful for managing large projects or when working with limited disk space. The cache allows for faster builds by reducing the need to re-download dependencies each time a project is built.'
        project-dir: '[AI] The `--project-dir` option in Gradle is used to specify the root directory of a multi-project build. When you run Gradle with this option, it will treat the given directory as the top-level project and execute tasks from there, taking into account any sub-projects defined within that directory. This can be useful when working on large Gradle projects with multiple sub-projects to keep the build process focused on a specific project context.'
        project-prop: |-
            [AI] `--project-prop` is a command-line option for Gradle, a build automation tool. It's used to set or override properties defined in the project's `build.gradle` file at the command line level. The syntax is:

            ```bash
            gradle [task] --project-prop PROPERTYNAME=VALUE
            ```

            For example, if you have a property named `myCustomProperty` in your `build.gradle`, and you want to set it to `'hello world'` when running the `build` task, you can do:

            ```bash
            gradle build --project-prop myCustomProperty=hello world
            ```

            This allows for more flexible customization of your Gradle builds without modifying the project configuration directly.
        quiet: '[AI] The `--quiet` flag for Gradle is used to suppress most of the output during a build process. This means that only errors and important messages will be displayed, making the console cleaner and easier to read when dealing with large or complex projects. It can help to reduce noise and focus on resolving issues.'
        refresh-dependencies: '[AI] `gradle --refresh-dependencies` is a command used in Gradle, a build automation tool. This command is used to update the local cache of project dependencies to their latest versions. It fetches and downloads the required artifacts from the configured repositories, such as Maven Central or JCenter, ensuring that your project uses the most recent dependencies. By executing `gradle --refresh-dependencies`, you can keep your project up-to-date with the latest library versions, reducing potential compatibility issues and security vulnerabilities.'
        refresh-keys: '[AI] The `--refresh-keys` flag in Gradle is used to update the signing keys and certificates in theGradle project''s configuration, specifically in the `jvmSigningConfigs` and `androidSigningConfigs`. It fetches the latest certificates from their respective repositories (Maven Central for JVM configurations and Google Play for Android configurations) and stores them in the Gradle project''s keystore files. This is essential when you need to use updated or new certificates, for example, when renewing a certificate or when using a different key for signing your builds.'
        rerun-tasks: '[AI] The `--rerun-tasks` flag in Gradle is used to re-execute only the tasks that have failed previously during a build. When you run Gradle with this option, it will first attempt to build all the tasks as usual. If any task fails, Gradle will then re-run only those failed tasks, saving time and resources by not repeating successfully built tasks. This can be particularly useful when working on large or complex projects where some tasks may take a long time to run.'
        scan: '[AI] `gradle --scan` is a command used in Gradle, a popular open-source build automation tool. This command initiates a dependency scanning process using the Gradle Dependency Scanning service, which is a part of the Sonatype Nexus platform. The goal is to identify direct and transitive dependencies within your project''s build configuration files (like `build.gradle`), checking them against known vulnerabilities in the Sonatype repository. It helps developers keep their projects up-to-date with security patches and mitigate potential risks related to outdated or vulnerable dependencies.'
        settings-file: |-
            [AI] The `--settings-file` option in Gradle is used to specify a custom settings file for your build project. A Gradle settings file (usually named `gradle.properties` or `settings.gradle`) contains configuration properties and default values that can be shared across multiple projects, such as repository URLs, version numbers, or authentication tokens.

            By using the `--settings-file` option when running a command in Gradle, you can override the default settings file used by your project and instead use an external one to apply specific configurations for that particular build. This can be useful when working with multiple projects that have similar configuration needs but require slight differences.
        stacktrace: '[AI] `gradle --stacktrace` is a command used in Gradle, a popular build automation tool. When executed with this option, Gradle will produce a detailed stack trace when an error occurs during the build process. This stack trace provides crucial information for diagnosing issues by displaying the sequence of method invocations leading up to the failure, along with the associated line numbers and class names. It helps developers quickly identify where things went wrong and take appropriate corrective actions.'
        status: '[AI] The `--status` command is a Gradle task that provides an overview of the project''s build configuration and current build state. It prints out information about the projects in the build file, including their dependencies and whether they are up-to-date or have changes that require rebuilding. This can help developers quickly assess the build environment and identify any issues that need attention before running a full build.'
        stop: '[AI] The Gradle command `--stop` is used to gracefully stop a running Gradle build process. It sends a SIGTERM signal to the Gradle daemon process, allowing it to finish any current tasks before terminating completely. If the process does not shut down within a specified time, Gradle will forcibly terminate it using SIGKILL. This can help prevent memory leaks or other issues that may occur during an abrupt stop.'
        system-prop: '[AI] `--system-prop` is a command-line argument for Gradle, a build automation tool. It sets a system property that can be accessed in Gradle scripts or Java code running inside the Gradle process with the syntax `System.getProperty(''NAME'')`. This flag allows users to define global properties that are available across all projects built with that Gradle installation without having to set them individually in each project''s configuration. The format is: `gradle --system-prop NAME=VALUE [tasks]`, where ''NAME'' is the name of the property, ''VALUE'' is its value, and ''[tasks]'' (optional) specifies a task to be executed after setting the property.'
        update-locks: '[AI] The `--update-locks` flag in Gradle is used to update the project''s lock files (specifically, the `gradle-wrapper.lock` file for the Gradle wrapper and the `.gradle/caches/modules-2/` directory for local dependencies). This command is typically run when you want to ensure that your project uses the latest versions of its dependencies, or if you encounter an issue where Gradle cannot find a dependency due to a version mismatch. By running `--update-locks`, Gradle will download and save the latest versions of the specified dependencies, allowing you to build and run your project with the most recent libraries and tools.'
        version: '[AI] `gradle --version` is a command used in Gradle, a popular build automation tool. This command is executed in the terminal or command prompt to display the version number of Gradle installed on your system. It helps users to check which version of Gradle they are using and if there''s an update available.'
        warn: '[AI] `gradle --warning` is a command-line option used with Gradle, a build automation tool. This option increases the verbosity of the Gradle output to include warnings as well as errors. Warnings are messages that indicate potential issues or inefficiencies in your Gradle project configuration. By enabling this flag, you can identify and address these issues early on in the development process to improve your build''s robustness and performance.'
        warning-mode: |-
            [AI] The `--warning-mode` flag in Gradle is used to configure the level of reporting for compile-time warnings. It accepts two values: `all` or `default`.

            * With `--warning-mode all`, Gradle will report all compile-time warnings, including those that are deprecated but still functional and those that may be considered as "potentially harmless." This is the more verbose option, providing a comprehensive list of potential issues in your project.
            * The default value for `--warning-mode` is `default`, which means Gradle will report only warnings that are considered to be important or potentially harmful, such as deprecated API usage and unchecked exceptions.

            Using this flag helps developers identify and address potential issues in their projects, improving code quality and reducing technical debt over time.
        write-locks: '[AI] The `--write-locks` flag in Gradle is used to enable or disable the write locking feature for multiple build projects that share a common Gradle cache and settings. When this option is enabled, each project will acquire a unique write lock when modifying its own dependencies or project configuration, preventing conflicts with other projects writing at the same time. This helps ensure consistency between projects when working in parallel on a shared Gradle installation.'
        write-verification-metadata: '[AI] The `--write-verification-metadata` flag in Gradle is used to generate and write metadata files that verify the authenticity and integrity of downloaded dependencies. This helps ensure that the dependencies being used in a project are not tampered with or replaced by malicious versions. These metadata files contain digital signatures or checksums, allowing Gradle to verify the dependencies during build time before they are executed. By using this flag, developers can enhance their projects'' security and trust the provenance of their dependencies.'
