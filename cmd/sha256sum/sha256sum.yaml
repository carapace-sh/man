# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: sha256sum
description: compute and check SHA256 message digest
flags:
    --help: display this help and exit
    --ignore-missing: don't fail or report status for missing files
    --quiet: don't print OK for each successfully verified file
    --status: don't output anything, status code shows success
    --strict: exit non-zero for improperly formatted checksum lines
    --tag: create a BSD-style checksum
    --version: output version information and exit
    -b, --binary: read in binary mode
    -c, --check: read SHA256 sums from the FILEs and check them
    -t, --text: read in text mode (default)
    -w, --warn: warn about improperly formatted checksum lines
    -z, --zero: end each output line with NUL, not newline,
documentation:
    command: '[AI] `sha256sum` is a command-line utility used to compute the SHA-256 hash of one or more files. SHA-256 is a type of cryptographic hash function that takes an input (a file in this case) and produces a fixed-size output, called a hash value or digest, which serves as a unique fingerprint representing the input data. By comparing the computed hash values, you can verify the integrity and authenticity of the files.'
    flag:
        binary: '[AI] The `sha256sum --binary` command is used to generate a raw, binary representation of a SHA-256 checksum for a file. When you run this command followed by the file path as an argument, it will output a 64-byte hexadecimal digest that represents the unique hash value of the file''s content. The `--binary` option is used to specify that the output should be in raw binary format instead of the default hexadecimal representation.'
        check: '[AI] `sha256sum --check` is a command used in Unix-based systems to verify the integrity of files by comparing their computed SHA-256 hash values against given hash values provided in a text file. The text file contains one hash value per line, prefixed by the filename and a space character. When running the `sha256sum --check` command with this file as an argument, it will compare the hash values and report any mismatches or confirm that all files have the correct hashes.'
        help: |-
            [AI] `sha256sum` is a command-line utility used to compute the SHA-256 hash of one or more files. Its help option, `--help`, displays detailed usage information. Here's a brief summary:

            ```plaintext
            Usage: sha256sum [OPTION]... FILE...
            Compute the SHA-256 dereference-following checksum for each FILE

            Options:
              -a, --append             append to existing file instead of overwriting
                                       (default is to overwrite)
              -c, --check              check the named files against the given input
                  --context=FILE        write context data to FILE before computing hash
                  --no-quiet             do not suppress normal output
                  --numbers              print numerical hash values instead of symbols
              -t, --text               print raw hexadecimal hashes in text format
              -h, --help               display this help and exit
              --version                output version information and exit
            ```

            The main options include:

            - `--append`: Appends the new hash to an existing file instead of overwriting it.
            - `--check`: Compares the files' contents against the given input (hashes).
            - `--context=FILE`: Writes context data (the data before the hash) to FILE before computing the hash.
            - `--no-quiet`: Suppresses normal output.
            - `--numbers`: Prints numerical hash values instead of symbols.
            - `--text`: Prints raw hexadecimal hashes in text format.
            - `--help` and `--version`: Display help information or version details, respectively.
        ignore-missing: '[AI] The `sha256sum` command in computing is used to compute and verify digital checksums (specifically, SHA-256) of files or directories. The option `--ignore-missing` tells the command to skip computation of the hash for any missing files mentioned in a list (provided via standard input or a file), and only output the hashes for existing files. This can be useful when dealing with large sets of files where some may not exist in the current directory, but the focus is still on checking the hashes for those that do exist.'
        quiet: '[AI] `sha256sum --quiet` is a command in Unix-based systems used to generate the SHA-256 checksum of a file and print only the checksum value without any additional output or message. The `--quiet` option suppresses any informational messages during execution, providing only the calculated hash value on the terminal.'
        status: '[AI] The `sha256sum --status` command is a utility in Unix-like operating systems for computing and checking the SHA-256 checksums of files. This command displays each file''s name followed by its corresponding checksum, making it easier to compare or verify multiple files. The output includes the file size and the checksum in hexadecimal format. If the checksum matches an expected value, it indicates that the file has not been altered since the checksum was taken.'
        strict: '[AI] `sha256sum --strict` is a command-line utility in Unix-like operating systems used for computing and checking the SHA-256 cryptographic hash of files. The `--strict` option makes the verification fail if the length or the checksum does not exactly match the expected one, without any warning. In summary, it ensures a strict validation of file integrity by rejecting any discrepancy between the computed and expected hash values.'
        tag: |-
            [AI] The `sha256sum --tag` command is a utility in Unix-based systems used to compute the SHA-256 hash of one or more files and display their corresponding file names and hashes.

            The `--tag` option causes sha256sum to output a table format where the filename is associated with its respective hash, making it easier to match hashes with their corresponding files when dealing with large numbers of files or automating checks in scripts.
        text: |-
            [AI] The `sha256sum --text` command is a utility in Unix-based systems used to compute and display the base-64 encoded SHA-256 hash of a file. The `--text` option is used to print only the hexadecimal digest instead of the default output that includes the filename. For instance, if you have a file named `example.txt`, you can generate its SHA-256 hash as follows:

            ```sh
            $ sha256sum --text example.txt
            (standard output:  hexadecimal digest of the file's content)
            ```

            This command will display the base-64 encoded 256-bit hash value, allowing you to compare the result against a trusted source to ensure data integrity and authenticity.
        version: '[AI] The command `sha256sum --version` is used to display the version information of the GNU `sha256sum` utility installed in your system. This utility is used to compute and check the SHA-256 message digest of files. When you run this command, it will output the version number and other relevant information such as compilation date and operating system.'
        warn: '[AI] The `sha256sum --warn` command is a utility in Unix-like operating systems, specifically used for computing the SHA-256 hash sum of files and comparing them with given checksums to ensure data integrity. The `--warn` option is a cautionary flag that issues a warning message when the computed hash does not match the expected one but still goes ahead and prints both the computed and expected hashes, allowing further manual inspection or decision-making.'
        zero: '[AI] The `sha256sum --zero` command is a utility used in Unix-based systems to compute the SHA-256 hash of a file and output it as a text string, prepended with "0x" for easier hexadecimal interpretation. The "--zero" option adds a single zero byte at the beginning of the output before the hash. This can be useful when comparing hashes of files, as some comparison tools expect the hash to start with a single zero byte.'
