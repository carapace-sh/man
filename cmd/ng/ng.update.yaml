# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update
description: Updates your application and its dependencies
flags:
    --allow-dirty: Whether to allow updating when the repository contains modified or untracked files.
    --force: Ignore peer dependency version mismatches.
    --from=: Version from which to migrate from.
    --migrate-only: Only perform a migration, do not update the installed version.
    --next: Use the prerelease version, including beta and RCs.
    --packages=: The names of package(s) to update.
    --to=: Version up to which to apply migrations.
    --verbose: Display additional details about internal operations during execution.
    -C, --create-commits: Create source control commits for updates and migrations.
documentation:
    command: |-
        [AI] `ng update` is a command used in Angular projects with the Angular CLI. It automatically performs the following tasks:

        1. Updates all dependencies listed in the `package.json` file to their latest versions.
        2. Merges the changes from those updated packages into your project's source files and configs.
        3. Updates the Angular CLI itself, if necessary.

        This command is often used when you want to keep your Angular project up-to-date with the latest library releases or new features. It can help avoid manual update processes and potential conflicts.
    flag:
        allow-dirty: '[AI] The `ng update --allow-dirty` command is used in Angular projects when you want to apply updates or new features using the Angular CLI without waiting for your current work to be saved or committed to version control. The `--allow-dirty` flag permits the CLI to make changes to your files even if they have unsaved modifications, potentially overwriting them. This can be risky and should be used with caution as it may cause data loss or conflicts. It''s recommended to use this command only when you''re confident that your unsaved changes are not critical.'
        create-commits: '[AI] The `ng update --create-commits` command is used in Angular projects with version control systems like Git. It automates the process of generating commit messages and creating commits for updates performed using Angular CLI commands such as `ng add`, `ng upgrade`, or other similar commands. This can save time and ensure consistent commit messages, helping to maintain a clean and organized commit history in your Git repository.'
        force: '[AI] `ng update --force` is a command used with Angular CLI to apply updates to installed packages in an Angular project, bypassing the safe-checks that would prevent potentially harmful updates. This command is often used when encountering version compatibility issues or when manually managing dependencies outside of Angular''s suggested version upgrades. Using `--force` can lead to potential risks, such as unintended breaking changes, and is generally recommended for experienced developers who understand the implications.'
        from: '[AI] `ng update --from` is a command used with Angular CLI (Angular Command Line Interface) to perform automatic updates of Angular libraries and dependencies in your project. The `--from` option specifies the source from which to update, which can be a specific version or a branch or tag in a repository. For example, `ng update @angular/common@11 --from=tags/rc-02` would update `@angular/common` to the RC-02 version. The main purpose is to keep your project up-to-date with the latest Angular library versions and their dependencies, making it easier for developers to collaborate and maintain the codebase.'
        migrate-only: '[AI] `ng update --migrate-only` is a command used in Angular projects with the Angular CLI. It triggers an automatic application of available Angular migrators, which are tools to help upgrade your project to the latest Angular version without changing your codebase manually. This command performs the migration process only and does not apply any other changes or updates to your project, making it a safe way to keep your project up-to-date with the latest Angular features while minimizing potential risks.'
        next: '[AI] `ng update --next` is a command used in Angular projects with the Angular CLI (Command Line Interface). It triggers an automatic update of dependencies listed in the package.json file to their next major versions, as well as applying any necessary schema updates and migrating the application code accordingly. This streamlines the process of keeping your Angular project up-to-date with the latest features and bug fixes from Angular and its related packages.'
        packages: '[AI] `ng update` is a command used in Angular projects with the Angular CLI. It automates several tasks related to keeping your Angular project up-to-date, such as updating dependencies and their related packages. The `--packages` option specifies a list of external packages that should be updated alongside your project''s dependencies. This can help ensure that all packages used in your project are on the same version.'
        to: '[AI] The `ng update --to` command is used in Angular to update installed packages within your Angular project to their latest versions as defined by the Angular CLI''s registered package versions. This includes both Angular itself and any other dependencies listed in the `package.json` file. It is important to note that this command does not update the Angular CLI itself or the operating system. It simply manages the Angular project''s dependency tree, making it easier to keep your project up-to-date with the latest library features and bug fixes.'
        verbose: |-
            [AI] `ng update --verbose` is a command used in Angular CLI (Command Line Interface) to update dependencies and apply changes to your Angular project, with more detailed output.

            When you run `ng update` without any flags, it performs automatic updates of the Angular core packages and other third-party dependencies based on the version declared in your `package.json`. With the `--verbose` flag, it provides a more extensive output of the update process, including detailed messages about which packages are being updated, their new versions, and any potential issues or conflicts that might arise during the update. This can help you troubleshoot and better understand the changes happening within your project.
