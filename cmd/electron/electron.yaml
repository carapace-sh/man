# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: electron
description: Build cross platform desktop apps with JavaScript, HTML, and CSS
flags:
    -a, --abi: Print the Node ABI version.
    -i, --interactive: Open a REPL to the main process.
    -r, --require: Module to preload (option can be repeated).
    -v, --version: Print the version.
documentation:
    command: '[AI] "Electron" is not a command per se, but rather an open-source framework for building cross-platform desktop applications using web technologies such as JavaScript, HTML, and CSS. It provides an Node.js based runtime to render and run web content in native applications with full access to the operating system''s APIs.'
    flag:
        abi: '[AI] The `--abi` option in Electron''s command-line interface (CLI) is used to specify which Application Binary Interface (ABI) to use when building an Electron application. The ABI determines how the operating system and the application interact with each other at a low level, particularly with respect to function calls between the OS and the application. By specifying `--abi`, you can choose between different ABIs supported by Electron such as `unpacked`, `asar`, or `ffi`. Each ABI has its own advantages and use cases, so choosing the correct one depends on your specific development requirements. For instance, the `unpacked` ABI is suitable for applications that have a large number of external dependencies and prefer easier development, while `asar` offers better security and deployment flexibility. The `ffi` (Foreign Function Interface) ABI, on the other hand, enables calling native functions directly from JavaScript, but comes with additional complexity.'
        interactive: '[AI] The `--interactive` flag in Node.js''s `electron` command starts an interactive REPL (Read-Evaluate-Print Loop) session for Electron, allowing users to run JavaScript code directly within the Electron environment and interactively explore its APIs and features. This is particularly useful for debugging, experimenting with new features, or quickly trying out new ideas in Electron applications.'
        require: '[AI] `electron --require` is a command-line argument used with Electron, an open-source framework for building cross-platform desktop applications using web technologies. This argument allows you to specify a module that will be required when the main process starts up. The syntax is `electron . --require=<module>`, where `.<>` represents the current directory and `<module>` is the name of the Node.js module file (without extension). This can be helpful for importing global modules or custom modules into your Electron application, which otherwise wouldn''t have access to them by default.'
        version: '[AI] `electron --version` is a command used in Node.js to check for the installed version of Electron, which is a popular framework for building cross-platform desktop applications using web technologies such as JavaScript, HTML, and CSS. By running this command in your terminal or command prompt, you''ll see the version number of the currently installed Electron package displayed, helping you to verify that you have the required version for your project or to check for available updates.'
