# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: build
description: Compiles an Angular app into an output directory
flags:
    --allowed-common-js-dependencies=: A list of CommonJS packages that are allowed to be used without a build time warning.
    --aot: Build using Ahead of Time compilation.
    --base-href=: Base url for the application being built.
    --build-optimizer: Enables '@angular-devkit/build-optimizer' optimizations when using the 'aot' option.
    --common-chunk: Generate a seperate bundle containing code used across multiple bundles.
    --cross-origin=: Define the crossorigin attribute setting of elements that provide CORS support.
    --delete-output-path: Delete the output path before building.
    --extract-licenses: Extract all licenses in a separate file.
    --i18n-missing-translation=: How to handle missing translations for i18n.
    --index=: Configures the generation of the application's HTML index.
    --inline-style-language=: The stylesheet language to use for the application's inline component styles.
    --localize: Translate the bundles in one or more locales.
    --main: The full path for the main entry point to the app, relative to the current workspace.
    --named-chunks: Use file name for lazy loaded chunks.
    --ngsw-config-path=: Path to ngsw-config.json.
    --optimization: Enables optimization of the build output.
    --output-hashing=: Define the output filename cache-busting hashing mode.
    --output-path=: The full path for the new output directory, relative to the current workspace.
    --poll=: Enable and define the file watching poll time period in milliseconds.
    --polyfills=: The full path for the polyfills file, relative to the current workspace.
    --preserve-symlinks: Do not use the real path when resolving modules.
    --progress: Log progress to the console while building.
    --resources-output-path=: The path where style resources will be placed, relative to outputPath.
    --service-worker: Generates a service worker config for production builds.
    --source-map: Output source maps for scripts and styles.
    --stats-json: Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.
    --subresource-integrity: Enables the use of subresource integrity validation.
    --ts-config: The full path for the TypeScript configuration file, relative to the current workspace.
    --vendor-chunk: Generate a seperate bundle containing only vendor libraries.
    --verbose: Adds more details to output logging.
    --watch: Run build when files change.
    --web-worker-ts-config=: TypeScript configuration for Web Worker modules.
    -c, --configuration=: One or more named builder configurations
documentation:
    command: '[AI] `ng build` is a command provided by Angular CLI for compiling and building Angular applications for production. It performs tree shaking, code splitting, source maps generation, and other optimization techniques to reduce bundle size, improve performance, and prepare the app for deployment. The output files are usually placed in the `dist/` directory.'
    flag:
        allowed-common-js-dependencies: '[AI] `ng build --allowed-common-js-dependencies` is a command used in Angular projects to compile typescript code into production-ready JavaScript files with the Angular CLI. The `--allowed-common-js-dependencies` flag allows the use of npm packages that are not listed in the `package.json` file but are required as CommonJS dependencies by third-party libraries. This flag enables the project to continue building even when there are such dependencies, which might otherwise cause errors. It''s a workaround for projects using libraries with non-standard build configurations.'
        aot: '[AI] `ng build --aot` is a command used in Angular, a popular JavaScript framework for building web applications. The option `--aot` stands for "Ahead-of-Time" compilation. This means that during the build process, Angular''s Ivy compiler will transform the application''s TypeScript code into optimized and executable JavaScript files, ahead of time, before they are run in a browser. By using this flag, the application starts faster since the JavaScript is already prepared, and the resulting bundle size might be smaller due to the removal of the TypeScript compiler at runtime.'
        base-href: '[AI] `ng build --base-href` is a command used in Angular JavaScript framework for generating optimized production builds of an Angular application. The `--base-href` option sets the base href for the generated static files, typically used when deploying to a subdirectory or a CDN. When using this option, the output files will be adjusted accordingly and relative paths in the application''s HTML files will be updated as well. This helps ensure that the application functions correctly with its new location on the web server.'
        build-optimizer: '[AI] `ng build` is a command used in Angular to compile and bundle Angular applications for production deployment. The option `--build-optimizer` is an additional flag that can be passed with this command. It enables the build optimizer during the compilation process, which performs tree shaking and dead code elimination resulting in smaller bundles and improved performance. This flag is enabled by default when using Angular CLI version 11 or higher for production builds.'
        common-chunk: '[AI] The `ng build --common-chunk` command is used in Angular projects to optimize bundle size during the build process. This option enables Angular''s common chunking feature, which bundles multiple chunks into a single file, reducing the number of files that need to be fetched and parsed by the browser, leading to faster page load times. Common chunks typically include frequently used modules or functions across different parts of your application.'
        configuration: '[AI] `ng build` is a command used in Angular projects to compile and bundle the application for production deployment. The `--configuration` option allows you to specify a custom configuration file for this process. By default, Angular uses the `production` configuration, but you can create and use other configurations (e.g., `development`) tailored to your project''s requirements. This flag enables fine-grained control over the build process by applying the specified configuration settings.'
        cross-origin: '[AI] The `ng build` command is used in Angular to compile and build Angular applications for production or deployment. When you add the option `--cross-origin`, it enables CORS (Cross-Origin Resource Sharing) headers during the build process. This allows your Angular application, once deployed, to make requests to a different domain than its own. The CORS headers configured during the build specify which origins and methods are allowed for making requests, enhancing security and enabling interoperability between different domains.'
        delete-output-path: '[AI] The `ng build --delete-output-path` command is used in Angular projects with the Angular CLI. It builds the application and deletes the existing output paths (by default, the `dist` folder) before creating new ones. This can be useful when you want to force a clean build or if there are issues with previous builds preventing a successful new one.'
        extract-licenses: '[AI] `ng build --extract-licenses` is a command used in Angular projects built with the Angular CLI. It''s primarily used for generating a separate file containing all third-party library licenses during the build process. This can be helpful for open source projects, as distributing the licenses separately allows other developers to easily access and comply with the licensing terms of each included library. The command runs alongside the regular build process (`ng build`) but generates an additional `licenses.txt` file in the output directory.'
        i18n-missing-translation: '[AI] The `ng build --i18n-missing-translation` command is used in Angular projects when building for production with internationalization (i18n) support. This command specifically checks the i18n files for any missing translations. If a translation is missing for a given key in any of the supported languages, an error will be thrown during the build process. The purpose of this command is to ensure that all required translations are present before deploying the application to prevent runtime errors due to missing translations.'
        index: '[AI] The `ng build --index` command is used with Angular CLI to generate optimized production bundles for an Angular application. The `--index` flag specifically tells Angular CI to create a single bundle containing the main components and the initial index file (index.html) required to bootstrap the application. This option can be useful when deploying applications on platforms like Firebase Hosting, which require only one file for serving.'
        inline-style-language: '[AI] The `ng build --inline-style-language` command is used in Angular projects with the Angular CLI. It instructs the Angular compiler to inline all CSS styles directly into the corresponding component HTML files instead of generating separate CSS files during the build process. By doing this, the number of files produced by the build can be reduced and there might be a slight improvement in load times due to fewer requests being made to fetch these files from the server. This flag is particularly useful for development environments or single-page applications where a minimal number of files is desired.'
        localize: '[AI] `ng build --localize` is a command used in Angular projects to build the application with localization support. It compiles all the templates and generates messages in the specified locales using the `messages.json` files for each locale in the `locales` folder. The generated output includes separate bundles for each locale, which can be loaded dynamically based on user preferences or at build time. This command prepares your Angular application for internationalization without actually translating the content itself.'
        main: '[AI] `ng build --main` is a command used in Angular projects with the Angular CLI (Command Line Interface). It triggers the Angular compilation process for producing optimized production bundles using the specified main file as the entry point instead of the default `main.ts` file. The flag `--main` followed by the path to the desired entry file allows developers to build an application starting from a specific component or module other than the standard root entry. This command generates output in the `dist/` directory, ready for deployment.'
        named-chunks: '[AI] The `ng build --named-chunks` command is used in Angular projects to generate bundles for production deployment with named output files for each chunk (bundle of specific JavaScript code). It optimizes and bundles the application using Webpack, and assigns unique names to each bundle file based on their content. This helps in effective caching, as well as easier debugging and understanding of which files are being loaded when, making it useful for large-scale Angular applications.'
        ngsw-config-path: '[AI] The `ng build --ngsw-config-progressive-web-app` command is used in Angular to generate a production build of an Angular application along with an ngsw-configuration.json file. This file is required for Angular Service Workers (ASW) to function properly, enabling features like caching, offline access, and other performance improvements. The `--ngsw-config-path` option is used to specify the path where the generated ngsw-configuration.json file will be saved, relative to the output directory of the build command. For example, if you want to save it in a folder named ''sw'' inside the ''dist'' folder, you can use `--ngsw-config-path sw/ngsw-configuration.json`.'
        optimization: '[AI] `ng build` is a command used in Angular to compile and bundle an Angular application for production deployment. The `--optimization` flag is an option that can be passed to this command to enable several optimizations, including tree shaking, dead code elimination, and source map removal. These optimizations help reduce the size of the compiled JavaScript, CSS, and HTML files, resulting in faster page loads and improved performance for end-users.'
        output-hashing: '[AI] `ng build --output-hasing` is a command used in Angular applications built with the Angular CLI (Command Line Interface). This command generates production-ready bundles of your Angular application and enables deterministic output file names by appending a hash to each file name. The hash value is derived from the input files'' contents, ensuring that identical input files produce identical output files, which can be useful for efficient caching and content delivery in production environments.'
        output-path: '[AI] `ng build --output-path` is a command used in Angular to build an Angular application for production deployment. The `--output-path` option specifies the folder where the output files (compiled and bundled JavaScript, CSS, and HTML) will be saved after the build process. This allows you to customize the location of your deployable files for easy integration with other systems or hosting services.'
        poll: |-
            [AI] `ng build --poll` is a command used in Angular projects with the Angular CLI (Command Line Interface). It triggers the Angular compilation process with the `build` command, but includes an additional flag `--poll`.

            The `--poll` flag activates live reloading during development, allowing changes to reflect instantly without having to manually trigger a rebuild. Once a change is detected, the affected files are recompiled and reloaded in the browser automatically. It simplifies the workflow by saving time and reducing repetitive tasks.
        polyfills: '[AI] `ng build --polyfills` is a command used in Angular projects built with the Angular CLI. It triggers the Angular Compilation process with an additional flag, `--polyfills`. This flag instructs the Angular CLI to include polyfills, which are sets of browser-specific code fixes and features that allow Angular applications to run consistently across various browsers. The output is a bundle containing the polyfill scripts along with the production build, enabling wider browser compatibility for the Angular application.'
        preserve-symlinks: '[AI] `ng build --preserve-symlinks` is a command used in Angular projects to perform a production build while preserving existing symlinked files and directories in the output directory. This can be useful when working with third-party libraries or custom assets that use symlinks for efficient file management within the project structure. The build process itself still compiles and optimizes the Angular application code, but it does not modify or overwrite any symlinked files or directories inside the output directory.'
        progress: '[AI] `ng build --progress` is a command used in Angular, a popular JavaScript framework for building web applications. This command initiates the process of compiling and bundling an Angular project using the Angular CLI (Command Line Interface). The `--progress` option enables the display of a real-time progress bar while this build process is running. This helps provide feedback to developers about the ongoing tasks and their completion status.'
        resources-output-path: '[AI] `ng build --resources-output-path` is a command used in Angular to build and output all the referenced resources (e.g., images, fonts, or SCSS files) into a specific folder during the build process. By default, these resources are placed in the `assets` folder but you can use this option to specify a custom path for the output. This can be useful when working with complex projects that require a specific organization of the final build.'
        service-worker: '[AI] The `ng build --service-worker` command is used with Angular CLI to generate a production build of an Angular application, including a service worker. A service worker is a type of JavaScript file that can control the caching of resources and intercept network requests, enabling features such as offline access and faster page loads. By using this command, Angular generates the necessary files for both the application and the service worker, allowing you to deploy an Angular Progressive Web App with service worker support.'
        source-map: '[AI] The `ng build --source-map` command is used in Angular projects to generate source maps during the build process. Source maps help in mapping the compiled and minified code back to its original source, which can be useful for debugging purposes in the browser. Enabling source maps involves passing the `--sourceMap` flag to the `ng build` command. This results in larger build sizes due to the inclusion of source map files, but provides more detailed error messages and improved debugging capabilities.'
        stats-json: '[AI] `ng build --stats-json` is a command used in Angular, a popular JavaScript framework for building web applications. This command initiates the build process of an Angular application using the Angular CLI (Command Line Interface), and generates a JSON file containing detailed statistics about the build process. These statistics include the size of each generated file, number of files, and other relevant metrics to help developers understand the impact of their changes on the overall bundle size. This information can be further analyzed and used for optimization purposes.'
        subresource-integrity: '[AI] `ng build --subresource-integrity` is a command used in Angular projects built with the Angular CLI. It compiles the Angular application and generates production-ready bundles, along with Subresource Integrity (SRI) headers for the generated assets. SRI is a security feature that helps prevent data manipulation during the transfer of scripts, stylesheets, or other external resources by verifying their integrity at the client-side. Enabling this flag adds hashes to these files in the HTML, which are then compared against the hashes provided in the corresponding `integrity` attributes when the page is loaded, ensuring the data hasn''t been tampered with during transfer.'
        ts-config: '[AI] `ng build --ts-config` is a command used in Angular projects built with the Angular CLI. It triggers the Angular compilation process with a custom TypeScript configuration file. Instead of using the default `tsconfig.json`, you can specify a different configuration file by providing the `--ts-config` flag followed by the path to your preferred config file. This command builds the project after applying the specified configuration settings.'
        vendor-chunk: '[AI] The `ng build --vendor-chunk` command is used with Angular CLI to generate a production-ready bundle of your Angular application. With this option, Angular will bundle multiple modules into a single chunk, which is beneficial for reducing the number of HTTP requests in the final bundle and improving the overall performance of your application. The `--vendor-chunk` flag instructs Angular to include third-party library code (vendors) into their respective chunks, further optimizing the bundle size.'
        verbose: '[AI] `ng build --verbose` is a command used in Angular projects to compile and build the application for production using the Angular CLI (Command Line Interface). The `--verbose` flag increases the output level of the build process, displaying detailed information about each stage of the build process including warnings and errors. This can be helpful for debugging and understanding the build process in more complex projects.'
        watch: '[AI] `ng build --watch` is a command used in Angular projects with the Angular CLI. It initiates a build process with the `--watch` option, which continuously monitors and recompiles the application as files change in real-time. This is useful during development, allowing for immediate feedback on code changes without needing to manually trigger a build every time.'
        web-worker-ts-config: '[AI] `ng build --web-worker` is a command used in Angular projects with TypeScript, which triggers the Angular CLI to compile the application for production using a web worker configuration. This flag enables the generation of TypeScript files required for web workers and includes them in the output bundle. It''s important to note that using web workers requires additional setup on the client side, such as creating and managing the web worker threads.'
