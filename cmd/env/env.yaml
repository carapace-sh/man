# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: env
description: run a program in a modified environment
flags:
    --block-signal?: block delivery of SIG signal(s) to COMMAND
    --default-signal?: reset handling of SIG signal(s) to the default
    --help: display this help and exit
    --ignore-signal?: set handling of SIG signals(s) to do nothing
    --list-signal-handling: list non default signal handling to stderr
    --version: output version information and exit
    -0, --null: end each output line with NUL, not newline
    -C, --chdir=: change working directory to DIR
    -S, --split-string=: process and split S into separate arguments;
    -i, --ignore-environment: start with an empty environment
    -u, --unset=: remove variable from the environment
    -v, --debug: print verbose information for each processing step
documentation:
    command: '[AI] The `env` command in Unix-based systems is used to manipulate and display the current environment variables. With no arguments, it prints out all the current environment variables and their values. You can also use it with specific variable names as an argument to view or modify just that variable. For example, `env VARIABLE_NAME=newvalue command` sets the `VARIABLE_NAME` to `newvalue` before running the `command`.'
    flag:
        block-signal: '[AI] The `--block-signals` flag is a command-line option for the `env` utility in some Unix-like operating systems, including GNU and Apple''s `bsd`. When used with the `exec` form of the `env` command, this flag prevents the child process that is being `exec`''ed from receiving or responding to certain signals by default. This can be useful for ensuring that a critical process runs undisturbed even if certain signals are accidentally or intentionally sent to it. By blocking these signals at the outset, you provide an additional layer of protection against unintended termination.'
        chdir: '[AI] The `env --chdir` command in a Unix-like operating system is used to change the current working directory (CWD) for a new subshell, while preserving the existing environment variables. The `--chdir` option specifies the new CWD. This can be useful when running commands with complex environments but requiring a different CWD, without affecting the parent shell''s state.'
        debug: '[AI] `env --debug` is a command used in Unix-based systems, particularly in the Bash shell, to display extensive information about the current environment. The `--debug` flag enhances the output of the `env` command by providing a more detailed listing of all environment variables and their corresponding values, including any inherited variables from parent processes. This can be helpful for troubleshooting complex issues related to environment variables.'
        default-signal: |-
            [AI] The `env --default-signal` command is a utility from the GNU Core Utilities package, specifically designed for the bash shell environment. Its primary function is to set or display the default signal handling for various bash built-in commands and custom scripts.

            When used with no arguments, it displays the current default signal settings. If used with an argument, such as a signal name (e.g., `--default-signal TERM`), it sets that signal as the new default behavior for SIGTERM, the standard Unix signal for graceful termination of processes.

            By changing the default signal handling, you can customize how your scripts react when encountering signals like SIGINT (Interrupt), SIGHUP (Hangup), or other signals. It's an essential tool for managing and fine-tuning script behavior in various situations.
        help: '[AI] The `env --help` command is used in Unix-based systems, particularly in Bash or Zsh shells, to display help information about the `env` command. `env` is a utility that allows users to set and export various environment variables and subshells. By running `env --help`, you will see a detailed explanation of all the options available when using this command, including how to set environment variables, print the current environment, and run commands in new subshells with specific environments.'
        ignore-environment: '[AI] The `--ignore-environment` flag for the `env` command in Unix-based systems is used to prevent the environment variables set in the current shell from being passed on to the new subshell or child process that is created when running a command. This can be useful when you want to ensure that the subprocess runs with a clean environment, free of any variables set in the parent shell.'
        ignore-signal: '[AI] The `--ignore-signal` flag is a command-line option for the `env` utility in Unix-like operating systems. It allows the parent process to ignore SIGTERM and SIGINT signals when executing the given command. In other words, it prevents the command from being terminated by sending the SIGTERM or SIGINT signal. This can be useful in certain scripting or automation scenarios where a process needs to run uninterrupted despite receiving these signals.'
        list-signal-handling: '[AI] `env --list-signal-handling` is a command in the Envsubst utility of GNU Textutils. It lists the current signal handling settings for various signals in the environment. The output shows each signal name followed by its corresponding action (e.g., "SIGINT: ignore"). This command can be useful for understanding how processes respond to specific signals, such as interrupts or termination commands.'
        "null": '[AI] The `env --null` command is a way to print environment variables in a format with null values for unset variables in Bash or other Unix-like shells. The `--null` option tells the `env` command to separate variable name and value with a null character instead of a space when the variable is unset, making it easier to handle such variables in other scripts or tools, especially C-based ones.'
        split-string: '[AI] `env --split-string` is a command in Git Bash or other Unix-like environments, specifically for the GNU `env` utility. This option (`--split-string`) splits each line of the environment variables into key=value pairs using the first occurrence of the character specified as an argument to the command (default is `=`). The output is printed in a format suitable for setting environment variables in shell scripts or other commands, with each key and value quoted appropriately.'
        unset: '[AI] `env --unset` is a command used in Unix-based systems to unset (remove) environment variables from the current shell session. The `--unset` option is used with the `env` command, which is typically used to manipulate and inspect environment variables. When you run `env --unset VARNAME`, it removes the variable named `VARNAME` from your environment if it exists, allowing you to modify or reset the environment for a script or a subshell.'
        version: '[AI] `env --version` is a command used in Unix-based systems, including Bash and zsh shells. This command is not specifically related to flags or versions but rather it is the name of the environment utility. When used without any arguments, `env --version` prints out the version information for the current environment utilities installed on the system. It helps users keep track of which version of their environment tools they are using for troubleshooting and compatibility checks.'
