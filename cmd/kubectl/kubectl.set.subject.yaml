# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: subject (-f FILENAME | TYPE NAME) [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]
description: Update the user, group, or service account in a role binding or cluster role binding
flags:
    --all: Select all resources, in the namespace of the specified resource types
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --group*=: Groups to bind to the role
    --local: If true, set subject will NOT contact api-server but run locally.
    --serviceaccount*=: Service accounts to bind to the role
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --user*=: Usernames to bind to the role
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files the resource to update the subjects
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl set subject` is a command used in Kubernetes to update the subject (the entity granting access) of a Role or ClusterRole binding. This modification allows adjusting which entities have access to specific resources within the cluster, enabling fine-grained control over user privileges. It''s important to note that this command requires administrative permissions and should be used with caution to avoid unintended security risks.'
    flag:
        all: '[AI] `kubectl set subject --all` is a command used with Kubernetes'' `kubectl` tool to update the subject of a service account or cluster role binding across all namespaces in a cluster. The `--all` flag specifies that the modification should be applied to every namespace in the cluster. This can be useful when you need to make changes to the ownership of resources, such as granting or revoking access permissions, for all namespaces at once.'
        allow-missing-template-keys: '[AI] `kubectl set subject --allow-missing-template-keys` is a command used with the Kubernetes `kubectl` tool to update the RBAC (Role-Based Access Control) rules for a specific subject, such as a user or service account. The `--allow-missing-template-keys` flag enables the update process even if some keys are missing in the provided YAML manifest. In other words, it allows the Kubernetes cluster to automatically create or update missing fields without causing an error during the manifest''s validation. This can be useful when updating a YAML file incrementally and not having all fields at once.'
        dry-run: '[AI] `kubectl set subject --dry-run` is a command used with Kubernetes'' `kubectl` tool to test changes to RoleBinding and ClusterRoleBinding objects without actually applying them. It simulates the effects of making the specified modifications, showing what would be changed in the Kubernetes cluster if the command were run without the `--dry-run` flag. The subject refers to the entities being granted or denied access by the RoleBinding or ClusterRoleBinding object.'
        field-manager: '[AI] The `kubectl set subject --field-manager` is a command used with Kubernetes'' `kubectl` tool to update the manager field in the subject of a Role or ClusterRole resource. This field specifies which controller or manager handles the reconciliation and management of the resources associated with the Role or ClusterRole. By updating it, you can change the ownership of the resources managed by the Role or ClusterRole, allowing for better RBAC (Role-Based Access Control) management within your Kubernetes cluster.'
        filename: |-
            [AI] The `kubectl set subject` command is used to update the RBAC (Role-Based Access Control) rules in a Kubernetes cluster by modifying the subjects of an existing role or clause in a policy file. The `--filename` flag is used to specify the path to the YAML file containing the policy definition that needs to be updated.

            When you run this command with the `set` verb and the `--filename` option, `kubectl` reads the contents of the file, makes the desired changes to the subjects based on your configuration, and writes back the modified YAML content to the same file, effectively updating the RBAC rules in the cluster.
        group: '[AI] The `kubectl set subject --group` command is used to update the RBAC (Role-Based Access Control) group memberships for a Kubernetes service account. This command modifies the subjects defined in a ClusterRole or Role binding, specifically the group field, without changing any other properties. It helps manage access control policies by assigning or revoking permissions based on group memberships for the specified service account.'
        kustomize: '[AI] `kubectl set subject --kustomize` is a command in Kubernetes using the `kubectl` tool to update the RBAC (Role-Based Access Control) rules for a specific Kubernetes resource, applying patches defined in a .kustom file or a series of .yaml files using the `kustomize` engine. It modifies the subject field in the RBAC rule, such as changing the group, users, or services that have access to the resource.'
        local: '[AI] `kubectl set subject --local` is a command used with Kubernetes'' `kubectl` tool to update the Subject field of a Kubernetes Resource, such as a Role or a ClusterRole, with new values locally on your client side without interacting with the cluster. The --local flag indicates that the changes are made only in your local kubeconfig file and not pushed to the actual cluster. This command is useful when testing or experimenting with RBAC (Role-Based Access Control) configurations before applying them to the production environment.'
        output: |-
            [AI] `kubectl set subject --output` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to modify the RBAC (Role-Based Access Control) rules of a Kubernetes cluster by updating the subjects (entities granted permissions) in an RBAC rule.

            The `--output` flag specifies the format for the output of the command. The available formats are json, yaml, and go-template. By default, the output is displayed in the terminal.

            Here's a brief explanation of the syntax:
            ```
            kubectl set subject <rbac-resource> --namespace <namespace> [<name>] --subject <subject> [--type <type>] [--action <actions>] [--output=json/yaml/go-template]
            ```
            * `rbac-resource`: This is the RBAC resource to be updated. It can be a cluster role, cluster role binding, role, or role binding.
            * `namespace`: The namespace in which the RBAC resource resides.
            * `name` (optional): The name of the specific RBAC resource to update. If not provided, the command updates all resources with the given labels.
            * `subject`: The new subject to be added or updated. It can be an individual user, a group, or a service account.
            * `type` (optional): The type of the subject. For example, "User" or "Group".
            * `action` (optional): The specific actions to grant or revoke for the subject.
            * `--output`: The format of the output.

            In summary, `kubectl set subject --output` is a powerful command to manage RBAC rules in Kubernetes clusters by updating the subjects and their associated permissions.
        recursive: '[AI] `kubectl set subject --recursive` is a command used in Kubernetes to update the RBAC (Role-Based Access Control) rules for a Kubernetes resource. The `--recursive` flag means that this command will not only update the RBAC rules directly associated with the specified resource but also all the rules that are referenced by those rules. This helps ensure that any changes to access control policies propagate throughout the entire cluster, making it easier to manage and maintain consistent security policies.'
        selector: '[AI] `kubectl set subject --selector` is a command used with Kubernetes'' `kubectl` tool for managing and configuring clusters and applications. This specific command allows updating the selector labels on a Role or ClusterRole object in a Kubernetes cluster. The `--selector` option sets the new label key-value pairs to be matched by the objects that will be granted permissions from the Role or ClusterRole. In simpler terms, it helps modify which pods are granted access to the associated resources based on their labels.'
        serviceaccount: '[AI] `kubectl set subject` is a command used with the Kubernetes `kubectl` tool to update the subjects (entities that can access a Kubernetes resource) of a ServiceAccount. This command modifies the existing ServiceAccount''s RoleBindings or ClusterRoleBindings to add, remove, or modify the list of subjects. The updated YAML definition is then displayed or applied, depending on the options provided with the command. Using `--serviceaccount` option specifies that the command will be performed on a specific ServiceAccount.'
        show-managed-fields: '[AI] The `kubectl set subject --show-managed-fields` command is used to modify the subjects (RBAC roles or service accounts) of a Kubernetes cluster object, and then display only the managed fields that were modified as a result of the update. Managed fields are those fields in a Kubernetes resource that are automatically managed by the Kubernetes API controller and should not be changed manually. By using this command, you can ensure that any changes made to subjects adhere to the intended RBAC policies without accidentally modifying managed fields that could disrupt the cluster''s security or functionality.'
        template: '[AI] `kubectl set subject --template` is a command used in Kubernetes to update the RBAC (Role-Based Access Control) rules for a specific resource by applying a custom template for generating the new subjects. The `--template` flag lets you define the new subjects using a Go template syntax, allowing for dynamic updates based on current resource information. This command is useful when you need to make complex or dynamic changes to RBAC rules in your Kubernetes cluster.'
        user: '[AI] `kubectl set subject --user` is a command used with Kubernetes'' `kubectl` tool to update the user account or group name in a RoleBinding, ClusterRoleBinding, or ServiceAccount object in a Kubernetes cluster. This change affects RBAC (Role-Based Access Control) rules, allowing you to modify who has access to what resources within your cluster.'
