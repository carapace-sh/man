# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: readlink
description: print resolved symbolic links or canonical file names
flags:
    --help: display this help and exit
    --version: output version information and exit
    -e, --canonicalize-existing: canonicalize by following every symlink in
    -f, --canonicalize: canonicalize by following every symlink in
    -m, --canonicalize-missing: canonicalize by following every symlink in
    -n, --no-newline: do not output the trailing delimiter
    -q, --quiet: ""
    -s, --silent: suppress most error messages (on by default)
    -v, --verbose: report error messages
    -z, --zero: end each output line with NUL, not newline
documentation:
    command: '[AI] `readlink` is a command in Unix-based operating systems used to display the resolved path of a symbolic link or the content of a hard link. When invoked with a single link as an argument, it shows the target file or directory to which the link refers. When used with multiple arguments, it can display the paths of all given symbolic links in a list format. In essence, `readlink` is a useful tool for inspecting and understanding the relationships between files and their corresponding symbolic links.'
    flag:
        canonicalize: |-
            [AI] `readlink --canonicalize` is a command used in Unix-like operating systems, specifically the `readlink` utility with the `--canonicalize` option. This option resolves symbolic links (symlinks or soft links) to their true, or canonical, file paths.

            When a file in a Unix system is a symlink, it doesn't actually exist at that location. Instead, it points to another file or directory. When we use `ls -l` to list the files, we see the symlink and its target file with an arrow (`->`) indicating the relationship between them.

            The `readlink --canonicalize <link>` command resolves that symbolic link and prints the canonical path of the linked-to file or directory. This is useful when you need to know the absolute path of a file referred to by a symlink, for various reasons such as scripting, file manipulation, and more accurate error handling.
        canonicalize-existing: '[AI] `readlink --canonicalize-existing` is a command used in Unix and Linux systems to resolve symbolic links (symlinks) to their canonical or absolute paths. The `--canonicalize-existing` option ensures that the command resolves only existing symlinks, without creating new ones if no link exists at the given path. This helps prevent unintended side effects when working with complex directory structures containing multiple symlinks.'
        canonicalize-missing: '[AI] `readlink --canonicalize-missing` is a command in Linux and other Unix-like operating systems used to resolve symbolic links (symlinks). When used with this option, if a symlinked file is missing or is not a valid symlink, the command will return the path of the original file or parent directory, instead of reporting an error. This can be useful in scripts and automation tasks where handling missing symlinks gracefully is important.'
        help: '[AI] `readlink --help` is a command used in Unix-based operating systems to display the detailed help or usage information for the `readlink` utility. The `--help` option is a common way to access built-in help text in various Linux commands and tools, providing an overview of options, arguments, and usage examples for `readlink`. In essence, using this command allows users to quickly learn how to effectively use `readlink` for resolving symbolic links or displaying the target files of existing symlinks.'
        no-newline: '[AI] The `readlink` command in Unix-based systems is used to display the resolved path of a symbolic link or the contents of a hard link. The option `--no-newline` (or just `-n`) is used with it to output only the last component of the link without any trailing newline character. This can be useful when working with scripts where precise string manipulation is required based on the link name.'
        quiet: '[AI] `readlink --quiet` is a command in Unix-like operating systems used to resolve the links to their target files, but with the `--quiet` option, it only prints the target file name itself without any additional information such as the path leading to the target or symbolic link status indicators. Essentially, it''s a way to obtain just the final destination of a given symlink without seeing any extra output.'
        silent: '[AI] `readlink --silent` is a command in Unix-like operating systems used to display the resolved path of a symbolic link or the target of a hard link. The `--silent` option tells readlink not to output any message when it successfully resolves a symbolic link, making the output consist only of the path itself. In contrast, without this option, readlink may print messages such as "not a symbolic link" or "dangling symbolic link".'
        verbose: '[AI] `readlink --verbose` is a command in Unix-based operating systems that resolves symbolic links and prints out the file or directory path they point to, along with some additional information. The "--verbose" option makes readlink print the link''s target file or directory name and the full path leading to it. This can be helpful for understanding the relationship between a symbolic link and its referenced file or directory.'
        version: '[AI] `readlink --version` is a command used in Unix-based operating systems to display version information about the `readlink` utility. When executed, it prints out the version number and sometimes additional information such as the compilation date or operating system it was built for. It helps users determine which version of readlink they have installed and if it''s up-to-date with the latest releases.'
        zero: '[AI] The `readlink --zero` command is a utility in Unix-like operating systems, specifically designed to display the absolute path of a symbolic link. The `--zero` option ensures that output does not contain trailing newline characters at the end of the path. This can be useful when processing file paths programmatically, as some scripts may be sensitive to unexpected newline characters.'
