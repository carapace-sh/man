# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update-index
description: Register file contents in the working tree to the index
group: low-level manipulator
flags:
    --add: do not ignore new files
    --assume-unchanged: mark files as "not changing"
    --cacheinfo=: add the specified entry to the index
    --chmod=: override the executable bit of the listed files
    --clear-resolve-undo: (for porcelains) forget saved unresolved conflicts
    --force-remove: remove named paths even if present in worktree
    --force-untracked-cache: enable untracked cache without testing the filesystem
    --force-write-index: write out the index even if is not flagged as changed
    --fsmonitor: enable or disable file system monitor
    --fsmonitor-valid: mark files as fsmonitor valid
    --ignore-missing: ignore files missing from worktree
    --ignore-skip-worktree-entries: do not touch index-only entries
    --ignore-submodules: 'refresh: ignore submodules'
    --index-info: add entries from standard input to the index
    --index-version=: write index in this format
    --info-only: add to index only; do not add content to object database
    --no-assume-unchanged: clear assumed-unchanged bit
    --no-fsmonitor-valid: clear fsmonitor valid bit
    --no-skip-worktree: clear skip-worktree bit
    --really-refresh: like --refresh, but ignore assume-unchanged setting
    --refresh: refresh stat information
    --remove: notice files missing from worktree
    --replace: let files replace directories and vice-versa
    --skip-worktree: mark files as "index-only"
    --split-index: enable or disable split index
    --stdin: read list of paths to be updated from standard input
    --test-untracked-cache: test if the filesystem supports untracked cache
    --unmerged: refresh even if index contains unmerged entries
    --unresolve: 'repopulate stages #2 and #3 for the listed paths'
    --untracked-cache: enable/disable untracked cache
    --verbose: report actions to standard output
    -g, --again: only update entries that differ from HEAD
    -q: continue refresh even when index needs update
    -z: 'with --stdin: input lines are terminated by null bytes'
documentation:
    command: '[AI] `git update-index` is a Git command used to modify the files that are staged for the next commit. It can be used to add new files, remove existing ones, or change the status of files between committed, modified, and staged states. The basic syntax is `git update-index [--add] <file> [--force]`, where `--add` is optional and adds a file to the index without modifying its state in the working directory. The `--force` option can be used to overwrite an existing staged file with changes from the working directory. Without any arguments, it shows the list of files currently being tracked by Git and their statuses.'
    flag:
        add: '[AI] `git update-index --add` is a Git command used to stage new or modified files for the next commit. When you modify a file in your working directory, it is not yet included in the next Git commit unless you use `git add`. The `--add` option tells Git to stage only the new files or the modified files that are not yet staged, making them ready to be committed using `git commit`. This command affects the index, which holds the snapshot of the files before they are committed.'
        again: '[AI] `git update-index --again` is a Git command used to reapply the changes that were previously staged but not committed, using the last index state before the latest commit. This can be useful when accidentally committing an unfinished change or when reverting a commit and wanting to restore the previous staging. It does not create a new commit; instead, it updates the index without touching the working directory or the local repository''s commit history.'
        assume-unchanged: '[AI] `git update-index --assume-unchanged` is a Git command used to prevent changes in specific files from being tracked by Git without removing them from the staging area or the local repository. By using this command, the files will be marked as "assumed unchanged" and any subsequent modifications made to these files won''t be detected by Git unless you use `git update-index --no-assume-unchanged` to reverse the change. This can be useful in situations where you want to prevent accidental commits of unintended changes or when working with large binary files that don''t need frequent versioning.'
        cacheinfo: '[AI] `git update-index --cacheinfo` is a Git command used to display the cache information of the index, which is an intermediate data structure in Git between the working directory and the commit. This command shows a list of files along with their mode, hash in the index, size, and other metadata. It does not make any changes to the repository but only displays the current state.'
        chmod: '[AI] `git update-index --chmod` is a Git command used to change the file permissions of one or more files in the staging area or the working directory before committing changes. The command takes a list of file paths as arguments and appends the desired chmod mode (a three-digit octal number) to specify the read, write, and execute permissions for the file owner, group, and others. For example, `--chmod 755 path/to/file` sets read, write, and execute permissions for the file owner and read-only permissions for others. This command does not modify the file contents or commit the changes; it only updates the index with the new permissions information.'
        clear-resolve-undo: '[AI] The `git update-index --clear-resolve-undo` command is used to discard any uncommitted changes that Git has recorded as "Resolve Info" or "Unmerged" during a merge conflict or checkout of a file with conflicting changes. This command clears the resolved state, allowing you to start fresh in resolving the conflict manually or checking out another branch again. It does not delete any files or modify their content, but only removes Git''s record of uncommitted changes.'
        force-remove: '[AI] `git update-index --force-remove` is a Git command used to remove a file from the staging area (also known as the index), permanently discarding any changes that were staged for committing. The `--force-remove` option is used when the file has already been deleted in the working directory, but it still exists in the index or the last commit. By using this command, you are forcefully removing the file from both the index and the Git history.'
        force-untracked-cache: '[AI] `git update-index --force-untracked` is a Git command used to update the index with new or modified files, as well as force-adding untracked files into the index. The `--force-untracked` option tells Git to overwrite any existing tracked files that have the same name as the untracked files being added. The `--cache` (alias `--skip-workdir`) option is used to only update the cache (i.e., not modify working directory files). With both options combined in `git update-index --force-untracked-cache`, it forces Git to add and update untracked files into the index without modifying or prompting about tracked files with the same name.'
        force-write-index: '[AI] `git update-index --force-write-index` is a Git command used to overwrite the current index state with the working directory, even if there are conflicting changes. This can be useful when dealing with uncommitted modifications that need to be discarded or when merging branches and encountering conflicting files where one version needs to be kept. By using `--force-write-index`, Git forcibly updates the index without asking for confirmation, potentially losing any unsaved changes in the index.'
        fsmonitor: '[AI] `git update-index --fsmonitor` is a Git command used to enable file system monitoring for a working directory. When this command is run, Git sets up a background process that watches for changes in the monitored files and directories. Any new or modified files will be automatically added to the Git index when they are detected, allowing for easier tracking of file changes without having to manually add them each time. This can be useful in workflows where there are many files being frequently modified.'
        fsmonitor-valid: |-
            [AI] The `git update-index --fsmonitor-valid` command is a Git utility used to manage the file system monitoring feature. When you enable file system monitoring with `git config --global core.fsmonitor true`, Git starts tracking changes in files and directories not yet tracked or modified in the working directory.

            The `--fsmonitor-valid` option specifically checks the monitored files against the current HEAD commit, validating their state against the repository. If there are any discrepancies, Git will raise a warning, but won't automatically stage or commit the changes. This allows you to review the differences before deciding to make a commit.

            In summary, `git update-index --fsmonitor-valid` is used to compare the monitored files against the repository HEAD and report any discrepancies for further action.
        ignore-missing: '[AI] The `git update-index` command with the `--ignore-missing` option is used to add or modify files in the Git index, ignoring any files that could not be found at their current paths. This can be useful when attempting to add files that have been moved or deleted outside of the repository, but you still want to keep the remaining files in the index. By using `--ignore-missing`, Git will skip the error and continue processing the remaining files.'
        ignore-skip-worktree-entries: '[AI] `git update-index` is a Git command used to update the index (staging area) with changes from the working directory. The option `--ignore-skip-worktree-entries` instructs Git to bypass the skip worktree flag for specified files, allowing changes in the working directory to override changes in the index even if they have been marked as "ignored" using `git add --ignore`. This can be useful when intentionally making changes to files that were previously set to be ignored by Git.'
        ignore-submodules: '[AI] `git update-index --ignore-submodules` is a Git command used to modify the index, telling Git to ignore subdirectories marked as submodules during the next commit. This means that any changes made in the subdirectories will not be tracked or included in the commit. If you want to commit changes only in the main project directory and leave the submodules unchanged, use this command before committing.'
        index-info: '[AI] `git update-index --index-info` is a Git command used to update the Git index (also known as the staging area) with information about modified or new files without modifying the files themselves. It generates and writes new index file(s) in the background, allowing you to later use commands like `git add` or `git commit` to include these changes in a upcoming commit. This command does not affect your working directory nor makes any visible changes to your repository, but it prepares your staging area for committing changes.'
        index-version: '[AI] `git update-index` is a Git command used to modify the index, which is an intermediate data structure between your working directory and the final commit. The `--index-version` option specifies that you want to use the new format for the index file. This can be useful when transitioning from an older version of Git or when dealing with specific edge cases. By default, Git creates a new index file in this new format when you run `git add`.'
        info-only: '[AI] `git update-index --info-only` is a Git command used to preview changes before committing them with `git add`. It displays the name, mode (file type), and hash of each changed file without actually updating the index. This allows users to review the changes they want to commit before making the final commitment.'
        no-assume-unchanged: |-
            [AI] The `git update-index --no-assume-unstaged` command is used to update the index (staging area) in Git without assuming the changes are untracked. When a file is modified but not added or removed from the index, Git assumes the change is unintentional and marks it as untracked by default.

            By using `--no-assume-unchanged` option, we tell Git to skip this assumption and allow us to manually add or modify files in the index with the command. This can be useful when working on large binary files or when dealing with conflicts where we want to keep our local changes while committing.
        no-fsmonitor-valid: '[AI] The `git update-index` command with the `--no-fsmonitor-valid` option is used to update the index in Git without triggering the file system monitor (FsMonitor). This is particularly useful when making bulk updates or working with large files, as it can help reduce the amount of disk I/O and improve performance. The `--no-fsmonitor-valid` flag disables FsMonitor validation during this operation, allowing you to force-update the index without waiting for Git to validate file modifications through the monitor first.'
        no-skip-worktree: '[AI] `git update-index --no-skip-worktree` is a Git command used to update the index with changes from the working directory, but unlike the default behavior where the changes in the worktree don''t affect the corresponding entry in the index if they already exist, this option forces Git to overwrite the existing entries in the index. In other words, it discards the current state of the indexed file and takes the changes from the working directory instead. This command is often used when you have accidentally checked in uncommitted changes or need to update the index with changes that were not added using `git add`.'
        q: '[AI] `git update-index` is a Git command used to modify the index (staging area) in a Git repository. The `-q` flag stands for "quiet" or "quietly," meaning that the command will run without displaying any message for each file being processed. This can be useful when running scripts or automating processes, as it avoids cluttering the output with unnecessary messages. In summary, `git update-index -q` updates the index in Git quietly.'
        really-refresh: '[AI] `git update-index --really-refresh` is a Git command used to force an update of the index with the current changes in the working directory, overriding any conflicting changes. When there are unresolved conflicts or other discrepancies between the index and the working directory, this command can be used to ensure that the index reflects the latest changes before continuing with a commit or other Git operation.'
        refresh: '[AI] `git update-index --refresh` is a Git command used to force Git to re-read the cache and update its index with any new or modified files in the working directory. This can be helpful when you have made changes outside of Git, such as modifying a file using an external text editor, and want to ensure that those changes are reflected in the index before making a commit. It does not make any changes to the repository itself, but rather updates the index with the current state of the working directory files.'
        remove: '[AI] `git update-index --remove` is a Git command used to remove specific files from the staging area (also known as the index). When you add files using `git add`, they are placed in the staging area, preparing them for the next commit. But if you want to remove a file that was previously added, you can use this command. It removes the specified files from the staging area without modifying the working directory or the Git history.'
        replace: '[AI] `git update-index --replace` is a Git command used to replace or modify the contents of an indexed file without changing its name or staging status. This command overwrites the current entry in the index with new content provided, often from a modified working directory file. It does not create a new commit; instead, it sets the index ready for committing changes.'
        skip-worktree: |-
            [AI] `git update-index --skip-worktree` is a Git command used to update the index without modifying the working directory. When a file is tracked by Git and its content in the working directory differs from that in the index or the last commit, Git will prevent checking in with `git commit -a`.

            The `--skip-worktree` option allows you to force an update of the index entry for a file without changing the working directory, effectively bypassing this conflict. This can be useful when you intentionally want to discard changes in the working directory and keep those in the index instead. Keep in mind that this command doesn't change the working directory or the commit history, it only affects the current index state.
        split-index: '[AI] `git update-index --split-index` is a Git command used to prepare large files for efficient and incremental Git transfers, specifically when using the Shallow Updates or Rsync transfer protocols. This command splits large files into smaller chunks called "index objects" and updates the Git index with those new objects, making file transfers more manageable without sacrificing the complete history of the file within your Git repository.'
        stdin: '[AI] `git update-index --stdin` is a Git command used to update the index with new or modified file content read from standard input (STDIN). It''s typically employed in piped workflows, such as when using text editors to change files before committing. When you save and exit the editor, the updated content is passed through STDIN into this Git command, which then updates the index accordingly.'
        test-untracked-cache: '[AI] `git update-index --test-untracked-cache` is a Git command used to check which untracked files in the working directory would be added to the index if they were explicitly added using `git add`. It does not actually modify the index, but only displays the differences between the current state and what would result from an `add` command. This can help prevent unwanted file additions before committing changes.'
        unmerged: '[AI] `git update-index --unmerged` is a Git command used to update the index with changes from the working directory that have not been merged yet during a merge conflict resolution. The command lists the unmerged files and allows the user to manually select which changes to keep for each file, or to choose to discard one of the changes and keep the other. Once the desired changes are selected, `git add` can be used to stage those changes before committing.'
        unresolve: '[AI] `git update-index --unresolved` is a Git command used to update the index (staging area) with unmerged files from a failed merge or a conflict resolution. It allows you to manually select which changes from the local working directory and the index should be kept for the next commit. By not specifying any particular file, it affects all unmerged files in the current repository. This command is useful when you want to keep some of your local changes while committing a merged branch or resolving conflicts.'
        untracked-cache: '[AI] `git update-index --untracked-CACHE` is a Git command used to modify the index (staging area) with files that are currently untracked but located in the cache (the directory holding untracked and ignored files). The command adds the untracked files from the cache into the index, preparing them to be committed. If you want to add new files not yet tracked by Git, use `git add` instead.'
        verbose: '[AI] `git update-index --verbose` is a Git command used to modify the index, also known as the staging area, of your Git repository. The `--verbose` option increases the output of the command to provide more detailed information about what files are being added or removed from the index. In simpler terms, it allows you to see exactly which files have been staged for the next commit and any changes made to them.'
        z: '[AI] `git update-index --zerodest` is a Git command used to prepare a file for a delta-compressed Git archive or a Git pack file. It writes the file data as if it had been deleted and then re-added, effectively setting its index to zero length in the Git database. This allows the subsequent `git add` command to create a new commit with only the difference between the current file version and the zerolength file, which results in more efficient storage in Git repositories.'
