# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: publish
description: Publish the current package to pub.dartlang.org
flags:
    -C, --directory=: Run this in the directory<dir>.
    -f, --force: Publish without confirmation if there are no errors.
    -h, --help: Print this usage information.
    -n, --dry-run: Validate but do not publish the package.
documentation:
    command: '[AI] `dart pub publish` is a command used in Dart programming language to publish a package to the Dart Package Cloud. This command creates a `.tar.gz` archive of your project under `pubspec.yaml`, runs tests and builds the package, then uploads it to the Dart Package Cloud with the given name and version number specified in the `pubspec.yaml` file. The published package is accessible to other developers via `dart:2.x.x` or `html:2.x.x` syntax in their `pubspec.yaml` files, allowing them to easily add it as a dependency to their projects.'
    flag:
        directory: |-
            [AI] The `dart pub publish` command is used to publish a Dart package to the Dart Package Cloud repository, making it publicly available for others to use as a dependency in their projects.

            The `--directory` option specifies the root directory of the package to be published. This flag tells Dart that the pubspec.yaml file and other necessary files are located in the specified directory, rather than in the current working directory. It's useful when the command is run from a subdirectory within the package, or when publishing multiple packages at once.
        dry-run: |-
            [AI] `dart pub publish --dart-define=MY_API_KEY:apiKey --dry-run` is a command used in Dart programming language to prepare and simulate publishing a package on the Dart Package Manager (pub.dev) without actually uploading it.

            The `--dry-run` flag instructs the Pub tool not to make any changes to the remote repository or perform actual file transfers. This helps developers to test their package's build configuration, dependencies, and version number before publishing it for real. The command can also set environment variables using `--dart-define` flag to configure external services like APIs.
        force: '[AI] `dart pub publish --force` is a command used in Dart programming language for publishing a new version of a package to the Dart Package Pub registry. The `--force` option is used when the publisher wants to override any existing releases, even if they have no conflicts or errors. It''s important to use this flag with caution as it can potentially overwrite previous versions that may still be in use by other projects.'
        help: |-
            [AI] The `dart pub publish` command is a part of Dart's package management system, `pub`. It is used to build and publish a Dart package for sharing with others in the Dart community.

            The `--help` option provides information on how to use this command effectively:

            - It shows the basic syntax: `dart pub publish [<package-name>]`
            - Explains that if no package name is provided, it uses the current directory as the package root
            - Provides a list of options and their descriptions for fine-tuning the build and publication process. These include things like setting version numbers, including additional files or excluding certain ones, and configuring the Git repository for publishing.

            In summary, `dart pub publish --help` is a way to get familiar with the various options available when publishing a Dart package using the `pub` tool.
