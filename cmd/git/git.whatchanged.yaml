# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: whatchanged
description: Show logs with difference each commit introduces
group: interrogator
flags:
    --decorate-refs-exclude=: do not decorate refs that match <pattern>
    --decorate-refs=: only decorate refs that match <pattern>
    --decorate?: decorate options
    --mailmap: alias of --use-mailmap
    --source: show source
    --use-mailmap: use mail map file
    -L=: trace the evolution of line range
    -q, --quiet: suppress diff output
documentation:
    command: '[AI] `git whatchanged` is a Git command that shows you the commit messages and file changes for each commit that modified a specified file or files in your repository. When you run this command followed by the file name(s), Git will display the commits with their corresponding author, date, message, and the files changed in those commits. This command provides a quick and efficient way to trace the history of changes made to specific files within your project.'
    flag:
        L: '[AI] `git whatchanged -L` is a Git command that displays the differences in the specified file(s) between two commits. The `-L` option (short for --follow) tells Git to track changes made across multiple commits even if those commits resulted from branch merges or rebase operations. This can be useful when investigating the history of a file and its modifications over time.'
        decorate: '[AI] `git whatchanged --decorate` is a Git command that shows the commit messages and branch labels for each commit in the current history. The `--decorate` option adds branch names as refs prefixed with `<` and `>` to the output, indicating local and remote branches respectively. This allows you to easily see the commit history and its relationship to your current branches at a glance.'
        decorate-refs: '[AI] `git whatchanged --decorate-refs` is a Git command used to show the commits that changed a specific file or files and their corresponding refs (branches or tags) that point to those commits. The `--decorate-refs` option adds the names of the branches and tags in the output for easier reference. It''s useful when you want to see which commits introduced changes in certain files, along with their associated branch history.'
        decorate-refs-exclude: |-
            [AI] The `git whatchanged --decorate-refs --exclude` command is used to show the commit messages and branch labels for a given list of commits in Git.

            The `--decorate-refs` option shows the current branches or tags at each commit, making it easier to identify the context of the changes. The `--exclude` option allows you to exclude specific commits from the output by providing a list of commit hashes.

            For example, `git whatchanged --decorate-refs HEAD~3 HEAD~2 HEAD~1` will display the commit messages and branch labels for the three most recent commits (excluding the current one) in the repository. If you want to exclude a specific commit hash, use `git whatchanged --decorate-refs HEAD~3 HEAD~2 HEAD~1 <commit-hash-to-exclude>`.
        mailmap: '[AI] `git whatchanged --mailmap` is a Git command that displays commit messages and author email addresses in a mailto: format. The output shows the commit hash, author date, author name, and the commit message prefixed with "From:" followed by the author email address in mailto: format. This command is particularly useful when working with large numbers of commits or collaborating with teams to quickly identify who made a specific change and contact them easily.'
        quiet: '[AI] `git whatchanged --quiet` is a Git command used to show the commit messages and file changes for the given commit or range of commits in a quiet mode. The output will only include the commit hashes, author names, and dates. It does not display the detailed change log or modified files like other similar commands (e.g., `git log` or `git diff`). This command is useful when you want to retrieve commit information without seeing the extensive output from file changes.'
        source: '[AI] `git whatchanged --source` is a Git command used to display the differences between the current branch and the specified commit in the source code perspective. This means it shows the actual changed lines of code instead of the patch diff format. The output includes the file name, location of change, and the new and old code snippets for each modification. It is particularly useful when you want to understand the impact of a specific commit on the codebase without dealing with the patch syntax.'
        use-mailmap: '[AI] `git whatchanged --use-emailmap` is a Git command used to show detailed changesets with email address information. The `--use-mailmap` option enables Git to look up email addresses in the `.mailmap` file, which maps email addresses to names for better readability and organization of commit messages. This can be helpful when dealing with large repositories or collaborating with a team where multiple developers use different email addresses. The output shows each commit message with author name and email address, making it easier to identify the responsible person for each change.'
