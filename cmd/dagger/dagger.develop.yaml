# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: develop
description: Setup or update all the resources needed to develop on a module locally
group: module
flags:
    --sdk=: New SDK for the module
    --source=: Directory to store the module implementation source code in
persistentflags:
    --focus: Only show output for focused commands
    -m, --mod=: Path to dagger.json config file for the module or a directory containing that file. Either local path (e.g. "/path/to/some/dir") or a github repo (e.g. "github.com/dagger/dagger/path/to/some/subdir")
documentation:
    command: '[AI] `dagger develop` is a command used in Dagger, a build and dependency management tool for Java and Android projects. It initiates an interactive development environment (IDE) experience, allowing you to build, test, and run your application with live reloading in your preferred IDE. This command sets up the necessary configurations and imports your project into the IDE automatically.'
    flag:
        sdk: '[AI] `flag "dashboard develop --sdk"` is a command-line flag used with Dagger, an open-source build tool for Java and Kotlin projects. This flag instructs Dagger to use a specific SDK (Software Development Kit) while developing the project. By specifying the SDK, Dagger ensures that the correct version of required libraries and dependencies are downloaded and managed during the build process.'
        source: |-
            [AI] `flag "dagger develop --source"` is a command used in Dagger, an open-source build tool for Kotlin and Java projects. This command is used to initiate the development workflow, which means it sets up the environment for continuous integration and continuous delivery (CI/CD) of your project using Git as the version control system.

            By using `--source` flag, Dagger will look for the source code in a Git repository specified by the `$GIT_REPO` environment variable or by a URL provided with the `--url` option. Once the connection to the Git repository is established, it sets up a local branch and checks out the latest commit. After that, the build, test, and other tasks are executed against the checked-out codebase.

            This command simplifies the development process by automating several common workflow steps such as fetching the latest changes, building the project, running tests, and creating a pull request (PR) when applicable. It is particularly useful for developers working on large projects with complex build systems or in a team environment where continuous integration and delivery are essential.
