# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test [options]
description: Experimental support for module integration testing
flags:
    -compact-warnings: Use a more compact representation for warnings
    -junit-xml?: also write test results to the given file path
    -no-color: Don't include virtual terminal formatting sequences in the output.
documentation:
    command: '[AI] `terraform test` is a command used in Terraform, an open-source infrastructure as code software tool. It runs a series of automated tests against your configured infrastructure to verify the correctness and consistency of your Terraform configuration files. These tests are written using the Terraform testing framework and can include unit tests, integration tests, and end-to-end tests. The command executes these tests in an isolated environment and reports any failures or errors. By ensuring the reliability and accuracy of your infrastructure definitions, `terraform test` helps minimize potential issues during application deployment and infrastructure changes.'
    flag:
        compact-warnings: '[AI] `terraform test -compact-warnings` is a command used in Hashicorp''s Terraform configuration management tool to run tests on your infrastructure configuration files. The `-compact-warnings` flag is an optional argument that reduces the output of test results to just errors and warnings, suppressing informational messages for a cleaner display. This can be useful when dealing with large test suites or when you want to focus on potential issues in your Terraform configuration.'
        junit-xml: '[AI] `terraform test -junit-xml` is a command used in Hashicorp''s Terraform configuration management tool to run tests and generate JUnit XML format output. JUnit XML is an industry standard format for reporting test results, making it easy for continuous integration systems, like Jenkins or Travis CI, to parse and display the test statuses along with other metrics. In summary, `terraform test -junit-xml` runs Terraform tests and produces a JUnit XML file containing test results, which can be further processed by continuous integration tools.'
        no-color: '[AI] `terraform test -no-color` is a command used in Terraform, an open-source infrastructure as code software tool. This command runs tests on your Terraform configuration files to verify the correctness and reliability of your infrastructure definitions. The `-no-color` flag is an optional argument that disables colored output when running the test command. This can be useful for running tests in scripts or automated environments where colored output may not be desired or supported.'
