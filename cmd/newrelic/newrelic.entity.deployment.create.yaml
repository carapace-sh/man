# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create
description: Create a New Relic entity deployment marker
flags:
    --changelog=: a URL for the changelog or list of changes if not linkable
    --commit=: the commit identifier, for example, a Git commit SHA
    --deepLink=: a link back to the system generating the deployment
    --deploymentType=: type of deployment, one of BASIC, BLUE_GREEN, CANARY, OTHER, ROLLING or SHADOW
    --description=: a description of the deployment
    --groupId=: string that can be used to correlate two or more events
    -g, --guid=: the GUID of the entity associated with this deployment. guid is required.
    -t, --timestamp=: the start time of the deployment, the number of milliseconds since the Unix epoch, defaults to now
    -u, --user=: username of the deployer or bot
    -v, --version=: the version of the deployed software, for example, something like v1.1. version is required.
documentation:
    command: '[AI] The `newrelic entity deployment create` command is used to create a new deployment in New Relic Entity, which is a tool for managing and deploying applications or services monitored by New Relic. This command allows users to define and manage the configuration of their deployments, such as the name, application version, and environment details. When executed successfully, it returns information about the newly created deployment.'
    flag:
        changelog: |-
            [AI] The `newrelic entity deployment create --changelog` command is used in New Relic's API to create a new deployment for an application or infrastructure entity, while also providing a changelog that describes the changes being made during the deployment. It takes the following format:

            ```bash
            newrelic entity deployment create [ENTITY_TYPE] [ENTITY_ID] --changelog "CHANGELOG_MESSAGE"
            ```

            Replace `[ENTITY_TYPE]` with the type of New Relic entity, such as 'application' or 'infra'. Replace `[ENTITY_ID]` with the unique identifier for the entity. `--changlog` is followed by a string in double quotes (`" "`) that describes the changes made during the deployment, which will be recorded as part of the deployment history.

            For example:

            ```bash
            newrelic application deployment create app1 12345 --changelog "Deploying new version v1.0.1 with bug fixes and improvements"
            ```

            This command would create a new deployment for the application with ID `app1` (`12345`) and store the provided changelog message in the deployment history.
        commit: '[AI] The `newrelic entity deployment create --commit` command is used in New Relic''s application performance monitoring tool to create a new deployment of an application entity (such as a Docker container or a Kubernetes pod) and associate it with the latest code commit in the repository. This helps ensure that the deployed code is correctly linked to its corresponding version control history, facilitating easier identification and analysis of performance issues and other metadata.'
        deepLink: '[AI] The `newrelic entity deployment create --deep-link` command is used in New Relic''s software performance monitoring platform to deploy a new version of an application or service, creating a new deployment entity with a deep link. A deep link creates a connection between the new deployment and its previous one, allowing for easier comparison and analysis of performance data between them. This command can be particularly useful when implementing continuous delivery or continuous deployment strategies, as it enables easy tracking and monitoring of each new release.'
        deploymentType: '[AI] The `newrelic entity deployment create` command is used in the New Relic API to deploy a new version of an application or infrastructure entity, such as a web application or APM server. The `--deploymentType` flag specifies the type of deployment being created. It can be set to "rolling" (default), which deploys the new version gradually across instances or hosts, or "blue-green", which involves maintaining two identical production environments and switching traffic between them. Other deployment types might include "canary" or "progressive". The exact behavior of each type depends on New Relic''s specific implementation. Always refer to the New Relic documentation for the most up-to-date information.'
        description: |-
            [AI] The `newrelic entity deployment create` command with the `--description` option is used to create a new deployment in New Relic Entities, which is a feature that allows you to manage and monitor infrastructure components such as Docker containers or Kubernetes pods.

            The `--description` flag is where you provide a brief explanation or label for the deployment. This information helps with identifying and organizing your deployments within the New Relic dashboard.

            For instance, when creating a deployment:

            ```bash
            newrelic entity deployment create --name my-app --environment production --description "Deployment of version 1.0.1"
            ```

            Here, `--description` is set to "Deployment of version 1.0.1", which makes it clear what the purpose and details of this specific deployment are.
        groupId: '[AI] The `newrelic entity deployment create` command is used to deploy a new version of an application or infrastructure entity, such as a web application or database, in New Relic One. The `--groupId` flag specifies the ID of the group, which is a container for organizing and managing related entities within New Relic. When creating a deployment with this command, you can also specify other options like the version name, environment name, or configuration settings, depending on the type of entity being deployed.'
        guid: '[AI] The `newrelic entity deployment create --guid` command is used in New Relic''s CLI (Command Line Interface) tool to create a new deployment for an application or infrastructure entity. The `--guid` option specifies the unique identifier (GUID) of the entity to which this deployment will be associated. This command helps in managing and tracking deployments within the New Relic platform for better application performance monitoring and analysis.'
        timestamp: |-
            [AI] The `newrelic entity deployment create --timestamp` command is used to create a new deployment in New Relic with a specified timestamp. This command is part of the New Relic API and is typically called from the command line or as part of a script.

            Here's a breakdown of the components:

            * `newrelic`: Refers to the New Relic software platform for application performance monitoring.
            * `entity deployment create`: This is the specific API endpoint that creates a new deployment for an application entity (such as a web application or a server).
            * `--timestamp`: This flag sets the deployment's timestamp, which represents the time when the deployment was released to production.

            The output of this command includes the ID and status of the newly created deployment. It can be helpful for managing application deployments and tracking performance metrics in New Relic.
        user: '[AI] The `newrelic entity deployment create` command is used to create a new deployment in New Relic, which is a software analytics company''s platform. This command specifically creates an entity deployment for an application or infrastructure being monitored by New Relic. The `--user` flag specifies the New Relic user account that will be associated with the new deployment.'
        version: '[AI] The `newrelic entity deployment create` command is used to deploy a new version of an application or infrastructure entity (such as a web app or infrastructure component) in New Relic, a cloud-based observability platform. The `--version` flag specifies the version number or tag name for the deployed entity. When you run this command, New Relic creates and deploys a new entity instance with the specified version, allowing you to manage and monitor changes to your applications or infrastructure over time.'
