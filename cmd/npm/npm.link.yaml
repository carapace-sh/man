# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: link
description: Symlink a package folder
flags:
    --audit: Conduct security audit
    --bin-links: Create symlinks for package executables
    --dry-run: Only report changes
    --fund: Display funding message
    --global-style: Use global layout
    --ignore-scripts: Disable scripts
    --legacy-bundling: Use legacy bundling
    --no-save: Prevents saving to `dependencies`
    --omit*=: Exclude package
    --package-lock: Only update package-lock.json
    --save-dev: Package will appear in your `devDependencies`
    --save-optional: Package will appear in your `optionalDependencies`
    --save-peer: Package will appear in your `peerDependencies`
    --save-prod: Package will appear in your `dependencies`.
    --strict-peer-deps: Fail and abort for any conflicting `peerDependencies`
    --workspaces: Enable running a command in the context fo all workspaces
    -E, --save-exact: Save exact package version
    -S, --save: Package will appear in your `dependencies`
    -g, --global: operate in global mode
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm link` is a command used in Node.js package development. It creates a link between the current working directory, which contains a package, and a global package folder. This allows the developer to use the local package as a global module without having to publish it to npm registry first. When you run `npm link`, npm creates a symlink from `node_modules/<local-package-name>` in the current directory to `~/.npm/_global/<local-package-name>`. This enables other projects or Node.js scripts to use the linked package as if it were installed globally.'
    flag:
        audit: '[AI] `npm link --audit` is a command used in Node.js package management with npm (Node Package Manager). This command is used to create symbolic links between local packages and their linked packages in the file system, while also performing an audit of the dependencies to ensure there are no known vulnerabilities or security issues. The `--audit` flag enables the use of npm Audit, a tool that scans installed packages for known security risks and suggests safer alternatives if available. This command is helpful for maintaining project dependencies securely and up-to-date.'
        bin-links: |-
            [AI] `npm link --bin-links` is a command used in Node.js package management with npm (Node Package Manager). This command is used to create a link between a local project and a global package installed via npm, allowing the local project to use the global package as if it were a dependency.

            The `--bin-links` option enables symbolic links for executable files (binaries) of the linked package, making them accessible globally without having to specify the full path to the package's `node_modules`. This can be particularly useful when developing and testing global packages.
        dry-run: '[AI] `npm link --dry-run` is a command used in Node.js package development. It''s part of the npm (Node Package Manager) linking feature, which allows creating global packages from local ones. The `--dry-run` flag is an optional argument that makes this command display what would be done without actually performing the actions. In other words, it provides a simulation or preview of the linking process without altering your project or global package directory.'
        fund: '[AI] `npm link --fund` is a command used in Node.js package development with npm (Node Package Manager). This command facilitates creating a global link between a local project and a registered package in the npm registry. The `--fund` flag is optional and it stands for "follow-symlinks under development", which means when you publish a linked package, npm will follow symlinked packages during installation instead of downloading them again from the registry. This can save time during development but may introduce dependencies that are not published yet to other developers using your package.'
        global: '[AI] `npm link --global` is a command used in Node.js package management with npm (Node Package Manager). This command creates a global link between a local project and the global npm installation. It makes the locally developed package available to be installed and used as a global module across various projects, saving the need for repeating the installation process each time a new project is started. The `--global` flag ensures that the link is created for the global installation rather than a local one.'
        global-style: '[AI] The `npm link --global-style` command is used in Node.js package development. It creates a global link between a local package and the global npm installation. The `--global-style` flag ensures that when you install or link the package globally, it will be installed with its production-ready `package.json` file, including any postinstall scripts, making the linked package behave consistently across different environments.'
        ignore-scripts: '[AI] `npm link --ignore-scripts` is a command used in Node.js package development. It creates a link between a local package and its parent project, allowing the parent project to use the linked package instead of installing it as a dependency. The `--ignore-scripts` flag is optional and disables the running of scripts listed in the linked package''s `package.json` file during the link process. This can be useful when developing packages that have unwanted side effects or scripts that interfere with the development environment.'
        legacy-bundling: '[AI] `npm link --legacy-bundling` is a command used in Node.js package development with npm (Node Package Manager). This command creates a link between a source package and a target package, allowing the source package to be published as a dependency of the target package. The `--legacy-bundling` flag is an option that enables the use of the deprecated bundling method for the linked package in the target package. This can be necessary when using older Node.js versions or libraries that don''t support modern bundling methods like tree shaking.'
        no-save: '[AI] `npm link --no-save` is a command used in Node.js package development. It creates a link between the source and target directories of two npm packages, allowing the source package to be used as a dependency in the target package without adding it to the `package.json` file with `--no-save` option to prevent automatic saving. This is useful for developing and testing dependencies locally before publishing them to the npm registry.'
        omit: '[AI] `npm link --omit` is a command used in Node.js package development. It creates a symbolic link between the source and target directories of two npm packages, allowing them to share dependencies without being published on a registry. The `--omit` flag is optional and means that the current package will not be listed as a dependency in the linked package''s `package.json`. file This command is useful for developing and testing inter-connected packages locally.'
        package-lock: '[AI] `npm link --package-lock` is a command used in Node.js project development with npm (Node Package Manager). This command establishes a link between local packages. The `--package-lock` flag ensures that the linked package uses the same `package-lock.json` file as the source package, ensuring consistent dependencies across projects. This is helpful when developing and testing changes in a library while keeping consumers'' installed packages updated.'
        save: '[AI] `npm link --save` is a command used in Node.js package management with npm (Node Package Manager). This command creates a link between the local development version of a package and its published version in the global npm registry. The `--save` flag indicates that the linked package should be added as a dependency in the `package.json` file of the project, making it easily installable for other developers working on the project.'
        save-dev: '[AI] `npm link --save-dev` is a command used in Node.js package management with npm (Node Package Manager). It establishes a link between the local development directory of a package and its published version in the node_modules folder of another project, creating a symlink. Additionally, it adds the linked package to the `devDependencies` section of the `package.json` file for easy installation and updating across projects.'
        save-exact: |-
            [AI] `npm link --save-exact` is a command used in Node.js package management with npm (Node Package Manager). This command links a local package development dependency to another project at a specific, exact version.

            When you develop a new Node.js package and want to use it as a dependency in another project, you can link the packages instead of publishing them to a registry like npmjs.com and installing them as dependencies via `npm install`.

            The `--save-exact` flag is used to ensure that the exact version of the linked package is saved in the project's `package.json` file, preventing unintended updates when other packages are updated. This can be useful when developing or maintaining projects where dependencies need to remain consistent between builds.
        save-optional: '[AI] `npm link --save-optional` is a command used in Node.js package development with npm (Node Package Manager). It creates a link between the source and target directories of two npm packages, allowing the target package to depend on the source package but without making it a required dependency (saved in `package.json` file under `dependencies` section). This is useful when developing and testing packages where you want to use an optional dependency that can be easily unlinked later.'
        save-peer: '[AI] `npm link --save-peer` is a command used in Node.js package management with npm (Node Package Manager). This command is used for creating global package links between projects, where one project depends on another. The `--save-peer` flag adds the linked package as a peer dependency in the dependent project''s `package.json` file. Peer dependencies are packages that your project needs installed but aren''t directly required by your code. This command simplifies the process of managing and linking interdependent projects during development.'
        save-prod: '[AI] `npm link --save-prod` is a command used in Node.js package development. It creates a symlink between the source and target directories of two npm packages, allowing the target package to depend on the source package at install time. The `--save-prod` flag indicates that this operation should be performed for production dependencies, meaning they will not be listed as devDependencies in `package.json`. This is useful when developing packages that are intended to be used as dependencies by other projects.'
        strict-peer-deps: |-
            [AI] `npm link --strict-peer-deps` is a command used in Node.js package management with npm (Node Package Manager). This command is utilized during development to create a link between local packages in a multi-package project, allowing dependencies between them to be resolved.

            The `--strict-peer-deps` flag ensures that the peer dependencies declared in a package are also installed and available at link time. Peer dependencies are packages that your project depends on, but they're not directly listed as dependencies within your package.json file. Instead, these dependencies are expected to be present in the same environment as your project.

            Using this command ensures that any missing or incorrectly specified peer dependencies are identified and reported during the linking process, helping developers maintain a consistent development environment.
        workspace: '[AI] `npm link --workspace` is a command used in Node.js package development with npm (Node Package Manager). This command creates a symbolic link between packages within a single workspace or monorepo, allowing dependent packages to be shared and reused without publishing them to the npm registry. This can save time during development and simplify the management of inter-package dependencies.'
        workspaces: '[AI] `npm link --workspaces` is a command used in Node.js projects with multiple packages in a single repository, utilizing npm workspaces feature. It creates symbolic links between packages in the linked workspace, allowing changes made in one package to be automatically reflected in other dependent packages without having to manually update them. This is particularly useful for development and testing scenarios where multiple interconnected packages need to be managed as a single project.'
