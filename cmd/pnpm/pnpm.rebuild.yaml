# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rebuild
aliases:
    - rb
description: Rebuild a package
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --pending: Rebuild packages that were not build during installation
    --stream: Stream output from child processes immediately
    --test-pattern=: Defines files related to tests
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -h, --help: Output usage information
    -r, --recursive: Rebuild every package found in subdirectories or every workspace package
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm rebuild` is a command provided by PnPM, a package manager for Node.js projects. It''s used to recompile and rebuild your project with freshly installed dependencies, ensuring that all the modules are up-to-date before running tests or starting the application. When you run `pnpm rebuild`, it will first install missing dependencies based on your `package-lock.json` or `pnpm-lock.yaml` file and then recompile your project using the installed packages.'
    flag:
        aggregate-output: '[AI] `pnpm rebuild --aggregate-output` is a command used with PnPM, a package manager for JavaScript projects. This command instructs PnPM to rebuild all the dependencies of the current project and their dependencies recursively, then output all the bundled files into a single output directory. This can be useful for setting up a production environment where multiple packages need to be ensured to have consistent builds.'
        changed-files-ignore-pattern: '[AI] `pnpm rebuild` is a command provided by the package manager PnPM for rebuilding and compiling your project. The option `--changed-files-ignore-pattern` allows you to specify a regular expression pattern that will be used to ignore certain files from being rebuilt or compiled when running this command. This can help speed up the build process if you have large projects with many files that don''t change frequently, but still want to ensure that only the necessary files are rebuilt. For example, you might use a pattern like `**/*.scss` to ignore all SCSS files during the build process.'
        color: '[AI] `pnpm rebuild` is a command used with the package manager PnPM to rebuild and reinstall all dependencies of a project. The `--color` option enables colored output in the terminal for easier reading and understanding of the command''s progress.'
        dir: '[AI] `pnpm rebuild --dir` is a command used with PnPM, a package manager for JavaScript projects. This command is used to rebuild all outdated dependencies in the current directory and its subdirectories. The `--dir` option specifies that the operation should be performed recursively in the given directory and its child directories. In essence, it ensures that all dependent packages are updated and rebuilt with their latest versions.'
        filter: '[AI] `pnpm rebuild` is a command provided by pnpm, a package manager for Node.js projects. It is used to rebuild and reinstall the dependencies of a project. The `--filter` option filters which packages will be affected by the rebuild command. When you run `pnpm rebuild --filter <regex>`, only the packages that match the provided regular expression will have their dependencies rebuilt and reinstalled. This can help reduce the amount of time it takes to rebuild all dependencies if your project depends on several packages, not all of which need a rebuild at the current moment.'
        filter-prod: |-
            [AI] `pnpm rebuild` is a command provided by pnpm, a package manager for JavaScript projects. It performs an offline build of your project by downloading and compiling the necessary modules in node_modules.

            The `--filter-prod` flag is used to filter the build process only for production dependencies. It tells pnpm to rebuild only the packages that are marked as production dependencies in the package.json or pnpm-lock.yaml files, while skipping the development dependencies.

            As a result, this command can save time and resources by avoiding unnecessary builds of development dependencies during continuous integration or deployment processes.
        help: '[AI] `pnpm rebuild` is a command provided by PnP (Plug''n''Play) package manager for Node.js projects. It is used to ensure that outdated or missing dependencies are installed and rebuilt, so the project can be run with up-to-date packages. The `--help` flag is an option that displays detailed information about how to use this command. When you run `pnpm rebuild --help`, it will print out usage instructions, available options, and their descriptions. This can help users understand how to correctly invoke the command for their specific use case.'
        loglevel: |-
            [AI] `pnpm rebuild` is a command used in the package manager, pnpm, to rebuild and install all the dependencies of a Node.js project. The `--loglevel` option changes the verbosity level of the logs displayed during the build process. Here are the possible log levels:

            1. `error`: Only shows errors.
            2. `warning`: Shows both warnings and errors.
            3. `info`: Shows information messages, including warnings and errors.
            4. `verbose`: Shows detailed information, including info, warnings, and errors.
            5. `silly`: Shows extremely detailed information, including all the logs at other levels plus additional debugging information.

            So, if you run `pnpm rebuild --loglevel verbose`, it will display more detailed information than running just `pnpm rebuild`.
        no-color: '[AI] `pnpm rebuild --no-color` is a command used with PnPM, a package manager for JavaScript projects. The `rebuild` action instructs PnPM to recompile and reinstall all the outdated dependencies in a project. The `--no-color` option disables colored output in the terminal. This can be useful when working in environments where colors may not be supported or desired, such as automated scripts or text editors with limited color capabilities.'
        pending: '[AI] `pnpm rebuild --pending` is a command used with pnpm, a package manager for JavaScript projects. This command is used to rebuild or recompile only the packages in your project that have pending changes or new dependencies. When you make modifications to the source code of a package in your project or add new dependencies, `pnpm` marks those packages as pending. Running `pnpm rebuild --pending` will trigger the rebuilding process for just those affected packages, saving time and resources by avoiding unnecessary recompiles.'
        recursive: '[AI] `pnpm rebuild --recursive` is a command used with the package manager, pnpm. This command performs a fast and cache-efficient offline build of all dependencies in the current project and its sub-dependencies recursively. It compiles, transpiles, and bundles files as necessary while respecting the `node_modules` cache to improve build times. In other words, it ensures that all dependencies are built with the correct versions of their dependencies.'
        stream: '[AI] `pnpm rebuild --stream` is a command used with npm or pnpm package managers to perform tree-shaking and other optimization processes in real-time, as new files are added or changed within a project. This can be useful for continuous integration or development setups where frequent builds are required. The `--stream` option allows the output of the build process to be piped to another command, enabling automated workflows.'
        test-pattern: '[AI] `pnpm rebuild --test-pattern` is a command used with the package manager PnPM (Parallel Npm). It rebuilds the entire project, including installing and compiling dependencies, but only runs tests matching the provided pattern. The tests are executed using the test runner configured in your `package.json` file. This can help save time by skipping unnecessary tests when you''re focused on a specific part of your project.'
        use-stderr: '[AI] `pnpm rebuild` is a command used in the npm package manager, PnPM, to rebuild and install missing dependencies with cache reuse for faster builds. The `--use-stderr` flag is an optional argument that instructs `pnrm rebuild` to print error messages to the standard error stream (STDERR) instead of the standard output stream (STDOUT). This can be helpful when debugging build errors as they are more easily distinguishable from other output in the console.'
        workspace-root: '[AI] `pnpm rebuild` is a command provided by PnPM, a package manager for JavaScript projects. It triggers a recursive rebuilding and compilation of all the packages in a multi-package workspace managed by PnPM, starting from the specified root directory using the `--workspace-root` option. This command helps to ensure that all dependent packages are built with the latest code changes before running tests or building an application.'
