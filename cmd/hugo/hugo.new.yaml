# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: new
description: Create new content for your site
flags:
    --cacheDir=: 'filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/'
    --cleanDestinationDir: remove files from destination not found in static directories
    --disableKinds*=: disable different kind of pages (home, RSS etc.)
    --editor=: edit new content with this editor, if provided
    --enableGitInfo: add Git revision, date and author info to the pages
    --forceSyncStatic: copy all files when static is changed.
    --gc: enable to run some cleanup tasks (remove unused cache files) after the build
    --i18n-warnings: print missing translations
    --ignoreCache: ignores the cache directory
    --minify: minify any supported output format (HTML, XML etc.)
    --noChmod: don't sync permission mode of files
    --noTimes: don't sync modification time of files
    --path-warnings: print warnings on duplicate target paths etc.
    --poll=: set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes
    --print-mem: print memory usage to screen at intervals
    --profile-cpu=: write cpu profile to `file`
    --profile-mem=: write memory profile to `file`
    --profile-mutex=: write Mutex profile to `file`
    --templateMetrics: display metrics about template executions
    --templateMetricsHints: calculate some improvement hints when combined with --templateMetrics
    --trace=: write trace to `file` (not useful in general)
    -D, --buildDrafts: include content marked as draft
    -E, --buildExpired: include expired content
    -F, --buildFuture: include content with publishdate in the future
    -b, --baseURL=: hostname (and path) to the root, e.g. http://spf13.com/
    -c, --contentDir=: filesystem path to content directory
    -d, --destination=: filesystem path to write files to
    -k, --kind=: content type to create
    -l, --layoutDir=: filesystem path to layout directory
    -t, --theme*=: themes to use (located in /themes/THEMENAME/)
documentation:
    command: '[AI] `hugo new` is a command used in Hugo, a popular static site generator for building websites and blogs. It creates a new file or directory structure following the Hugo content layout. When called without any argument, it generates a basic blog post with front matter and Markdown content in the `content/post` folder. With additional arguments, such as `name`, `kind`, or `lang`, you can specify the name of your post or other metadata, create a new directory for another content type like `content/pages`, or generate a file in a specific language, respectively.'
    flag:
        baseURL: '[AI] `hugo new --baseURL` is a command used in Hugo, a popular static site generator for creating websites and blogs. This specific command creates a new Hugo project with the specified base URL. The base URL defines the root URL of your website and is used to generate relative links between pages within the site. By providing a base URL during project creation, you ensure that all subsequent page generation will use this URL as the starting point for generating links and URLs.'
        buildDrafts: '[AI] `hugo new --buildDrafts` is a command used in Hugo, a popular open-source website engine written in Go. This command creates a new blog post or content file with an unpublished draft status in your Hugo site. The `--buildDrafts` flag instructs Hugo to build and serve the draft content during the site generation process, allowing you to view and edit the drafts without publishing them publicly. Once ready, you can promote the draft to a published post by using Hugo''s `publish` command.'
        buildExpired: '[AI] `hugo new --buildExpired` is a command used with Hugo, a popular open-source static site generator written in Go. This specific command creates a new Hugo content file and builds the site, but only if the last build was older than the expiration time set. It''s useful when you want to ensure that your site is always built from fresh content. The flag `--buildExpired` checks the timestamp of the last build before creating and building the new content.'
        buildFuture: '[AI] `hugo new --buildFuture` is a command used with Hugo, a popular static site generator for building websites and blogs. This specific command creates a new content file using the `hugo new` command, and then immediately builds and generates the updated website using the `--buildFuture` flag. This allows you to preview your changes in real-time without having to manually build your site each time you make an update.'
        cacheDir: '[AI] `hugo new --cacheDir` is a command used in Hugo, a popular open-source website framework written in Go. The `--cacheDir` option sets the custom cache directory for Hugo to store generated and downloaded intermediate files during the build process. By default, Hugo uses its system cache, but specifying a custom cache directory allows users to manage and clean up cached files more easily or use it across multiple projects on the same machine without interference.'
        cleanDestinationDir: '[AI] `hugo new --cleanDestinationDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command creates a new content file or a new content directory under the `content` folder with a specified name, and then cleans the destination directory (the `public` folder by default) before building the site anew. This ensures that any previously generated files are removed, which can be helpful when developing and testing changes to your site without retaining old content.'
        contentDir: '[AI] `hugo new --contentDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command creates a new content file or directory within an existing Hugo project, setting the specified path as the content directory. The new file or directory will be located in the specified content directory, ready to be populated with markdown files, images, or other content types that will be processed by Hugo during site generation.'
        destination: '[AI] `hugo new --destination` is a command used in Hugo, a popular open-source static site generator written in Go. This command creates a new content file or directory under the `content` folder with a specified name and saves it to the location specified by the `--destination` flag. For example, `hugo new post/my-new-post --destination ../public/my-new-post` will create a new Hugo post file named `my-new-post.md` under the `content/post` directory and save it to the `../public/my-new-post` location.'
        disableKinds: '[AI] The `hugo new` command with the `--disableKinds` option is used in Hugo, a popular static site generator. This flag disables the creation of certain default file types when creating a new content piece using Hugo''s CLI. By default, Hugo creates several files including Markdown, RSS, and Sitemap files. With `--disableKinds`, you can prevent the creation of specific kinds (file types) when making a new content item. This might be useful when you don''t need some of these default files for your project.'
        editor: '[AI] `hugo new --editor` is a command used in Hugo, a popular static site generator for creating blogs and websites. This specific command creates a new file or content piece under the desired content type (e.g., "posts," "pages," "images") and opens it directly in your default code editor for editing. It allows you to create new content quickly and efficiently without having to navigate through multiple directories or manually open files in your editor.'
        enableGitInfo: '[AI] `hugo new --enableGitInfo` is a command used with Hugo, a popular open-source website framework written in Go. This command creates a new Hugo content file or directory and enables the GitInfo feature for it. GitInfo automatically adds Git commit messages and other metadata as front matter of the created file, which can be useful for versioning and tracking changes to content files within a Git repository.'
        forceSyncStatic: '[AI] `hugo new --force-sync-static` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command creates a new content file or asset file under the `content` directory of your Hugo project, bypassing the normal check to see if a file with the same name already exists. The `--force-sync-static` flag is used to also force synchronization of static files between the source and output directories, ensuring that any changes made to static files are reflected in the generated site.'
        gc: |-
            [AI] `hugo new --gc` is a command used with Hugo, a popular static site generator for creating blogs and websites. The `--gc` flag stands for "git-clean" and is an optional argument for the `new` subcommand.

            When you run `hugo new <contentType> <name>`, it creates a new content file or directory based on the given content type and name, following Hugo's convention for filenames and directories. With the `--gc` flag, it also cleans the git index (staging area) of any untracked files in your project before creating the new content. This helps keep your Git history clean by ensuring that only intended files are added to version control.
        i18n-warnings: '[AI] `hugo new --i18n-warnings` is a command used with Hugo, a popular static site generator. This command creates a new content file or directory using the Hugo template system and enables i18n (internationalization) warnings. These warnings alert you if your content lacks proper language tags or if there are missing translations for specified languages. Enabling these warnings can help ensure that all required translations are included before publishing multilingual websites.'
        ignoreCache: '[AI] `hugo new --ignoreCache` is a command used with Hugo, a popular static site generator written in Go. This command creates a new content file or files within the Hugo project and bypasses the cache to ensure the latest templates and data are used. It''s useful when you want to start a new post or page from scratch without being influenced by previous content, or if you have updated your Hugo themes or configurations and need to regenerate your site with the latest changes.'
        kind: '[AI] `hugo new --kind` is a command used in Hugo, a popular static site generator for building websites and blogs. This specific command creates a new file or set of files with a defined structure based on a given template "kind". The kinds are essentially blueprints that define the folder structure and front matter for various types of content such as blog posts, pages, or sections. When you run `hugo new --kind [kind-name]`, Hugo creates a new file or set of files using the specified kind as a basis.'
        layoutDir: '[AI] `hugo new --layoutDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command creates a new file or set of files for a new page or component within your Hugo project, using the specified layout directory as the source of the layout files. By default, Hugo uses a standard set of layouts in its default layout directory. However, you can create custom layouts and use `--layoutDir` to specify an alternative directory containing your custom layouts for greater flexibility and control over the design and structure of your website or blog.'
        minify: '[AI] `hugo new --minify` is a command used with Hugo, a popular static site generator. This command creates a new file or directory for a new Hugo content piece, and the `--minify` flag enables minification during the build process. Minification reduces the size of HTML, CSS, and JavaScript files by removing unnecessary characters like comments, whitespace, and unused code without changing their functionality. Using this command results in smaller, more efficient files, which can help improve website load times.'
        noChmod: '[AI] The `hugo new` command with the `--noChmod` flag is used in Hugo, a popular static site generator for creating websites and blogs. This flag tells Hugo not to set file permissions after creating a new content file or directory. It allows you to manage file permissions manually instead, which can be useful in certain workflows or when working with specific content management systems or hosting providers.'
        noTimes: '[AI] `hugo new --noTimes` is a command used in Hugo, a popular static site generator. This command creates a new file under the `content` directory with the specified filename. The `--noTimes` flag prevents Hugo from automatically setting the creation and modification time of the file to the current date and time. This can be useful when creating drafts or pages whose publication dates should not be associated with the time of creation.'
        path-warnings: '[AI] `hugo new --path-warnings` is a command used in Hugo, a popular open-source static site generator. This command creates a new file or directory for a new content piece under the specified path while emitting warnings for any existing paths that match the given one, but without overwriting them. The goal is to help users avoid unintentionally creating duplicate content and maintain a consistent file structure in their Hugo-powered website.'
        poll: '[AI] `hugo new --poll` is a command used in Hugo, a popular static site generator for creating websites and blogs. This specific command creates a new content file or directory but does not write the file to disk immediately. Instead, it keeps the file in memory and waits for user confirmation before saving it. The `--poll` flag enables live reloading of changes made to the file, allowing users to see their modifications reflected in the browser almost instantly. Once satisfied with the content, users can save the file definitively by using the `hugo serve` command.'
        print-mem: '[AI] The `hugo new --print-mem` command is used in Hugo, a popular static site generator for creating blogs and websites. This command creates a new file or folder with the specified name under the content directory of your Hugo project, while printing out the memory usage before and after the operation to help you monitor the impact on system resources. The `--print-mem` flag enables the memory usage display.'
        profile-cpu: '[AI] `hugo new --profile-cpu` is a command used with Hugo, a popular static site generator for creating blogs and websites. The `--profile-cpu` option generates a CPU profiling report for the Hugo build process. It helps identify performance bottlenecks by analyzing the time spent on different parts of the build process. This information can be used to optimize the site and improve build times.'
        profile-mem: '[AI] `hugo new --profile-mem` is a command used with Hugo, a popular open-source static site generator for building websites and blogs. This specific command creates a new file or content item using the "memory" profile. The "memory" profile is a configuration option that allows fine-grained control over the build process, in this case optimizing it for generating smaller output files by limiting available memory to Hugo during the build process. It can help improve performance and reduce resource usage when building large sites with many pages or complex themes.'
        profile-mutex: '[AI] The `hugo new` command with the `--profile-mutex` flag is used in Hugo, a popular static site generator for creating new content files or directories while ensuring that multiple profiles don''t create identical content at the same time. The `--profile-mutex` flag enables profile mutexing, which means that if a new content item with the same name already exists under another active profile, you will be prevented from creating a new one. This ensures data consistency across different profiles and helps avoid conflicts when managing multi-profile Hugo projects.'
        templateMetrics: '[AI] `hugo new --templateMetrics` is a command used in Hugo, a popular static site generator for building websites and blogs with ease. The `--templateMetrics` option creates a new Hugo project using a specific template called "metrics." This template is designed to help developers build custom dashboard pages that display various metrics or key performance indicators (KPIs) about their site''s performance. By using this command, you''ll get a starting point for your metrics dashboard with some essential files already included, such as charts generated by popular libraries like Grafana or Prometheus, allowing you to customize and extend the functionality to fit your specific use case.'
        templateMetricsHints: |-
            [AI] `hugo new --templateMetricsHints` is a command used with Hugo, a popular static site generator for creating blogs and websites. This specific command creates a new file or set of files using a pre-defined template named "metricsHints." The "--template" flag specifies the use of this custom template, while "MetricsHints" refers to its name.

            This command is useful when you want to generate a new file structure adhering to specific metrics and hints defined in the MetricsHints template. These metrics can include things like optimal image sizes, SEO-friendly URL structures, or other best practices for high-performing websites. Using this command ensures that your new content conforms to these guidelines from the start.
        theme: '[AI] `hugo new --theme` is a command used with Hugo, a popular open-source static site generator written in Go. This command creates a new Hugo project and applies a specific theme to it from the Hugo theme directory or from a local theme folder. By default, it generates a new blog post, but you can specify other content types such as pages, sections, or even components by appending the desired content type to the command. For example, `hugo new --theme mytheme name-of-new-post --kind posts`. This command sets up the basic file structure and configuration for your new site with the specified theme applied.'
        trace: '[AI] `hugo new --trace` is a command used in Hugo, a popular static site generator written in Go. This command creates a new content file or folder based on a given template, and generates a trace file which records the build process in detail. The trace file can be helpful for debugging build issues and understanding the flow of data during the Hugo build pipeline.'
