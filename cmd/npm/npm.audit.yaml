# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: audit
description: Run a security audit
flags:
    --audit-level=: mnimum level of vulnerability level to exit with non-zero exit code
    --dry-run: only report what would be done
    --json: output as json
    --omit=: omit dependency type
    --package-lock-only: ignore node-modules
    --workspaces: Enable running a command in the context fo all workspaces
    -f, --force: remove various protections against unfortunate side effects
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm audit` is a command provided by Node Package Manager (npm) to check for known vulnerabilities in the project''s dependencies and lockfile. It scans the current package.json and package-lock.json files or a specified package file, then reports any detected security issues along with recommended fixes. You can run it with various flags to change its behavior, such as `--depth` to scan subdependencies or `--json` to output results in JSON format.'
    flag:
        audit-level: |-
            [AI] `npm audit --audit-level` is a command used in Node.js package management system, npm, to check for known vulnerabilities in the project's dependencies with different levels of detail. The available audit levels are:

            1. `low`: Only displays packages with known published vulnerabilities of high severity. This is the default level.
            2. `medium`: Displays both high and medium severity vulnerabilities.
            3. `high`: Displays all vulnerabilities, regardless of their severity levels.

            The command scans the package.json file in your project directory and returns information about any detected vulnerabilities along with suggested actions to mitigate them. The level selected affects the sensitivity of the audit report and the number of packages flagged as potentially vulnerable.
        dry-run: '[AI] The `npm audit --dry-run` command is used to check for known vulnerabilities in the dependencies of a Node.js project without making any changes. It performs an audit scan and lists all the found security issues along with their severity levels, but it doesn''t apply any updates or modifications to your package.json or lock files. This helps you understand which packages have vulnerabilities before deciding whether to address them in a production environment.'
        force: '[AI] The `npm audit --force` command is a feature in Node.js'' package manager (npm) that allows users to install packages with known vulnerabilities despite security warnings. It bypasses the built-in safety checks, potentially exposing projects to potential risks. Using this command should be done with caution, as it could introduce susceptibilities into your project. Always consider evaluating and addressing vulnerabilities through other means like manually updating or seeking alternative packages before using `npm audit --force`.'
        json: '[AI] `npm audit --json` is a command used in Node.js package management system, npm, to generate a JSON report of the security vulnerabilities found in the project''s dependency tree. It scans all packages and their sub-dependencies for known security issues and produces a detailed json output containing information such as the affected package name, version, vulnerability details, and recommended fixes. This can be further processed or analyzed by other tools or scripts.'
        omit: '[AI] `npm audit --omit` is a command used in Node.js package management with npm (Node Package Manager). This command runs a security vulnerability scan on the project''s dependencies using `npm audit`, but it skips reporting or installing updates for the specified packages or dependencies. The `--omit` flag followed by a list of package names allows you to exclude those packages from the security checks and updates. For example, `npm audit --omit=express,lodash` would run an audit without checking or suggesting updates for ''express'' and ''lodash'' packages. This can be useful if you prefer to handle certain vulnerabilities manually or if there are false positives that don''t require immediate attention.'
        package-lock-only: '[AI] `npm audit --package-lock-only` is a command used in Node.js package management with npm (Node Package Manager). This command runs a security audit specifically against the packages listed in the `package-lock.json` file, which stores the exact versions of packages and their dependencies after an installation or production build. By using `--package-lock-only`, users can ensure that only the audited packages specified in the lock file are checked for vulnerabilities, limiting the scope of the audit to those packages. This can save time and resources when dealing with larger projects or when focusing on specific dependencies.'
        workspace: '[AI] The `npm audit --workspace` command is used in Node.js projects to check for known vulnerabilities in the packages listed in a `package.json` file or across an entire workspace (multiple related projects with their own `package.json` files). It scans all the dependencies and devDependencies in the specified packages, and their respective subdependencies recursively, to identify any security issues. The output displays the affected packages and vulnerabilities along with recommended actions and links for more information. This helps developers keep their projects secure by maintaining up-to-date packages and addressing known vulnerabilities.'
        workspaces: '[AI] `npm audit --workspaces` is a command used in npm (Node Package Manager) to perform security vulnerability scans across multiple packages in a workspace, which is a collection of related projects that share common dependencies and build scripts. This command allows developers to easily identify and address potential security risks in their entire project tree. It checks each package in the workspace individually and then summarizes the results, providing suggestions for fixing the issues found.'
