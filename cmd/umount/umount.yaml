# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: umount
description: Unmount filesystems
flags:
    --fake: dry run; skip the umount(2) syscall
    -A, --all-targets: unmount all mountpoints for the given device in the current namespace
    -N, --namespace=: perform umount in another namespace
    -O, --test-opts=: limit the set of filesystems (use with -a)
    -R, --recursive: recursively unmount a target with all its children
    -V, --version: display version
    -a, --all: unmount all filesystems
    -c, --no-canonicalize: don't canonicalize paths
    -d, --detach-loop: if mounted loop device, also free this loop device
    -f, --force: force unmount (in case of an unreachable NFS system)
    -h, --help: display this help
    -i, --internal-only: don't call the umount.<type> helpers
    -l, --lazy: detach the filesystem now, clean up things later
    -n, --no-mtab: don't write to /etc/mtab
    -q, --quiet: suppress 'not mounted' error messages
    -r, --read-only: in case unmounting fails, try to remount read-only
    -t, --types=: limit the set of filesystem types
    -v, --verbose: say what is being done
documentation:
    command: '[AI] `umount` is a Linux utility command used to unmount or detach a mounted file system from the file hierarchy. It allows for safe removal of a file system, ensuring that all data has been written to disk and no processes have open files on the file system before it is unmounted. This helps prevent data corruption and ensures proper system functionality. The basic syntax is `umount [options] [filesystem|/device]`. Options may include specifying forceful unmount (`-f`) or quiet mode (`-q`).'
    flag:
        all: '[AI] `umount --all` is a command used in Linux and Unix-based systems to unmount all mounted filesystems at once. The `--all` option tells the `umount` utility to unmount all currently mounted filesystems, regardless of where they are attached (e.g., /dev/sdX or /mnt/somefolder). It''s important to note that unmounting all filesystems can lead to data loss if there are ongoing write operations. The command should be used with caution and typically requires superuser (root) privileges.'
        all-targets: '[AI] `umount --all-targets` is a command used in Linux to unmount all filesystem targets currently registered with the system''s mount point table. In simpler terms, it detaches the filesystems from their mounted paths (/mnt, /media, etc.) and makes them read-only for further operations or re-mounting. This can be useful before shutting down a system or when you no longer need access to the data on those filesystems.'
        detach-loop: '[AI] The `umount` command with the `--detach-loop` option is used to detach a loop device in Linux file systems. A loop device is a block device that reads data from an ordinary file as if it were a block device. When a file system is mounted using a loop device, this command can be employed to safely unmount the file system and detach the associated loop device. It does not remove the underlying image file but makes the kernel no longer consider the loop device as a mount point, allowing you to make changes to the image file or use it for other purposes without interfering with its mounted state.'
        fake: |-
            [AI] The `umount --fake` command is a utility in Linux and other Unix-like operating systems used to simulate unmounting a file system without actually detaching it from the physical device or network connection. This can be useful in certain situations, such as checking file system consistency before a planned shutdown or reboot, or when dealing with file systems that are in an inconsistent state and need to be handled carefully.

            When you run `umount --fake <device>` or `--fake <mount-point>`, the kernel mark the file system as being unmounted in its internal data structures, but no actual I/O operations are performed, and no files are closed. This allows applications to be notified that the file system is being unmounted, allowing them to perform necessary clean-up tasks, while still keeping the file system accessible for further manipulation.

            Once you're satisfied that everything has been properly cleaned up, you can safely use `umount <device>` or `<mount-point>` to actually detach the file system from its underlying physical media or network connection.
        force: '[AI] The `umount` command with the `--force` option is used to forcibly unmount a file system in Linux. When a file system is mounted, it becomes accessible to the operating system and applications. However, there may be situations where a file system needs to be unmounted but some processes continue to access files on that file system. In such cases, `umount --force` can be used to forcibly unmount the file system, terminating any open processes and making sure no data is being written to the file system before it is unmounted. This can potentially result in data loss if there are unsaved changes in opened files, so it should be used with caution.'
        help: |-
            [AI] `umount` is a Linux command used to unmount filesystems or parts of filesystems. The `--help` option displays detailed information about how to use the `umount` command, including:

            - Syntax: Correct usage and format of the command.
            - Options: Available options with descriptions for customizing the unmount process.
              - `-a`, `--all`: Unmount all mounted filesystems.
              - `-l`, `--detach`: Detach a mounted filesystem without unmounting it, making it ready to be remounted later.
              - `-r`, `--recursive`: Recursively unmount subtree of mounted filesystems.
              - `-t`, `--target`: Specify the device or filesystem to unmount by its mount point.
            - Examples: Practical usage scenarios demonstrating the use of umount with different options.
        internal-only: '[AI] The `umount` command with the `--internal-only` option is used to unmount only internal filesystems in a Linux system. Internal filesystems are those that are directly attached to the system, such as `/dev/sda1`, `/dev/sdc1`, etc. This option does not affect external filesystems, like USB drives or network-attached storage. By unmounting internal filesystems, you can prevent write access and ensure data consistency in case of a system crash or power failure.'
        lazy: '[AI] `umount --lazy` is a command used in Linux and Unix-like operating systems to unmount a filesystem in a lazy or delayed way. When this command is issued, the filesystem is detached from the running file I/O operations but not explicitly closed, allowing any ongoing read or write requests to complete before fully unmounting the filesystem. This can be useful when dealing with large files or heavy I/O loads, ensuring data integrity and avoiding potential data corruption during the unmount process.'
        namespace: '[AI] `umount --namespace` is a command used in Linux file systems to unmount a named namespace associated with a filesystem. A namespace is a mechanism that allows multiple isolated instances of the same system component. In this context, it refers to a filesystem mounted under different namespaces, which might be required for containerization or other advanced use cases. By running `umount --namespace`, you detach the specified filesystem from its current namespace and make it available in others. It does not unmount the actual filesystem but only the association between the filesystem and a specific namespace.'
        no-canonicalize: '[AI] The `umount` command with the `--no-canonicalize` option is used to unmount a file system in Linux without resolving symbolic links on that file system back to their original locations. When this option is not used, `umount` automatically follows symbolic links and unmounts the filesystem at the target of those links instead. Using `--no-canonicalize` prevents this behavior, ensuring that only the explicitly mentioned file systems are unmounted. This can be useful in certain situations where it''s essential to maintain a specific mount point hierarchy or when dealing with complex mount configurations.'
        no-mtab: '[AI] `umount` is a Linux command used to unmount file systems from the operating system. The `--no-mtab` option is an argument that instructs `umount` not to update the `/etc/mtab` file after the unmount operation. This file keeps track of currently mounted file systems, and if not updated, other processes may still try to access the unmounted file system. In summary, using `umount --no-mtab` skips updating the mount table file during unmounting.'
        quiet: '[AI] `umount --quiet` is a command used in Linux and Unix-based systems to unmount a file system. The `--quiet` option silences informational messages that would normally be displayed during the unmount process. This can be useful when automating the mounting and unmounting of file systems or when running the command in scripts.'
        read-only: '[AI] `umount` is a Linux command used to unmount file systems from the operating system. The `--read-only` option instructs `umount` to unmount the specified file system in read-only mode. This means that the file system can no longer be written to, but it can still be read from. This can be useful when troubleshooting file system issues or when removing a device that is still in use by other processes.'
        recursive: '[AI] `umount --recursive` is a command used in Linux and other Unix-like operating systems to unmount filesystems. The `--recursive` option tells umount to unmount not only the specified top-level filesystem but also all its subordinate filesystems (mounted under it) recursively. This can be useful when dealing with complex mount hierarchies.'
        test-opts: '[AI] `umount --test-opts` is a command used in Linux and Unix-based systems to check if a filesystem can be safely unmounted before actually unmounting it. The `--test-opts` option tests the specified mount point with the current mount options without actually unmounting the filesystem. It returns an exit status indicating whether the filesystem can be unmounted or not: 0 means safe to unmount, and non-zero values mean there are possibly open files or other issues that prevent unmounting.'
        types: '[AI] The `umount` is a Linux command used to unmount file systems, detaching them from the file hierarchy and releasing all system resources associated with them. The `--types` option is a filter that specifies which types of file systems to unmount. It takes one or more types as arguments. For example, `umount --types nfs /mnt/nfs` will only unmount NFS file systems mounted under the `/mnt/nfs` directory.'
        verbose: '[AI] `umount --verbose` is a command used in Linux and Unix-based systems to unmount file systems. The `--verbose` option increases the level of output provided by the command, displaying more details about the unmounting process such as the device or mount point being unmounted, any locked files or processes preventing the unmount, and the eventual success or failure of the operation. It is commonly used for debugging or troubleshooting issues with file system access or unmounting.'
        version: '[AI] `umount --version` is a command used in Linux and Unix-based systems to display the version information of the umount utility. Umount is a command line tool used for unmounting or detaching file systems from the file hierarchy, making them no longer accessible. When run with the `--version` option, it prints out the version number and other relevant information such as the operating system it was built for and any compilation flags that were used.'
