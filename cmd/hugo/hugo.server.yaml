# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: server
description: A high performance webserver
flags:
    --appendPort: append port to baseURL
    --bind=: interface to which the server will bind
    --cacheDir=: 'filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/'
    --cleanDestinationDir: remove files from destination not found in static directories
    --disableBrowserError: do not show build errors in the browser
    --disableFastRender: enables full re-renders on changes
    --disableKinds*=: disable different kind of pages (home, RSS etc.)
    --disableLiveReload: watch without enabling live browser reload on rebuild
    --enableGitInfo: add Git revision, date and author info to the pages
    --forceSyncStatic: copy all files when static is changed.
    --gc: enable to run some cleanup tasks (remove unused cache files) after the build
    --i18n-warnings: print missing translations
    --ignoreCache: ignores the cache directory
    --liveReloadPort=: port for live reloading (i.e. 443 in HTTPS proxy situations)
    --meminterval=: interval to poll memory usage (requires --memstats), valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
    --memstats=: log memory usage to this file
    --minify: minify any supported output format (HTML, XML etc.)
    --navigateToChanged: navigate to changed content file on live browser reload
    --noChmod: don't sync permission mode of files
    --noHTTPCache: prevent HTTP caching
    --noTimes: don't sync modification time of files
    --path-warnings: print warnings on duplicate target paths etc.
    --poll=: set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes
    --print-mem: print memory usage to screen at intervals
    --profile-cpu=: write cpu profile to `file`
    --profile-mem=: write memory profile to `file`
    --profile-mutex=: write Mutex profile to `file`
    --renderToDisk: render to Destination path (default is render to memory & serve from there)
    --templateMetrics: display metrics about template executions
    --templateMetricsHints: calculate some improvement hints when combined with --templateMetrics
    --trace=: write trace to `file` (not useful in general)
    -D, --buildDrafts: include content marked as draft
    -E, --buildExpired: include expired content
    -F, --buildFuture: include content with publishdate in the future
    -b, --baseURL=: hostname (and path) to the root, e.g. http://spf13.com/
    -c, --contentDir=: filesystem path to content directory
    -d, --destination=: filesystem path to write files to
    -l, --layoutDir=: filesystem path to layout directory
    -p, --port=: port on which the server will listen
    -t, --theme*=: themes to use (located in /themes/THEMENAME/)
    -w, --watch: watch filesystem for changes and recreate as needed
documentation:
    command: '[AI] `hugo server` is a command used in Hugo, a popular open-source static site generator for building websites and blogs. This specific command starts Hugo''s development server. It watches your source files for changes, generates the updated website using Hugo''s engine, and automatically serves the new content on a local web server at a default address (usually `http://localhost:1313`). The primary purpose of this command is to facilitate live reloading during website development by continuously generating and updating your site as you make changes.'
    flag:
        appendPort: '[AI] `hugo server --appendPort` is a command used with Hugo, a popular static site generator for building websites and blogs in Go. The `--appendPort` option tells Hugo to automatically assign an available port number to its built-in development server besides the default port 131312. This allows multiple instances of Hugo servers running on the same machine without conflicting with each other.'
        baseURL: '[AI] The `hugo server --baseURL` command is used to start Hugo, a popular static site generator, in its built-in development server mode. The `--baseURL` option specifies the base URL of the generated website. This is important because it tells Hugo how to construct the relative paths to resources like images or CSS files, ensuring that they are served correctly when accessed from the browser. The format for the base URL is usually a string starting with "/" and followed by the path prefix of your site, such as "/mywebsitename/".'
        bind: '[AI] `hugo server --bind` is a command used with Hugo, a popular static site generator for creating blogs or websites. The `--bind` option specifies the interface to bind the Hugo development server to. By default, it listens on localhost (127.0.0.1) only. However, using `--bind` followed by an IP address or domain name allows accessing the site from other devices in the same network or remotely. For example, `hugo server --bind 0.0.0.0` will make the site publicly accessible on your machine''s IP address.'
        buildDrafts: '[AI] `hugo server --buildDrafts` is a command used in Hugo, a popular static site generator for building websites. This specific command starts Hugo''s development server with the `--buildDrafts` flag enabled. This flag tells Hugo to also build and serve draft or unpublished content. In contrast, by default, only published content is served when using `hugo server`. This command is useful during content creation and editing stages when you want to see the changes in real-time on a local web server.'
        buildExpired: '[AI] `hugo server --buildExpired` is a command used in Hugos static site generator to build and serve a website, with an added flag to keep expired files. By default, Hugo removes files that are no longer being used from the output directory during the build process. However, the `--buildExpired` flag prevents this behavior, keeping all files regardless of their usage in the final output. This can be useful for testing or debugging purposes when analyzing the behavior of the site generator with older or expired files.'
        buildFuture: '[AI] `hugo server --buildFuture` is a command used in Hugo, a popular static site generator for creating blogs and websites. This specific command starts Hugo''s development server with build future enabled. Build future allows the server to compile and serve multiple versions of your site, supporting time-traveling URLs. These URLs enable previewing content changes before publishing and rolling back to previous versions if needed. It essentially caches multiple builds, enabling easy access to past revisions.'
        cacheDir: '[AI] `hugo server --cacheDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This specific command starts Hugo''s development server with the specified cache directory. The cacheDir argument indicates the location where Hugo will store its compiled intermediate files during the build process to serve them faster on subsequent requests. It helps improve the server''s performance by reducing the need to rebuild all the files every time the server is restarted.'
        cleanDestinationDir: '[AI] The `hugo server --cleanDestinationDir` command is used to start Hugo, a static site generator, in production mode with a clean destination directory. This means that all files in the output directory (specified by the `--destination` flag) will be deleted before generating new content. This can be useful when you want to ensure that the output directory starts with a completely fresh slate before generating new content. For example, if you''re making repeated changes to your site and want to see the results of each change in isolation, this command would help achieve that.'
        contentDir: '[AI] `hugo server --contentDir` is a command used with Hugo, a popular open-source website engine written in Go. This specific command starts Hugo''s development server with the given content directory as the source for building and serving the site. It automatically watches for changes in the content directory and rebuilds the site accordingly, making it ideal for local development and testing.'
        destination: '[AI] The `hugo server --destination` command is used to start Hugo, a popular static site generator for creating blogs and websites, in server mode with the added functionality of specifying an output directory for generated files. This flag allows developers to see their changes in real-time without having to rebuild the entire site every time. The site continues running on a local web server at `http://localhost:1313` by default, and any changes made to Hugo source files are automatically rebuilt and served from the specified destination directory.'
        disableBrowserError: '[AI] The `hugo server --disableBrowserError` command is used to start Hugo, a popular static site generator, with an option that disables browser error warnings. This can be useful when developing a website locally and encountering repeated browser console messages that are not critical to the development process. By using this flag, these non-critical errors or warnings will be suppressed, allowing for a cleaner development environment and reducing potential distractions.'
        disableFastRender: '[AI] `hugo server --disableFastRender` is a command used with Hugo, a popular static site generator for creating blogs or websites. The `--disableFastRender` option disables the use of Hugo''s fast render mode, which employs fewer transformations and preprocessing steps compared to a full build. This results in potentially faster development server start-up time but might yield less optimized output files. It''s useful when you want to test changes quickly without waiting for a complete rebuild or when working on more complex templates.'
        disableKinds: '[AI] The `hugo server --disableKinds` command is used in Hugo, a popular static site generator for creating blogs and websites. The `--disableKinds` flag disables specific content types or kinds in Hugo''s build process. When this flag is passed to the `hugo server` command, it starts the development server without building certain content types defined by their Hugo kind. This allows for faster development iterations and testing changes without rebuilding all content types each time. Commonly used with specific kinds like `sections`, `taxonomies`, or `shortcodes`.'
        disableLiveReload: '[AI] `hugo server` is a command used to start Hugo, a popular static site generator, in production mode with a built-in development server. The `--disableLiveReload` option disables live reloading of the browser when file changes are detected. This means that when you save a change in your Hugo source files, the browser will not automatically update the display. Instead, you must manually refresh the page to see the updated content. This can be useful when working on a large site where live reloading may cause performance issues or interfere with other processes.'
        enableGitInfo: |-
            [AI] `hugo server --enableGitInfo` is a command used with Hugo, a popular static site generator for building websites and blogs. This specific command starts Hugo's development server with an additional feature enabled â Git Info.

            Git Info is a built-in Hugo function that fetches and displays Git repository information (such as commit message, author name, and timestamp) on the generated pages' front matter. It helps to provide useful metadata for each page, especially when working in a version control system. With `--enableGitInfo`, this information will be automatically added to your Hugo-generated site during development, making it easier to see these details while building or testing your site locally.
        forceSyncStatic: '[AI] The `hugo server --forceSyncStatic` command is used to start Hugo, a popular static site generator, in production mode with forced static file syncing. In this mode, Hugo will rebuild the website from scratch each time a change is detected in the source files or templates. This ensures that any changes made to the content or layout are immediately reflected on the server without requiring a manual `hugo` build and file transfer process. The `--forceSyncStatic` flag forces Hugo to overwrite existing static files during the build process, ensuring that the latest versions of these files are served to the user.'
        gc: '[AI] `hugo server --gc` is a command used with Hugo, a popular static site generator written in Go. The `--gc` flag enables the Garbage Collector (GC) during the server build process. By default, Hugo''s server does not run the GC. However, enabling it can help free up memory and prevent potential issues with long-running servers by forcing garbage collection more frequently. This command starts the Hugo server with garbage collection enabled, allowing for a more stable and efficient development environment.'
        i18n-warnings: |-
            [AI] The `hugo server --i18n-warnings` command is used to start Hugo, a popular static site generator, in production mode with internationalization (i18n) warnings enabled.

            When generating a multilingual website with Hugo, i18n warnings can occur when Hugo identifies potential issues with the configuration of language files or content. These warnings don't prevent the build from completing but can cause inconsistencies in how content is displayed across different languages.

            By including the `--i18n-warnings` flag, these warnings will be printed to the console during the build process, allowing you to address them before publishing your site. This can help ensure a more accurate and consistent translation experience for your users.
        ignoreCache: '[AI] `hugo server --ignoreCache` is a command used with Hugo, a popular static site generator. This command starts Hugo''s development server with the `--ignoreCache` flag enabled. The flag instructs Hugo to bypass the cached data and rebuild all files during each server start or file change detection. This can be useful when making frequent changes to content or templates, as it ensures that the latest updates are reflected immediately without having to clear the cache manually.'
        layoutDir: '[AI] `hugo server --layoutDir` is a command used in Hugo, a popular static site generator for creating blogs and websites. This command starts Hugo''s built-in development server with the specified layout directory as the base path to look for templates. In simpler terms, it serves your Hugo site while watching for changes in your layout files. When a change is detected, Hugo rebuilds the site automatically, ensuring that any customizations made to your template files are reflected in real-time during development.'
        liveReloadPort: '[AI] The command `hugo server --liveReloadPort` is used to start Hugo, a popular open-source website builder and static site generator, in production mode with live reloading enabled. The `--liveReloadPort` flag sets the port number for live reloading. When you save a file during development, Hugo will automatically rebuild and update the site on your local browser without the need to manually refresh the page, making it faster and more efficient for testing and previewing changes in real-time.'
        meminterval: '[AI] `hugo server --meminterval` is a command used in Hugo, a popular static site generator for creating websites and blogs. The `--meminterval` option sets the memory caching interval, specifying how long Hugo should wait before checking modified files again and rebuilding the site. A smaller value results in more frequent rebuilds, while a larger value reduces the frequency, which can improve performance but may increase latency for changes to take effect.'
        memstats: '[AI] `hugo server --memstats` is a command used in Hugo, a popular open-source website engine written in Go. This specific command starts Hugo''s development server with memory profiling enabled. The `--memstats` flag requests that Hugo print out detailed memory usage statistics during the server''s runtime. These statistics can help identify memory leaks or optimization opportunities for large and complex websites, ensuring efficient resource utilization.'
        minify: '[AI] `hugo server --minify` is a command used in Hugo, a popular static site generator for building websites and blogs. This specific command starts Hugo''s development server with minification enabled. Minification is a process to remove unnecessary characters (like white spaces, comments, and other metadata) from your HTML, CSS, and JavaScript files without changing their functionality, resulting in smaller file sizes that can help improve website loading times.'
        navigateToChanged: '[AI] `hugo server --navigateToChanged` is a command used with Hugo, a popular static site generator for creating blogs and websites. This specific command starts Hugo''s development server and automatically navigates the browser to the changed file whenever it detects a modification. It streamlines the development workflow by allowing you to see the changes immediately in the browser as you make edits.'
        noChmod: '[AI] The command `hugo server --noChmod` is used to start Hugo, a popular static site generator, in its development server mode without applying file permissions (chmod) changes during the build process. This can be useful for environments where you don''t have permission to modify file permissions directly or when working with specific use cases that require certain permissions. The `--noChmod` flag is an option that disables Hugo from automatically updating the file permissions during the build, allowing you to handle them manually instead.'
        noHTTPCache: '[AI] The `hugo server --noHTTPCache` command is used to start Hugo, a popular static site generator, in production mode without enabling HTTP caching. This means that when you build and serve your website locally using this command, any changes made to files will be reflected immediately without waiting for the cached data to expire. It''s useful during development when you frequently modify content or templates.'
        noTimes: '[AI] The `hugo server --noTimes` command is used to start Hugo, a popular static site generator, in production mode without displaying build timestamps in the console output. This means that Hugo will generate and serve your website with optimized builds but without constantly showing the time taken for each build step during the generation process.'
        path-warnings: '[AI] `hugo server --path-warnings` is a command used with Hugo, a popular static site generator. This command starts the development server and enables path warnings. Path warnings are informational messages that alert you when Hugo encounters file paths that don''t match the expected pattern during the build process. These mismatches might lead to broken links or other issues in your website. By using `--path-warnings`, you can identify and address these potential problems, ensuring a smoother development experience.'
        poll: '[AI] `hugo server --poll` is a command used in Hugo, a popular static site generator for creating blogs and websites. The `--poll` flag instructs the Hugo server to automatically rebuild and serve the website whenever a file is modified in the source directory. This allows for real-time development and previewing of changes without having to manually trigger a build each time.'
        port: '[AI] `hugo server --port` is a command used in Hugo, a popular open-source website engine written in Go. The `server` subcommand starts Hugo''s built-in development server. The `--port` flag sets the port number (default is 1313) on which the server listens for incoming requests. By using this command, you can build and serve your Hugo website locally during development.'
        print-mem: '[AI] `hugo server --print-mem` is a command used with Hugo, a popular open-source static site generator written in Go. This specific command runs Hugo in server mode and prints out the memory usage statistics. It allows developers to monitor Hugo''s memory consumption during the build process.'
        profile-cpu: '[AI] The command `hugo server --profile-cpu` is used with Hugo, a popular open-source static site generator written in Go. This command starts Hugo''s development server and enables CPU profiling while it runs. Profiling helps to identify performance bottlenecks by collecting detailed statistics about how the Go program uses the CPU. The information gathered during profiling can be analyzed later using the `pprof` tool or other profiling visualization tools. By providing a more informed view of where time is spent during runtime, these insights can help developers optimize and improve their Hugo sites'' performance.'
        profile-mem: '[AI] `hugo server` is a command used in Hugo, a popular static site generator for building websites and blogs. The `--profile-mem` flag is an optional argument that enables memory profiling during server execution. This means Hugo will collect data about memory usage by the Go processes it runs, providing insights into which parts of the generation process are using the most memory. This information can be useful for identifying and addressing potential memory bottlenecks in larger or more complex sites.'
        profile-mutex: '[AI] `hugo server --profile-mutex` is a command used with Hugo, a popular static site generator. This option sets up a mutual exclusion profile for Hugo''s server process, meaning only one instance of the server can run at a time on a given machine. When you start the server with this flag, it prevents any concurrent instances from starting, ensuring that your changes are built and served consistently without conflicts.'
        renderToDisk: '[AI] `hugo server --renderToDisk` is a command used with Hugo, a popular static site generator for creating blogs and websites. This specific command starts Hugo''s development server with an added feature: it builds the generated HTML files directly onto your local file system instead of serving them over HTTP as the default behavior does. By doing this, you can easily test how your changes affect the final output, without needing to deploy or serve the site every time you make modifications.'
        templateMetrics: '[AI] `hugo server --templateMetrics` is a command used in Hugo, a popular open-source website engine written in Go. This command starts Hugo''s development server and enables template metrics, which are detailed performance statistics for the templates being rendered during the build process. These metrics help developers analyze and optimize their themes or websites to improve loading times and overall performance.'
        templateMetricsHints: |-
            [AI] `hugo server --templateMetricsHints` is a command used in Hugo, a popular static site generator for creating blogs and websites. This specific command-line argument is used to enable template metrics hints during the build process.

            Template metrics hints are suggestions provided by Hugo's built-in template caching system to help improve the performance of your templates. These hints are based on previous builds and can include information such as unused variables, unused functions, and other potential optimizations. By running `hugo server` with this argument, you enable these hints to be displayed in the console output, allowing you to identify and address any potential issues that could negatively impact your site's performance.
        theme: '[AI] `hugo server --theme` is a command used with Hugo, a popular open-source website engine written in Go. This command starts Hugo''s development server with a specific theme applied. The "--theme" flag indicates which theme directory to use for rendering the website. It helps build and preview your Hugo website locally before deploying it.'
        trace: '[AI] `hugo server --trace` is a command used in Hugo, a popular static site generator for building websites and blogs with Markdown files. This specific command starts the development server with debugging information. The `--trace` flag enables stack traces to be printed when an error occurs during the build process. This helps developers quickly diagnose issues by providing detailed information about the source of the error, making it easier to resolve.'
        watch: '[AI] `hugo server --watch` is a command used with Hugo, a popular static site generator written in Go. This command starts Hugo''s built-in development server and enables live reloading, meaning when you save changes to your Markdown or template files, the site will automatically be rebuilt and refreshed in your web browser without needing to manually rebuild or restart the server. This is particularly useful during content creation or theming development.'
