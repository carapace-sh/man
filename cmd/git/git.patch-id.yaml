# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: patch-id
description: Compute unique ID for a patch
group: low-level helper
flags:
    --stable: use the stable patch-id algorithm
    --unstable: use the unstable patch-id algorithm
    --verbatim: don't strip whitespace from the patch
documentation:
    command: '[AI] `git patch-id` is a Git command used to calculate and print the unique identifier (hash) of a diff or patch stored in the clipboard or given as an argument. This can be useful when sharing patches outside of a Git repository, such as for bug reporting or code review. The command does not create or apply any patches; it only generates their identifiers based on the provided difference between files.'
    flag:
        stable: '[AI] `git patch-id --stable` is a Git command that returns the stable, or base, commit ID associated with a given patch. This command is used to find the commit ID of the common ancestor between two branches or commits. The result is useful when working with merges or resolving conflicts, as it provides a reference point for finding the difference between two sets of changes. By using `--stable`, Git will prioritize the commit that is more likely to be stable and accepted in the long term.'
        unstable: '[AI] `git patch-id --unstable` is a Git command used to generate a unique identifier (ID) for an unstable or work-in-progress patch, often referred to as a "draft" patch in Git. This command calculates the SHA-1 checksum of the current index state, which represents the changes that are staged but not yet committed. The `--unstable` option is used when working with patches outside of a regular branching workflow, such as experimental or developmental changes that may not be ready for merging into a stable branch. The patch ID can then be used to track and compare the differences between the draft and other revisions in the repository.'
        verbatim: '[AI] `git patch-id --verbatim` is a Git command that generates the unique identifier (also known as a "patch ID") for the last committed change in the current branch or the given commit, printed in a raw and unquoted format suitable for use in scripts or other automated processes. The `--verbatim` option ensures that the output is not quoted or escaped in any way.'
