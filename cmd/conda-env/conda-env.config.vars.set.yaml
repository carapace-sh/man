# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set
description: Set environment variables for a conda environment
flags:
    -h, --help: Show this help message and exit.
    -n, --name=: Name of environment
    -p, --prefix=: Full path to environment location
documentation:
    command: '[AI] The `conda-env config vars set` command is used to set environment variable configurations in a Conda environment. It modifies the `.condarc` or environment-specific configuration files to define custom variables that can be referenced and used by other packages or scripts within the environment. These variables can include paths, keys, or any other data that needs to be made available to the environment. For example: `conda-env config vars set MY_VAR="some value"`. This sets a new variable named `MY_VAR` with the given value in the current Conda environment.'
    flag:
        help: |-
            [AI] The `conda-env config vars set` command is used to set configuration variables for a Conda environment in Anaconda or Miniconda. This command allows you to modify the environment's behavior by setting custom variables, which can be useful for managing complex environments.

            The `--help` option provides information on how to use this command with various arguments and options. Here is an outline of what it displays:

            * Usage: Sets environment configuration variables using the name or file path of the target environment.
            * Syntax: `conda-env config vars set NAME [VAR=VALUE]...` or `conda-env config vars set PATH/TO/ENV/FILE [VAR=VALUE]...`
            * Description: Modify configuration variables for an environment. The changes persist across activations.
            * Arguments:
              * NAME: The name of the target Conda environment.
              * PATH/TO/ENV/FILE: The file path to a Conda environment YAML file (e.g., in a .conda folder).
            * Options:
              * --append: Append new variables or update existing ones without overwriting them.
              * --prepend: Prepend new variables, updating the existing ones if they already exist.
              * --unset: Remove specific configuration variables from the environment.
            * Examples:
              * Set a variable for the "myenv" environment: `conda-env config vars set myenv VAR=value`
              * Append or update a variable in the "myenv" environment: `conda-env config vars set myenv --append VAR=new_value`
              * Remove a variable from the "myenv" environment: `conda-env config vars set myenv --unset VAR`

            Using the help option will give you more detailed instructions and examples on how to use this command effectively.
        name: '[AI] The `conda env config vars set` command is used in Anaconda or Miniconda environments to set configuration variables for a specific Conda environment. The `--name` option specifies the name of the environment. For example, `conda env config vars set --name myenv NUM_WORKERS 4` sets the variable `NUM_WORKERS` to `4` in the environment named `myenv`. These configuration variables can be used to customize the behavior of tools or applications installed within that Conda environment.'
        prefix: '[AI] The `conda-env config vars set --prefix` command is used in Anaconda or Miniconda environments to configure the location of the Conda prefix. The prefix is the top-level directory for a Conda installation, where packages are stored. By setting the prefix with this command, you can specify a custom location for your Conda installation, which might be useful if you want to keep multiple installations of Conda on the same system. For example: `conda config --set conda_prefix /path/to/custom/conda`. This sets the prefix for all future Conda invocations in that terminal session. The `--prefix` option is used with the `config vars set` command to explicitly set the prefix variable.'
