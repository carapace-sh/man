# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: apply
description: Apply a patch to files and/or to the index
group: low-level manipulator
flags:
    --allow-overlap: allow overlapping hunks
    --apply: also apply the patch (use with --stat/--summary/--check)
    --build-fake-ancestor=: build a temporary index based on embedded index information
    --cached: apply a patch without touching the working tree
    --check: instead of applying the patch, see if the patch is applicable
    --directory=: prepend <root> to all filenames
    --exclude=: don't apply changes matching the given path
    --ignore-space-change: ignore changes in whitespace when finding context
    --ignore-whitespace: ignore changes in whitespace when finding context
    --inaccurate-eof: tolerate incorrectly detected missing new-line at the end of file
    --include=: apply changes matching the given path
    --index: make sure the patch is applicable to the current index
    --no-add: ignore additions made by the patch
    --numstat: show number of added and deleted lines in decimal notation
    --recount: do not trust the line counts in the hunk headers
    --reject: leave the rejected hunks in corresponding *.rej files
    --stat: instead of applying the patch, output diffstat for the input
    --summary: instead of applying the patch, output a summary for the input
    --unidiff-zero: don't expect at least one line of context
    --unsafe-paths: accept a patch that touches outside the working area
    --whitespace=: detect new or modified lines that have whitespace errors
    -3, --3way: attempt three-way merge, fall back on normal patch if that fails
    -C=: ensure at least <n> lines of context match
    -N, --intent-to-add: mark new files with `git add --intent-to-add`
    -R, --reverse: apply the patch in reverse
    -p=: remove <num> leading slashes from traditional diff paths
    -v, --verbose: be verbose
    -z: paths are separated with NUL character
documentation:
    command: '[AI] `git apply` is a Git command used to apply a patch file, usually created with `git diff`, `git format-patch`, or other tools, to the current working directory or a specific branch or commit. It modifies files as if the changes in the patch were applied through a commit, but without creating a new commit. This can be useful for testing how a proposed change would affect your project before actually committing it.'
    flag:
        3way: '[AI] `git apply --3way` is a Git command used for merging three branches or commits. It applies a patch file generated from a three-way merge tool like `git mergetool` or `kdiff3`. This command resolves merge conflicts by combining changes from two branches and the current working directory into a new commit. Unlike a regular `git merge`, which performs an automatic three-way merge, `git apply --3way` allows for manual resolution of conflicts before committing the result.'
        C: '[AI] `git apply -C` is a command used in Git for applying a patch or a series of patches stored in a file. The `-C` option stands for "checkout" and it tells Git to check out the files in the working directory to the state they will be in after the patch(es) are applied. This can be useful when applying patches from another branch without creating a separate working directory or making a commit. It''s important to note that this command only modifies the working directory and does not affect the staging area or the committed history.'
        allow-overlap: '[AI] `git apply --allow-overlap` is a command used with Git to apply a patch file, even if it contains changes that overlap or conflict with existing changes in the working directory or index. By default, Git does not allow such overlapping changes to be applied together. The `--allow-overlap` option allows these changes to be merged, typically with manual intervention to resolve any conflicts. This can be useful when dealing with complex patches or merging multiple branches that have conflicting changes.'
        apply: '[AI] `git apply` is a command used in Git version control system to apply a commit or a patch file outside of a working directory. The `--apply` option tells Git to apply the changes from the given patch file to the current working directory, without creating a new commit. This can be useful for testing changes before committing them or applying someone else''s changes to your local repository.'
        build-fake-ancestor: '[AI] `git apply --build-fake-ancestor` is a command used in Git to apply a patch file while bypassing the need for an existing common ancestor commit between the current branch and the branch that the patch was created on. In other words, it allows applying a patch even if there are no shared commits between the two branches. This can be useful when working with patches that have been manually modified or created outside of Git, such as text editors or other tools. The `--build-fake-ancestor` option instructs Git to automatically create and use a fake common ancestor commit to apply the patch.'
        cached: '[AI] `git apply --cached` is a command used in Git version control system to apply staged changes from the index to the working directory or to create a patch file. It applies only the differences that have been marked for commitment with `git add`, leaving the working directory and the index unchanged if no files are selected with an argument. The command can also generate a patch file, which can be applied elsewhere using `git apply`.'
        check: '[AI] `git apply --check` is a command used with Git to apply a patch file without actually making any changes to the working directory or repository. The `--check` option performs a dry run, which means it simulates the application of the patch and reports any conflicts that would occur if the patch were applied in real life. This can help prevent unintended modifications to your codebase.'
        directory: '[AI] `git apply --directory` is a command used in Git for applying patches from a file or standard input, but instead of applying the patch to the current working directory, it applies the patch to a specific sub-directory within your repository. By specifying the directory path with `--directory`, changes made by the patch will only affect that particular directory and its subdirectories, leaving other parts of the project untouched. This can be useful when you want to apply patches selectively to different areas of your project without affecting others.'
        exclude: '[AI] `git apply --exclude` is a command used to apply a patch file to a Git repository but exclude specific files or directories from the changes. The `--exclude` option followed by a regular expression pattern allows specifying which files or directories should not be modified during the patch application process. This can be useful when you want to apply a patch selectively while leaving certain files untouched.'
        ignore-space-change: '[AI] `git apply --ignore-space-change` is a command used in Git version control system for applying a patch file (created using `git diff > patchfile.diff`) while ignoring changes in white spaces, such as tab vs. space indentation. This option allows developers to merge code changes without conflicting over formatting differences.'
        ignore-whitespace: '[AI] `git apply --ignore-whitespace` is a command used in Git for applying a patch file, ignoring any differences in whitespace formatting between the files in the patch and the corresponding files in the working directory. This can be useful when dealing with code changes where the preferred whitespace style may differ between developers or projects. By running `git apply --ignore-whitespace`, Git will ignore any conflicts related to whitespace and attempt to apply the rest of the changes in the patch file.'
        inaccurate-eof: '[AI] `git apply --inaccurate-eof` is a Git command used to apply a patch file even if it contains an inaccurate End-Of-File (EOF) marker. By default, Git requires that the last line of a patch file ends with a blank line to mark the EOF. If a patch file lacks this blank line or has an extra one, Git will reject its application. However, `--inaccurate-eof` option allows Git to ignore such inconsistencies and apply the patch file anyway. This can be useful when dealing with patches that were generated under different circumstances or configurations.'
        include: '[AI] `git apply --include` is a command used in Git version control system for applying patch files (created by `git diff` or other tools) to the current working directory or a specific file. The `--include` option tells Git to apply only the patches that match the given file pattern, instead of applying all patches in the patch file. This can be useful when dealing with large patch files that contain multiple unrelated changes.'
        index: '[AI] `git apply --index` is a Git command used to apply a patch or changes from an index (staging area) to the working directory. It reads a patch from a file, or applies the differences from the current index, and makes those changes in the working directory. The effect is similar to using `git checkout` to get the changes from the index into the working directory, but without committing those changes. This command does not create a new commit.'
        intent-to-add: '[AI] `git apply --intent-to-add` is a command used in Git version control system to prepare a patch for a new file or changes to existing files, with the intention of committing those changes later. The "--intent-to-add" option creates a new commit in the index, but it doesn''t actually create a new commit in the repository until you explicitly run "git commit". This command allows you to preview and adjust the staging area before making a commitment.'
        no-add: '[AI] `git apply --no-add` is a command used in Git version control system to apply a patch file without adding any new files to the working directory or the staging area. The `--no-add` option tells Git not to automatically add newly created or modified files during the application process. This can be useful when you want to manually manage which files to add after applying the patch.'
        numstat: '[AI] `git apply --numstat` is a command used in Git to display the number of added and deleted lines for each file when applying a patch or commit. The output is presented in a tabular format, with columns representing the file name, the number of added lines, and the number of deleted lines. This command can be useful for quickly assessing the impact of a patch before actually applying it.'
        p: '[AI] `git apply -p` is a Git command used to apply a patch file interactively. The `-p` option enables an interactive mode where changes are presented in a series of hunks, allowing you to review and edit each hunk before committing the changes. This can be useful when applying patches with complex or potentially conflicting changes. After editing the hunks, you can use Git commands like `git add` to stage the changes and `git commit` to create a new commit.'
        recount: '[AI] `git apply --rebase-merge` is a Git command used to apply a patch or a series of patches stored in a file or standard input, while creating a new commit for each one in the current branch. It''s an alternative to using `git checkout -p`, `git diff`, and then manually applying the changes with `git add`. This command automatically merges the changes from the patch into the current branch, resolving any conflicts that may arise. The `--rebase-merge` option tells Git to use a three-way merge (similar to `git rebase`) instead of a fast-forward update when applying the patch, which can help maintain a linear commit history.'
        reject: '[AI] `git apply --reject` is a Git command used to apply a patch file but leave rejected changes in the working directory instead of committing them. When you run this command, Git applies the patch as it normally would, but any changed lines that conflict with the existing files are marked with ">>>" and labeled with the author of the patch. This allows you to manually resolve the conflicts before committing the changes. The rejected changes are saved in files with a suffix `.reject`, which can be found in the working directory alongside the original files.'
        reverse: '[AI] `git apply --reverse` is a command used in Git version control system to apply a patch file in reverse order. It applies the changes specified in the patch file in the opposite direction, effectively undoing the changes instead of introducing them. This can be useful for reverting specific changes made to the repository.'
        stat: '[AI] `git apply --stat` is a Git command used to apply a patch file and display a summary of the changes it will make before applying them permanently. The `--stat` option generates a stat-like output, which shows the differences between the files in the working directory and those in the patch file. This can help users review and understand the changes before deciding whether to apply the patch with the `git apply` command or not.'
        summary: '[AI] `git apply --summary` is a Git command used to display a summary of what each patch in a series of patches does, without actually applying the patches. It''s often used to review the changes that will be made before deciding whether or not to apply them. The output shows the filename affected by each patch and a brief description of the change.'
        unidiff-zero: '[AI] `git apply --unidiff-zero` is a command used with Git to apply a patch file without generating any output for the diff between the current and proposed state, i.e., it only shows the changeset introduced by the patch, discarding the difference between the original and modified files. This can be useful when you want to apply multiple patches in a scripted environment where you''re not interested in seeing the intermediate diffs.'
        unsafe-paths: '[AI] `git apply --unsafe-paths` is a command used in Git version control system to apply a patch file with paths that may cause issues due to being outside the current working directory or repository. By default, Git refuses to apply patches containing such paths for security reasons. However, using the `--unsafe-paths` option allows applying these patches despite the potential risks. It''s essential to be cautious when using this command since it may introduce unwanted changes or vulnerabilities if used with untrusted patch files.'
        verbose: '[AI] `git apply --verbose` is a command used in Git version control system to apply a patch file or a commit''s changes to the current working directory. The `--verbose` option increases the amount of output, displaying detailed information about each applied hunk (a piece of code) and its resulting differences. This can be helpful for understanding exactly what changes are being made by the applied patch or commit.'
        whitespace: '[AI] `git apply --whitespace` is a command used in Git version control system to apply a patch file with a focus on checking and correcting whitespace differences between files in the patch and the working directory. The option `--whitespace` enables Git to check for various whitespace errors, such as trailing whitespaces or inconsistent line endings, and suggests automatic fixes using an editor for further confirmation before committing the changes.'
        z: '[AI] `git apply -z` is a Git command used to apply a patch with zero-length file changes. This command does not modify the working directory or any files, but only applies the patch for viewing or processing its metadata, such as commit messages or author information. It''s often used with other commands like `grep`, `sed`, or `awk` to perform text operations on the patch data itself.'
