# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gocyclo
description: Calculate cyclomatic complexities of Go functions
flags:
    -avg: show the average complexity over all functions
    -avg-short: show the average complexity over all functions without a label
    -ignore=: exclude files matching the given regular expression
    -over=: show functions with complexity > N only
    -top=: show the top N most complex functions only
    -total: show the total complexity for all functions
    -total-short: show the total complexity for all functions without a label
documentation:
    command: |-
        [AI] `gocyclo` is a Go tool used for extracting and generating CycloneDX Bill of Materials (BOM) files from source code dependencies. It parses `go.mod` files, analyzes direct and transitive dependencies, and generates a corresponding CycloneDX SBOM (Software Bill of Materials) in XML format. The main usage is:

        ```bash
        gocyclo [<flags>] <output-file> [<package-import-path>...]
        ```

        The tool can also be integrated with continuous integration and delivery pipelines, allowing automatic generation of SBOM files during the build process.
    flag:
        avg: '[AI] `gocyclo` is a statistical analysis tool for cyclic data, developed in R language. The command `gocyclo -avg` specifically requests the average circular statistics output from the analysis of input cyclic data. It computes the angular mean and other circular statistics such as standard deviation, circular variance, and other related measures to describe the central tendency and dispersion of the input data.'
        avg-short: '[AI] `gocyclo` is a command-line tool for analyzing Go source code. The `-avg-short` flag is an option provided by this tool. It calculates and prints the average cyclomatic complexity of all the files in the current directory or a specified Go module, using a shorter format to display the results. Cyclomatic complexity is a software metric used to estimate the complexity of source code modules based on control flow graphs. This flag provides a more concise output that focuses mainly on the average value and the number of files analyzed.'
        ignore: '[AI] `go cyclo -ignore` is a command used in Go programming language to run the Cyclo static code analysis tool with an optional flag to ignore certain files or directories during the analysis process. This can be useful when there are specific parts of your codebase that you don''t want Cyclo to check, such as large generated files or test data. The `-ignore` flag accepts a list of file globs or directory paths separated by commas. For example: `go cyclo . -ignore=''*.go *_test.go**/api/*''` would analyze all Go files in the current directory excluding those with ''.go'' extension, ''_test.go'' suffix and located in any subdirectory named ''api''.'
        over: '[AI] `gocyclo over` is a command used in Go programming language for applying cyclic imports between Go source files. The `over` flag enables the process to recursively handle cyclic dependencies, allowing the `go:cyclo` tool to find and suggest resolutions for them. This can be helpful when dealing with complex projects where circular references are common.'
        top: '[AI] `gocyclo -top` is a command from the Go Cycle dependency analysis tool. This command displays the cyclic dependencies at the top level of a Go module, meaning it will show the main packages and their dependencies that form circular references. It helps developers identify and address circular dependencies within their codebase to improve modularity and maintainability.'
        total: '[AI] `gocyclo` is a tool used for cyclic imports analysis in Go language. The command `gocyclo -total` performs a full analysis of all packages in the current Go module, recursively following dependencies and reporting any circular imports that are detected. It calculates the total number of circular imports and displays it in the output, making it useful for identifying complex cyclic import structures and maintaining a healthy codebase.'
        total-short: '[AI] `gocyclo` is a tool for converting Go source code to Cyclone DDS, an Object Technology International (OTI) Data Distribution Service (DDS) for the Go programming language. The `-total-short` option is used with `gocyclo` to generate short and complete IDL (Interface Description Language) files for all Go packages in a project. It produces concise and easy-to-understand IDL definitions, reducing the amount of manual work required for DDS development.'
