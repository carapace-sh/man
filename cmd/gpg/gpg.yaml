# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gpg
description: OpenPGP encryption and signing tool
flags:
    --card-status: print the card status
    --change-passphrase: change a passphrase
    --change-pin: change a card's PIN
    --check-signatures: list and check key signatures
    --clear-sign: make a clear text signature
    --delete-keys: remove keys from the public keyring
    --delete-secret-keys: remove keys from the secret keyring
    --edit-card: change data on a card
    --edit-key: sign or edit a key
    --export: export keys
    --fingerprint: list keys and fingerprints
    --full-generate-key: full featured key pair generation
    --generate-key: generate a new key pair
    --generate-revocation: generate a revocation certificate
    --import: import/merge keys
    --list-signatures: list keys and signatures
    --lsign-key: sign a key locally
    --openpgp: use strict OpenPGP behavior
    --print-md: print message digests
    --quick-add-uid: quickly add a new user-id
    --quick-generate-key: quickly generate a new key pair
    --quick-lsign-key: quickly sign a key locally
    --quick-revoke-sig: quickly revoke a key signature
    --quick-revoke-uid: quickly revoke a user-id
    --quick-set-expire: quickly set a new expiration date
    --quick-sign-key: quickly sign a key
    --receive-keys: import keys from a keyserver
    --refresh-keys: update all keys from a keyserver
    --search-keys: search for keys on a keyserver
    --send-keys: export keys to a keyserver
    --server: run in server mode
    --sign-key: sign a key
    --textmode: use canonical text mode
    --tofu-policy=: set the TOFU policy for a key
    --update-trustdb: update the trust database
    --verify: verify a signature
    -K, --list-secret-keys: list secret keys
    -a, --armor: create ascii armored output
    -b, --detach-sign: make a detached signature
    -c, --symmetric: encryption only with symmetric cipher
    -d, --decrypt: decrypt data (default)
    -e, --encrypt: encrypt data
    -i, --interactive: prompt before overwriting
    -k, --list-keys: list keys
    -n, --dry-run: do not make any changes
    -o, --output=: write output to FILE
    -r, --recipient=: encrypt for USER-ID
    -s, --sign: make a signature
    -u, --local-user=: use USER-ID to sign or decrypt
    -v, --verbose: verbose
    -z=: set compress level to N (0 disables)
documentation:
    command: '[AI] `gpg` is a versatile open-source data encryption and decryption tool known as the GNU Privacy Guard. It provides cryptographic signing and verification for data integrity, as well as symmetric and asymmetric encryption for data confidentiality. GPG supports various algorithms like RSA and ElGamal, and can be used to create and manage keys, protect files with passwords, and sign and verify digital documents and communications.'
    flag:
        armor: '[AI] `gpg --armor` is a command-line option used with GnuPG (GPG) to generate OpenPGP-format keyrings or encrypt, sign, or verify data and files. The `--armor` flag produces ASCII- Armored output which makes the result human-readable. This formatting includes headers and trailers that enable the data to be easily transferred via email or other text-based means. It is widely used for distributing public keys over the internet, as the armored format can be easily attached to an email or saved as a file.'
        card-status: '[AI] `gpg --card-status` is a command used in GnuPG (GPG) to display the current status of smart cards or tokens connected to your system. It shows detailed information about each card, including its label, serial number, manufacturer, model name, and the keys stored on it. The output also indicates whether each key is marked as trusted and its key ID. This command helps users manage and keep track of their GPG keys secured on hardware tokens.'
        change-passphrase: '[AI] `gpg --change-passphrase` is a command used in GnuPG (GNU Privacy Guard) to change the passphrase associated with a specific key or a keyring. This operation is necessary when you want to update an existing passphrase due to security reasons or if you have forgotten it. The command takes the path of the secret key file as its argument and interacts with the user to enter the current passphrase, followed by the new passphrase twice for verification. Once confirmed, GPG updates the key''s passphrase record in the keyring.'
        change-pin: |-
            [AI] `gpg --change-pin` is a command in the GnuPG (GPG) cryptography suite used to modify or reset the passphrase associated with a key's private keys, also known as the Personal Identification Number (PIN) for smartcard keys. The command allows users to set a new passphrase or remove the need for a PIN altogether.

            For example, `gpg --change-pin <keyid>` can be used to change the passphrase of a key with the given ID. To reset a forgotten PIN on a smartcard key, use `gpg --change-pin --loopback`. Note that this operation should only be performed by the key's owner or someone who has been granted permission. The new passphrase must be entered when prompted to complete the process.
        check-signatures: '[AI] `gpg --check-signatures` is a command used in GnuPG (GPG) to verify the authenticity of digital signatures attached to data or files. It checks the integrity of the signed data and verifies that the signature was created by a known trusted key. The output indicates if the signature is valid, and displays relevant information such as the signer''s name, key ID, and creation time. This command ensures data hasn''t been tampered with since it was signed.'
        clear-sign: |-
            [AI] `gpg --clear-sign` is a command used in GnuPG (GPG) for signing data or files with an existing OpenPGP key. It appends a detached signature to the input data, which can be verified later without requiring access to the private key.

            The process involves reading the data to sign, encrypting it with the recipient's public key (optional), then signing the data using the creator's private key. The resulting output contains both the signed data and the detached signature. To clear the signature, the --clear-sign option is used, which generates a new detached signature file instead of appending it to the original data.

            This command is commonly used for digital signatures in various applications, such as secure communications or software distribution, ensuring non-repudiation and data integrity.
        decrypt: '[AI] `gpg --decrypt` is a command in GnuPG (GPG is the Open Source implementation of the OpenPGP standard for data encryption and decryption) used to decrypt files or text with symmetric or asymmetric encryption using the private key of their respective recipients. The flag `--decrypt` instructs GPG to decrypt the specified encrypted data, usually a file or data stream. In order to use this command, you must have access to the private key used for encryption, which is typically stored in a keyring. When run, GPG will output the decrypted data to standard output by default.'
        delete-keys: '[AI] `gpg --delete-keys` is a command used in GnuPG (GPG) to delete one or more cryptographic keys from a keyring. The command takes as an argument the key ID or username associated with the key to be deleted. When executed, the specified key will be permanently removed from the keyring and cannot be recovered without using a backup. It''s important to use this command carefully since deleting a key may impact the ability to decrypt or sign data associated with that key.'
        delete-secret-keys: '[AI] `gpg --delete-secret-keys` is a command used in GnuPG (GPG) to delete one or more secret keys from your keyring. Secret keys are the private counterparts of public keys and are protected by a passphrase. When you run this command, you provide the ID or the file path of the secret key you want to delete as an argument. The command deletes the corresponding secret key and its associated primary key if there are no other subkeys attached to it. After deletion, the private data is securely wiped from your system. This command should be used with caution as once deleted, the keys cannot be recovered.'
        detach-sign: '[AI] `gpg --detach-sign` is a command in GnuPG (GPG) used for creating a detached signature on a file or data. It doesn''t directly modify the data but instead generates a separate signature file, which can be verified against the original data later. This command creates an ASCII armored signature using the specified key and output it to a file or standard output. When you want to verify the authenticity of a message or a file without modifying it, detached signatures provide an effective solution.'
        dry-run: '[AI] `gpg --dry-run` is a command-line option for GnuPG (GPG) that allows users to test and preview actions without actually applying them. This can be useful in various scenarios such as checking the output of a command before running it on actual data, or verifying the syntax of commands. When used with other options and arguments, `--dry-run` will print the steps GPG would take if the command was run for real but does not make any changes to keys or data.'
        edit-card: '[AI] `gpg --edit-card` is a command used in GnuPG (GNU Privacy Guard) to edit and manage information on a smart card or a YubiKey token stored in a GPG keyring. The command opens an editor interface for the specified card, allowing you to modify its data, such as personal identification information, expiration dates, or other attributes. It provides a convenient way to update your cryptographic keys securely and efficiently.'
        edit-key: |-
            [AI] `gpg --edit-key` is a command in GnuPG (GPG is the GNU Privacy Guard) used to edit existing OpenPGP keys. When you run this command with the email address or key ID of the desired key, GPG opens the key in its editor where you can perform various tasks such as:

            1. Change user identification data (name, email, comment).
            2. Set expiration dates for subkeys.
            3. Add, delete or modify trust and validity flags.
            4. Manage access permissions.
            5. Generate a new subkey of a different algorithm.
            6. Perform key signing operations (signing other keys with your own).
            7. Export the edited key.

            Keep in mind that making changes to keys, especially trust settings, should be done carefully and ideally only by the key owner or someone they have granted permission to do so.
        encrypt: '[AI] `gpg --encrypt` is a command used in GnuPG (GNU Privacy Guard) for encrypting files or data with symmetric or asymmetric encryption. It takes the following format: `gpg --encrypt --recipient <recipient_email> --output <output_file> <input_file>`. The recipient''s email address is used to identify the public key of the person who will decrypt the message. The encrypted data is written to an output file, while the original input file remains unchanged. This command ensures secure transmission and storage of sensitive information.'
        export: '[AI] `gpg --export` is a command in the GnuPG (GPG) encryption tool used to export the public or private keys of an existing key into a file. The exported key can be shared with others for secure communication or verification. You need to specify the key ID or the email address associated with the key using options like `--export-secret-keys` for private keys and `--export-public-keys` for public keys. For example: `gpg --export-secret-keys <keyID> > secret_key.asc` or `gpg --export-public-keys user@email.com > public_key.asc`.'
        fingerprint: '[AI] `gpg --fingerprint` is a command used in GnuPG (GPG) to display the cryptographic keys'' identification information, which includes the key ID, user ID, and the key''s fingerprint. A fingerprint is a unique digital signature that identifies the public key. It''s calculated by taking the hash value of the key at different stages of its creation process. By comparing fingerprints, you can ensure the authenticity of the key you are interacting with.'
        full-generate-key: '[AI] `gpg --full-generate-key` is a command used in GnuPG (GPG is the Open Source implementation of the OpenPGP standard) to generate a new, full cryptographic key pair. This includes both a public key and a private key. The user is prompted to enter various options such as the key type (RSA or RSA-ELGAMAL/ELG-E), key size, expiration dates, and a passphrase for added security. The newly generated keys can be used for digital signatures and encryption.'
        generate-key: '[AI] `gpg --generate-key` is a command used in GnuPG (GPG) to generate a new cryptographic key pair for data encryption and digital signature creation. This command initiates an interactive process where the user specifies various details such as key type (RSA, RSA-ELGamal, DSA, or ELGamal), key length, expiration date, real name, email address, etc. The newly generated public key can be shared with others for encryption and decryption of data, while the private key is kept secret for creating digital signatures. This command helps ensure secure communication and data protection.'
        generate-revocation: '[AI] `gpg --generate-revocation` is a command in GnuPG (GPG) used to generate a key revocation certificate. This certificate can be used to inform Keyservers and recipients that a specific public key should no longer be trusted. The command generates a revocation certificate for an existing private key, which can then be distributed and published. This helps maintain the security of the keyring by allowing keys to be effectively retired when compromised or no longer needed.'
        import: '[AI] `gpg --import` is a command used in GnuPG (GPG) to import public or secret keys into the keyring. The user specifies the file path containing the private or public key using the "-f" option followed by the filename. For instance, `gpg --import mykey.asc` imports the public key from the file "mykey.asc". Importing a key allows for encrypting and decrypting data with that specific key or verifying signed data. This command is essential for sharing and managing encryption keys in secure communications.'
        interactive: '[AI] `gpg --interactive` is a command-line utility of GnuPG (GPG) used to create or manage symmetric and asymmetric encryption keys, as well as sign or decrypt data interactively in the terminal. Interactive means that the user will be prompted to provide inputs such as passphrases, decryption keys, or confirmation for an operation, rather than having to prepare a configuration file beforehand. This provides added security and convenience by avoiding storing sensitive information in files that could potentially be accessed by unauthorized users.'
        list-keys: '[AI] `gpg --list-keys` is a command used in the GnuPG (GPG) encryption software suite to display a list of all available public and private keys that are stored locally on your system. The output shows essential information about each key, such as its key ID, length, algorithm used for encryption, creation and expiration dates, and the user IDs associated with each key. This command helps users manage their cryptographic keys by providing them with an overview of all available keys and their relevant details.'
        list-secret-keys: '[AI] `gpg --list-secret-keys` is a command used in GnuPG (GPG) to display a list of all the private and public OpenPGP keys stored in your keyring. The output includes details such as key ID, length, creation time, and usage (primary or subkey). This command helps users manage and keep track of their encryption keys for secure data handling.'
        list-signatures: '[AI] `gpg --list-signatures` is a command used in GnuPG (GPG) to list all digital signatures stored in the keyring. The output shows details such as the signature creation time, the key that created the signature, and the data or file that was signed. It helps users verify the authenticity of previously signed documents or messages.'
        local-user: '[AI] The `--local-user` option in GPG (GNU Privacy Guard) is used to specify a particular local key or keys for signing, decrypting, or managing operations. This option allows users to work with multiple sets of keys and select the desired one for the current operation. It takes an email address or a key ID as an argument. For example, `gpg --local-user myemail@example.com --decrypt file.gpg` would decrypt `file.gpg` using the keys associated with `myemail@example.com`.'
        lsign-key: '[AI] `gpg --lsign-key` is a command used in GnuPG (GPG) for signing keys. This command does not list keys but instead signs one or more existing keys with your own signed key. By doing this, you are increasing the trust level of the signed key and allowing others to verify your signature on it. The result is an increased security of the key-pair as the signed key can now be used to authentically sign messages or documents.'
        openpgp: '[AI] `gpg --openpgp` is a command used in GnuPG (GPG), an open-source data encryption program. This specific command is for interacting with OpenPGP keys and data. OpenPGP stands for Open Privacy Global Protection for Data Processing. It''s a widely-used standard for public-key cryptography, enabling digital signatures, symmetric encryption, and key management. The `gpg --openpgp` command can be used to manage and manipulate these keys, as well as work with signed/encrypted data using the OpenPGP format.'
        output: '[AI] The `--output` option in GPG (Gnu Privacy Guard) is used to specify a file name and location for saving the output of various GPG commands or operations. For instance, when encrypting a file using symmetric encryption with a passphrase, you can use `--output` to save the generated key or ciphertext in a file instead of printing it to the console. Similarly, during the decryption process, specifying an output file helps write the plain text data to that file instead of displaying it on the terminal.'
        print-md: '[AI] `gpg --print-md` is a command used in GnuPG (GPG) to print the Message Digital Signature Algorithm (MD) checksums of data passed to it. Specifically, it calculates and outputs the Message Digest (MD) hashes using various algorithms such as MD5, SHA1, or SHA256. These hash values serve as a digital fingerprint of the input data and can be used for data integrity checks.'
        quick-add-uid: '[AI] `gpg --quick-add-uid` is a command in GnuPG (GPG) used to quickly add a new user ID to an existing key. The command takes the user ID as its argument, which can be provided in various formats including email address or name and comment. This command does not require any interaction with the key signing process or keyservers, making it faster than other methods for adding user IDs. Once added, the new user ID is encrypted with the passphrase associated with the key.'
        quick-generate-key: '[AI] `gpg --quick-generate-key` is a command in GnuPG (GNU Privacy Guard) used to create a new symmetric or asymmetric encryption key pair. The command generates a key with default settings, which includes a 2048-bit RSA key for signing and encrypting data, and a 4096-bit RSA key for encrypting data only. Users are prompted to enter their name, email address, and a passphrase for the new keys. The generated keys are stored in the GnuPG keyring, which is protected by a master passphrase.'
        quick-lsign-key: '[AI] `gpg --quick-lsign-key` is a command in GnuPG (GPG) used to sign keys interactively and quickly without the need for confirmation prompts or opening keyboxes. The command lists available keys, selects one by index, and then signs it with the user''s default key or specified key without further interaction. This command can be useful when you want to sign multiple keys with the same key in a batch manner.'
        quick-revoke-sig: '[AI] `gpg --quick-revoke-sig` is a command in GnuPG (GPG) used to revoke a previously generated OpenPGP key signature quickly. This can be done when the private key corresponding to the public key associated with the signature is compromised or lost, and it''s essential to prevent further use of the affected signature. By using this command, the revocation status is set to "cancelled," and a new certificate with a CRL (Certificate Revocation List) entry is generated, effectively invalidating the existing signature(s).'
        quick-revoke-uid: '[AI] `gpg --quick-revoke-uid` is a command used in GnuPG (GPG) to revoke a specific user ID associated with a public key. When you revoke a key, it indicates that the corresponding private key should no longer be used to sign or encrypt data. This can be useful if you suspect that your private key has been compromised or if you no longer want to use a particular user ID for signing purposes. The `--quick-revoke-uid` option tells GPG to revoke the specified user ID without creating a new revocation certificate, making the process faster. It is important to note that revoking a key does not automatically invalidate existing signatures or encrypted data; those will remain valid unless the recipient also decides to no longer trust the revoked key.'
        quick-set-expire: '[AI] `gpg --quick-set-expire` is a command in GnuPG (GPG is the GNU Privacy Guard) used to change the expiration date of existing OpenPGP keys. The option `--quick-set-expire` sets an absolute expiration date for all subkeys under the main key, overriding any previously set automatic or relative expiration settings. This command can be useful when you want to set a specific expiration date for your keys for security reasons. For example: `gpg --quick-set-expire <keyid> 2030-12-31`. This sets the expiration date for all subkeys under the specified key ID to December 31, 2030.'
        quick-sign-key: '[AI] `gpg --quick-sign-key` is a command in GnuPG (GPG is the GNU Privacy Guard, a free software replacement for Symantec''s PGP) used to quickly sign an existing OpenPGP key without going through the full key creation and import process. When you run `gpg --quick-sign-key <keyid>`, GPG will prompt you for your passphrase to access the private key, and then it will sign the specified public key with your private key. This command is useful when you have already imported a key into your keyring and just want to add your own signature to it without creating a new key pair. The signed key can then be used for encryption and authentication in GPG-based communications.'
        receive-keys: '[AI] `gpg --receive-keys` is a command used in GnuPG (GPG) to retrieve and import public keys from a keyserver into your keyring. This command connects to a keyserver, searches for the specified key by its key ID or email address, and then downloads and imports the corresponding public key. It''s often used when you want to add someone else''s public key to your own keyring for secure communication.'
        recipient: '[AI] The `--recipient` option in GPG (Gnu Privacy Guard) is used to specify the public key of a recipient when creating or signing an encrypted data or message. It ensures that only the intended recipient with the corresponding private key can decrypt and access the content. This helps maintain confidentiality during communication.'
        refresh-keys: '[AI] `gpg --refresh-keys` is a command used in the GnuPG (GPG) encryption software to update your local keyring with the latest changes from the keyservers. It retrieves and imports any new or updated keys that correspond to the public keys already stored in your keyring, ensuring that your keyring remains up-to-date. This helps maintain the security of your encrypted communications by using the most recent keys for your correspondence.'
        search-keys: '[AI] `gpg --search-keys` is a command used in GnuPG (GPG) to search for a specific public key by its key ID, email address, or name in a keyserver or local keyring. The command connects to the keyserver and retrieves matching keys, displaying their details such as key ID, user ID, and fingerprint. This command is useful when you want to locate and import a specific public key for encryption or verification purposes.'
        send-keys: '[AI] `gpg --send-keys` is a command used in GnuPG (GPG is the GNU Privacy Guard) to send a public key to a keyserver for sharing with others. This command line utility allows users to exchange and verify keys securely, which is essential for encryption and digital signature processes. By providing an email address or key ID, `gpg --send-keys` uploads the corresponding public key to keyservers, making it publicly available for anyone who wants to verify or import it into their own GPG setup. This facilitates secure communication through encrypted emails and other applications where trusted keys are essential.'
        server: '[AI] `gpg --server` starts the GnuPG (GPG) server, which is a background process that provides cryptographic services such as key signing, encryption, and decryption to other processes or users over a network. The server listens for incoming connections and handles requests through its standard protocol. It''s particularly useful in large organizations where multiple users need to share keys and perform cryptographic operations collaboratively.'
        sign: '[AI] `gpg --sign` is a command in GnuPG (GPG) used for digitally signing data or files. This process adds the authenticity and integrity of the data by creating a digital signature using your private key. The resulting signature can be verified by others with your public key, ensuring the data has not been tampered with since it was signed.'
        sign-key: '[AI] `gpg --sign-key` is a command used in GnuPG (GNU Privacy Guard) for signing OpenPGP keys. This operation adds a digital signature to a key, confirming its authenticity and binding it to the owner''s identity. When you sign a key using this command, you are vouching for the key''s validity. The signed key can then be used for encryption and digital signatures with greater confidence in its authenticity. The process involves importing the recipient key into your keyring, if it is not already present, and then using the `--sign-key` option followed by the recipient''s key ID to sign the key.'
        symmetric: '[AI] `gpg --symmetric` is a command used in GnuPG (GPG) for symmetric encryption. The `--symmetric` option signifies that encryption will be performed using a single key, meaning that the data can be decrypted with the same key used for encryption. This creates what''s called a symmetric key pair, where the encryption and decryption keys are identical. It''s important to note that for symmetric encryption in GPG, you only have one key instead of a pair like in asymmetric encryption (RSA or Elliptic Curve Cryptography). Therefore, you need to securely store the key used for encryption, as its loss means losing access to the encrypted data.'
        textmode: |-
            [AI] The `--textmode` option is a command-line argument for GnuPG (GPG), which is a popular open-source tool used for data encryption and decryption, as well as digital signature verification.

            When you use the `--textmode` option with GPG, it instructs the program to output textual representations of keys or encrypted messages rather than binary formats. This can be useful when dealing with plaintext data or when working in environments where binary data handling is not feasible, such as text-based terminals or scripting applications.

            For instance, if you want to display the contents of an encrypted file, including the header and trailer information (such as the public key used for encryption), use `gpg --decrypt --textmode <file.gpg>`. Similarly, to list details about a private key in textual format, use `gpg --list-keys --textmode <key-id>`.
        tofu-policy: |-
            [AI] `gpg --tofu-policy` is a command in GnuPG (GPG) used to configure Trust On First Use (TOFU) settings for keys and certificates. TOFU is a security policy where a key or certificate is considered trusted as soon as it's used, without requiring prior trust decision confirmation from the user.

            The `gpg --tofu-policy` command lets you set various options related to TOFU handling:

            1. `--allow-new-keys`: Allows new keys to be marked as trusted using TOFU.
            2. `--trust-model <model>`: Sets the default trust model for newly imported keys, where <model> can be "pgp" (default), "x509", or "smartcard".
            3. `--keyserver <server>`: Specifies the keyserver to use when importing keys using TOFU.
            4. `--auto-key-locate`: Automatically searches for keys on your local system before trying keyservers with TOFU imports.
            5. `--default-trust-level <level>`: Sets the default trust level for newly imported keys, where <level> can be "unknown", "marginal", "minimal", "low", "medium", "high", or "ultimate".
            6. `--list-keys`: Lists your current TOFU policy settings.

            By using these options with the `gpg --tofu-policy` command, you can configure how GPG handles Trust On First Use for keys and certificates.
        update-trustdb: '[AI] The `gpg --update-trustdb` command is used to update the trust database in GnuPG (GPG). This database stores the trusted keys and their associated trust levels for each user or keyserver. By running this command, GPG will check its sources for new keys or updates to existing keys, and allow the user to review and optionally adjust the trust levels for these keys. This helps keep the trust database up-to-date and secure.'
        verbose: '[AI] `gpg --verbose` is a command-line option used with GnuPG (GPG), a popular open-source cryptography tool. This option increases the amount of output during the encryption or decryption process, providing detailed information about each step taken by GPG as it processes keys and data. The verbose mode helps in debugging and understanding the inner workings of the GPG operations.'
        verify: '[AI] `gpg --verify` is a command used in GnuPG (GPG) to check the authenticity of a digitally signed data or file. When you run this command followed by the path to the signed file and the signature file, GPG will read both files and perform a series of checks. It will compare the public key associated with the signature against the sender''s key in its keyring, ensure the timestamp, check the digital signature algorithms used, and more. If everything matches, the command will output "Good signature" or "Valid signature," indicating that the data or file has been signed by the correct person and hasn''t been tampered with since it was signed.'
        z: '[AI] The `gpg --compress-level Z` option in GnuPG (GPG) is used to compress data using the highest compression level (Z) before encrypting or signing it. This can reduce the size of the encrypted or signed data and make the transmission or storage more efficient. It does not affect the encryption algorithm itself but only the data being encrypted or signed.'
