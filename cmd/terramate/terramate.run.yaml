# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run
description: Run command in the stacks
flags:
    --cloud-sync-deployment: Enable synchronization of stack execution with the Terramate Cloud
    --cloud-sync-drift-status: Enable drift detection and synchronization with the Terramate Cloud
    --cloud-sync-terraform-plan-file=: Enable sync of Terraform plan file
    --continue-on-error: Continue executing in other stacks in case of error
    --disable-check-gen-code: Disable outdated generated code check
    --disable-check-git-remote: Disable checking if local default branch is updated with remote
    --disable-safeguards=: 'Disable safeguards: {all,none,git,git-untracked,git-uncommitted,outdated-code,git-out-of-sync}'
    --dry-run: Plan the execution but do not execute it
    --eval: Evaluate command line arguments as HCL strings
    --no-recursive: Do not recurse into child stacks
    --reverse: Reverse the order of execution
    -X: Disable all safeguards
documentation:
    command: '[AI] `terramate run` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates the execution of infrastructure configuration and deployment defined in Terramate files (`.tf` or `.hcl`) using the underlying Terraform engine. It applies the configured changes to provision or update the infrastructure according to the defined resources, outputs, and modules.'
    flag:
        X: '[AI] The command `terraform init -X` is used in Terraform, an open-source infrastructure as code software tool. This specific command initializes your working directory as a Terraform project and sets up or updates the backend configuration. The `-X` option (also known as the `--no-color` flag) disables colored output for those who prefer plain text.'
        cloud-sync-deployment: '[AI] The `terraform init run --cloud-sync-deployment` command is used in Terraform, an open-source infrastructure as code software tool. This specific invocation of Terraform initializes the working directory, applies any necessary updates to the configuration, and performs a "plan" operation to show what changes would be made without actually applying them. However, the `--cloud-sync-deployment` flag goes a step further by not only showing the planned changes but also executing those changes in the cloud provider''s infrastructure. Essentially, this command synchronizes your Terraform configuration with the actual infrastructure and applies any necessary updates.'
        cloud-sync-drift-status: |-
            [AI] The `terraform init --cloud-sync-drift-status` command is a Terraform CLI (Command Line Interface) command used for managing infrastructure as code with Terraform. This specific command is designed to check the current state of your Terraform configuration against the cloud provider's own state, which can help detect any discrepancies or drifts between the intended and actual resources in the cloud.

            When you run this command, it will synchronize the Terraform working directory's state file with the cloud provider's information. It then compares both states to identify any differences. If any discrepancies are found, they will be displayed as output for further investigation and possible remediation. This is a valuable tool in maintaining the desired infrastructure configuration and ensuring consistency between your code and the actual resources in the cloud.
        cloud-sync-terraform-plan-file: |-
            [AI] The `terramate run --cloud-sync-terraform-plan-file` command is used in Terramate, an open-source DevOps solution for managing Terraform infrastructure as code. This specific command synchronizes a Terraform execution plan file to the cloud.

            When you run this command, it initiates a process where the local Terraform configuration files and their corresponding plans are transferred and stored in a centralized location, typically a Git repository or a version control system. The cloud sync feature ensures that all team members have access to the latest infrastructure definitions, reducing potential conflicts and ensuring consistency across different environments.

            In summary, `terramate run --cloud-sync-terraform-plan-file` is a command used in Terramate for synchronizing Terraform plans to the cloud, enabling collaboration, version control, and consistent management of your infrastructure as code.
        continue-on-error: '[AI] `terramate run --continue-on-error` is a command-line option for Terraform, an open-source infrastructure as code software tool. This flag instructs Terraform to continue executing the remaining tasks in a workflow file even if one or more previous tasks failed. By default, Terraform will exit with an error as soon as any task fails, making it essential for understanding and controlling this behavior when managing complex, multi-task infrastructure deployments.'
        disable-check-gen-code: '[AI] The `terraform run` command with the `--disable-check-gen-code` flag is used to execute a Terraform application without generating or checking the generated code during execution. This can be useful when the user wants to avoid the time and resource cost of code generation, for example, when making frequent, incremental changes to the configuration files. However, it''s important to note that skipping this check may result in undetected syntax errors or other issues in the generated code. It should be used with caution and only when confident that the Terraform configuration is correct.'
        disable-check-git-remote: '[AI] The `terraform init` command with the argument `--disable-check-git-remote` is used to initialize a Terraform working directory while disabling the Git remote checking feature. When this option is set, Terraform will not attempt to fetch or configure any stored remote repositories (e.g., from `.git` configuration files) during initialization. This can be useful when setting up a Terraform project in an environment where Git access is restricted or unnecessary for the task at hand.'
        disable-safeguards: '[AI] `terramate run --disable-safeguards` is a command used in Terraform, an open-source infrastructure as code software tool. The option `--disable-safeguards` disables all built-in safety checks during the execution of a Terraform plan or apply. This means that Terraform will not pause and ask for confirmation before making any destructive changes to your infrastructure configuration, potentially causing unintended damage. It''s important to use this command with caution as it significantly reduces the level of protection against accidental destruction of resources.'
        dry-run: '[AI] The `terraform init --dry-run` command is used in Terraform, an open-source infrastructure as code software tool, to simulate the effect of running `terraform init` without actually making any changes to the system. The `init` command initializes a new workspace or updates the existing one by downloading necessary provider plugins and configuring other backend settings. The `--dry-run` flag makes Terraform show what it would do, but not carry out the actual actions, allowing users to review proposed changes before applying them in a real environment.'
        eval: |-
            [AI] `terraform init` is a command in Terraform, an open-source infrastructure as code software tool, used to initialize a working directory containing Terraform configuration files. The `--eval` flag when used with `terraform init` allows running arbitrary HCL (Hashicorp Configuration Language) expressions within the context of the current workspace.

            The command `terraform init --eval 'var.something = value'` sets the value of a variable named `something` in your Terraform configuration to the specified value during initialization. This can be useful for testing, debugging, or conditionally setting variables based on input arguments.
        no-recursive: '[AI] The `terraform init --no-recursive` command is used to initialize a single Terraform working directory without initiating subdirectories recursively. This means that only the current directory will have its required dependencies installed, and other directories not initialized. The `--no-recursive` option is useful when working with multiple independent Terraform configurations in different directories within the same project, or to save time by skipping the initialization of large or unnecessary subdirectories.'
        reverse: '[AI] `terramate run --reverse` is a command used in Terraform, an open-source infrastructure as code software tool. This specific command invokes Terramate to apply changes in reverse order. By default, Terramate applies changes in the order they appear in the configuration files. The `--reverse` flag reverses this order, causing Terramate to undo the last change before it applies the next one. This can be useful for debugging or for carefully managing complex infrastructure deployments.'
