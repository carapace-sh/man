# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: new
description: Create a new template in the current folder with the name given as name
flags:
    --cpu-limit=: Set a limit for the CPU
    --cpu-request=: Set a request value for the CPU
    --handler=: directory the handler will be written to
    --lang=: Language or template to use
    --list: List available languages
    --memory-limit=: Set a limit for the memory
    --memory-request=: Set a request or the memory
    -a, --append=: Append to existing YAML file
    -g, --gateway=: Gateway URL to store in YAML stack file
    -p, --prefix=: Set prefix for the function image
    -q, --quiet: Skip template notes
documentation:
    command: '[AI] `faas-cli new` is a command used in the FaaS (Function-as-a-Service) toolchain provided by OpenFaaS. This command is utilized to create a new function project in the local directory. It sets up the project structure, including essential files such as a `Dockerfile`, `function.yaml`, and a default function code template based on your chosen programming language (e.g., Go, Node.js, or Python). The command also installs any required dependencies for your selected language. In summary, it quickly initializes a new OpenFaaS function project with the necessary files and setup.'
    flag:
        append: '[AI] `faas-cli new --append` is a command used in the FaaS (Function-as-a-Service) toolchain developed by OpenFaas. This command creates a new function with a specified template using the given configuration, but instead of overwriting existing files, it appends new files to the project. This approach allows for incremental development and easier collaboration when working on a project with multiple developers.'
        cpu-limit: '[AI] The `faas-cli new --cpu-limit` command is used with the FaaS (Function-as-a-Service) CLI tool to create a new Faas function. The `--cpu-limit` flag sets the maximum number of CPU units that can be consumed by the function during its execution. This helps in managing and controlling the resource usage and cost for the function.'
        cpu-request: '[AI] The `faas-cli new --cpu-request` command is used with the FaaS (Function-as-a-Service) CLI tool to create a new serverless function project. The `--cpu-request` option sets the desired amount of CPU resources for the function, specified in millicores (mC). This value is communicated to the cloud provider to ensure that adequate resources are allocated to run the function efficiently.'
        gateway: '[AI] The `faas-cli new --gateway` command is a part of FaaS (Function-as-a-Service) CLI toolkit, specifically the Faas-gates open-source project. This command is used to create a new Gateway function in the FaaS ecosystem. A Gateway function acts as an entry point and orchestrator for multiple functions, handling requests from external sources, routing them to appropriate functions, and managing their execution. With `faas-cli new --gateway`, you can easily set up and configure a new Gateway function using templates and predefined configurations, simplifying the deployment and management of complex FaaS applications.'
        handler: '[AI] The `faas-cli new --handler` command is a part of FaaS (Function-as-a-Service) CLI toolkit. This specific command creates a new FaaS function project in the specified directory. The `--handler` option defines the handler function name and its location as a file within the project. The handler function is the main execution entry point for the FaaS function. The created project includes a basic structure with required configuration files for deploying and executing the function in various cloud platforms like AWS Lambda, Google Cloud Functions, etc.'
        lang: '[AI] The `faas-cli new --lang` command is used with the FaaS (Function-as-a-Service) CLI tool to create a new serverless function project. The `--lang` flag specifies the programming language to be used for the function, such as Node.js, Go, or Python. This flag instructs the tool to set up the project structure and dependencies specific to the chosen language.'
        list: '[AI] `faas-cli new --list` is a command used in the FaaS (Function-as-a-Service) toolchain, specifically with the Faas CLI (Command Line Interface) tool. This command lists all available templates or blueprints for creating new functions using the specified Faas framework such as OpenFaaS, FnProject, etc. It helps developers to quickly choose a starting point for their new function development without having to manually create a project structure.'
        memory-limit: '[AI] The `faas-cli new --memory-limit` command is used with the FaaS (Function-as-a-Service) CLI tool to create a new function project. The `--memory-limit` option sets the maximum amount of memory that can be used by the function during its execution. This value is specified in megabytes (MB). By defining a memory limit, you ensure your functions are resource-efficient and prevent them from being overwhelmed by large data or complex computations.'
        memory-request: '[AI] The `faas-cli new --memory-request` command is used with the FaaS (Function-as-a-Service) CLI tool to create a new serverless function. The `--memory-request` option sets the amount of memory that the function is allowed to use during its execution. The larger the memory request, the more resources the function will have available to it, which can impact both the cost and performance of the function.'
        prefix: '[AI] `faas-cli new --prefix` is a command used in the FaaS (Function-as-a-Service) toolchain, specifically with the FaaS CLI (Command Line Interface) tool. This command creates a new service or function project within the FaaS ecosystem. The `--prefix` option sets a prefix for the name of the new function or service. It helps to ensure unique names when creating multiple functions or services in the same directory.'
        quiet: '[AI] `faas-cli new --quiet` is a command used in FaaS (Function-as-a-Service) development with the FaaS CLI tool. This command creates a new FaaS function project using the provided template, but with minimal output or interaction. The `--quiet` flag ensures that the process runs in the background without displaying progress messages or prompts for user input, making it suitable for scripting and automated workflows.'
