# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
description: Run tests
flags:
    --allow-env?: Allow environment access
    --allow-ffi?: Allow loading dynamic libraries
    --allow-hrtime: Allow high resolution time measurement
    --allow-net?: Allow network access
    --allow-none: Don't return error code if no test files are found
    --allow-read?: Allow file system read access
    --allow-run?: Allow running subprocesses
    --allow-write?: Allow file system write access
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --coverage?: 'UNSTABLE: Collect coverage profile data into DIR'
    --doc: 'UNSTABLE: type check code blocks'
    --fail-fast?: Stop after N errors. Defaults to stopping after first failure.
    --filter=: Run tests with this string or pattern in the test name
    --ignore?: Ignore files
    --import-map=: Load import map file
    --inspect-brk?: Activate inspector on host:port and break at start of user script
    --inspect?: 'Activate inspector on host:port (default: 127.0.0.1:9229)'
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --no-run: Cache test modules, but don't run tests
    --prompt: Fallback to prompt if required permission wasn't passed
    --seed=: Seed Math.random()
    --shuffle?: '(UNSTABLE): Shuffle the order in which the tests are run'
    --unsafely-ignore-certificate-errors?: 'DANGER: Disables verification of TLS certificates'
    --v8-flags?: 'Set V8 command line options (for help: --v8-flags=--help'
    --watch: 'UNSTABLE: Watch for file changes and restart process automatically'
    -A, --allow-all: Allow all permissions
    -c, --config=: Load configuration file
    -j, --jobs=: 'Number of parallel workers, defaults to # of CPUs when no value is provided. Defaults to 1 when the option is not present.'
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno test` is a command used in Deno, a modern and secure TypeScript runtime. It runs tests written using Deno''s testing library, `denotest`. The tests are typically located within the `tests` directory of your Deno project. By default, it will look for files with the `*.test.ts` extension and run them in alphabetical order. When executed, `deno test` will compile your TypeScript code, run the tests, and display the results including any failures or errors.'
    flag:
        allow-all: |-
            [AI] The `deno test` command is a tool provided by Deno, a modern runtime for JavaScript and TypeScript. It is used to run tests in a project using Deno's built-in testing framework. The option `--allow-all` is passed with this command to configure Deno's access control settings during test execution.

            With `--allow-all`, Deno grants all permissions to the tested code, effectively bypassing its default restrictive access control model. This means that the tested code can import and require modules, make network requests, or perform other potentially risky operations without being blocked.

            Using `--allow-all` should be done with caution since it may expose security vulnerabilities in the tested code if not handled properly. It is recommended to only use this flag during development or testing in a controlled environment and avoid using it in production settings.
        allow-env: |-
            [AI] The `deno test` command is a tool used in Deno, a modern JavaScript runtime, for running tests written using Deno's testing framework. The `--allow-env` option modifies the Deno sandboxed environment by allowing the specified environment variables to be accessible within the test code.

            For instance, if you have an environment variable named `API_KEY` that is needed in your test code, you can pass it using the following command:

            ```bash
            deno test --allow-env API_KEY=<your_api_key>
            ```

            This command tells Deno to include the `API_KEY` environment variable when running the tests. Make sure that the value `<your_api_key>` is replaced with the actual value of your API key to ensure the test runs successfully.
        allow-ffi: '[AI] The `deno test --allow-ffi` command is used to run tests in Deno, a modern and secure TypeScript runtime. The `--allow-ffi` flag enables Foreign Function Interface (FFI) calls in the tested code. FFI allows Deno programs to call functions from C libraries or other external systems, which can be necessary for certain use cases that cannot be fully implemented in TypeScript. By enabling FFI for testing, you allow your tests to interact with such external dependencies and ensure their correct behavior alongside your Deno application.'
        allow-hrtime: '[AI] The `deno test` command is used to run tests in Deno, a modern and secure TypeScript runtime. The `--allow-hrtime` option is a permission flag that enables the use of the `hrtime` module, which provides high-resolution time measurement functionality. This flag is necessary when writing tests that require precise timing measurements. Without it, Deno would reject running tests that import or use the `hrtime` module due to its potential security implications.'
        allow-net: |-
            [AI] `deno test --allow-net` is a command used in Deno, a modern and secure TypeScript runtime. This specific command runs Deno tests with the `--allow-net` flag enabled.

            This flag grants permissions for Deno to make network requests during test execution. Without it, Deno tests would reject any code attempts to access the network, which could be useful in certain contexts like local development or testing in isolation. However, in situations where network access is required for testing, `--allow-net` should be used.

            This command allows Deno tests to make requests to external servers or APIs and receive responses as part of their test execution, ensuring comprehensive coverage of the codebase.
        allow-none: '[AI] The `deno test` command is a testing tool in Deno, a modern runtime for JavaScript and TypeScript. The `--allow-none` option is a security feature that specifies allowing no imports from outside the project directory. This means all tests will run in an isolated environment with no external dependencies. It helps ensure test results are consistent and not influenced by external factors.'
        allow-read: '[AI] The `deno test` command is used to run tests in Deno, a modern and secure TypeScript runtime. The `--allow-read` flag is an option that specifies which files or directories the Deno test runner is allowed to read during the test execution. This flag improves the security by limiting the access of the test code to specific files and directories, preventing potential unintended side effects or data leakage. Without this flag, Deno would deny running tests that attempt to read files outside of the project directory by default.'
        allow-run: |-
            [AI] The `deno test --allow-run` command is used in Deno, a type-safe and secure runtime for JavaScript and TypeScript. This command runs Deno tests with an additional flag that allows the execution of tests from an untrusted source.

            By default, Deno tests are isolated, meaning they can only access files in the same directory as their `deno.json` file or imported modules with a known hash. However, there might be cases where you need to test code that imports modules from untrusted sources or accesses files outside of the test directory.

            The `--allow-run` flag grants these permissions temporarily during test execution. This flag should only be used for trusted tests and in secure development environments to prevent potential security risks. Using this flag may bypass some safety features of Deno, so it's essential to use it wisely.
        allow-write: '[AI] The `deno test --allow-write` command is used in Deno, a modern JavaScript runtime, to run tests with permissive access control permissions. Specifically, the `--allow-write` flag grants the testing script the ability to write files and directories. This is useful when your tests need to modify or generate output files for their functionality. However, be aware that this permission level can introduce potential security risks if not used carefully.'
        cached-only: '[AI] The `deno test` command is a tool for running tests in Deno, a modern runtime for TypeScript and JavaScript. The `--cached-only` flag is an option that instructs Deno to only retest the tests that have been previously failed or changed. This can significantly reduce the testing time as it skips retesting unchanged tests. It''s useful when running tests multiple times in a continuous integration environment, where most tests may not change between runs.'
        cert: '[AI] The `deno test --cert` command is used in Deno, a modern JavaScript runtime, to run tests with SSL certificates. The `--cert` option specifies the path to a valid SSL certificate file for securing the testing connection between the client and server during the test execution. This helps ensure secure communication between the Deno testing tools and the tested application when the application uses HTTPS.'
        config: '[AI] The `deno test --config` command is used to run Deno tests with a specific configuration file. Deno is a typescript-based runtime for executing JavaScript and TypeScript code. Its testing framework provides the ability to define testing configurations through files that follow a JSON schema. By using `--config` option followed by the path to the config file, you can customize various aspects of test execution such as test files selection, output format, parallelism level, etc. This allows for more fine-grained control over testing in complex projects.'
        coverage: '[AI] `deno test --coverage` is a command used in Deno, a modern and secure TypeScript runtime. This command runs the tests within a Deno project and generates test coverage reports using the built-in testing framework. The `--coverage` flag enables the collection of data about which parts of the source code were executed during test runs. These reports help developers assess code quality by identifying under-tested areas and ensuring adequate test coverage.'
        doc: '[AI] `deno test --doc` is a command used in Deno, a modern JavaScript runtime. This command runs Deno''s testing framework with the `--doc` (short for documentation) flag enabled. When you run `deno test --doc`, it not only executes the tests but also generates detailed documentation for your tests using JSDoc comments. This can be helpful to understand how each test function works and what it covers.'
        fail-fast: '[AI] The `--fail-fast` flag in Deno testing is an option that causes Deno to exit immediately when it encounters a failed test case during test execution. This flag is useful for developers who want to quickly identify and address issues in their tests, as they can focus on the failing test without having to wait for other tests to finish running. By exiting early when a test fails, `--fail-fast` can save time and improve the overall development workflow.'
        filter: '[AI] `deno test --filter` is a command used in Deno, a modern runtime for JavaScript and TypeScript, to run only specific tests within a project. The `--filter` option allows specifying a filter expression to only execute tests matching the given pattern. For instance, `deno test --filter "someTest.*"` would run all tests with names containing the string "someTest". This can save time by skipping unnecessary tests and help focus on specific test cases.'
        ignore: '[AI] The `deno test --ignore` command is a feature in Deno, a modern and secure TypeScript runtime. It allows running tests in Deno while excluding specific files or directories from being tested. The `--ignore` flag accepts a pattern as an argument, which can be a file path or a glob pattern to match the files to be ignored. For example, `deno test --ignore=''**/*.spec.ts''` would exclude all files with a `.spec.ts` extension from being tested during the `deno test` command execution.'
        import-map: '[AI] The `deno test --import-map` command is used with Deno, a modern and secure runtime for JavaScript and TypeScript. It''s used to specify an import map file during testing in Deno. Import maps define how modules are imported in a project, allowing for custom resolution rules. With the `--import-map` flag, Deno will use the specified import map file when running tests, ensuring consistent and predictable module resolution across the development environment and the test environment.'
        inspect: '[AI] `deno test --inspect` is a command used in Deno, a modern and secure TypeScript runtime. This command runs the tests defined in a Deno project using the testing library and provides real-time test coverage reports with the V8 Chrome DevTools inspector, allowing for interactive debugging of tests as they are executed. The `--inspect` flag enables this feature, bridging the testing output to the browser-based debugger interface.'
        inspect-brk: '[AI] `deno test --inspect-brk` is a command used in Deno, a modern and secure runtime for JavaScript and TypeScript. This command runs Deno tests with source map support and sets a breakpoint during test execution. The flag `--inspect-brk` enables the Deno testing infrastructure to start an inspector server, allowing debugging of tests at the point where they fail or as needed. This is particularly useful when dealing with complex tests or codebases for effective troubleshooting and understanding test behavior.'
        jobs: '[AI] `deno test --jobs` is a command used in Deno, a modern and secure TypeScript runtime. This command runs unit tests defined in Deno projects with multiple worker processes, allowing for concurrent testing. The number of worker processes is determined by the flag; for instance, `--jobs=2` would run two tests in parallel. The primary goal is to increase test execution speed.'
        location: '[AI] `deno test --location` is a command used in Deno, a modern and secure TypeScript runtime. This command runs unit tests located at the specified file path or within the current directory using Deno''s testing framework. The `--location` flag indicates that the test files are located on disk instead of being imported as modules within the application code. It searches for tests based on the naming convention: a file ending with `_test.ts` in the same directory as the tested module or the current directory if no module is specified.'
        lock: '[AI] `deno test --lock` is a command used in Deno, a modern and secure TypeScript runtime. This command runs tests with Deno and generates or updates a lockfile named `denylib.json`. The lockfile records the exact versions of the dependencies that were used when the tests were run, ensuring consistency and reproducibility across different test runs.'
        lock-write: '[AI] `deno test --lock-write` is a command used in Deno, a modern and secure TypeScript runtime. This command runs tests with the Deno testing framework while enforcing test isolation by acquiring a write lock on the package dependency tree. This prevents multiple tests from concurrently modifying the dependency graph during test execution, ensuring test stability and determinism.'
        no-check: '[AI] `deno test --no-check` is a command used in Deno, a modern and secure TypeScript runtime. It runs tests written using Deno''s testing framework without executing any checks or assertions. The primary purpose of this command is to perform benchmarking or stress testing of your codebase without the interference of test assertions. This can help identify performance bottlenecks and improve overall system stability.'
        no-remote: '[AI] `deno test --no-remote` is a command used in Deno, a TypeScript-based runtime for building secure and fast applications. The `test` subcommand is used to execute tests written with Deno''s testing framework. The `--no-remote` flag disables the remote test runner. When this option is passed, tests will be run locally on your machine instead of using Deno''s cloud-based test runner. This can be useful for testing projects that do not require network access or when you prefer to run tests locally for faster feedback.'
        no-run: '[AI] The `deno test` command is a tool for running tests in Deno, a modern and secure TypeScript runtime. The `--no-run` flag is an option that can be passed to this command to indicate that the tests should not be run automatically after they have been compiled. Instead, the focus is solely on compiling the tests and producing the output files that can later be run or integrated into a continuous integration (CI) workflow. This approach is useful when running large test suites or when tests are expected to take a long time to execute, as it allows developers to save time by not having to wait for the tests to run each time they make changes and want to check the compilation status.'
        prompt: '[AI] `deno test --prompt` is a command used in Deno, a modern and secure TypeScript runtime. This command runs Deno tests with interactive test output. The `--prompt` option enables the Test Runner to pause before each test and wait for user confirmation before executing it further. This feature is useful when testing complex or long-running tests where you want more control over the test execution flow.'
        reload: '[AI] `deno test --reload` is a command used in Deno, a modern runtime for JavaScript and TypeScript. It runs the tests within a Deno project with the `--reload` flag enabling automatic test file reloading during the testing process. This means that when tests are modified, they will be re-run without requiring an explicit re-build or re-test command, making the testing workflow more efficient and productive.'
        seed: '[AI] The `deno test` command is a tool for running tests in the Deno programming language. The `--seed` option is used to specify a seed value for the test runner''s random number generator. This can be helpful when comparing test results between different runs, as using the same seed value will ensure that the same sequence of pseudorandom numbers is generated, making the tests deterministic and producing identical output.'
        shuffle: '[AI] `deno test --shuffle` is a command used in Deno, a modern and secure TypeScript runtime. The `--shuffle` flag reorders the tests randomly before running them for each test file. This helps to ensure that test order does not impact test results, as each test is run in an unpredictable order, promoting more reliable and consistent testing outcomes.'
        unsafely-ignore-certificate-errors: '[AI] The `deno test` command is a testing tool in Deno, a modern and secure runtime for JavaScript and TypeScript. The `--unsafely-ignore-certificate-errors` flag is an option that disables certificate validation during the HTTPS tests. This means that Deno will not check the authenticity of SSL/TLS certificates presented by servers during testing. Ignoring certificate errors can pose a security risk since it may allow man-in-the-middle attacks or other forms of certificate misuse. Use this flag with caution and only when necessary, for example, when testing an internal server with a self-signed certificate.'
        v8-flags: '[AI] `deno test --v8-flags` is a command used in Deno, a TypeScript-based runtime for building and running applications. The `test` subcommand runs tests within a Deno project, while the `--v8-flags` option allows passing flags to V8 JavaScript engine that Deno uses under the hood. These flags can be used to customize V8''s behavior, such as enabling or disabling certain features, optimizing for specific hardware or use cases, and more. The exact meaning of each flag depends on the specific V8 flag being used.'
        watch: '[AI] `deno test --watch` is a command used in Deno, a modern and secure TypeScript runtime. This command runs the Deno testing framework with the `--watch` flag enabled. It continuously monitors the files in your project for changes, then automatically re-runs the affected tests. This allows for quick feedback during development and reduces the need to manually run tests repeatedly.'
