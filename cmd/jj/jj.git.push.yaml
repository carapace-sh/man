# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: push
description: Push to a Git remote
flags:
    --all: Push all branches (including deleted branches)
    --deleted: Push all deleted branches
    --dry-run: Only display what will change on the remote
    --remote=: The remote to push to (only named remotes are supported)
    -b, --branch*=: Push only this branch (can be repeated)
    -c, --change*=: Push this commit by creating a branch based on its change ID (can be repeated)
    -h, --help: Print help (see more with '--help')
    -r, --revisions*=: Push branches pointing to these commits
documentation:
    command: |-
        [AI] The `jj` command is not a Git command in itself, but rather an alias or shorthand for common Git operations using the `jira` tool like JIRA CLI (Command Line Interface) or Jenkins Jira plugin. When you type `jj git push`, it's assumed that these tools are integrated with your local Git environment and that this command is configured to automatically perform certain actions before, during, or after a Git push.

        Here's a possible breakdown of what could happen:

        1. You have made local changes and want to push them to the remote repository.
        2. Typing `jj git push` triggers a sequence of events, such as:
           - Your terminal checks for the availability of your Jira server and authenticates if necessary.
           - It retrieves the current state of your Jira issues related to the files you've changed (e.g., associated with Git commit messages or issue keys in file comments).
        3. Once the Git push is executed successfully, Jira might be configured to create a new version of a document linked to the issues or associate the commits with specific Jira issues automatically.
        4. The operation could also include other functionality like automatic issue status updates based on the commit messages or code review feedback.

        In summary, `jj git push` is not a standalone Git command but rather a convenient shorthand for executing a series of related operations (Git push and Jira management) in one step.
    flag:
        all: '[AI] The command `git push --all` is used to push all local branches in a Git repository to a remote repository. The `--all` option pushes for all branches, including those that may have been created locally but not yet pushed. This can be useful when setting up a new repository or synchronizing changes across multiple repositories. Note that you will need to have the necessary permissions on the remote repository in order to push changes.'
        branch: '[AI] The command `jj git push --branch` is used in version control with Git and the Jira Java library, JJ, for Atlassian Jira Software. This command pushes a local branch to a remote repository and creates or updates a corresponding project branch in Jira if it does not already exist. It assumes that your local branch has been configured with a Jira connection and the necessary permissions.'
        change: |-
            [AI] The `jj` command is not a standard Git command, but rather a shorthand for a specific workflow using Jira and JetBrains's Git toolbox, called "JetBrains Suite." The `git push --change` command is used to push local commits to the remote repository with changes that have been reviewed in Jira.

            With `jj`, you can create a pull request directly from your IDE (Integrated Development Environment), allowing team members to review and comment on your code before it's merged into the main branch. Once the review is complete, you use the `jj push --change` command to promote the changes from your local feature branch to the remote repository, preparing them for merging into the main branch.

            The `--change` flag in this context indicates that the commits being pushed are ready for further review and can be changed if needed before they're finally merged. It does not automatically merge the commits; instead, it sets them as change requests in the remote repository, enabling your team to continue the review process.
        deleted: '[AI] The `git push --delegated` command is not a valid Git command. However, I assume you meant to write `git push --delete`. This command is used to delete branches that exist on a remote repository. When you make local changes and delete branches or commits in your local Git repository, those deletions are not automatically reflected in the remote repository until you use this command. By running `git push origin :<branch-name>` or `git push --delete origin <branch-name>`, you instruct Git to send a request to the remote repository to delete the specified branch. This can be useful when collaborating with others and need to clean up old branches that are no longer in use.'
        dry-run: '[AI] `git push --dry-run` is a Git command used to simulate a push operation without actually updating the remote repository. The `--dry-run` option, also known as the `--no-threshold` or `--quiet` flag, performs a push simulation and displays what would have been sent to the server if the command was run without this flag. It helps in understanding the changes that will be pushed before executing an actual push, which can help prevent unintended consequences or errors.'
        help: |-
            [AI] The command `git push jj --help` is used with Git, a popular version control system. This specific command is used to obtain help information about the `jj` remote in relation to pushing changes.

            When you run this command, Git displays detailed help information in your terminal. It explains various options and arguments that can be used when pushing commits to the specified remote named "jj". Some common options include:

            - `<branch>`: The name of the branch to push (e.g., `<branch> = mybranch`).
            - `--force` or `-f`: Force-push an existing branch, discarding local commits that aren't present on the remote branch (be cautious when using this option).
            - `--tags`: Push any annotated tags that are present in your local repository to the remote repository.
            - `--prune`: Delete remote branches that no longer exist locally, keeping your local list of remotes up-to-date.

            The help information also includes detailed descriptions and examples for each option and argument. It's an essential tool for understanding how to use specific Git commands correctly.
        remote: '[AI] The command `git push --remote jj` is used to push local Git repository changes to a remote repository named "jj". The `--remote` option specifies that the given name (in this case, "jj") should be treated as a remote repository and not a local branch. When you run this command, Git will fetch any new commits from the remote repository and then attempt to push your local commits on top of them. This can help ensure that your changes are merged with the latest changes in the remote repository.'
        revisions: |-
            [AI] The `git push --revisions` command in JFrog's Jenkins Job Builder or Shared Libraries plugin is used to push one or more specific Git commits, identified by their revision hashes, to a remote repository. By default, `git push` commands push the current head (latest commit) and any local changes.

            The `--revisions` flag allows you to specify one or more revison hashes instead of the head, enabling you to push those specific commits to the remote repository. This can be useful when you want to share a particular branch or set of changes with another team or repository without having them merge your entire branch.
