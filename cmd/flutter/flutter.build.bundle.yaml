# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bundle
description: Build the Flutter assets directory from your app
flags:
    --asset-dir=: The output directory for the kernel_blob.bin file, the native snapshet, the assets, etc.
    --build-number=: An identifier used as an internal version number.
    --debug: Build a debug version of your app (default mode).
    --depfile=: A file path where a depfile will be written.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-track-widget-creation: Do not track widget creation locations.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --release: Build a release version of your app.
    --target-platform=: The architecture for which to build the application.
    --track-widget-creation: Track widget creation locations.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build bundle` is a Flutter command used to generate optimized, production-ready native artifacts for Android (`.aab`) and iOS (`.appx`) platforms from your Flutter project''s built apk or app bundles. The resulting files can be directly uploaded to stores like Google Play Store and Apple App Store. This command performs additional optimization and shrinking of the code to reduce file sizes while maintaining good performance.'
    flag:
        asset-dir: '[AI] `flutter build bundle` is a command used in Flutter development to create a bundled output of an application for distribution or deployment. The `--asset-dir` option specifies a directory containing static assets, such as images or fonts, that will be included in the bundle and accessible at runtime. When this command is executed, Flutter packages all the application code, assets, and other necessary files into a single output, which can then be easily deployed to various platforms like web, Android, or iOS.'
        build-number: '[AI] `flutter build bundle` is a command provided by Flutter, a mobile application development framework. The `--build-number` option is used to specify a build number for the generated bundled output. This can be useful in managing different builds and versions of an app. When you run `flutter build bundle --build-number=myVersionNumber`, it creates a bundled version of your app with the given version number, making it easier to keep track of different builds during development or release processes.'
        debug: '[AI] `flutter build bundle --debug` is a command used in Flutter development to generate a debug-mode bundled application for distribution or deployment. This command takes advantage of Flutter''s built-in ability to create an application bundle, which includes the Dart code, native (Android or iOS) code, and all associated assets. By including the `--debug` flag, additional debug symbols are embedded in the generated bundle, enabling superior debugging experience when the application is run on a device or emulator.'
        depfile: '[AI] `flutter build bundle` is a command provided by the Flutter framework for creating a bundle of an application, which can be used for distributing the app or for sideloading it on other devices. The `--depfile` option generates a separate file named `dependencies.txt` that lists all the required packages and their versions, making it easier to manage dependencies when deploying the app. This option simplifies dependency management during deployment processes.'
        help: |-
            [AI] `flutter build bundle` is a command provided by the Flutter framework used to build and generate a Flutter application bundle. The bundle can be used for various purposes such as releasing an app on the Google Play Store or the Apple App Store.

            The `--help` flag, when passed with this command, will display detailed information about how to use it correctly. Here's what you can expect from the help output:

            - It explains that the command builds a Flutter application for a specific target platform (like web, Android, or iOS) and generates a bundle that can be uploaded to app stores.
            - It outlines the syntax of the command, including required arguments (the path to your project directory) and optional flags (such as `--release` for building a release version).
            - It provides detailed descriptions for each flag, such as `--tree-shake-icons` which reduces the icon size by only keeping the needed variations or `--split-var-names` which splits long variable names into multiple parts for easier understanding by the app store's automatic code analysis tools.
            - The help also explains how to check the output of the build process and provides some common troubleshooting tips.
        no-pub: '[AI] `flutter build bundle --no-pub` is a command used in Flutter development to create a bundled application without running `pub get` for dependency management. This command generates an optimized, production-ready application bundle using the cached dependencies, bypassing the need for a network connection or downloading new dependencies during the build process. It''s useful when you want to create an offline-build, have fast and predictable builds, or work on projects without internet access.'
        no-track-widget-creation: '[AI] `flutter build bundle` is a command used in Flutter development to create a bundled application for production deployment. The `--no-track-widget-creation` option disables the tracking of newly added widgets during the build process. This can be useful when developing a large project with many widgets, as it avoids creating unnecessary artifacts and reduces the build size. However, it also means that any new widgets introduced since the last build will not be included in the bundled output.'
        no-tree-shake-icons: '[AI] The `flutter build bundle` command is used in Flutter development to create a bundled version of an application for web deployment. The `--no-tree-shake-icons` flag disables tree shaking for icons during the bundling process. Tree shaking is a optimization technique that eliminates unused code from the application, but it may also remove small icon files if they are imported but not used in the final build. By passing this flag, those icon files will be included in the bundle regardless of whether or not they''re tree-shaken.'
        profile: '[AI] `flutter build bundle --profile` is a command used in Flutter development to create a smaller, production-ready bundled application. It generates a single compact file, called a "bundle," by combining multiple resources such as Dart code, images, and other assets into a singular format. The `--profile` argument specifically refers to the use of a profile file (`.dart_tool/profiles/release.yaml`) during the bundling process. This profile file is used to configure optimizations for the build, including tree shaking, ahead-of-time compilation, and other performance improvements. The resulting bundle is suitable for deployment on various platforms like web, mobile, or desktop.'
        pub: '[AI] `flutter build bundle --pub` is a command used in Flutter development to build an optimized, production-ready bundle of your application''s code and its published dependencies. It generates artifacts that can be deployed directly to app stores or used for testing in various environments without having to manage individual package versions. The `--pub` option ensures that all dependencies specified in the pubspec.yaml file are included in the generated bundle.'
        release: '[AI] `flutter build bundle --release` is a command used in Flutter development to create an optimized bundle of an application for production deployment. This process includes shrinking the code size, tree shaking, and obfuscating the Dart code using Google''s Tree Shaking and ProGuard tools. The resulting APK or AOT package is smaller and more efficient compared to the debug build, as it does not contain any unnecessary code or metadata, ensuring optimal performance for end-users.'
        target: '[AI] `flutter build bundle --target` is a command used in Flutter development to generate optimized bundles for specific targets, such as web or native platforms (iOS and Android). This command minimizes the size of the generated code by stripping unused resources and code. The output is a single file containing the application code along with its dependencies, ready for deployment on the specified target platform.'
        target-platform: '[AI] `flutter build bundle` is a command used in Flutter development to create optimized, platform-specific bundles of an application for deployment. The `--target-platform` option specifies the target platform (iOS or Android) on which the bundle will be run. For example, `flutter build bundle --target-platform ios` generates a bundle suitable for deploying to an iOS app store. This command minimizes the size and optimizes the performance of the application for the specified platform.'
        track-widget-creation: '[AI] `flutter build bundle` is a command-line tool used in Flutter development for creating optimized, production-ready bundles of your application. The `--track-widget-creation` option is an argument that enables tracking and reporting of widget creation during the bundle building process. This can be helpful in identifying potential performance issues related to unnecessary widget rebuilds. By tracking widget creation, the Flutter engine generates detailed statistics, which can be used to improve the efficiency of your application and reduce the size of your bundle.'
        tree-shake-icons: '[AI] `flutter build bundle` is a Flutter command used to generate optimized bundles for web projects. The `--tree-shake-icons` option is used to perform icon tree shaking, which is a process that eliminates unused icons during the build process to reduce file size and improve load times. By using this flag, Flutter will only include the icons required by your application in the final bundle.'
