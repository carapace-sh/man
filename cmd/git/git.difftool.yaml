# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: difftool
description: Show changes using common diff tools
group: interrogator
flags:
    --abbrev=: show only a partial prefix
    --anchored=: Generate a diff using the "anchored diff" algorithm
    --binary: output a binary diff
    --cached: View the changes you staged in the index/cache
    --check: Warn if changes introduce conflict markers or whitespace errors
    --color-moved-ws?: This configures how whitespace is ignored when performing the move detection
    --color-moved?: Moved lines of code are colored differently
    --color-words=: Equivalent to --word-diff=color plus (if a regex was specified)
    --color=: Show colored diff
    --compact-summary: Output a condensed summary of extended header information
    --cumulative: Synonym for --dirstat=cumulative
    --diff-algorithm=: ""
    --diff-filter=: filter files
    --dirstat-by-file=: Synonym for --dirstat=files,param1,param2...
    --dst-prefix=: Show the given destination prefix instead of "b/"
    --exit-code: Make the program exit with codes similar to diff(1)
    --ext-diff: Allow an external diff helper to be executed
    --find-copies-harder: inspect unmodified files as candidates for the source of copy
    --find-object=: Look for differences that change the number of occurrences of the specified object
    --full-index: show the full pre- and post-image blob object names
    --histogram: Generate a diff using the "histogram diff" algorithm
    --ignore-blank-lines: Ignore changes whose lines are all blank
    --ignore-cr-at-eol: Ignore carriage-return at the end of line when doing a comparison
    --ignore-space-at-eol: Ignore changes in whitespace at EOL
    --ignore-submodules=: Ignore changes to submodules in the diff generation
    --indent-heuristic: Enable the heuristic that shifts diff hunk boundaries to make patches easier to read
    --inter-hunk-context=: Show the context between diff hunks
    --ita-invisible-in-index: this option makes the entry appear as a new file
    --line-prefix=: Prepend an additional prefix to every line of output
    --minimal: Spend extra time to make sure the smallest possible diff is produced
    --name-only: Show only names of changed files
    --name-status: Show only names and status of changed files
    --no-color: Turn off colored diff
    --no-color-moved: Turn off move detection
    --no-color-moved-ws: Do not ignore whitespace when performing move detection
    --no-ext-diff: Disallow external diff drivers
    --no-indent-heuristic: Disable the indent heuristic
    --no-index: Compare paths on the file system
    --no-prefix: Do not show any source or destination prefix
    --no-rename-empty: Whether to use empty blobs as rename source
    --no-renames: Turn off rename detection
    --numstat: Similar to --stat, but shows number of added and deleted lines in decimal notation
    --output-indicator-context=: Specify the character used to indicate context lines in the generated patch
    --output-indicator-new=: Specify the character used to indicate new lines in the generated patch
    --output-indicator-old=: Specify the character used to indicate old lines in the generated patch
    --output=: Output to a specific file instead of stdout
    --patch-with-raw: Synonym for -p --raw
    --patch-with-stat: Synonym for -p --stat
    --patience: Generate a diff using the "patience diff" algorithm
    --pickaxe-all: When -S or -G finds a change, show all the changes in that changeset
    --pickaxe-regex: Treat the <string> given to -S as an extended POSIX regular expression to match
    --raw: Generate the diff in raw format
    --relative,=: exclude changes outside the directory
    --rename-empty: Whether to use empty blobs as rename source
    --shortstat: Output only the last line of the --stat format
    --src-prefix=: Show the given source prefix instead of "a/"
    --stat-count=: Generate diffstat with limited lines
    --stat-graph-width=: Generate diffstat with a given graph width
    --stat-name-width=: Generate diffstat with a given filename width
    --stat-width=: Generate diffstat with a given width
    --stat=: Generate a diffstat
    --submodule=: Specify how differences in submodules are shown
    --summary: Output a condensed summary of extended header information
    --symlinks: use symlinks in dir-diff mode
    --textconv=: Allow (or disallow) external text conversion filters to be run when comparing binary files
    --tool-help: print a list of diff tools that may be used with `--tool`
    --trust-exit-code: exit when an invoked diff tool returns a non - zero exit code
    --word-diff-regex=: Use <regex> to decide what a word is
    --word-diff?: Show a word diff, using the <mode> to delimit changed words
    --ws-error-highlight=: Highlight whitespace errors in the context, old or new lines of the diff
    "-0": Omit diff output for unmerged entries
    -1, --base: compare with base
    -2, --ours: compare with our branch
    -3, --theirs: compare with their branch
    -B, --break-rewrites=: Break complete rewrite changes into pairs of delete and create
    -C, --find-copies=: Detect copies as well as renames
    -D, --irreversible-delete: Omit the preimage for deletes
    -M, --find-renames=: Detect renames
    -O=: Control the order in which files appear in the output
    -R: Swap two inputs
    -S=: Look for differences that change the number of occurrences of the specified string
    -U, --unified=: Generate diffs with <n> lines of context instead of the usual three
    -W, --function-context: Show whole surrounding functions of changes
    -X, --dirstat=: Output the distribution of relative amount of changes for each sub-directory
    -a, --text: Treat all files as text
    -b, --ignore-space-change: Ignore changes in amount of whitespace
    -d, --dir-diff: perform a full-directory diff
    -g, --gui: use `diff.guitool` instead of `diff.tool`
    -l=: prevent rename/copy detection from running if the number of rename/copy targets exceeds the specified number
    -p, --patch: Generate patch
    -s, --no-patch: Suppress diff output
    -t, --tool=: use the specified diff tool
    -u: Generate patch
    -w, --ignore-all-space: Ignore whitespace when comparing lines
    -x, --extcmd=: specify a custom command for viewing diffs
    -y, --no-prompt: do not prompt before launching a diff tool
    -z: do not munge pathnames and use NULs as output field terminators
documentation:
    command: '[AI] `git difftool` is a command in Git, a version control system, used to compare and review changes between two branches or commits in a three-way merge conflict resolution process. It launches an external tool such as Beyond Compare or kdiff3 to display the differences side by side, allowing users to visually inspect and merge the changes effectively.'
    flag:
        "0": '[AI] `git difftool -0` is a Git command used to open a three-way merge tool for resolving a conflict between two branches or commits. The `-0` option tells Git to use the default merge tool instead of opening an external merge tool, such as KDiff3 or p4merge. The default merge tool used depends on the system''s configuration. This command is primarily used when working with text-based differences in files and requires manual intervention for merging changes.'
        O: '[AI] `git difftool -O` is a command used in Git version control system for comparing and merging differences between two files or directories. The `-O` option tells Git to open the diff tool in an external application, with multiple file differences displayed side by side in an "Overview" mode. This can be useful when dealing with large or many files and requires a more visual comparison method. The tool itself isn''t described within this command, but it should support the side-by-side comparison of differences.'
        R: '[AI] `git difftool` is a Git command used to compare and edit the differences between two files or directories. The `-R` option, when used with `git difftool`, tells Git to apply this operation recursively to all files and subdirectories under the given directory. This means that instead of just comparing individual files, it will compare entire directories and their contents, making it useful for comparing large codebases or projects with multiple files.'
        S: '[AI] `git difftool` is a command in Git for comparing and merging differences between files or hunks of code. The `-S` option filters the output by showing only lines that have been added or deleted, skipping unchanged lines. This can make it easier to focus on the changes when dealing with large files or complex merge conflicts.'
        abbrev: '[AI] `git difftool --abbrev` is a Git command used to compare and edit the differences between two files or two branches in a text editor. The `--abbrev` option shortens the names of the files or branches being compared, making them easier to read in the text editor when using external merge tools like `mecmerge`, `kdiff3`, or `p4merge`. This can be particularly useful when working with long-named files or branches.'
        anchored: |-
            [AI] `git difftool --anchored` is a command used in Git version control system to compare and edit the differences between files or directories in a three-way merge conflict resolution.

            The `--anchored` option specifically tells Git to use external mergetool applications, anchored at their base, for comparing and editing changes. This means that the tools will open the conflicting files with the base (common ancestor) versions already displayed side by side. The user can then edit and save the merged result, resolving the conflict.

            The goal of this command is to help developers effectively handle merge conflicts when merging branches in Git.
        base: '[AI] `git difftool --base` is a command used in Git version control system to compare and view the differences between two branches or commits in a three-way merge conflict resolution using an external tool like KDiff3, Mecmerge, or p4merge. The `--base` option indicates that Git should use the common ancestor of the two versions being compared as the base for the comparison. This command opens a graphical user interface to visually inspect and resolve the merge conflicts before committing the changes.'
        binary: '[AI] `git difftool --binary` is a Git command used to compare and view the difference between two binary files in a three-way merge conflict or when working with binary files. The `--binary` option tells Git to use a binary diff tool instead of the default text-based one. This option is particularly useful for comparing and merging binary files, such as images, audio, or video files. The output is displayed side by side in two panels, allowing easy visualization and resolution of the merge conflicts.'
        break-rewrites: '[AI] `git difftool --break-rewrites` is a Git command used to compare and edit files with an external merge tool. The `--break-rewrites` option tells Git not to automatically apply any commit''s rebase or fast-forward changes during the comparison process, allowing users to manually resolve conflicts that may arise in the merge tool. This can be useful when dealing with complex merges involving multiple branches or difficult conflict resolutions.'
        cached: '[AI] `git difftool --cached` is a Git command used to compare and review the differences between the files in the index (staging area) against their corresponding commits. It opens a diff tool for each file with changes in the staging area, allowing users to visually inspect and resolve any merge conflicts before committing the changes. This command does not affect the working directory or the local repository history, it only compares files that have been added to the staging area.'
        check: '[AI] `git difftool --check` is a Git command used for comparing and merging changes between two branches or files. This command opens a three-way merge tool to show the differences between the local, remote, and base versions of a file. The key difference is that `--check` mode does not actually perform any merges; instead, it only checks if there are any conflicts and displays them for manual resolution. If no conflicts are found, Git will mark the merge as complete. This command is useful when you want to review changes before merging them into your main branch or resolve potential conflicts manually.'
        color: '[AI] `git difftool --color` is a Git command used to compare and edit the differences between two files in a three-way merge conflict or when using external merge tools. The `--color` option enables syntax highlighting of the difference display, making it easier to identify added, deleted, and modified text. When using a difftool like `mecmerge`, `kdiff3`, or `vcdiff`, this command opens a graphical user interface that allows users to interactively resolve merge conflicts.'
        color-moved: '[AI] `git difftool --color-moved` is a Git command used to compare and view file differences between two branches or commits in a three-way merge tool such as Beyond Compare, Mecmerge, or KDiff3. The `--color-moved` option enables colored marking of lines that have been moved or copied between files. This makes it easier to identify and understand the changes made in the files.'
        color-moved-ws: '[AI] `git difftool --color-moved-ws` is a Git command that opens a three-way merge tool to compare and resolve differences between files in a pair of branches or commits. The `--color-moved-ws` option enables colorization for whitespace differences marked as "moved" in the merge tool. This can help developers visually identify and address whitespace inconsistencies during a merge conflict resolution process.'
        color-words: '[AI] `git difftool --color-words` is a Git command used to compare and edit the differences between two files in a more visually appealing way than using regular `git diff`. The `--color-words` option specifically enables colored highlighting for changed words within the files being compared. This makes it easier to identify and review the exact changes made between the files.'
        compact-summary: '[AI] `git difftool` is a Git command used to compare and edit files with a three-way merge tool, such as Beyond Compare or KDiff3. The `--compact-summary` option that can be passed to this command displays the summary of changes in a compact format. Each changed file is listed with the name of the base, local, and remote branch from which the changes were made. Additionally, the number of added, modified, and deleted lines for each file is displayed. This format allows users to quickly review the differences between branches or commits at a glance.'
        cumulative: '[AI] `git difftool --cumulative` is a command used in Git version control system for comparing and merging file differences between branches or commits. The `--cumulative` option displays the differences in a cumulative fashion, meaning that it shows all the differences between multiple commits in one session, with each subsequent commit''s changes being applied on top of the previous ones. This can be helpful for understanding how individual commits modified a file and for resolving merge conflicts more efficiently.'
        diff-algorithm: |-
            [AI] `git difftool` is a command in Git, a version control system, used to compare and resolve differences between files or between branches. The option `--diff-algorithm` specifies which algorithm to use when displaying the differences.

            By default, Git uses the 'unified' diff algorithm, which shows context before and after the change, along with additions and deletions indicated by '+' and '-'. However, there are other algorithms available for more complex or specific comparisons, such as 'context', 'side-by-side', or 'mecasys'.

            For instance, `git difftool --diff-algorithm=context file1 file2` will display the differences using a context algorithm that shows more lines of context around the change. Adjust the algorithm option according to your needs to best view and understand the changes.
        diff-filter: '[AI] `git difftool` is a command in Git used to open a graphical three-way merge tool for comparing and resolving differences between files. The `--diff-filter` option is used to specify which types of changes to show. For example, `--diff-filter=d` will only show deleted files, while `--diff-filter=AM` will show added or modified files. This option allows fine-grained control over which differences are displayed in the difftool.'
        dir-diff: '[AI] `git difftool --dir-diff` is a Git command used to compare and view the differences between two directories or sets of files in a three-way merge conflict. The `--dir-diff` option generates a textual Diff format for each file, showing added, modified, and deleted files between the base, local, and remote versions. This command opens an external tool to visually inspect and resolve the merge conflicts.'
        dirstat: '[AI] `git difftool --dirstat` is a Git command used to compare the directory statistics between two branches or commits. The `--dirstat` option generates a summary of the number of added, modified, and deleted files in each sub-directory of the difference. This can be helpful for identifying which directories have undergone significant changes when comparing two Git repositories or branches. The output is displayed using a tabular format that shows the percentage of new, modified, and deleted files within each directory. The `git difftool` part launches a diff tool to visually inspect the differences between the files in the selected directories.'
        dirstat-by-file: '[AI] `git difftool` is a command in Git for comparing and merging changes between two branches or commits. The option `--dirstat-by-file` generates a statistics output showing the number of added, modified, and deleted files in each directory under the difference between the two repositories or commits. This can be useful to quickly understand which directories have significant changes without having to manually inspect each file.'
        dst-prefix: '[AI] `git difftool --dst-prefix` is a command used in Git version control system to open a three-way merge tool for comparing and resolving differences between two branches or files. The `--dst-prefix` option specifies the prefix that will be added to the destination file names when opening the merge tool. It helps in avoiding naming conflicts when merging files with similar but not identical names.'
        exit-code: |-
            [AI] `git difftool --exit-code` is a Git command that opens a three-way merge tool to compare and edit the differences between two branches or commits. The `--exit-code` option allows Git to return an exit code based on the actions taken in the merge tool:

            * Exit code 0 if changes were successfully staged for commit
            * Exit code 1 if the merge failed or no changes were made
            * Exit code 2 if there were conflicting changes that need resolution

            This option is useful when writing scripts, as it allows you to automate the process of merging branches and handling any conflicts that arise.
        ext-diff: |-
            [AI] `git difftool --ext-diff` is a Git command used to compare and edit files with external diff tools. The `--ext-diff` option tells Git to use an external tool for handling file diffs instead of the built-in three-way merge tool or `diff` command.

            When you run `git difftool`, it opens a separate window, launching two instances of your chosen diff tool side by side - one displaying the current branch's changes and the other showing the changes from the selected commit. This allows you to visually inspect the differences and make any necessary edits before committing them back to the repository.

            By using an external diff tool, you can take advantage of more advanced features, better visualization, or personal preferences in handling and comparing differences between two versions of a file. Some popular external tools include Beyond Compare (for Windows and Mac), Meld (for Windows, Mac, and Linux), and KDiff3 (for Windows, Mac, and Linux).
        extcmd: '[AI] `git difftool --extcmd` is a Git command used to invoke an external diff tool for three-way merge conflicts resolution. The `--extcmd` option allows specifying the command and arguments to be used instead of using a built-in diff tool. In this way, users can choose their preferred external diff tool to compare and edit changes between branches or commits.'
        find-copies: '[AI] `git difftool --find-copies` is a command used in Git version control system to compare and view differences between two files or sets of files, with an emphasis on finding copies of files that have been modified or moved between the two revisions. This option helps identify duplicate files that may have been renamed or moved to different locations within the project. The `--find-copies` flag is particularly useful when dealing with large projects, where keeping track of changes in file names and locations can be challenging. By using this command, Git will show not only the differences between the files but also highlight the relationship between the modified copies.'
        find-copies-harder: '[AI] `git difftool --find-copies-harder` is a Git command used to compare and view the differences between files with Merge or Conflict markers in three-way merge scenarios. The `--find-copies-harder` option helps locate and highlight changed copies of a file in case of renames or moves during a commit, making it easier for developers to resolve merge conflicts.'
        find-object: '[AI] `git difftool --find-object` is a Git command used to launch a three-way merge tool like KDiff3 or meld, for resolving merge conflicts arising from a Git merge operation. The `--find-object` option tells Git to search for the commit objects by their SHA-1 hashes in the local and remote repositories instead of fetching the entire branch. This can save time when working with large or slow repositories, as only the necessary commits are transferred.'
        find-renames: '[AI] `git difftool --find-renames` is a Git command used to compare and view the differences between two files or directories in a three-way merge tool, specifically designed for finding renames. When you run this command, Git will attempt to find renames by comparing the file names and their contents. If it detects a rename, Git will display the changes as if the file was deleted in one commit and added back with a new name in another commit. This can be helpful when working on projects with many file modifications or renames.'
        full-index: '[AI] `git difftool --full-index` is a command used in Git version control system for comparing and merging files in a more visual way. The `--full-index` option displays the entire indexed changes along with the file differences, providing a detailed view of both the file modifications and the staged changes. This can be useful when dealing with complex merge conflicts or large files where a side-by-side comparison might not provide enough context. Additionally, it launches an external tool for diff viewing (e.g., Beyond Compare, KDiff3, Mecmerge) to facilitate a more interactive comparison experience.'
        function-context: '[AI] `git difftool --function-context` is a Git command used to compare and edit files with three-way merge tools. The `--function-context` option enhances the comparison by including context around functions or methods in the source code, making it easier for developers to understand the changes made between two branches or commits. This feature is particularly useful when working on large codebases and merging functional changes.'
        gui: '[AI] `git difftool --gui` is a Git command used to compare and resolve differences between two file versions in a graphical user interface (GUI). When you run this command, Git opens a GUI tool such as Beyond Compare or KDiff3 to display the differences side by side. You can then review the changes and selectively apply them to your working directory or discard them as needed. This command is particularly useful when dealing with larger files or complex changes that are best handled visually in a GUI environment.'
        histogram: '[AI] `git difftool --histogram` is a Git command used to compare and view differences between files in a histogram format. When you run this command, Git opens a diff tool (such as Beyond Compare or KDiff3) that displays the differences in a side-by-side comparison. However, instead of showing the standard file difference view, it generates a histogram visualization of the changes made to each line between the two files. This histogram shows the number of additions, deletions, and modifications for each line, providing an efficient way to identify which parts of the file have undergone extensive changes.'
        ignore-all-space: '[AI] `git difftool --ignore-all-space` is a Git command used to compare and review differences between two files in a more visual way using external diff tools. The `--ignore-all-space` option is an argument that tells Git to ignore whitespace differences when displaying the differences. This can be useful when dealing with files where whitespace formatting does not matter, such as code files in languages like Python or JavaScript, which often have consistent but different whitespace styles between developers. By ignoring these differences, the focus remains on the more meaningful changes in the code.'
        ignore-blank-lines: '[AI] `git difftool --ignore-blank-lines` is a Git command used to compare and edit the differences between files in a three-way merge conflict or after a pull request. The `--ignore-blank-lines` option instructs Git to ignore changes that only consist of blank lines, making the comparison focus on non-trivial modifications. This can simplify the merging process by excluding unnecessary differences caused by formatting adjustments.'
        ignore-cr-at-eol: |-
            [AI] `git difftool` is a command in Git, a version control system, used to compare and review differences between files or segments of files in a text-based user interface (TUI). The `--ignore-cr-at-eol` option is an argument that can be passed to this command.

            This option instructs Git to ignore changes in the end-of-line characters that only affect line breaks, specifically carriage returns at the end of a line. This is particularly useful when working with text files across different operating systems, as they may represent line breaks differently (LF vs CRLF). Enabling this option allows you to focus on meaningful textual differences without being distracted by these insignificant differences in line-ending characters.
        ignore-space-at-eol: '[AI] `git difftool` is a command in Git for comparing and merging differences between files. The option `--ignore-space-at-eol` tells Git to ignore whitespace differences only at the end of lines (EOL) when displaying the differences. This can be useful when dealing with text files where only the formatting needs to be adjusted, but the content remains the same.'
        ignore-space-change: '[AI] `git difftool --ignore-space-change` is a Git command used to compare and review differences between two files or directories in a three-way merge conflict resolution. The `--ignore-space-change` option tells Git to ignore changes that only consist of inserting, deleting, or changing white spaces. It helps to focus on the differences that matter, such as semantic changes, rather than insignificant whitespace alterations. This can be useful when merging large files or dealing with specific text-based formats where whitespace is significant.'
        ignore-submodules: '[AI] `git difftool --ignore-submodules` is a command used in Git version control system. It opens a three-way comparison tool to compare and resolve differences between two branches or commits, ignoring any changes made in subdirectories that are marked as submodules in your Git repository. This can be useful when you want to focus on the differences at the top level of your project without getting distracted by changes within submodules.'
        indent-heuristic: '[AI] `git difftool --indent-heuristic` is a command in Git that helps compare and merge files with different indentation styles. The `--indent-heuristic` option enables an automatic indentation adjustment feature when using external tools like KDiff3 or Beyond Compare for three-way merges. By considering the context around changes, Git attempts to automatically adjust the indentation of the conflicting lines for a more visually accurate comparison and resolution of merge conflicts.'
        inter-hunk-context: '[AI] `git difftool --inter-hunk-context` is a Git command that opens a three-way merge tool, such as Beyond Compare or kdiff3, to compare and resolve the differences between two branches or commits. The `--inter-hunk-context` option extends the context displayed around each hunk (a logical change set) with additional lines before and after, allowing developers to see the larger context of the changes made in the surrounding code. This can be helpful when dealing with complex code changes that span multiple hunks or files.'
        irreversible-delete: '[AI] `git difftool --irreversible-delete` is a Git command used for three-way merge conflict resolution with external merge tools like KDiff3, Beyond Compare, or Mecmerge. The `--irreversible-delete` option is specifically designed to indicate that deleted lines in the local and base commits should not be presented as changes, but instead marked as deleted in the output of the merge tool. This flag helps simplify the conflict resolution process by removing unnecessary steps related to handling deletions. It assumes that the merge tool can accurately handle irreversible deletions based on its own logic and experience.'
        ita-invisible-in-index: '[AI] `git difftool --ita-invisible-in-index` is a Git command used to compare and view differences between files in a three-way merge conflict using an external tool, with the option `--ita-invisible-in-index` which tells Git not to show changes marked as "invisible in index" during the comparison. These are changes that have been added or modified locally but not yet committed. The goal is to help resolve conflicts by comparing your working directory file with both the base and the commit versions without being distracted by local changes.'
        l: '[AI] `git difftool -l` is a Git command used to display a list of files that have local changes and would be opened in a three-way merge tool for further comparison when resolving differences between branches or commits. The `-l` option stands for "list mode," which means it only outputs the names of the affected files instead of opening them in a difftool window.'
        line-prefix: '[AI] `git difftool` is a command in Git that opens a three-way merge tool to compare and resolve differences between files or hunks (sections of code) between two branches or commits. The `--line-prefix` option is used with this command to add a prefix string to each context line, making it easier to identify the origin of each line during the merging process. This can be helpful when working on large or complex files. For example, you might use different prefixes for the base (common ancestor), local, and remote files. The default prefixes are `<<<<<`, `|| `, and `>>>>>` respectively, but you can customize them using this option.'
        minimal: '[AI] `git difftool --minimal` is a Git command used to compare and review differences between two files in a text-based merge tool, such as Beyond Compare or KDiff3. The `--minimal` option ensures that only the minimal differing parts of each file are displayed in the merge tool window. This can help focus on the changes without being distracted by irrelevant context.'
        name-only: '[AI] `git difftool --name-only` is a Git command used to compare the names of files between the current branch and a specified commit or branch. The `--name-only` option requests that only the names of changed files be displayed in a text format, without showing the differences within those files. This command can help quickly identify which files have been modified or affected by the changes between two revisions.'
        name-status: '[AI] `git difftool --name-status` is a Git command used to compare and edit files with a three-way merge tool like `mecmerge` or `kdiff3`. The `--name-status` option displays only the names of changed files and their new or deleted status, without showing the actual differences. This can be useful for quickly identifying which files have been modified during a Git merge conflict.'
        no-color: '[AI] `git difftool --no-color` is a Git command that opens a three-way comparison tool to show the differences between two branches or commits. The `--no-color` option disables the use of color in the output, making it monochrome for users who prefer it or for those working in environments where colors are not supported.'
        no-color-moved: '[AI] `git difftool --no-color-moved` is a command in Git, a version control system. This command opens a three-way comparison window using an external tool like Beyond Compare or KDiff3 to compare the differences between two branches or commits. The `--no-color` option disables colorized output and the `--no-color-moved` option specifically excludes colorization of moved lines in the diff. This can be useful for accessibility reasons or when working with terminal applications that do not support color.'
        no-color-moved-ws: |-
            [AI] `git difftool --no-color-moved-ws` is a Git command used to compare and view differences between files in a three-way merge conflict using an external tool, with the following options:

            1. `--no-color`: Disables colored output in the difftools.
            2. `--no-color-moved-ws`: Prevents Git from automatically moving or rearranging whitespace characters when comparing files. This can be useful when dealing with text editors that have different default settings for tab and space characters, ensuring a consistent comparison view.
        no-ext-diff: '[AI] `git difftool --no-ext-diff` is a Git command used to compare and edit the differences between files in a three-way merge conflict or between two branches or commits. The `--no-ext-diff` option disables the use of external diff merging tools, such as TkDiff, Meld, or KDiff3, and instead uses Git''s internal diff viewer to display the differences in the terminal. This allows users to review and resolve merge conflicts without leaving their Git terminal environment.'
        no-indent-heuristic: '[AI] `git difftool` is a command used to compare and edit files with a three-way merge tool, such as Beyond Compare or KDiff3. The `--no-indent-heuristic` option disables the indentation heuristic when merging files. This means that Git will treat whitespace differences (including indentation) as text changes instead of trying to automatically adjust indentation based on context. Enabling this option can be useful when dealing with files where automatic indentation adjustments are not desired, such as code files with unusual indentation styles or configuration files.'
        no-index: '[AI] `git difftool --no-index` is a Git command used to compare and edit the differences between two files in a three-way merge conflict or when resolving a merge commit. The `--no-index` option tells Git not to use the index for the comparison, instead comparing files directly from the working directory. This can be helpful when dealing with binary files or files outside of the Git repository''s control. The command opens a difftool (like kdiff3 or meld) where you can review and resolve differences.'
        no-patch: '[AI] `git difftool --no-patch` is a Git command used to compare and edit the differences between two files or two branches in a three-way merge conflict using external diff tools, such as Beyond Compare or KDiff3, without displaying the patch output. The `--no-patch` option suppresses the generation and display of patch format output, making it useful when working with large or complex changes where a visual comparison is preferred over a textual one.'
        no-prefix: '[AI] `git difftool --no-prefix` is a Git command used to compare and edit the differences between files in a three-way merge conflict. The `--no-prefix` option disables the prefixes (ours, yours, base) that are normally displayed at the beginning of each hunk in the comparison window of the chosen difftool. This allows for a cleaner comparison view when resolving merge conflicts.'
        no-prompt: '[AI] `git difftool --no-prompt` is a Git command that opens a three-way merge tool to compare and resolve differences between two branches or commits in a text-based editor, without showing any prompts for user confirmation before opening the editor. This can be useful when you want to compare changes visually but don''t need interactive confirmation steps.'
        no-rename-empty: '[AI] `git difftool` is a command in Git that opens a graphical three-way merge tool to compare and resolve differences between files in a change set. The option `--no-rename-empty` disables the automatic detection and display of empty file renames. With this option, Git will not consider two empty files as different due to renaming, even if their paths have changed. This can be useful when working with files that don''t contain any content but are meant to be renamed, such as directories or symbolic links.'
        no-renames: '[AI] `git difftool --no-renames` is a Git command used to compare and view the differences between two files or two branches in a three-way merge conflict resolution. The `--no-renames` option disables the handling of rename diffs, which can simplify the comparison when renames are not relevant to the changes being reviewed. In other words, this command shows only non-rename differences between files, focusing on added or deleted lines and modified content without considering file renaming.'
        numstat: '[AI] `git difftool --numstat` is a Git command used to compare file differences between two branches or commits in a more visual and interactive way than the default `git diff`. The `--numstat` option specifically provides a numeric summary of the changes for each file, displaying the number of added, deleted, and modified lines. It shows the file name followed by the number of additions (+), deletions (-), and modifications (M) in columns. This command opens a diff tool like Beyond Compare or KDiff3 to provide a more convenient way to review and merge changes.'
        ours: '[AI] `git difftool --ours` is a command used in Git version control system to open a three-way merge conflict resolution tool with the local (working directory) version of the changed files as the preferred solution. The changes from both the local and remote repositories are compared, allowing you to manually review and choose which changes to keep before committing. This command can be useful when dealing with conflicts during merge operations in Git.'
        output: '[AI] `git difftool --output` is a command used in Git to launch a three-way diff tool for comparing and merging changes between two branches or commits. The `--output` option specifies a file where the tool''s output should be saved instead of being displayed in an interactive diff tool window. This can be useful when automating merge processes or for scripting workflows.'
        output-indicator-context: |-
            [AI] `git difftool` is a command in Git for comparing and merging files between branches or commits. The `--output-indicator-context` option influences how context lines are displayed when using an external tool for the three-way merge diff presentation.

            With this option, Git will include context lines before and after the changed sections, helping users to better understand the scope of changes within each hunk. These context lines provide additional information about the surrounding code that was not modified, facilitating a more informed decision when resolving merge conflicts.
        output-indicator-new: '[AI] `git difftool` is a command in Git that opens a three-way merge tool to compare and edit differences between two branches or commits. The option `--output-indicator-new` specifies how to indicate the side with new changes when merging. With this option, the ''+'' symbol will be appended before the file name of the branch or commit having the new changes in the merge tool window. This helps users identify easily which side contains the new modifications.'
        output-indicator-old: '[AI] `git difftool` is a command in Git that opens a three-way merge tool for comparing and merging differences between files or hunks of text between two branches or commits. The option `--output-indicator-old <char>` specifies the character to use as an indicator of the side from which the changes were made in the original file, when displaying the differences. By default, no output indicator is shown. With this option set, the specified character will appear before each line that was changed in the old (left-hand side) version of the file. This can be helpful for visualizing the context and source of changes during a merge conflict resolution process.'
        patch: '[AI] `git difftool --patch` is a Git command that opens an interactive three-way merge tool to compare and resolve differences between two branches or commits. The `--patch` option generates Unified Diff output in the patch format, which can be edited manually before applying the changes. This command allows users to visually review and modify differences before committing them to the repository.'
        patch-with-raw: '[AI] `git difftool` is a command in Git that opens a graphical three-way merge tool to compare and resolve differences between files. The `--patch-with-raw` option modifies the output of the `difftool`. Instead of displaying the differences in a merged format (as is the default), it outputs raw hunks, which are the individual changes represented as patches that can be applied using external tools or scripts. This allows for more advanced processing of the differences, such as applying them programmatically, or further analyzing and filtering the changes before committing them to a repository.'
        patch-with-stat: '[AI] `git difftool` is a command in Git for comparing and merging differences between files or branches. The `--patch-with-stat` option is used with `difftool`. It displays the difference as a unified diff, similar to `git diff`, but also includes a statistic summary for each file at the beginning. This summary shows information such as the number of added and deleted lines and the total byte size change. The patch output can then be used with external tools like `meld` or `kdiff3` for merging changes.'
        patience: '[AI] `git difftool --patience` is a Git command used to compare and view the differences between two files in a more visually appealing way than the default text-based output of `git diff`. The `--patience` option arranges the hunks (chunks of changes) in each file side by side based on their location, making it easier to understand the context of the changes. This command opens a difftool window where users can review and merge the differences.'
        pickaxe-all: '[AI] `git difftool --pickaxe-all` is a Git command used to compare and review differences between two file versions in a three-way merge conflict using external diff tools. The `--pickaxe-all` option tells Git to automatically pick and apply the changes from one side to the conflicting files, effectively resolving the conflict and creating new versions that incorporate the desired changes. This command is particularly useful when dealing with multiple conflicts in multiple files or when you have a clear idea of which changes should be kept for resolution.'
        pickaxe-regex: '[AI] `git difftool --pickaxe-regex` is a Git command used to compare and edit the differences between two file versions in a three-way merge conflict resolution. The `--pickaxe-regex` option filters the hunks (sections of changes) to be shown based on a given regular expression pattern. It helps to quickly identify and handle specific changes that match the regex within a conflicted file. This can save time when dealing with complex merge conflicts by allowing you to focus only on the parts of the file that need attention.'
        raw: |-
            [AI] `git difftool --raw` is a Git command used to compare and edit the differences between two files in a text-based fashion using external tools. The `--raw` option disables the use of Git's own diff pager and instead outputs raw, unformatted differences that can be processed by external diff tools such as Beyond Compare or Mecmerise.

            The `git difftool` command opens a separate window with side-by-side comparisons of files in a merge conflict or when comparing branches. By using the `--raw` option, the user gains more control over the comparison and editing process using their preferred external tools.
        relative,: '[AI] `git difftool --relative` is a Git command used to compare and view the differences between two files in a three-way merge conflict using external tools like KDiff3, Beyond Compare, or p4merge. The `--relative` option displays differences in a unified format relative to the working directory instead of an absolute patch format. This can make it easier to visually identify and resolve conflicts.'
        rename-empty: '[AI] `git difftool --rename-empty` is a Git command used to compare and edit file differences in a three-way merge using external tools. The `--rename-empty` option tells Git to treat empty files as if they have been renamed from the previous commit to the current one, allowing those files to be displayed in the difftool comparison window for further review and editing.'
        shortstat: '[AI] `git difftool --shortstat` is a Git command used to compare and view the differences between two branches or commits in a summary format called "shortstat." This command opens a three-way comparison tool, such as Beyond Compare or Mecmerge, with a brief statistics output displayed at the bottom of the window. The shortstat shows the number of added, modified, and deleted files for each commit, providing an overview of the changes before diving into the detailed differences.'
        src-prefix: '[AI] `git difftool` is a command in Git, a popular version control system, for comparing and merging files between branches or commits. The option `--src-prefix=<prefix>` sets the prefix string that will be added to the path of the source file (the common ancestor of the two versions being compared) in the diff tool''s interface. This helps users easily identify the source file when using external merge tools, such as Beyond Compare or kdiff3, and can make the merging process more efficient by providing a clearer context for the differences between files.'
        stat: |-
            [AI] `git difftool --stat` is a Git command used to compare and display the differences between two files or directories in a three-way merge tool, such as Beyond Compare or KDiff3, with an added output of a statistics summary for each file.

            The `--stat` option generates a statistic output for each hunk (a change set) in the diff, displaying information like the number of added, deleted, and modified lines, along with the context before and after each hunk. The default merge tool is used to visually compare the changes, making it easier to identify and resolve conflicts during a merge commit or when merging branches.
        stat-count: '[AI] `git difftool --stat-count` is a Git command used to compare and edit the differences between two files or two sets of changes in three-way merge conflicts. The `--stat-count` option adds a count of added, modified, and deleted lines for each file, displayed at the beginning of the diff tool output, allowing users to quickly assess the extent of changes before diving into the details.'
        stat-graph-width: '[AI] `git difftool --stat-graph-width` is a command in Git, a popular version control system. This option is used with `difftool`, which is a graphical tool for comparing changes between files or between the heads of two branches. The `--stat-graph-width` argument sets the width of the statistics graph displayed in the difftool window. A larger value allows for better visualization and comparison of file changes across revisions.'
        stat-name-width: '[AI] `git difftool --stat-name-width` is a Git command used to open a three-way merge tool for comparing changes between two branches or commits. The `--stat-name-width` option sets the maximum width of the filename statistics in the output. This can be useful when dealing with filenames that have long names and want to make sure they fit properly in the merge tool window.'
        stat-width: '[AI] `git difftool --stat-width` is a command in Git used to display the differences between two files or sets of files with an integrated diff tool, such as Beyond Compare or KDiff3. The `--stat-width` option sets the maximum width for the stat output, which shows the number of added and deleted lines at the beginning of each hunk (a continuous chunk of added or deleted content). This can be useful when working with very wide files or narrow terminal windows to prevent truncation of the stat information.'
        submodule: '[AI] `git difftool --submodule` is a Git command used to compare differences between revisions of submodules, which are separate Git repositories stored within your main project repository. When you run this command, Git will open a diff tool (such as Beyond Compare or Mecmerge) that shows the differences between two commits related to the submodule in question. This can be helpful for reviewing changes made to the codebase of a submodule and resolving merge conflicts. The `--submodule` option tells Git to apply this command to all submodules, rather than just the main project repository.'
        summary: '[AI] `git difftool --summary` is a Git command that generates a summary of the differences between two branches or commits using a three-way text comparison tool, such as Beyond Compare or KDiff3. The summary shows the name of each file with the number of added (+), deleted (-), and modified (M) lines in each commit or branch compared to the other. It provides an overview of the changes before invoking the difftool for a detailed comparison.'
        symlinks: |-
            [AI] `git difftool --symlinks` is a Git command used to compare and view differences between two files or two sets of changes in three-way merge conflicts. The `--symlinks` option is specifically used when dealing with files that are represented as symbolic links in the repository.

            With this option, Git follows the linked files' targets during the comparison process instead of comparing the symbolic links themselves. This ensures an accurate diff view and resolves any potential issues arising from differences between the symbolic links rather than their contents.
        text: '[AI] `git difftool --text` is a Git command used to compare and review changes between two files in a text-based format. It opens a side-by-side text editor showing the differences, allowing users to easily review and merge the modifications. The `--text` option specifies that the difference tool should be used in text mode instead of a graphical merge tool like `meld`, `kdiff3`, or `vcdiff`. This command is useful when working in terminal-only environments or preferring a more minimal interface for resolving merge conflicts.'
        textconv: '[AI] `git difftool --textconv` is a Git command used to compare and edit the differences between two files or two sets of changes in a text-based manner using external tools. The `--textconv` option specifies that these external tools should be used as text converters, meaning they will read and write text on the command line instead of opening a graphical user interface. This is useful for working with large or multiple files when a GUI may not be practical. When using this command, Git will launch your chosen difftool (such as Beyond Compare or Mec Merge) in text mode, displaying the differences between the files as text, and allowing you to edit these differences before committing them back into your repository.'
        theirs: |-
            [AI] `git difftool --theirs` is a command used in Git for three-way merge conflicts resolution. When merging branches with `git merge`, Git tries to automatically merge the changes. However, when there are conflicting changes in the same lines or close to each other, Git raises a conflict and pauses the merge process.

            `git difftool --theirs` opens up a difftool window displaying the differences between your local changes (yours) and the remote or another branch's changes (theirs). The command allows you to compare both versions side by side and decide which changes should be kept, discarded, or merged. By using this command, you can effectively review and resolve merge conflicts in a visual way.
        tool: '[AI] `git difftool --tool` is a Git command used to invoke an external tool for three-way merge conflict resolution during a merge or pull operation. The `--tool` option specifies the name of the diff tool to be used, such as "kcdiff", "meld", or "tkdiff". This command opens a graphical user interface where you can visually compare and edit the differences between your working directory files, the changes from the remote repository, and Git''s merge suggestions. The goal is to resolve any conflicts before committing the changes.'
        tool-help: '[AI] `git difftool --tool-help` is a Git command used to display help information for various difftools that can be used with `git difftool`. Difftools are external Merge Tools or three-way difference tools, which are used to visually compare and edit the differences between two files or branches. The `--tool-help` option specifically lists and provides brief descriptions of the available difftools that can be configured in Git for use with `git difftool`.'
        trust-exit-code: '[AI] `git difftool --trust-exit-code` is a Git command used to compare and edit the differences between files in a three-way merge conflict. The `--trust-exit-code` option tells Git to automatically accept the changes made by the selected diff tool, without further confirmation from the user. If the diff tool exits with a zero exit code, Git assumes that the merge conflict has been successfully resolved. This can save time in automated workflows where conflicts are expected and can be reliably handled by an external tool.'
        u: '[AI] `git difftool -u` is a command used in Git version control system to compare and view the differences between two files or two versions of the same file in an updated three-way Diff merge tool, such as Beyond Compare or KDiff3. The `-u` option enables an Unified Diff format output which displays the differences using context lines around the changed parts. This command opens the merge tool with the changes side by side, allowing users to manually resolve conflicts and commit the changes.'
        unified: '[AI] `git difftool --unified` is a Git command used to compare and view the differences between two files in a three-way text-based merge tool, such as Beyond Compare or KDiff3. The `--unified` option formats the output in an easy-to-read unified context format, which shows the added, deleted, and common lines between the two files with context around them. This command helps users to understand the changes made between different versions of a file during a merge conflict resolution process.'
        word-diff: '[AI] `git difftool --word-diff` is a Git command used for comparing and merging changes between two branches or commits. The `--word-diff` option enables word-based differencing when displaying the differences, making it easier to spot changes in text files between the revisions. Instead of showing character-by-character changes, words that have been added, modified, or deleted are highlighted. This can be particularly useful for reviewing larger texts, as it provides a clearer view of the actual content changes.'
        word-diff-regex: '[AI] `git difftool` is a command in Git used to compare and edit the differences between two files or two branches. The `--word-diff-regex` option is a way to customize how Git displays the differences during a word-level diff. It uses a regular expression pattern to identify the parts of the text that have changed at the word level, allowing for more precise control over how the differences are displayed. For example, it can be used to exclude certain patterns or words from being considered as changes at the word level. This option is particularly useful when working with languages where whitespace matters, such as programming languages or markup languages.'
        ws-error-highlight: '[AI] `git difftool` is a Git command that opens a three-way merge tool to compare and resolve differences between files in a Git repository. The `--ws-error-highlight` option is used to highlight conflict markers and errors in the merge tools when working across multiple worktrees or workdirectories. With this option, any conflicts or errors are clearly indicated in the merge tool, making it easier to identify and resolve them.'
        z: '[AI] `git difftool` is a command-line tool provided by Git for comparing and merging files between two branches or commits. The `-z` option is used with `difftool`, and it instructs the tool to output the binary difference data directly, without opening an external merge tool. This option is typically used when you want to process the differences programmatically, using other tools like `patch`, `diff`, or specialized scripting languages for handling binary files. The output will be in a raw format (such as Unified Diff for text files or Raw Binary format for binaries), allowing further processing without the need for manual interaction with a graphical merge tool.'
