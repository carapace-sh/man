# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: dlv
description: Delve is a debugger for the Go programming language.
flags:
    -h, --help: help for dlv
persistentflags:
    --accept-multiclient: Allows a headless server to accept multiple client connections via JSON-RPC or DAP.
    --allow-non-terminal-interactive: Allows interactive sessions of Delve that don't have a terminal as stdin, stdout and stderr
    --api-version=: Selects JSON-RPC API version when headless. New clients should use v2. Can be reset via RPCServer.SetApiVersion. See Documentation/api/json-rpc/README.md.
    --backend=: Backend selection (see 'dlv help backend').
    --build-flags=: 'Build flags, to be passed to the compiler. For example: --build-flags="-tags=integration -mod=vendor -cover -v"'
    --check-go-version: Exits if the version of Go in use is not compatible (too old or too new) with the version of Delve.
    --disable-aslr: Disables address space randomization
    --headless: Run debug server only, in headless mode. Server will accept both JSON-RPC or DAP client connections.
    --init=: Init file, executed by the terminal client.
    --log: Enable debugging server logging.
    --log-dest=: Writes logs to the specified file or file descriptor (see 'dlv help log').
    --log-output=: Comma separated list of components that should produce debug output (see 'dlv help log')
    --only-same-user: Only connections from the same user that started this instance of Delve are allowed to connect.
    --wd=: Working directory for running the program.
    -l, --listen=: Debugging server listen address.
    -r, --redirect*=: Specifies redirect rules for target process (see 'dlv help redirect')
documentation:
    command: '[AI] `dlv` is a debugger command for the Delve debugger (delve.org), which is used in Go programming language for interactive and automated debugging. It stands for "Delve Value," and when executed, it displays the value of an expression at the current debugger stop point. For example, `dlv expr $GOOGLE_ expressions.Go:search` would print out the value of the `expressions.Go.search` variable in the Go project where Google Cloud SDK is installed.'
    flag:
        help: '[AI] `dlv` is a debugger for Delite, Dlang''s reactive programming library. The command `dlv --help` displays the help information for the debugger. It provides an overview of `dlv`''s features and usage, including options for connecting to a running application, loading and inspecting data, setting breakpoints, stepping through code, and more. The help text also includes examples for common tasks. For detailed information on each command or option, use the `--help-command` or `--help-option` flags respectively.'
