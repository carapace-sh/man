# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: seal
description: Seal a secret for usage with OpenFaaS Cloud
flags:
    --download: Download the kubeseal binary required for this command, see also --download-version
    --download-to=: Specify download path for kubeseal, leave empty for a temp dir
    --download-version=: Specify a kubeseal version to download
    --name=: Secret name
    -c, --cert=: Filename of public certificate
    -i, --from-file*=: Read a secret from a from file
    -l, --literal*=: Secret literal key-value data
    -n, --namespace=: Secret name
    -o, --output-file=: Output file for secrets
documentation:
    command: '[AI] `faas-cli cloud seal` is a command used in Faas-cli (Function as a Service cli), which is a tool for managing and deploying serverless functions using OpenFaaS. This command is responsible for updating the configuration of your local Faas-cli installation with the latest Cloud provider information, such as endpoints and access keys. In other words, it helps ensure that your local Faas-cli environment is in sync with your chosen cloud provider''s latest settings.'
    flag:
        cert: '[AI] The `faas-cli cloud seal --cert` command is used in the FaaS-compatible OpenFaas or Functic platform to authenticate and establish a secure connection with the Faas-API cloud gateway. It installs a client certificate for secure communication between the CLI and the cloud gateway. The command requires a valid PEM-encoded private key and certificate file, which are typically generated using OpenFaas or Functic tools. When executed, this command enhances the security of your Faas-based application deployment and management by encrypting all communications with the cloud gateway.'
        download: '[AI] `faas-cli cloud seal --download` is a command used in the FaaS (Function-as-a-Service) technology ecosystem with the FaaS CLI tool. This command is responsible for downloading the latest Cloud Seal, which is a component of the Faas-netes project. Cloud Seal is a Kubernetes add-on that provides authentication and authorization to your functions deployed in a Kubernetes cluster using FaaS. By running `faas-cli cloud seal --download`, you are instructing the CLI tool to fetch the latest version of Cloud Seal from its repository and save it locally for further installation or deployment processes.'
        download-to: '[AI] The `faas-cli cloud seal --download-to` command is a part of the FaaS-cli (Function-as-a-Service Command Line Interface) tool used to manage and deploy serverless functions using the OpenFaaS platform. This specific command is used to download configuration seals from a running OpenFaaS cluster. A seal is a snapshot of the cluster''s current state, including function definitions and configurations. The `--download-to` option specifies the local file path where the downloaded seal will be saved as a tar archive for later use. This command can be used to create backups or transfer cluster configurations between environments.'
        download-version: '[AI] `faas-cli cloud seal --download-version` is a command used with the FaaS CLI (Function-as-a-Service Command Line Interface) tool. This command is used to download and install the latest version of the Faas-netes Seal, which is a component for managing Kubernetes custom resources for FaaS functions. The `--download-version` flag tells the command to only download the specified version instead of installing it directly.'
        from-file: '[AI] `faas-cli cloud seal --from-file` is a command used in the FaaS (Function-as-a-Service) tool, Faas-CI, to apply a configuration sealed from a file. The `--from-file` flag specifies the path to the YAML or JSON configuration file containing the Faas applications and services definitions along with the target cloud provider details. This command encrypts the sensitive information in the file using the Kubernetes `kubeseal` tool, then deploys the sealed configurations to the specified cloud platform such as AWS, Azure, Google Cloud, etc. The overall goal is to securely manage and deploy FaaS applications with encrypted configuration data.'
        literal: '[AI] `faas-cli cloud seal --literal` is a command used in the FaaS (Function-as-a-Service) toolchain, specifically with the FaaS CLI (Command Line Interface) tool. This command is used to create or update a Kubernetes YAML configuration file for deploying functions as FaaS applications, using literal values instead of referencing values from a `.env` or `secrets.yaml` file. In other words, it generates the YAML files with hardcoded values, which can be useful when deploying to environments where secrets management is not in place yet, or for manual testing and local development.'
        name: |-
            [AI] The `faas-cli cloud seal --name` command is used in FaaS (Function-as-a-Service) technology, specifically with the Faas-cli tool. This command seals a Faa function project into a deployable artifact using a specific cloud provider's configuration.

            The `--name` flag is used to provide a name or label for this sealed artifact. It helps in identifying and managing different versions of functions within the same cloud environment. The sealed artifact can then be deployed to the cloud provider using Faas-cli or other deployment tools.
        namespace: '[AI] `faas-cli cloud seal --namespace` is a command used in the FaaS (Function-as-a-Service) technology ecosystem, specifically with the FaaS CLI tool. This command is used to create or update an isolated environment, called a "seal," in a cloud provider like AWS, Google Cloud, or Azure, with a specific namespace. A namespace is a logical partitioning of resources within a cloud platform, providing organizational and access control benefits. By using `--namespace` option, you ensure that all the functions deployed under this command will be created/updated under the specified namespace.'
        output-file: '[AI] The `faas-cli cloud seal --output-file` command is used with the FaaS-CLI (Function-as-a-Service Command Line Interface) tool to create or update a Kubernetes CloudSeal manifest file. The `--output-file` option specifies the name and location of the output file where the generated CloudSeal manifest will be saved. This command helps in managing and deploying cloud-native functions using FaaS-CLI and Kubernetes.'
