# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create [flags]
description: Schedule a new pipeline.
flags:
    --active: Whether or not the schedule is active
    --cron!=: Cron interval pattern
    --cronTimeZone=: Cron timezone
    --description!=: Description of the schedule
    --ref!=: Target branch or tag
documentation:
    command: |-
        [AI] `glab schedule create` is a GitLab CI/CD command used to create a new scheduled job in a `.gitlab-ci.yml` file. This command allows users to define a new task that will run automatically at specified intervals or on specific dates. The syntax for using this command includes defining the job name, image or script to use, and the schedule settings such as cron format or regular expression for recurring jobs. For example:

        ```yaml
        my_job:
          image: ruby:latest
          schedule:
            # Cron format (e.g. "0 0 * * MON-FRI") or a regular expression to match dates (e.g. "0 * * * MON,WED,FRI")
            cron: "0 15 * * *"
          script: echo "Hello, World!"
        ```

        This creates a new job named `my_job`, which runs the latest Ruby image and executes a simple script every day at 3 PM. This scheduled task will be automatically run by GitLab Runner according to the defined schedule.
    flag:
        active: |-
            [AI] The `glab schedule create --active` command is used in GitLab to create a new scheduled CI/CD pipeline job with an active status. In other words, it sets up a recurring job that will run immediately after being created, as well as according to the specified schedule.

            Here's a brief explanation of each part of the command:

            1. `glab`: This is the name of the command-line interface tool for interacting with GitLab repositories.
            2. `schedule create`: This specifies that we want to create a new scheduled job using the GitLab Runners' schedule feature.
            3. `--active`: This option sets the newly created scheduled job to an active state, meaning it will run immediately after being created and according to its schedule. Without this option, the job would only start running based on its schedule in the future.
        cron: '[AI] `glab schedule create --cron` is a GitLab CI/CD command used to create a new scheduled job in GitLab Runner. The `--cron` option specifies that the schedule should be defined using cron syntax, allowing you to define complex scheduling rules such as "run every day at 3am" or "run every Monday and Wednesday at 2pm". Once created, GitLab Runner will automatically execute the defined jobs according to their scheduled intervals.'
        cronTimeZone: '[AI] `glab` is a Git interface tool for Kubernetes, and the `create` subcommand of the `schedule` module is used to create or update a CronJob resource in Kubernetes. The `--cronTimeZone` option sets the timezone for the scheduled jobs defined by the CronJob. It specifies the timezone in which the scheduling expressions (e.g., "0 9 * * MON-FRI") should be interpreted. This allows you to define schedules that align with specific timezones, making it easier to coordinate jobs across different locations or teams.'
        description: |-
            [AI] The `glab schedule create` command is used to create a new GitLab CI/CD schedule in GitLab. The `--description` option allows you to provide a description for the schedule, which will be displayed in the GitLab interface and can help identify the purpose of the schedule.

            Here's a brief breakdown:

            1. `glab`: This is the command-line tool for interacting with GitLab.
            2. `schedule create`: This specific command creates a new CI/CD schedule in GitLab.
            3. `--description`: This option allows you to specify a description for the schedule when it's created.
        ref: |-
            [AI] The `glab schedule create --ref` command is used to create a new GitLab CI/CD schedule in Glab, a command-line interface for GitLab.

            The `create` flag indicates that a new schedule is being created. The `--ref` option specifies the branch or commit reference from which the configuration for the new schedule will be taken. This could be a branch name, a commit hash, or a tag. Once created, the schedule will run the jobs defined in the referenced configuration file at the specified intervals.
