# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: subtract
description: subtract one set of data files from another set
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -o=: Output directory to write
    -pkg=: Restrict output to package(s) matching specified package pattern
    -v=: Verbose trace output level
documentation:
    command: '[AI] `go-tool-covdata` is a command-line tool from the Go testing framework. The `subtract` subcommand computes the difference between two coverage data files, producing a new file with the changed lines. This can be useful for identifying code changes that affect test coverage or to track the effectiveness of refactoring efforts. Input are usually generated by `go test -coverprofileout file1.out` and `go test -coverprofilefile file2.prof`. The output is written into a new file, for example `subtracted-covdata.out`.'
    flag:
        cpuprofile: |-
            [AI] The `go-tool-covdata subtract -cpuprofile` command is a part of the Go programming language's `cov` toolkit. This specific command is used for subtracting the difference between two CPU profiles, producing a new CPU profile that represents the difference in terms of executed lines of code between the two input profiles.

            Here's a more detailed breakdown:

            1. `go-tool-covdata`: This is the main command for working with Go's profiling data (coverage information).
            2. `subtract`: A subcommand that performs a difference operation on two sets of CPU profile data.
            3. `-cpuprofile`: An option that specifies the input files containing the CPU profiles to be compared and the output file where the result will be saved.
            4. The input files represent the CPU usage statistics for specific Go programs, while the output file contains the difference in terms of executed lines of code between those two programs. This information can be useful for identifying the parts of your codebase that have been optimized or changed when comparing versions of your software.
        hw: |-
            [AI] `go-tool-covdata` is a command-line tool from the Go programming language's `govment` package used for handling source code coverage data. The specific command, `subtract -hw`, performs a difference operation on two sets of coverage data files (`.cover` or `.out.xml`).

            The `subtract` function calculates the difference between two sets of coverage data to find out which lines were covered in one set but not in the other. The `-h` and `-w` flags are used for handling human-readable output and showing the result as a difference in columns instead of a patch file format respectively.

            So, running `go-tool-covdata subtract -hw file1.cover file2.cover` will generate output that shows which lines were covered only by either file1 or file2, making it easier to understand the changes in coverage between those two sets.
        i: '[AI] `go-tool-cov data subtract -i` is a command in the Go toolchain used for computing and comparing code coverage data. The `subtract` subcommand takes an input file `-i` (which contains coverage data to be subtracted) and generates a new file with the difference between two sets of coverage data. This can be useful for identifying which lines of code have improved or decreased in coverage between different test runs or versions.'
        memprofile: '[AI] `go-tool-covdata` is a command-line tool from the Go programming language''s standard library, specifically used for managing and processing code coverage data. The command `subtract` is one of its functions, which is used to subtract the coverage data of one test result from another, producing the difference between them. The `-memprofile` option is used in conjunction with this command to process memory profiles along with the coverage data for more detailed analysis. Essentially, it helps you identify the code sections that have unique memory behavior when running different tests.'
        memprofilerate: |-
            [AI] The `go-tool-covdata subtract` command is a part of the Go Cover tool, which is used to compute and analyze test coverage for Go programs. The `subtract` flag specifically computes the difference between two coverage profiles, producing a new profile representing the change in coverage between them.

            The `--memprofilerate` option takes an argument specifying the memory profiling rate in Hz. When used with `subtract`, it instructs the tool to also subtract the memory profiling data from the corresponding files when computing the difference between two coverage profiles. This can be useful for identifying changes in memory usage associated with code coverage changes, providing a more complete analysis of the software under test.
        o: '[AI] The `go-tool-cov` command with the `subtract` flag is used to compute the difference between two coverage profiles in Go programming language. The output file `-o` option is used to specify the name of the output file where the subtracted coverage data will be saved. In other words, this command calculates and stores the difference between two coverage profiles in the specified output file.'
        pkg: '[AI] `go-tool-covdata` is a command-line tool from the Go programming language''s standard library, used for handling code coverage data. The specific command `go-tool-covdata subtract -pkg <package1> <package2>` takes two package arguments and generates a difference file showing the code coverage data of the first package (package1) minus the second package (package2). In other words, it shows which parts of the first package''s source code have coverage that is not present in the second package. This can be useful for identifying unique coverage or areas where one package may depend on another without requiring full test suite overlap.'
        v: |-
            [AI] `go-tool-covdata` is a command-line tool from the Go programming language's `govc` (Go Version Control) or `gocov` (Go Coverage) toolset. The specific command `go-tool-covdata subtract -v` performs a difference analysis between two `.gcno` coverage files, producing a new file with the differences in coverage data.

            The `subtract` action computes the difference between the specified source and target .gcno files, which represent test or benchmark executions. The output is written to a new .gcno file, as specified by the user.

            The `-v` flag enables verbose mode, providing more detailed information about the coverage data comparison process, such as the names of the source and target files being compared and any differences found between them.
