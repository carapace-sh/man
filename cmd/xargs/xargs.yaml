# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: xargs
description: build and execute command lines from standard input
flags:
    --help: display this help and exit
    --process-slot-var=: set environment variable VAR in child processes
    --show-limits: show limits on command-line length
    --version: output version information and exit
    -0, --null: items are separated by a null
    -E=: set logical EOF string
    -I=: same as --replace=R
    -L, --max-lines=: use at most MAX-LINES non-blank input lines per command line
    -P, --max-procs=: run at most MAX-PROCS processes at a time
    -a, --arg-file=: read arguments from FILE
    -d, --delimiter=: items in input stream are separated by CHARACTER
    -e, --eof?: equivalent to -E END if END is specified
    -i, --replace?: replace R in INITIAL-ARGS with names
    -l=: similar to -L but defaults to at most one non- blank input line
    -n, --max-args=: use at most MAX-ARGS arguments per command line
    -o, --open-tty: Reopen stdin as /dev/tty in the child process
    -p, --interactive: prompt before running commands
    -r, --no-run-if-empty: if there are no arguments, then do not run COMMAND
    -s, --max-chars=: limit length of command line to MAX-CHARS
    -t, --verbose: print commands before executing them
    -x, --exit: exit if the size (see -s) is exceeded
documentation:
    command: '[AI] `xargs` is a command-line utility in Unix and Unix-like operating systems used to read items from standard input, delimited by lines or white space, and execute a command for each item. It passes arguments to the command, derived from standard input, after the initial arguments. This allows combining the output of one command with another, creating more complex and efficient pipelines.'
    flag:
        E: |-
            [AI] `xargs` is a command-line utility in Unix and Linux systems used to build and execute commands from standard input, typically the output of another command. The `-E` option in `xargs` specifies the delimiter that marks the end of each argument passed to the command. This is useful when dealing with lines that contain arguments separated by a character other than white space. By setting `-E` to this delimiter, `xargs` will correctly interpret each line as a separate argument. For instance, if you're processing input with the newline character as a separator and want to pass filenames containing spaces or special characters as arguments, use the following command:

            ```bash
            find . -type f -print0 | xargs -0 -E '\n' cmd [command]
            ```

            In this example, `-print0` option in the `find` command produces null-separated output, and `xargs` with `-0` option processes null-delimited input. The `-E '\n'` option in `xargs` sets the end of argument delimiter as a newline character.
        I: '[AI] The `xargs` command in Unix is used to build and execute commands from standard input. The option `-I` followed by a character specifies that the argument following the option is a placeholder in the command line, which will be replaced by each argument read from standard input. For example, `ls -l *.txt | xargs -I % sh redir.sh %` would pass each file matching `*.txt` to `redir.sh`, replacing the `%` with the file name.'
        arg-file: '[AI] `xargs` is a command-line utility in Unix-like operating systems used to build and execute commands from standard input, which is usually provided by piping the output of another command into `xargs`. The `--arg-file` option tells `xargs` to read arguments from a file instead of the standard input. This allows you to pass large or numerous arguments to a command more efficiently than passing them one at a time as separate arguments, especially when used in conjunction with commands like `find` and `sed`. The specified file should contain one argument per line.'
        delimiter: '[AI] `xargs` is a utility in Unix-like operating systems used to build and execute commands from standard input, often generated by another command using the `--output-file=` or `--print0` option to separate arguments with null characters (NUL). The `--delimiter` option for `xargs` specifies a custom delimiter other than NUL characters for separating arguments. This can be useful when dealing with specific data formats where another character serves as a separator, such as commas in CSV files. The syntax is `xargs --delimiter=<character> [command]`.'
        eof: '[AI] `xargs` is a utility in Unix-like operating systems used to build and execute commands from standard input. The `--eof` option is used to specify a character that indicates the end of input for `xargs`. By default, `xargs` assumes that each input line ends with a newline character (`\n`), but you can use `--eof` to set another character as the end-of-file indicator. This can be useful when reading input from files with non-standard line endings or other forms of data where the default newline may not mark the end of an argument. For example, if your input file contains tab-delimited columns, you might use `--eof=''\t''` to indicate that a tab character signifies the end of an argument in your command line.'
        exit: |-
            [AI] The `xargs` command is a utility in Unix-like operating systems for constructing and executing commands from standard input. The `--exit` option changes the default behavior of `xargs`.

            By default, `xargs` waits for all the commands it generates to finish before terminating. With the `--exit` option, `xargs` exits immediately after the last command is executed, regardless of whether its children have completed or not. This can be useful when you want to start a long-running process in the background and do not wish to wait for its completion before continuing with other tasks.
        help: |-
            [AI] `xargs` is a command-line utility in Unix-like operating systems for building and executing commands from standard input, with each input line expanded as an argument or set of arguments. The `--help` option displays detailed usage information about the `xargs` command. Here's a summary:

            `xargs [OPTIONS] [COMMAND] [ARGUMENTS]...`

            * Read items from standard input, and execute COMMAND for each item.
            * Optionally, prepend ARGUMENTS as arguments to COMMAND.
            * The newline separating the items is passed as an argument to COMMAND, by default as argument ARGV[0].

            Options:
            -p: Print each command before executing it.
            -n: Run COMMAND with at most N arguments per invocation.
            -I: Replace occurrences of % in ARGUMENTS with the input item(s).

            `xargs --help` displays detailed information about available options, examples, and exit statuses.
        interactive: '[AI] `xargs` is a utility in Unix-like operating systems for building and executing commands from standard input, typically the output of another command. The `--interactive` option modifies its behavior by running each command interactively, meaning it will display each command to the terminal before executing it, waiting for user confirmation before proceeding. This is useful when you want to see exactly what command will be run and have the opportunity to cancel if necessary.'
        l: '[AI] `xargs` is a utility in Unix-like operating systems for constructing and executing commands from input data. The option `-l` or --label is used with `xargs` to specify a label, which is the number of items that appear on each line before being passed as arguments to the command. This option allows you to limit the maximum number of arguments given to a command in a single invocation and can be useful for managing large amounts of data. With `-l N`, each line of standard input contains at most N items, and N-1 blank spaces appear between them.'
        max-args: '[AI] `xargs` is a command-line utility in Unix and Unix-like operating systems that reads items from a pipe or a file, and builds and executes commands with them as arguments. The `--max-args` option sets the maximum number of arguments that can be passed to each invoked command. For instance, `xargs --max-args=5 cmd arg1 arg2 arg3 arg4 arg5 < input_file` will invoke `cmd` with up to five arguments at a time from the specified input file.'
        max-chars: |-
            [AI] `xargs` is a command-line utility in Unix-like operating systems used to build and execute commands from standard input. The `--max-chars` option sets a limit on the maximum number of characters read from standard input before building a new command.

            When reading input from a pipe or a file, `xargs` by default reads up to 512 bytes per invocation. You can override this limit using the `--max-chars` flag followed by the number of characters. For instance, setting `--max-chars=100` would cause `xargs` to read and pass at most 100 characters to each command it builds. This can be useful when dealing with large input where you want to limit the size of individual commands.
        max-lines: '[AI] `xargs` is a command-line utility in Unix and Unix-like operating systems for building and executing commands from input. The `--max-lines` option sets the maximum number of lines read before invoking the command. It allows reading input in batches, which can reduce memory usage or improve performance when dealing with large inputs. For example, `find /path -type f -print0 | xargs --max-lines=100 --null cmd {} +` reads up to 100 file names at a time and passes them as arguments to the command `cmd`.'
        max-procs: '[AI] `xargs` is a command-line utility in Unix-based systems used to build and execute commands from standard input, reading items in batches. The `--max-procs` option sets the maximum number of processes that can be run in parallel for the commands built by `xargs`. This helps limit the concurrency level and prevents overloading the system with too many processes at once. By default, `xargs` runs commands sequentially; setting `--max-procs` allows you to run multiple commands simultaneously. For example, `xargs --max-procs=4 command < input.txt` would execute up to 4 instances of `command` in parallel when reading from the file `input.txt`.'
        no-run-if-empty: '[AI] `xargs` is a command-line utility in Unix and Linux systems for building and executing commands from input. The `--no-run-if-empty` option is used to prevent the execution of a command if there is no argument supplied to it. In other words, if `xargs` reads an empty line or input file and the `--no-run-if-empty` flag is set, it will not execute the command associated with that input. This can be useful in cases where you want to ensure that only non-empty inputs trigger command execution.'
        "null": '[AI] `xargs` is a command-line utility in Unix and Unix-like operating systems used to build and execute commands from standard input, typically the output of another command. The `--null` option is used when dealing with fields that may contain spaces or other special characters. With this option, `xargs` treats each line as a zero-terminated string instead of a whitespace-delimited list of arguments, allowing for passing large or complex data to the invoked command without running into issues caused by whitespaces in input lines.'
        open-tty: |-
            [AI] `xargs` is a command-line utility in Unix and Linux systems used to build and execute commands from standard input. The `--open-tty` option is one of its advanced features.

            With this option, `xargs` opens a new terminal window or TTY (Teletype) for each command it executes, instead of running them in the background as child processes. This can be useful when working with interactive commands that require user input during execution. The TTY allows for a more natural interaction between the user and the command, making it suitable for scripts or automation tasks where manual intervention is necessary.
        process-slot-var: '[AI] `xargs` is a command-line utility in Unix and Unix-like operating systems for building and executing commands from standard input, often used to process large lists or files one by one. The option `--process-slot-var=NAME` sets the name of the variable that will be used to pass each argument (from standard input) as a separate argument to the command being built. For example, if you have a list of filenames and use `xargs --process-slot-var=FILE echo FILE`, each filename from standard input will be passed as an argument to the `echo` command along with the string "FILE", resulting in `echo <filename> FILE`.'
        replace: |-
            [AI] `xargs --replace` is a feature in the `xargs` utility, which is used to build and execute commands from standard input. The `--replace` option modifies how arguments are replaced in the command line.

            Instead of the default behavior where `xargs` replaces all occurrences of `{}` with an argument, `--replace` only replaces the first occurrence of each occurrence of `{}`. This is useful when you have a command where multiple arguments need to be derived from a single input line and replaced separately in the command.

            For example, given the following input lines:
            ```
            dir1/file1.txt dir2/file2.txt dir3/file3.txt
            ```
            Using `xargs --replace {} mycommand < input.txt` would result in three separate invocations of `mycommand` with arguments `dir1/file1.txt`, `dir2/file2.txt`, and `dir3/file3.txt`.
        show-limits: |-
            [AI] `xargs` is a command-line utility in Unix and Linux systems used to build and execute commands from input. The option `--show-limits` is not a standard option for `xargs`. It's specific to some GNU implementations of the xargs command.

            When you use this option, `xargs` will display the maximum number of arguments it can process at once and the maximum size of each argument. This information helps understand the limits of the system and how best to use `xargs` in your scripts or commands. The output usually looks like:

            ```bash
            xargs: limit: 32768 bytes/argument, 1024 arguments/invoke; max total size: 1115136 bytes. This is equivalent to approximately 2952 arguments of average size 385 bytes or 231 arguments of average size 4748 bytes.
            ```

            This output shows that the maximum argument size is set to 32,768 bytes and the system can handle up to 1024 arguments at a time, with a maximum total size limit of 1,115,136 bytes. These limits vary between systems, so it's essential to understand these constraints when designing your pipelines or scripts involving `xargs`.
        verbose: '[AI] `xargs --verbose` is a command-line utility in Unix-like operating systems that builds and executes commands from input. The `--verbose` option makes `xargs` print each command as it is being built and executed, displaying the arguments being passed to the command. This can be useful for debugging or understanding the behavior of complex pipelines.'
        version: '[AI] `xargs --version` is a command used in Unix-like operating systems to build and execute commands from standard input. The `--version` option is used to display the version information of the xargs utility itself, including its name, version number, and compilation information. It provides details about the specific implementation being used, helping users to ensure they have the latest version or check for compatibility with other software.'
