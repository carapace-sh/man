# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: metadata
description: Output the resolved dependencies of a package, the concrete used versions including overrides, in machine-readable format
flags:
    --all-features: Activate all available features
    --filter-platform*=: Only include resolve dependencies matching the given target-triple
    --format-version=: Format version
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-deps: Output information only about the workspace members and don't fetch dependencies
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo metadata` is a Cargo sub-command that generates a Rust package metadata file in JSON format, named `Cargo.toml.lock`. It''s typically used to obtain a snapshot of the dependency tree and other build plan information for a project, ensuring reproducibility across different builds and environments.'
    flag:
        all-features: '[AI] `cargo metadata --all-features` is a Cargo command used to generate a complete metadata file for a Rust project, including information about all features that can be enabled for each package in the dependency tree. This command is useful when working with complex projects or when integrating with external tools that require a comprehensive view of the available features. The output is usually written to a JSON file named `Cargo.toml.metadata`.'
        features: '[AI] `cargo metadata --features` is a Cargo command that generates metadata about the features of your Rust project. Features are optional components of a library or executable that can be enabled or disabled at compile time by using specific flags when calling Cargo''s build system. The output of this command provides a detailed list and description of all the features in the project, allowing you to understand their dependencies and impact on the final binary.'
        filter-platform: '[AI] `cargo metadata --filter-platform` is a command used in Rust programming language''s Cargo build tool to filter and display metadata related only to specific target platforms mentioned in the project''s Cargo.toml file. This can be helpful for understanding which targets are being built, their dependencies, and other relevant information for a multi-platform Rust project.'
        format-version: '[AI] `cargo metadata --format-version` is a command used in Rust programming language''s Cargo build tool. It returns the current format version of the Cargo metadata file, which describes the project''s dependencies, package metadata, and other configuration data. The output is a single number indicating the format version. This command can be useful for ensuring consistency between different versions of Cargo and maintaining reproducibility in your builds.'
        help: '[AI] `cargo metadata --help` is a command used in Rust programming language''s package manager, Cargo. This command displays detailed help information about the `cargo metadata` sub-command. It generates a Meta-data file describing the dependencies and other build information of your Rust project. This can be useful for understanding what packages your project relies on or for generating an offline dependency graph for a Rust project.'
        manifest-path: '[AI] `cargo metadata --manifest-path` is a command used in Rust programming language''s Cargo build tool. This command generates a JSON metadata file based on the existing Cargo.toml manifest file located at the specified path. The output provides detailed dependencies, targets, and other project information. It''s useful for inspecting or generating metadata for further processing or analysis.'
        no-default-features: '[AI] `cargo metadata --no-default-features` is a command used in Rust programming language''s Cargo build system. This command generates a metadata file (`Cargo.toml.meta`) that summarizes the dependencies and their versions for a given project, without activating any default features for those dependencies. By using `--no-default-features`, only the minimum required features are included, potentially reducing the overall size of the project''s dependency graph.'
        no-deps: '[AI] `cargo metadata --no-deps` is a command used in Rust programming language''s build system, Cargo. This command generates a metadata file (named `Cargo.toml.metadata.json`) without downloading or resolving the dependencies mentioned in the project''s `Cargo.toml`. It only calculates and outputs the metadata of the local project itself.'
        quiet: '[AI] `cargo metadata --quiet` is a command used in Rust programming language''s Cargo build tool. This command generates a metadata file that summarizes the dependencies and other information about the project. The `--quiet` flag is used to suppress all output except for errors, making it useful when running this command as part of a continuous integration or automated pipeline.'
