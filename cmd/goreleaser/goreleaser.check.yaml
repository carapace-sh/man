# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: check [configuration files]
aliases:
    - c
description: Checks if configuration is valid
flags:
    --deprecated&: Force print the deprecation message - tests only
    -f, --config&=: Configuration file(s) to check
    -q, --quiet: 'Quiet mode: no output'
documentation:
    command: '[AI] `goreleaser check` is a command from the GoReleas tool used in Go project development for creating prebuilt binaries and preparing releases. This command performs a thorough examination of your project''s configuration, ensuring that all necessary files and metadata are in order for a successful build and release process. It does not actually generate or publish any binaries but instead verifies the project setup based on `goreleaser.toml` file and other configured settings.'
    flag:
        config: '[AI] `goreleaser check --config` is a command used with the Goreleaser tool in Go programming language. This command performs a configuration check to validate that all necessary settings for building, testing, and releasing a Go project are correctly configured within the `goreleaser.toml` file. The output displays any detected issues or warnings, allowing developers to make adjustments before creating a release.'
        deprecated: '[AI] `goreleaser check --deprecated` is a command used by Goreleaser, a popular release workflow tool for Go projects. This command specifically checks if any deprecated Go modules are being used in the project and reports back with any potential issues. The goal is to help maintainers ensure their project is using up-to-date dependencies and avoid potential compatibility issues that may arise from using outdated packages.'
        quiet: '[AI] `goreleaser check --quiet` is a command used in Go development with goreleaser, a tool for managing the release process of Go projects. The `check` subcommand performs various checks to ensure that your project meets certain requirements before building and releasing. The `--quiet` flag is used to suppress informational messages during the check process, making the output more focused on errors or warnings. Therefore, this command runs a quiet check on the goreleaser project for potential issues before creating a new release.'
