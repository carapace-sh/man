# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: run [flags]
aliases:
    - create
description: Create or run a new CI/CD pipeline
flags:
    --variables*=: Pass variables to pipeline in format <key>:<value>
    --variables-env*=: Pass variables to pipeline in format <key>:<value>
    --variables-file*=: Pass file contents as a file variable to pipeline in format <key>:<filename>
    -b, --branch=: Create pipeline on branch/ref <string>
    -f, --variables-from=: JSON file containing variables for pipeline execution
documentation:
    command: '[AI] `glab ci run` is a GitLab CI/CD command used to trigger and run a specific job or a set of jobs defined in a GitLab CI/.cd file. It executes the defined pipeline or workflow for the current branch, commit or tag. The command fetches changes, builds, tests, and deploys the project as configured in the .gitlab-ci.yml file.'
    flag:
        branch: '[AI] `glab ci run` is a command used in GitLab, a version control system, to trigger and run continuous integration (CI) jobs. The `--branch` option specifies which branch or branches to apply the CI pipeline to. For example, `glab ci run --branch main` would trigger the CI pipeline for the default branch named "main" in your project. This command helps ensure that code changes adhere to your project''s build and test standards before merging into the main branch or other target branches.'
        variables: |-
            [AI] `glab ci run --variables` is a command used in GitLab to trigger a CI/CD (Continuous Integration/Continuous Delivery) pipeline run with custom variables. The `glab` tool is a client that interacts with the GitLab API for various operations, including pipeline runs.

            The `ci run` subcommand starts a new pipeline run based on the configured .gitlab-ci.yml file in the repository. The `--variables` flag allows users to pass key-value pairs as environment variables for the pipeline run. These variables can be used within the pipeline configuration files and scripts to customize behavior or input data. This functionality helps support dynamic and flexible workflows, enabling users to tailor pipeline runs based on specific conditions or configurations.
        variables-env: |-
            [AI] `glab ci run` is a command from Glab, GitLab's official CLI (Command Line Interface) tool. This command is used to trigger GitLab CI/CD (Continuous Integration and Continuous Delivery) pipelines with additional flags and options for customization.

            The `--variables-env` flag allows users to set environment variables for the pipeline runs. It accepts a JSON or YAML file as an argument, which includes key-value pairs defining the desired environment variables. This flag can be useful when you need to provide sensitive information or customize pipeline behavior without modifying the repository's `.gitlab-ci.yml` file.

            In summary, using `glab ci run --variables-env` lets users trigger GitLab CI/CD pipelines with custom environment variables specified in a file.
        variables-file: '[AI] The `glab ci run` command is a tool from Glint, a Git interface for GitHub Actions and GitLab CI/CD. The `--variables-file` option specifies a file that contains key-value pairs defining custom variables to pass to the specified workflow or job in the Git repository''s CI/CD system (GitHub Actions or GitLab CI/CD). This can help customize and parameterize builds, tests, and deployments.'
        variables-from: '[AI] `glab ci run` is a command-line tool provided by GitLab for running CI jobs locally before pushing changes to a GitLab repository. The `--variables-from` option specifies that variables should be sourced from a file or a GitLab CI/CD variable group instead of being defined directly in the `.gitlab-ci.yml` file. This allows using sensitive information, such as tokens and keys, securely without exposing them in the configuration file. The variable file should be in YAML format and contain key-value pairs that will be available to the local CI job.'
