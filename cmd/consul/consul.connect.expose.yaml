# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: expose
description: Expose a Connect-enabled service through an Ingress gateway
flags:
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --datacenter=: Name of the datacenter to query.
    --host=: Additional DNS hostname to use for routing to this service.
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --ingress-gateway=: (Required) The name of the ingress gateway service to use.
    --port=: (Required) The listener port to use for the service on the Ingress gateway.
    --protocol=: The protocol for the service. Defaults to 'tcp'.
    --service=: (Required) The name of destination service to expose.
    --stale: Permit any Consul server (non-leader) to respond to this request.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
documentation:
    command: '[AI] The `consul connect expose` command is used in Hashicorp''s Consul service discovery and connect solution to register a service with the Connect gateway. This allows other Consul clients to discover and connect to the registered service securely over TLS, using Consul''s built-in service mesh capabilities. The `expose` command configures the Connect gateway to forward incoming traffic on a specific port to the service running locally.'
    flag:
        ca-file: '[AI] `consul connect expose` is a command provided by Hashicorp Consul, an service discovery, configuration, and orchestration tool. The `--ca-file` option is used to specify the path to a file containing the CA (Certificate Authority) certificate for securing TLS (Transport Layer Security) communication between services connected through Consul''s Connect feature. This helps ensure secure communication between services by verifying their identities using trusted certificates.'
        ca-path: '[AI] The `consul connect expose` command is used in Hashicorp''s Consul service discovery and configuration management tool to publish a service over the Consul Connect network. The `--ca-path` option specifies the path to a directory containing CA (Certificate Authority) certificates that will be used to secure the connections between services. These certificates ensure secure communication between services in the Consul Connect mesh.'
        client-cert: |-
            [AI] `consul connect expose --client-cert` is a command in Hashicorp Consul's Connect service that configures TLS client certificates for service instances that are registered with the Consul service discovery and configuration platform.

            When you use this command, a new certificate and private key are generated for the client application. The client then presents this certificate when making connections to the service instances it needs to communicate with. This helps secure communications between services by enabling mutual TLS authentication. The flag `--client-cert` specifies that it is the client's certificate that should be configured, as opposed to a server certificate.
        client-key: '[AI] `consul connect expose --client-key` is a command in the Consul service discovery and connect toolkit. This command exposes a port or a TCP/UDP service on a Consul agent, which can then be connected to by other Consul clients using their respective client keys for secure communication. The `--client-key` flag specifies the client key of the connecting party, ensuring only authorized clients can establish connections to the exposed service. This feature helps maintain security in a microservices architecture by enabling secure communication between services.'
        datacenter: '[AI] The `consul connect expose --datacenter` command is used in Consul, a service discovery and configuration management tool. This command exposes a service with a specific name and port number to other services or applications within the same datacenter in the Consul service mesh. It sets up a proxy for the exposed service, allowing traffic to flow through the Consul service mesh for load balancing, traffic management, and security features like mutual TLS encryption. The `--datacenter` flag specifies the name of the datacenter where the exposed service is located.'
        host: '[AI] The `consul connect expose --host` flag is used with Consul, a Connect service mesh and configuration management tool. It instructs Consul to create a new ingress rule in the service mesh for a specific service, making it accessible from other services or external clients via its designated hostname. This flag enhances network security by enabling targeted access without exposing services directly to the internet.'
        http-addr: '[AI] The `consul connect expose --http-addr` flag is used with Consul, an open-source tool for service discovery, configuration, and orchestration. This specific flag configures Consul to publish an HTTP interface of a service on a specified address when using the Connect proxy. With this flag, you can specify an IP address and port number (e.g., `--http-addr 127.0.0.1:8500`) for the Connect proxy to expose as an entry point for clients to access services registered with Consul. This makes it easier for external clients to connect to services within a service mesh or microservices architecture without requiring direct access to each individual service instance.'
        ingress-gateway: '[AI] `consul connect expose` is a command used in Hashicorp Consul, a service discovery and configuration management tool. The `--ingress-gateway` flag specifically configures Consul to create an Ingress resource in Kubernetes when registering a service. This allows external traffic to be routed to the registered service through Consul''s ingress gateway. Essentially, it exposes services behind a load balancer and handles secure communication between services with mutual TLS.'
        port: '[AI] `consul connect expose --port` is a command used in Hashicorp Consul, a service discovery and configuration management tool. This command exposes a registered service on a specified port within the Consul Connect network. The flag `--port` sets the port number for the service to be exposed. By doing so, other services within the Consul Connect mesh can communicate with this service using the configured port.'
        protocol: |-
            [AI] The `consul connect expose --protocol` flag is used with Hashicorp's Consul service discovery and connect tool. It specifies the network protocol that Consul should use to create an incoming connection for a service.

            When using Consul Connect, services can be configured to expose themselves to other services in the mesh using ingress connectors. The `--protocol` flag determines which transport layer protocol (e.g., TCP or UDP) is used for these connections. This allows fine-grained control over how different services communicate within a Consul service mesh.
        service: '[AI] The `consul connect expose --service` flag is used with Hashicorp''s Consul service discovery and connect tool. This flag instructs Consul to publish a service entry for the given name, which can then be discovered by other services or clients that are also registered with Consul. By default, Consul does not publish any ports or bind addresses when creating a new service entry. However, if you use the `expose` flag followed by a port number and optional protocol (TCP or UDP), Consul will also make that port accessible to other services or clients through a dynamically assigned address. This feature simplifies service-to-service communication and discovery in a microservices architecture.'
        stale: |-
            [AI] The `consul connect expose --stale` flag is a command used in Hashicorp Consul, a service discovery and configuration management tool. This flag modifies the `expose` API call to also register services with a stale flag set.

            When a service is registered using the standard `expose` command, Consul checks the health of the service before adding it to the service catalog. If the service is not healthy at that moment, it will not be registered and clients may not be able to discover it. By using the `--stale` flag, you can bypass this check and register services even if they are currently unhealthy or not responding. This might result in clients connecting to stale services, but it can help ensure that some degree of service discovery is maintained during failures or transient issues.
        tls-server-name: |-
            [AI] The `consul connect expose --tls-server-name` flag is used in Hashicorp Consul, a service discovery and configuration management tool. This flag is related to the TLS (Transport Layer Security) encryption of traffic between services in a Consul connect network.

            When you use the `expose` command with Consul Connect to publish a service, by default, it does not enable TLS termination. However, when you add the `--tls-server-name` flag, Consul sets up a TLS server certificate that uses the provided name as its common name (CN). This allows clients to trust the service's SSL/TLS certificate based on the specified DNS name. This is useful in multi-service environments where services have automatically generated or self-signed certificates. By using `--tls-server-name`, you can ensure that only services with the specified DNS names will be able to securely communicate over encrypted channels within your Consul connect network.
        token: '[AI] `consul connect expose --token` is a command in the Consul service discovery and configuration tool. It creates or updates an ingress rule in the Consul Connect sidecar proxy, allowing traffic to be forwarded from the Consul service mesh to specified services or ports using the provided token for authentication. This helps secure communication between services within the Consul mesh.'
        token-file: '[AI] The `consul connect expose --token-file` command is used in Consul, a Connect service mesh, to publish a service with a secure access token stored in a file instead of on the command line. This improves security by keeping sensitive information out of the command line history and accessible only to authorized users who have access to the token file. The `--token-file` option specifies the path to this file, which Consul reads to authenticate and grant connectivity between services.'
