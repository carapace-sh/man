# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: check
aliases:
    - c
description: Check a local package and all of its dependencies for errors
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Check all targets
    --bench*=: Check only the specified bench target
    --benches: Check all benches
    --bin*=: Check only the specified binary
    --bins: Check all binaries
    --example*=: Check only the specified example
    --examples: Check all examples
    --exclude*=: Exclude packages from the check
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Check only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --profile=: Check artifacts with the specified profile
    --target*=: Check for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Check only the specified test target
    --tests: Check all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Check all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package(s) to check
    -q, --quiet: Do not print cargo log messages
    -r, --release: Check artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo check` is a command used in Rust programming language''s package manager, Cargo. It performs a static analysis of your project''s source code and package dependencies without building or running anything. The output shows any warnings or errors found during the check, helping ensure that your project''s codebase remains clean and functional.'
    flag:
        all: '[AI] `cargo check --all` is a command used in Rust programming language''s package manager, Cargo. It performs a complete check of all projects within the current Cargo workspace by running the linting and type checking stages for each project to ensure code correctness and conformity with Rust coding standards.'
        all-features: '[AI] `cargo check --all-features` is a command used in Rust programming language''s package manager, Cargo. This command performs a check of all features and dependencies listed in the project''s `Cargo.toml` file for correctness and completeness. It ensures that all required features and dependencies are available and up-to-date. Running this command helps maintain a healthy project with minimal build issues.'
        all-targets: '[AI] The `cargo check --all-targets` command is used in Rust programming language''s Cargo build system to perform type checking and linting checks on all targets within a project. In simpler terms, it ensures that the code for every target in your Cargo.toml file adheres to Rust''s syntax rules and best practices. This command can help identify potential issues early and maintain a high level of code quality within your project.'
        bench: '[AI] `cargo check --bench` is a command used in Rust programming language''s build system, Cargo. This command runs Rust benchmarks defined in the project''s source code without building or testing the entire project. It only checks the benchmarks and reports their results, allowing for faster feedback when making optimizations or improvements to benchmarked parts of the code.'
        benches: '[AI] `cargo check --benches` is a command used in Rust programming language''s build system, Cargo. It runs checks on your project to ensure the codebase is in a valid state and generates benchmark test reports if they exist. The `--benches` flag enables the execution of benchmarks while running checks. This helps identify performance issues and optimize the code.'
        bin: '[AI] The `cargo check --bin` command is used in Rust programming language''s build system, Cargo. It instructs Cargo to perform a check build of the specified binary target. This means that it will compile and run the code without creating an output file or artifact. It''s useful for checking the syntax and semantics of your Rust code before running tests or building the final executable.'
        bins: '[AI] The `cargo check --bins` command is a Rust programming language build tool task. It checks and builds only the binary (executable) targets in your Cargo project without running any tests or performing a release build. This can be useful for quickly checking the build status of your binaries before deploying or distributing them.'
        example: '[AI] The `cargo check --example` command is used in Rust programming language projects managed by Cargo build system. This command runs type checks and format checks on an example provided in a library crate''s source tree, without building the project or running tests. It ensures that the example code follows Rust syntax rules and adheres to the preferred coding style as defined in the `edition` field in `Cargo.toml`.'
        examples: '[AI] `cargo check --examples` is a command used in Rust programming language''s package manager, Cargo. This command checks for correctness and completeness of Cargo projects. The `--examples` flag specifically requests that Cargo also checks all included example projects within the main project. It does not build or run the examples, just checks their syntax and configuration against Cargo''s rules to ensure they are valid and ready for use.'
        exclude: '[AI] `cargo check --exclude` is a command used in Rust programming language''s package manager, Cargo. This command performs checks on all the packages in your project''s dependency tree but excludes the specified ones from being checked. The `--exclude` option follows the flag and accepts one or more package names separated by commas, which will be excluded from the checking process. It can be helpful when you want to skip certain dependencies that may be causing issues during the check process without removing them altogether.'
        features: '[AI] The `cargo check --features` command is used in Rust programming language''s Cargo build tool to check for validity of enabled features in a project''s `Cargo.toml` file. It performs a static analysis of the features, ensuring they are defined and properly configured without errors or inconsistencies. It doesn''t actually build anything but only checks the manifest file for potential issues.'
        future-incompat-report: '[AI] The `cargo check --future-incompat-report` command is a feature of Cargo, Rust''s package manager. It runs a check on your Rust project to identify any potential incompatibilities with the upcoming version of Cargo or Rust. This report helps developers prepare their projects for future version updates by providing a list of deprecated or soon-to-be-deprecated features and suggesting alternative solutions. The command does not make any changes to your project, it only provides a report which you can then use to update your code accordingly.'
        help: '[AI] `cargo check --help` is a command used in Rust programming language''s package manager, Cargo. This command displays detailed help information about the `check` subcommand. `check` is used to run tests and type checks for your Rust projects. With the `--help` flag, you get an explanation of how to use this subcommand effectively, including any available options or arguments, and examples of usage.'
        ignore-rust-version: '[AI] The `cargo check --ignore-rust-version` command is a Cargo subcommand used to run checks on a Rust project without enforcing a specific Rust version. The `--ignore-rust-version` flag allows the command to bypass checking the project''s required Rust version and use the currently available Rust toolchain instead. This can be useful when working with multiple projects or versions that may have different Rust dependencies, as it avoids potential conflicts due to incompatible Rust versions.'
        jobs: '[AI] `cargo check --jobs` is a command used in Rust programming language''s package manager, Cargo. This command performs a local checks of the project''s dependencies and its correctness without actually building anything. The `--jobs` flag enables multiple background jobs for parallel execution to speed up the checking process.'
        keep-going: '[AI] The `--keep-going` flag for `cargo check` is used to continue running checks even if some errors or warnings are encountered during the process. It allows the build and checking of Rust projects to continue, providing feedback on any issues while still making progress towards a complete build. This can be useful when working with large or complex codebases where not all components may be functional at once. The check command ensures that the project''s dependencies are up-to-date and that there are no syntax or semantic errors in the Rust source files.'
        lib: '[AI] `cargo check --lib` is a command used in Rust programming language''s Cargo build tool. This command performs a check on dependencies within a library project without building an executable or running tests. It ensures that the dependency tree is up-to-date and all required dependencies are available, helping to maintain a healthy project environment.'
        manifest-path: '[AI] `cargo check --manifest-path` is a command used in Rust programming language''s Cargo build tool. The `check` subcommand runs tests defined in the project''s Cargo manifest file. The `--manifest-path` option specifies the path to the Cargo manifest file, which may be different from the current working directory. It ensures that the correct manifest file is used and checks all tests defined therein.'
        message-format: '[AI] `cargo check --message-format` is a command used in Rust programming language''s package manager, Cargo. The `check` subcommand runs checks on the current project, including type and syntax checking. The `--message-format` flag specifies the format of error messages produced during these checks. It supports multiple formats like `json`, `default`, or `none`. For instance, using `--message-format json` will output errors in JSON format for easier processing by other tools.'
        no-default-features: '[AI] The `cargo check --no-default-features` command is used in Rust programming language''s build system, Cargo. This command performs a check of the current project for syntax errors and type errors without building or running any tests or features by default. The `--no-default-features` flag disables the use of default features of dependencies. It helps to ensure that the project builds only with the required minimum dependencies, which can be useful when debugging issues or minimizing dependency versions for deployment.'
        package: '[AI] The `cargo check --package` command is used in Rust programming language''s Cargo build tool to verify the correctness and completeness of the specified package''s dependencies, without building or testing the project. This command checks if all required dependencies are up-to-date and can be compiled, ensuring a consistent project environment.'
        profile: '[AI] `cargo check --profile` is a command used in Rust programming language''s package manager, Cargo. This command performs a static analysis of the project''s source code without building or running tests. The `--profile` flag specifies which Rust profiling mode to use for the check (default is `default`). Profiling modes can provide additional optimizations and insights into performance issues in the code.'
        quiet: '[AI] The `cargo check --quiet` command is a Cargo build tool command used in Rust programming. It performs a complete check of all the packages listed in the project''s `Cargo.toml` file, including their dependencies. The `--quiet` flag reduces the output to error messages only, making it useful during automated builds or continuous integration processes where extensive verbose output is unnecessary.'
        release: '[AI] `cargo check --release` is a command used in Rust programming language''s Cargo build tool. The `check` subcommand runs tests for the current project, while `--release` builds an executable with optimized settings and runs the tests without performing any checks that aren''t necessary for release builds. In essence, it checks and builds your Rust project for production use.'
        target: '[AI] The `cargo check --target` command is used with Cargo, Rust''s package manager and build tool. This command performs a check of the specified target within your Rust project, meaning it verifies the syntax and semantics of your Rust source code, as well as any required dependencies are up-to-date. It does not actually build or run the target; it just checks if everything is ready for that to happen. You can specify a target by its name, such as `--target lib` for a library, or `--target my_binary` for an executable binary.'
        target-dir: '[AI] The `cargo check --target-dir` command is a task in Cargo, Rust''s package manager and build tool. This command performs checks on the source code within a specific target directory. It does not compile or run tests but ensures that the code in the target directory is syntactically correct and has valid dependencies based on its `Cargo.toml` file.'
        test: |-
            [AI] `cargo check --test` is a command used in Rust programming language's build system, Cargo. This command performs two distinct actions:

            1. It first checks the project for syntax errors and other compile-time issues by running `cargo check`. This operation ensures that the source code adheres to Rust's language rules.
            2. Following the check, it runs all tests defined within the project using `--test`. The tests are executed in test harnesses and their results are displayed.
        tests: '[AI] `cargo check --tests` is a command used in Rust programming language''s build system, Cargo. It runs the test targets defined in the project''s Cargo.toml file without building or compiling the entire project first. This command checks the tests for syntax errors and then executes them if they pass the syntactical check. If any test fails, Cargo will display an error message indicating which test failed and why. In summary, it is a faster alternative to running `cargo test` when you only want to check your tests without rebuilding the entire project.'
        timings: '[AI] The `cargo check --timings` command is used in Rust programming language''s Cargo build tool to perform a check of the project''s dependencies and output detailed timing information. This includes the time taken to download each dependency, as well as the time taken to build and compile each component in the project. The output can help identify potential performance bottlenecks or issues with slow-to-download dependencies.'
        unit-graph: '[AI] `cargo check --unit-graph` is a command used in Rust programming language''s Cargo build tool. This command generates and displays a unit test progress graph for the current project, showing the hierarchical structure of tests and their status (passed or failed). It provides an overview of how different tests relate to each other and helps identify potential issues during testing.'
        workspace: '[AI] `cargo check --workspace` is a command used with Rust''s package manager, Cargo. This command performs checks on the entire workspace defined in the `Cargo.toml` file, which gathers information from multiple packages and crates in a single directory tree. It verifies that all dependencies are up-to-date, the code compiles, and other relevant data for each package, ensuring consistency and cohesion across the project.'
