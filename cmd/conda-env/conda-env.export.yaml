# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: export
description: Export a given environment
flags:
    --from-history: Build environment spec from explicit specs in history
    --ignore-channels: Do not include channel names with package names.
    --json: Report all output as json
    --no-builds: Remove build specification from dependencies
    --override-channels: Do not include .condarc channels
    -c, --channel=: Additional channel to include in the export
    -f, --file=: Environment definition file
    -h, --help: Show this help message and exit
    -n, --name=: Name of environment
    -p, --prefix=: Full path to environment location
    -q, --quiet: Do not display progress bar
    -v, --verbose: Use once for info, twice for debug, three times for trace
documentation:
    command: '[AI] The `conda-env export` command is used to save the current environment configuration of Conda into a text file, containing the packages and their specific versions along with other dependencies and settings. This file can then be imported using `conda-env create` or `conda activate --no-create` to recreate an identical environment in the same or another system.'
    flag:
        channel: '[AI] The `conda-env export --channel` command in Anaconda or Miniconda is used to generate a text file containing the definition of an existing conda environment, including its name and all packages and their specific versions. The `--channel` option adds any specified channels where the packages may be located. This output can then be saved as a YAML or text file, making it easy to recreate the environment on other systems or re-create it after deletion.'
        file: '[AI] `conda-env export --file` is a command used in Anaconda or Miniconda environments for creating a YAML file containing the current environment configuration, including package versions and dependencies. The `--file` option specifies the output file name, which will be saved with a `.yml` extension, allowing easy sharing and recreation of the environment elsewhere.'
        from-history: '[AI] `conda-env export --from-history` is a command used in Anaconda''s Conda environment management system to generate a YAML file containing the complete history of all packages installed in the current active environment. This file can be used to recreate the same environment setup on other systems or share it with collaborators.'
        help: |-
            [AI] `conda-env export` is a command used in Anaconda or Miniconda environments to generate a YAML file that describes the current environment and its dependencies. The `--help` option provides information on how to use this command:

            * `export`: Exports the environment descriptions to stdout/stdout (default) or a file (with `--file <filename>`).
            * Options:
              * `--file <filename>`: Write output to given file instead of stdout.
            * Examples:
              * `conda-env export > env.yml`: Export the current environment to a file named "env.yml".
              * `conda-env export --help`: Display help information for the `export` command.
        ignore-channels: '[AI] The `conda env export --ignore-channels` command in Anaconda or Miniconda is used to generate a text file containing the metadata for all the packages and their respective versions in the current Conda environment. This includes packages from both default and user-specified channels. However, by adding `--ignore-channels` flag, it excludes packages installed from specific channels (ignoring their names) from the output. The generated file can be saved and loaded later to recreate an identical environment on other systems using `conda install --file <filename>`.'
        json: '[AI] The `conda-env export --json` command is used in Anaconda or Miniconda environments to save the current environment''s configuration into a JSON file. This includes specifying the name of the environment, the packages installed with their versions, and any custom configurations like environment variables. By using the `--json` option, the output is formatted as a JSON object, making it easily readable and portable for transferring between systems or sharing with others.'
        name: '[AI] The `conda-env export --name` command is used in Anaconda or Miniconda environments to output the name of the currently active environment. The `--name` option is specific to this command and instructs it to only print the name of the environment. The command returns the name as a string, which can be further processed or stored for future use.'
        no-builds: '[AI] The `conda-env export --no-builds` command is used in Anaconda or Miniconda environments to generate a YAML file containing a list of all packages and their specific versions currently installed in the active environment, without including build recipes for those packages. This command can be useful when sharing or recreating an environment across different systems, as it allows for consistent reproduction of the desired package setup without requiring the building process of each individual package from scratch.'
        override-channels: '[AI] The `conda env export --override-channels` command in Anaconda or Miniconda is used to generate a YAML file containing the definition of the current conda environment, including its dependencies and channels (repositories) from which packages will be installed. The `--override-channels` option allows specifying custom channels that take precedence over the default ones when creating or updating the environment definition in the output file. This can be useful for managing isolated environments with specific package versions from custom channels.'
        prefix: '[AI] The `conda-env export --prefix` command is used in Anaconda or Miniconda environments to save the current environment configuration into a YAML file. The `--prefix` option specifies the root directory of the environment (the base installation directory). This command generates an output that includes all the packages, their versions, and other settings present in the specified conda environment, which can then be used to recreate the environment on another system by running `conda create --name <new_env> --from-file <path_to_saved_config.yaml>`.'
        quiet: '[AI] The command `conda env export --quiet` is used to generate a text representation of the current Conda environment''s definitions (i.e., name, channels, dependencies) without any additional output or messages. The output is saved in standard output format and can be redirected to a file for later use.'
        verbose: '[AI] The `conda-env export --verbose` command is used in Anaconda or Miniconda environments to generate a text file containing all the specifications of the current environment, including its name, active channels, dependencies, and their respective versions. The `--verbose` option increases the level of output detail, providing a more comprehensive record of the environment''s contents. This command is helpful when creating reproducible environments or sharing configuration with others.'
