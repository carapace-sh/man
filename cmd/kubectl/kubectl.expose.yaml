# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]
description: Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
group: basic beginner
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --cluster-ip=: ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --external-ip=: Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.
    --field-manager=: Name of the manager used to track field ownership.
    --load-balancer-ip=: IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).
    --name=: The name for the newly created object.
    --override-type=: 'The method used to override the generated object: json, merge, or strategic.'
    --overrides=: An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
    --port=: The port that the service should serve on. Copied from the resource being exposed, if unspecified
    --protocol=: The network protocol for the service to be created. Default is 'TCP'.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --selector=: A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)
    --session-affinity=: 'If non-empty, set the session affinity for the service to this; legal values: ''None'', ''ClientIP'''
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --target-port=: Name or number for the port on the container that the service should direct traffic to. Optional.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --type=: 'Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is ''ClusterIP''.'
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to expose a service
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --labels=: Labels to apply to the service created by this call.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing Deployment or ReplicaSet. It exposes a specific port of the container(s) and optionally creates a load balancer or node port service. This allows external traffic to reach the containers in the cluster through the created Service.'
    flag:
        allow-missing-template-keys: |-
            [AI] The `kubectl expose` command is used to create a Kubernetes Service from a deployment or replica set. With the `--allow-missing-template-keys` flag, you can bypass the error when there are missing keys in your YAML file that define the service, allowing the creation of the service even with incomplete configuration.

            This flag is useful when you want to create a basic service template and plan to add more keys later. It is important to note that using `--allow-missing-template-keys` may lead to unexpected behavior or inconsistent configurations if not used carefully, as it ignores errors related to missing keys in the YAML file.
        cluster-ip: '[AI] The `kubectl expose` command is used to create a Kubernetes Service from an existing deployment or replica set, exposing it with a cluster IP. A cluster IP is a unique IP address within the cluster that can be used to access the service from anywhere inside the cluster. This command creates a Service of type `ClusterIP`, which routes traffic to the pods based on the cluster IP address instead of an external IP. It''s particularly useful when you want to expose a service only within your cluster without exposing it to the internet.'
        dry-run: '[AI] `kubectl expose` is a command used with the Kubernetes command-line interface (CLI) tool to create a new Kubernetes Service resource from an existing deployment or replica set. The `--dry-run` flag is an optional argument that runs the command in "pretend mode," meaning it will display the YAML manifest that would be applied if the command were run without the `--dry-run` flag, but no actual changes are made to the cluster. This can be useful for reviewing the proposed configuration before applying it.'
        external-ip: '[AI] `kubectl expose` is a command used in Kubernetes to create and update Service resources based on existing deployment or replica sets. The `--external-ip` option specifies an external IP address to assign to the created service, making it directly accessible from outside the cluster without needing to use Node Ports or LoadBalancers. This can be useful when you want to expose a specific application with a fixed IP address for external access.'
        field-manager: '[AI] The `kubectl expose` command is used to create a Kubernetes Service from an existing deployment or replica set. The `--field-manager` flag is an optional argument for this command. When used, it instructs the kubectl tool to use the strategic merge patch format for updating the API object instead of creating a new resource. This can be useful when making incremental changes to an existing service without disrupting the current state.'
        filename: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service from an existing deployment or replica set. The `--filename` flag is used to specify the name of the YAML file that contains the desired service configuration. For example, `kubectl expose deployment my-app --port=80 --target-port=8080 --filename my-service.yaml` will create a new Kubernetes Service named "my-service" based on the given deployment and port configurations, and save it to the file named "my-service.yaml".'
        kustomize: |-
            [AI] `kubectl expose --kustomize` is a command used with Kubernetes' `kubectl` tool to create and update Kubernetes services based on customizations defined in Kustomize files.

            Kustomize is a config management system for Kubernetes that allows managing, deploying, and composing Kubernetes YAML manifests through declarative extended configurations called patches.

            Using `kubectl expose --kustomize` with a valid path to the directory containing the Kustomize files will create or update a service resource in a cluster based on the defined configurations within those files. This command is particularly useful when managing complex, multi-component applications that require multiple services and configs for each component.
        labels: '[AI] `kubectl expose` is a command used to create a Kubernetes Service from an existing deployment or replica set. The `--labels` flag allows users to specify labels for the new service resource. Labels help in selectively targeting and managing resources based on specific criteria. When using this command, the created service will have those labels assigned, making it easier to filter and access related resources within the Kubernetes cluster.'
        load-balancer-ip: '[AI] `kubectl expose` is a command used in Kubernetes to create and update Service resources based on existing deployments or pods. The `--load-balancer-ip` flag instructs Kubernetes to create an external IP for the service, which can be used to access the service via a cloud provider''s load balancer. This flag is particularly useful when you want to expose your application to the internet and distribute incoming traffic evenly using a load balancer. The resulting Service resource will have type `LoadBalancer` by default, and Kubernetes will automatically create or update an external IP address for it.'
        name: '[AI] `kubectl expose` is a command used with Kubernetes to create a new Kubernetes Service from an existing deployment or replica set. The `--name` flag is used to specify a descriptive name for the new service. For example, `kubectl expose deployment my-app --port=80 --name=my-service`. This command creates a new Service named "my-service" that exposes port 80 of the running instances of the "my-app" deployment.'
        output: |-
            [AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing Deployment, ReplicaSet, or ReplicationController. The `--output` flag is used to specify the output format for the command.

            By default, `kubectl expose` does not produce any output and only creates the Service resource in the background. However, you can use the `--output` flag to have `kubectl` display various information about the created Service, such as its name, selector, type, port mappings, and targetPort.

            For example, `kubectl expose deployment my-deployment --port=80 --output json` will create a new Service resource for the `my-deployment` Deployment and output the JSON representation of the created Service. Similarly, `kubectl expose pod my-pod --output yaml` will create a new Service resource from the specified Pod and output the YAML manifest of the created Service.

            The available output formats include json, yaml, go-template, and stdout.
        override-type: '[AI] The `kubectl expose` command is used to create a Kubernetes Service from an existing deployment or replicaset. The `--override-type` flag is an optional argument that allows you to specify the type of the desired service overriding an existing one, if any, with the same name and labels. This flag supports the values `ClusterIP`, `NodePort`, `LoadBalancer`, and `ExternalName`. Without this flag, a new Service of default type `ClusterIP` would be created.'
        overrides: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service based on an existing deployment or replica set. The `--overrides` flag is an optional argument that allows you to provide custom configuration for the new service, merging it with the default service template. This way, you can modify specific properties like type of service, ports, and selectors without changing the underlying deployment or replica set definition.'
        port: '[AI] `kubectl expose` is a command used with Kubernetes to create a new Kubernetes Service resource from an existing deployment or replica set. The `--port` option specifies the container port that should be exposed by the service. This means that the Service will be accessible on this port, allowing external traffic to reach the pods behind it. The command also creates or updates the corresponding Service YAML file in the current context.'
        protocol: |-
            [AI] `kubectl expose` is a command used to create a Kubernetes Service from an existing deployment or replica set. The `--protocol` flag specifies the network protocol to use for the service, which can be either TCP or UDP.

            For example:

            - To create a TCP service: `kubectl expose deployment <deployment_name> --port <port_number> --target-port <container_port> --protocol TCP`
            - To create a UDP service: `kubectl expose deployment <deployment_name> --port <port_number> --target-port <container_port> --protocol UDP`

            This command creates a Service resource that selects the pods based on the Deployment or ReplicaSet, and maps incoming traffic to the specified port number using the given protocol.
        record: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing deployment or replica set. The `--record` flag is optional and indicates that the command should update the existing service record instead of creating a new one if a service with the same name already exists. This can be useful for incrementally updating the targetPort or other properties of an existing service. In summary, `kubectl expose --record` creates or updates a Kubernetes Service resource based on an existing deployment or replica set, keeping track of previous records.'
        recursive: '[AI] `kubectl expose --recursive` is a command used with Kubernetes to create and update `Service` resources based on existing `Deployments` or `StatefulSets`. The `--recursive` flag ensures that all newly created containers in the updated `Deployment` or `StatefulSet` are exposed as new services. This command simplifies managing services for multiple containers within a single Kubernetes application, ensuring consistent network access to each container.'
        save-config: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing Deployment, ReplicaSet, or Pod. The `--save-config` flag saves the kubectl configuration for applying the same exposure operation on other clusters or environments. This command does not change the running application directly; instead, it creates a new Kubernetes Service resource that defines how to access the application via specific ports and protocols.'
        selector: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Network Service or a LoadBalancer based on an existing deployment or replicaset. The `--selector` option specifies a label query to identify the pods that should be exposed. In other words, it defines which set of pods the service should target to forward incoming traffic.'
        session-affinity: '[AI] `kubectl expose` is a command in Kubernetes used to create a new Service from an existing Deployment or ReplicaSet. The `--session-affinity` option specifies that the service should use client IP session affinity, also known as "sticky sessions." This means that when a user connects to a target Pod for a Service, subsequent requests from the same client will be directed to the same Pod, ensuring a consistent user experience.'
        show-managed-fields: |-
            [AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing deployment, replica set, or pod. The `--show-managed-fields` flag is an optional argument that can be passed with this command.

            When you use `--show-managed-fields`, Kubectl will display the fields that are managed by the Kubernetes API as part of the creation or update of the new service. These fields represent the metadata and configuration that Kubernetes manages and updates automatically when you modify the underlying deployment, replica set, or pod.

            In summary, `kubectl expose --show-managed-fields` is a command used to create a new Kubernetes Service resource and display the managed fields, which are the fields that are automatically updated by the Kubernetes API when you modify the underlying resource.
        target-port: '[AI] The `kubectl expose` command is used to create a Kubernetes Service from an existing deployment or replica set. The `--target-port` option specifies the port on the containers in the pods that the service should use for incoming traffic. This does not open any ports on the pods themselves, but rather creates a stable IP address and port combination that can be used to access the application running in the pods.'
        template: '[AI] `kubectl expose` is a command used in Kubernetes to create a new Kubernetes Service resource from an existing deployment or replica set. The `--template` option is used with the `kubectl` manifest file generation feature, which allows you to define custom templates for creating Kubernetes resources using YAML files as a base. Instead of manually editing YAML files to create or update a service, you can use a template file that defines how the new service should be configured based on input values. This can save time and reduce errors when managing multiple services with similar configurations.'
        type: |-
            [AI] `kubectl expose` is a command used to create a Kubernetes Service from an existing deployment or replica set. The `--type` flag specifies the type of the service:

            1. ClusterIP: Creates an IP that is only accessible within the cluster (default).
            2. NodePort: Assigns a port on each node in the cluster and makes the service accessible via that port.
            3. LoadBalancer: Creates an external load balancer to distribute incoming traffic.
            4. ExternalName: Sets the Service's `name` to act as CNAME record for an external DNS name.
