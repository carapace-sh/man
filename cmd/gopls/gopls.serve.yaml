# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: serve
description: run a server for Go code using the Language Server Protocol
flags:
    -debug=: serve debug information on the supplied address
    -listen.timeout=: when used with -listen, shut down the server when there are no connected clients for this duration
    -listen=: address on which to listen for remote connections. If prefixed by 'unix;', the subsequent address is assumed to be a unix domain socket. Otherwise, TCP is used.
    -logfile=: filename to log to. if value is "auto", then logging to a default output file is enabled
    -mode=: no effect
    -port=: port on which to run gopls for debugging purposes
    -remote.debug=: when used with -remote=auto, the -debug value used to start the daemon
    -remote.listen.timeout=: when used with -remote=auto, the -listen.timeout value used to start the daemon (default 1m0s)
    -remote.logfile=: when used with -remote=auto, the -logfile value used to start the daemon
    -rpc.trace: print the full rpc trace in lsp inspector format
documentation:
    command: '[AI] `gopls serve` is a command used to start the Go Language Server (gopls) in a standalone mode, ready to receive connections from clients such as editors or IDEs. It does not attach the server to any specific editor or project by default. Instead, it waits for incoming connections on a specified port, allowing other tools to connect and utilize its features like autocompletion, code formatting, and diagnostics.'
    flag:
        debug: '[AI] `gopls serve -debug` is a command used with the Go Language Server (gopls) for debugging purposes. The `serve` subcommand starts a new instance of gopls as a server, and the `-debug` flag enables the server to output extensive diagnostic information during operation, which can be helpful in identifying and resolving issues with gopls or your Go development environment.'
        listen: '[AI] `gopls serve -listen` is a command used in Go programming language''s GoPls (Go Language Server Protocol) to start the Go Language Server with an embedded editor (like VSCode or IntelliJ IDEA) listening for incoming connections on a specified port or IP address. This allows the editor to communicate with the server for features like autocomplete, code analysis, and other language-specific functionalities. The flag `-listen` specifies the address and port number where the server should listen for incoming connections. For example, `gopls serve -listen :5000` starts the server listening on port 5000.'
        listen.timeout: '[AI] The `-listen.timeout` flag in the `gopls` serve command is used to set a timeout for accepting new connections to the Go language server. Once this timeout is reached, the server will stop listening for new connections and focus on processing existing requests. This can be helpful in limiting the number of simultaneous connections or preventing potential denial-of-service attacks. The default value for `-listen.timeout` is 30 seconds.'
        logfile: '[AI] `gopls serve --logfile` is a command used with GoPls, the Go language server. The `--logfile` option instructs GoPls to write its log output to a specified file instead of the console. This can be helpful for debugging and analysis purposes as the log information can be stored and reviewed at a later time.'
        mode: '[AI] `gopls serve -mode` is a command used in Go programming language for starting the Go Language Server (gopls) in a remote orattach mode. This means that gopls will connect to an existing Go IDE or editor, such as Visual Studio Code or IntelliJ IDEA, and provide features like code analysis, autocompletion, and formatting on-demand. The `-mode` flag specifies the connection type: "remote" for a new connection or "attach" for connecting to an already running Go process.'
        port: '[AI] `gopls serve -port` is a command used in Go programming language to start the Go Language Server (gopls) in listening mode on a specified port. The `serve` keyword indicates that gopls will run as a server, and the `-port` option followed by a number sets the port number for clients to connect to. This is commonly used for remote development or for testing purposes, enabling external tools and editors to communicate with gopls for features like syntax checking, code completion, and refactoring suggestions.'
        remote.debug: '[AI] `gopls serve -remote.debug` is a command used in the Go programming language''s extension for Visual Studio Code, called go-lang.org/extension/go. This command starts a remote Go Language Server (gopls) in debug mode. The server provides features like code navigation, autocompletion, and formatting for the editor. When run in debug mode, it enables additional diagnostic information to help with development issues.'
        remote.listen.timeout: '[AI] The `-remote.listen.timeout` flag in `gopls`, the Go language server, determines how long the server will wait for a client connection before giving up and closing the listener socket. It is a duration value, typically set in seconds, to configure the maximum time the server will spend waiting for a remote client to connect. If no client connects within the specified timeout, `gopls` will terminate the listener process.'
        remote.logfile: '[AI] The `-remote.logfile` flag is a command-line option for the Go PLus (Gopls) language server when used with the `serve` command. This option enables the server to write diagnostic and log messages to the specified file instead of the standard error stream or the default log location. Using this flag can be helpful in debugging, as it allows redirecting the logs to a specific file for further analysis.'
        rpc.trace: '[AI] `gopls serve -rpc.trace` is a command used with Go Language Server (gopls), an extension for code editors that provides advanced Golang features like autocompletion, syntax checking, and more. This specific command starts the server with RPC trace enabled. The RPC trace logs the remote procedure calls made between the editor and the server, which can be helpful for debugging communication issues or understanding how the server processes requests.'
