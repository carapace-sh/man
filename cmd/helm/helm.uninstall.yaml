# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: uninstall
description: uninstall a release
group: main
flags:
    --description=: add a custom description
    --dry-run: simulate a uninstall
    --keep-history: remove all associated resources and mark the release as deleted, but retain the release history
    --no-hooks: prevent hooks from running during uninstallation
    --timeout=: time to wait for any individual Kubernetes operation (like Jobs for hooks)
documentation:
    command: '[AI] `helm uninstall` is a command used in Helm, the Kubernetes Package Manager. It is utilized to remove a previously installed chart (a collection of Kubernetes resources managed by Helm) from a Kubernetes cluster. The command takes the name of the released chart as its argument and deletes all the Kubernetes resources created by that chart.'
    flag:
        description: '[AI] `helm uninstall` is a command used in Helm, a popular package manager for Kubernetes. The `--description` option provides a description or reason for removing a Helm release. When you run `helm uninstall <release-name> --description="<your-reason>"`, it removes the specified Helm release and saves the given description as an annotation in the Kubernetes cluster, documenting the reason for the removal.'
        dry-run: '[AI] `helm uninstall --dry-run` is a command used in Helm, a popular Kubernetes package manager. This command simulates an uninstallation operation without actually executing it. The flag `--dry-run` instructs Helm to show what resources would be deleted or modified if the command were run with no dry-run flag. It helps in understanding the impact of the uninstallation before executing the actual command, avoiding potential mistakes and ensuring the desired outcome.'
        keep-history: '[AI] `helm uninstall --keep-history` is a command used in Helm, a popular Kubernetes package manager. This command removes a previously installed Helm chart, but keeps its release history. In other words, the chart''s historical records, like releases and revisions, are preserved. This can be useful when you want to keep track of past deployments or easily rollback to a previous version.'
        no-hooks: '[AI] `helm uninstall --no-hooks` is a command used in Helm, a popular Kubernetes package manager. This command is used to remove a previously installed Helm chart, which includes its associated resources like deployments, services, config maps, etc. The `--no-hooks` flag specifically disables the execution of hooks defined in the chart''s Values.yaml or values.yaml files during the uninstallation process. These hooks can include scripts that modify resources or perform additional tasks when a chart is installed or updated. By excluding them with this flag, the uninstallation process becomes quicker and less disruptive, making it suitable for certain use cases where you want to remove the chart without altering other components in your Kubernetes cluster.'
        timeout: '[AI] `helm uninstall` is a command used in Helm, a popular Kubernetes package manager, to remove a chart or release (a deployment of a chart) from a Kubernetes cluster. The `--timeout` option sets the maximum time in seconds Helm will wait for the removal process to complete before considering it failed. If the removal does not finish within the specified timeout, Helm will cancel the operation and return an error.'
