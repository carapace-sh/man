# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: generate
description: Generate Go code from *.templ files
flags:
    -cmd=: Set the command to run after generating code
    -f=: Optionally generates code for a single file
    -help: Print help and exit.
    -path=: Generates code for all files in path
    -pprof=: Port to start pprof web server on
    -proxy=: Set the URL to proxy
    -proxyport=: The port the proxy will listen on
    -sourceMapVisualisations: Generate HTML files to visualise the templ code
    -w=: Number of workers to run in parallel
    -watch: Watch the path for changes and regenerate code
documentation:
    command: '[AI] The `templ generate` command is used in Kubernetes Templating, specifically with Helm charts, to render and generate the output files from a chart''s templates based on input values provided in a values file or through the command line. These generated files can then be used to create or update Kubernetes resources such as deployments, services, and configmaps.'
    flag:
        cmd: |-
            [AI] `templ generate -cmd` is a command used in Helm, a popular Kubernetes package manager. This command generates new files using Helm templates. The `-cmd` option is used to specify a command or script to be executed within the generated files.

            For example, if you have a Helm chart with a template file `deployment.yaml`, and you want to generate a new file `replicaSet.yaml` based on this template but with some modifications, you can use the following command:

            ```bash
            helm create mychart --templates /path/to/mytemplatefile.yaml
            cd mychart/templates
            helm generate -f mytemplatefile.yaml --value replicas=3 -o replicaSet.yaml -cmd "sed -i 's/replicas: 1/replicas: ${REPLICS}/g'"
            ```

            In this example, the `helm generate` command generates a new file `replicaSet.yaml` based on the template `mytemplatefile.yaml`, sets the value of the `replicas` parameter to 3 using the `--value` option, and runs a shell script (specified by the `-cmd` option) to replace all occurrences of "1" with the value of the environment variable `REPLICS`.
        f: '[AI] `templ generate` is a command-line tool from the Helm package manager for Kubernetes. The `-f` flag is used to specify the path to a Helm file (also known as a Chart) as an argument, which tells the tool to create resources based on that chart''s templates. In summary, using `templ generate -f <path_to_chart>` will process the chart''s templates and generate the Kubernetes manifest files that can be deployed with Helm.'
        help: '[AI] `templ generate` is a command-line tool provided by Helm, a popular Kubernetes package manager. The `-help` flag is used to display detailed help information about the `generate` sub-command. This includes a brief description of what `generate` does, which is creating files based on given templates. It also lists the available options and their descriptions to customize the generation process. For example, you can specify a template file or directory, output location, or values for variables in the templates using this flag.'
        path: |-
            [AI] The `templ generate -path` command in Terraform is used to instantiate and create resources based on a template file. Here's a brief explanation of its usage:

            1. `templ` refers to the Terraform plugin for Helm, which is used for handling Terraform templates.
            2. `generate` is the command that creates new instances of resources defined in a template.
            3. `-path` specifies the location of the directory containing the desired Terraform configuration templates.

            So, `templ generate -path <directory_path>` will apply the templates in the specified directory to create new Terraform resources. This can be useful for creating multiple instances or configurations of the same resource type in a consistent and streamlined way.
        pprof: '[AI] The `-pprof` flag for Go''s `templ` generating tool is used to enable and output profiling data during template execution. When this flag is provided, the generated templates will be executed with Go''s `pprof` package enabled. Profiling data can then be written to a file or captured using other tools like `cpuprof`, `memprof`, or `blockprof`. This information can help identify performance bottlenecks and memory usage patterns in your generated templates.'
        proxy: '[AI] The `templ generate -proxy` command is used in Kubernetes to create a new resource object based on a template file, while also configuring it to use a proxy server for making requests to upstream APIs or registries. The `-proxy` flag specifies that the generated resource should include a `Proxy` sidecar container, which sets up an Envoy proxy server by default. This can be useful in scenarios where network policies or authentication is required when accessing external resources.'
        proxyport: '[AI] `templ generate` is a command used in Helm, a popular Kubernetes package manager. The `-proxyport` option is used when deploying an application behind a proxy server. It sets the local port that Helm will use as a proxy to forward requests from Kubernetes to the application. This allows the application to be accessed through the Kubernetes cluster using the specified port on the local machine, bypassing any external firewalls or access restrictions.'
        sourceMapVisualisations: '[AI] `templ generate -sourceMapVisualsizations` is a command used in TypeScript or JavaScript projects with the Templating Engine (Templ) for generating source map visualizations. Source maps enable the mapping of transformed code back to its original source, facilitating better debugging experience in production environments. The flag triggers Templ to generate static HTML files representing these visualizations, allowing developers to inspect the relationship between the transformed code and the original source using various tools such as Chrome DevTools or SourcesMap Explorer.'
        w: '[AI] `templ generate -w` is a command used with Templ, a popular YAML-based configuration management tool for Kubernetes. This specific command generates and writes the output files to their specified locations in the local file system directly, without requiring manual saving or interaction. It''s commonly utilized when you want to update your templates quickly and efficiently while working with multiple files at once.'
        watch: '[AI] `templ generate -watch` is a command provided by the Templ CLI (Command Line Interface) tool, used in Kubernetes development. This command watches for changes in templates defined in YAML or other file formats and automatically generates and applies the resulting Kubernetes manifests. It facilitates continuous updating of your Kubernetes resources without manual intervention.'
