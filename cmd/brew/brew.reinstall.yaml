# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: reinstall
description: Uninstall and then reinstall a <formula> or <cask> using the same options it was originally installed with, plus any appended options specific to a <formula>
group: main
flags:
    --adopt: Adopt existing artifacts in the destination that are identical to those being installed. Cannot be combined with `--force`.
    --appdir: 'Target location for Applications (default: `/Applications`).'
    --audio-unit-plugindir: 'Target location for Audio Unit Plugins (default: `~/Library/Audio/Plug-Ins/Components`).'
    --binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --build-from-source: Compile <formula> from source even if a bottle is available.
    --cask: Treat all named arguments as casks.
    --colorpickerdir: 'Target location for Color Pickers (default: `~/Library/ColorPickers`).'
    --debug: If brewing fails, open an interactive debugging session with access to IRB or a shell inside the temporary build directory.
    --debug-symbols: Generate debug symbols on build. Source will be retained in a cache directory.
    --dictionarydir: 'Target location for Dictionaries (default: `~/Library/Dictionaries`).'
    --display-times: Print install times for each formula at the end of the run.
    --fontdir: 'Target location for Fonts (default: `~/Library/Fonts`).'
    --force: Install without checking for previously installed keg-only or non-migrated versions.
    --force-bottle: Install from a bottle if it exists for the current or newest version of macOS, even if it would not normally be used for installation.
    --formula: Treat all named arguments as formulae.
    --git: Create a Git repository, useful for creating patches to the software.
    --help: Show this message.
    --input-methoddir: 'Target location for Input Methods (default: `~/Library/Input Methods`).'
    --interactive: Download and patch <formula>, then open a shell. This allows the user to run `./configure --help` and otherwise determine how to turn the software package into a Homebrew package.
    --internet-plugindir: 'Target location for Internet Plugins (default: `~/Library/Internet Plug-Ins`).'
    --keep-tmp: Retain the temporary files created during installation.
    --keyboard-layoutdir: 'Target location for Keyboard Layouts (default: `/Library/Keyboard Layouts`).'
    --language: Comma-separated list of language codes to prefer for cask installation. The first matching language is used, otherwise it reverts to the cask's default language. The default value is the language of your system.
    --mdimporterdir: 'Target location for Spotlight Plugins (default: `~/Library/Spotlight`).'
    --no-binaries: 'Disable/enable linking of helper executables (default: enabled).'
    --no-quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --prefpanedir: 'Target location for Preference Panes (default: `~/Library/PreferencePanes`).'
    --qlplugindir: 'Target location for Quick Look Plugins (default: `~/Library/QuickLook`).'
    --quarantine: 'Disable/enable quarantining of downloads (default: enabled).'
    --quiet: Make some output more quiet.
    --require-sha: Require all casks to have a checksum.
    --screen-saverdir: 'Target location for Screen Savers (default: `~/Library/Screen Savers`).'
    --servicedir: 'Target location for Services (default: `~/Library/Services`).'
    --skip-cask-deps: Skip installing cask dependencies.
    --verbose: Print the verification and post-install steps.
    --vst-plugindir: 'Target location for VST Plugins (default: `~/Library/Audio/Plug-Ins/VST`).'
    --vst3-plugindir: 'Target location for VST3 Plugins (default: `~/Library/Audio/Plug-Ins/VST3`).'
    --zap: For use with `brew reinstall --cask`. Remove all files associated with a cask. *May remove files which are shared between applications.*
documentation:
    command: '[AI] `brew reinstall` is a Homebrew command used to force reinstallation of installed packages, including their dependencies, from scratch. It deletes existing files and directories before installing new ones, ensuring a fresh installation. This can be helpful when troubleshooting package issues or when updating to the latest version.'
    flag:
        adopt: '[AI] `brew reinstall --adopt` is a command used in Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall any currently installed formulae (packages) using previously downloaded casks or bottles, if available. The `--adopt` flag tells Homebrew to adopt the installations of these packages instead of rebuilding them from source. Adopting an installation means Homebrew acknowledges that the current version is up-to-date and does not need to be rebuilt, saving time in the installation process.'
        appdir: '[AI] The `brew reinstall --appdir` command is used with Homebrew, a popular package manager for macOS. This command forces Homebrew to reinstall the previously installed packages from scratch. The `--appdir` option specifies the custom application directory where Homebrew should install the new versions of the software. This can be useful when troubleshooting installation issues or when you want to have a clean and consistent setup for multiple macOS environments.'
        audio-unit-plugindir: '[AI] The `brew reinstall --audio-unit-plugindir` command is used with Homebrew, a popular package manager for macOS. This command performs a reinstallation of specific packages or formulae managed by Homebrew, with an emphasis on Audio Unit plugins. The `--audio-unit-plugindir` option specifies the installation directory for Audio Unit plugins. When executed, Homebrew will first uninstall and delete the existing installation of the relevant packages, then proceed to reinstall them fresh from their sources, ensuring that the specified Audio Unit plugin directory is used during installation.'
        binaries: '[AI] The command `brew reinstall --binaries` is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall the currently installed packages and their associated binaries (executable programs), effectively updating both the formulae and the installed software. This can be helpful when issues arise with specific binaries or when upgrading packages to their latest versions.'
        build-from-source: '[AI] The `brew reinstall --build-from-source` command is used with Homebrew, a popular package manager for macOS. This command forces Homebrew to reinstall and rebuild a previously installed formula from source code instead of using a precompiled binary. It ensures that the latest version of the software is built, and any dependencies are also updated if necessary.'
        cask: '[AI] `brew reinstall --cask` is a command used in Homebrew, a popular package manager for macOS. This command forces a reinstallation of all installed Homebrew Cask formulas, which are applications and other large installations that aren''t part of the standard Homebrew packages. The `--force` or `-f` flag is used to override any potential conflicts and force the installation, even if the currently installed versions are up-to-date or if there are dependencies issues. This command can be useful when encountering installation or configuration problems with Cask formulas.'
        colorpickerdir: |-
            [AI] The command `brew reinstall --colorpickerdir` is used with Homebrew, a package manager for macOS. This command does two things:

            1. It reinstalls existing Homebrew installed packages and their dependencies, which can be useful if the installation or configuration of a package was not successful or if there were issues with the existing installation.
            2. It sets the color picker directory to the default value, allowing Homebrew's install and upgrade messages to display in color again. If this option is not specified during the initial installation or an earlier color picker directory was explicitly set to a custom path, the colors may not be displayed in subsequent terminal outputs. By using `--colorpickerdir`, you ensure that Homebrew will use its default color picker directory, which is usually located at `${XDG_CONFIG_HOME}/homebrew/share/zsh-completions/_`.
        debug: '[AI] `brew reinstall --debug` is a command used in Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall a previously installed package while enabling debug mode. Debug mode provides more detailed output during the installation process, which can be helpful for troubleshooting and understanding what Homebrew is doing behind the scenes. The `--debug` flag is an optional argument that enhances the level of verbosity for the command.'
        debug-symbols: '[AI] `brew reinstall --debug-symbols` is a command used in Homebrew, a popular package manager for macOS. This command performs a reinstallation of a previously installed formula or package. The `--debug-symbols` flag instructs Homebrew to install debug symbols alongside the regular binaries and libraries. Debug symbols are additional files that provide more information for debugging applications during development, making it easier to identify and fix issues in the code.'
        dictionarydir: '[AI] The `brew reinstall --dictionarydir` command is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall specific formulas (packages) while also updating the dictionary files in the Homebrew''s dictionary directory. These dictionary files are necessary for autocompletion and other interactive features when using Homebrew''s brew search or brew install commands. In summary, `brew reinstall --dictionarydir` updates both the installed packages and the interactive tools used with Homebrew.'
        display-times: '[AI] The `brew reinstall --display-times` command is used with Homebrew, a popular package manager for macOS. This command tells Homebrew to reinstall (re-download and rebuild) all installed packages, displaying the installation times for each package as they are being installed. It helps in keeping track of when each package was last updated in your system.'
        fontdir: |-
            [AI] `brew reinstall --fontdir` is a command used with Homebrew, a popular package manager for macOS. This command does two things:

            1. It reinstalls outdated or broken formulae (Homebrew's term for packages) in your system.
            2. It specifically includes the fonts directory during the installation process. By default, Homebrew does not install some components like fonts, but this option forces it to do so. This can be helpful if you've encountered issues with missing or corrupted font files.
        force: |-
            [AI] `brew reinstall --force` is a command used in Homebrew, a popular package manager for macOS. This command does the following:

            1. It forces Homebrew to reinstall the previously installed formula (package or software) from scratch.
            2. During the installation process, it will delete any existing files related to that formula before installing new ones.
            3. If there are any dependencies for the formula, they will also be reinstalled with this command.
            4. The `--force` flag overrides any user-defined customization and uses only the official Homebrew versions of packages during installation.
        force-bottle: '[AI] `brew reinstall --force-bottle` is a command used in Homebrew, a popular package manager for macOS. The `reinstall` sub-command is used to reinstall a formula or cask, overwriting the currently installed version. The `--force-bottle` flag forces Homebrew to rebuild and install a fresh bottle (precompiled binary) instead of using an existing one from the Homebrew Cellar cache or the local tap. This can be useful when troubleshooting installation issues, as it ensures that you have the latest version of the package built specifically for your system configuration.'
        formula: '[AI] The `brew reinstall --formula` command is used with Homebrew, a package manager for macOS. This command forces a reinstallation of previously installed packages or formulas, which are software packages defined in Homebrew''s formula repository. It ensures that the installation process starts from scratch and that no outdated caches or links remain. This can be helpful when dealing with dependency issues, corrupted installations, or when updating to a new version of a package.'
        git: |-
            [AI] The `brew reinstall --git` command is used in Homebrew, a popular package manager for macOS. This command performs the following actions:

            1. It locates the formula for the specified Git package in the Homebrew repository.
            2. It fetches the latest changes from the upstream Git repository (specified with `--git` flag).
            3. It rebuilds and installs the package using the updated formula.
            4. If there is an existing installation, it will be replaced with the newly installed version.
            5. Any customization or configurations related to that package are preserved during the process.
            6. The command also clears Homebrew's cache to ensure a fresh installation.

            In summary, `brew reinstall --git` updates and installs (or reinstalls) a specific Homebrew package from its Git repository with the latest changes.
        help: '[AI] `brew reinstall --help` is a command used with Homebrew, a popular package manager for macOS. This command displays detailed help information about the `reinstall` sub-command. When run, it shows options and usage details for reinstalling packages managed by Homebrew, including how to force reinstalls of specific packages or reinstall all packages with dependencies.'
        input-methoddir: '[AI] The `brew reinstall --input-methoddir` command is used in Homebrew, a popular package manager for macOS, to force reinstall a specific package along with its input method (keyboard layout), if one has been installed. The `--input-methoddir` option specifies the path to the existing input method directory. By using this command, Homebrew will first unlink the existing installation of the package and its input method, then download and install the latest versions of both from their respective repositories. This can be useful when troubleshooting issues related to input methods or when upgrading packages with associated input methods.'
        interactive: '[AI] `brew reinstall --interactive` is a command used with Homebrew, a popular package manager for macOS. This command forces a reinstallation of currently installed Homebrew packages. The `--interactive` flag ensures that the installation process will pause before making any changes that might affect existing files or configurations, allowing the user to review and approve each step before it''s executed.'
        internet-plugindir: '[AI] The command `brew reinstall --internet-plugindir` is used with Homebrew, a popular package manager for macOS. This command performs a reinstallation of previously installed packages or formulas managed by Homebrew. The `--internet-plugindir` option specifies a custom directory to use as the Internet Plugin Directory for installing certain packages that require it, such as Google Chrome or Chromium browsers. By using this option, Homebrew will download and install these packages from their respective online repositories instead of using locally cached versions.'
        keep-tmp: |-
            [AI] The `brew reinstall --keep-tmp` command is used in Homebrew, a popular package manager for macOS. It combines the functions of `brew upgrade` and `brew reinstall`.

            When you run `brew reinstall`, it first unlinks the currently installed packages and then reinstalls them from scratch using the latest version from the formulae. This process ensures that all dependencies are rebuilt and the package is in a fresh state.

            The `--keep-tmp` flag instructs Homebrew to keep the temporary files created during this process, which may be helpful for debugging or if you want to analyze what happened during the installation or upgrade of the package. By default, Homebrew removes these temporary files once the installation is complete.
        keyboard-layoutdir: '[AI] The command `brew reinstall --keyboard-layoutdir` is used with Homebrew, a popular package manager for macOS. This command performs a reinstallation of previously installed Homebrew packages, specifically those related to keyboard layouts. The `--keyboard-layoutdir` option specifies that the focus is on these particular packages. It ensures that the installation of these packages is completely refreshed, including their dependencies and configuration files.'
        language: '[AI] The command `brew reinstall --language <LANGUAGE>` is used with Homebrew, a popular package manager for macOS. It instructs Homebrew to reinstall or update the specified language package, which includes compilers, interpreters, and other development tools related to that particular programming language. This action may involve downloading the latest version of the software from its source, rebuilding it, and installing any necessary dependencies. This command can help ensure that the installed language environment is up-to-date and functioning correctly.'
        mdimporterdir: |-
            [AI] The command `brew reinstall --mdimporterdir` is used with Homebrew, a popular package manager for macOS. This specific command consists of three parts:

            1. `brew`: Invokes Homebrew to manage packages and software installations.
            2. `reinstall`: Tells Homebrew to reinstall (i.e., download, build and install) a formula or dependency from scratch.
            3. `--mdimporterdir`: Specifies an optional directory path for managing imported manpages and other manual pages with Homebrew's built-in MDImporter tool. If provided, the `--mdimporterdir` flag instructs Homebrew to install these files into that specified directory instead of the default location.
        no-binaries: '[AI] The `brew reinstall --no-binaries` command is used with Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall outdated or missing formulae from scratch, without downloading precompiled binaries. Instead, it will rebuild the software from source code. It''s useful when dealing with issues related to corrupted installations or when you want to ensure you have the latest version of a package with all dependencies built from source.'
        no-quarantine: '[AI] The `brew reinstall --no-quarantine` command is used in Homebrew, a popular package manager for macOS. This command forces Homebrew to reinstall all currently installed packages from scratch, discarding previous installations and their associated cached data. The `--no-quarantine` flag disables Gatekeeper''s quarantine mechanism, which checks downloaded software for known malware before allowing it to run. Bypassing this safety feature should only be done when you trust the source of the packages being installed.'
        prefpanedir: '[AI] The `brew reinstall --prefpanedir` command is used with Homebrew, a package manager for macOS. This command reinstalls Homebrew packages and sets the preference pane directory to the default value. It first uninstalls and deletes the existing installation of each package, then proceeds to reinstall them from scratch. The `--prefpanedir` option specifies the preference pane directory, which is where Homebrew''s system preferences live. Setting it to the default value ensures that the settings are reset to their initial state during the reinstallation process.'
        qlplugindir: '[AI] The `brew reinstall --qlplugindir` command is used with Homebrew, a popular package manager for macOS. This command forces a reinstallation of previously installed Homebrew packages, including those related to QuickLook plugins (specified by the `--qlplugindir` option). By reinstalling these packages, any potential issues or corruptions in their installation can be resolved, ensuring that the latest and functioning versions are present.'
        quarantine: '[AI] The `brew reinstall --quarantine` command is used with Homebrew, a popular package manager for macOS. It''s used to force-reinstall any previously installed Homebrew packages, bypassing the default caching system and downloading new versions from the sources. The `--quarantine` flag disables Gatekeeper''s quarantine attribute on these packages, which might be required if the packages are not identified as trusted by macOS. This command is typically used when you suspect issues with installed packages or want to ensure you have the latest versions.'
        quiet: '[AI] The command `brew reinstall --quiet` is used in Homebrew, a popular package manager for macOS, to reinstall a previously installed package without displaying any informational messages during the installation process. The `--quiet` flag suppresses all verbose output, allowing for a silent installation.'
        require-sha: '[AI] The `brew reinstall --require-sha` command is used in Homebrew, a popular package manager for macOS, to force a specific reinstallation of a formula with a verified checksum. This means that Homebrew will fetch and install the latest version of the specified software from its origin server, but it will also verify the integrity of the downloaded data using the provided SHA checksum before installation. This helps ensure the authenticity and integrity of the installed software.'
        screen-saverdir: '[AI] `brew reinstall --screen-saverdir` is a command used with Homebrew, a popular package manager for macOS. This command performs a reinstallation of previously installed packages, specifically those related to screen savers, using the `--screen-saverdir` option. It ensures that the specified screen saver packages are up-to-date and properly installed in their designated directory (`/Library/Screen Savers` on macOS).'
        servicedir: '[AI] The `brew reinstall --servicedir` command is a function in Homebrew, a popular package manager for macOS. This command forces Homebrew to reinstall packages and their dependencies from scratch. The `--servicedir` option specifies that Homebrew should install the packages into the Homebrew Services directory, which manages system-wide services. In summary, this command ensures that all installed packages have the latest versions and are correctly configured as services if needed.'
        skip-cask-deps: '[AI] The command `brew reinstall --skip-cask-deps` is used in Homebrew, a popular package manager for macOS. This command instructs Homebrew to reinstall the currently installed packages and their dependencies, but it skips the installation of Cask dependencies. Cask is a component of Homebrew that manages the installation of macOS applications, and their dependencies are software packages that those applications require to run. By skipping the Cask dependencies, this command only reinstalls the base package and its main dependencies.'
        verbose: '[AI] `brew reinstall --verbose` is a command used in Homebrew, a popular package manager for macOS. This command performs a reinstallation of currently installed Homebrew packages or formulas. The `--verbose` flag increases the amount of output displayed during the installation process, providing more detailed information about each step taken. It helps in troubleshooting and understanding the underlying processes behind the installation or update of specific packages.'
        vst-plugindir: |-
            [AI] The `brew reinstall --vst-plugindir` command is used with Homebrew, a popular package manager for macOS. This specific command performs a reinstallation of previously installed Homebrew packages, with an added flag `--vst-plugindir` that specifies a custom directory to be used as the Virtual Studio Technology (VST) plugins directory for various digital audio workstation applications.

            In simple terms, this command:

            1. Reinstalls any previously installed Homebrew packages.
            2. Sets up a custom directory (specified by `--vst-plugindir`) to store VST plugins that come with those installations.
        vst3-plugindir: '[AI] The command `brew reinstall --vst3-plugindir` is used in Homebrew, a popular package manager for macOS, to force reinstall a specific Homebrew formula or package. The `--vst3-plugindir` flag specifies a custom directory where Virtual Studio Technology (VST3) plugins will be installed instead of the default location. This can be useful if you want to keep your plugins organized in a specific folder.'
        zap: |-
            [AI] `brew reinstall --zap` is a command used in Homebrew, a popular package manager for macOS. This command accomplishes two actions:

            1. It forces Homebrew to reinstall the specified formula (package or software) from scratch, using the latest version available.
            2. After the reinstallation, it deletes any leftover files and directories related to the previously installed version, ensuring a clean installation and avoiding potential conflicts or clutter.

            In summary, `brew reinstall --zap` replaces an existing package with its latest version while also cleaning up any unnecessary remnants from the previous installation.
