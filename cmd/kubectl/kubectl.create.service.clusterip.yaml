# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clusterip NAME [--tcp=<port>:<targetPort>] [--dry-run=server|client|none]
description: Create a ClusterIP service
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --clusterip=: Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing).
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --tcp*=: Port pairs can be specified as '<port>:<targetPort>'.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create service clusterip` is a command used in Kubernetes to create a Cluster IP Service. A Cluster IP Service exposes a network service on a cluster-internal IP. This type of service is accessible only within the cluster and automatically assigns an internal IP address from the cluster''s IP range. The `kubectl` tool is used for deploying and managing resources in Kubernetes clusters, and this command specifically creates a Cluster IP Service resource.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl create service clusterip` is a command used to create a Kubernetes ClusterIP service in the default namespace. The `--allow-missing-template-keys` flag is an optional argument that allows creating the service even if some required keys are missing from the YAML definition file. In other words, it ignores errors caused by missing keys and creates the service with existing ones. This can be useful when working with incomplete or partially defined configuration files. However, it''s essential to ensure that the created service will function correctly and without issues, as missing keys might cause unexpected behavior.'
        clusterip: '[AI] `kubectl create service clusterip` is a command used in Kubernetes to create a ClusterIP service. A ClusterIP service creates a single IP that can be used to access a set of Pods within a cluster, allowing communication between them even if their IP addresses are not fixed or publicly accessible. This type of service automatically selects an available IP from the cluster''s private range and routes incoming traffic to the appropriate backend Pods.'
        dry-run: |-
            [AI] `kubectl create service clusterip --dry-run` is a command used with Kubernetes to create a ClusterIP service in a dry-run mode.

            A ClusterIP service creates a virtual IP within the cluster that can be used to access a specific application running on multiple pods. The flag `--dry-run` causes kubectl to print out the YAML manifest file that would be created if the command were run without the flag, but without actually creating or modifying any resources in the cluster. This allows you to review and test your configuration before applying it.
        field-manager: '[AI] The `kubectl create service clusterip` command creates a new Kubernetes ClusterIP service. A ClusterIP service automatically assigns an IP address from the cluster''s private range and makes it accessible within the cluster using that IP. The `--field-manager` flag is used to specify that modifications to this resource should be managed by the Field Manager, which allows for rolling updates, rollbacks, and other advanced features provided by Kubernetes. In simple terms, the command creates a ClusterIP service with the ability to manage its fields using the Kubernetes Field Manager.'
        output: '[AI] The `kubectl create service clusterip` command creates a new Kubernetes Cluster IP Service. A ClusterIP Service exposes a service on a cluster-internal IP address, making it accessible to all nodes in the cluster. The `--output` flag specifies the output format for the command''s response. Possible values include "json", "yaml", and "wide". For example, `--output=yaml` returns the created Service resource in YAML format.'
        save-config: '[AI] `kubectl create service clusterip` is a command used to create a Kubernetes ClusterIP service. A ClusterIP service creates a single IP address that can be used to access a service within a Kubernetes cluster. The `--save-config` flag saves the Kubernetes YAML manifest configuration for creating the service in a file, which can be used later with `kubectl apply`. This command does not create any specific type of service, but rather creates a ClusterIP service with default settings.'
        show-managed-fields: '[AI] `kubectl create service clusterip` is a command used to create a Kubernetes Cluster IP Service in the current namespace. The `--show-managed-fields` flag is an optional argument that asks kubectl to display the managed fields of the API object being created or updated. Managed fields represent the changes made by the controller of the kind (in this case, the Service controller) and are recorded in the metadata field `metadata.managedFields`. This information can be helpful for understanding the desired state of the API object and observing any ongoing reconciliation processes.'
        tcp: '[AI] `kubectl create service clusterip --tcp` is a command used to create a Kubernetes Cluster IP Service. The `clusterip` type creates a single, internal IP address that is assigned by the cluster''s DNS server and is reachable from any node in the cluster. The `--tcp` flag specifies that this service will handle TCP traffic only. When you run this command, you would also need to specify the port number and the targetPort of the backend pods. The service acts as a load balancer for the backend pods, distributing incoming requests to them based on the configured selectors or labels.'
        template: '[AI] `kubectl create service clusterip` is a command used in Kubernetes to create a ClusterIP service type. A ClusterIP service exposes a network service on a cluster-internal IP. It creates a virtual IP that can be reached from anywhere within the cluster, and it automatically selects a target port for the service. The `--template` flag is an optional argument that allows you to specify a custom template file (using the Go `template` package) to generate the YAML manifest for the service before creating it. This feature enables you to create complex services with dynamic or parameterized properties.'
        validate: '[AI] The `kubectl create service clusterip` command creates a Kubernetes ClusterIP service. A ClusterIP service automatically assigns an IP address from the cluster''s private range and can be accessed only within the cluster. The `--validate` flag is optional, but it validates the given YAML manifest against the schema before creating the resource to ensure correctness and compatibility with the current API version.'
