# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: svg-term
description: Share terminal sessions as razor-sharp animated SVG everywhere
flags:
    --at=: timestamp of frame to render in ms [number]
    --cast=: asciinema cast id to download [string], required if no stdin provided [string]
    --command=: command to record [string]
    --from=: lower range of timeline to render in ms [number]
    --height=: height in lines [number]
    --help: print this help [boolean]
    --in=: json file to use as input [string]
    --no-cursor: disable cursor rendering [boolean]
    --no-optimize: disable svgo optimization [boolean]
    --out=: output file, emits to stdout if omitted, [string]
    --padding-x=: distance between text and image bounds on x axis [number]
    --padding-y=: distance between text and image bounds on y axis [number]
    --padding=: distance between text and image bounds, [number]
    --profile=: terminal profile file to use, requires --term [string]
    --term=: terminal profile format, requires --profile [string]
    --to=: upper range of timeline to render in ms [number]
    --width=: width in columns [number]
    --window: render with window decorations [boolean]
documentation:
    command: '[AI] `svgterm` is a Node.js library and CLI tool for rendering SVG graphics in terminal environments. It converts complex SVG shapes into simpler ASCII art, producing terminal-friendly representations. It''s useful when you need to display SVG content in environments where graphical interfaces aren''t available or desirable, such as terminal-based applications and command lines.'
    flag:
        at: '[AI] `svgtm--at` is a command-line tool provided by the `svg-term` library, which enables rendering terminal output as Scalable Vector Graphics (SVG) in an SVG container. The `--at` flag specifically sets the anchor point for the SVG glyphs rendered from terminal output. It takes x and y coordinates as arguments, specifying the position of the anchor point relative to the bottom-left corner of the containing SVG element. For instance, `svgtm --at 50 50 file.terminal` would center the terminal output within the SVG container.'
        cast: '[AI] `svg-term --cast` is a command used in the `svg-term` library for creating terminal-like text output in SVG format. The `--cast` option instructs `svg-term` to convert terminal escape sequences into corresponding SVG shapes and styles. This enables rendering terminal output as vector graphics in an SVG viewer or browser.'
        command: '[AI] `svg-term --command` is a command-line interface for the SVG-Term library, which allows users to run Terminal applications in Scalable Vector Graphics (SVG) format. The `--command` option specifies the terminal command or script to be executed within the SVG environment. It enables users to interactively use their preferred terminal commands and applications within an SVG canvas, facilitating integration of terminal output into larger SVG projects.'
        from: '[AI] `svg-term --from` is a command-line argument used with the `svgterm` tool, which converts terminal output to Scalable Vector Graphics (SVG) format. The `--from` option specifies the input source of the terminal data. For example, `--from ws` for WebSockets or `--from ps1` for PowerShell prompts. It tells `svgterm` to interpret and process the incoming terminal output in that particular format before converting it into SVG format.'
        height: '[AI] The `--height` option in the command `svg-term` sets the height of the terminal emulated in an SVG (Scalable Vector Graphics) image. It takes an integer value indicating the desired height in pixels. This flag is useful when generating SVG representations of terminals for embedding in web applications or other graphical user interfaces where a scalable and customizable terminal rendering is required.'
        help: '[AI] `svgtirm --help` is a command used with the `svgtirm` tool, which is an SVG (Scalable Vector Graphics) terminal emulator. The `--help` option displays detailed information about how to use the tool, including available commands and their options, as well as examples and usage tips. It''s a useful way to quickly learn about the capabilities and features of `svgtirm`.'
        in: |-
            [AI] `svg-term --in` is a command-line option for the `svg-term` tool, which is used to convert terminal output into Scalable Vector Graphics (SVG) format. The `--in` flag specifies the input file or stream containing the terminal data that should be converted to SVG format. For example, if you have a file named "terminal-output.txt" that contains terminal data, you can convert it to an SVG file using the following command:

            ```bash
            svg-term --in terminal-output.txt > output.svg
            ```

            This command reads the terminal output from "terminal-output.txt" and generates an SVG file named "output.svg". If the input is coming from standard input (for example, from a pipe), you can simply omit the `--in` flag and provide the data directly to `svg-term`.
        no-cursor: '[AI] `svg-term --no-cursor` is a command-line argument for the `svgtaramp` library, used to render terminal output as Scalable Vector Graphics (SVG). The `--no-cursor` flag disables rendering of the text cursor in the SVG output. This can be useful when integrating the SVG terminal output into other applications or websites where a blinking text cursor may not be desired.'
        no-optimize: |-
            [AI] `svg-term --no-optimize` is a command-line argument used with the SVG-Term library, which is a terminal rendering engine based on Scalable Vector Graphics (SVG). The `--no-optimize` flag disables the SVG optimization process during rendering.

            Optimization improves the performance and reduces the file size of the SVG graphics by simplifying their structure, removing unnecessary elements, and applying other techniques. However, optimization may alter the original appearance of the graphics, especially if they have complex structures or use specific visual effects.

            By using `--no-optimize`, you ensure that the rendered output will match the original SVG file as closely as possible, without undergoing any optimization process. This flag might be useful when working with intricate SVG designs or debugging rendering issues where precise visual representation is essential.
        out: '[AI] `svgtompc --out` is a command used in Node.js projects for converting Scalable Vector Graphics (SVG) files to Terminal Art using the library called `svgtompc`. The `--out` flag specifies an output file name where the generated terminal art will be saved after the conversion process has completed.'
        padding: '[AI] `svgtioml-term --padding` is a command-line option for the library `svgtioml` in Node.js, which is used to render terminal output as Scalable Vector Graphics (SVG). The `--padding` option adds padding around the terminal output when converting it to SVG format. This padding can be customized with width and height values to adjust the space between the terminal output and the SVG canvas border.'
        padding-x: '[AI] `svg-term --padding-x` is a command line option for the `svg-term` library in Node.js. It sets the horizontal padding of an SVG terminal output. The value following `--padding-x` specifies the width of the padding in pixels. This option can be used to add spacing between the terminal content and the edges of the containing SVG element, improving readability or alignment with other elements on the page.'
        padding-y: '[AI] `svg-term --padding-y` is a command line argument used with the `svg-term` library in Terminal.js, which is a popular terminal rendering library for SVG graphics. The `--padding-y` option sets the vertical padding size in pixels between the terminal''s content and its bounding box or container. This can be useful to ensure proper alignment and spacing of terminal output within an SVG canvas.'
        profile: '[AI] `svg-term --profile` is a command-line argument for the SVG-Term terminal emulator. It specifies the use of a specific configuration or profile, which defines various settings such as font, colors, and other appearance options. The exact impact of using this option depends on the available profiles and their configurations.'
        term: '[AI] `svgterm --term` is a command-line tool that creates an SVG (Scalable Vector Graphics) representation of a terminal window with text output. The tool, called `svgterm`, is responsible for creating the SVG file, while `--term` is an option provided to simulate the appearance of a terminal window within the generated SVG output. By using this command, you can easily embed terminal outputs into your SVG projects or websites while maintaining the look and feel of a traditional terminal interface.'
        to: '[AI] `svg-term --to` is a command used with the `svg-term` tool, which converts text-based terminal output into Scalable Vector Graphics (SVG) format. The `--to` flag specifies the output format as SVG. This allows terminal output to be rendered as visually rich and scalable graphics in various applications that support SVG.'
        width: '[AI] `svg-term --width` is a command-line argument for the SVG-Term terminal emulator. The `--width` option sets the width of the terminal window in pixels. For example, `svg-term --width 80` would set the terminal window to be 80 pixels wide.'
        window: '[AI] `svg-term --window` is a command-line argument for the SVG-Term terminal emulator. It sets up the application to create a new SVG-Term window, allowing users to run text-based applications or scripts in an scalable vector graphics (SVG) environment. This flag does not affect the content within the window but only initializes a new one.'
