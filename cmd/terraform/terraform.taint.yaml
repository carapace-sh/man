# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: taint [options] <address>
description: Mark a resource instance as not fully functional
flags:
    -allow-missing: succeed even if the resource is missing.
    -ignore-remote-version: A rare option used for the remote backend only.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
documentation:
    command: '[AI] The `terraform taint` command is used to mark resources in Terraform state as out-of-date or tainted, signaling to Terraform that those resources need to be recreated during the next apply operation. This can be useful when a resource has been manually modified outside of Terraform and its current state no longer matches the desired configuration. By marking the resource as tainted, Terraform will recognize the difference and take appropriate action during the next apply cycle.'
    flag:
        allow-missing: |-
            [AI] `terraform taint` is a command in Hashicorp's Terraform configuration management tool. It marks one or more resources for recreation, effectively removing their current state and forcing new instances to be created during the next apply.

            The `-allow-missing` flag modifies the behavior of this command. When used, Terraform will continue processing even if some required resources are missing, instead of exiting with an error. This can be useful in specific use cases where you intentionally want to recreate resources that may have been accidentally deleted or were never created due to errors during previous runs. However, using `-allow-missing` comes with a risk: Terraform might create resources unintentionally, leading to unexpected changes in your infrastructure if not used carefully.
        ignore-remote-version: '[AI] The `terraform taint` command with the `-ignore-remote-version` flag is used to mark resources in Terraform state for recreation, regardless of their current version in the remote backend (e.g., AWS S3 or consul). This flag overrides the normal behavior where Terraform compares the current state with the desired configuration and only updates resources that have changed. By using `-ignore-remote-version`, you can force Terraform to recreate all resources, allowing for manual intervention or testing scenarios where you need to bypass the version comparison. It''s essential to be cautious when using this flag as it might result in unwanted resource updates and potential data loss.'
        lock: '[AI] The `terraform taint` command with the `-lock` option is used to mark Terraform state resources as tainted in a Terraform managed state file. This means that the next apply will destroy and recreate the affected resources, effectively resetting their current configuration. Using the `-lock` option ensures that the change is recorded in the state file with a lock, preventing other Terraform runs from overwriting this change until it''s explicitly unlocked.'
        lock-timeout: '[AI] The `terraform taint` command with the `-lock-timeout` option is used to break a Terraform state lock, which prevents Terraform from making changes to infrastructure resources managed by it. The `lock-timeout` argument specifies the duration for which Terraform should wait before forcefully breaking the lock if no response is received from the previous Terraform session that created the lock. This command is typically used when you need to make urgent changes to your infrastructure and cannot wait for the usual workflow to complete. It''s important to note that using `terraform taint -lock-timeout` can have unintended consequences, as it may lead to data loss or other issues if not used carefully. Always exercise caution before utilizing this command.'
