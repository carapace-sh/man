# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: grep
description: Print lines matching a pattern
group: main
flags:
    --all-match: show only matches from files that match all patterns
    --and: combine patterns specified with -e
    --break: print empty line between matches from different files
    --cached: search in index instead of in the work tree
    --color?: highlight matches
    --column: show column number of first match
    --exclude-standard: ignore files specified via '.gitignore'
    --ext-grep: allow calling of grep(1) (ignored by this build)
    --full-name: show filenames relative to top directory
    --heading: show filename only once above matches from same file
    --max-depth=: descend at most <depth> levels
    --name-only: synonym for --files-with-matches
    --no-index: find in contents not managed by git
    --not: ""
    --or: ""
    --recurse-submodules: recursively search in each submodule
    --textconv: process binary files with textconv filters
    --threads=: use <n> worker threads
    --untracked: search in both tracked and untracked files
    -A, --after-context=: show <n> context lines after matches
    -B, --before-context=: show <n> context lines before matches
    -C, --context=: show <n> context lines before and after matches
    -E, --extended-regexp: use extended POSIX regular expressions
    -F, --fixed-strings: interpret patterns as fixed strings
    -G, --basic-regexp: use basic POSIX regular expressions (default)
    -H: show filenames
    -I: don't match patterns in binary files
    -L, --files-without-match: show only the names of files without match
    -O, --open-files-in-pager?: show matching files in the pager
    -P, --perl-regexp: use Perl-compatible regular expressions
    -a, --text: process binary files as text
    -c, --count: show the number of matches instead of matching lines
    -e=: match <pattern>
    -f=: read patterns from file
    -h: don't show filenames
    -i, --ignore-case: case insensitive matching
    -l, --files-with-matches: show only filenames instead of matching lines
    -n, --line-number: show line numbers
    -o, --only-matching: show only matching parts of a line
    -p, --show-function: show a line with the function name before matches
    -q, --quiet: indicate hit with exit status without output
    -r, --recursive: search in subdirectories (default)
    -v, --invert-match: show non-matching lines
    -w, --word-regexp: match patterns only at word boundaries
    -z, --null: print NUL after filenames
documentation:
    command: '[AI] `git grep` is a Git command used to search for specific text patterns across all files in the current Git repository. It works similarly to the standard Unix `grep` command, but with the added benefit of searching within the context of your version-controlled project. The search results are displayed in the terminal window, showing the matching lines along with the file name and path where they were found.'
    flag:
        H: '[AI] `git grep` is a command used in Git to search for specific text across all the files in a repository. The `-H` option stands for "show filenames," which means that in addition to displaying the matching lines, Git will also print the names of the files where the match was found.'
        I: '[AI] `git grep` is a command used in Git version control system to search for specific text across all the files in the repository. The `-I` option makes the search case-insensitive, meaning it searches for the given text ignoring its case (i.e., lower or upper). For example: `git grep -I "keyword" .` will search for the keyword in all files within the current directory recursively and display the matching lines.'
        after-context: '[AI] `git grep --after-context` is a command used in Git version control system to search for specific text within all files in the current repository. The `--after-context` option displays not only the matching lines but also the context (surrounding lines) of each match. This can help provide additional context when searching for a particular text pattern, making it easier to understand the surrounding code.'
        all-match: '[AI] `git grep --all-match` is a Git command used for searching for specific text patterns across all files in the entire repository. The `--all-match` option makes the search case-sensitive and regulates the search to only match whole lines that exactly contain the given pattern without any context or partial matches. It returns the filenames and line numbers of matched files, displaying the matched lines in the pager by default.'
        and: '[AI] The `git grep --and` command is a Git command used for searching text within the entire history of a repository for lines containing a specific pattern. The `--and` option filters the search results to only show lines that contain all specified patterns. In other words, it performs a logical AND operation on the search terms. This can be useful when looking for multiple keywords that must appear in the same line in order to match the search criteria.'
        basic-regexp: '[AI] `git grep --basic-regexp` is a command used in Git version control system to search for text patterns across all files in the current repository. The `--basic-regexp` option enables the use of regular expressions for more complex and precise search queries. This can be particularly useful when searching for specific code snippets or text patterns that follow a certain pattern. By default, Git grep uses simple globbing patterns, but with this option, you can utilize powerful regex capabilities to find matches in a more sophisticated manner.'
        before-context: '[AI] `git grep --before-context` is a Git command used for searching text within a repository''s history. The `--before-context` option displays the context (lines of code) before the matching line in the result. This can help provide useful context when looking for a specific piece of text across different commit states.'
        break: '[AI] `git grep --break` is a Git command used for searching text within a repository. The `--break` option makes Git output search results one match per commit, rather than merging matching lines from different commits into a single output. This can be useful when trying to isolate changes in specific commits or branches.'
        cached: '[AI] `git grep --cached` is a Git command used to search for specific text in all files that are currently staged (but not yet committed) for a upcoming commit. The command searches through the cached index, not the working directory or the file system, making it useful for locating and modifying text prior to committing changes. This can be particularly helpful when addressing typos or inconsistencies in multiple files before making a commit.'
        color: '[AI] `git grep --color` is a command used in Git version control system to search for specific text within all files in the current repository. The `--color` option enables colored output for matching lines, making it easier to identify them visually among the search results.'
        column: '[AI] `git grep --column` is a Git command used to search for specific text patterns within all files in a repository. The `--column` option makes the output display only the matching lines, with each line preceded by the file path and a colon character (:`). This option is useful when dealing with large search results, as it saves vertical space and simplifies the output presentation.'
        context: '[AI] `git grep --context` is a Git command used to search for specific text in the entire repository, displaying the context or surrounding lines of each matching result. The `--context` option shows the match and a specified number of lines before and after it in the file(s). This can help understand the context in which the search term appears. For instance, `git grep --context=3 ''pattern'' path/to/file(s)` will display 3 lines before and after the matching line.'
        count: '[AI] `git grep --count` is a Git command used to search for specific text across all files in your repository. The `--count` option returns only the number of matches found for each search term, instead of displaying the actual matching lines. This can be useful for quickly checking the frequency of certain text occurrences within your project.'
        e: '[AI] `git grep` is a Git command used for searching text within the version-controlled files under a repository. The `-e` option is a regular expression flag that allows you to search for multiple patterns in one go. For instance, `git grep -e ''pattern1|pattern2'' <file>` will return all lines containing either ''pattern1'' or ''pattern2''. This command searches the current repository''s content looking for the given text patterns.'
        exclude-standard: |-
            [AI] `git grep` is a Git command used to search for specific text patterns in a repository. The `--exclude-standard` option is an argument that modifies the search behavior.

            By default, `git grep` searches in all types of files (e.g., source code, text files, binary files). However, `--exclude-standard` excludes certain standard types of files from the search, such as executable scripts (`.sh`), documentation files (`.md`, `.rst`), and version control files (`.git`).

            In summary, `git grep --exclude-standard` searches for text patterns in all files except those with standard file extensions that are typically excluded from code searches. This command is useful when you want to limit your search to specific types of files in a Git repository.
        ext-grep: '[AI] `git grep` is a command used in Git version control system to search for specific text across all the files in the repository. The `--ext-grep` option extends the functionality of `git grep` by invoking an external grep tool, such as `ag` or `rg`, instead of using the built-in grep command. This can provide more powerful search capabilities and faster performance for large repositories.'
        extended-regexp: |-
            [AI] `git grep` is a Git command used to search for specific text within all files in a repository. The `--extended-regexp` option enables extended regular expressions, making it possible to use more complex search patterns, including those with lookaheads, lookbehinds, and other advanced regex features. For example:

            ```sh
            git grep --extended-regexp '(?i)err' .
            ```

            This command will search for the string "err" (case insensitive) in all files under the current directory using extended regular expressions. It can help to locate more specific text patterns in a large Git repository.
        f: '[AI] `git grep` is a Git command used to search for specific text in all the files within a repository. The `-f` option, short for "--files-with-match", is used to display only the names of the files that contain the searched text instead of showing the matching lines. In summary, `git grep -f <search_term>` will output a list of files in the current repository containing the given search term.'
        files-with-matches: '[AI] `git grep --files-with-matches` is a Git command used to search for specific text across all files in the current repository. The option `--files-with-matches` returns only the names of the files that contain the searched text instead of displaying the matching lines within those files. This can be useful when you want to focus on locating the files that need modification without having to view each file''s contents individually.'
        files-without-match: '[AI] `git grep --files-without-match` is a Git command used to find files in the current repository that do not contain a given search pattern in their contents or in their paths. The command searches for files with no matching lines by inspecting the file names in the index, but does not perform a text search within those files. It outputs the list of non-matching file names to the standard output.'
        fixed-strings: '[AI] `git grep --fixed-strings` is a command used in Git version control system to search for fixed strings literally across all files in the current repository. The `--fixed-strings` option ensures that only exact matches are found, disregarding case sensitivity and context. It returns the paths of the matching files along with the line numbers and the actual content of the matched string.'
        full-name: '[AI] The `git grep` command is used to search for specific text patterns within a Git repository. The `--full-name` option is an argument that can be passed to this command to display the full path and file name of each matching line, in addition to the line content itself. This can help in quickly locating the files containing the searched text pattern within a large or complex codebase.'
        h: '[AI] `git grep -h` is a command used in Git version control system to search for specific text across all the source files in the entire repository. The `-h` option is used to display only the filenames where the searched text appears, without showing the actual matching lines. So, it''s an efficient way to quickly locate files containing desired text within a large Git repository.'
        heading: '[AI] `git grep --heading` is a command used in Git version control system to search for specific text across all files in the repository. The `--heading` option displays only the names of the matching files at the beginning of the output, without showing the actual matching lines. It''s useful when you want to quickly identify which files contain the searched text without seeing the lines themselves.'
        ignore-case: '[AI] The `git grep --ignore-case` command is used to search for specific text patterns in all files within a Git repository, ignoring the case of characters during the search. This means that the search will match both uppercase and lowercase versions of the searched text. For example, if you search for "error" with `git grep --ignore-case`, it will also find instances where the text is written as "Error" or "ERROR". This can be useful when searching for text in a case-insensitive manner across multiple files within a Git repository.'
        invert-match: '[AI] `git grep` is a Git command used for searching text within a repository. The `--invert-match` option inverts the match, meaning it returns lines that do not contain the searched pattern instead of lines that do. For example, `git grep --invert-match "error" .` will return all lines in the current directory and its subdirectories that do not contain the word "error".'
        line-number: '[AI] `git grep` is a command used in Git version control system to search for specific text across all files within a repository. The `--line-number` option that follows the `grep` command displays the line numbers of matching lines in addition to the matching text. In summary, `git grep --line-number <search_term>` searches for <search_term> across all files and displays both the matching text and its corresponding line number within each file.'
        max-depth: '[AI] `git grep` is a command used to search for specific text patterns in the source code under Git version control. The `--max-depth` option is an argument that limits the search to a certain depth level in the directory tree. When you use `git grep --max-depth=N`, it will search files up to N levels deep from the current directory, excluding subdirectories at deeper levels. This can help narrow down your search and make it more efficient when looking for text within multiple levels of a project directory.'
        name-only: '[AI] The `git grep` command with the `--name-only` option is used to search for a given pattern in all source files within a Git repository, but only output the names of matching files instead of displaying the matching lines. This can be useful when you want to quickly identify which files contain a specific keyword or term without having to wade through the contents of each file.'
        no-index: '[AI] `git grep --no-index` is a Git command used to search for specific text patterns in the content of files without including the filenames in the output. The `--no-index` option tells Git not to use the index (staging area) and instead search through the working directory files directly. It''s particularly useful when you want to find a text pattern across multiple files within your local repository without having to specify each file name explicitly.'
        not: '[AI] `git grep --not` is a Git command used to search for files that do not contain a specific text pattern. The `--not` option inverts the match, meaning it will find files where the search term is not present. The `git grep` command searches recursively through all files in the current repository by default.'
        "null": '[AI] `git grep --null` is a Git command used to search for a specific text pattern across all files in the current repository. The `--null` option is used to ensure that file names are not printed as output when no matching lines are found in a file, instead an empty string is printed instead. This can be useful when processing the output with other tools like Awk or Sed.'
        only-matching: '[AI] `git grep --only-matching` is a Git command used to search for specific patterns in all files within a repository, returning only the matching text fragments. It''s an efficient alternative when you are interested only in the matched strings without needing the context from surrounding lines or file information. This command can help you quickly locate and extract specific pieces of text across multiple files within your Git project.'
        open-files-in-pager: '[AI] `git grep --open-files-in-pager` is a Git command used to search for specific text across all files in the current repository. The `--open-files-in-pager` option instructs Git to use an external pager (such as Less or More) to display the contents of files containing the search results, instead of printing them directly in the terminal. This allows for better formatting and scrolling through large files.'
        or: '[AI] `git grep --or` is a Git command used to search for a specific text pattern across multiple files within a Git repository. The `--or` option tells Git to show the matching lines from files where the pattern is found, regardless of whether it''s also present in other files. In essence, it returns the lines containing the given pattern only from the files where it appears exclusively.'
        perl-regexp: '[AI] `git grep` is a command used in Git to search for specific text within all files in a repository. The `--perl-regexp` option enables the use of Perl-compatible regular expressions, allowing more complex and flexible search patterns than the default basic regular expressions. This can be useful when searching for specific patterns or texts that require advanced regex syntax.'
        quiet: '[AI] `git grep --quiet` is a command used in Git version control system to search for specific text patterns across all the source files in the entire repository. The `--quiet` option is used to suppress the output of file names where the search pattern is not found, displaying only an empty output if the search term exists in any file and a non-empty output if the search term is not found anywhere in the repository.'
        recurse-submodules: '[AI] `git grep --recurse-submodules` is a Git command used for searching text within the entire Git repository, including subdirectories and nested sub-projects represented as Git submodules. The `--recurse-submodules` option ensures that the search includes all files in both the main project and the submodules. This command helps developers locate specific text across their entire project tree, which can be particularly useful when working on large or complex projects with multiple submodules.'
        recursive: '[AI] `git grep` is a Git command used to search for specific text in your repository. The `--recursive` option tells Git to search not only in the current directory but also in subdirectories. This means that the search will be performed recursively throughout the entire repository.'
        show-function: '[AI] `git grep` is a command used in Git version control system to search for specific text across all files in the repository. The `--show-function` option is an additional flag that can be passed with this command to display not only the matching lines but also the name of the function or method containing the match, as well as the file path where the function is defined. This can be useful for quickly navigating to the location of a specific function call in the codebase.'
        text: '[AI] `git grep --text` is a command used in Git version control system to search for specific text across all source files in the current repository. The `--text` option ensures that only matching text from the file content (as opposed to filenames or paths) is displayed in the output.'
        textconv: '[AI] `git grep --textconv` is a Git command used to search for specific text in all files within a repository. The `--textconv` option enables text-based conversions on matching files. This means that any checked out files with binary or special formats (like image or video files) will be automatically checked out and converted to text format (like UTF-8 encoding for text files) so their content can be searched and displayed in the terminal.'
        threads: |-
            [AI] The `git grep --threads` command is used to search for specific text within a Git repository, but with an added feature of displaying the threads of changes that introduced or removed the matching text.

            When you run `git grep <pattern>`, it searches for the specified pattern in all the files under the current Git working directory and its subdirectories. With the `--threads` option, Git will also show you the commits that changed each file containing the search result.

            The output displays the file path, the commit hash, the author of the change, and when it was committed. This allows you to quickly identify where in your project the changes were made, and in what historical context they occurred.
        untracked: '[AI] `git grep --untracked` is a Git command used to search for specific text within untracked files in the current repository. The "--untracked" option limits the search scope to files that aren''t yet under version control, i.e., those that have been added to the Git index but not committed. This command can help you locate and manage text occurrences within these files effectively.'
        word-regexp: '[AI] `git grep` is a Git command used to search for specific text in your repository. The `--word-regexp` option makes the search regular expression match whole words only. For example, if you use `git grep --word-regexp="pattern" file`, it will return lines where "pattern" appears as a whole word, ignoring partial matches. This can be useful for more precise searches in large codebases.'
