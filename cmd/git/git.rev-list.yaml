# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rev-list
description: Lists commit objects in reverse chronological order
group: low-level interrogator
flags:
    --abbrev-commit: Show a prefix that names the object uniquely
    --after=: Show commits more recent than a specific date
    --all: Pretend as if all the refs in refs/ are listed on the command line
    --all-match: Limit output to ones matching all given --grep
    --alternate-refs: Pretend as if all alternate ref tips are listed on the command line
    --ancestry-path?: Only display commits in that range that are ancestors of <commit>, descendants of <commit>, or <commit> itself
    --author-date-order: Show commits in the author timestamp order
    --author=: Limit output to ones with matching author header
    --basic-regexp: Consider the limiting patterns to be basic regular expressions
    --before=: Show commits older than a specific date.
    --bisect: Limit output to the one commit object which is roughly halfway between included and excluded commits
    --bisect-all: This outputs all the commit objects between the included and excluded commits
    --bisect-vars: This calculates the same as --bisect, except that refs in refs/bisect/ are not used
    --boundary: Output excluded boundary commits
    --branches?: Pretend as if all the refs in refs/heads are listed on the command line
    --cherry: A synonym for --right-only --cherry-mark --no-merges
    --cherry-mark: Like --cherry-pick but mark commits rather than omitting them
    --cherry-pick: Omit any commit that introduces the same change as another commit
    --children: Print also the children of the commit
    --commit-header: Overrides a previous --no-commit-header
    --committer=: Limit output to ones with matching committer header
    --count: Only print a number stating how many commits would have been listed
    --date-order: Show commits in the commit timestamp order
    --date=: Date format
    --dense: Only the selected commits are shown, plus some to have a meaningful history
    --disk-usage?: Suppress normal output and print disk usage
    --do-walk: Overrides a previous --no-walk
    --encoding=: Re-code the commit log message in given encoding
    --exclude-first-parent-only: For excluded commits follow only the first parent commit upon merge
    --exclude-hidden?: Do not include refs that would be hidden
    --exclude-promisor-objects: Prefilter object traversal at promisor boundary
    --exclude=: Do not include matching refs the next option would consider
    --expand-tabs=: Perform a tab expansion
    --filter-print-omitted: Print a list of the objects omitted by the filter
    --filter-provided-objects: Filter the list of explicitly provided objects
    --filter=: Omits objects from the list of printed objects
    --first-parent: For included commits follow only the first parent commit upon merge
    --format=: Pretty-print the contents of the commit logs in a given format
    --full-history: Same as the default mode, but does not prune some history
    --glob=: Pretend as if all matching refs are listed on the command line
    --graph: Draw a text-based graphical representation of the commit history
    --grep-reflog=: Limit output to ones with matching reflog entries
    --grep=: Limit output to ones with matching log message
    --header: Print the contents of the commit in raw-format
    --ignore-missing: Pretend as if the bad input was not given
    --in-commit-order: Print tree and blob ids in order of the commits
    --indexed-objects: Pretend as if all trees and blobs used by the index are listed on the command line
    --invert-grep: Limit output to ones with non-matching log message
    --left-only: List only commits on the left side of a symmetric difference
    --left-right: Mark which side of a symmetric difference a commit is reachable from
    --max-age=: Limit the commits output to specified time range
    --max-parents=: Show only commits which have at most that many parent commits
    --merge: Show refs that touch files having a conflict and don’t exist on all heads to merge
    --merges: Print only merge commits
    --min-age=: Limit the commits output to specified time range
    --min-parents=: Show only commits which have at least that many parent commits
    --missing=: Specify how missing objects are handled
    --no-abbrev-commit: Show the full 40-byte hexadecimal commit object name
    --no-commit-header: Suppress the header line containing "commit"
    --no-expand-tabs: Do not perform a tab expansion
    --no-filter: Turn off any previous --filter= argument
    --no-max-parents: Reset max-partents limit
    --no-merges: Do not print commits with more than one parent
    --no-min-parents: Reset min-parents limit
    --no-object-names: Do not print the names of the object IDs that are found
    --no-walk=: Only show the given commits, but do not traverse their ancestors
    --not: Reverses the meaning of the ^ prefix
    --object-names: Print the names of the object IDs that are found
    --objects: Print the object IDs of any object referenced by the listed commits
    --objects-edge: Similar to --objects, but also print the IDs of excluded commits
    --objects-edge-aggressive: Similar to --objects-edge, but it tries harder to find excluded commits
    --oneline: This is a shorthand for "--pretty=oneline --abbrev-commit" used together
    --parents: Print also the parents of the commit
    --pretty?: Pretty-print the contents of the commit logs in a given format
    --progress=: Show progress reports on stderr as objects are considered
    --quiet: Don’t print anything to standard output
    --reflog: Pretend as if all reflog objects are listed on the command line
    --relative-date: Synonym for --date=relative
    --remotes?: Pretend as if all the refs in refs/remotes are listed on the command line
    --remove-empty: Stop when a given path disappears from the tree
    --reverse: Output the commits in reverse order
    --right-only: List only commits on the right side of a symmetric difference
    --show-linear-break=: Put a barrier in between branches in graph output
    --show-pulls: Include also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent
    --show-signature: Check the validity of a signed commit object
    --simplify-by-decoration: Commits that are referred by some branch or tag are selected
    --simplify-merges: Additional option to --full-history to remove some needless merges from the resulting history
    --since-as-filter=: Show all commits more recent than a specific date
    --since=: Show commits more recent than a specific date
    --single-worktree: Examine the current working tree only
    --skip=: Skip number commits before starting to show the commit output
    --sparse: All commits in the simplified history are shown
    --stdin: Read arguments from standard input as well
    --tags?: Pretend as if all the refs in refs/tags are listed on the command line
    --timestamp: Print the raw commit timestamp
    --topo-order: Avoid showing commits on multiple lines of history intermixed
    --unpacked: Print the object IDs that are not in packs
    --until=: Show commits older than a specific date.
    --use-bitmap-index: Try to speed up the traversal using the pack bitmap index
    -E, --extended-regexp: Consider the limiting patterns to be extended regular expressions
    -F, --fixed-strings: Consider the limiting patterns to be fixed strings
    -P, --perl-regexp: Consider the limiting patterns to be Perl-compatible regular expressions
    -g, --walk-reflogs: Walk reflog entries from the most recent one to older ones
    -i, --regexp-ignore-case: Match the regular expression case insensitive
    -n, --max-count=: Limit the number of commits to output
documentation:
    command: '[AI] `git rev-list` is a Git command used to display the list of commit hashes that match a given condition. It does not move the branch or create new commits, but rather retrieves information about existing commits based on specified criteria such as range of commits (e.g., `git rev-list HEAD~3` for the three most recent commits), tagged commits (e.g., `git rev-list v1.0`), or common ancestors between branches (e.g., `git rev-list --merges <branch1> <branch2>`). It can also be used with other Git commands like `git count-elements` for counting the number of commits, `git prune` for removing unreachable commits and refs, or piped to other tools for further processing.'
    flag:
        abbrev-commit: '[AI] `git rev-list --abbrev-commit` is a Git command that returns the abbreviated commit hash for each commit that matches the given argument(s). The argument could be a specific commit hash, branch name, or tag. This command does not print the full commit message or other details by default, only the shortened hash (usually 7 characters long) is displayed. It''s often used when you need to quickly get a list of commit hashes without displaying unnecessary information.'
        after: '[AI] The `git rev-list --after` command is a Git function that returns a list of commit hashes representing commits that are reached by following the specified refs and whose tree or parent commits have a timestamp greater than or equal to a given date. This command is often used in scripts to find and work with the most recent commits that meet certain criteria. The output of `git rev-list --after` is typically a list of commit hashes, which can be further processed using other Git commands.'
        all: '[AI] `git rev-list --all` is a Git command used to retrieve the list of commit hashes for every commit in the current repository, starting from the most recent one and working backwards towards the initial commit. The `--all` option tells Git to include commits from all branches and tags within the repository. The output is typically given as a list of commit hashes that can be further processed or used for other Git operations.'
        all-match: '[AI] `git rev-list --all-match` is a Git command used to find revisions that match a given regular expression in the commit messages. The `--all` option tells Git to search across all branches and refs, while `--match` takes the regex pattern. It outputs the list of hashes for the matching commits.'
        alternate-refs: '[AI] `git rev-list --alternate-refs` is a Git command used to list the commit hashes of all refs, including local and remote ones with alternate names. The `--alternate-refs` option makes Git include refs that track other repositories or branches. This can be useful for scripting or comparing the state of multiple branches or repositories.'
        ancestry-path: '[AI] `git rev-list --ancestry-path` is a Git command used to find the common ancestors of two or more commit hashes in a repository. It prints out the list of commits, starting from the most recent common ancestor and working backwards towards the root of the history tree. This information can be useful for various Git workflows and merging strategies, such as resolving merge conflicts or comparing different branches. The `--ancestry-path` option specifically requests that Git prints out only the commit hashes, rather than the full commit objects.'
        author: '[AI] The `git rev-list` command with the `--author` option is used to find commits in a Git repository that were authored by a specific author. The output is a list of commit hashes, each representing a commit meeting the given author criteria. This can be useful for various tasks like cherry-picking changes or investigating a series of related commits.'
        author-date-order: '[AI] `git rev-list` is a Git command used to list the commit hashes that match a given condition. The option `--author-date-order` sorts the output in the reverse chronological order based on both author date and then commit message. In other words, it shows the commits with the latest author date first.'
        basic-regexp: '[AI] `git rev-list --basic-regexp` is a Git command used to find commits that match a given regular expression pattern in their messages. The `--basic-regexp` option interprets the given pattern as a regex, allowing for more complex matching than simple string searches. This command returns the list of commit hashes that match the search criteria.'
        before: '[AI] `git rev-list --before` is a Git command used to find the commit hashes that come before a specified commit. The `--before` option followed by a commit or a date specifies the limit. It returns a list of commit hashes in reverse order, starting from the first commit before the specified one. This command is often used for scripting or data analysis purposes, and it does not affect the current branch or working directory.'
        bisect: '[AI] `git rev-list --bisect` is a Git command used for binary search-based bug fixing. It automates finding the commit that introduced a regression by performing a bisect operation. The command takes two arguments: the "good" and "bad" commits, where "good" is a commit known to not have the issue, and "bad" is a commit with the issue. Git then finds commits between these two and tests them one by one using the specified test command until it identifies the offending commit. The output displays the sequence of commits tested and the one that caused the regression.'
        bisect-all: '[AI] `git rev-list --bisect-all` is a Git command used for performing a binary search for the commit that introduced a bug or regression in a project''s history. The command initiates an automated bisect process, which runs through a series of intermediate commits between two known good commits to find the bad one. This can help developers quickly isolate and fix issues, as they no longer have to manually inspect each commit.'
        bisect-vars: '[AI] `git rev-list --bisect` is a Git command used to perform a binary search for a commit that introduced a bug or regression, based on test failures. The `--bisect-vars` option is an extension to this command which allows specifying custom variables and values that will be compared between the starting point and the current branch tip during the bisect process. This can help in isolating changes related to the problem more accurately by considering additional context or configuration differences between the commits being tested.'
        boundary: '[AI] The `git rev-list --boundary` command is a Git function that returns the commit hashes representing the boundaries of a continuous range of commits. It prints the commit hashes of the first and last commits in a given range, excluding any empty commits like merge commits with no new content. This command can be used to identify the specific commits marking the beginning and end of a series of changes in a Git repository.'
        branches: '[AI] `git rev-list --branches` is a Git command used to list the branches that match a given pattern, by taking the heads of those branches and printing their commit hashes. This command searches for branch names in refs/heads/ and prints only the branch names whose tips (latest commits) are reachable from the current HEAD commit. It does not switch to any branch or make the working directory a detached HEAD state. The output can be further processed using other Git commands, such as `xargs` for batch processing.'
        cherry: '[AI] `git rev-list --cherry` is a Git command used to compare two branches and show the commits that exist only in one of them. The command takes the output from a pair of branch references, usually in the format `<branch1>..<branch2>`, and displays the hashes of the unique commits found in `<branch1>` but not in `<branch2>`. It''s often used for identifying merge differences or tracking down cherry-picked commits.'
        cherry-mark: '[AI] `git rev-list --cherry-mark` is a Git command used to compare two separate branches or commits and display cherry-picked hunks, i.e., differences that can be cleanly applied with the `git cherry-pick` command. The output will list commits where some but not all changes can be cleanly applied, helping developers identify potential merge conflicts before attempting to integrate the branches.'
        cherry-pick: '[AI] `git rev-list --cherry-pick` is a Git command used to apply individual commits from one branch to another, keeping a record of each applied commit in new commits with "pick <hash>" messages. This can be useful for incorporating specific changes from one branch into another without merging the entire history. The `--cherry-pick` option interacts with the `git rebase` or `git cherry-pick` commands to apply each commit one at a time and resolve any conflicts that may arise.'
        children: '[AI] `git rev-list --children` is a Git command used to list the tree objects that are the children of a given commit object. The output displays the commit hash and the tree hashes of its child commits or trees in a recursive manner, ending at the rootmost tree objects (i.e., those with no children). It''s typically used for traversing commit history based on parent-child relationships.'
        commit-header: '[AI] `git rev-list --commit-header` is a Git command used to display the commit message of one or more commit hashes. The `--commit-header` option is used with the `rev-list` command, which by default only lists the commit hashes. By adding `--commit-header`, the output will include the first line of each commit message instead. For example, running `git rev-list --commit-header <commit-hash>` will display the commit message associated with the given hash.'
        committer: '[AI] `git rev-list --committer` is a Git command used to list the commit objects that match a given committer. The command takes a committer SHA1, email address or a regular expression as an argument and returns the list of commit hashes that were authored or committed by the specified committer. This can be useful for filtering commits for a specific developer during code analysis, debugging or version control tasks.'
        count: '[AI] `git rev-list --count` is a Git command that returns the number of commits in a given range. The command `--count` requests only the number of commits and not their identifiers or any other information. For example, `git rev-list --count <commit1>..<commit2>` will output the number of commits between `commit1` and `commit2`.'
        date: '[AI] `git rev-list --date` is a Git command used to list commits that match a given date or range of dates. The `--date` option filters commits based on their author or commit dates. When used without further arguments, it shows commits in the format "YYYY-MM-DD HH:MM:SS", which can be compared with the output of `git log --format=%ad`. This command is useful for querying Git repositories for specific historical data based on date ranges.'
        date-order: '[AI] `git rev-list --date-order` is a Git command used to list commit hashes in reverse chronological order, i.e., from newest to oldest. The `--date-order` option sorts the commits based on their author date or commit date, making it useful for displaying the commit history with the most recent commits first. This command doesn''t print any message or other information by default and only lists the commit hashes.'
        dense: '[AI] `git rev-list --dense` is a Git command used to list the committed hashes in a compact format. The `--dense` option displays only the commit hashes without any separators or extra information like author names or commit messages. It''s often used for scripting purposes, such as passing the output to other commands for further processing.'
        disk-usage: '[AI] `git rev-list --disk-usage` is a Git command used to display the disk usage of each commit in a repository. The `--disk-usage` option generates output in human-readable format with size information for each tree and blob object reached by the given commits, allowing users to identify large objects and potentially optimize their repository''s storage.'
        do-walk: '[AI] `git rev-list --do-walk` is a Git command used to traverse the committed history in a depth-first manner, printing out each commit object''s hash as it goes. It does not print any message or other metadata by default. The `--do-walk` option is passed to `rev-list` to enable this walking behavior.'
        encoding: '[AI] `git rev-list` is a Git command used to list the commit hashes that match a given condition. The option `--encoding` specifies the character encoding to be used when reading commit messages. This can be important when working with non-ASCII encodings in commit messages. If no encoding is specified, Git assumes UTF-8 by default.'
        exclude: '[AI] `git rev-list --exclude` is a Git command used to find commits that do not match a given list of commit hashes or regular expressions. The `--exclude` option specifies the list of hashes or regexes to exclude from the result. This command is often used in scripts and automated workflows for filtering specific commits based on certain criteria. For example, you can use it to find all commits that touch a particular file but exclude those commits that introduced merge conflicts.'
        exclude-first-parent-only: '[AI] `git rev-list --exclude-first-parent-only` is a Git command used to list the commit hashes that match a given set of criteria, but unlike regular `rev-list`, it doesn''t filter out commits with multiple parents. The `--exclude-first-parent-only` flag is used to include commits that have more than one parent, which is typically not shown in a standard `rev-list`. This command can be useful when working with complex merge histories or dealing with non-fast-forward merges.'
        exclude-hidden: '[AI] `git rev-list --exclude-hidden` is a Git command used to list the commit hashes that match a given condition, but excluding any commits with paths containing hidden files (files starting with a dot). For instance, it can be used in scripts or other commands to filter only visible commits. The `--exclude-hidden` option ensures hidden files and commits related to them are not included in the result.'
        exclude-promisor-objects: |-
            [AI] `git rev-list --exclude-commit-edges <commit1> <commit2>` is a Git command used to list the commit objects that are reachable from specified commits without including their parent commits. The `--exclude-promisor-objects` option adds an extra exclusion: it excludes any dangling commits, which are commits not reachable from any branch or mainline of development.

            In other words, this command lists only the common ancestor commit(s) between two specified commits and their descendants, excluding any commits that only connect to these branches with a single parent edge, as well as dangling commits that don't belong to any branch or mainline.
        expand-tabs: '[AI] `git rev-list --expand-tabs` is a Git command used to show a list of commit hashes in a tab-expanded format, with each commit hash followed by a TAB character instead of a space. This can be useful for scripting or automation tasks where you need to easily reference multiple commit hashes. The `--expand-tabs` option expands the tabs back into spaces when displaying the output in the terminal.'
        extended-regexp: |-
            [AI] `git rev-list --extended-regexp` is a Git command used to find commits in a repository that match a given regular expression pattern in their commit messages. The `--extended-regexp` option enables the use of extended regular expressions with this command.

            For instance, if you want to find all commits that contain the word "bugfix" or "issue", you can run:

            ```bash
            git rev-list --extended-regexp '(bugfix|issue)' HEAD
            ```

            This command will output a list of commit hashes for commits with messages containing either the words "bugfix" or "issue".
        filter: '[AI] `git rev-list --filter` is a Git command used to selectively filter the committed objects based on certain criteria. The `--filter` option allows you to apply various filters to the output of `git rev-list`. For instance, you can filter by parents (e.g., `--children-first`, `--parents-only`), by refs (e.g., `--stdin --`) or by specific hashes. This command is typically used in Git scripts and custom workflows to perform complex queries and analyses on your repository''s commit history.'
        filter-print-omitted: '[AI] `git rev-list --filter-print-omitted` is a Git command used to show only the commit hashes that are omitted (not printed) when using other `rev-list` filters such as `--parents-only`, `--ancestors-list`, or `--grep`. The flag `--filter-print-omitted` prints these omitted commits'' hashes to help trace the full commit history.'
        filter-provided-objects: |-
            [AI] `git rev-list --filter-provided-objects` is a Git command used to list the commit hashes that match the provided object names or SHA1 checksums. This command searches the local repository's reflog and alternative object stores (like dangling commits and prunes) for the specified objects, then displays their corresponding commit messages and parent commit hashes.

            This option is particularly useful when you want to find commits that introduced or removed specific files, or if you have a checksum of an object (e.g., a tree or commit), but don't remember the exact commit message or author information. By providing these objects as arguments, Git will return all commits that include them in their history.
        first-parent: '[AI] `git rev-list --first-parent` is a Git command used to list the first parent commit of a given commit, following only the first branch line (the mainline) in a commit graph. This command is useful when working with complex branching structures, where you may want to find the direct ancestors of a particular commit without considering merges or other detours. By specifying `--first-parent`, Git will limit the trace to the single branch leading to the commit, providing a simpler and more focused view of its history.'
        fixed-strings: '[AI] `git rev-list --fixed-strings` is a Git command used to find commits that introduce or remove specific text strings in the commit messages. The `--fixed-strings` option limits the search to exact matches, meaning it will only find commits with the exact specified string and ignore any similar strings that might be present in the commit message. This command returns the list of commit hashes associated with the commits containing the given fixed strings.'
        format: '[AI] `git rev-list --format` is a Git command used to list commit hashes that match certain criteria, with each line output in a custom format defined by the user. The `--format` option specifies how the output should be formatted. For example, `%h %s` would print each line as `<commit-hash> <commit-message>`. This command can be useful for automating tasks such as filtering commits based on specific criteria and generating custom reports.'
        full-history: '[AI] `git rev-list --full-history` is a Git command used to retrieve the commit history with all the commits'' full messages and parent commit hashes. The `--full-history` option includes the commits'' complete history, which is not the default behavior when using `git log`. This command does not print the output in a traditional, human-readable format but instead returns a list of commit hashes that can be used for further Git operations.'
        glob: '[AI] `git rev-list --glob` is a Git command used to find commits with message strings matching a given glob pattern. The `--rev-list` option is used to list commits, and the `--glob` option enables the use of shell-style globbing patterns. For example, `git rev-list --glob=''*commitMessagePattern*'' HEAD^3..HEAD` will return a list of hashes for commits with message containing ''commitMessagePattern''.'
        graph: '[AI] `git rev-list --graph` is a Git command used to display a graphical representation of the committed history in a given repository. The `--graph` option generates output that can be passed through filters like `dot` or `tikz` to produce a graph image. This command shows the branching points and merges in a tree format, helping users visualize the relationships between commits and understand complex commit histories.'
        grep: '[AI] `git rev-list --grep` is a Git command used to search for specific text in commit messages or file content within the committed changes. The `--grep` option searches for a given regular expression pattern, and the `rev-list` command lists the commits that match the search criteria. It returns the commit hashes of the matching commits. If no commit or branch is specified, it defaults to the current branch''s history.'
        grep-reflog: '[AI] `git rev-list --great-reflog` is a Git command used to search the reflog, which is a Git internal data structure used to record the history of a branch or a single commit. The command `--grep-reflog` is an optional argument that allows searching for a specific string in the messages of commits in the reflog instead of the commit hash. This command returns a list of the commits that contain the specified string in their messages.'
        header: '[AI] `git rev-list --header` is a Git command used to display the commit message of the most recent commit in a given list of commits. The `--header` option prints only the commit message and its parent commit hash for each commit in the list. If no commit list is provided, it defaults to the most recent commit in the current branch.'
        ignore-missing: '[AI] `git rev-list --ignore-missing` is a Git command used to find the revisions that match a given list of commit hashes or tags, while ignoring any commits that are missing (not present in the current repository). This can be useful when running scripts across multiple repositories where some may have commits that are not present in others. The `--ignore-missing` option allows the command to continue processing and report only on the commits that exist in all repositories.'
        in-commit-order: '[AI] `git rev-list --in-commit-order` is a Git command used to list commits in a specific order, which is the commit-history order or the reverse of the chronological order (i.e., from oldest to newest commit first). This command doesn''t print any message or output other than the list of hashes for the commits. The `--in-commit-order` option ensures that the output follows the parent-child relationships within the commit history, allowing you to process the commits in a specific order when writing scripts or working with Git data.'
        indexed-objects: '[AI] `git rev-list --indexed-objects` is a Git command used to list all the packed and dangling indexed objects in a local Git repository. Indexed objects refer to objects that are stored in a packed Git archive or in an unreachable state (dangling objects). This command is often used during Git repository maintenance, such as cleaning up unused objects or checking the integrity of pack files. The output shows the object''s hash, type, and size for each indexed object found.'
        invert-grep: '[AI] `git rev-list --invert-grep` is a Git command used to find commits that do not match a given text pattern in commit messages. The `--invert-grep` option inverts the matching of the given regular expression or string, meaning it returns commits whose messages do not contain the specified pattern. This command outputs a list of hash commit identifiers that match the search criteria.'
        left-only: '[AI] `git rev-list --left-only` is a Git command used to find the hashes of the last common ancestors between two or more branches or commits. The `--left-only` option returns only the hashes of the branch tips that are not reached by the given revisions, effectively showing the divergent branches or commits. This command does not show any common ancestors and is useful for comparing and managing branch merges or resolving merge conflicts.'
        left-right: '[AI] `git rev-list --left-right` is a Git command used to display a left-aligned or right-aligned comparison of two committing lines. The `--left-right` option causes the output to be formatted with the left column aligned on the commit messages and the right column aligned on the corresponding commit hashes. This can be helpful for visually comparing two branches or commits in Git.'
        max-age: '[AI] `git rev-list --max-age` is a Git command used to find commits that were made within a specified time limit. The `--max-age` option followed by a number or a date expression, returns the list of hashes for the most recent commits that match the given age constraint. For example, `git rev-list --max-age=7d` will return the hashes of the commits made in the last 7 days. This command can be used to filter commits for various purposes such as creating patches or performing analysis.'
        max-count: '[AI] `git rev-list --max-count=N` is a Git command used to find the last N commit hashes in the current branch or any specified range. This command lists the commits starting from the most recent, going backwards, until it reaches the first N commits. It does not include the tip of the branch or the named ref in the output. For example, `git rev-list --max-count=3` will return the hash of the last three commits in the current branch.'
        max-parents: '[AI] `git rev-list --max-parents=n` is a Git command used to find the common ancestors of a specified number `n` of commits, starting from two given commits. The output will be a list of the commit hashes representing those common ancestors. This command can help in finding merge bases or last common ancestors between multiple branches or commits in a Git repository.'
        merge: |-
            [AI] `git rev-list --merge` is not a valid Git command. The `git rev-list` command is used to list the commits that match given criteria, and it doesn't support a "--merge" option. If you meant to ask about merge-related Git commands, here are some commonly used ones:

            * `git merge`: Merges changes from one branch into another.
            * `git mergetool`: Opens a three-way merge tool to help resolve merge conflicts.
            * `git rebase --merge`: Performs an interactive rebase that allows merging multiple branches at once.
        merges: '[AI] `git rev-list --merges` is a Git command used to list the hash ids of the commit nodes that mark the tips of branches where a merge commit occurred. In other words, it shows the commits in the history where a Git branch was merged into another Git branch, resulting in a merge commit. This command can be useful when scripting or querying Git history for merge information.'
        min-age: '[AI] `git rev-list --min-age` is a Git command used to find commits that are older than a specified age. The `--min-age` option followed by an argument in the format `<number>[<time unit>]`, specifies the minimum age for the commits to be selected. For example, `--min-age 5d` would select commits older than 5 days. The command outputs a list of commit hashes that match the given criteria.'
        min-parents: '[AI] `git rev-list --min-parents=n` is a Git command used to find commits that have at least `n` parent commits. In other words, it lists commits that are reachable from the current branch or tag but are not the tip of an branches, and have more than `n-1` parents. This can be useful in various scenarios such as finding merge commits or checking out a specific point in a commit history where multiple lines of development were merged together.'
        missing: '[AI] `git rev-list --missing` is a Git command used to find commits that are not part of a given list, usually represented by a set of commit hashes or branches. This command generates a list of missing commits between the current branch and each specified reference. The output displays only the SHA1 commit hashes of the missing commits. This can be helpful in identifying commits that were merged into other branches but not yet pulled into the current one.'
        no-abbrev-commit: '[AI] `git rev-list --no-abbrev-commit` is a Git command used to list commit hashes that match a given set of criteria, but without abbreviating the commit hashes. The `--no-abbrev-commit` option ensures that the full 40-character hash of each commit is displayed instead of the shortened version (usually just the first 7 characters). This can be useful when comparing or searching for commits with identical short hashes.'
        no-commit-header: '[AI] `git rev-list --no-commit-message` is a Git command used to list the commit hashes that match a given criteria, such as a range of commits or a tag. The `--no-commit-header` option tells Git not to show the commit messages along with the commit hashes in the output. This can be useful when you want to use the output of this command as input for another Git command, and don''t need the commit messages at that moment.'
        no-expand-tabs: '[AI] `git rev-list --no-expand-tabs` is a Git command used to list the commit hashes that match a given argument (like a range or a specific hash), but with a notable option: `--no-expand-tabs`. This option prevents Git from expanding tabs in commit messages into spaces, which could affect how the output looks when processed by scripts or other tools. It''s particularly useful when dealing with Git repositories that may contain tab-spaced commit messages and ensuring consistent formatting across different systems.'
        no-filter: '[AI] `git rev-list --no-filter` is a Git command used to list the commit hashes that match a given set of criteria. The `--no-filter` option tells Git not to apply any filters or preprocessing to the output, meaning it will simply print each commit hash on its own line. For example, `git rev-list HEAD^2..HEAD --no-filter` would print the hashes of all commits that are reachable from `HEAD` but not from `HEAD^2`.'
        no-max-parents: '[AI] `git rev-list --no-max-parents` is a Git command used to list the commit hashes that match a given condition without applying a maximum limit to the number of parents each commit can have. It''s commonly used when working with complex merges and multi-branch histories where commits may have more than one parent due to merge conflicts being resolved with custom three-way merges or other non-fast-forward merging strategies. The `--no-max-parents` option instructs Git to not limit the search result based on the maximum number of parents a commit can have, making it helpful for finding commits with more intricate merge histories.'
        no-merges: '[AI] `git rev-list --no-merges` is a Git command used to list the commit hashes that are reachable from the current branch or a specified commit, but only those commits that are not merges. In other words, it returns the list of parent commits in a project''s history, excluding any merge commits. This can be useful when you want to find and compare the work of an individual developer before their changes were merged into the main branch.'
        no-min-parents: '[AI] `git rev-list --no-min-parents` is a Git command used to find the commit hashes that match a given pattern or set of commits, without enforcing the usual rule that a merge commit must have at least two parent commits. This can be useful for finding commits that are not typical merge commits, such as commits that were created during a rebase operation where fast-forward merges were used instead of creating new merge commits. The output is a list of commit hashes, separated by newlines.'
        no-object-names: '[AI] `git rev-list --no-object-names` is a Git command that lists the commit hashes in reverse chronological order up to a given branch tip or tag, without displaying the object names. This means it only shows the raw hash values of each commit. It''s often used in scripts and automated workflows where you just need to access the commit hashes themselves.'
        no-walk: '[AI] `git rev-list --no-walk` is a Git command used to find the list of commits that match a given hash or set of hashes in the repository, without traversing the commit history. This means it will only return the exact commits specified and won''t follow any parent pointers. It is particularly useful when you want to perform an operation on a specific set of commits without including their ancestors.'
        not: '[AI] `git rev-list --not` is a Git command used to find the commits that are not part of a given set. The `--not` option inverts the matching of commit hashes or refs. When followed by a commit hash, branch name, or tag, it returns the commits that came before or differ from the specified commit. It is often used with other Git commands like `git log` and `git cherry-pick` to exclude certain commits from the output.'
        object-names: '[AI] `git rev-list --object-names` is a Git command that returns a list of unique object names (hashes) in the repository for the given commit(s). The `--object-names` option instructs Git to only print the object names instead of the usual output which includes the type and size information. The `rev-list` command with no specific argument by default shows the list of objects from the HEAD commit up to the root of the history (i.e., the entire history). When you provide a range or specific commit hash, it will only print the object names for those commits.'
        objects: '[AI] `git rev-list --objects` is a Git command used to show the list of objects (commits, trees, blobs) that match a given revision or a range of revisions. The `--objects` option requests only the object names and their sizes, without showing any commit messages or other metadata. The command `git rev-list` followed by one or more revisions specifies the set of objects to list. For example, `git rev-list HEAD~3` shows the object names for the three commits before the current HEAD commit.'
        objects-edge: '[AI] `git rev-list --objects-edge` is a Git command used to find the last commit object in a given history. The `--objects-edge` option causes Git to print only the last commit object, represented by its hash, as output. The command searches for this object starting from the specified branch or commit, and outputs just the hash of the most recent commit found.'
        objects-edge-aggressive: |-
            [AI] `git rev-list --objects-edge-aggressive` is a Git command used to find the hash objects that represent the tips of branches or commits, with an aggressive approach to handling dangling and unreachable objects.

            When you run this command without any specific commit or branch mention, it will list the hashes of the last commit on each branch in your current repository. The `--objects-edge-aggressive` option is used to include only reachable objects (commits and their associated files) and exclude unreachable or dangling objects that no longer have any connections to the main branches or commits.

            This command is often used when you need to perform a comparison or analysis based on the most recent commits in your repository, ensuring that only the relevant and reachable data is considered.
        oneline: '[AI] `git rev-list --oneline` is a Git command used to display the list of committed hashes in a compact format called "short form" or "telescopic" mode. The "--oneline" option causes Git to show each commit message in a single line, preceded by its corresponding hash and the parent commit(s) hash(es), if any. This command allows you to quickly review the list of commits and their messages without having to run `git log` or open multiple separate terminal windows for different branches.'
        parents: '[AI] `git rev-list --parents` is a Git command used to retrieve the parent commits of a given commit. It prints out the hash values of the parent commits in the order they appear in the commit tree. This command can be useful when you want to trace the commit history or analyze the relationships between different commits in a Git repository. The output is typically used as input for other Git commands, such as `git format-prms` or `git cherry-pick`, to perform various operations based on the parent commit information.'
        perl-regexp: '[AI] `git rev-list --perl-regexp` is a Git command used to find commits that match a given Perl regular expression pattern in their messages. The `rev-list` command lists the commit hashes that match a given condition. The `--perl-regexp` option allows specifying the condition as a Perl regular expression. For example, `git rev-list --perl-regexp=''/Fix(?:\s|$)[\w.]+\/\d+''` would find commits with messages ending in a string like "Fix/something/number".'
        pretty: '[AI] `git rev-list --pretty` is a Git command used to show the commit messages or other metadata of commits in a given range, separated by a specified delimiter. The `--pretty` option allows customizing the output format. For instance, you can use `--oneline`, `%s` for the commit message or any other custom format as defined in the Git documentation. It returns the list of commits as standard output, which can be further processed using other Git commands or tools.'
        progress: '[AI] `git rev-list --progress` is a Git command used to display the progress of a refusal to merge (also known as a "rebase in progress") while performing an interactive rebase with the `--interactive` or `--interactive-rebase` option. It shows the current and next commits being rebased, along with their SHA1 hashes and commit messages. This command helps keep track of the rebasing process and provides useful information for resolving any conflicts that may arise during the rebase.'
        quiet: '[AI] `git rev-list --quiet` is a Git command used to list the commit hashes that match a given condition, such as a range or a tag. The `--quiet` option makes the command output only the commit hashes, without any other messages. In other words, it returns a list of commit hashes in quiet mode without any extra information.'
        reflog: |-
            [AI] `git rev-list --reflog` is a Git command that retrieves the list of commuted (i.e., reachable) revisions from the reflog, which is Git's internal record of all committed and discarded changes for a given branch or reference.

            The `--reflog` option specifically tells Git to search in the reflog instead of the normal commit history. This can be useful when you want to recover lost commits that are not present in the current branch but still exist in the reflog.

            In summary, this command allows you to inspect and manipulate the history recorded in a Git reflog.
        regexp-ignore-case: '[AI] `git rev-list --regexp-ignore-case` is a Git command used to find commits that match a given regular expression pattern in commit messages, ignoring case. The `--regexp-ignore-case` option makes the search case insensitive. For instance, `git rev-list --regexp-ignore-case ''error''` would return hashes of commits with messages containing the word "error" (ignoring case). This command returns a list of commit hashes and can be used in other Git commands like `git checkout`, `git cherry-pick`, or `git rebase`.'
        relative-date: '[AI] `git rev-list --relative-date` is a Git command used to list commits with a given relative date. The `--rev-list` option is used to perform various revision-related tasks, and the `--relative-date` option filters commits based on their age. For example, `git rev-list HEAD --relative-date="1 week ago"` would display a list of commits made in the last week. The relative date can also be specified using various shorthands like "yesterday", "last month", or specific dates and times with time zones.'
        remotes: '[AI] `git rev-list --remotes` is a Git command used to list the committed hashes of branches or tags in remote repositories. The "--remotes" option tells Git to only search for commits that exist on the remote repositories and not on the local one. This command is useful when you want to check the history of a specific branch or tag in a remote repository without fetching the entire repository. It returns a list of commit hashes, allowing you to further process this information with other Git commands, such as merging or cherry-picking changes.'
        remove-empty: '[AI] `git rev-list --remove-empty` is a Git command that lists all commit hashes in a given range, excluding any empty commits (i.e., commits with an empty message). The `--remove-empty` option filters out any empty commits from the output. This command is often used when you want to perform an operation on a subset of commits that have non-empty commit messages.'
        reverse: '[AI] `git rev-list --reverse` is a Git command used to list the commit hashes in reverse order, starting from the most recent commit and ending at the oldest one. The `--reverse` option reverses the normal output order. It''s often used with other commands like `git log` or `gitk` for viewing commits in a specific order or format.'
        right-only: '[AI] `git rev-list --right-only` is a Git command used to retrieve the last common ancestor commit hash of two or more branch tips, and then print only the commits on the left (first) branch that are not descended from that common ancestor. In other words, it shows the unique commits that exist in one branch but not in another. This can be useful for finding and comparing changes between branches that have diverged but still share some common history.'
        show-linear-break: '[AI] `git rev-list --show-linear-break` is a Git command used to find the first common ancestor of two branches or commits, and then print only the commits on the branch or history that leads to the tip of the branch or commit, excluding any merge commits. The `--show-linear-break` option specifically displays a "LINARITY BREAK" message once the first common ancestor is reached, indicating the output after this point represents the linear history leading up to the tip. This command can be helpful when comparing branches or commits with complex merge histories to focus on their linear development.'
        show-pulls: '[AI] `git rev-list --show-pulls` is a Git command used to display a list of merge commits, along with the corresponding pull requests or merges from other branches. This command searches the Git history for merge commits and outputs their commit messages, the branch or remote that was merged, and the number of introduced new commits. It''s an effective tool for reviewing the impact of various merge commits within a project.'
        show-signature: '[AI] `git rev-list --show-signature` is a Git command used to list commit objects in a repository, showing only their signatures which include author and committer names, email addresses, and timestamps. This command does not display the message or any other details associated with each commit. It''s often used for scripting and automation purposes where you want to compare commit signatures for verification or auditing tasks.'
        simplify-by-decoration: '[AI] `git rev-list --simplify-by-decoration` is a Git command used to simplify the output of a rev-list by replacing branch names with their corresponding branch tips. When you run `git rev-list` without any options, it will list out the commit hashes in reverse chronological order. However, when you add `--simplify-by-decoration`, Git will replace the branch names mentioned in the command with the tip commits of those branches. This can be useful when dealing with complex histories involving multiple branches and merges to make the output more readable.'
        simplify-merges: '[AI] `git rev-list --simplify-merges` is a Git command used to simplify the output of a revision list by collapsing merge commits into their parent commits, showing only the unique merge bases. It''s often used in scripts or other automation tasks for more concise and clearer representation of commit history, particularly when dealing with complex merging scenarios.'
        since: '[AI] `git rev-list --since` is a Git command used to find commits that match a specific criteria, in this case, commits that were made after a certain point in time. The `--since` option follows the format `<date>`, where `<date>` can be specified as an absolute date or a relative period. For example, `git rev-list --since=1 week ago` would return a list of commits made within the last week. This command returns a list of commit hashes and is typically used with other Git commands like `git log`, `git cherry-pick`, or `git rebase` to manipulate the Git history based on the selected commits.'
        since-as-filter: '[AI] `git rev-list --since-as-filter` is a Git command used to find commits that match a specific filter condition based on their author date. The `--since-as-filter` option allows you to provide a date in the format of an RFC-3339 or Git-specific relative time expression, which defines the minimum commit age for the search. The command returns a list of commit hashes that match the filter condition.'
        single-worktree: '[AI] `git rev-list --single-worktree` is a Git command used to list commit hashes that match a given argument, such as a branch or tag name. The `--single-worktree` option ensures that the command modifies the files in only one working directory. This means that any checked out files from the commits will be updated in the current worktree and not create new ones elsewhere. It is useful when working on multiple repositories that share a common history and you want to update the files in only one of them.'
        skip: '[AI] `git rev-list --skip` is a Git command used to skip certain number of parents when traversing the commit history. When you run `git rev-list` followed by `--skip` option, it takes an argument that specifies the number of parent commits to be skipped. This command returns the list of commits that are reachable from the specified commit but have more than the given number of parents skipped. For example, if you run `git rev-list --skip=1 <commit>`, it will return the list of commits that have only one parent and are descendants of the given commit with more than one parent.'
        sparse: '[AI] `git rev-list --sparse` is a Git command used to list hashes of commits that match a given set of filters. The `--sparse` option specifically tells Git to only print the commit hashes for commits that affect specific files or directories within a repository, rather than printing all matching commits. This can be useful for analyzing the history of changes in those specific areas.'
        stdin: '[AI] `git rev-list --stdin` is a Git command used to find the list of commit hashes based on the input given to it through standard input (stdin). The command reads one commit hash at a time from stdin and returns the list of commits reachable from those given hashes. It does not print the messages or other details for each commit, only their hashes. This can be useful for scripts that need to process Git commits programmatically.'
        tags: '[AI] `git rev-list --tags` is a Git command used to list all tag objects in a repository, showing only the commit hashes associated with each tag. The command searches for tags starting from the current HEAD commit and goes backwards through history. By default, it will show up to 10 tags per page, but you can use options like `--max-count` or pagination commands (e.g., `--skip` and `--since`) to navigate through the list of tags.'
        timestamp: '[AI] The `git rev-list --timestamp` command is a Git utility used to list commits with a specified timestamp. It takes one or more commit hashes or branch names as arguments, and it outputs a list of those commits along with their timestamps. The `--timestamp` option formats the output to include only the commit timestamps, in the format `YYYY-MM-DD HH:MM:SS`, making it easier for further processing or analysis.'
        topo-order: '[AI] `git rev-list --topo-order` is a Git command that returns a list of commit hashes in topological order, which means the commits are listed with their parent-child relationships preserved. This is useful when you need to process or analyze commits based on their relationship to each other, such as computing differences between branches or finding merge conflicts. The output can be used with other Git commands, like `git format-prms` or `git apply`, to perform various tasks.'
        unpacked: '[AI] `git rev-list --unpacked` is a Git command used to show the list of commits that match a given reference, such as a branch or a commit hash. The `--unpacked` option makes Git display each committed file with its path and the commit hash that introduced it. It''s useful for scripting purposes and can help identify which files were added, modified, or deleted between different commits.'
        until: '[AI] `git rev-list --until` is a Git command used to find the earliest commit that matches a given condition or tree-ish, before which all commits are considered. The `--until` option specifies a reference (a branch name, tag, or commit hash) or a date. For example, `git rev-list --until=3days-ago` would return the commit hash of the commit that occurred 3 days ago. This command returns a list of commits, and by default it will print only their hashes. If you add the `--max-count=1` option, it will print only the hash of the most recent matching commit.'
        use-bitmap-index: '[AI] `git rev-list --use-bitmap-index` is a Git command used to perform a fast, bitmap-based revision lookup. This command generates and uses a bitmap index for efficiently listing all the commits that match given criteria, such as being in a particular branch or having specific parents. By using this bitmap index instead of iterating through the full commit history, it significantly speeds up the revision lookup process, especially when dealing with large repositories.'
        walk-reflogs: '[AI] `git rev-list --walk-reflogs` is a Git command used to find the committed history of refs (branches or tags) with their antecedents reaching back to the first commit, showing each commit message and the corresponding SHA-1 checksums in reverse chronological order. It follows the refs'' history, starting from the current tip, using `--follow` or `--max-count=<n>`, and prints each commit object''s SHA-1 and message. This command is useful when you need to traverse the reflog for a particular branch or tag, looking for specific commits.'
