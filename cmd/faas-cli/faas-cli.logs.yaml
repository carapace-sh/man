# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: logs
description: Fetch logs for a functions
flags:
    --instance: print the function instance name/id
    --lines=: number of recent log lines file to display. Defaults to -1, unlimited if <=0
    --name: print the function name
    --since-time=: include logs since the given timestamp (RFC3339)
    --since=: return logs newer than a relative duration like 5s
    --time-format=: string format for the timestamp, any value go time format string is allowed, empty will not print the timestamp
    --tls-no-verify: Disable TLS validation
    -g, --gateway=: Gateway URL starting with http(s)://
    -k, --token=: Pass a JWT token to use instead of basic auth
    -n, --namespace=: Namespace of the function
    -o, --output=: output logs as (plain|keyvalue|json), JSON includes all available keys
    -t, --tail: tail logs and continue printing new logs until the end of the request, up to 30s
documentation:
    command: '[AI] `faas-cli logs` is a command from FaaS (Function-as-a-Service) CLI tool used to fetch and display the output logs of a deployed function. It helps in debugging and monitoring the execution of functions by showing the standard output and error streams generated during runtime.'
    flag:
        gateway: '[AI] The `faas-cli logs --gateway` command is used with the FaaS (Function-as-a-Service) CLI tool to retrieve the logs of a deployed function, specifically from the associated API gateway. This command helps developers troubleshoot and analyze the output of their serverless functions by displaying the relevant log messages. It interacts with the underlying infrastructure (API gateway in this case) to access the logs, making it an essential tool for monitoring and debugging FaaS applications.'
        instance: '[AI] The `faas-cli logs --instance` command is used with the FaaS (Function-as-a-Service) CLI tool to retrieve the logs associated with a specific instance of a function deployed using FaaS. The command takes an argument, which is the name or ID of the function instance. By default, the latest log entries are displayed. If additional filtering or formatting options are needed, those can be specified using flags or arguments alongside the command.'
        lines: '[AI] The `faas-cli logs` command is a tool provided by FaaS (Function-as-a-Service) platforms like OpenFaaS and others, to retrieve the output logs of a specific function execution. The `--lines` flag specifies that only the last N lines of the log output should be displayed. For instance, using `faas-cli logs --lines 10 <function-name>` would show the last 10 lines of the log output for the specified function.'
        name: '[AI] `faas-cli logs --name` is a command used in FaaS (Function-as-a-Service) development with the Faas-cli tool. This command retrieves and displays the logs associated with a specific function, identified by its name.'
        namespace: '[AI] `faas-cli logs` is a command from FaaS (Function as a Service) CLI tool. The `--namespace` option is used to filter logs based on a specific Kubernetes namespace. This means that only the logs generated by functions in the specified namespace will be displayed when using this command.'
        output: |-
            [AI] `faas-cli logs --output` is a command used with the FaaS (Function-as-a-Service) CLI tool to retrieve the logs of a specific function execution. The `--output` option specifies how the output should be displayed:

            * `json`: Outputs the logs in JSON format. This can be useful for processing log data programmatically.
            * `text` (default): Displays the logs as plain text, one line after another, making it easier to read and understand.

            Using this command allows developers to inspect and debug their serverless functions by accessing their execution logs.
        since: '[AI] `faas-cli logs --since` is a command provided by the FaaS CLI (Function as a Service Command Line Interface) tool, used to retrieve the logs of a specific function executed within the last specified duration. The `--since` flag followed by a time value in the format "YYYY-MM-DD HH:MM:SS" or relative time values like "1h" or "2d", allows filtering logs only from that point forward, helping to isolate and analyze specific issues or events in your serverless functions.'
        since-time: '[AI] `faas-cli logs --since-time` is a command used in FaaS (Function as a Service) platforms, specifically with the FaaS CLI tool. This command is used to fetch the logs of a particular function that was executed after a specified time. The `--since-time` option followed by a date or duration allows filtering the logs to only show the ones generated since the provided time. It helps in debugging and monitoring the functions'' execution in real-time or post-execution.'
        tail: '[AI] `faas-cli logs --tail` is a command used in Faas (Function as a Service) technology to view real-time logs of the most recent execution of a specific function. The `--tail` option displays only the latest log entries, making it useful for monitoring and troubleshooting in near real-time.'
        time-format: '[AI] The `faas-cli logs` command is a tool provided by FaaS (Function-as-a-Service) platforms like OpenFaaS and Faasd, to view the output logs of executed functions. The option `--time-format` allows users to customize the format of timestamp displayed in log output. It takes a Go layout string as an argument, defining how the time should be formatted when it is printed. For example, "--time-format=2006-01-02 15:04:05" will display timestamps as "YYYY-MM-DD HH:MM:SS".'
        tls-no-verify: '[AI] The `faas-cli logs --tls-no-verify` command is used with the FaaS-CLI (Function as a Service Command Line Interface) tool to retrieve logs from a FaaS (Function as a Service) provider, such as OpenFaas or OpenWhisk. The `--tls-no-verify` flag disables TLS certificate verification during the connection, which can be useful in certain situations where you trust the SSL certificate of the provider but cannot access it for validation. However, using this option involves some security risks, as it bypasses the standard security checks and allows connecting to potentially malicious servers with fake certificates. Therefore, it should be used only when necessary and with caution.'
        token: '[AI] The `faas-cli logs --token` command is used with the FaaS (Function-as-a-Service) CLI tool to retrieve the logs of a specific function deployment. The `--token` option is required and represents an authentication token for accessing the FaaS platform''s API, which is necessary to securely fetch the logs. The command retrieves the logs since the last stream, providing useful information about the execution of the function.'
