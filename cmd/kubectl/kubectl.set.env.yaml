# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N
description: Update environment variables on a pod template
flags:
    --all: If true, select all resources in the namespace of the specified resource types
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --from=: The name of a resource from which to inject environment variables
    --keys*=: Comma-separated list of keys to import from specified resource
    --list: If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.
    --local: If true, set env will NOT contact api-server but run locally.
    --overwrite: If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment.
    --prefix=: Prefix to append to variable names
    --resolve: If true, show secret or configmap references when listing variables
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -c, --containers=: The names of containers in the selected pod templates to change - may use wildcards
    -e, --env*=: Specify a key-value pair for an environment variable to set into each container.
    -f, --filename*=: Filename, directory, or URL to files the resource to update the env
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl set env` is a command used with Kubernetes to update the environment variables of a running Pod or Deployment. The syntax is `kubectl set env <pod-or-deployment-name> --add=<ENV_VAR_NAME>=<ENV_VAR_VALUE> [--overwrite]`. The `--add` flag adds a new environment variable, while the optional `--overwrite` flag updates an existing variable with a new value. This command does not create or delete any resources, it only modifies their configuration in place.'
    flag:
        all: '[AI] `kubectl set env --all` is a command used in Kubernetes to update the environment variables of all running pods in a specific namespace with a given key-value pair. The `--all` flag signifies that this modification will be applied to every pod under the specified namespace. It''s an effective way to propagate configuration changes across multiple pods without having to edit each individual pod''s configuration file.'
        allow-missing-template-keys: '[AI] `kubectl set env --allow-missing-template-keys` is a command used with Kubernetes'' `kubectl` tool to update the environment variables for a running Pod or Container without checking if all specified keys exist in the current configuration file or template. By using the `--allow-missing-template-keys` flag, any missing keys will be ignored during the update process, allowing you to set or modify only the desired environment variables while leaving others untouched. This can be useful when making incremental updates without requiring a complete overhaul of the configuration file.'
        containers: |-
            [AI] `kubectl set env` is a command used with the Kubernetes command-line tool, `kubectl`. This command allows you to update the environment variables for containers in a running pod. The `--containers` option specifies that only the environment variables of the specified container(s) should be updated, rather than all containers in the pod.

            For example, `kubectl set env --container=my-container --name=MY_VAR --value=new-value <pod-name>`. This command updates the `MY_VAR` environment variable to `new-value` for the container named `my-container` in the pod with name `<pod-name>`.
        dry-run: '[AI] `kubectl set env --dry-run` is a command used in Kubernetes to simulate the effect of modifying the environment variables of a running pod or deployment without actually applying the changes. The `--dry-run` flag outputs the YAML manifest that would be applied if the command were run without the flag. This allows you to review and understand the proposed changes before making them persistent in your cluster.'
        env: '[AI] `kubectl set env` is a command used with Kubernetes to update environment variables for a specific pod or deployment. The `--env` flag specifies the name and value of the new environment variable to be set. For example, `kubectl set env deployment/my-app NAME=newValue`. This command modifies the running configuration of the specified Kubernetes object without changing its definition in the underlying Kubernetes manifest file.'
        field-manager: |-
            [AI] `kubectl set env` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows you to update the environment variables of a running Kubernetes Pod or Deployment. The `--field-manager` flag is an optional argument that specifies the strategy for updating the fields in the resource manifest.

            By default, `kubectl set env` performs an "in-place" update, meaning it updates the existing resource directly without creating a new version of the resource. However, when using the `--field-manager` flag, you can choose to use either "FieldStickers" or "DriftDetection" strategies for managing the fields in your manifest files.

            The "FieldStickers" strategy marks the fields that should be updated with a label, making it easier to identify and update specific fields during syncing or rolling updates. The "DriftDetection" strategy, on the other hand, checks for differences between the desired state and the actual state of the resource and applies updates only when necessary.

            In summary, `kubectl set env --field-manager` is a command to update environment variables in Kubernetes resources with optional strategies for managing fields in the manifest files: FieldStickers or DriftDetection.
        filename: '[AI] `kubectl set env` is a command used with the Kubernetes command-line tool (kubectl) to update environment variables for a running Kubernetes Pod or Container. The `--filename` flag specifies the path to the file that contains the new environment variable configurations. This command rewrites the existing YAML or JSON configuration files, applying the new environment variables before updating the cluster. It is often used for making non-destructive changes without having to create a new resource version, and can be helpful in testing new configurations or adjusting running applications without redeploying.'
        from: '[AI] `kubectl set env` is a command used to update environment variables for a running Kubernetes Pod or Deployment. The `--from` flag specifies where to get the new value from: either an existing secret, config map, or literal values in the command line. For example, `kubectl set env DEPLOYMENT/my-app --from=SECRET/my-secret --key=MY_ENV_VAR --to=new-value` updates the environment variable `MY_ENV_VAR` of deployment `my-app` with the value `new-value` from secret `my-secret`.'
        keys: '[AI] `kubectl set env` is a command used with Kubernetes to update environment variables for a running Pod or Deployment. The `--keys` flag specifies the specific environment variable keys to be updated. For example, `kubectl set env deployment/my-app --keys myvar1,myvar2=value` would update the ''myvar1'' and ''myvar2'' environment variables in the ''my-app'' deployment.'
        kustomize: '[AI] `kubectl set env --kustomize` is a command used with Kubernetes'' `kubectl` tool to modify environment variables for existing Kubernetes resources, such as Pods or Deployments, using Kustomize customization files. The `--kustomize` flag instructs `kubectl` to apply the configuration changes defined in a Kustomize file instead of directly specifying the new environment variable values. This approach allows for more complex and modular updates, as well as easier versioning and management of the configuration changes.'
        list: '[AI] `kubectl set env --list` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command displays a list of environment variables currently defined in all the objects in the current namespace. The `--list` option is used to output the information in a tabular format, making it easier to read and manage. It does not modify or set any specific environment variable, but only lists the existing ones for the user''s reference.'
        local: '[AI] `kubectl set env --local` is a command used with Kubernetes'' `kubectl` tool to update environment variables for a specific Pod or Container in a local Kubeconfig file without affecting the original definition in the cluster. The `--local` flag indicates that only the local copy of the resource will be modified, while the original deployment or StatefulSet in the cluster remains unchanged. This can be useful for testing changes to environment variables without immediately applying them to the production environment.'
        output: '[AI] `kubectl set env` is a command used with Kubernetes to modify the environment variables of a running Pod or Deployment. The `--output` flag specifies the format for the output of the command, which can be `json`, `yaml`, or `wide`. For example, `kubectl set env DEPLOYMENT/NAME --env="VAR1=value" --output json` sets the environment variable VAR1 to value in the specified deployment and outputs the result in JSON format.'
        overwrite: '[AI] `kubectl set env --overwrite` is a command used in Kubernetes to update the environment variables of a running container. The `--overwrite` flag ensures that any existing environment variable with the same name will be replaced, rather than being added as a new variable. This can be useful when you need to modify an existing environment variable and ensure that only your desired value takes effect.'
        prefix: '[AI] `kubectl set env` is a command used with Kubernetes to update the environment variables of a running pod or deployment. The `--prefix` flag modifies the behavior of this command by only updating the environment variables that have the specified prefix. For example, if you use `--prefix=MY_`, it will update only the environment variables named MY\_VAR1, MY\_VAR2, etc. This can be useful when you want to modify a subset of environment variables without affecting others.'
        recursive: '[AI] `kubectl set env --recursive` is a command used with the Kubernetes command-line tool (kubectl) to update environment variables for one or more Kubernetes objects, such as pods or deployments, recursively. This means that not only will the specified environment variable be updated in the object being directly targeted, but also in any child objects it may have. For example, if a deployment has multiple replicas and you want to update an environment variable across all of them, using `--recursive` will save you from updating each individual replica manually.'
        resolve: '[AI] `kubectl set env --resolve` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command modifies the environment variables of a running container or pod by updating its configuration in the Kubernetes cluster. The `--resolve` flag ensures that the command uses the current state of the cluster to update the environment variables, rather than using the last applied configuration. This can help ensure that the changes are applied to all replicas and that there is no inconsistency between the desired and actual states.'
        selector: |-
            [AI] `kubectl set env` is a command used with the Kubernetes command-line tool (kubectl) to update the environment variables for one or more containers in a running Kubernetes Pod, based on their selectors. The `--selector` option specifies the label selector to identify which Pod(s) to modify. For example:

            ```sh
            $ kubectl set env <pod-name> --selector=app=my-app --from-file=configmap/my-config.yaml --env-key=KEY1=VALUE1 --env-key=KEY2=VALUE2
            ```

            This command updates the environment variables `KEY1` and `KEY2` for all containers in Pods with label 'app=my-app'. The new values are loaded from a local YAML file, `my-config.yaml`, using the `--from-file` option.
        show-managed-fields: |-
            [AI] The `kubectl set env` command is used to update the environment variables for a Kubernetes resource, such as a Pod or Deployment. The `--show-managed-fields` flag is an optional argument that provides additional information about the changes being made to the resource.

            When you run `kubectl set env <resource> --env=VAR_NAME=VAR_VALUE --show-managed-fields`, Kubernetes applies the new environment variable configuration and returns a YAML diff showing the changes it made to manage the fields of the resource manifest, including the added, modified, or deleted fields. This flag helps you understand exactly what Kubectl is doing behind the scenes when making updates, which can be helpful for debugging and auditing purposes.
        template: '[AI] `kubectl set env --template` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows you to update environment variables for a Kubernetes resource, such as a Deployment or a Pod, by using a custom template. The `--template` flag instructs `kubectl` to apply the defined template to generate the new value for the environment variable. For instance, it might be used to inject configuration values based on specific conditions or to reference other Kubernetes objects'' properties in the template.'
