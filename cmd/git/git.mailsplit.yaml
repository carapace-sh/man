# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mailsplit
description: Simple UNIX mbox splitter program
group: low-level helper
flags:
    --keep-cr: "Do not remove \r from lines ending with \r\n"
    --mboxrd: Input is of the "mboxrd" format and "^>+From " line escaping is reversed
    -b: If any file doesnâ€™t begin with a From line, assume it is a single mail message
    -d=: Precision for the generated filenames
    -f=: Skip the first <nn> numbers
    -o=: Directory in which to place the individual messages
documentation:
    command: '[AI] `git mailsplit` is not a built-in Git command, but rather a script often used in conjunction with Git for managing emails as Git repositories. Its primary function is to extract the patch files from MIME-encoded emails and save them as individual files within a new or existing Git repository, allowing for easy tracking of email conversations as Git commits. Users typically place `git mailsplit` in their Git hooks to automate this process when receiving new emails.'
    flag:
        b: '[AI] `git mailsplit` is a Git extension command used to extract email threads as separate commits in a Git repository. The `-b` option (short for `--branch`) creates a new branch to receive the extracted commits instead of applying them directly to the current branch. This allows for easier management and review of the email thread commits before merging them into the main branch.'
        d: '[AI] `git mailsplit` is a Git extension command used to parse and apply emails, usually received as attachments in a Mail folder. The `-d` option specifies a local delivery email address. When you run `git mailsplit -d <email>`, it will parse the emailed patches, apply them locally, and store them as commits in your Git repository using the specified email address as the author.'
        f: '[AI] `git mailsplit` is a Git command-line tool used to extract emails with patch attachments and apply them as Git commits. The `-f` (or --force) option is used when applying a patch where the index or working directory has local changes. It overwrites local changes without asking for confirmation. This can be useful in cases where you''re sure that the email contains the desired changes and want to discard any local modifications.'
        keep-cr: '[AI] `git mailsplit` is a Git command used to extract email threads as separate commits in a Git repository. The `--keep-cr` option is one of its arguments, and it means that Git should keep the Commit Message Separator (CMS) delimiter characters (usually ">" or "\>") at the beginning of each line in the commit message. This ensures that the email thread structure is preserved when creating the new commits.'
        mboxrd: '[AI] `git mailsplit` is a Git extension command for processing Mbox-format email files. The `--mbxrd` option is used to read and split multiple Mbox files, merging their contents into a single new Mbox file in the current directory. This command can be useful when dealing with large numbers of emails stored in separate Mbox files and wanting to consolidate them into a single file for easier management within Git.'
        o: '[AI] `git mailsplit` is a Git extension command that processes MIME-encoded emails and creates new Git commit(s) from their content. The `-o` option specifies an output directory where the generated files will be saved. With this combination, `git mailsplit -o <output_directory>` command extracts the files from one or more MIME-encoded emails and stores them as separate files within the specified output directory. Subsequently, you can use Git to commit these new files.'
