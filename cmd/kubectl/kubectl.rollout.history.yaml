# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: history (TYPE NAME | TYPE/NAME) [flags]
description: View rollout history
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --revision=: See the details, including podTemplate of the revision specified
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl rollout history` is a Kubernetes command used to display the deployment rollout history for a specific Kubernetes Deployment resource. This command shows the different versions of a deployment that have been applied and the associated revision, creation timestamp, and status. It can help in understanding the sequence of rollouts, identifying the cause of issues, or reverting to a previous version if needed.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl rollout history` is a Kubernetes command used to display the deployment rollouts for a specific resource, such as a Deployment or DaemonSet. The option `--allow-missing-template-keys` is used when applying patches to the rollout and some keys in the patch may be missing from the current template. Instead of failing the operation, this flag allows those missing keys to be ignored and the patch will still be applied. This can be useful when dealing with evolving Kubernetes manifests or when upgrading applications incrementally.'
        filename: '[AI] `kubectl rollout history` is a command used with Kubernetes to retrieve the deployment rollout history for a specific Kubernetes Deployment or ReplicaSet. The `--filename` flag is an optional argument that allows specifying a file name to save the output in YAML format instead of printing it to the console. For example, `kubectl rollout history <deployment-name> --filename=rollout-history.yaml` will save the deployment rollout history as a YAML file named "rollout-history.yaml".'
        kustomize: '[AI] `kubectl rollout history --kustomize` is a Kubernetes command used to retrieve the deployment rollout history for a resource, but with the added capability to display the differences between each version using Kustomize patches. Kustomize is a configuration management tool for Kubernetes that allows declaring extendible, reusable and composable configuration files. This command enables you to inspect the evolution of your application''s configuration over time and understand exactly what changes were made during each rollout.'
        output: '[AI] `kubectl rollout history` is a Kubernetes command used to display the deployment rollouts for a specific resource in a cluster, such as a Deployment or ReplicaSet. The `--output` flag modifies the output format of this command. It can be set to various values like "json", "yaml", "table", or "wide" to customize the display of the rollout information. For example, `kubectl rollout history my-deployment --output table` will present the history in a tabular format. This allows users to easily view and compare different versions of their deployments and understand the change sequences.'
        recursive: '[AI] `kubectl rollout history --recursive` is a command used with Kubernetes to view the deployment history for multiple levels of nested rollouts in a Kubernetes application, which can include deployments, replicasets, and statefulsets. The `--recursive` flag indicates that the command should recursively traverse the entire tree structure, providing information on each rollout event for each level. This can be helpful for understanding the sequence and outcome of various updates to a complex Kubernetes application.'
        revision: '[AI] `kubectl rollout history` is a command used with Kubernetes to view the revision history of a deployment. The `--revision` flag, when provided, will display the detailed information for a specific revision identified by its number. This includes the version, creation time, and status of the rolled-out pods for that revision.'
        selector: '[AI] `kubectl rollout history` is a command used with Kubernetes to retrieve the deployment rollout history for a specific Kubernetes resource, such as a Deployment or ReplicaSet. The `--selector` flag filters the output to show only the rollouts for resources that match the given selector label key-value pair. This can be useful when managing multiple deployments and wanting to isolate the history for a specific resource.'
        show-managed-fields: '[AI] `kubectl rollout history` is a command used with Kubernetes to view the deployment rollouts for a specific resource, such as a Deployment or a StatefulSet. The `--show-managed-fields` flag that can be passed to this command displays only the fields managed by Kubernetes in each revision of the rollout. These are typically fields like `metadata.annotations` and `spec`, but not user-defined fields in the custom `template` or `container` sections, for example. This option can help understand the changes made by Kubernetes during a rollout without having to inspect every revision''s full YAML manifest.'
        template: '[AI] `kubectl rollout history` is a command used with Kubernetes to view the deployment rollouts for a specific resource, such as a Deployment or a StatefulSet. The `--template` flag is an optional argument that can be used in conjunction with this command to generate output in a custom format using a template. This can be useful for automating or programmatically processing the rollout history data. For example, you could use a template to extract specific information from each rollout item, such as the creation timestamp or the number of replicas updated.'
