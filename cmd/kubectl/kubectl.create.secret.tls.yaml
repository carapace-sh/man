# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: tls NAME --cert=path/to/cert/file --key=path/to/key/file [--dry-run=server|client|none]
description: Create a TLS secret
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --append-hash: Append a hash of the secret to its name.
    --cert=: Path to PEM encoded public key certificate.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --key=: Path to private key associated with given certificate.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create secret tls` is a command used in Kubernetes to create a TLS (Transport Layer Security) secret. A TLS secret is an encrypted object that stores a private key and a certificate. This command allows you to create such a secret from a file containing the private key and the certificate. The created secret can then be referenced by other Kubernetes resources, like Ingress or ConfigMap, for secure communication with external services.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl create secret tls` is a command used to create a TLS (Transport Layer Security) secret in Kubernetes using the `kubectl` tool. The `--allow-missing-template-keys` flag is an optional argument that allows for the creation of a secret even if some of the required certificate key or certificate template keys are missing. This can be useful when creating a secret from files that may not contain all the necessary keys due to the files being incomplete or not formatted correctly, as Kubernetes will still create the secret with the available information and mark any missing keys as absent.'
        append-hash: '[AI] `kubectl create secret tls` is a command used to create a Transport Layer Security (TLS) Secret in Kubernetes. The `--append-hash` flag is an optional argument that appends the SHA1 or SHA256 hashes of the provided client certificate and key files to the Secret as annotations. This allows for easy rotation of certificates without having to recreate the entire Secret, making it more secure and efficient in managing TLS secrets in Kubernetes.'
        cert: '[AI] `kubectl create secret tls` is a command used in Kubernetes to create a TLS (Transport Layer Security) secret. A TLS secret contains a private key and one or more certificates, which can be used to secure communications between two entities such as clients and servers. The flag `--cert` specifies the file path of the certificate(s) to be included in the secret. When this command is executed, Kubernetes creates a new TLS secret with the provided name and certificate(s), and stores the private key encrypted within the cluster. This secret can then be referenced in other Kubernetes resources to enable secure communications using SSL/TLS.'
        dry-run: |-
            [AI] `kubectl create secret tls --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a TLS (Transport Layer Security) secret in a Kubernetes cluster, but it's set to a "dry-run" mode.

            In dry-run mode, `kubectl` will simulate the execution of the command without actually creating or modifying the resources in the cluster. The output will include the YAML manifest that would have been applied had the command been run with `--apply` flag instead. This allows you to review the changes before applying them to your cluster, ensuring accuracy and preventing potential mistakes.
        field-manager: '[AI] `kubectl create secret tls` is a command used in Kubernetes to create a new TLS (Transport Layer Security) secret. A TLS secret holds a private key and a certificate for secure communication between two parties. The `--field-manager` flag is an optional argument that instructs Kubernetes to manage the fields of this resource using StrategicSelector or OwnerReferences instead of annotations for selecting and managing dependent resources. By default, Kubernetes uses annotations for these purposes. Using `--field-manager` can make it easier to manage complex resource relationships in a more declarative way.'
        key: '[AI] `kubectl create secret tls` is a command used to create a TLS (Transport Layer Security) secret in Kubernetes using the `kubectl` tool. This command creates an encrypted secret object containing a private key and a certificate, which can be used to secure communications between two entities in the cluster. The `--key` flag is optional and specifies the path to the existing private key file that will be used for creating the TLS certificate. If not provided, you would need to generate or provide a new key-pair during the command execution.'
        output: '[AI] `kubectl create secret tls` is a command used to create and manage Transport Layer Security (TLS) certificates in Kubernetes. The `--output` flag is an optional argument that specifies the output format for the command''s output. By default, no output is displayed, but with this flag, the output can be set to various formats like yaml or json to facilitate easier integration with other tools and scripts. So, in summary, `kubectl create secret tls --output=yaml my-secret` creates a new TLS secret named "my-secret" and outputs the creation details in YAML format.'
        save-config: '[AI] `kubectl create secret tls` is a command used to create a new TLS (Transport Layer Security) secret in Kubernetes. The `--save-config` flag saves the client certificate and private key data as files instead of embedding them directly into the YAML manifest. This can be useful for managing larger certificates or for securely handling sensitive data outside of the command line interface.'
        show-managed-fields: |-
            [AI] `kubectl create secret tls` is a command used in Kubernetes to create a TLS (Transport Layer Security) secret. A TLS secret is an object that holds a private key and a certificate, which can be used to secure communication between two endpoints in the cluster.

            The `--show-managed-fields` option that follows the command displays the managed fields of the resource being created. Managed fields are the parts of the resource that Kubernetes manages automatically based on its definition. In the context of creating a TLS secret, these would include the private key and certificate data.

            So, in summary, `kubectl create secret tls --show-managed-fields <secret-name>` creates a new TLS secret named `<secret-name>` in Kubernetes and displays the managed fields of that secret, which are the private key and certificate data that will be automatically managed by Kubernetes.
        template: '[AI] `kubectl create secret tls` is a command used in Kubernetes to create a TLS (Transport Layer Security) secret. A TLS secret stores the private key and certificate as encrypted blobs in the Kubernetes cluster. The `--template` flag is an optional argument that allows creating a Kubernetes manifest file using a template engine like GoText or Helm, instead of directly providing the certificates and key data. This way, sensitive information is not exposed during execution. Instead, the template is rendered offline, and the resulting YAML file is applied to create the TLS secret.'
        validate: '[AI] `kubectl create secret tls` is a command used to create a TLS (Transport Layer Security) secret in Kubernetes. This command creates and encodes a certificate authority (CA) bundle and a private key, then stores them as a Kubernetes secret. The option `--validate` performs validation of the provided certificate files against the CA bundle during secret creation. It ensures that the given certificates are signed by the provided CA. If the validation passes, a new TLS secret is created in the current namespace.'
