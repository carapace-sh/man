# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: column
description: Display data in columns
group: low-level helper
flags:
    --command=: lookup config vars
    --indent=: padding space on left border
    --mode=: layout to use
    --nl=: padding space on right border
    --padding=: padding space between columns
    --raw-mode=: layout to use
    --width=: maximum width
documentation:
    command: '[AI] The `git column` command is not a valid Git command. Git is a version control system and does not have a command specifically named `column`. If you meant to use other Git commands like `git columnize`, it''s an extension for Git that displays commit messages, branch names, or other output in columns, making the output more readable when dealing with long lists.'
    flag:
        command: |-
            [AI] The `git colum --command` command is not a valid Git command. It seems like you may have accidentally combined elements of two different commands.

            The correct usage for displaying or modifying Git column formats in the default diff and log output is:

            1. To list current column formats: `git config --list | grep 'column.*format'`
            2. To configure a custom column format: `git config --global format.diff.<column> <format>`
            3. For a more detailed explanation of the available columns and their formatting options, use the command: `git help config` followed by pressing the 'TAB' key twice for suggestions or visiting the Git documentation (https://git-scm.com/docs/git-config) for a comprehensive guide.
        indent: |-
            [AI] The `git colum --indent` command is a sub-command of Git's `column` filter used to reformat text output in a Git repository. Specifically, it adjusts the indentation level of columns in the output.

            When you run this command with no additional arguments, it sets the default indentation level for all columns in the output to be two spaces. If you want to specify a different number of spaces for indentation, append that number as an argument: `git column --indent=4`. This will set the default indentation to four spaces instead.

            Here's an example usage scenario: Suppose you have a Git history containing commit messages with inconsistent indentations (some are indented by two spaces, others by four). To make them visually aligned, you can pipe the output of `git log` to the `column --indent` command and set the desired indentation level:

            ```bash
            $ git log --oneline | git column --indent=4
            ```

            This command will format the commit messages so that they are indented by four spaces each, making them easier to read.
        mode: |-
            [AI] The `git column --mode` command is a subcommand of Git's `column` tool, which is used for manipulating and formatting table-like data in Git. The `--mode` option specifies the desired format or transformation to be applied on the columns of the data.

            There are several modes available:

            * `move`: Move columns between tables.
            * `copy`: Copy columns from one table to another.
            * `split`: Split columns into multiple columns based on a delimiter.
            * `join`: Join multiple columns into a single column using a specified delimiter.

            For example, `git column --mode=join --column=1 --delimiter=, <file>` would join all the data in the second column of the given file with a comma separator.
        nl: '[AI] `git column --nl` is a Git command used to format the output of a Git column filter as normal text with line breaks between columns. The `--nl` option stands for "no-empty-lines," meaning it will not add an extra empty line between batches of output, but will only include line breaks between columns within each batch. This can be useful when dealing with large or complex data in tabular format.'
        padding: '[AI] `git column --padding` is a sub-command used with Git''s `column` command for formatting table-like outputs from Git commands, such as `git log`. The `--padding` option sets the character used for padding cells in the output, ensuring columns have equal width. It can take one argument: the padding character. For example, `git log --pretty=format:"%h %ad | %s" --column-padding --padding=-` will display a table with a dashed line separating columns.'
        raw-mode: '[AI] The `git column --raw-mode` command is used to output raw, unprocessed data from a Git commit or tree object''s files. This command is typically utilized when dealing with binary files or specific columns of data that require exact formatting, such as timestamps or commit messages. It''s important to note that the `--raw-mode` option must be used in conjunction with other Git commands like `git show`, `git log`, or `git prune`. The command outputs data without any additional formatting or processing, enabling users to manipulate and parse it according to their specific needs.'
        width: '[AI] The `git column --width` command is used to configure the width of the text columns in Git''s output. This command sets the maximum column width for tables and other text-based displays in Git. By default, Git uses a column width of 80 characters, but this can be changed with the `--width` option. For example, `git column --width 50` would set the column width to 50 characters. This can make Git output more readable when working with narrow terminal windows or large files.'
