# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rifle
description: ranger's file opener
flags:
    --version: show program's version number and exit
    -c=: read config from specified file instead of default
    -f=: use additional flags
    -h, --help: show this help message and exit
    -l: list possible ways to open the files
    -p=: pick a method to open the files
    -w=: open the files with PROGRAM
documentation:
    command: '[AI] The `rifle` command is a Unix utility used for processing multiple input files with a given shell command in parallel. It reads input data from files specified on its command-line argument list, applies the command to each file, and merges the results back into a single output. This can lead to significant time savings when working with large or numerous files, as it allows for parallel processing of inputs.'
    flag:
        c: '[AI] The `-c` option when used with the `rifle` command in Linux is used to specify that only the matching files should be processed by the given command, which follows `rifle`. In other words, it restricts the command''s execution to a specific file or set of files based on a pattern. The entire command would look like this: `rifle [PATTERN] COMMAND -- [OPTIONS] -c`'
        f: '[AI] The `-f` option, when used with the `find` command in Unix-based systems, allows the search to continue even if an error or a file permission problem occurs. It stands for "follow-links" and also ignores empty directories. When specified without the letter ''e'' before it, the `-f` option causes `find` to only search for files with the given name exactly, instead of searching for files with names matching the given pattern.'
        help: '[AI] The `--help` option when used with the `rifle` command in a Unix-like environment displays detailed help information about the command. It explains what `rifle` does, how to use it, and provides examples of common use cases along with explanations of each available option. This information is crucial for understanding how to effectively utilize `rifle`, which is a tool used for executing multiple shell commands in parallel or sequentially based on specific patterns.'
        l: |-
            [AI] The `-l` option when used with the `rsync` or `scp` (Secure Copy) command and the `--` followed by the `rifle` argument, is not a standard Unix or Linux flag. Instead, it's specific to version control systems like Git or Mercurial that have an external helper tool named 'rifle.'

            This flag instructs these version control systems to use rifle for handling large files during transfer over SSH. Rifle splits the large file into smaller chunks and sends them independently, making the transfer more efficient and less prone to failures. The `rsync` or `scp` command with this flag becomes an effective way to handle large binary files in version control workflows.
        p: '[AI] The `-p` option in the `rifle` command is used to specify a particular partition or path within a RAID array for reading or writing operations. When used with commands like `dd` or `rsync`, it allows you to access only a specific partition or path within a RAID setup, instead of dealing with the entire array as a single entity. This can be useful when you want to perform selective data transfer or manipulation while avoiding the potential risks and complications associated with handling an entire RAID array.'
        version: '[AI] The `--version` option when used with the `rifle` command is utilized to display the current version of the Rifle media toolkit. When executed with this argument, it prints out the version number and any accompanying build information. This can help users ensure they are using the latest or a specific version for their workflow.'
        w: '[AI] The `-w` flag in the context of the `rifle` command is used to specify a single output file for multiple input files. In other words, it gathers all input files and writes the output of each operation into the specified output file instead of creating separate output files for each input file. This can be useful when you want to process multiple files in one go and consolidate the results into a single output.'
