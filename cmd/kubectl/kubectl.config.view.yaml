# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: view
description: Display merged kubeconfig settings or a specified kubeconfig file
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --flatten: Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)
    --merge?: Merge the full hierarchy of kubeconfig files
    --minify: Remove all information not used by current-context from the output
    --raw: Display raw byte data and sensitive data
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl config view` is a Kubernetes command used to display the current configuration of your `kubectl` CLI tool, specifically the context and cluster information. This command allows you to check which cluster and namespace you are currently connected to in your local `kubeconfig` file. It provides essential details such as the name, user, and CA certificate of the cluster, as well as the corresponding API server address and client certificate.'
    flag:
        allow-missing-template-keys: '[AI] The `kubectl config view --allow-missing-template-keys` command is used to display the current Kubernetes configuration in YAML format, including any missing keys or templates that would normally cause an error. This can be helpful when debugging or comparing configurations. With the `--allow-missing-template-keys` flag, Kubectl will output the configuration as-is, even if some keys or templates are missing or incomplete. Without this flag, Kubectl would return an error for each missing key or template.'
        flatten: '[AI] `kubectl config view --flatten` is a command used in Kubernetes to output the entire configuration of your `kubeconfig` file in a flat format. The `--flatten` flag means that all keys and values are printed as fields, without nesting or indentation. This can be useful for scripting or automating tasks where you need to process specific parts of the configuration data.'
        merge: '[AI] `kubectl config view --merge` is a command used with the Kubernetes `kubectl` tool to display the current kubeconfig, which is a configuration file for communicating with a Kubernetes cluster, and then merge new context or cluster configurations into it. The `--merge` flag tells `kubectl` to modify the existing kubeconfig file instead of creating a new one. This way, you can make adjustments to your configuration on the fly without having to create a new file each time.'
        minify: '[AI] `kubectl config view --minify` is a command used with the Kubernetes `kubectl` tool to display the current cluster and user configurations in a minimal format. The `--minify` flag reduces the output to only include essential information, such as the current context name and the active user or cluster. This command can be helpful for quickly checking the currently configured settings without displaying unnecessary details.'
        output: |-
            [AI] `kubectl config view` is a command used in Kubernetes to display the current configuration of your `kubectl` CLI tool. The `--output` flag specifies how the output should be formatted.

            There are several options for `--output`, such as "json", "yaml", or "go-template". These formats allow you to easily save or further process the configuration data. For example, `kubectl config view --output json > kubeconfig.json` will save the output as a JSON file named `kubeconfig.json`.
        raw: '[AI] `kubectl config view --raw` is a command used with the Kubernetes command-line tool (kubectl) to retrieve the raw contents of the current kubectl configuration file. This includes the cluster and user contexts, the current-context, and the remote server address and authentication information. The output is in YAML format and can be used to apply the same configuration on another system or as input to scripts for automation purposes.'
        show-managed-fields: |-
            [AI] `kubectl config view --show-managed-fields` is a command used with Kubernetes' `kubectl` tool to display the current configuration of your Kubernetes cluster's context and the managed fields within that context.

            Managed fields are modifications made by Kubernetes controllers, such as Deployments or StatefulSets, to manage the desired state of your resources. When you use this command, you will see a list of all the managed fields, including the API version, kind, resource, and subresource that caused each modification.

            This information can be helpful for understanding how specific changes were made within your cluster, which in turn helps with debugging and managing your resources.
        template: '[AI] `kubectl config view --template` is a command used with the Kubernetes `kubectl` tool to output and manipulate the current configuration of your Kubernetes cluster or context. The `--template` flag allows you to apply a custom Go template to the configuration output, enabling you to extract, modify or format specific data from the config file, such as cluster, user or context information. This can be useful for automating tasks like setting environment variables, generating scripts, or applying custom configurations.'
