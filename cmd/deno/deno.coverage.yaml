# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: coverage
description: Print coverage reports
flags:
    --exclude?: Exclude source files from the report
    --ignore?: Ignore coverage files
    --include?: 'Include source files in the report [default: ^file:]'
    --lcov: Output coverage report in lcov format
documentation:
    command: '[AI] `deno coverage` is a Deno command-line tool for generating test coverage reports. It uses the Istanbul coverage engine under the hood to measure code coverage during the execution of tests in a Deno project. The output is an HTML report that displays which lines and branches of your code were executed during testing, helping you identify untested areas and improve test coverage.'
    flag:
        exclude: '[AI] `deno coverage` is a Deno command for generating test coverage reports. The `--exclude` option allows you to exclude specific files or directories from being considered during the calculation of code coverage. By specifying a pattern, you can exclude files or directories that don''t need to be included in the coverage analysis, such as build scripts, third-party libraries, or test helper files. This can help reduce noise and make it easier to understand the actual code coverage of your Deno project.'
        ignore: '[AI] The `deno test --coverage --ignore` command is used in Deno, a TypeScript-based runtime, for running unit tests and generating coverage reports. The `--coverage` option enables the generation of a coverage report after the tests are run, while `--ignore` takes a list of file globs or regular expressions to ignore certain files or directories during the coverage measurement. This can be useful when there''s unwanted code (like third-party libraries) that shouldn''t be included in the report.'
        include: '[AI] `deno coverage --include` is a command-line option used with Deno, a modern JavaScript runtime. This option is used to restrict the code coverage report generated by Deno to specific files or directories that match the provided include pattern(s). The goal is to filter out irrelevant files from the coverage report and make it more focused and easier to understand for the tested codebase''s relevant parts.'
        lcov: '[AI] `deno coverage` is a Deno command-line tool for generating code coverage reports. The `--lcov` option generates LCOV (Line Coverage) format output, which can be used by various tools to visualize and analyze the test coverage data of your Deno project. This format is widely supported in the testing community and allows you to view code coverage results as HTML or XML files, making it easier to understand which parts of your code have been executed during testing.'
