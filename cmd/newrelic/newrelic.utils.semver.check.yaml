# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: check
description: Check version constraints
flags:
    -c, --constraint=: the version constraint to check against
    -v, --version=: the semver version string to check
documentation:
    command: '[AI] `newrelic utils semver check` is a command provided by New Relic''s utility belt (`newrelic utils`) to validate Semantic Versioning (SemVer) compliance for given packages or dependencies listed in a `package.json` file. It checks if the specified versions are consistent with the rules defined in SemVer and reports any discrepancies, helping maintain a consistent and compatible dependency tree.'
    flag:
        constraint: '[AI] `newrelic utils semver-check` is a command-line tool from New Relic that helps manage dependencies with Semantic Versioning (SemVer). The `--constraint` option is used to specify a particular version or range of versions for a dependency in your project''s package.json file. For example, `newrelic utils semver-check --constraint mydependency@1.2.3` checks if the current version of ''mydependency'' in the package.json complies with the specified SemVer constraint (in this case, 1.2.3). If there''s a mismatch, it will raise an error. The tool supports various SemVer constraints, such as `>`, `>=`, `<`, `<=`, and `~`, to check for updates or maintain compatibility with the specified dependencies.'
        version: '[AI] The command `newrelic utils semver check --version` is a tool provided by New Relic to verify if a given version number of a software package follows the Semantic Versioning (SemVer) specification. This ensures that any compatibility and backward-compatibility rules are being met, allowing for consistent and predictable upgrades or downgrades of dependencies. The `--version` argument is used to specify the version number to check against the SemVer rules.'
