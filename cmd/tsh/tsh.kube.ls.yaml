# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ls
description: Get a list of Kubernetes clusters.
flags:
    --no-all&: List Kubernetes clusters from all clusters and proxies.
    --no-quiet&: Quiet mode.
    --no-verbose&: Show an untruncated list of labels.
    --query=: Query by predicate language enclosed in single quotes. Supports ==, !=, &&, and || (e.g. --query='labels["key1"] == "value1" && labels["key2"] != "value2"')
    --search=: List of comma separated search keywords or phrases enclosed in quotations (e.g. --search=foo,bar,"some phrase")
    -R, --all: List Kubernetes clusters from all clusters and proxies.
    -c, --cluster=: Specify the Teleport cluster to connect
    -f, --format=: Format output (text, json, yaml)
    -q, --quiet: Quiet mode.
    -v, --verbose: Show an untruncated list of labels.
documentation:
    command: '[AI] The `tsh kube ls` command is used in Telescope, a CLI tool for Kubernetes management, to list and display information about the available namespaces and clusters configured in your Kubernetes context. It provides a summary view of each namespace or cluster including its name, status, and the active context associated with it. This command helps users manage multiple environments in their Kubernetes setup by providing an easy way to view and switch between them.'
    flag:
        all: '[AI] `tsh` is a Tenable.sc Tenable Security Center CLI tool used to interact with the Tenable Cloud Platform. The command `tsh kube ls --all` lists all the Kubernetes clusters configured in Tenable.sc''s Kubernetes Security for Containers module. This includes both discovered and manually added clusters. The output will display essential information such as cluster names, IDs, and statuses (e.g., connected or disconnected).'
        cluster: '[AI] The `kubectl tsh ls --cluster` command is used in Kubernetes to list information about clusters managed by the Kubernetes configuration. The ''tsh'' short for "tabs-shell" is an alternative interactive interface provided by `kubectl` for managing clusters and applications. The `ls` subcommand lists the clusters, displaying their names and contexts (aliases or configurations for connecting to a cluster). This command helps users manage multiple Kubernetes clusters by providing an overview of their current configurations.'
        format: '[AI] `tsh` is a Tenable.sc Tenable Security Center CLI tool, and `kube` is its subcommand for Kubernetes integrations. The command `tsh kube ls --format` lists all the discovered Kubernetes clusters in the Tenable SC environment with minimal output. The `--format` flag is used to customize the displayed output format. In this case, by default, it may display a JSON object per cluster, but using `--format=table` can change the output to be presented in a tabular format, making it easier for humans to read and interpret.'
        no-all: '[AI] `tsh` is a Tenable.sc Templating Shell, a powerful tool for automating Tenable.sc queries and reports. The command `tsh kube ls --no-all` lists all Kubernetes hosts discovered by Tenable.sc in your organization, but it excludes the "all" or default view which includes columns not relevant to every use case such as hostname, IP address, OS, etc. By using the `--no-all` option, only essential columns are displayed for a clearer and more focused output.'
        no-quiet: '[AI] `tsh` is short for Tilt Shift Helm, a tool used in Kubernetes environments to manage multiple applications as a single entity. The command `tsh kube ls --no-quiet` lists all deployed applications managed by Tilt Shift Helm in the Kubernetes cluster, with output containing details such as application name, status, and desired vs current replicas. The `--no-quiet` flag is used to prevent the command from running in a quiet mode, which would suppress most of the output, making it less informative for regular use.'
        no-verbose: '[AI] `tsh` is short for Tenable Security Hardening, a CLI tool used in the Tenable Security Platform. The command `tsh kube ls --no-verbose` lists all Kubernetes clusters registered with Tenable, but in a non-verbose mode, meaning it will not display detailed information or explanations alongside each cluster name.'
        query: |-
            [AI] `tsh` is a command-line tool for interacting with the Kubernetes cluster using the Google Cloud SDK's `gcloud` command-line interface. The specific command, `tsh kube ls --query`, lists the Kubernetes resources (pods, services, etc.) in the current context and applies the JQ query filter to the output.

            The flag `--query` is used to apply a JQ query filter expression string on the JSON response. This allows extracting specific information from the output based on given criteria, making it easier to process and analyze the data. The query filter expression string follows the JQ query syntax for parsing JSON.
        quiet: '[AI] `tsh` is short for Temporal Kubernetes Shell, a CLI tool for interacting with Temporal Workflow and Kubernetes. The command `tsh kube ls --quiet` lists all running Kubernetes pods in a quiet mode. This means that only essential information will be displayed, typically just the name and namespace of each pod. No extra columns or formatting are shown by default.'
        search: '[AI] `tsh` is a Tenable.sc Temporal query language, and the command `tsh kube ls --search` is used to search for Kubernetes objects (such as pods, services, and namespaces) in the Tenable.sc Temporal platform based on specific search criteria. The `--search` flag enables the query mode for searching, allowing users to filter results by various attributes like name, label, or annotations. For example, you can use it to find a pod with a specific name or a service with a certain label.'
        verbose: '[AI] The command `tsh kube ls --verbose` is used with TSH-KUBE, a CLI tool for interacting with a Kubernetes cluster managed by Tanzu Kubernetes Grid. The `--verbose` flag increases the amount of output produced by the `kube ls` subcommand. It lists all Kubernetes resources in the current context with more detailed information, such as labels and annotations, making it useful for debugging or understanding resource configurations in greater detail.'
