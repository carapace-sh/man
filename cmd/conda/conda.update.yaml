# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update
aliases:
    - upgrade
description: Updates conda packages to the latest compatible version
flags:
    --all: Update all installed packages in the environment.
    --clobber: Allow clobbering of overlapping file paths within packages, and suppress related warnings.
    --copy: Install all packages using copies instead of hard- or soft-linking.
    --download-only: Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.
    --file=: Read package versions from the given file.
    --force-reinstall: Ensure that any user-requested package for the current operation is uninstalled and reinstalled, even if that package already exists in the environment.
    --freeze-installed: Do not update or change already-installed dependencies.
    --json: Report all output as json. Suitable for using conda programmatically.
    --no-channel-priority: Package version takes precedence over channel priority.
    --no-deps: Do not install, update, remove, or change dependencies.
    --no-pin: Ignore pinned file.
    --no-update-deps: Do not update or change already-installed dependencies.
    --offline: Offline mode.
    --only-deps: Only install dependencies.
    --override-channels: Do not search default or .condarc channels.
    --repodata-fn=: Specify name of repodata on remote server.
    --show-channel-urls: Show channel urls.
    --strict-channel-priority: Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.
    --update-all: Update all installed packages in the environment.
    --update-deps: Update dependencies.
    --update-specs: Update based on provided specifications.
    --use-local: Use locally built packages.
    -C, --use-index-cache: Use cache of channel index files, even if it has expired.
    -S, --satisfied-skip-solve: Exit early and do not run the solver if the requested specs are satisfied.
    -d, --dry-run: Only display what would have been done.
    -h, --help: Show this help message and exit.
    -k, --insecure: Allow conda to perform "insecure" SSL connections and transfers.
    -n, --name=: Name of environment.
    -q, --quiet: Do not display progress bar.
    -v, --verbose: Once for INFO, twice for DEBUG, three times for TRACE.
    -y, --yes: Do not ask for confirmation.
documentation:
    command: '[AI] `conda update` is a command used in Anaconda and Miniconda distributions to update existing packages or environments to their latest versions. It can be run in the Anaconda Prompt or terminal with the base environment activated, or by specifying the target environment using `conda update --env <environment_name>`. The command retrieves updates from the default channels and installs them, applying necessary dependency resolutions. It''s important to note that updating packages might change their functionality or bring potential incompatibilities; therefore, it is recommended to backup your work before executing this command.'
    flag:
        all: '[AI] `conda update --all` is a command used in Anaconda or Miniconda distribution of Python and its packages. It instructs Conda to update all installed packages, including dependencies and the base environment, to their latest available versions in the current channels. This can help maintain a system with up-to-date packages and potentially resolve issues related to outdated software. However, be aware that updates may introduce new dependencies or changes that could affect your existing code or workflows.'
        clobber: '[AI] The `conda update --clobber` command is a function in Anaconda''s package manager (conda) used to forcefully update all packages, including those with conflicting dependencies, and replace existing files with new ones without asking for user confirmation. This can potentially cause data loss or package incompatibility issues if not used carefully. It is generally recommended as a last resort when other update methods have failed, or when working in isolated environments where potential conflicts can be easily managed.'
        copy: '[AI] `conda update --copy` is a command in Anaconda''s conda package manager. It updates all installed packages to their latest versions while preserving current installation directories and symlinks, allowing users to keep their existing package environments unaltered. This can be useful when updating packages while maintaining compatibility with specific project configurations or dependencies.'
        download-only: '[AI] The `conda update --download-only` command is a function in Anaconda''s conda package manager. It instructs conda to download the latest versions of specified packages without installing or making any changes to the current environment. This is useful when you want to update your local copies of packages before installing them on other systems or when you have limited internet connectivity and prefer to download packages offline.'
        dry-run: '[AI] `conda update --dry-run` is a command used in Anaconda or Miniconda distribution of Python, which allows users to check what packages will be updated or changed before actually applying the updates. The `--dry-run` option simulates the operation and displays the planned actions without making any modifications to the environment files or installing new packages. This is useful for users who want to preview the changes that would result from running `conda update`.'
        file: '[AI] `conda update` is a command-line tool in Anaconda Distribution for managing and updating packages installed in a Conda environment. The `--file` option takes a path to a file listing the packages or dependencies to be updated. This can be useful when you want to update multiple packages at once based on a predefined list, rather than interactively. For instance, if you have a text file named "update\_packages.txt" containing the package names to be updated, you can run `conda update --file update_packages.txt`. This command will read the file and perform the updates accordingly, without requiring manual input for each package.'
        force-reinstall: '[AI] The `conda update --force-reinstall` command is a utility in Anaconda Distribution for managing and updating packages installed in a conda environment. This specific command with the "--force-reinstall" flag instructs Conda to forcefully reinstall all specified packages, even if their versions already exist in the current environment. It is often used when dealing with package version conflicts or corrupted installations. The command updates the packages to the latest available version and overwrites existing files during the installation process. This ensures that the packages are installed from fresh and any issues related to corrupted files can be resolved.'
        freeze-installed: '[AI] The `conda update --freeze-installed` command is used in Anaconda environments to update all installed packages to their latest versions, while keeping a record of the current versions in the environment''s `environment.yml` file. This ensures that future activations of the environment will recreate the exact package versions that were present when the command was run. In essence, it allows for reproducible environments by freezing the installed packages at their current versions in the metadata.'
        help: |-
            [AI] `conda update` is a command-line utility in Anaconda distribution for managing and updating packages and environments. The option `--help` provides detailed information about how to use this command with various arguments for specific updates, such as all packages or targeting a specific environment or package version. Key features include:

            1. Upgrades existing packages to their latest versions.
            2. Can specify packages to update by name using the `--name` option.
            3. Automatically resolves dependencies and handles conflicts during updates.
            4. Provides an interactive mode for reviewing proposed changes before applying them.
            5. Supports updating conda itself, as well as other channels like base, conda-forge, or local packages.
        insecure: '[AI] The `conda update --insecure` command is used in Anaconda or Miniconda environments to upgrade packages, even if they are not from trusted sources. By default, Conda only installs packages from verified channels to maintain the security and integrity of the environment. However, this option disables that check and allows for the installation of packages from any source, increasing the potential risk of installing outdated, insecure, or malicious software. It is generally recommended to use trusted channels and keep your Conda environment updated regularly to minimize risks. Use `--insecure` with caution and at your own risk.'
        json: '[AI] `conda update --json` is a command used in Anaconda and Miniconda environments to update all installed packages while returning the output in JSON format for further processing. This can be useful for automation or scripting purposes as it provides detailed information about the updated packages, including their new versions.'
        name: '[AI] The `conda update` command is used in Anaconda and Miniconda environments to manage package installations. The option `--name <env_name>` specifies which environment to update. This means that only the packages within the specified environment will be updated to their latest versions without affecting other environments. If not provided, it updates packages for the default environment.'
        no-channel-priority: '[AI] The `conda update` command with the `--no-channel-priority` option tells Anaconda''s package manager to update all packages in the current environment, regardless of their source (local or channels). By default, Conda installs or updates packages from specific priority channels before others. Setting this flag overrides that behavior and allows for more control over which packages are updated from where.'
        no-deps: '[AI] The `conda update --no-deps` command is used in Anaconda or Miniconda environments to update all installed packages without updating their dependencies. In other words, it updates only the specified packages while keeping their current dependencies unchanged. This can be useful when you want to ensure that your environment maintains its existing dependency configuration.'
        no-pin: '[AI] The `conda update --no-pin` command is used in Anaconda and Miniconda environments to update all installed packages to their latest versions without pinning them to specific versions. In other words, it allows the packages to be updated to any available version, even if it''s different from what was originally installed. This can potentially introduce compatibility issues or other unexpected changes, so it should be used with caution.'
        no-update-deps: '[AI] The `conda update` command with the `--no-update-deps` flag is used in Anaconda or Miniconda environments for updating only the specified packages without affecting their dependencies. In other words, it updates the given packages to their latest versions while keeping the dependencies at their current state. This can be useful when you want to update certain packages without risking potential conflicts with existing dependencies.'
        offline: '[AI] `conda update --offline` is a command used in Anaconda or Miniconda distribution of Python and its packages manager, Conda. This command allows users to download packages'' metadata and packages themselves for offline use without an internet connection. The packages are saved in the local cache folder and can be installed later using the `conda install` command from the cached files. This is particularly useful when internet access is limited or unreliable.'
        only-deps: '[AI] The `conda update --only-deps` command is a function in Anaconda''s Conda package manager. It updates only the dependencies of the current environment, not the packages themselves. This means that the installed packages will remain unchanged, but any outdated dependencies will be updated to their latest versions. This can help maintain a consistent and functional environment by keeping dependencies up-to-date without affecting the installed packages.'
        override-channels: '[AI] The `conda update --override-channels` command is a function in Anaconda or Miniconda''s conda package manager. It updates all installed packages to their latest versions from both default and specified channels. By adding the `--override-channels` flag, users can also forcefully install packages from other channels that may not be compatible with the current environment. This bypasses the usual channel compatibility checks in conda, allowing users to install specific packages from different sources if needed.'
        quiet: '[AI] `conda update --quiet` is a command used in Anaconda or Miniconda environments to update all installed packages with minimum output. The `--quiet` option suppresses the progress bar and detailed information about each package update, making the process run quietly in the background.'
        repodata-fn: '[AI] The `conda update --repodata-fn` command is used in Anaconda or Conda environments for updating the metadata files (repodata files) of Conda repositories. Repodata files contain information about packages, their versions, dependencies, and other metadata needed for Conda to effectively manage environments and install packages. By running `conda update --repodata-fn`, users can ensure they have the most up-to-date repository metadata, enabling them to install or upgrade packages with the latest available versions.'
        satisfied-skip-solve: '[AI] `conda update --satisfied-skip-solve` is a command used in Anaconda or Miniconda distribution of Python for managing environments. This command updates all packages in the current environment to their latest versions without attempting to resolve any dependency conflicts. In other words, it skips the step where Conda tries to automatically resolve any dependencies that might cause conflicts during the update process. It assumes that the user knows which dependencies can be updated without causing issues and wants to bypass the dependency resolution step for faster execution.'
        show-channel-urls: '[AI] The `conda update --show-channel-urls` command is used in Anaconda or Miniconda environments to display a list of the URLs of the Conda channels currently being used. These channels are repositories where packages and dependencies for Conda are stored, allowing users to easily install and manage software environments. By running this command, you can view the sources from which your Conda installation is fetching updates, and ensure that they are trusted and up-to-date.'
        strict-channel-priority: '[AI] The `conda update` command with the `--strict-channel-priority` option is used in Anaconda or Miniconda environments for updating packages while ensuring that channels with a higher priority take precedence over others. This means that if there are conflicts between packages from different channels, the update will prioritize packages from channels with a higher priority setting in the `conda config` file or environment variables. By using this option, you can maintain a consistent and predictable environment by ensuring that updates come from trusted sources first.'
        update-all: '[AI] `conda update --update-all` is a command used in Anaconda and Miniconda environments to update all installed packages to their latest versions. This includes both the base environment and any user-created environments. It also updates the conda package itself if there''s a newer version available. The command should be run in your terminal or command prompt, and it may take some time to complete depending on the number of packages that need updating. Please note that this command can potentially cause conflicts between different package versions, so it''s recommended to back up important work before running it.'
        update-deps: '[AI] `conda update --update-deps` is a command in Anaconda''s conda package manager. It updates all packages in the current environment with their dependents to their latest versions while ensuring compatibility among them. The option `--update-deps` focuses only on the dependency updates instead of the main packages themselves, which is useful for keeping environments up-to-date and maintaining a consistent state.'
        update-specs: |-
            [AI] `conda update --update-specs` is a command used in Anaconda and Miniconda environments to update specific Conda packages with new versions while keeping other packages unchanged. It allows fine-grained control over which packages are updated, reducing the risk of introducing unexpected dependencies or breaking existing functionality.

            For instance, if you want to update only package 'numpy' to the latest available version without affecting any other installed packages, you would use:

            ```bash
            conda update numpy
            ```

            However, `--update-specs` is an advanced option that lets you update multiple packages by providing a list of their specifications. For example, updating 'numpy' and 'scipy' to the latest available versions can be achieved with:

            ```bash
            conda update numpy scipy --update-specs
            ```

            Keep in mind that you should use this command carefully, as it might introduce new dependencies or conflicts if not used correctly. It is generally recommended to create and use a separate environment for experimentation before applying changes to your main working environments.
        use-index-cache: |-
            [AI] The `conda update --use-index-cache` command is a utility provided by Anaconda's Conda package manager. This command is used to perform a faster update of packages in your conda environment, especially when dealing with large datasets or multiple dependencies.

            When you run this command, Conda will first generate an index cache, which is a local repository of the metadata and package files required for updates. The index cache is created by downloading the necessary data from the Anaconda servers or other remote sources. After generating the cache, subsequent updates within the same environment can be performed using the cached data instead of redownloading it, resulting in faster update times.

            However, keep in mind that using the index cache might not always get you the very latest package versions because the cached data could be outdated. To ensure you have the most recent packages, you should periodically run `conda clean --all` to clear your local caches and force Conda to update from the sources.
        use-local: '[AI] The `conda update --use-local` command is used in Anaconda or Miniconda environments to instruct Conda to only install updates from local packages instead of the default remote channels. This can be useful for testing new package versions before deploying them, or when working with custom packages that are not yet available on the Conda channels. It''s important to note that this command will not install any packages that don''t already exist locally.'
        verbose: '[AI] `conda update --verbose` is a command used in Anaconda or Miniconda environments to update all installed packages and conda itself to their latest versions. The `--verbose` flag increases the output of the command, providing more detailed information about the updates being made, including package names, old and new version numbers, and installation progress. This can be helpful for debugging or keeping track of changes in your environment.'
        "yes": '[AI] `conda update --yes` is a command used in Anaconda distribution''s package manager, Conda. This command automatically confirms all prompts during the updating process without requiring user input. It simplifies the workflow when you want to perform multiple updates or upgrades at once without interruption. Note that using `--yes` implies trust in the sources and packages being updated; ensure they are trusted before running this command.'
