# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fd
description: find entries in the filesystem
flags:
    --changed-before=: Filter by file modification time (older than)
    --changed-within=: Filter by file modification time (newer than)
    -0, --print0: Separate results by the null character
    -E, --exclude=: Exclude entries that match the given glob pattern
    -H, --hidden: Search hidden files and directories
    -I, --no-ignore: Do not respect .(git|fd)ignore files
    -L, --follow: Follow symbolic links
    -S, --size=: Limit results based on the size of files.
    -V, --version: Prints version information
    -X, --exec-batch=: Execute a command with all search results at once
    -a, --absolute-path: Show absolute instead of relative paths
    -c, --color=: When to use colors
    -d, --max-depth=: 'Set maximum search depth (default: none)'
    -e, --extension=: Filter by file extension
    -g, --glob: 'Glob-based search (default: regular expression)'
    -h, --help: Prints help information
    -i, --ignore-case: 'Case-insensitive search (default: smart case)'
    -l, --list-details: Use a long listing format with file metadata
    -o, --owner=: Filter by owning user and/or group
    -p, --full-path: 'Search full path (default: file-/dirname only)'
    -s, --case-sensitive: 'Case-sensitive search (default: smart case)'
    -t, --type=: Filter by type
    -x, --exec=: Execute a command for each search result
documentation:
    command: '[AI] `fd` is a Linux command-line tool for finding files and directories that match a given pattern. It''s an alternative to the more commonly used `find` command, known for its faster performance due to using stat() system call instead of finding metadata recursively. Users can specify patterns to search in file names or paths. For example, `fd <pattern>` will search current directory for files or directories matching that pattern. Options like `-r`, `-type`, `-name`, and others can be used to refine the search.'
    flag:
        absolute-path: '[AI] The `fd --absolute-path` command is a powerful file finder for Linux and macOS. The `--absolute-path` option makes `fd` output only the absolute path of the found files instead of just the relative path. This means that the full path from the root directory to each file will be displayed, which can be useful when dealing with complex directories or multiple levels of subdirectories.'
        case-sensitive: '[AI] The `fd --case-sensitive` command is a powerful file finder tool in Unix-like operating systems, such as Linux and macOS. The `--case-sensitive` option makes the search case-sensitive by only matching filenames that exactly match the given pattern (including the case of each character). In other words, it ensures that uppercase and lowercase letters are distinguished when searching for files. This is especially useful when dealing with systems or projects where maintaining consistent casing in file names is important.'
        changed-before: '[AI] The `fd --changed-before` flag is used with the `fd` (find-desktop-files) command in Linux. It modifies the search results to show only files that have been modified before a specified time, but not after that time. This can be useful for finding files that have been changed prior to a system update or configuration change, for example. The flag takes as its argument a valid date and time in the format accepted by the `find` command.'
        changed-within: '[AI] The `fd --changed-within` flag is a command-line option used with the `fd` (find-debian) tool in Linux file systems for finding files based on specific criteria. This particular flag modifies the search results to only display files that have been changed within the given time interval. By default, this flag sets the time interval to 5 minutes, but it can be adjusted by providing a custom duration in the format `[--changed-since=]<duration>`. This is useful when looking for recently modified files, especially in large project directories, and can help streamline workflows such as development, debugging, or version control.'
        color: '[AI] The `fd --color` command is used with the `fd` (find-deeper) tool in Linux and other Unix-like systems for searching files and directories. The `--color` option enables colored output, making it easier to distinguish between different types of files and directories in the terminal. This can be particularly useful when working with large file trees or performing complex searches.'
        exclude: '[AI] The `fd --exclude` option is a command-line filter used with the `fd` (find-debian) tool to exclude specific files or directories from search results. The syntax is as follows: `fd [search_pattern] --type [file|directory] --exclude=[pattern] ...`. Here, `[search_pattern]` defines what to search for, and the `--type` option specifies whether to find files or directories. The `--exclude` option followed by a `[pattern]` argument instructs `fd` to exclude files or directories matching the specified pattern while displaying the results. This is useful when you want to narrow down your search results by excluding unwanted files or directories.'
        exec: '[AI] `fd --exec` is a command-line tool for finding files in a system. The `--exec` option allows executing a command on each file that matches the search criteria. With this option, fd can perform actions directly on the matched files without the need to manually iterate through them. It''s an efficient way to execute commands or scripts on selected files based on their location or properties.'
        exec-batch: |-
            [AI] The `fd --exec-batch` command is a file find and execute utility for finding files in a system based on certain patterns or criteria, and then executing specified commands on those files in batch mode. The `--exec-batch` option tells fd to execute the provided command for each matching file in batches instead of immediately after finding each file. This can be useful when dealing with large numbers of files to improve performance and reduce resource usage.

            The basic syntax is: `fd <search_pattern> --type <file_type> --exec-batch <command> [--depth <number>] [<path>...]`
        extension: '[AI] The `fd --extension` command is a file finder tool for Linux and macOS. The `--extension` option filters files based on their extensions only, returning a list of files with the specified extension in the current directory or recursively in subdirectories. For example, `fd --extension .txt` would search for all files with a `.txt` extension.'
        follow: '[AI] The `fd --follow` command is a part of the `fd-find` tool in Linux and macOS file systems. It''s used to search for files and directories matching specific patterns recursively with real-time detection of added, modified or deleted files. The `--follow` option enables symbolic link following during the search process, meaning that when a symbolic link is encountered, fd-find will traverse the linked path instead of stopping at the link itself. This can be useful when searching for specific files in complex file structures with multiple symbolic links.'
        full-path: '[AI] The `fd --full-path` command is a powerful file finder for Linux and macOS. It allows users to quickly search for files in the system with various filters, including finding files based on their full pathnames. The `--full-path` option ensures that the output of the command includes the complete file path for each matching file. This can be useful when working with complex file structures or automating tasks that require precise file location information.'
        glob: '[AI] `fd --glob` is a command-line tool for finding files and directories in Unix-based systems. The `--glob` option enables globbing patterns in file searches, allowing you to use wildcard characters such as `*`, `?`, or `[]` in your search queries. For example, `fd --glob ''*.txt''` would find all files with a `.txt` extension in the current directory and its subdirectories.'
        help: '[AI] The `fd --help` command is used with the `fd` (find-debian) tool in Linux systems to display comprehensive help information about the `fd` command and its usage. When executed with this argument, it prints out detailed information on various options, search filters, and usage examples of the `fd` command for finding files in a system. It also includes information about common flags like `-type`, `-name`, `-mindepth`, and others.'
        hidden: '[AI] The `fd --hidden` command is a file finder utility for Linux and macOS. The `--hidden` option tells fd to show hidden files in the search results. By default, fd hides files with names starting with a dot (`.`). When used with this option, fd will display all files including hidden ones. This can be useful when searching for specific files that are not supposed to be visible in a regular file listing.'
        ignore-case: '[AI] The `fd --ignore-case` flag is used with the `fd` (find-debian) command in Linux and other Unix-based systems for efficient searching of files and directories. This flag modifies the search behavior by ignoring the case of the characters in the search pattern, meaning that it will match filenames regardless of their case (i.e., upper or lower). This can be useful when looking for files with specific names but not worrying about the case of the letters in the name.'
        list-details: '[AI] `fd --list-details` is a command used in the Fossil SCM (Source Code Management) system. It lists files and directories in a repository with additional details such as their type (regular file, directory, symbolic link), size, last modification time, and checksum. The output is typically displayed in a tabular format for easy reading.'
        max-depth: '[AI] The `fd --max-depth` option is used with the `fd` command-line file finder tool. It limits the search depth, i.e., the number of directories that can be traversed from the starting point before finding files. For example, `fd . --max-depth 1` will search for files only in the current directory, while `fd . --max-depth 2` will search in the current and directly nested directories.'
        no-ignore: '[AI] The `fd --no-ignore` command is used with the `fd` (find-deeper) tool in Linux and other Unix systems for efficient searching of files and directories. The `--no-ignore` option disables the ignoring of hidden files and directories (those whose names start with a dot, e.g., `.git`, `.svn`) during the search. By default, `fd` hides these files and directories for better focus on non-hidden items, but sometimes you might want to include them in your search results.'
        owner: '[AI] The `fd --owner` command is a file finding utility for Linux and macOS that allows users to quickly search for files based on various criteria, including file ownership. The `--owner` option filters the results to only show files owned by a specific user. For example, `fd --type f --owner jdoe /path/to/search` will display a list of files under `/path/to/search` that are owned by the user "jdoe".'
        print0: '[AI] The `fd --print0` command is a file finding tool in Linux and other Unix-like systems. The `--print0` option causes fd to print filenames separated by null characters instead of newlines, which makes it suitable for passing the output directly to other commands using the null-delimited format (NUL). This can be useful when dealing with large numbers of files or integrating fd output into other scripts.'
        size: '[AI] The `fd --size` command is a file finding command in Unix-like operating systems, specifically an alternative to the `find` command. The `--size` option filters files based on their size. It can take sizes in various units such as bytes, KB (kilobytes), MB (megabytes), or even custom sizes like "50M" for 50 megabytes. For example, `fd --type f --size +10M` would find files larger than 10 megabytes in size.'
        type: '[AI] The `fd --type` command is used with `fd`, a powerful and flexible file finder for various file systems. The `--type` option filters the output to only show files of specific types by providing a file extension pattern after it. For example, `fd --type=pdf .` will return all PDF files in the current directory.'
        version: '[AI] `fd --version` is a command used in the terminal or command line interface for using the `fd-find` tool, which is a fast and recursive file finder. The `--version` option displays the current version of the installed `fd-find` software along with any additional build information such as the compilation flags used to build the specific installation. This helps users determine if they have the latest version of the tool or not, and can be useful for troubleshooting issues.'
