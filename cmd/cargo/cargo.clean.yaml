# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clean
description: Remove artifacts that cargo has generated in the past
group: build
flags:
    --doc: Whether or not to clean just the documentation directory
    --manifest-path=: Path to Cargo.toml
    --profile=: Clean artifacts of the specified profile
    --target*=: Target triple to clean output for
    --target-dir=: Directory for all generated artifacts
    -h, --help: Print help
    -p, --package*=: Package to clean artifacts for
    -q, --quiet: Do not print cargo log messages
    -r, --release: Whether or not to clean release artifacts
documentation:
    command: '[AI] `cargo clean` is a command used in Rust programming language''s build system, Cargo. It is used to remove derived artifacts and cache from the current project directory. This includes cleaning up compiled binary files, object files, and other temporary data. Running this command can help free up disk space and ensure that a fresh build starts from scratch.'
    flag:
        doc: '[AI] The command `cargo clean --doc` is used with Cargo, Rust''s package manager. This command cleans up the build artifacts of a Rust project, including compiled code and documentation. The `--doc` flag specifically tells Cargo to also delete the generated documentation files, if any exist.'
        help: '[AI] `cargo clean` is a command used in Rust programming language''s package manager, Cargo. It''s primary function is to remove compiled artifacts and cached downloads from the previous build sessions. The `--help` flag provides detailed information about this command, including its purpose, usage syntax, and available options. You can run `cargo clean --help` in your terminal for specific details on how to use it in your project.'
        manifest-path: '[AI] `cargo clean --manifest-path` is a command used in Rust programming language''s Cargo build tool. It instructs Cargo to remove derived artifacts from the specified manifest path, which is a file that lists metadata about the project and its dependencies. The `--manifest-path` option allows specifying an alternate manifest file location instead of using the default one in the current directory. This command helps keep the build output clean by removing unused files such as compiled binary executables and package caches, making it useful for preparing a workspace for a fresh build or sharing a repository with minimal clutter.'
        package: '[AI] The `cargo clean --package` command is used in Rust programming language projects managed with Cargo build system. This command cleans the project by removing the compiled object files and cached downloaded dependencies, leaving only source code files. By specifying `--package`, Cargo limits the cleaning operation to the specified package only (if you have multiple packages in your project). This can be useful when you want to clean up a specific sub-project while keeping others intact.'
        profile: '[AI] `cargo clean --profile` is a command used in Rust programming language''s build system, Cargo. It instructs Cargo to remove the target directory within the current project, which contains compiled artifacts such as object files and executables. The `--profile` option specifies a Cargo profile to use when performing this action. Profiles allow configuring various aspects of the build process, such as including additional dependencies or optimizing for different platforms.'
        quiet: '[AI] `cargo clean --quiet` is a command used in Rust programming language''s build system, Cargo. This command cleans the output of previous builds by removing the target directory and its contents. The `--quiet` flag suppresses progress messages during the cleaning process to provide a quiet build experience.'
        release: |-
            [AI] `cargo clean --release` is a command used in Rust programming language's build system, Cargo. This command performs two actions:

            1. **Cleaning**: It removes previously compiled binary files and cached artifacts from the current project directory. This ensures that when you rebuild your project, it starts with a clean slate.

            2. **Building in Release mode**: After cleaning, it builds the project for the release configuration. In this mode, Rust compiler applies more aggressive optimizations resulting in smaller binary size and faster execution. The output is a single release executable (without debug symbols) suitable for deployment or distribution.
        target: '[AI] The `cargo clean --target` command is used in Rust programming language''s build system, Cargo. This command cleans the build artifacts for a specific target. A target can be a binary or library, specified by its name. By running `--target`, you can clean only the build outputs for that target instead of cleaning everything. This can save time and resources in case you''re working on multiple targets within the same project.'
        target-dir: '[AI] The `cargo clean --target-dir` command is used in Rust programming language''s build system, Cargo. This command cleans the output of previous builds by deleting the contents of the specified target directory (`--target-dir`). It does not affect source code or configuration files. By default, it cleans the `target` directory, but specifying a different directory with `--target-dir` will clean that one instead. This is useful when you want to force a fresh build or when you are working on multiple projects in the same directory and need to ensure each has its own separate build artifacts.'
