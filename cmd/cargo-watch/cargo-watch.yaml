# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-watch
description: Watches over your Cargo project’s source
flags:
    --debug: Show debug output
    --env-file=: Set environment variables from a .env file
    --features=: List of features passed to cargo invocations
    --ignore-nothing: Ignore nothing, not even target/ and .git/
    --no-dot-ignores: Don’t use .ignore files
    --no-process-group: Do not use a process group when running the command
    --no-restart: Don’t restart command while it’s still running
    --no-vcs-ignores: Don’t use .gitignore files
    --poll: Force use of polling for file changes
    --postpone: Postpone first run until a file changes
    --skip-local-deps: Don't try to find local dependencies of the current crate and watch their working directories. Only watch the current directory.
    --use-shell=: Use a different shell. E.g. --use-shell=bash
    --watch-when-idle: Ignore events emitted while the commands run.
    --why: Show paths that changed
    -B=: Inject RUST_BACKTRACE=VALUE (generally you want to set it to 1) into the environment
    -C, --workdir=: 'Change working directory before running command [default: crate root]'
    -E, --env=: Set environment variables for the command
    -L=: Inject RUST_LOG=VALUE into the environment --use-shell <use-shell>
    -N, --notify: Send a desktop notification when watchexec notices a change (experimental, behaviour may change)
    -V, --version: Display version information
    -c, --clear: Clear the screen before each run
    -d, --delay=: 'File updates debounce delay in seconds [default: 0.5]'
    -h, --help: Display this message
    -i, --ignore=: Ignore a glob/gitignore-style pattern
    -q, --quiet: Suppress output from cargo-watch itself
    -s, --shell*=: Shell command(s) to execute on changes
    -w, --watch=: Watch specific file(s) or folder(s). Disables finding and watching local dependencies.
    -x, --exec*=: 'Cargo command(s) to execute on changes [default: check]'
documentation:
    command: '[AI] `cargo-watch` is a Rust library and CLI tool that provides real-time build and test monitoring for Rust projects using Cargo. It watches the file system for changes, then automatically rebuilds and tests the affected parts of the project. This continuous integration capability enhances productivity by reducing feedback loops during development.'
    flag:
        B: '[AI] `cargo watch` is a Rust tool for automating tasks based on file changes. The `-B` or `--background` flag is used to run the command in the background as a daemon process, continuously monitoring files and triggering tasks accordingly. With this flag, `cargo watch` keeps running even if you open a new terminal session or close the current one. It''s particularly useful when working on long-running projects where continuous feedback is required.'
        L: '[AI] `cargo-watch` is a Rust tool for automatic rebuilding and testing of projects during file changes. The `-L` flag is used to specify a regular expression pattern for listening to files and triggering actions. When set, only files matching the pattern will be monitored for changes. For example, `-L ''*.rs''` would listen for changes in Rust source files only.'
        clear: '[AI] `cargo-watch` is a Rust tool for automatic recompilation and testing when file changes are detected. The command `cargo-watch --clear` is used to clear the cache of previously compiled artifacts and rebuild everything from scratch. This can be useful in cases where you want to ensure that all dependencies are rebuilt or if you encounter build issues. Running this command will restart the watch process, which will then monitor for file changes and rebuild the affected projects accordingly.'
        debug: '[AI] `cargo-watch` is a Cargo extension that automatically rebuilds and runs tests when files change in a Rust project. The `--debug` flag is used to enable debug mode, which provides more detailed output and can help with troubleshooting issues. In debug mode, `cargo-watch` will print the files being watched, the events causing rebuilds, and other verbose information about its behavior. This can be useful for understanding what files are causing rebuilds or identifying potential performance bottlenecks.'
        delay: '[AI] `cargo-watch` is a Rust tool for automatic rebuilding and testing of projects. The `--delay` option sets a delay between automated builds and tests, which can be useful to prevent excessive resource usage or unnecessary interruptions. When `--delay` is specified with a value, such as "5s" for 5 seconds, the command will wait before running the next build or test cycle. This allows you to configure how often `cargo-watch` performs checks on your project.'
        env: '[AI] `cargo-watch` is a Rust tool used to automatically build and test your project whenever its dependencies or files change. The `--env` flag is an option provided with this command, which allows setting environment variables for the child processes that `cargo-watch` spawns during the build and test processes. This can be useful in managing complex projects where certain environment variables are required to run tests or build specific features. For instance, you might use `--env "VAR=VALUE"`, where `VAR` is an env variable and `VALUE` is its value, to pass different configuration settings to your project.'
        env-file: '[AI] `cargo-watch` is a Cargo subcommand for automatically running tests, building, and watching for changes in Rust projects. The `--env-file` flag is used to specify an external file containing key-value pairs that will be treated as environment variables when running the command. This can be useful for managing project-specific configurations or secrets without hardcoding them directly into the script.'
        exec: '[AI] `cargo-watch` is a Rust tool for automating and watching build processes. The command `cargo watch --exec <command>` sets up a continuous integration-like workflow locally. With this command, whenever a change is detected in the source files or dependencies, the specified `<command>` will be executed automatically. For example, if you use `--exec ''rustc && cargo test''`, it will compile and run tests whenever changes occur.'
        features: '[AI] `cargo-watch` is a Cargo extension that watches for file changes and automatically builds and tests the affected Rust projects. The `--features` option is used when defining a Cargo project''s features in the `Cargo.toml` file. When you run `cargo watch --features <your_feature>`, it will only trigger rebuilds and tests when files related to the specified feature are modified. This helps improve build times and efficiency by focusing on the specific parts of your project that have changed.'
        help: |-
            [AI] `cargo-watch` is a Cargo extension for Rust programming language, providing real-time build and test feedback. The `--help` flag is used to display comprehensive usage information when running the command with this flag. Here's an overview:

            ```sh
            $ cargo watch --help

            USAGE:
            cargo watch [OPTIONS]

            Watches your Cargo project and runs specified commands for file changes.

            FLAGS:
                --no-color          Disable colored output.
                --verbose           Show verbose messages.

            COMMANDS:
            watch, w   Start watching the project for changes and running the commands accordingly.
            ```

            This command displays a brief usage instruction with available options (`--no-color` and `--verbose`) and commands (`watch` or `w`). The `watch` command is used to start the real-time build and test feedback loop for your Rust project.
        ignore: '[AI] `cargo-watch` is a Cargo extension for automatically rebuilding and running when files matching specified patterns change. The `--ignore` (or `-i`) flag is used to exclude specific directories or files from being monitored by `cargo-watch`. This can be useful to prevent constant rebuilds due to changes in unrelated files or directories, improving the development workflow efficiency. For example, running `cargo watch ''-- --ignore=path/to/directory''` will start monitoring for changes in the project, excluding the specified directory.'
        ignore-nothing: '[AI] `cargo-watch` is a Rust tool for automatic rebuilding and testing of projects using Cargo, the Rust package manager. The command `--ignore-nothing` is an option for this tool. With this option, `cargo-watch` will not ignore any files or directories during its file monitoring, ensuring that all changes are detected and responded to accordingly. This can be useful when working on a complex project with many interconnected components and wanting to ensure that every change is taken into account.'
        no-dot-ignores: '[AI] `cargo-watch` is a Rust tool for automatically re-running tests, linting, and building when files change. The command `--no-dot-ignores` is an option passed to it, which disables the ignoring of hidden directories (dot-directories, i.e., directories starting with a dot like `.git` or `.vscode`) during file watching. This means that any changes made to those directories will trigger a new build cycle, unlike when using the default behavior where they are ignored.'
        no-process-group: '[AI] `cargo-watch` is a Rust tool for automated compilation and testing of Rust projects. The `--no-process-group` flag is an option that disables running commands in separate process groups. This means that any output or error messages from the commands will be printed to the console in real-time, without being grouped under a single process ID. It''s useful when debugging and for better visibility into the build and test processes.'
        no-restart: '[AI] `cargo-watch` is a Rust tool for automatically rebuilding and running your project when its files change. The `--no-restart` flag inhibits `cargo-watch` from automatically restarting the application after a build or run command. This means that you would need to manually restart the application yourself whenever you make changes to the code.'
        no-vcs-ignores: '[AI] `cargo-watch` is a Rust tool for automatically running tests, building and watching for changes in your project. The command `--no-vcs-ignores` is an option that disables the ignoring of files marked as ignored by version control systems like Git. With this flag enabled, any file matching a .gitignore pattern will still be monitored and processed by cargo-watch. This can be useful when you want to make sure specific files are included in your build or test processes even if they have been excluded from version control.'
        notify: '[AI] `cargo-watch` is a Rust tool for automating and watching build processes. The command `--notify` is an option it accepts that enables file system event notifications using the `inotify` or `fsnotifier` libraries on Unix systems. This allows `cargo-watch` to automatically trigger builds whenever relevant files are modified, without needing to constantly poll for changes. It''s useful for real-time development and testing workflows.'
        poll: '[AI] `cargo-watch` is a Rust tool for automatic rebuilding and testing of projects during file changes. The command `--poll` is an option used to enable continuous polling for file changes. With this flag, `cargo-watch` actively monitors the project directory for any modifications, triggering a build or test run accordingly. This results in near real-time feedback for developers as they work on their code.'
        postpone: '[AI] `cargo-watch` is a Cargo extension for Rust that provides real-time build and test feedback. The `--postpone` flag modifies its behavior to delay running tasks, such as builds or tests, until certain conditions are met. For example, it can wait until specific files have been saved or modified before executing the tasks. This can be useful for development workflows where you want to avoid unnecessary builds or tests while making changes to your code.'
        quiet: '[AI] `cargo-watch` is a Rust tool for automatically running and testing tasks defined in a Cargo.toml file when files are modified. The command `cargo-watch --quiet` tells the tool to run without printing any messages or progress updates to the terminal. This option is useful when you want to run `cargo-watch` in the background or in automated scripts where you don''t need to see the output.'
        shell: '[AI] `cargo-watch` is a Rust tool for automatically running tests, linting, and building your project whenever files change. The command `cargo-watch --shell` starts an interactive shell within the project directory where `cargo.toml` is located. With this command, any changes made to the source code or configuration files will trigger corresponding tasks (tests, linting, build) in real time without having to manually run each one individually. This provides a seamless development experience and helps ensure that your project remains up-to-date throughout the building process.'
        skip-local-deps: '[AI] `cargo-watch` is a Cargo build automation tool for Rust programming language projects. The `--skip-local-deps` flag is an option used to instruct `cargo-watch` to not build or rebuild local dependency crates during the project''s build process. Instead, it will rely on previously built dependency crates in the target directory. This can save time and resources, especially when working on large projects with many dependencies.'
        use-shell: '[AI] `cargo-watch` is a Rust tool for automatically running and retesting commands when files matching specified patterns are modified. The `--use-shell` option tells `cargo-watch` to run the given commands in the shell instead of using Rust''s built-in `stdin`, `stdout`, and `stderr`. This can be useful if the commands require more complex handling or if they rely on shell features such as pipes, redirections, or aliases.'
        version: '[AI] `cargo-watch` is a Cargo extension tool for Rust programming language, which provides real-time build and test monitoring. The command `cargo watch --version` is used to check for the current version of cargo-watch installed in your system. When you run this command in your terminal or command prompt, it will display the version number and some additional information about the installed cargo-watch package, such as its Git commit hash, build date, and author details. This helps ensure that you are using an up-to-date version of the tool for your projects.'
        watch: '[AI] `cargo-watch` is a Rust library providing real-time build and test feedback for Cargo projects. The command `cargo watch --watch` starts the tool with the `--watch` flag enabled. This mode continuously monitors source files, executes tests or builds when changes are detected, and provides instant feedback on the status of your project.'
        watch-when-idle: '[AI] `cargo-watch` is a Rust tool for automating build tasks and watching for file changes. The `--watch-when-idle` flag modifies its behavior to only start watching for changes when there are no ongoing builds or tests. This means that the tool will conserve resources by not constantly checking for changes when there''s nothing to do, but will still react promptly once new changes occur.'
        why: '[AI] `cargo-watch` is a Cargo subcommand for automatically compiling and testing Rust projects whenever specified files change. The `--why` flag is used to print a brief explanation of why a specific action was taken, such as a file being compiled or tested. It helps in understanding the reasoning behind the command''s output.'
        workdir: '[AI] `cargo-watch` is a Cargo sub-command that automates building and testing Rust projects whenever files change. The `--workdir` option specifies the working directory for `cargo-watch`. It runs `cargo` commands (like `build`, `test`) relative to this directory, allowing you to monitor multiple projects with different root directories from a single location.'
