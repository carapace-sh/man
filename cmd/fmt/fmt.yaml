# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fmt
description: simple optimal text formatter
flags:
    --help: display this help and exit
    --version: output version information and exit
    -c, --crown-margin: preserve indentation of first two lines
    -g, --goal=: goal width (default of 93% of width)
    -p, --prefix=: reformat only lines beginning with STRING,
    -s, --split-only: split long lines, but do not refill
    -t, --tagged-paragraph: indentation of first line different from second
    -u, --uniform-spacing: one space between words, two after sentences
    -w, --width=: maximum line width (default of 75 columns)
documentation:
    command: '[AI] `fmt` is a standard library package in Go programming language used for input and output operations, specifically formatting and printing data. It provides functions like `Print()`, `Printf()`, `Scanf()`, etc., which help format and display data in various ways to the standard output (usually the terminal).'
    flag:
        crown-margin: '[AI] The `fmt --crown-margin` flag is a formatting option in Go language''s `fmt` package. It sets the width of the horizontal blank space before and after a crown (three asterisks ***) used to indicate an ellipsis in `%s` or `%v` format specifiers. This flag helps control the visual alignment of strings when printing them with ellipses.'
        goal: |-
            [AI] The `fmt --goal` flag is specific to the Go programming language's `fmt` package. It is used to control the formatting goal of the `Print()`, `Printf()`, `Scanf()`, and other related functions.

            The available goals are:

            * `-` or `default`: This is the default goal, which performs minimal output escaping. It does not print the escape sequence for Unicode code points greater than U+007F.
            * `c`: This goal is used for printing a single character. All output will be escaped as needed.
            * `q` or `json`: This goal is used for printing JSON-encoded data. All output will be double-quoted and properly escaped according to JSON rules.
            * `s`: This goal is used for printing strings with minimal escaping, suitable for display on the terminal. Backslash-escaped characters like backslash (`\`) itself are not escaped. Unicode code points greater than U+007F will be printed as \uxxxx where xxxx is the hexadecimal representation of the code point.
            * `n`: This goal is used for printing numbers with minimum formatting. It does not include commas or other formatting characters for large numbers, and does not perform scientific notation for very small or very large numbers.
        help: '[AI] `fmt --help` is a command used in Go programming language to display help information about the `fmt` package. When executed, it prints out detailed usage information, including a list of functions and their corresponding formats, that can be used for input and output operations such as printing text or formatting values. This command provides valuable insight for developers when working with the `fmt` package to write clean, efficient, and error-free code.'
        prefix: |-
            [AI] The `--prefix` flag in the `fmt` command (used in Go programming language) modifies the output format of source code by adding a prefix string to each line. For example, if you have a long file path and want to include it as a comment at the beginning of each file when formatting, you can use this flag:

            ```bash
            fmt --prefix="// <filepath>" <files>
            ```

            Replace `<filepath>` with the actual file path. The prefix string will be added to the beginning of each line in the source code files that are being formatted.
        split-only: '[AI] The `fmt --split-only` command in Go is used to split Go source files into individual pieces based on the packages they define. It does not perform any formatting or compilation tasks. The output of this command are separate Go files, each containing the code for a single package. This can be useful for managing large projects with multiple packages, as it allows for easier organization and version control.'
        tagged-paragraph: '[AI] The `--tagged-paragraph` flag is a formatting option for the Go programming language''s `fmt` package. When set, it formats output in a way that groups multi-line text into distinct paragraphs, with each paragraph being indented and preceded by a blank line. This can make the output of long or complex data structures more visually organized and easier to read.'
        uniform-spacing: '[AI] The `--uniform-spacing` flag in the `fmt` command of various programming languages (like Go or Rust) is used to enforce consistent spacing styles within a code file. With this option, all elements in a line are aligned at the same column, ensuring uniform visual appearance and making the code easier to read and maintain. It typically aligns elements based on logical groupings, such as operators and keywords.'
        version: '[AI] The `fmt --version` command is used in Go programming language to check and display the version information of the ''fmt'' package that is installed and being used in the current environment. When you run this command in a terminal or console, it will print out the major.minor version number of fmt along with any other relevant build metadata. This helps ensure that you are using the correct version of the fmt package for your project and that it is compatible with your Go compiler.'
        width: '[AI] The `fmt --width` flag is used with the `fmt` command in various Unix-like operating systems and Go programming language. In its simplest form, it sets the maximum width for output lines printed by `fmt`. For instance, when formatting text or tables, using this flag ensures that each line doesn''t exceed a certain length to maintain readability. It helps prevent lines from being truncated unexpectedly when displayed in environments with limited column widths.'
