# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: deploy
description: Deploy your site to a Cloud provider.
flags:
    --confirm: ask for confirmation before making changes to the target
    --dryRun: dry run
    --force: force upload of all files
    --invalidateCDN: invalidate the CDN cache listed in the deployment target
    --maxDeletes=: 'maximum # of files to delete, or -1 to disable'
    --target=: target deployment from deployments section in config file; defaults to the first one
documentation:
    command: |-
        [AI] The `hugo deploy` command is used in Hugo, a popular static site generator for creating blogs and websites. This command is not actually a built-in command in Hugo but rather represents a common workflow for publishing your generated content from Hugo to a hosting platform or CDN (Content Delivery Network).

        Here's a simplified explanation of the steps involved when you use `hugo deploy`:

        1. Build the site: First, Hugo generates the static files for your website or blog by processing your content and templates using the `hugo` command.
        2. Export the site: The generated files are placed in a specific output directory (usually `public/`). This step is not explicitly stated as it's an automatic part of the Hugo build process.
        3. Transfer the site to your hosting provider or CDN: You use other tools, like SSH, rsync, or FTP clients, or a CI/CD platform (e.g., GitHub Pages, Netlify, or Vercel) to copy the generated files from your local machine to your remote server or CDN storage.
        4. Update DNS records: Depending on your hosting provider, you may need to update your DNS records to point to the new location of your site.
        5. Verify publication: Finally, visit your website in a web browser to ensure that it's published and accessible to the public.

        Overall, `hugo deploy` is not a single command but rather a workflow encompassing various steps for publishing your Hugo-generated static site on the web.
    flag:
        confirm: '[AI] `hugo deploy --confirm` is a command used in Hugo, a popular static site generator. This command deploys a generated static website to a remote server or hosting platform after confirmation. The `--confirm` flag ensures that the user intentionally initiates the deployment process and prevents accidental or automated deployments. Once the user confirms the deployment, the process continues with the transfer of files from the local system to the remote server.'
        dryRun: '[AI] `hugo deploy --dryRun` is a command used in Hugo, a popular static site generator for building websites and blogs. This specific command is not actually deploying anything, but instead it''s running the deployment process in a simulation or "dry run" mode. It allows users to preview the changes that would be made during a regular deployment without actually making those changes live. The output will show what files would be created, modified, or deleted during the actual deployment process. This can help users ensure they are ready for a deployment before executing the final command with `--live-reload` or `--no-render`.'
        force: '[AI] `hugo deploy --force` is a command used with Hugo, a popular static site generator. This command deploys a newly built Hugo website to a destination server or hosting platform using an external tool or method specified in the Hugo configuration file. The `--force` flag is optional and forces Hugo to overwrite existing files on the destination without asking for confirmation. It''s useful when you want to deploy updates or changes without being prompted for each file. Use it with caution to avoid accidental data loss.'
        invalidateCDN: |-
            [AI] `hugo deploy --invalidateCDN` is a command used in Hugo, a popular static site generator for building websites and blogs. This specific command is utilized for deploying a website or a blog that's been built locally to a CDN (Content Delivery Network) with Hugo.

            When you run `hugo deploy --invalidateCDN`, the following process occurs:

            1. Hugo builds your static files and generates a new version of your website, which is typically stored in the output directory (by default, `public/`).
            2. After generating the new content, Hugo then invalidates (or clears) the cached files on your CDN. This means that when the old version of the site is accessed from the CDN, it will be replaced by the freshly generated and deployed static files.
            3. Once the caching is cleared, the CDN begins distributing the new content to its edge nodes worldwide.
            4. The result is a quick and efficient deployment process where your website or blog gets updated on the CDN with minimal latency.
        maxDeletes: '[AI] The `hugo deploy --maxDeletes` command is a feature in Hugo, a popular static site generator, used during deployment to limit the number of file deletions made by GitHub Pages'' Jekyll engine when updating a Hugo site. The `--maxDeletes` flag sets an upper limit on the number of files to be deleted during the deployment process. If the actual number of deleted files exceeds this limit, the deployment will fail to prevent potential data loss.'
        target: '[AI] `hugo deploy --target` is a command used in Hugo, a popular static site generator. This command deploys a Hugo site to a specified target environment or destination platform. It builds the site and generates the static files, then uses an external tool like Git or FTP to publish those files to the target location. The specifics of the deployment process depend on the target configuration set up in your Hugo site''s `config.toml` file.'
