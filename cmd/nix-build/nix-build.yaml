# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: nix-build
description: build a Nix expression
flags:
    --arg*=: Pass [name] [expr] to Nix functions.
    --argstr*=: Pass [name] [string] to Nix functions
    --dry-run: Show what store paths would be built or downloaded
    --help: Show usage information
    --no-out-link: Do not create a symlink to the output path
    -A, --attr=: Attribute to build
    -I, --include=: Include paths
    -o, --out-link=: Change the name of the symlink to the output path
documentation:
    command: '[AI] `nix-build` is a command used in Nix, a package manager for Linux and other Unix systems. It builds and constructs a Nix expression into a store, which is then available for use in the system. The expression can be a single package or a collection of packages, and the command generates the necessary outputs (like binaries, libraries, or configuration files) during the build process. The resulting store items are managed within the Nix profile directory and can be easily updated or switched between different versions.'
    flag:
        arg: '[AI] `nix-build` is a command-line utility from the Nix Package Manager used to build and manage software packages. The `--arg` option is used to pass arguments to the build process. These arguments can be used in the Nix expression defining the package to customize its behavior or configuration during the build process. For example, `nix-build --arg myArg=value myPackage/`. This sets the value of `myArg` to `value` for the specified package build.'
        argstr: '[AI] `nix-build` is a command-line tool for building and managing Nix packages. The option `--argstr` is used to pass arguments to a build or configuration function of a Nix package. The argument is typically a string, and can be used to customize the behavior of the build process. For example, `nix-build --argstr foo="bar" project` would pass the argument "foo=bar" to the build process of project.'
        attr: |-
            [AI] The `nix-build` command is a utility from Nix Package Manager, which is used to build and manage software packages in a reproducible way. The `--attr` option is used to display or modify attributes of a specific Nix expression or package.

            When you run `nix-build --attr expression`, it will print out the value of the specified attribute for that expression. For example, `nix-build --attr path hash/store/expression` would display the file path where the built package will be stored.

            If you want to modify an attribute's value, use `--attribute name=value`. For instance, `nix-build --attribute buildInputs.gcc=7.3.0 expression` sets the version of gcc used for building the package to 7.3.0.
        dry-run: '[AI] `nix-build` is a command-line utility from Nix Package Manager used to build and manage software packages. The `--dry-run` option is used to perform a simulation of a build or installation without actually executing any commands or making any changes to the file system. This allows users to see what actions would be taken before committing to the actual build or installation process. In essence, it provides a preview of the intended outcome.'
        help: |-
            [AI] `nix-build` is a command-line utility from Nix Pakages Manager. The `--help` option provides a summary of possible commands and their usage, displaying detailed help information for each one.

            Usage: `nix-build [OPTIONS] PATH...` or `nix-build --check [OPTIONS] PATH...`

            Options:
            - `--dry-run`: Do not build or install anything. Print what would be done.
            - `--no-daemon`: Do not use the daemon for building and checking.
            - `--quiet`: Suppress progress messages.
            - `--verbose`: Print detailed progress messages.
            - `--allow-unfree`: Build unfree packages.

            Commands:
            - `build`: Build a single project or multiple projects in parallel.
            - `check`: Check the build of a project without actually building it.
        include: '[AI] The `nix-build` command is a part of Nix, a package manager for Linux and other Unix systems. The `--include` option is used to specify a list of packages or files whose builds should be included in the current build process. This can be useful when you want to build multiple related projects at once. For example, if project A depends on library B, you can use `nix-build --include projectA.nix libraryB.nix` to build both projects and their dependencies together.'
        no-out-link: '[AI] `nix-build` is a command-line utility from Nix Package Manager used to build and manage software packages. The option `--no-out-link` tells `nix-build` not to create output links during the build process. Output links are symbolic links that point to the actual built outputs located in the build-output directory. By disabling this option, the actual outputs will be placed directly in the current working directory instead of being linked. This can be useful for debugging or analyzing the build results without dealing with symlinks.'
        out-link: '[AI] `nix-build` is a command-line tool from the Nix Package Manager used to build and manage software packages. The `--out-link` option specifies an output link for the built package or application, which is a symbolic link pointing to the actual binary or output file located in a different directory. This can be useful when installing multiple versions of the same package side by side or when managing system paths. When using this option, Nix creates the specified link instead of replacing any existing links with the new version.'
