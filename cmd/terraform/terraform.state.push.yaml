# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: push [options] PATH
description: Update remote state from a local state file
flags:
    -force: Write the state even if lineages don't match or the remote serial is higher
    -lock: Don't hold a state lock during the operation
    -lock-timeout?: Duration to retry a state lock
documentation:
    command: '[AI] `terraform state push` is a Terraform CLI command used to send the current state of your infrastructure to the Terraform State File back-end, such as Terraform Cloud or Amazon S3. This action updates the remote state with the latest configuration, enabling multiple users or Terraform runs to access and manage the same infrastructure consistently.'
    flag:
        force: '[AI] The `terraform state push -force` command is used in Terraform, an open-source infrastructure as code software tool, to forcefully apply and save the current state of your infrastructure configuration to the remote Terraform State file. This command overrides any potential conflicts or differences between your local and remote state files. It should be used with caution as it can lead to unintended changes in your infrastructure configuration if not fully understood or if incorrectly applied.'
        lock: '[AI] `terraform state push --lock` is a command used in Terraform, an open-source infrastructure as code software tool. This command is used to apply and push a lock file to a remote Terraform Cloud or other version control system after making changes to your infrastructure configuration. The lock file ensures that multiple team members do not make conflicting changes to the same resources, ensuring consistency and reducing potential errors. This command also creates a new checkpoint in Terraform''s state management system and makes it available for other team members to apply.'
        lock-timeout: '[AI] `terraform state push --lock-timeout` is a command used in Terraform, an open-source infrastructure as code software tool. This command is used to apply the current Terraform configuration and push the resulting state to the remote Terraform State file stored in a backend such as AWS S3 or Consul. The `--lock-timeout` option sets the length of time (in seconds) that Terraform should attempt to acquire a lock on the state file before giving up and returning an error. This is useful in multi-person teams or environments where multiple users may be making changes to infrastructure, ensuring that only one person can modify the state file at a time to avoid conflicts.'
