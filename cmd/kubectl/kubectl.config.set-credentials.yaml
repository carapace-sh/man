# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]
description: Set a user entry in kubeconfig
flags:
    --auth-provider-arg*=: '''key=value'' arguments for the auth provider'
    --auth-provider=: Auth provider for the user entry in kubeconfig
    --client-certificate=: Path to client-certificate file for the user entry in kubeconfig
    --client-key=: Path to client-key file for the user entry in kubeconfig
    --embed-certs?: Embed client cert/key for the user entry in kubeconfig
    --exec-api-version=: API version of the exec credential plugin for the user entry in kubeconfig
    --exec-arg*=: New arguments for the exec credential plugin command for the user entry in kubeconfig
    --exec-command=: Command for the exec credential plugin for the user entry in kubeconfig
    --exec-env*=: '''key=value'' environment values for the exec credential plugin'
    --password=: password for the user entry in kubeconfig
    --token=: token for the user entry in kubeconfig
    --username=: username for the user entry in kubeconfig
documentation:
    command: '[AI] `kubectl config set-credentials` is a Kubernetes command used to create or update user authentication credentials in the current kubeconfig file. The syntax is as follows: `kubectl config set-credentials <NAME> --client-cert=<PATH_TO_CLIENT_CERT> --client-key=<PATH_TO_CLIENT_KEY> --embed-certs=true`. Here, `<NAME>` is the name of the new user context to be created, and `<PATH_TO_CLIENT_CERT>` and `<PATH_TO_CLIENT_KEY>` are the local file paths for the client certificate and key files, respectively. The `--embed-certs=true` flag indicates that the certificate contents should be embedded in the output YAML. This command modifies your kubeconfig to allow you to use specific credentials when configuring other Kubernetes commands or resources.'
    flag:
        auth-provider: '[AI] The `kubectl config set-credentials` command is used to create or update a specific Kubernetes user account and its corresponding authentication credentials in the local Kubectl configuration file. The `--auth-provider` flag is optional and if provided, it specifies the type of authentication provider to be used for this credential. For example, you might use `--auth-provider=configMapKeyRef` or `--auth-provider=gcp`. By configuring the credentials with an auth-provider, Kubectl can authenticate and interact with the desired cluster using that specified authentication method.'
        auth-provider-arg: |-
            [AI] `kubectl config set-credentials` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is utilized for managing the authentication credentials in your local Kubernetes configuration.

            The specific option you mentioned is `--auth-provider-arg`, which is an argument provided to certain authentication plugins or extensions that are used with Kubernetes. When you set up such a plugin, it may require additional arguments for proper functioning, and this flag is used to pass those arguments along with the credential configuration.

            In summary, `kubectl config set-credentials --auth-provider-arg` sets a new authentication credential in your Kubernetes configuration while also passing any required arguments for that specific authentication plugin.
        client-certificate: '[AI] `kubectl config set-credentials` is a command used with Kubernetes'' `kubectl` tool to manage configuration settings, specifically for setting up new user credentials. The `--client-certificate` flag is used to specify the path to the client certificate file when creating or updating a user account in the kubeconfig file. This certificate, along with its corresponding private key and the CA certificate, form an SSL/TLS certificate pair that authenticates the client to the Kubernetes cluster API server.'
        client-key: |-
            [AI] `kubectl config set-credentials` is a command used in Kubernetes to manage client configuration. The specific form you provided, `kubectl config set-credentials --client-key`, is for creating or updating a new user credential with a specified client certificate key.

            This command takes the following arguments:

            1. `--client-key`: The path to the client certificate key file.
            2. (Optional) `--client-cert`: The path to the client certificate file. If not provided, it's assumed that the current directory contains a file with the same name as the key file and a .crt or .pem extension, which will be used as the certificate.
            3. `<name>`: The name of the user or context being updated.

            The command updates or creates a new entry in the kubectl configuration file (~/.kube/config by default) with the given client key and associated certificate, if provided. This allows users to authenticate themselves to the Kubernetes cluster using this client key pair.
        embed-certs: '[AI] `kubectl config set-credentials --embed-certs` is a command used with the Kubernetes command-line interface (CLI) tool `kubectl`. This command is utilized to create or update a new Kubernetes user account, and it comes with embedded X.509 client certificates and private keys in the kubeconfig file. The --embed-certs flag ensures that these credentials are securely stored within the .kube/config file, which avoids having to manage external certificate files. This is particularly useful when dealing with self-signed or locally issued certificates.'
        exec-api-version: |-
            [AI] `kubectl config set-credentials` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is responsible for managing and configuring user credentials in the `kubeconfig` file. The `--exec-api-version` option specifies the API version to use when executing this command.

            When you set a new credential with `set-credentials`, you're essentially creating or updating an entry within your `kubeconfig` file that includes the authentication information for a specific cluster or context (e.g., username, password, client certificate). The `--exec-api-version` option allows you to specify which API version to use when interacting with the Kubernetes API server while performing this command. This can be useful if your cluster uses a different API version than the default one and you want to ensure that `kubectl` communicates effectively with it.
        exec-arg: |-
            [AI] `kubectl config set-credentials --exec-arg` is a command used in Kubernetes to manage user authentication credentials (contexts, users, and certificates). The `--exec-arg` option is specifically used when creating or updating a new credential with the `create` or `set` subcommands.

            The argument provided to `--exec-arg` is appended as an additional argument to any command executed using the created or updated credential. It allows passing custom arguments to commands run within a container or cluster environment. This can be useful for setting environment variables, specifying additional flags, or providing custom configurations that are required for specific use cases.

            For example:
            ```bash
            kubectl config set-credentials myuser --cert cert.pem --key key.pem --exec-arg=MY_VAR="value"
            ```
            This command creates a new credential named `myuser` and sets the certificate (`.pem`) and key files. Additionally, it appends the custom argument `--exec-arg=MY_VAR="value"` to any command that uses this credential. Now when you use this credential to run a command:
            ```bash
            kubectl exec my-pod -- /bin/sh -c 'echo $MY_VAR' --context myuser
            ```
            The output will be `"value"` because the custom argument is passed along with the command.
        exec-command: '[AI] `kubectl config set-credentials --exec-command` is a command used in Kubernetes to manage and configure authentication credentials. This specific command allows you to create or update a credential configuration with an optional executable command that will be run when the credential is used. The command is usually used for managing dynamic or short-lived credentials, where an executable command is provided to obtain or renew the token before use. It''s important to note that the `--exec-command` flag should contain a valid shell command.'
        exec-env: |-
            [AI] `kubectl config set-credentials --exec-env` is a subcommand used in Kubernetes' `kubectl` command-line interface (CLI) for managing container clusters. This command is responsible for creating or updating a named Kubernetes configuration with new authentication credentials.

            The `--exec-env` flag is an optional argument that allows you to set environment variables for the command executed with these new credentials. This can be particularly useful when configuring commands like `kubectl exec`, allowing you to pass dynamic values from your local machine into the container environment.
        password: '[AI] `kubectl config set-credentials --password` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to create or update user-level credentials in the local Kubernetes configuration file. The `--password` flag is used to specify the new password for the given credential. When you run this command, it sets or updates the password for an existing user under the default context in your kubectl configuration file. This command does not display the new password on the screen, which helps maintain security by keeping sensitive information hidden.'
        token: |-
            [AI] `kubectl config set-credentials --token` is a command used in Kubernetes to create or update a new user authentication credential object with a token in the kubeconfig file. The kubeconfig file stores the configuration data for using various clients like `kubectl` to interact with a cluster.

            This command sets the username for the new credential and then provides the token as its password. The updated credential is saved in the active context within the kubeconfig file, enabling users to authenticate and use `kubectl` with the specified authentication method when accessing the Kubernetes cluster.
        username: |-
            [AI] `kubectl config set-credentials --username` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command sets or updates the username for an existing user in the `kubeconfig` file. The `kubeconfig` file stores authentication and context information for accessing clusters managed by `kubectl`. By specifying a new username with this command, you can configure `kubectl` to use that username when connecting to a cluster. For example:

            ```bash
            kubectl config set-credentials myusername --username=mynewusername
            ```

            Replace "myusername" with the name of the user in your `kubeconfig`, and "mynewusername" with the desired new username. This command doesn't change the context, but if you want to apply this updated credential to a specific context, use the `--context` flag:

            ```bash
            kubectl config set-credentials myusername --username=mynewusername --context mycontext
            ```
