# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: git-archive-file
description: Export the current HEAD of the git repository to an archive
flags:
    --help: Display help message
documentation:
    command: |-
        [AI] `git archive` is a Git command used to create a new archive of all files in the current repository, including the entire history and metadata. The resulting archive can be saved as a single file with various compression formats like gzip or tarball. This command is particularly useful when you want to share a complete snapshot of your repository with others who don't have write access to it. The command takes options such as `<file>` to save the output in a specified file, and `--format=<format>` to specify the desired archive format. For example:

        ```
        git archive --oneline HEAD > my_snapshot.tar.gz
        ```

        This command creates an archive named "my\_snapshot.tar.gz" with the current repository's state, including all commit messages in a concise one-line format.
    flag:
        help: |-
            [AI] `git-archive-file` is a Git command used to create a single file archive of a given Git tree object or commit. The `--help` option displays the usage and available options for this command. Here's a brief explanation:

            ```
            git archival-file [<options>] [<tree|commit>] [<file>]

            Options:
              --prefix=<prefix>           Prefix for archive files (defaults to <tree|commit>.gz)
              --format=<format>          Format of the archive file (e.g., tar, zip)
                                        Default is 'tar.gz' for a single-file archive.
              --standard-names            Use standard names for archive members.
              --no-hard-links             Do not create hard links within the archive.
              --base-transport=<transport>  The transport method to use when fetching remote trees or commits.
                                          This option is only applicable when creating a tree archive.
            ```

            The command can take an optional `<options>` argument that includes various flags like `--prefix`, `--format`, `--standard-names`, and `--no-hard-links`. These options allow you to customize the output file format, name, and behavior when creating the archive. The command also accepts a mandatory argument `<tree|commit>` (the Git object to archive), and an optional argument `<file>` for specifying the output file name.
