# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: etcd-server
description: Generate the certificate for serving etcd
flags:
    --cert-dir=: The path where to save and store the certificates.
    --config=: Path to a kubeadm configuration file.
    --kubernetes-version=: Choose a specific Kubernetes version for the control plane.
documentation:
    command: '[AI] The `kubeadm init` command is used to bootstrap a new Kubernetes cluster. The `phase certs etcd-server` subcommand generates and configures SSL certificates for secure communication between etcd server nodes and the Kubernetes control plane components. This ensures encrypted data storage and access in the cluster.'
    flag:
        cert-dir: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `phase certs etcd-server --cert-dir` option specifies that this particular phase of the initialization process involves generating and managing TLS certificates for the Etcd server component. The `--cert-dir` flag sets the output directory for storing these certificates, which can later be used to securely communicate with the Etcd server in the cluster.'
        config: |-
            [AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `phase certs etcd-server` argument within this command is specifying that the "etcd-server" certification authority (CA) and server certificates should be generated during this phase of initialization.

            In other words, it's creating SSL/TLS certificates for the etcd server component which is a crucial part of Kubernetes' cluster infrastructure as it stores the cluster configuration data. These certificates ensure secure communication between different components within the cluster.
        kubernetes-version: '[AI] `kubeadm init` is a command-line tool used to bootstrap a Kubernetes cluster. The `phase certs etcd-server` subcommand generates and configures the SSL certificates for the etcd server component in a Kubernetes cluster using the specified Kubernetes version. This is an important step during cluster setup as etcd, being the key-value store and persistent data holder for Kubernetes, must secure its communication channels with encrypted certificates to ensure data integrity and confidentiality.'
