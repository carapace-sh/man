# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: info
aliases:
    - abv
description: Display brief statistics for your Homebrew installation
flags:
    --analytics: List global Homebrew analytics data
    --cask: Treat all named arguments as casks
    --category=: Which type of analytics data to retrieve
    --days=: How many days of analytics data to retrieve
    --debug: Display any debugging information
    --eval-all: Evaluate all available formulae and casks
    --formula: Treat all named arguments as formulae
    --github: Open the GitHub source page for <formula> and <cask> in a browser
    --help: Show this message
    --installed: Print JSON of formulae that are currently installed
    --json: Print a JSON representation
    --quiet: Make some output more quiet
    --variations: Include the variations hash in each formula's JSON output
    --verbose: Show more verbose analytics data for <formula>
documentation:
    command: '[AI] `brew info` is a Homebrew command used to display detailed information about an installed package, including its version, installation path, dependencies, and installation date. It provides useful information for troubleshooting and managing Homebrew installations.'
    flag:
        analytics: '[AI] `brew info --analytics` is a Homebrew command that displays analytics data for installed packages. This includes the number of downloads, build and bottle checks, and dependencies for each package. The output helps users understand the popularity and impact of installed packages within their Homebrew installation.'
        cask: '[AI] `brew info --cask` is a command used with Homebrew, a popular package manager for macOS. This specific command displays detailed information about a particular Cask installation, which are applications bundled with their dependencies that can be installed via Homebrew. The output includes the name of the Cask, its version, the installer (often a URL), and any dependencies it requires. It helps users to check the details of an installed Cask application and manage their software environment effectively.'
        category: '[AI] `brew info --category` is a command used with Homebrew, a popular package manager for macOS. This command displays detailed information about all installed Homebrew packages in the specified category. By default, it lists packages under the main categories such as "development", "science", or "games". It helps users to quickly check details of packages within a specific category without having to recall individual package names.'
        days: '[AI] The `brew info` command is a function provided by Homebrew, a popular package manager for macOS. When used with the `--days` option, it displays the last modification dates for all installed Homebrew packages or specifically for the named package. This helps users to check when a package was last updated and if there are any available updates.'
        debug: '[AI] `brew info --debug` is a command used with Homebrew, a popular package manager for macOS. This command provides more detailed and debugging information about a specifically installed Homebrew package. It displays the formulae (recipe) used to install the package, as well as various other diagnostic data that can be helpful for troubleshooting or understanding the underlying workings of Homebrew and its packages.'
        eval-all: '[AI] `brew info --eval-all` is a command used in Homebrew, a package manager for macOS. This command displays information about one or more Homebrew installed packages, and evaluates all formulas and scripts attached to those packages. In other words, it shows the details of the package along with any customizations made to its installation process.'
        formula: '[AI] `brew info --formula` is a command used in Homebrew, a popular package manager for macOS. This command provides detailed information about a specific Homebrew formula, which is a recipe for installing and managing software packages. The output includes the formula name, version, dependencies, and other relevant data, helping users understand what the formula does and how it can be used.'
        github: '[AI] `brew info --github` is a command used in Homebrew, a popular package manager for macOS. This command retrieves information about GitHub repositories managed by Homebrew. It shows details such as the repository name, URL, description, and installed version if the repository''s software is already installed via Homebrew. It''s commonly used to check repository details or verify that a specific repository is being managed by Homebrew.'
        help: |-
            [AI] `brew info --help` is a command used in Homebrew, a package manager for macOS. This command displays help information about the `brew info` sub-command.

            The main function of `brew info` is to show detailed information about a specific Homebrew installation, including its version number, dependencies, and installation path. The `--help` flag provides a brief explanation of how to use this command with various options, such as specifying the name or ID of the installation to get information on.
        installed: '[AI] `brew info --installed` is a command used in Homebrew, a popular package manager for macOS. This command lists detailed information about all installed packages (formally called "Formulae" or "Casks") and their versions, including the installation path, dependencies, and the original source from which they were installed. It provides an overview of the current system configuration related to Homebrew installations.'
        json: '[AI] `brew info --json` is a command used in Homebrew, a popular package manager for macOS. This command provides detailed information about a specific Homebrew installation in JSON format. The output includes metadata such as the installation path, version, dependencies, and other relevant data. It''s often used for automation or scripting purposes where handling JSON data is easier than parsing text output.'
        quiet: '[AI] `brew info --quiet` is a command used in Homebrew, a popular package manager for macOS. The `--quiet` flag instructs Homebrew to display only essential information about the installed package, such as its name, version, and installation path, with minimal output. It''s useful when you want a quick and concise view of the package details without being inundated with additional or verbose information.'
        variations: |-
            [AI] `brew info --variations` is a command used in Homebrew, a popular package manager for macOS and Linux. This command displays information about the available variations of a Homebrew-installed package.

            A variation is an optional feature or build option that can be installed alongside the base version of a package. For example, a package may have different language localizations or different built-in dependencies as variations.

            Using `brew info --variations` will list out the name and a brief description for each available variation of the specified package. It helps users to explore and choose additional features or configurations for their installed packages.
        verbose: '[AI] `brew info --verbose` is a command used in Homebrew, a popular package manager for macOS. This command provides detailed information about a specific installed Homebrew formula or cask (package). The `--verbose` option increases the amount of output displayed, providing more comprehensive and fine-grained details such as the formula''s dependencies, version, installation path, and other relevant metadata.'
