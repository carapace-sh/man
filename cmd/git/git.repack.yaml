# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: repack
description: Pack unpacked objects in a repository
group: manipulator
flags:
    --cruft: same as -a, pack unreachable cruft objects separately
    --cruft-expiration=: with --cruft, expire objects older than this
    --depth=: limits the maximum delta depth
    --expire-to=: pack prefix to store a pack containing pruned objects
    --keep-pack=: do not repack this pack
    --max-pack-size=: maximum size of each packfile
    --pack-kept-objects: repack objects in packs marked with .keep
    --threads=: limits the maximum number of threads
    --unpack-unreachable=: with -A, do not loosen objects older than this
    --window-memory=: same as the above, but limit memory size instead of entries count
    --window=: size of the window used for delta compression
    -A: same as -a, and turn unreachable objects loose
    -F: pass --no-reuse-object to git-pack-objects
    -a: pack everything in a single pack
    -b, --write-bitmap-index: write bitmap index
    -d: remove redundant packs, and run git-prune-packed
    -f: pass --no-reuse-delta to git-pack-objects
    -g, --geometric=: find a geometric progression with factor <N>
    -i, --delta-islands: pass --delta-islands to git-pack-objects
    -k, --keep-unreachable: with -a, repack unreachable objects
    -l, --local: pass --local to git-pack-objects
    -m, --write-midx: write a multi-pack index of the resulting packs
    -n: do not run git-update-server-info
    -q, --quiet: be quiet
documentation:
    command: '[AI] `git repack` is a Git command used to rebuild and possibly compress the packed-refs and pack files in your local repository. This can help reduce disk space usage or speed up certain Git operations, especially when dealing with large repositories. It does not modify the branch history or file content, but rather optimizes the internal data structures for improved performance.'
    flag:
        A: '[AI] `git repack -a` is a Git command used to optimize and rewrite the local repository''s pack files. It consolidates multiple small pack files into larger ones, making the repository more efficient in terms of storage and data transfer. This operation is typically automatically triggered when running `git push` or `git pull`, but it can also be manually executed using this command. The `-a` flag instructs Git to perform this operation recursively on all branches in the current repository.'
        F: '[AI] `git repack -f` is a Git command used to create or rebuild the pack files in the local repository. The `-f` option forces Git to rewrite the current branch, discarding any uncommitted changes before creating the new pack files. This command can be used to reduce the number of loose objects in your local repository and make git operations faster by having all objects bundled into pack files.'
        a: '[AI] `git repack -a` is a Git command used to optimize the local repository by rebuilding and possibly reducing the number of pack files (collections of packed commits) in the .git directory. The ''-a'' flag tells Git to perform this operation on all refs, ensuring that all branch histories are included in the repacking process. This can help save disk space and improve cloning or pushing performance.'
        cruft: '[AI] `git repack --cruft` is a Git command used to optimize and rebuild the local packed repository (.git/pack/ directory) by removing unnecessary data, also known as dangling blobs or cruft. This command can reduce disk space usage and improve Git performance by recalculating and packing only necessary objects and their references into new pack files. The "--cruft" option specifically instructs Git to perform the cruft removal during repacking.'
        cruft-expiration: '[AI] `git repack --cruft-expiration` is a Git command used to optimize and rebuild the local repository''s packed refs data. The `--cruft-expiration` option is a safety measure that expels unreachable objects older than a specified time, defined by the configuration variable `core.cruftExpire`, which defaults to 7 days. This helps save storage space and prevents unnecessary data clutter in the packed refs archive.'
        d: '[AI] `git repack -d` is a Git command used to create or rebuild the pack files in the local repository. The `-d` option tells Git to delete the old pack files after creating new ones. This can help save disk space, especially when dealing with large repositories or frequent commits. In summary, `git repack -d` is a way to optimize and clean up your Git repository by creating new, efficient pack files and deleting the old ones.'
        delta-islands: '[AI] `git repack --delta-islands` is a Git command used to optimize local repository storage by creating and updating delta-base pack files. These pack files store only the differences between commits (deltas) instead of the full commit data, reducing the overall size of the repository. The `--delta-islands` option instructs Git to create isolated pack files for each branch or set of related commits, improving compression efficiency and making it easier to share specific branches with others.'
        depth: '[AI] `git repack --depth <depth>` is a Git command that rebuilds and possibly compresses packed refs in the current repository. The depth option specifies the maximum number of generations to keep while creating new pack files. A shallower depth means fewer redundant data will be stored, but it may result in larger individual packs or more frequent pack creation. Deeper depth keeps more history and allows for faster cloning and checking out old commits at the expense of more storage.'
        expire-to: '[AI] `git repack --expire-to` is a Git command used to optimize the local repository by rebuilding and possibly reducing the number of loose objects. The `--expire-to` option sets a new object expiration time, which causes Git to remove any objects older than that time. This can help save disk space by eliminating old, unnecessary data while maintaining the integrity of the repository.'
        f: '[AI] `git repack -f` is a Git command used to optimize and rewrite the packed-refs and local repository data structures, also known as refpacks or packfiles. It achieves this by creating new, more efficient packfiles that store compressed ref updates instead of individual commits. The `-f` option forces Git to perform the repack operation even if the current packfiles are already up-to-date. This command is often used after a series of repeated commits or large file transfers to reduce the repository''s size and improve performance.'
        geometric: '[AI] `git repack --geometric` is a Git command used to optimize and rewrite packed Git repository data for efficient storage and faster cloning or checkout processes. The `--geometric` option specifically tells Git to use geometric data structures, which represent each tree and commit as a single object with multiple references, reducing the number of objects required and improving space efficiency. This command can be run in response to a full repository grow event (like after a large push or pull) to help manage repository data and improve performance.'
        keep-pack: '[AI] `git repack --keep-pack` is a Git command used to optimize and rebuild the local repository''s packed git data, which stores compressed repository data for efficient transfer over network or for offline usage. The `--keep-pack` option tells Git not to delete old pack files after repacking. This can be useful if you want to keep multiple versions of pack files for backup or other purposes.'
        keep-unreachable: |-
            [AI] `git repack --keep-unreachable` is a Git command used to optimize and rebuild the packed Git repository format, also known as a bundle or pack file. This command does the following:

            1. It rewrites all commits with new SHA-1 values that are reachable from the current HEAD.
            2. It keeps unreachable objects (those not reachable by any ref) in the pack file for future use, thus reducing the need to fetch or clone them again.
            3. The result is a more efficient Git repository with smaller pack files and faster cloning or transfer operations.
        local: '[AI] `git repack --local` is a Git command used to optimize and rewrite the local packed-data Git repository, making it more efficient by reducing disk space usage and improving the performance of Git operations. This command rewrites the local packed-refs and update the local pack files, producing new, more compact pack files.'
        max-pack-size: '[AI] `git repack --max-pack-size` is a Git command used to optimize and reduce the number of pack files in a local repository by combining smaller packs into larger ones, with the specified maximum size limit (--max-pack-size). This can improve efficiency when pushing or cloning large repositories. The new larger pack file contains all the previous data but is more compact due to fewer headers and indexes.'
        "n": '[AI] `git repack -n` is a Git command used to create or update packed refs in the local repository. Packed refs are an internal Git data structure that allows faster access to reference objects by bundling them together with their associated commit objects. The `-n` option tells Git to perform this operation without creating a new pack file, instead updating any existing pack files if possible. This command is typically used when the number of references in the repository has increased significantly and needs to be optimized for faster access.'
        pack-kept-objects: |-
            [AI] The `git repack --pack-kept-objects` command is used to rebuild and possibly optimize Git packing objects in a local repository. Packing objects refers to the process of compressing and storing frequently accessed Git objects into pack files to save disk space and improve Git performance.

            The `--pack-kept-objects` option tells Git to keep all previously packed objects, rather than discarding any unreferenced objects during the repack process. This can be useful when preparing a repository for sharing with others, as it ensures that all previous commits and their associated data are included in the pack files.

            In summary, `git repack --pack-kept-objects` is used to optimize Git pack files while keeping all previously packed objects, ensuring that a complete repository history is preserved.
        quiet: '[AI] `git repack --quiet` is a Git command used to optimize and rewrite packed git repository files (`.pack` and `.idx`) for more efficient storage and faster cloning or checkout. The `--quiet` option suppresses informational messages during the process. This command does not change the branches or commits in your repository, but rather improves the underlying data structure for better performance.'
        threads: '[AI] `git repack --threads` is a Git command used to optimize and rewrite the local repository''s packed-data files (`.git/pack/*.pack*`). This operation can be performed in parallel using multiple threads for improved performance. The `--threads` option specifies the number of threads to use during the repack process.'
        unpack-unreachable: '[AI] `git repack --unpack-unreachable` is a Git command used to optimize and rewrite the packed Git repository (also known as a bundle). This command rewrites the ref table to remove references to commits that are no longer reachable from the current set of commits. The `--unpack-unreachable` option instructs Git to unpack those unreachable commits before repacking, which allows users to keep their local history while improving the efficiency and size of the repository.'
        window: '[AI] `git repack --window` is a Git command used to optimize and rebuild the local repository''s packed data structures, also known as packfiles. This operation can reduce disk usage and improve performance by merging small commits into larger packs and updating the index with their new hashes. The `--window` option specifies the number of commits considered for packing. By default, Git will consider 100 commits, but you can use this option to set a custom window size.'
        window-memory: '[AI] `git repack --window-memory` is a Git command used to optimize the local repository by rebuilding the packed-refs and shrinking the size of the pack files. The `--window-memory` option sets the size limit for Git''s memory usage during this process. It helps keep the repository efficient by reducing the disk space required for storing the pack files while ensuring Git can still operate within the specified memory constraint.'
        write-bitmap-index: '[AI] `git repack --write-bitmap-index` is a Git command used to optimize and rebuild the packed database in a local Git repository. This operation can help reduce disk space usage and improve Git performance by recalculating and updating pack file indices. The `--write-bitmap-index` option generates and writes a new bitmap index file, which allows Git to quickly check if any given tree or blob object is present within the packed archive.'
        write-midx: '[AI] `git repack --write-midx` is a Git command used to optimize and rewrite the local repository''s packed-index file (or .gz pack files). This operation consolidates multiple commits into a single pack file, reducing disk space usage and improving cloning or pushing performance. The `--write-midx` flag ensures that the new packed-index is written to disk immediately.'
