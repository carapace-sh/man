# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: sources
description: Build Yarn from master
flags:
    --branch=: The branch of the repository that should be cloned
    --no-minify: Build a bundle for development (debugging) - non-minified and non-mangled
    --path=: The path where the repository should be cloned to
    --plugin=: An array of additional plugins that should be included in the bundle
    --repository=: The repository that should be cloned
    --skip-plugins: Skip updating the contrib plugins
    -f, --force: Always clone the repository instead of trying to fetch the latest commits
documentation:
    command: |-
        [AI] The `yarn set version` command with the `from sources` flag is used to set the project's version number in the `package.json` file based on the latest tagged version in the associated Git repository. This helps ensure that the project's version number remains consistent with the repository, and it can be particularly useful when managing projects that are frequently updated or have multiple developers.

        To use this command, navigate to your project directory in the terminal and run `yarn set version --from-sources`. If there is a Git repository linked to the project, Yarn will pull the latest tagged version number and update the `package.json` file accordingly. Note that you may need to have Git and Yarn installed on your system for this command to work properly.
    flag:
        branch: |-
            [AI] `yarn set version` is a command used in Yarn, a popular JavaScript package manager. This command sets the project's version number specified in the `package.json` file to a given value. The option `--from-sources` instructs Yarn to use the semver (Version 2 or higher) information from the `package-lock.json` or `yarn.lock` files, instead of the version listed in the `package.json`.

            The command `--branch <branch_name>` is used when working with Git branches and specifies that the versions to be set should correspond to the packages in the specified branch. This ensures that your project uses the same package versions as the target branch, which can help maintain consistency between different environments or development stages.
        force: '[AI] `yarn set version` is a command used with Yarn package manager to set the specified package version in your project''s `yarn.lock` file. The `--from-sources` flag forces Yarn to use the exact version listed in the `package-lock.json` or `yarn.lock` files in the dependencies, rather than resolving the dependency versions based on the latest available in the registry. This can be useful when you want to ensure that your project uses specific version of packages as defined in your sources, overriding any potential updates or version bumps.'
        no-minify: '[AI] The command `yarn set version <package> from sources --no-minify` is used with Yarn, a popular JavaScript package manager. This command sets the version of a specific package to the one specified in its source (usually a Git repository) and disables minification during the build process. Minification reduces file size by removing unnecessary code, but it can be undesirable for debugging or when working with custom code. By using `--no-minify`, you keep the original source code unaltered.'
        path: '[AI] `yarn set version from sources --path` is a command used in Yarn, a popular JavaScript package manager. This command sets the specific version of a project''s dependency to match that which exists in the local source folder, overriding any version specified in the package.json file or locked by yarn. The `--path` option specifies the absolute path to the source folder containing the desired dependency version.'
        plugin: '[AI] `yarn set version` is a command used in Yarn, a popular package manager for JavaScript projects. This command sets the version of a specific project or dependency to a specified value. The `--from-sources` option tells Yarn to resolve the dependency version from the local source directory instead of the package registry. The `--plugin` flag specifies that the dependency being set is actually a plugin, which modifies Yarn''s behavior, rather than a regular npm package. So in summary, this command sets the version of a local plugin used in your project.'
        repository: |-
            [AI] `yarn set version` is a command used in Yarn package manager to set the explicit version of a specific package in your project's `package.json` file. This command can be used to override automatically installed package versions, which is useful when you want to lock down certain dependencies.

            The `--from sources` option specifies that Yarn should read the package version from the local source directory instead of a remote repository or registry. In other words, it tells Yarn to use the exact version of the package that's already installed in your project, rather than fetching it from a remote repository and potentially installing an updated version.

            Finally, `--repository` is used to specify the URL of the remote repository or registry if you want to override the default one (usually npm or Yarn Package Manager). If you don't need to change the repository, you can omit this option. So, the complete command `yarn set version <package-name> --from sources` sets the package version from your local installation, and if needed, `--repository <repository-url>` can be added to specify a remote repository.
        skip-plugins: '[AI] `yarn set version from sources --skip-plugins` is a command used with Yarn, a popular JavaScript package manager. This command is used to install specific versions of dependencies mentioned in the `package.json` file from the remote npm registry, bypassing the local cache and skipping plugin installations. It sets the version for multiple packages at once using the `--from-sources` flag and does not install or update plugins with the `--skip-plugins` option. This command can be useful when you want to ensure that your project uses certain versions of dependencies, overriding what might be in the local cache or specified in `package-lock.json`.'
