# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: set <variable-name>
description: Create or update variables
flags:
    -b, --body=: The value for the variable (reads from standard input if not specified)
    -e, --env=: Set deployment `environment` variable
    -f, --env-file=: Load variable names and values from a dotenv-formatted `file`
    -o, --org=: Set `organization` variable
    -r, --repos*=: List of `repositories` that can access an organization variable
    -v, --visibility=: 'Set visibility for an organization variable: {all|private|selected}'
documentation:
    command: '[AI] `gh variable set` is a GitHub CLI (Command Line Interface) command used to create or update a GitHub repository variable. It sets, updates, or creates a new GitHub repository secret or environment variable with the provided key and value. This command requires authentication and allows you to manage sensitive data securely within your repository.'
    flag:
        body: '[AI] The `gh` command with the argument `variable set --body` is a GitHub CLI (Command Line Interface) command used to create or update a GitHub repository''s variable with a JSON-formatted body, either interactively or by providing a file containing the new variable data. It sets environment variables within a GitHub workflow or action.'
        env: '[AI] The `gh` command with the argument `variable set --env` is a GitHub CLI (Command Line Interface) command used to set environment variables for GitHub actions and projects. This command sets or updates an existing environment variable in a GitHub repository or organization. It takes key-value pairs as arguments, for example: `gh variable set-env NAME value`. These environment variables can be accessed and used within the context of GitHub workflows or containers.'
        env-file: |-
            [AI] `gh` is a GitHub CLI tool that allows users to interact with GitHub from the command line. The `gh variable set` command is used to create, update, or delete environment variables in GitHub repository's workflow settings.

            The `--env-file` option specifies a file containing key-value pairs, where each line represents an environment variable. This flag reads the contents of the given file and sets or updates the corresponding environment variables accordingly in the specified GitHub repository's workflows.
        org: '[AI] The `gh` command with the argument `variable set --org` is used to set or update an organization-level GitHub variable in the `gh` CLI tool. This allows you to manage and configure GitHub actions, workflows, and secrets across multiple repositories within an organization from the command line. The syntax sets a key-value pair for the variable, e.g., `gh variable set --org MY_ORG MyVariable myvalue`.'
        repos: '[AI] The `gh` flag `--repos` is used with the `set` command in the GitHub CLI (gh) tool. It sets the list of repositories that are being configured for use with gh, such as for cloning or pushing changes. This allows users to easily manage multiple repositories without having to specify the repository URL each time they use a gh command.'
        visibility: |-
            [AI] The `gh` command with the argument `variable set --visibility` is a GitHub CLI (Command Line Interface) command used to manage project variables in GitHub actions workflows. Here's a brief explanation of what this command does:

            1. `gh`: It refers to the GitHub CLI tool, which you use to authenticate and interact with GitHub services from the terminal or command line.
            2. `variable set`: This is a subcommand that enables you to create, update, or delete variables for your GitHub Actions workflows.
            3. `--visibility`: This option is used to modify the visibility of an existing variable. You can choose one of three options for variable visibility: `public`, `secred`, or `encrypted`. Setting a variable's visibility to 'public' makes it accessible to everyone, while setting it to 'secret' or 'encrypted' ensures it remains hidden and protected.
