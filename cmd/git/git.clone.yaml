# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: clone
description: Clone a repository into a new directory
group: main
flags:
    --bare: create a bare repository
    --depth=: create a shallow clone of that depth
    --dissociate: use --reference only while cloning
    --filter=: object filtering
    --mirror: create a mirror repository (implies bare)
    --no-hardlinks: don't use local hardlinks, always copy
    --no-tags: don't clone any tags, and make later fetches not to follow them
    --progress: force progress reporting
    --recurse-submodules=: initialize submodules in the clone
    --recursive=: alias of --recurse-submodules
    --reference-if-able=: reference repository
    --reference=: reference repository
    --remote-submodules: any cloned submodules will use their remote-tracking branch
    --separate-git-dir=: separate git dir from working tree
    --server-option=: option to transmit
    --shallow-exclude=: deepen history of shallow clone, excluding rev
    --shallow-since=: create a shallow clone since a specific time
    --shallow-submodules: any cloned submodules will be shallow
    --single-branch: clone only one branch, HEAD or --branch
    --sparse: initialize sparse-checkout file to include only files at root
    --template=: directory from which templates will be used
    -4, --ipv4: use IPv4 addresses only
    -6, --ipv6: use IPv6 addresses only
    -b, --branch=: checkout <branch> instead of the remote's HEAD
    -c, --config=: set config inside the new repository
    -j, --jobs=: number of submodules cloned in parallel
    -l, --local: to clone from a local repository
    -n, --no-checkout: don't create a checkout
    -o, --origin=: use <name> instead of 'origin' to track upstream
    -q, --quiet: be more quiet
    -s, --shared: setup as shared repository
    -u, --upload-pack=: path to git-upload-pack on the remote
    -v, --verbose: be more verbose
documentation:
    command: '[AI] `git clone` is a command used to create a local copy of an existing remote Git repository. When you run `git clone <repository_URL>`, Git will download all files and commits from the remote repository, set up the local repository with the same directory structure, and create a new working directory for you to start making changes. The initial commit in the local repository will be the same as the latest commit in the remote repository.'
    flag:
        bare: '[AI] `git clone --bare` is a Git command used to create a bare repository, which is a Git repository without a working directory. A bare repository only contains the necessary files for the Git repository to function, including the .git folder. This command is often used when creating or managing repositories over SSH, as it does not clone a working directory and can save bandwidth and storage space. It is also useful in automated workflows or server environments where a working directory is not necessary.'
        branch: '[AI] The `git clone --branch` command is used to create a local copy of an existing Git repository and checkout a specific branch at the same time. The `--branch` option specifies the name of the desired branch, which will become the initial checked-out branch in the new local repository. For example: `git clone user@server:repo.git --branch feature/my-feature`. This command creates a local copy of ''repo.git'' from the remote server and sets ''feature/my-feature'' as the initial checked-out branch.'
        config: '[AI] The `git clone --config` command is used to create a new Git repository by cloning an existing one, while also setting or modifying Git configuration options. The `--config` option allows you to pass custom configuration variables as key-value pairs at the time of cloning. These configurations will be applied to the newly created local repository. This can be useful when wanting to set up common configuration options for all new repositories you clone from a particular source.'
        depth: '[AI] `git clone --depth` is a Git command used to create a shallow clone of a repository, which means that instead of cloning the entire history of the repository, only the latest commit and its immediate ancestors up to a certain number of generations are downloaded. This can save disk space and download time for large or old repositories, but it comes with limitations, such as being unable to perform certain Git operations like `git push` or `git pull`, because a shallow clone does not contain the full history. The depth can be specified using the `--depth` option followed by an integer number, indicating how many generations of commit history to include. If no depth is specified, Git will default to a shallow clone with a depth of one.'
        dissociate: '[AI] `git clone --dissociate` is a Git command used to create a new repository by cloning an existing one while keeping the two repositories linked, but without creating a new remote entry. This option allows the cloned repository to recognize its upstream branch and track changes, but it doesn''t add any new remotes or URLs to your local Git configuration.'
        filter: '[AI] `git clone --filter` is a command-line option used when cloning a Git repository. The `--filter` option allows specifying filters to be applied during the cloning process, which can affect how certain types of objects are handled. These filters include `--tags`, `--branches`, and others. With this option, you can choose to exclude or include specific object types during the clone operation, reducing the amount of data transferred or customizing the clone based on your needs.'
        ipv4: |-
            [AI] The `git clone` command is used to create a local copy of an existing Git repository. The option `--ipv4` is not a standard Git option but can be used with certain Git hosting services like GitHub if the default name resolution or discovery methods (like SSH keys or HTTPS certificates) fail.

            The `--ipv4` flag forces Git to use IPv4 addresses instead of IPv6 when communicating with the remote repository server. This can be helpful in situations where DNS resolution or name lookup is not working properly, and you need to explicitly specify an IP address for the connection.
        ipv6: '[AI] The `git clone` command is used to create a local copy of an existing Git repository. The `--ipv6` option is a network configuration flag that tells Git to use Internet Protocol version 6 (IPv6) addresses when communicating with the remote repository instead of IPv4 addresses. This can be useful when working with remote servers that only support IPv6 or when trying to resolve connectivity issues related to IP addressing.'
        jobs: '[AI] `git clone --jobs` is a command used in Git, a popular version control system. This option is passed to the `clone` command when creating a local copy of an existing remote repository. The `--jobs` flag enables Git to run multiple background jobs during the clone process. This can significantly reduce the time it takes to clone larger repositories by parallelizing certain tasks such as downloading files and extracting archives. Essentially, `git clone --jobs` is a more efficient way to clone repositories by utilizing multiple CPU cores or processes for faster transfer and processing speed.'
        local: '[AI] `git clone --local` is not a valid Git command. The `git clone` command is used to create a local copy of an existing remote repository. The `--local` option is not recognized by Git in this context. If you want to clone a repository from the local machine instead of a remote one, you can simply use `git clone <path-to-local-repository>`.'
        mirror: '[AI] `git clone --mirror` is a Git command used to create a bare or shallow repository as a mirror of an existing repository, typically used for remote repositories in a read-only setup. It does not create a working directory and does not checkout any branches by default, making it efficient for cloning large or multiple repositories with minimal disk space usage and faster transfer speeds over the network. Instead, it generates a new repository that can be used to push and pull changes between mirrored repositories while keeping both in sync.'
        no-checkout: '[AI] The `git clone --no-checkout` command is a variation of the standard `git clone` command used to create a local copy of an existing Git repository. The `--no-checkout` option prevents Git from automatically checking out the default branch into your working directory once the clone operation is completed. Instead, you will have an empty checked-out state in your new local repository with all files and directories ready for further manipulation without any files being actively edited or tracked by Git. This can be useful when setting up a continuous integration (CI) system or other automated workflows where you do not want any automatic checks out to occur.'
        no-hardlinks: '[AI] The `git clone --no-hardlinks` command is used when cloning a Git repository to prevent the creation of hard links for files and directories. Hard links share the same disk space with the original file, but they have separate file metadata. With this option enabled, Git will instead create regular copy-on-write files for each cloned item. This can be useful in certain edge cases, such as when working on different branches of a repository that may have conflicting file modifications. However, it can lead to increased disk space usage since every file and directory is copied rather than linked.'
        no-tags: '[AI] The `git clone --no-tags` command is used to create a local copy of an existing Git repository without cloning any tags associated with it. This means that only the main branches and commits will be downloaded, while any attached tags are ignored during the cloning process. It can be useful when you don''t need the tags or want to save disk space by excluding them.'
        origin: '[AI] `git clone --origin` is a command used in Git version control system to create a local copy of an existing remote repository. The `--origin` option sets the original remote repository as the upstream branch, meaning that this local repository will automatically track changes from the origin by default. This command creates both a local working directory and a bare repository (if cloning a bare repository) with an initial commit and the necessary .git subdirectory to manage the Git operations.'
        progress: '[AI] `git clone --progress` is a Git command used to clone a repository with incremental transfer progress. With this option, instead of downloading the entire repository at once, Git requests and transfers only the necessary data (such as new or updated files) in multiple increments, allowing for a more efficient and faster cloning experience on networks with limited bandwidth or high latency. It''s particularly useful when cloning large repositories over slow connections.'
        quiet: '[AI] The `git clone --quiet` command is a Git command used to clone a repository into a local directory while producing minimal output. The `--quiet` option suppresses most of Git''s informational messages during the cloning process, making it suitable for scripts and automated workflows where detailed output isn''t required.'
        recurse-submodules: |-
            [AI] `git clone --recurse-submodules` is a command used to clone a Git repository with its submodules initialized and checked out. Submodules are separate Git repositories that are stored as part of the main repository, and they're typically used for dependencies or subprojects.

            By default, when cloning a repository with submodules, only the superproject is cloned, leaving the submodules as empty directories. To clone both the superproject and its submodules in one go, use `--recurse-submodules`. This option tells Git to fetch the submodules' URLs from the remote repository, initialize them locally, and check out their branches if specified.

            In summary, `git clone --recurse-submodules` fetches, initializes, and checks out both the main repository and its submodules in a single command.
        recursive: '[AI] The `git clone --recursive` command is used to clone a Git repository, including all submodules specified in the .gitmodules file with their own repositories being cloned recursively. This means that when you run this command, not only will the main project be cloned but also any dependent subprojects will be cloned as well and added as subdirectories to the main project. This can be useful for projects where some dependencies or components are managed as separate repositories.'
        reference: '[AI] The `git clone --reference` command is a variation of the standard `git clone` command used to create a new repository by copying all branches and other refs from an existing remote repository without downloading the entire repository''s data again. Instead, it uses the existing local repository as a reference and fetches only the needed metadata for the new branches. This results in faster cloning, especially when working with large repositories or when multiple local copies of the same repository are required.'
        reference-if-able: '[AI] `git clone --reference-if-able` is a Git command used to create a new repository as a shallow or bare clone, while referencing an existing remote repository if it already exists locally and is able to be used as a reference. This option can save disk space and network bandwidth by reusing the local repository instead of cloning the entire history again. If the local repository is not usable as a reference, Git will create a new one from the remote.'
        remote-submodules: '[AI] `git clone --remote-submodules` is a Git command used to clone a repository that includes one or more sub-repositories, called "submodules," which are themselves separate repositories, typically as part of the main project''s Git history. The `--remote-submodules` option fetches and initializes these submodules recursively from their respective remotes during the cloning process. This command is essential for projects with interrelated components that require separate Git repositories but should be treated as a single cohesive unit.'
        separate-git-dir: |-
            [AI] `git clone --separate-git-dir` is a Git command used to create a new local repository with a separate `.git` directory. This option allows cloning a repository without having the entire history and objects stored in the main project directory. Instead, the `.git` directory will be located in a subdirectory named `.git-annex/git-annex` or `.git` by default, if not specified otherwise.

            This can be useful when you want to clone a large repository without downloading the entire history at once, or when dealing with restricted file systems that don't allow having multiple files or directories with the same name (as a regular Git repository will have two `.git` files - one for the cloned repository and another for any submodules).
        server-option: '[AI] `git clone --server-option` is a command used in Git, a popular version control system. This option allows users to specify custom options when connecting to a specific remote repository server. The syntax is `git clone <repository> --server-option <OptionName>:<OptionValue>`. For example, `git clone git@mycustomrepo.com:project --server-option ssh-key-file=~/.ssh/mykey.pem` would clone a repository using a custom SSH key for authentication with the server. This can be useful when working with specific servers that require non-standard configuration options.'
        shallow-exclude: '[AI] `git clone --shallow-exclude` is a Git command used to create a shallow clone of a repository, which means only the current commit and its history up to a certain point are downloaded instead of the entire history. The `--shallow-exclude` option is an additional argument that allows users to specify a file or a list of files or directories to exclude from the shallow clone. This can help reduce the amount of data transferred and stored while still getting the latest version of the repository''s code. The excluded files or directories will not be accessible locally, but they can be fetched and checked out on demand using `git fetch` or `git checkout`.'
        shallow-since: '[AI] `git clone --shallow-since` is a Git command used to create a shallow clone of a repository. A shallow clone is a Git repository that only contains the history up to a specific commit, instead of the entire history from the tip of the branch to the beginning of time. This option can be useful when dealing with large repositories or when you only need a subset of the project''s history for your work. The `--shallow-since` argument specifies the commit up to which the repository should be cloned, making it an efficient alternative to downloading the entire repository history.'
        shallow-submodules: '[AI] The `git clone` command with the `--shallow-submodules` option creates a shallow Git repository, which means that only the necessary files for the project to run are downloaded instead of the entire history and subtrees or submodules. In this particular case, it also applies to submodules, meaning that only the manifest files for submodules will be downloaded, not their full contents or histories. This can save significant time and bandwidth when cloning large repositories with many deep submodules. However, it may result in incomplete functionality since the actual content of the submodules won''t be available locally.'
        shared: '[AI] The `git clone --shared` command is used to create a Git repository on a local machine with a shared history. This means that any changes made in this local repository will be pushed back upstream and visible to other collaborators who are also working on the project. Essentially, it sets up the local repository as a remote repository for other users to clone from, allowing for true collaboration on the codebase.'
        single-branch: '[AI] `git clone --single-branch` is a Git command used to create a local copy of an existing remote repository while ensuring that only the current branch is cloned and checked out. This option can be useful when you want to work with a specific branch without having multiple branches locally, keeping your working environment simpler. By default, `git clone` checks out the initial commit in the master branch or main branch depending on the remote repository''s configuration. Using this flag overrides that behavior and checks out only the specified branch.'
        sparse: '[AI] `git clone --sparse` is a Git command used to create a new repository or clone an existing one with shallow subtrees, also known as sparse checkouts. It allows you to download only a subset of the files in a repository instead of the entire history. This can significantly reduce the disk space required and the time needed for cloning large repositories. The `--sparse` option enables this feature by creating a .git/info/sparse-checkout file, which contains a list of paths to be included in the checkout.'
        template: '[AI] `git clone --template` is a Git command used to create a new repository by cloning an existing one while applying a custom template for the new repository''s configuration files, such as `.gitignore` or `.editorconfig`. The `--template` option takes a path to a directory containing the desired templates as its argument. This can be useful in managing consistent configurations across multiple repositories.'
        upload-pack: '[AI] `git clone --upload-pack` is a specialized way to perform a Git clone operation with an additional capability: it enables the cloned repository to act as both a client and a server, allowing it to push changes back upstream to the original repository using the `--upload-pack` option. This can be useful in certain workflows, such as when working on a project where you don''t have write access to the remote repository but need to contribute changes, or when setting up a mirror of an existing repository for backup or other purposes.'
        verbose: '[AI] `git clone --verbose` is a Git command used to clone a repository with enhanced output. The `--verbose` option increases the amount of information displayed during the cloning process. It provides detailed messages about each step, including progress updates, transferred files and directories, and any potential errors or warnings that may occur. This can be helpful for debugging or understanding the inner workings of Git when cloning a repository.'
