# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: prune
description: Removes extraneous packages
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --color: Controls colors in the output
    --loglevel=: What level of logs to report
    --no-color: Controls colors in the output
    --no-optional: Remove the packages specified in `optionalDependencies`
    --prod: Remove the packages specified in `devDependencies`
    --stream: Stream output from child processes immediately
    --use-stderr: Divert all output to stderr
    -C, --dir=: Change to directory <dir>
    -h, --help: Output usage information
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm prune` is a command provided by PNPM (Parallel NPM), a package manager for JavaScript projects. It''s used to remove from your project''s node_modules folder any packages that are not listed in your package.json or package-lock.json files. This helps keep your dependencies up-to-date and reduces the size of your project directory.'
    flag:
        aggregate-output: '[AI] `pnpm prune --aggregate-output` is a command used with the package manager PnPM to remove unused and unneeded packages from your project''s node_modules directory. The `--aggregate-output` flag generates an output summarizing the removed packages, their sizes, and the total amount of disk space saved after the pruning process. This information is printed in a clear and structured format, making it easier to understand the impact of the operation on your project.'
        color: '[AI] `pnpm prune --color` is a command used with the package manager PnPM (Plain NPM). The `prune` subcommand removes unneeded local package dependencies and their locked files. The `--color` option enables colored output for improved readability when running the command in the terminal.'
        dir: '[AI] `pnpm prune --dir` is a command used with the package manager PnPM (Pacific NPM). It is used to remove unused or outdated local dependencies and their derived packages, reducing disk space usage and improving build times. The `--dir` option specifies that only the specified directory should be pruned instead of the entire project.'
        help: |-
            [AI] `pnpm prune` is a command provided by PnPM, a package manager for JavaScript projects. The `--help` option is used to display detailed information about how to use this specific command.

            When you run `pnpm prune --help`, it will output the following:

            ```bash
            Usage: pnpm prune [options] [filter]

            Prunes the local node_modules and locks, keeping only what is needed to satisfy
            the installed packages, and the devDependencies listed in package.json.

            Options:
              --all                              Prunes all nodes_modules directories in the project.
              --experimental-offline               Do not use offline mode.
              --force                            Force pruning even if there is an error.
              --help                             Display this help message and exit.
              --interactive                      Interactively select packages to keep or remove.
              --local                            Prune only the local nodes_modules directories.
              --offline                          Use offline mode when communicating with registries.
              --quiet                            Suppress progress output.
              --verbose                          Output detailed information for each package being pruned.
            ```

            In essence, `pnpm prune` is used to remove unused dependencies and their corresponding installed packages from your project's node_modules directory. This command can help keep your project lean by reducing the amount of unnecessary files in your repository, which can be beneficial for version control and performance. The various options allow you to customize the behavior of this command, such as running it on all nodes_modules directories, using offline mode, or interactively selecting packages to keep or remove.
        loglevel: |-
            [AI] `pnpm prune` is a command provided by the PNPM package manager to remove unused or unreferenced packages from your project's node_modules directory. The `--loglevel` option sets the logging level for this operation. Here are some common log levels you can use with this command:

            - `info` (default): Shows basic information about the pruning process.
            - `verbose`: Displays more detailed information, including which packages are being removed.
            - `silent` or `quiet`: Suppresses all output except for errors and warnings.
            - `debug`: Prints extensive debug information.
        no-color: '[AI] `pnpm prune --no-color` is a command used in npm package management with pnpm (Plain NPM), which is a faster and more reliable alternative to npm. This command is used to remove unused packages and their derivatives from the node_modules folder to save disk space. The `--no-color` option disables color output in the console.'
        no-optional: '[AI] `pnpm prune --no-optional` is a command used with the package manager PnPM to remove unused and unreferenced packages from your project''s node_modules directory. The `--no-optional` flag is optional but it limits the pruning process only to the dependencies declared in the package.json file, excluding the optional dependencies marked with `^optional` in their names or listed in a separate `pnpm-install.yml` file.'
        prod: '[AI] `pnpm prune --prod` is a command used with PnPM, a package manager for Node.js projects. This command helps manage and clean up unused or unnecessary packages in your project. The `--prod` flag signifies that this operation is intended for production use only. It analyzes the `package-lock.json` file or other lock files to determine which packages are no longer needed based on the dependencies listed in the `package.json` file. By using `pnpm prune --prod`, you can minimize the size of your project and improve the performance by eliminating unused packages.'
        stream: '[AI] `pnpm prune --stream` is a command provided by PnPM, a package manager for JavaScript projects. This command is used to remove unused and outdated packages from the node_modules folder of your project. The `--stream` option enables a streaming mode where the deletion process is done in real-time without waiting for the command to finish before displaying results. This can be useful for large projects with numerous packages, as it allows you to see which packages are being removed as they are deleted from the node_modules folder.'
        use-stderr: '[AI] `pnpm prune --use-stderr` is a command used with pnpm (Parcel Bundler''s package manager), which is an alternative to npm or yarn. This command is utilized to remove unused and unnecessary packages from your project, helping to keep the dependencies up-to-date and lean. The `--use-stderr` option specifically instructs pnpm to output the pruning progress information to the standard error stream (STDERR), instead of the standard output stream (STDOUT). This can be helpful if you''re writing a script or automation that doesn''t care about the progress details but only wants errors or warnings.'
        workspace-root: '[AI] `pnpm prune` is a command provided by PnPM, a package manager for JavaScript projects, to remove unused and uninstalled packages from your project''s node_modules directory. The option `--workspace-root` specifies the root directory of your PnPM workspace when you are managing multiple related projects under one installation. In this context, running `pnpm prune --workspace-root <path-to-workspace>` will perform the package cleanup operation across all projects within that workspace.'
