# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: info
description: See information related to packages
group: general
flags:
    --cache: Print information about the cache entry of a package (path, size, checksum)
    --dependents: Print all dependents for each matching package
    --json: Format the output as an NDJSON stream
    --manifest: Print data obtained by looking at the package archive (license, homepage, ...)
    --name-only: Only print the name for the matching packages
    --virtuals: Print each instance of the virtual packages
    -A, --all: Print versions of a package from the whole project
    -R, --recursive: Print information for all packages, including transitive dependencies
    -X, --extra=: An array of requests of extra data provided by plugins
documentation:
    command: '[AI] `yarn info` is a command provided by Yarn, a popular JavaScript package manager. It returns detailed information about the specified package or the current project''s packages, including its version number, dependencies, and their versions. The output can be customized using options like --json for a machine-readable format.'
    flag:
        all: '[AI] `yarn info --all` is a command used in Yarn package manager to display comprehensive information about all installed packages and their dependencies in the current project. It shows the name, version, installation size, publisher, and other relevant details for each package along with their deep dependency trees. This can be useful for understanding the entire ecosystem of packages being used in a project and for debugging dependency-related issues.'
        cache: '[AI] `yarn info --cache` is a command used with Yarn, a popular package manager for JavaScript projects. This specific command displays information about Yarn''s cache. The cache is where Yarn stores downloaded packages to speed up the installation process for subsequent builds. By running this command, you can check the size and contents of the cache without installing or modifying anything. It provides useful information like the total disk space used by the cache, a list of the cached packages with their respective sizes, and details about each package''s version and dependencies.'
        dependents: '[AI] `yarn info --dependents` is a command used in Yarn, a popular package manager for JavaScript projects. This command displays a list of direct and transitive dependencies that depend on the specified package in your project. Transitive dependencies are packages that the current dependency relies on but are not directly listed as dependencies in the `package.json` file. By showing these dependencies, you can have a clearer understanding of the entire dependency tree for a given package in your Yarn-managed project.'
        extra: '[AI] The `yarn info --extra` command is a Yarn package manager feature used to display extended information about installed packages. It shows detailed data including dependencies, devDependencies, peerDependencies, and optional files. This command can be helpful for debugging dependency issues or understanding the full project structure.'
        json: '[AI] `yarn info --json` is a command used in Yarn package manager to retrieve detailed information about a specific package or project in JSON format. It provides metadata such as name, version, dependencies, scripts, and other relevant data that can be easily parsed and analyzed programmatically. This command is useful for automating tasks related to managing and inspecting project dependencies.'
        manifest: '[AI] `yarn info --manifest` is a command used in Yarn package manager to display the content of the current project''s `yarn.lock` file or the manifest file in a production-ready format. This manifest file lists all dependencies with their exact versions, hashes and optional custom meta data defined in the package.json file. It helps to ensure consistent and reproducible builds by keeping track of the exact dependency versions used at a given point in time.'
        name-only: '[AI] `yarn info` is a command provided by Yarn, a popular package manager for JavaScript projects. The option `--name-only` instructs the command to output only the names of the packages listed in the project''s `package.json` file. This can be useful when you want to quickly check which packages are installed without seeing detailed information about each one.'
        recursive: '[AI] `yarn info --recursive` is a command used in Yarn, a popular JavaScript package manager. This command generates a comprehensive output of information about every package and their dependencies within the current project and all its subdirectories or linked packages. It provides detailed information such as version numbers, file sizes, and installation paths, which can be useful for debugging dependency issues or understanding the composition of a complex project.'
        virtuals: '[AI] `yarn info --virtuals` is a command used with Yarn, a popular JavaScript package manager. This command displays a tree view of the direct and transitive dependencies for all virtual packages (also known as devDependencies or peerDependencies) in the current project. Virtual packages are not installed directly when you run `yarn install`, but instead are required by other dependencies in your project. Understanding the virtual packages and their dependencies can help you manage and troubleshoot your project effectively.'
