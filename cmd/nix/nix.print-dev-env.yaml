# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: print-dev-env
description: print shell code that can be sourced by bash to reproduce the build environment of a derivation
group: utility
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --commit-lock-file: Commit changes to the flake's lock file
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --inputs-from=: Use the inputs of the specified flake as registry entries
    --json: Produce output in JSON format
    --log-format=: Set the format of log output
    --no-registries: Don't allow lookups in the flake registries
    --no-update-lock-file: Do not allow any updates to the flake's lock file
    --no-write-lock-file: Do not write the flake's newly generated lock file
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --override-input=: Override a specific flake input (e.g. dwarffs/nixpkgs)
    --profile=: The profile to operate on
    --quiet: Decrease the logging verbosity level
    --recreate-lock-file: Recreate the flake's lock file from scratch
    --update-input=: Update a specific flake input (ignoring its previous entry in the lock file
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] `nix print-dev-env` is a Nix expression that generates and prints out the configuration of a specific development environment declared in a Nix expression or a `Nixfile`. It allows developers to easily reproduce and share the exact environment setup with others, including the operating system, packages, and their versions.'
    flag:
        arg: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other operating systems. The command `nix print-dev-env <expression> --arg <argument>` generates a YAML representation of the environment (including installed packages and their versions) for a given Nix expression with an additional argument provided. This output can be used to recreate the same environment on other systems.'
        argstr: |-
            [AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other systems. The command `nix print-dev-env` generates a shell command that sets up the environment for a specific project or development environment defined in a Nix expression.

            The option `--argstr` is used to pass arguments to the environment generation command. The argument value should be provided after the option as a string, with each argument being separated by an equals sign (=) and enclosed in quotation marks if necessary. For example:

            ```bash
            nix-print-dev-env myProject --argstr myArg="someValue"
            ```

            This command would generate a shell command that sets up the environment for `myProject` with an additional argument `myArg` set to `"someValue"`.
        commit-lock-file: |-
            [AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other operating systems. This command generates a shell script that sets up the environment for a specific Nix project, including all dependencies.

            The option `--commit-lock-file` tells `nix-print-dev-env` to create or update a file called `Nix.lock` that lists all the committed versions of packages in the project's `Nixexpress.conf` file. This ensures consistent environment replicas across different development environments and can help avoid version conflicts.

            In summary, `nix print-dev-env --commit-lock-file` generates an environment setup script with a commit-locked `Nix.lock` file.
        debug: '[AI] `nix-print-dev-env` is a command from Nix, a packaging system for Linux and other systems. This command generates a config file describing the development environment of a given project, including its dependencies and their versions. The `--debug` flag increases the verbosity of the output, providing more detailed information during the generation process to help diagnose potential issues.'
        debugger: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other Unix systems. The `--debugger` option is used to print out detailed debugging information about the development environment of a Nix-managed project. This includes the list of packages and their versions that make up the environment, as well as any custom configurations applied. It''s useful for troubleshooting build or runtime issues in Nix projects.'
        eval-store: |-
            [AI] `nix-print-dev-env` is a command in Nix, a package manager for Linux and other systems. This command generates a shell script or JSON output that describes the environment of a given Nix expression or profile.

            The `--eval-store` option is used to specify an evaluation store instead of evaluating the expression directly within the current Nix environment. The evaluation store is a read-only snapshot of a specific Nix configuration, allowing for consistent and reproducible environment reproduction across different systems.

            When using `--eval-store`, you provide the path to a store file containing the desired environment definition. The command then prints out the generated shell script or JSON description based on that evaluation store. This is particularly useful when collaborating with team members, as everyone can use the same evaluation store to ensure consistent development environments.
        impure: '[AI] `nx print-dev-env --impure` is a command used in Nx, a DevOps toolkit built on Angular CLI and Node.js. This command generates an environment file that lists all the dependencies (both dev and runtime) for a specific Nx project or application. The `--impure` flag indicates that the generated environment file should include all transitive dev dependencies, not just the direct dependencies. In other words, it produces an environment file that describes all the packages needed to run the project, including their dev dependencies.'
        include: '[AI] `nx print-dev-env --include` is a command from Nx, a DevOps toolkit built on Angular and Node.js, used to generate and display environment variables for a specific project or application in an Nx workspace. The `--include` flag specifies that the output should only include the variables defined in a specified file, typically a `.env` file located at the root of the project or in a specific application''s source directory. This command helps developers to easily access and configure environment variables for their projects when running tasks or building applications within an Nx workspace.'
        inputs-from: '[AI] `nix-print-dev-env` is a command in Nix, a package manager for Linux and other Unix systems. The `--inputs-from` option specifies that the environment definition to be printed should include all inputs (dependencies) of the specified environment name or path. In other words, it prints out the entire environment configuration along with its dependencies.'
        json: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other systems. The `--json` option asks it to output the environment configuration in JSON format. This can be useful for programmatically setting up development environments with consistent configurations across different machines or builds.'
        log-format: |-
            [AI] The `nix-print-dev-env` command is a utility from Nix, a package manager for Linux and other operating systems. This specific command is used to print out the environment configuration of a specified Nix expression or project.

            The `--log-format` option modifies the output format of the log messages generated by this command. The default log format is JSON, but `--log-format` can be used to specify other formats such as plain text (`tabseparated`, `json`, or `human-readable`). Using this option helps tailor the log output to better suit your needs for readability and further processing.
        no-registries: '[AI] `nix-print-dev-env` is a Nix command used to display the environment configuration for a specific project. The `--no-registries` option instructs it not to consult Nixpkgs or any other registries while fetching the required packages, meaning that only the locally available packages will be considered for building the environment. This can be useful when working offline or with customized package versions.'
        no-update-lock-file: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other Unix systems. This specific command is used to print out the environment configuration of a Nix-managed project, without updating or creating a lock file (--no-update-lock-file option). The output includes the list of packages and their versions that should be installed to recreate the development environment for that project.'
        no-write-lock-file: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other Unix systems. The command with the `--no-write-lock-file` option prints out the current development environment configuration, but it doesn''t create or update the write-locked file. In other words, it provides you with the information about the environment without modifying the Nix configuration files.'
        override-flake: |-
            [AI] `nix-print-dev-env` is a command from Nix, a packaging system for Linux and other operating systems. The command `nix print-dev-env --override-flakes` generates and displays the configuration of a specific development environment defined in a Nix flake lock file.

            The option `--override-flakes` instructs `nix print-dev-env` to use an overriding flake configuration instead of the one defined in the current project's lock file. This can be useful when you want to check the environment configuration for a different version of your dependencies or an alternative set of dependencies.

            In summary, this command generates and displays the development environment configuration using a specified overriding flake configuration file.
        override-input: |-
            [AI] The `nix-print-dev-env` command is a utility provided by Nix, a package manager for Linux and other systems. This command prints out the environment configurations of a specific project or application managed by Nix.

            The option `--override-input` allows users to specify an input file containing custom environment variables or configurations that will override the default ones defined in the project's Nix expression or configuration file. By doing so, users can customize their development environment without modifying the original configuration files directly.
        print-build-logs: |-
            [AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other systems. The `--print-build-logs` option asks Nix to output the paths to the build logs of the specified development environment.

            In simpler terms, this command helps you find the location of the log files that were generated during the building process of a specific development environment in Nix.
        profile: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other systems. This command generates a shell command that sets up an environment with a specific profile. The `--profile` option specifies the name or path of the desired Nix expression representing the target profile. The output of this command is a shell command snippet to be sourced in order to activate the given development environment, including its dependencies and configuration.'
        quiet: '[AI] `nix-print-dev-env` is a command from Nix packaging system. It''s used to print out the environment configuration for a given Nix expression. The `--quiet` flag is an option that instructs the command to run in quiet mode, which means it will only print the final environment configuration without any verbose output or progress messages.'
        recreate-lock-file: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other operating systems. The `--recreate-lock-file` option tells the command to regenerate the Nix lock file when called with `nix-print-dev-env`. This lock file ensures consistent builds and reproducibility by recording the exact version of packages used at the time of building an environment or a project. In summary, running `nix print-dev-env --recreate-lock-file` will output the environment configuration and recreate or update the Nix lock file.'
        update-input: '[AI] `nix-print-dev-env` is a command provided by Nix, a package manager for Linux and other Unix systems. The `--update-input` option instructs the command to fetch and update the input configurations from the Nix expression language instead of using the currently set environment variables or configuration files. In simpler terms, it ensures that the output environment definition uses the latest available configurations in the Nix expresssion.'
        verbose: '[AI] `nix-print-dev-env` is a command from Nix, a package manager for Linux and other Unix systems. The `--verbose` option increases the level of output produced by the command. When used with `nix-print-dev-env`, it displays detailed information about the environment (i.e., the list of packages and their versions) that would be created or used by a Nix development environment.'
