# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
description: Runs tests on data in deployed models
flags:
    --defer: Defer to the state variable for resolving unselected nodes
    --exclude*=: Specify the models to exclude
    --favor-state: Defer to the state variable for resolving unselected nodes
    --indirect-selection=: Select all tests that are adjacent to selected resources
    --log-path=: Configure the 'log-path'
    --no-defer: Do not defer to the state variable for resolving unselected nodes
    --no-favor-state: If defer is set, expect standard defer behaviour
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --selector=: The selector name to use
    --state=: Use the given directory as the source for json files to compare
    --store-failures: Store test results (failing rows) in the database
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    --vars=: Supply variables to the project
    -h, --help: show this help message and exit
    -m, --models*=: Specify the nodes to include
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
    -x, --fail-fast: Stop execution upon a first test failure
documentation:
    command: '[AI] `dbt test` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. It runs all tests defined in your dbt project, ensuring data models are producing expected results. The command checks the logical correctness of data transformations by comparing actual results with reference data stored as tests within your dbt project files. This helps maintain data quality and accuracy throughout the data pipeline.'
    flag:
        defer: '[AI] `dbt test --defer` is a command in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command configures dbt to run tests, but marks them as deferred. Deferred tests are tests that depend on other tests or data models to be executed before they can complete. Instead of blocking the test run with an error, `dbt test --defer` allows these tests to continue and logs a message indicating which tests have been deferred. These tests will then be automatically retried once their dependencies have finished running in a subsequent test run.'
        exclude: '[AI] `dbt test --exclude` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. The `--exclude` option allows you to exclude specific models or tests from running during the test command. This can be useful when you want to quickly test a subset of your models, or when you encounter issues with certain models without affecting the others during testing. It takes a list of model names or test selectors as an argument to filter out the tests or models to exclude from the testing process.'
        fail-fast: '[AI] `dbt test --fail-fast` is a command used in dbt (data build tool) for running tests in an automated testing workflow. It instructs dbt to stop running tests as soon as it encounters the first failure, rather than continuing with the remaining tests. This behavior is useful when you want to quickly identify and address issues during testing, as it prevents unnecessary test execution time and potential resources being used unnecessarily on failing tests.'
        favor-state: '[AI] `dbt test --favor-state` is a command in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command instructs dbt to prioritize using the currently stored state of database tables for tests, rather than re-running tests against fresh data. It can help save time during testing by avoiding unnecessary data regeneration, particularly useful when testing large datasets or in continuous integration/continuous delivery (CI/CD) pipelines where tests are frequently run.'
        help: '[AI] `dbt test --help` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command, when run with the `--help` flag, provides detailed information about how to use the `dbt test` command for executing tests within a dbt project. It explains various options and arguments that can be passed to customize the testing process. Some common options include specifying a particular profile, selecting specific models or tests to run, and controlling the test output format. Overall, it assists users in understanding how to effectively run tests in their dbt projects.'
        indirect-selection: |-
            [AI] `dbt test --indirect-selection` is a command in dbt (Data Build Tool), used for running tests in data models that depend on other models instead of directly referencing tables or views in the database.

            When using direct selection, dbt looks for tests in the same directory as the selected model. In contrast, `--indirect-selection` allows you to test a model indirectly by testing the models that it depends on. This is useful when you want to ensure that changes in dependent models don't adversely affect the main model.

            By running this command, dbt will look for tests associated with all the models in the dependency graph of the given model and execute them. If any test fails, dbt will raise an error, indicating that one or more dependencies have issues that need to be addressed.
        log-path: '[AI] `dbt test --log-path` is a command used in dbt (data build tool) to run tests. The `--log-path` option specifies the file path where test logs will be written. This can be useful for tracking test results and debugging issues, as the log file can be easily reviewed later.'
        models: '[AI] `dbt test --models` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This specific command runs tests for all models defined in your dbt project. A model, in the dbt context, refers to a file defining data transformations using SQL or other supported languages. The `--models` flag restricts test execution only to those models, as opposed to running tests for every artifact (models, snapshots, and tests) in the project.'
        no-defer: '[AI] `dbt test --no-defer` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command runs all tests defined in dbt projects without deferring the execution of any tests that may depend on other tests or models. In simpler terms, it runs all tests synchronously instead of allowing tests to run asynchronously in parallel, which could lead to test ordering issues. This option can be useful when debugging test failures or when you want to ensure that all tests pass before moving forward.'
        no-favor-state: '[AI] `dbt test --no-favor-state` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command runs tests without using the last known good state as a baseline for comparison. In other words, it discards previous test results and re-runs all tests from scratch, ensuring a fresh test environment each time you run this command. It''s useful when dealing with unstable tests or configurations that frequently change.'
        no-version-check: '[AI] `dbt test --no-version-check` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command skips the version check during testing, allowing users to run their tests against previously cached database schema and data snapshots even if there are newer dbt core or dependency package versions available. By doing so, it can save time by avoiding unnecessary installation steps and potential breaking changes introduced in new versions.'
        profile: '[AI] `dbt test --profile` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command runs tests defined in dbt projects against specific database profiles. Profiles configure the connection settings to different databases or environments, enabling users to test and deploy data models against various targets. By using `--profile`, you can run tests selectively against a particular profile, ensuring that your data pipelines function correctly across multiple environments.'
        project-dir: '[AI] `dbt test --project-dir` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This specific command runs all tests defined in a given dbt project directory, which is specified using the `--project-dir` option. It executes test suites against the latest snapshot or model output and reports any failures. The objective is to ensure data models are correct before deploying them to production.'
        select: '[AI] `dbt test --select` is a command in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command is used to run tests selectively on specific models or tests files within a dbt project. The `--select` option followed by the model or test file names allows users to choose which artifacts to test, rather than running all tests by default. It helps in saving time during development and debugging by focusing on specific tests instead of running an entire suite.'
        selector: '[AI] `dbt test --selector` is a command used in dbt (data build tool), an open-source data transformation and testing tool. This command is utilized to run only specific tests within a dbt project that match the given selector expression. The selector argument filters tests based on test ID, description, or other custom attributes defined in the test cases file. By providing a valid selector, you can run a subset of your tests efficiently, reducing the time and resources needed for a full test suite run.'
        state: '[AI] The `dbt test --state` command is used in dbt (Data Build Tool), an open-source data transformation and testing tool, to run tests with a specific state. The `--state` option specifies the name of the Antefact (test output) file, allowing you to rerun previously executed tests without having to re-execute the entire test suite or the corresponding SQL transformations. This can save time during development and testing when you want to focus on a specific set of tests.'
        store-failures: '[AI] `dbt test --store-failments` is a command used in dbt (data build tool) for running tests on your data models. The `--store-failures` option causes any tests that fail to be written as records to the `test_log` table in the dbt testing artifact store instead of being raised as Python exceptions. This allows for further processing and analysis of failed tests, such as collecting more detailed information or automating remediation actions. It''s a useful feature when dealing with large test suites or complex data pipelines, where automatically logging and handling test failures can save time and effort.'
        target: '[AI] `dbt test --target` is a command used in dbt (data build tool), a popular open-source data transformation and testing tool. This specific command runs tests only for the selected models or targets in a dbt project, specified by the `--target` argument. It executes tests in parallel for improved efficiency and provides detailed test results. The goal is to isolate and focus on testing specific parts of your data pipeline instead of running the entire suite.'
        target-path: '[AI] `dbt test --target-path` is a command used in dbt (data build tool), which runs tests only for the specific files or directories located at the specified target path(s). This command allows users to focus testing on particular models, transformations, or tests, increasing testing efficiency and reducing the time required for the entire test suite execution.'
        threads: '[AI] `dbt test --threads` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This specific command runs the tests defined in a dbt project using multiple threads for parallel processing. By default, dbt uses one thread for testing. Using multiple threads can decrease the overall test execution time as more tests can be run simultaneously. However, using too many threads might lead to increased resource usage or even instability due to concurrency issues. Therefore, it is essential to find an optimal number of threads based on your specific system resources and test suite size.'
        vars: '[AI] `dbt test --vars` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command runs tests defined in dbt projects with additional user-defined key-value pairs passed as variables using the `--vars` flag. These variables can be referenced in tests to customize test behavior or input data, allowing for greater test flexibility and customization.'
