# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: link
description: Connect the local project to another one
group: general
flags:
    -A, --all: Link all workspaces belonging to the target project to the current one
    -p, --private: Also link private workspaces belonging to the target project to the current one
    -r, --relative: Link workspaces using relative paths instead of absolute paths
documentation:
    command: '[AI] `yarn link` is a Yarn package manager command used for developing and sharing linked packages between projects. With `yarn link`, you can create a link between the source package (the project where the package is developed) and the target project, allowing the target project to use the source package as an external dependency without having to install it again. It simplifies the development process when working on multiple related projects and makes sharing and updating dependencies easier.'
    flag:
        all: '[AI] `yarn link --all` is a command used with Yarn, a popular package manager for JavaScript projects. This command is utilized to link all the packages in a Yarn workspace at once, making them installable as local development dependencies in other projects. It simplifies the process of sharing and developing code across interconnected projects within the same workspace.'
        private: '[AI] `yarn link --private` is a command used in Yarn, a popular JavaScript package manager. This command facilitates creating a symlink between local packages and a specific project within your development environment. The `--private` flag indicates that the linked packages should not be published to the global Yarn registry, keeping them as private dependencies. This setup is often used for developing and testing shared components across multiple projects in a monorepo or a microservices architecture without making them publicly accessible yet.'
        relative: '[AI] `yarn link --relative` is a command used with Yarn, a popular package manager for JavaScript projects. This command facilitates linking local packages to other projects in the same Yarn workspaces or directories. The `--relative` flag modifier ensures that the linked package will be resolved relatively to the current directory instead of an absolute path. In practice, it allows you to link a package within the same project without specifying its full path in the `package.json` file of the dependent project. This can help manage dependencies more effectively and simplify development workflows when working with multiple related projects.'
