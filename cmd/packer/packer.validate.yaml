# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: validate
description: check that a template is valid
flags:
    -except=: Validate all builds other than these.
    -machine-readable: Produce machine-readable output.
    -only=: Validate only these builds.
    -syntax-only: Only check syntax. Do not verify config of the template.
    -var*=: Variable for templates, can be used multiple times.
    -var-file=: JSON or HCL2 file containing user variables.
documentation:
    command: '[AI] `packer validate` is a command used by Packer, an open-source tool for building machine images, VM images, and containers. This command checks your Packer configuration files (HCL files) for syntax errors and validates the provisioners, builders, and other settings specified in those files. It ensures that your Packer files are correctly formatted and ready to be used with Packer, preventing potential issues during image building or deployment processes.'
    flag:
        except: '[AI] `packer validate --except` is a command used in Packer, an open-source tool for building machine images, to perform validation checks on your Packer configuration files. The `--except` option is used to exclude specific validation checks from being run. This can be useful when you want to quickly check the validity of most checks, but not all of them. For example, if you know that certain checks may fail due to external dependencies or temporary issues, you can use `--except` to skip those checks and focus on the ones that are essential for your setup. The exact list of validation checks that will be run is determined by the checks defined in your Packer configuration file, minus the ones excluded with `--except`.'
        machine-readable: '[AI] `packer validate` is a command-line tool from Hashicorp''s Packer that validates your Packer configuration files against the specified machine image or template to ensure compatibility and correctness. The `-machine-readable` flag is used to specify that the input file for validation should be in machine-readable format, which is a plain text format that can be parsed by machines. This ensures that the input file adheres to Packer''s schema and syntax rules, thus increasing the reliability of your automation workflows.'
        only: '[AI] `packer validate -only` is a command in Hashicorp''s Packer tool used to check the syntactical correctness of a Packer configuration file without actually building or provisioning any resources. The `-only` flag specifies that only validation should be performed, and no action will be taken against the infrastructure. This can help catch errors early in the development process, preventing potential issues when running the full build cycle.'
        syntax-only: '[AI] `packer validate -syntax-only` is a command used with Hashicorp''s Packer tool to check the syntax of a Packer configuration file without actually building or running any infrastructure. This helps ensure that the file adheres to Packer''s syntax rules before applying it to your infrastructure setup.'
        var: '[AI] `packer validate -var` is a command used in Packer, an open-source tool for building machine images, to validate the templates and user variables passed to Packer during image construction. The `validate` subcommand checks the syntax and correctness of these inputs without actually creating any machines or running any builders. This helps ensure that Packer configurations are error-free before execution.'
        var-file: '[AI] `packer validate` is a command-line tool from Hashicorp''s Packer configuration management software used to validate the syntax and structure of Packer configuration files. The `-var-file` option is used to specify one or more files that contain variables to be passed into the validation process. These variables can include values for things like access keys, secret tokens, or other sensitive information needed for Packer to build and manage machine images. This helps keep sensitive data out of version control systems and makes it easier to manage configuration data across different environments.'
