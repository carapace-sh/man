# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: priorityclass NAME --value=VALUE --global-default=BOOL [--dry-run=server|client|none]
aliases:
    - pc
description: Create a priority class with the specified name
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --description=: description is an arbitrary string that usually provides guidelines on when this priority class should be used.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --global-default: global-default specifies whether this PriorityClass should be considered as the default priority.
    --preemption-policy=: preemption-policy is the policy for preempting pods with lower priority.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    --value=: the value of this priority class.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] The `kubectl create priorityclass` command is used to create a Kubernetes PriorityClass object in a cluster managed by kubectl. A PriorityClass defines a set of priorities that can be assigned to Pods, allowing for fine-grained control over their scheduling and execution based on resource availability and criticality. By providing the necessary YAML or JSON configuration as an argument, this command creates a new PriorityClass with the given name, values, and other relevant characteristics.'
    flag:
        allow-missing-template-keys: |-
            [AI] `kubectl create priorityclass` is a command used to create a Kubernetes PriorityClass object in a cluster managed by the `kubectl` tool. The option `--allow-missing-template-keys` enables the creation of a PriorityClass even if some mandatory template keys are missing from the YAML manifest file.

            In Kubernetes, a PriorityClass is an object that defines a set of priorities for Pods based on their labels or names. These priorities determine how scheduling decisions are made among conflicting Pods when resources are scarce. By default, `kubectl` requires a complete YAML manifest file to create an object, but this option allows for the creation of a PriorityClass with missing keys, which can be set later.

            In summary, `kubectl create priorityclass --allow-missing-template-keys` creates a Kubernetes PriorityClass with optional, missing template keys that can be filled in later.
        description: |-
            [AI] `kubectl create priorityclass` is a command used to create a new PriorityClass object in Kubernetes. A PriorityClass defines a set of priorities for Pods, which are used to schedule and manage workloads based on their importance level. The `--description` flag is optional and allows you to specify a brief description or explanation of what the PriorityClass does or represents. For example:

            ```bash
            kubectl create priorityclass high-priority --description="Used for mission-critical applications"
            ```

            This command creates a new PriorityClass named "high-priority" with the given description. When scheduling Pods, the Kubernetes scheduler can use this description as a helpful label to understand the purpose and significance of the corresponding workload.
        dry-run: '[AI] `kubectl create priorityclass --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a new PriorityClass resource in a dry-run mode. A PriorityClass resource defines a set of priorities for pods in a Kubernetes cluster. When creating a new priority class with this command, it will display what the API server would do if you actually applied the command, but no actual changes are made to the cluster. It''s a good way to test and validate your configuration before applying the changes.'
        field-manager: '[AI] `kubectl create priorityclass` is a command used to create a new Kubernetes PriorityClass object. The `--field-manager` flag is an optional parameter that specifies the name of the manager of the fields in the created PriorityClass. This means that when you create a new PriorityClass using this flag, Kubectl will set the manager field in the object to the provided value. The manager field identifies which controller or component is responsible for managing the ordering and scheduling of jobs based on the defined priority levels in the PriorityClass.'
        global-default: '[AI] `kubectl create priorityclass --global-default` is a command used in Kubernetes to create a new PriorityClass object with the global default flag set. A PriorityClass defines a set of priorities that can be assigned to Pods, controlling their scheduling order within a cluster. Setting the --global-default flag means this specific PriorityClass will be applied as the default for all namespaces in the cluster unless overridden by a more specific PriorityClass. This command creates or updates the global default PriorityClass, ensuring that new or existing deployments follow the desired scheduling priority rules.'
        output: '[AI] `kubectl create priorityclass` is a command used to create a new Kubernetes PriorityClass object in the cluster. The `--output` flag is optional and specifies the output format for the command. By default, no output is displayed. With `--output=json`, the command will return the newly created PriorityClass resource in JSON format. Other possible output formats include `yaml` or `go-template`. This command sets the priority for Pods based on their labels and is used to ensure that certain workloads are scheduled before others when resources are scarce.'
        preemption-policy: '[AI] The `kubectl create priorityclass` command is used to create a new Kubernetes PriorityClass object in a cluster. The `--preemption-policy` flag is an optional parameter that specifies the preemption policy for this PriorityClass. Preemption allows a higher-priority pod to take resources away from a lower-priority one, ensuring critical workloads get executed before less important ones. With `--preputation-policy` set, you can define two possible values: "Preemptible" or "Background". The former indicates that the pods with this PriorityClass will be preemptible and may be terminated to make resources available for pods with higher priority. The Background policy is the default, meaning those pods won''t be preempted unless they are evicted by other means (like node failure or node taint).'
        save-config: '[AI] `kubectl create priorityclass` is a command used to create a new Kubernetes PriorityClass object in the cluster. The `--save-config` flag is an optional argument that instructs the `kubectl` tool to save the created resource definition as a file named `priorityclass-<name>.yaml` in the current working directory. This can be useful for storing and reusing the configuration for creating similar PriorityClasses in the future.'
        show-managed-fields: '[AI] The `kubectl create priorityclass` command creates a new Kubernetes PriorityClass object in the cluster. The `--show-managed-fields` flag is an optional argument that, when provided, makes `kubectl` show the managed fields in the output of the created resource. Managed fields are those fields that were set by the API server based on the user-specified fields and the overall desired state of the cluster. By displaying managed fields, users can see the actual values applied by the API server, which may differ from the initial user request due to various reasons like conversions or validations.'
        template: |-
            [AI] `kubectl create priorityclass` is a command used to create a new Kubernetes PriorityClass object in the cluster. The `--template` flag is an optional argument that allows you to define the YAML manifest for the new PriorityClass using a template, instead of providing the full YAML definition in the command line. This can make it easier to manage and customize the creation of multiple similar PriorityClasses. For example:

            ```bash
            $ kubectl create priorityclass my-pc --template="apiVersion: v1 PriortyClass: my-pc Description: 'Priority class for my workloads' Value: 0.5"
            ```

            This command creates a new PriorityClass named `my-pc`, with the description "Priority class for my workloads", and sets its value to `0.5`. This can be useful when you need to create multiple similar PriorityClasses, but want to avoid typing out the same YAML definition each time.
        validate: '[AI] `kubectl create priorityclass --validate` is a command used in Kubernetes to create a new PriorityClass object with given specifications, but without actually applying it to the cluster. The `--validate` flag is used to check if the provided YAML definition for the new PriorityClass is valid against the Kubernetes schema before creation. This helps prevent errors and ensures that the created object will conform to the expected format. If the validation passes, you can then use `kubectl apply` to create the PriorityClass in the cluster.'
        value: '[AI] `kubectl create priorityclass` is a command used to create a Kubernetes PriorityClass object in a cluster managed by the Kubernetes toolset. A PriorityClass defines a set of priorities that can be assigned to Pods, allowing for fine-grained control over scheduling and resource management. The `--value` flag specifies the value for the `.metadata.annotations.<key>` field within the newly created PriorityClass. This annotation is used by the Kubernetes scheduler to identify which jobs or workloads should be prioritized when resources are scarce.'
