# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: directive
description: Creates a new, generic directive definition in the given or default project
flags:
    --export: The declaring NgModule exports this directive.
    --flat: Creates the new files at the top level of the current project.
    --project=: The name of the project.
    --selector=: The HTML selector to use for this directive.
    --skip-import: Do not import this directive into the owning NgModule.
    --skip-tests: Do not create "spec.ts" test files for the new class.
    -m, --module=: The declaring NgModule.
    -p, --prefix=: A prefix to apply to generated selectors.
documentation:
    command: '[AI] `ng generate directive` is a command used in Angular CLI to create a new Angular directive. It automatically sets up the basic structure of the directive, including a new TypeScript file for the component logic and an associated HTML template file, as well as updating necessary metadata files such as the declarations and entry components files. This allows you to quickly scaffold a new Angular directive in your project.'
    flag:
        export: '[AI] `ng generate directive --export` is a command used in Angular to create a new custom Angular Directive with the `--export` flag enabling Angular''s component compiler to emit the directive as an NgModule in the generated file. This makes it possible for other components or modules to import and use the directive as a dependency.'
        flat: '[AI] `ng generate directive --flat` is a command used in Angular for generating a new custom Angular Directive using the Angular CLI (Command Line Interface). The `--flat` option tells the CLI to generate only the minimum necessary files and not create an associated component or test files. This results in a lightweight directive definition that can be easily integrated into other components or modules within your Angular project.'
        module: '[AI] `ng generate directive` is a command used in Angular to create a new Angular directive. The `--module` option specifies the Angular module where the new directive will be added as a declaration and exported for usage in other components or modules. This helps keep the code organized and modular. For instance, `ng generate directive myDirective --module app.components.my-component.module`, would create a new directive named "myDirective" and add it to the module "app.components.my-component.module".'
        prefix: '[AI] `ng generate directive` is a command used in Angular to create a new Angular directive. The `--prefix` option (short form `-p`) that follows this command is an argument used to specify a prefix for the generated file names. The prefix will be added as a common string at the beginning of the names of all generated files related to the new directive, including the component file (if applicable), template file(s), and style file(s). This can help maintain consistency in naming conventions across your project.'
        project: '[AI] `ng generate directive --project` is a command used in Angular to create a new custom Angular Directive within an existing Angular project. The `--project` option specifies the name or the path of the target Angular project where the new directive will be generated. This command creates necessary files such as the component, template, and style files for the directive under the appropriate `components`, `app.module.ts`, and other related folders within the specified project.'
        selector: '[AI] `ng generate directive` is a command used in Angular to create a new Angular directive. The `--selector` option specifies the CSS selector that identifies the element(s) on which the directive can be applied. For example, `ng generate directive myDirective --selector="app-my-component"` will create a new directive named `myDirective` with the selector `app-my-component`, allowing it to be used in HTML templates via that selector.'
        skip-import: '[AI] `ng generate directive --skip-import` is a command used in Angular to create a new custom Angular directive without automatically generating and importing a corresponding file in the `@angular/common` module. This option can be useful when you want to manually manage or exclude the imported files for organization, optimization, or other specific reasons.'
        skip-tests: '[AI] `ng generate directive --skip-tests` is a command used in Angular to create a new custom Angular Directive without generating test files. The `--skip-tests` flag instructs the Angular CLI to exclude creating test files for the newly generated component, which can be useful when you don''t intend to write tests for that particular directive. This command generates the directive''s source files and sets up its basic structure in the specified location within your Angular application.'
