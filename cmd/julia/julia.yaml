# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: julia
description: high-level, high-performance dynamic programming language for technical computing
flags:
    --banner=: Enable or disable startup banner
    --bug-report?: Launch a bug report session.
    --check-bounds=: Emit bounds checks always, never, or respect @inbounds declarations
    --code-coverage?: Count executions of source lines
    --color=: Enable or disable color text
    --compiled-modules=: Enable or disable incremental precompilation of modules
    --depwarn=: Enable or disable syntax and method deprecation warnings ("error" turns warnings into errors)
    --handle-signals=: Enable or disable Julia's default signal handlers
    --help-hidden: Uncommon options not shown by `-h`
    --history-file=: Load or save history
    --inline=: Control whether inlining is permitted, including overriding @inline declarations
    --machine-file=: Run processes on hosts listed in <file>
    --math-mode=: Disallow or enable unsafe floating point optimizations
    --project=: Set <dir> as the home project/environment
    --startup-file=: Load `~/.julia/config/startup.jl`
    --sysimage-native-code=: Use native code from system image if available
    --track-allocation?: Count bytes allocated by each source line
    --warn-overwrite=: Enable or disable method overwrite warnings
    --warn-scope=: Enable or disable warning for ambiguous top-level scope
    -E, --print=: Evaluate <expr> and display the result
    -H, --home=: Set location of `julia` executable
    -J, --sysimage=: Start up with the given system image file
    -L, --load=: Load <file> immediately on all processors
    -O, --optimize?: Set the optimization level
    -e, --eval=: Evaluate <expr>
    -h, --help: Print this message (--help-hidden for more)
    -i: Interactive mode; REPL runs and isinteractive() is true
    -p, --procs=: Integer value N launches N additional local worker processes
    -q, --quiet: 'Quiet startup: no banner, suppress REPL warnings'
    -t, --threads=: Enable N threads
    -v, --version: Display version information
documentation:
    command: '[AI] `julia` is a high-level, high-performance dynamic programming language for technical computing, with syntax that is familiar to users of other modern languages such as Python and MATLAB. The term "julia" can refer to both the programming language itself and the open-source interpreter or compiler used to run Julia code. When typed in a command line interface or terminal window, running the `julia` command starts the Julia REPL (Read-Evaluate-Print Loop) or launches the Julia environment for writing, editing, and executing code.'
    flag:
        banner: |-
            [AI] The `--banner` option in Julia is used to display a custom banner message at the beginning of the output when running a script or interactively in the REPL (Read-Evaluate-Print Loop). This can be helpful for branding or identifying the purpose of the session. To set a custom banner, use `using Printf` and then call `@info` with a string containing the desired banner message, wrapping it with `%` signs and using placeholders if needed, before running your code. For example:

            ```julia
            using Printf
            function my_function()
                @info "============= My Function ============" for msg in ["Starting function...", "Function completed."] end
                # Your code here
            end
            ```
        bug-report: '[AI] The `--bug-report` flag in Julia is used to generate a detailed report when an error occurs during program execution. This report includes relevant information such as version numbers, operating system details, call stack traces, and other diagnostic data that can help in identifying and addressing bugs or issues. The generated report can be saved to a file for further analysis, making it easier for developers to understand the root cause of the problem and take appropriate action to fix it.'
        check-bounds: '[AI] The `--check- bounds` flag in Julia is used to enable bounds checking during program execution. Bounds checking is a feature that ensures array indices are within the defined bounds of the arrays, preventing out-of-range accesses and potential errors. With this flag enabled, Julia will throw an exception when an index goes beyond the bounds of an array. It''s particularly useful for debugging and developing code, but can impact performance as it requires additional checks at runtime.'
        code-coverage: '[AI] `julia --code-coverage` is a command-line argument used with the Julia programming language to invoke its built-in code coverage analysis tool. This tool generates data about which parts of your code have been executed during testing, allowing you to identify untested or undertested areas and improve test coverage. By analyzing the generated coverage report, developers can gain insights into their code''s execution paths and make informed decisions on how to optimize tests or enhance code quality.'
        color: '[AI] The `--color` flag in Julia is used to enable or disable colored output in the REPL (Read-Evaluate-Print Loop) and other terminal-based interfaces. When this option is set, Julia will display output with colored syntax highlighting and other visual cues. For example, error messages may be displayed in red, while keywords and functions are highlighted in different colors. The flag can typically be passed as an argument when starting the Julia REPL or when running a script, for instance `julia --color=yes`.'
        compiled-modules: '[AI] The `--compiled-modules` flag in Julia is used when starting the Julia REPL (Read-Evaluate-Print Loop) or when running a script with the Julia compiler. It instructs Julia to precompile all the required external compiled modules before executing the code. This can lead to faster execution times and reduced startup time, especially for large projects that depend on many external packages. The flag is particularly useful for production environments where fast performance is crucial.'
        depwarn: '[AI] The `--depwarn` flag in Julia is used to control the output of dependency warnings. When this flag is passed during compilation or REPL startup, it tells the Julia compiler to print out warnings when it encounters dependencies that are missing or outdated. This can help users identify and resolve issues with their project''s dependencies. However, if there are many dependencies, the output can be verbose, so use `--depwarn` judiciously depending on your needs.'
        eval: |-
            [AI] `julia --eval` is a command-line argument for the Julia programming language interpreter. It allows users to pass and execute arbitrary Julia expressions or code snippets directly from the command line, without having to create a new file or use an Integrated Development Environment (IDE). Instead, the expression or code block is provided as a string, following the `--eval` flag and enclosed in single quotes. For instance:

            ```bash
            julia --eval 'println("Hello, World!")'
            ```

            This command evaluates and runs the given expression, which is simply printing "Hello, World!" to the standard output.
        handle-signals: '[AI] The `--handle-signals` flag in Julia is used to specify that the Julia runtime should handle operating system signals itself, instead of allowing user code to do so. This can be important for ensuring proper behavior and avoiding potential signal handling errors or race conditions in multi-threaded applications. When this flag is passed during startup, the Julia runtime will take care of handling signals such as INT, TERM, or HUP, among others. The default behavior is to let user code handle signals, so using this flag can provide an additional level of safety and reliability for your Julia application.'
        help: '[AI] `julia --help` is a command used in Julia, a high-performance dynamic programming language for technical computing. This command displays detailed help information about the Julia compiler and its usage. The output includes options for setting various compilation flags, specifying input files, defining entry points, and more. It also provides a brief description of each option and their default values, making it an essential resource for users looking to customize their Julia compilation process.'
        help-hidden: '[AI] The `--help-hidden` flag is a command-line option for Julia, a high-level programming language. When used, it displays a list of all available commands and hidden flags, which are options that are not typically invoked directly but may be useful in specific situations or advanced use cases. By providing this comprehensive list, users can explore the full range of features offered by Julia''s built-in tools.'
        history-file: '[AI] The `--history-file` option in Julia is used to specify a file where the REPL (Read-Evaluate-Print Loop) will save its command history. When you start the REPL with this option, for example `julia --history-file=myfile.julia`, it will write each entered command to the file after execution. This can be useful for saving and reloading command histories for future use.'
        home: '[AI] The `--home` flag in Julia is used to specify a custom location for storing the Julia data directory, which contains user-specific settings and packages. By default, this directory resides in `~/.julia`. Using `--home <path>` during installation or invocation of Julia sets the data directory to the specified `<path>`. This can be useful when working on multiple projects with different configurations or when using a version control system like Git.'
        i: '[AI] The `-i` flag in Julia is used for interactive mode. When you run Julia with this option (`julia -i`), it starts an interactive session where you can enter expressions and see the results immediately, allowing for quick experimentation and exploration of Julia''s capabilities.'
        inline: '[AI] `--inline` is a command-line option for Julia, a high-level programming language. This flag enables inline caching and just-in-time compilation during code execution. Inlining means that the compiler replaces the function call with the actual code of the function at the point of call, which can lead to performance improvements by reducing the overhead of function calls. The `--inline` option also activates other JIT optimization features for better runtime efficiency.'
        load: '[AI] The `--load` flag in Julia is used to load a script or module into the current REPL (Read-Evaluate-Print Loop) session without executing its contents immediately. This allows you to access the defined functions, types, and other bindings from the loaded file for further use in your current session without having them interfere with the global scope when they are executed. When using `--load`, the script or module is only parsed and its symbols are added to the current session''s namespace. To execute the contents of the loaded file, use the `include()` function instead.'
        machine-file: '[AI] The `--machinefile` option in Julia is used to specify a machine file, which is a text file that lists the compute resources or nodes on which a parallel computation should be run. This option is typically used with the `ParallelStroke` and `Distributed` packages to execute Julia code in parallel across multiple processors or machines. The machine file describes the topology of the parallel computing environment and the mapping of tasks to processes or nodes, enabling efficient data exchange and task synchronization during parallel computations.'
        math-mode: '[AI] `--math-mode` is a command-line argument for Julia, a high-level programming language. This option enables the use of MathMode in Julia''s REPL (Read-Evaluate-Print Loop) and in scripts. MathMode allows users to write mathematical expressions using symbolic mathematics instead of just numerical computations, providing a more convenient and expressive way for handling complex mathematical equations within Julia.'
        optimize: '[AI] The `--optimize` flag in Julia is used to enable just-in-time (JIT) compilation for a given script or interactive session. JIT compilation is a technique that compiles and executes code on the fly, allowing for significant performance improvements by generating machine code specifically tailored to the input data. This can result in faster execution times compared to interpreted code, making it particularly useful for computationally intensive tasks. When used with Julia''s REPL or as an argument to `julia` when running a script, this flag instructs the compiler to apply optimizations during runtime, improving overall performance.'
        print: '[AI] The `--print` flag in Julia is used to print the output of a Julia script or expression to the standard output stream (i.e., the console), instead of executing it in batch mode without any output. It is often used for testing and debugging purposes, allowing users to see the result of a computation immediately. When running a script with this flag, Julia will execute the code and display the resulting output directly to the console.'
        procs: '[AI] The `--procs` flag in Julia is used to specify the number of processing units (i.e., CPU cores or nodes) for parallel computations using Julia''s built-in parallelism capabilities, such as Task Parallelism and Distributed Computing. By default, Julia uses a single process. When `--procs` is set with an integer value, it starts the specified number of processes to run computations in parallel. This can lead to significant performance improvements for computationally intensive tasks. For instance, running `julia --procs 4 myscript.jl` would start Julia with 4 processing units.'
        project: '[AI] The `--project` flag in Julia is used to specify a particular project file, also known as a manifest file, when running the REPL or executing scripts. It tells the Julia interpreter to load and use the project file''s dependencies instead of the default ones. This ensures consistent environments for development and testing across different sessions. The project file usually has the `Project.toml` extension.'
        quiet: '[AI] The `--quiet` flag in Julia is used to suppress output from the standard stream during the execution of a script or command. This means that any messages, warnings, or errors printed by the Julia interpreter will not be displayed. This can be useful when running automated tests, building projects, or scripts where you prefer to have a clean console without interruptions.'
        startup-file: '[AI] The `--startup-file` option in Julia is used to specify a custom startup file, which contains a set of instructions or code that gets executed automatically when Julia starts up. This can be helpful for setting up the environment, loading packages, defining functions, or performing other tasks before running other parts of the code. The startup file should be a regular text file with the extension `.jl` and should be located in the user''s home directory (`~/.julia/config/startup.jl`) by default.'
        sysimage: '[AI] The `--sysimage` flag in Julia is used to build and run a script or project as a standalone executable without bringing up the Julia REPL (Read-Evaluate-Print Loop) or starting the Jupyter notebook server. This mode, also known as sysimage mode, is useful for deploying applications where you want minimal runtime dependencies, as it packages the application with all its required dependencies into a single executable file. When using `--sysimage`, Julia generates an image of the current project environment and bundles it together with your code to create a self-contained application.'
        sysimage-native-code: '[AI] The `--sysimage-native-code` flag is a command-line argument for the Julia programming language. When this option is used, Julia compiles the entire standard library and user code into native machine code before starting the REPL or running the script. This results in faster start-up times and improved performance since the code does not need to be JIT compiled at runtime. However, it also means that changing any part of the codebase requires a complete rebuild, making development less efficient.'
        threads: '[AI] The `--threads` flag in Julia is used to specify the number of threads to use for parallel computation. By default, Julia uses a single thread. However, when this flag is passed to the Julia command-line interface (CLI), it instructs the REPL or script to utilize multiple threads for executing tasks concurrently. The specified number of threads is an argument and can be set to any positive integer value. This can lead to improved performance on multi-core systems by taking advantage of parallelism.'
        track-allocation: '[AI] The `--track-allocation` flag in Julia is used to enable memory profiling during the execution of a Julia script or interactive session. When this option is set, Julia automatically gathers detailed information about memory allocations, including the number of allocations, total allocated memory size, and peak memory usage. This data can be output in various formats, such as a text report or a visualization using tools like `profview` or `LineProf`. Memory profiling with `--track-allocation` helps identify memory consumption patterns and optimize Julia code for improved performance and efficient use of system resources.'
        version: '[AI] `julia --version` is a command used in the Julia programming language to display the version information of the installed Julia executable. When run in a terminal or command prompt, it prints out the Julia version number, revision number, and build information. This can be helpful for checking which version of Julia is currently being used, or for ensuring that a specific version is installed before running a Julia script.'
        warn-overwrite: '[AI] The `--warn-overwrite` flag in Julia is used to enable a warning when trying to overwrite an existing file during I/O operations. By default, Julia overwrites files without asking for confirmation. With this flag, Julia issues a warning instead and does not overwrite the file unless explicitly instructed to do so using additional flags or commands. This can help prevent accidental data loss and is useful when working with critical data.'
        warn-scope: '[AI] The `--warn-scope` flag in Julia is used to enable warnings related to variable scoping rules. These warnings help identify potential issues with defining and using variables that have the same name but different scopes, which can lead to unintended behavior or bugs in your code. By default, Julia does not emit these warnings to keep the output clean. However, enabling this flag can provide additional guidance during development to ensure correct usage of variables across different blocks, functions, and modules.'
