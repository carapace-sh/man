# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gen
description: generate the wire_gen.go file for each package
flags:
    -header_file=: path to file to insert as a header in wire_gen.go
    -output_file_prefix=: string to prepend to output file names.
    -tags=: append build tags to the default wirebuild
documentation:
    command: '[AI] The `wire gen` command is a part of the OpenStreetMap data processing toolset, Osmosis. It generates missing ways based on existing ways and nodes in an OSM file. Specifically, it creates new ways with the shortest possible length to connect two nodes that are not already connected by a way. This can be useful for filling in gaps in the data or improving the completeness of a map. The command takes as input an OSM file, generates the missing ways, and outputs the result as a new OSM file.'
    flag:
        header_file: '[AI] `wire gen --header-file` is a command provided by the Wire protocol library for Haskell. It generates header files for the specified Wire services, which can be used to easily access the generated types and operations in other parts of your Haskell codebase. This command takes one or more service names as arguments and writes corresponding header files in the current directory. These headers simplify communication with the Wire services by hiding implementation details and providing type-safe interfaces.'
        output_file_prefix: '[AI] `wire gen` is a command-line tool provided by the Open Source Verilog Platform (OSVPM) for generating C code from Verilog descriptions using the Wire Protocol. The `--output_file_prefix` option specifies a prefix to be added to the generated output files'' base names. For example, if you set `--output_file_prefix="my_"` and generate a file named "test.v", the resulting C output files will be named "my\_test.c" by default. This can be useful for organizing related Verilog and generated code in a consistent manner.'
        tags: '[AI] The `--tags` option in Wire''s `gen` command is used to generate only specific tags or modules during the code generation process. This can be helpful when working on a large project, as it allows for selective regeneration of certain parts of the codebase without having to regenerate everything. You specify the desired tags or modules using a comma-separated list or a regular expression pattern. For example, `--tags=MyTag1,MyTag2` would generate only the code for those two specific tags.'
