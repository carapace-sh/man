# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: template
description: locally render templates
group: main
flags:
    --atomic: if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used
    --ca-file=: verify certificates of HTTPS-enabled servers using this CA bundle
    --cert-file=: identify HTTPS client using this SSL certificate file
    --create-namespace: create the release namespace if not present
    --dependency-update: update dependencies if they are missing before installing the chart
    --description=: add a custom description
    --devel: use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
    --disable-openapi-validation: if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
    --dry-run: simulate an install
    --include-crds: include CRDs in the templated output
    --insecure-skip-tls-verify: skip tls certificate checks for the chart download
    --is-upgrade: set .Release.IsUpgrade instead of .Release.IsInstall
    --key-file=: identify HTTPS client using this SSL key file
    --keyring=: location of public keys used for verification
    --kube-version=: Kubernetes version used for Capabilities.KubeVersion
    --name-template=: specify template used to name the release
    --no-hooks: prevent hooks from running during install
    --output-dir=: writes the executed templates to files in output-dir instead of stdout
    --pass-credentials: pass credentials to all domains
    --password=: chart repository password where to locate the requested chart
    --post-renderer=: the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
    --release-name: use release name in the output-dir path.
    --render-subchart-notes: if set, render subchart notes along with the parent
    --replace: re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production
    --repo=: chart repository url where to locate the requested chart
    --set*=: 'set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --set-file*=: 'set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)'
    --set-string*=: 'set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --skip-crds: if set, no CRDs will be installed. By default, CRDs are installed if not already present
    --skip-tests: skip tests from templated output
    --timeout=: time to wait for any individual Kubernetes operation (like Jobs for hooks)
    --username=: chart repository username where to locate the requested chart
    --validate: validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install
    --verify: verify the package before using it
    --version=: specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used
    --wait: if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout
    --wait-for-jobs: if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout
    -a, --api-versions*=: Kubernetes api versions used for Capabilities.APIVersions
    -f, --values*=: specify values in a YAML file or a URL (can specify multiple)
    -g, --generate-name: generate the name (and omit the NAME parameter)
    -s, --show-only*=: only show manifests rendered from the given templates
documentation:
    command: '[AI] `helm template` is a command used in Helm, the Kubernetes Package Manager. It generates and previews the rendered templates for a given Helm chart without installing or upgrading it. The output can be reviewed to understand the changes that will be made if the chart were to be installed or upgraded using `helm install` or `helm upgrade`. This command is useful for debugging, reviewing changes before deployment, and understanding the final Kubernetes manifest structure of a Helm chart.'
    flag:
        api-versions: '[AI] `helm template --api-versions` is a command used in Helm, the Kubernetes Package Manager. This command generates rendered templates based on Helm Charts without installing or upgrading them. The `--api-versions` flag specifies the API versions for custom resources and controllers in the generated output. It ensures that the templates use the specified API versions when they are deployed to a Kubernetes cluster, enabling better compatibility and control over resource management.'
        atomic: '[AI] `helm template --atomic` is a command used in Helm, a popular Kubernetes package manager. This command generates and writes the rendered templates to standard output instead of creating or updating files on disk. The `--atomic` flag ensures that the rendering process is idempotent and safe for production use. It means that the same input will always produce the same output, avoiding unwanted side effects from previous renderings. In summary, using `helm template --atomic` allows you to securely preview and apply changes to your Kubernetes templates without affecting your working files or live cluster configuration.'
        ca-file: |-
            [AI] The `helm template` command in Helm, a popular Kubernetes package manager, is used to generate Kubernetes manifest files from Helm Charts. The `--ca-file` option is a flag provided with this command.

            This flag specifies the location of a trusted Certificate Authority (CA) file for use when connecting to an SSL/TLS secured Tiller Server or other secure repositories. In other words, it helps establish a secure connection between your local Helm environment and the remote repository that hosts the Helm Charts you want to deploy. This is crucial when interacting with sensitive environments or when following best security practices.
        cert-file: '[AI] `helm template` is a command-line utility used in Helm, the Kubernetes Package Manager, to render and generate the files that define Kubernetes resources based on Helm charts. The `--cert-file` option is used to specify the path to a client certificate file when connecting to an SSL/TLS enabled Tiller server. This is useful in securing communication between Helm clients and Tiller servers by using client certificates for authentication.'
        create-namespace: '[AI] `helm template --create-namespace` is a command used with Helm, a popular Kubernetes package manager. This command creates a new namespace (a logical division of resources in a Kubernetes cluster) before rendering and applying a Helm chart''s templates. It ensures that the required namespace exists before deploying any resources, making the deployment process more efficient and error-free.'
        dependency-update: '[AI] `helm temple --dependency-update` is a command used in Helm, a popular Kubernetes package manager. This command updates the dependencies listed in a Helm chart to their latest versions, without triggering a full chart installation or upgrade process. It ensures that your chart''s dependency lists are always up-to-date with the latest stable versions of their dependencies. This can be beneficial for keeping your Helm environments consistent and maintaining good security practices.'
        description: '[AI] `helm template` is a command used in Helm, a popular Kubernetes package manager. The `--description` flag is an optional argument that requests Helm to print a description of the specified chart or template. It provides a brief summary about what the chart does and its intended use.'
        devel: '[AI] `helm temple --devel` is a command used in Helm, the Kubernetes package manager. This command is for developing and testing Helm templates locally without interacting with a Helm repository or a production Kubernetes cluster. The `--devel` flag enables the development mode which allows you to use features like live-reload of template changes and automatic linting. Changes made to the template files will be applied in real-time when you reapply the chart using `helm install`. It''s an essential tool for creating, debugging, and refining Helm templates before publishing them publicly.'
        disable-openapi-validation: '[AI] The `helm template --disable-openapi-validation` command is used to disable OpenAPI validation when generating Kubernetes manifests using Helm. Helm is a popular package manager for Kubernetes applications, and it supports generating YAML files from Helm charts based on OpenAPI definitions. Enabling this validation ensures that the generated Kubernetes resources conform to the OpenAPI schema, which can be useful for ensuring consistency between APIs and their implementations. However, there might be cases where one wants to generate manifests without this validation check. In such scenarios, `--disable-openapi-validation` flag is used to bypass this validation and generate manifests more quickly.'
        dry-run: '[AI] `helm template --dry-run` is a command used with Helm, a popular Kubernetes package manager. This command generates and displays what would be rendered as Kubernetes manifest files if the specified Helm chart was installed or upgraded without actually modifying the existing Kubernetes cluster. In other words, it provides a preview of the changes that will be made before executing them. The `--dry-run` flag makes this operation safe to review and test without affecting the live cluster.'
        generate-name: '[AI] `helm template --generate-name` is a command used in Helm, a popular Kubernetes package manager. This command generates a new name for a resource or chart based on a provided template. The `--generate-name` flag instructs Helm to automatically create a unique name using the given template. This can be useful when deploying multiple instances of the same chart and avoiding name conflicts.'
        include-crds: '[AI] `helm template --include-crds` is a command used in Helm, a popular Kubernetes package manager. This option instructs Helm to generate and include Custom Resource Definitions (CRDs) when rendering templates. CRDs define new types of custom resources that can be deployed in Kubernetes, extending the capabilities of the platform. By including CRDs with `helm template`, users can ensure that any dependent custom resources are generated during template rendering. This is especially useful when deploying complex applications where multiple custom resources need to be managed together.'
        insecure-skip-tls-verify: '[AI] The `helm template --insecure-skip-tls-verify` command is used with Helm, a popular Kubernetes package manager. This flag allows you to bypass TLS certificate verification when interacting with a Helm repository or chart server. In secure environments, it is recommended to ensure that the communication between your system and the chart repository is encrypted using valid certificates. However, in certain situations, such as testing or working with self-signed certificates, you may need to disable this check using `--insecure-skip-tls-verify`. By doing so, Helm will not verify the TLS certificates presented during communication and will proceed with the operation. This flag is a security risk if used in production environments or when interacting with untrusted sources.'
        is-upgrade: '[AI] `helm template --is-upgrade` is a Helm command used to check if there are any changes in the values or charts before applying an upgrade. It generates the rendered templates based on the given chart and values, but does not install or upgrade anything. The `--is-upgrade` flag specifically instructs Helm to compare the current state of the resources with the desired state generated from the new chart and values, allowing you to preview the changes before actually upgrading. This is useful for validating modifications made to charts or values before deploying them in a production environment.'
        key-file: '[AI] The `helm template` command is used in Helm, a popular Kubernetes package manager, to generate Kubernetes manifest files from Helm Charts. The `--key-file` option is used to specify the path to a TLS client certificate or key file for secure communication with an SSL/TLS enabled Helm repository. This flag ensures that Helm can authenticate and access repositories using HTTPS.'
        keyring: '[AI] `helm template` is a command from Helm, a popular Kubernetes package manager. The `--keyring` option is used to specify a path to a GPG keyring file when deploying a chart that uses Helm''s built-in secret management feature, Values.yaml files encrypted with GPG. By providing the `--keyring` flag, Helm can decrypt the values using the specified keyring and make them available as template context for rendering charts.'
        kube-version: '[AI] The `helm template` command is used to generate Kubernetes manifest files from Helm charts without installing or upgrading them. The `--kube-version` flag specifies the version of Kubernetes API server that the generated manifests should be compatible with. This can be useful when creating or testing charts against specific Kubernetes versions, as it ensures that any YAML syntax and chart schema are consistent with the specified API version.'
        name-template: '[AI] `helm template` is a command used in Helm, a popular Kubernetes package manager. The `--name-template` option allows users to customize the name of resources created by a Helm chart. The value provided to this flag will be used as the base for generating unique names for resources within the chart. For example, setting `--name-template "myapp-{{ .Release.Name }}-"` would result in resources being named "myapp-<release-name>" during deployment. This can be useful for ensuring consistent naming conventions across multiple deployments.'
        no-hooks: '[AI] `helm template --no-hooks` is a command used in Helm, a popular Kubernetes package manager. This command generates rendered templates based on Helm charts without applying or executing any hooks. Hooks are custom scripts or actions that can be defined in a Helm chart to run before or after the installation, upgrade, or deletion of a chart. By using `--no-hooks`, you''re explicitly asking Helm not to execute these hooks during template generation. This command is useful when you only want to preview the generated configuration files, without actually making any changes to your Kubernetes cluster.'
        output-dir: '[AI] `helm template --output-dir` is a command used in Helm, the Kubernetes Package Manager, to render and generate files from Helm charts based on provided values. The `--output-dir` option specifies the local directory where the rendered files should be written. This can be useful for generating configuration files or templates for deployment, without directly applying them to a Kubernetes cluster.'
        pass-credentials: '[AI] `helm template` is a command provided by Helm, a popular Kubernetes packaging and deployment tool. The `--pass-credentials` option allows you to securely pass Kubernetes credentials (usually in the form of a `kubeconfig` file) to a Helm chart for templating and rendering output YAML files that can be used to create or update Kubernetes resources. This way, you don''t need to hardcode sensitive information into your templates or make them publicly accessible. Instead, the credentials are securely passed to the command, ensuring better security compliance in your deployments.'
        password: |-
            [AI] The `helm template` command is used in Helm, a popular Kubernetes packaging and deployment tool, to generate Kubernetes manifest files from Helm charts. The `--password` option is not a standard argument for this command. It seems you might have confused it with another command or tool that uses this option, such as `kubectl create secret`. In the context of Helm, there's no need to use this option. If you want to create a Kubernetes Secret using Helm, you should follow the standard procedure:

            1. Create a file named `mysecret.yaml` or similar, defining the contents of your secret in YAML format. For example:

            ```yaml
            apiVersion: v1
            kind: Secret
            metadata:
              name: mysecret
            type: Opaque
            data:
              mykey: cGFzc3dvcmQ= # base64-encoded value for 'mykey'
            ```

            2. Use Helm to install or upgrade your chart, which might include this Secret as a dependency:

            ```bash
            helm install mychart ./ --set mykey.value=secret_value
            ```

            3. If you need to generate the YAML file for the secret dynamically instead of manually creating it, you can use Helm template functions like `{{ index .Values "mykey" }}`. You might want to create a separate Helm chart for this purpose:

            ```bash
            helm create mysecret-chart --template mysecret.yaml
            ```

            Then update the `mysecret.yaml` file with appropriate functions and values.
        post-renderer: '[AI] `helm template --post-renderer` is a command used in Helm, a popular Kubernetes package manager. This command is used to customize and render templates after Helm has processed them with its built-in templating engine. The rendered output can then be passed to other tools or scripts for further processing. By default, Helm applies the values from your chart''s `values.yaml` file to the templates during rendering. With `--post-renderer`, you can define a custom function that receives the rendered template and returns the final result. This allows advanced customizations like conditional logic, data transformations, or integration with external APIs.'
        release-name: '[AI] The `helm template` command in Helm, a popular Kubernetes package manager, is used to generate Kubernetes manifests from Helm charts without installing or upgrading them. The `--release-name` flag is optional and specifies the name of an existing release for which you want to generate the templates. This can be useful when you want to see the current configuration of a running chart, make modifications offline, or create custom versions of charts. If not provided, Helm will generate templates based on the default values defined in the chart.'
        render-subchart-notes: '[AI] `helm template --render-subchart-notes` is a command used in Helm, a popular Kubernetes package manager, to generate the notes section for a specific subchart (a reusable chart that can be included in other charts) during the rendering process. This command does not actually apply or install the chart; it only generates the rendered template files and notes for the specified subchart. The output includes both the rendered templates and the notes, which typically contain important information about the subchart''s configuration options and usage.'
        replace: '[AI] `helm template --replace` is a command used in Helm, a popular Kubernetes package manager. This command generates rendered templates for Helm charts based on the current values and configuration. The `--replace` flag indicates that existing YAML files generated by Helm should be overwritten with the new output, rather than appending to or merging with them. Essentially, it ensures that the output files are always in sync with the latest chart version and values.'
        repo: '[AI] `helm template --repo` is a command used in Helm, a popular Kubernetes package manager. This command generates rendered templates from Helm charts without installing or upgrading them. The `--repo` option specifies the Helm repository URL to fetch the chart from, allowing you to use charts not yet added to your local Helm repositories. For example: `helm template my-chart --repo https://mychartrepository/charts`.'
        set: '[AI] `helm template` is a command from Helm, the Kubernetes package manager. The `--set` flag allows users to override or provide values for Helm chart templates before rendering them as Kubernetes manifests. This is useful when users want to customize charts without modifying their original source code. By passing key-value pairs with the `--set` flag, users can specify new values for template variables, allowing for more flexible and dynamic deployments.'
        set-file: '[AI] `helm template --set-file` is a command used in Helm, the Kubernetes Package Manager, to render Helm templates and replace placeholders with values from a YAML or JSON file. The `--set-file` option allows you to provide one or more files that contain key-value pairs for overriding template variables instead of passing them as arguments to the command. This can be useful when managing complex configurations, allowing for easier maintenance and versioning of configuration data.'
        set-string: |-
            [AI] `helm template` is a command from Helm, a popular Kubernetes package manager. The `--set-string` option allows users to override and set string values in Helm templates before rendering them. This can be useful for customizing configurations or settings without modifying the original template files. When using this option, users specify the key and value of the string they want to set. For example:

            ```sh
            helm template my-chart --set-string myKey="myValue"
            ```

            This command renders the `my-chart` Helm chart with a customized `myKey` string value of `"myValue"`.
        show-only: '[AI] `helm template --show-only` is a command used in Helm, a popular Kubernetes package manager. This command is used to render templates without installing or upgrading them. The `--show-only` flag specifies that only the rendered templates should be printed to the console, without actually applying them to any Kubernetes cluster. This can be useful for reviewing changes before deploying, or for generating configuration files outside of a live environment.'
        skip-crds: '[AI] `helm template --skip-crds` is a command used in Helm, a popular Kubernetes package manager. This command generates and previews Kubernetes manifest files based on Helm charts without installing Custom Resource Definitions (CRDs). CRDs are extensions to the Kubernetes API that allow for custom resources. By using `--skip-crds`, you can avoid the potential complexity and additional steps associated with managing CRDs, making it useful when you only need to preview or generate manifests without installing new resources in your cluster.'
        skip-tests: '[AI] `helm template --skip-tests` is a command used in Helm, a popular Kubernetes package manager, to generate Kubernetes manifests without executing any tests defined in the Chart''s test suite during the rendering process. By using `--skip-tests`, you can save time when generating manifests for testing or staging environments where manual validation and integration tests are already in place.'
        timeout: '[AI] `helm template` is a command in Helm, a popular Kubernetes package manager. The `--timeout` flag sets the maximum time in seconds that Helm waits for the rendered templates to be processed and applied by Kubernetes before it times out and reports an error. This can be useful when dealing with slow rendering or large template files. By default, there is no timeout set.'
        username: '[AI] The `helm template` command is used to generate Kubernetes manifests from Helm Charts. The `--username` flag is an authentication option, which allows specifying a username for Helm to use when interacting with a Helm repository or chart registry. This can be useful in securing access to private charts or repositories.'
        validate: '[AI] `helm template --validate` is a command used in Helm, the Kubernetes package manager. It validates a Helm chart against its schema definitions without actually deploying it. This means that any errors or warnings can be identified and resolved before implementing the changes in a production environment, ensuring the chart adheres to the expected format and structure. The output provides details on any issues found during the validation process.'
        values: '[AI] `helm template --values` is a command used in Helm, a popular Kubernetes package manager. This command generates rendered templates from Helm charts without installing or upgrading them. The `--values` option specifies a YAML file or values passed as arguments to override the default chart values before rendering the templates. The output is the generated Kubernetes manifests that would be applied if the chart was installed or upgraded with these values.'
        verify: '[AI] `helm template --verify` is a command used in Helm, the Kubernetes Package Manager, to validate a Helm Chart template without deploying it. This operation checks the syntax and structure of the YAML files in the template directory against the schema defined by Helm, ensuring that all required fields are present and correctly formatted. The output indicates any errors or warnings encountered during the verification process. If successful, the command exits with a zero exit code, signifying that the template is valid.'
        version: '[AI] `helm template --version` is a command used in Helm, the Kubernetes Package Manager. This command displays the version number of the Helm temple engine being used to process and generate Kubernetes manifests from Helm charts. It''s useful for checking which version of the templating engine you have installed when troubleshooting or updating your Helm setup.'
        wait: '[AI] `helm template --wait` is a command used in Helm, a popular Kubernetes package manager. This command generates and displays the rendered templates for a given Helm chart without installing or upgrading it. The `--wait` flag adds an extra level of convenience by automatically retrying the generation process if there are any templating errors or other transient issues, making sure that the final output is correct before displaying it.'
        wait-for-jobs: '[AI] `helm template --wait-for-jobs` is a command used in Helm, a popular Kubernetes package manager. This command generates and displays the templates and charts for creating or updating Kubernetes resources without actually applying them to the cluster. The `--wait-for-jobs` flag adds an extra behavior, making Helm wait until all the created jobs are completed before exiting. It ensures that you get a consistent view of the generated templates even if there are dependencies between different parts of your Helm chart.'
