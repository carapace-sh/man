# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list
description: List installed packages
flags:
    --exclude-editable: Exclude editable package from output.
    --exclude=: Exclude specified package from the output
    --extra-index-url=: Extra URLs of package indexes to use in addition to --index-url.
    --format=: Select the output format
    --include-editable: Include editable package from output.
    --no-index: Ignore package index
    --not-required: List packages that are not dependencies of installed packages.
    --path=: Restrict to the specified installation path for listing packages
    --pre: Include pre-release and development versions.
    --user: Only output packages installed in user-site.
    -e, --editable: List editable projects.
    -f, --find-links=: parse file for links to archives
    -i, --index-url=: Base URL of the Python Package Index
    -l, --local: do not list globally-installed packages.
    -o, --outdated: List outdated packages
    -u, --uptodate: List uptodate packages
documentation:
    command: '[AI] `pip list` is a command used in Python to display detailed information about installed packages and their versions from the Python Package Index (PyPI) repository. It provides a list of packages, their names, versions, and the location of the installation. This command helps users to check and manage their current Python package environment.'
    flag:
        editable: '[AI] `pip list --editable` is a command used with pip, which is a package manager for Python. This specific command generates a text file called `Pipfile.lock` or `requirements.txt`, listing the packages and their editable versions required by your project, represented as Git URLs or local file paths in the format `git+URL|path/to/project#egg=package`. Using this format allows for easy development of dependent projects, where changes made to one project''s codebase will be reflected when you install packages from their editable sources.'
        exclude: |-
            [AI] `pip list --exclude` is a command used with pip, which is a package manager for Python. This command displays the installed packages and their versions in the current virtual environment or global installation. The `--exclude` option allows you to exclude specific packages from being listed. You can pass multiple packages to be excluded by providing them as arguments separated by a space. For instance:

            ```bash
            pip list --exclude=package1 package2
            ```

            This command will display the installed packages except for 'package1' and 'package2'. It is useful when you want to check on the status of your other packages without having to see certain unwanted ones.
        exclude-editable: '[AI] `pip list --exclude-editable` is a command used with pip, the Package Installer for Python. This command generates a list of installed packages in a Python environment along with their versions. The `--exclude-editable` option is used to exclude any editable installations from the output. Editable installations are packages that are installed directly from a Git or Mercurial repository, and not from the PyPI package index. This means they may have different versions or names compared to the packaged versions available on PyPI, and their presence in `pip list` output can potentially cause confusion. Therefore, using `--exclude-editable` helps keep the output cleaner and more consistent with the packages installed from PyPI.'
        extra-index-url: |-
            [AI] The `pip list --extra-index-url` command is used with pip, which is a popular package manager for Python. This command displays a list of installed packages along with their respective versions.

            The `--extra-index-url` option allows specifying one or more additional index URLs to search for packages when installing or upgrading packages. These index URLs can be useful when working with private package repositories, or when requiring specific package versions that may not be available in the default Python Package Index (PyPI).

            For example: `pip list --extra-index-url=http://mycompany.com/package_repo/` would list the installed packages along with their versions from both PyPI and the given additional index URL.
        find-links: '[AI] `pip list --find-links` is a command used with pip, which is a package manager for Python. The `--find-links` option tells pip to look for wheels or sources for installed packages in the given URLs instead of the default PyPI indexes. It returns a list of packages and their respective links where they were found, not installing them unless explicitly instructed with other pip commands like `install`.'
        format: '[AI] `pip list --format` is a command used with pip, which is a package manager for Python. This specific command generates a list of installed packages in a project, along with their versions and locations. The `--format` option specifies the output format as a string. By default, it''s displayed in an easy-to-read table format, but other formats can be chosen for automation or further processing by external tools. For example, `--format=freeze` will output the packages in the form `package==version`.'
        include-editable: |-
            [AI] The `pip list --include-editable` command is a function of Pip, which is a package manager for Python. It generates a list of installed packages in the current Python environment along with their versions.

            The `--include-editable` option expands the list to include projects that are installed as "editable" sources. Editable installations refer to a local directory where you've made modifications, but haven't created a new package version. When using this command, these projects will be shown in the output with a special prefix `-e`, indicating they are installed in editable mode.

            For instance, if you have a project `myproject` located at `./myproject`, and you have activated its virtual environment, running `pip list --include-editable` will display this project under the `-e` prefix, like:

            ```bash
            -e ./myproject (from .)
            ...
            ```
        index-url: '[AI] `pip list --index-url` is a command used with pip, which is a package manager for Python. The `--index-url` option sets the URL of the index server to use when installing or updating packages. It allows specifying an alternative index server, such as a local repository or a specific version of PyPI, instead of using the default one. This can be useful in cases where you have restricted network access or need to use a private package repository.'
        local: '[AI] `pip list --local` is a command used with pip, which is a package manager for Python. This specific command lists all locally installed packages in the current project or virtual environment, meaning those installed using `pip install` with no index URL specified or with the `--user` or `--local` option. These packages are not included in the global Python installation or other projects/environments. It provides a detailed output including package name, version number, and location (path to the `.egg-info` directory), allowing users to manage their local dependencies effectively.'
        no-index: '[AI] The `pip list --no-index` command is used in Python programming to generate a list of installed packages and their corresponding versions, excluding the index server URLs from the output. This command retrieves the information from the local `pip` cache and displays it in a tabular format with columns for package name, version, location (path to the installed wheel or source file), and other relevant details. It is often used to create a requirements file or to check the current state of installed packages without accessing external index servers.'
        not-required: '[AI] `pip list --not-required` is a command used with pip, Python''s package installer. This command generates a list of installed packages in a Python project without displaying the version numbers or other metadata. The `--not-required` option is used to suppress the output indicating that each package is already satisfied by the current virtual environment or system installation. It simply lists the names of the installed packages, making it easier to check which packages are currently being used without having to sift through version information.'
        outdated: '[AI] `pip list --outdated` is a command used with pip, which is a package manager for Python. This specific command displays a list of installed packages in the current project, along with any available updates for each package, including the new version number and the link to download the updated package. It helps keep track of outdated packages and maintain an up-to-date Python environment.'
        path: '[AI] The `pip list --path` command is used with pip, which is a package manager for Python. It generates a text output listing all installed packages and their respective locations in the file system under the given local Python installation. The `--path` option specifies that only the install path should be printed, displaying the absolute filesystem location of the Python packages'' installations.'
        pre: '[AI] The `pip list --pre` command is used with pip, which is a package manager for Python. This specific command displays a list of the current project''s requirements-external.txt file content along with their corresponding pre-releases instead of stable versions. Pre-releases are development builds that may include new features or bug fixes not yet in stable releases. Using this command can help install and manage these pre-releases as dependencies for your Python project.'
        uptodate: '[AI] `pip list --uptodate` is a command used with pip, which is a package manager for Python. This specific command lists all installed packages in the current Python environment along with their versions, and then displays only those packages that have the latest available version according to the index URLs (such as PyPI or local repositories) defined in your `pip.conf` file or `requirements.txt`. It helps you keep your packages up-to-date with the latest stable releases.'
        user: '[AI] `pip list --user` is a command used in Python programming language to display a list of packages installed for a specific user environment. By default, `pip` installs packages globally, meaning they are available to all users on the system. However, `--user` option installs and manages packages locally for the current user only. Running `pip list --user` lists all the installed packages in that user''s site-packages directory.'
