# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gitui
description: blazing fast terminal-ui for git
flags:
    --bugreport=: Generate a bug report
    --polling: Poll folder for changes instead of using file system events
    -V, --version: Print version information
    -d, --directory=: Set the git directory
    -h, --help: Print help information
    -l, --logging: Stores logging output into a cache directory
    -t, --theme=: Set the color theme
    -w, --workdir=: Set the working directory
documentation:
    command: '[AI] `gitui` is not a Git command itself, but rather a reference to "GitUI", a graphical user interface for Git version control system. GitUI provides an easier-to-use interface than the command line for common Git operations like cloning repositories, making commits, and merging branches. It runs as a standalone application on Windows platforms. If you meant to ask about `git gui` which is Git''s own graphical user interface for Git commands, it offers similar functionalities but is distributed with Git itself and doesn''t require additional installation.'
    flag:
        bugreport: '[AI] `gitui --bugreport` is a command used in GitUI, a graphical user interface for Git. This command generates and saves a detailed report of any current bugs or issues within GitUI to a file. The report includes information such as version number, operating system details, and error messages related to the bug. This information can be useful for developers when diagnosing and fixing issues with the GitUI application.'
        directory: '[AI] `gitui --directory` is a command-line option for GitUI, a graphical user interface for Git version control system. This option sets the working directory for GitUI to the specified path instead of the current one when opening GitUI. It helps users work with multiple projects having different working directories at the same time.'
        help: '[AI] `gitui --help` is a command used in GitUI, a graphical user interface for Git version control system. This command displays detailed help information about GitUI and its various features, options, and commands. The output includes usage instructions, examples, and explanations of each option. It''s a useful resource for users who want to learn more about the capabilities of GitUI or need a refresher on specific functions.'
        logging: '[AI] `gitui` is a graphical user interface for Git version control system. The option `--logging` is used to enable detailed logging when using GitUI. This means that every Git operation performed through GitUI will be recorded and displayed in the log window, showing the commit message, author, date, and other relevant information. It can be useful for tracking changes, troubleshooting issues, or reviewing past actions in a Git repository.'
        polling: '[AI] `gitui --polling` is a command-line argument for GitUI, a graphical user interface for Git version control system. This option enables automatic polling or fetching for changes in a remote repository. With this flag enabled, GitUI periodically checks for new commits or changes in the remote branch and updates the local repository accordingly, without requiring explicit `fetch` or `pull` commands. This feature helps keep the local repository up-to-date with the latest changes from the remote repository.'
        theme: '[AI] `gitui --theme` is a command used in GitUI, a graphical user interface for Git version control system. The `--theme` option allows users to switch between different visual themes for customizing the appearance of GitUI. Each theme defines colors and styles for various elements such as text, headers, and buttons. By using this option with a specific theme name, users can change the look and feel of their GitUI interface to better suit their preferences or working environment.'
        version: '[AI] `gitui --version` is a command used in GitUI, a graphical user interface for Git version control system. This command is used to display the current version of GitUI that is installed and running. The output will typically include the name of the application, its version number, and any build information or additional details. For example: `GitUI 1.0.2 (r256)`.'
        workdir: '[AI] `gitui --workdir` is a command-line argument for GitUI, a graphical user interface (GUI) for Git version control system. The `--workdir` option specifies the local Git repository directory that GitUI should use as its working directory. This allows users to easily open and manage multiple repositories from within the same GitUI application instance.'
