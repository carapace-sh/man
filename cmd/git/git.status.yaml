# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: status
description: show the working tree status
group: main
flags:
    --ahead-behind: display detailed ahead/behind counts for the branch relative to its upstream branch
    --column?: Display untracked files in columns.
    --find-renames?: turn on rename detection, optionally setting the similarity threshold
    --ignore-submodules?: Ignore changes to submodules when looking for changes.
    --ignored?: Show ignored files as well
    --long: Give the output in the long-format. This is the default.
    --no-ahead-behind: do not display detailed ahead/behind counts for the branch relative to its upstream branch
    --no-column: Do not display untracked files in columns.
    --no-renames: turn off rename detection
    --porcelain?: Give the output in an easy-to-parse format for scripts.
    --renames: turn on rename detection
    --show-stash: Show the number of entries currently stashed away.
    -b, --branch: Show the branch and tracking info even in short-format.
    -s, --short: Give the output in the short-format.
    -u, --untracked-files=: Show untracked files
    -v, --verbose: also show the textual changes
    -z: Terminate entries with NUL, instead of LF.
documentation:
    command: '[AI] `git status` is a Git command used to display the current state of your working directory and the staging area (also known as the index). It shows which files have been modified, added, deleted, or are untracked. The output is divided into several sections: the working directory, the staging area, and any unmerged files if you''re on a branch with merge commits. This command helps developers understand which changes they need to commit and which files they should handle before doing so.'
    flag:
        ahead-behind: '[AI] The `git status --ahead-behind` command displays the difference between the local and the remote repositories in terms of commits. The output shows which branches are ahead, behind or both in relation to each other. Ahead means the local branch has more commits than the remote one, while behind means the reverse. This command is useful for tracking changes made on remote repositories that have not yet been merged into your local copy.'
        branch: '[AI] The `git status --branch` command displays the current branch and the branches with local changes or unmerged commits in your Git repository. It provides a brief summary of each branch''s status, helping you keep track of your working directory and manage your Git branches effectively.'
        column: |-
            [AI] `git status --column` is a Git command used to display the current state of the working directory and the staging area in a single column format. Each file or directory appears as a single line, showing its current status:

            1. `A`: File is added to the staging area but not yet committed.
            2. `M`: File has been modified and staged for commit.
            3. `D`: Deleted file.
            4. `?`: Untracked or new file.
            5. `R`: Renamed file.
            6. `S`: Submodule changed (not relevant to normal files).
            7. White space: Empty directories.
            8. No character: File is unchanged and tracked, or directory is unchanged.
        find-renames: '[AI] `git status --find-renames` is a Git command that displays the files with renamed contents or moved files in the current repository. It helps developers identify files that have been modified, renamed, or moved within the directory structure during a Git commit. The `--find-renames` option enables Git to detect and report on these changes, making it easier for developers to track and resolve any conflicts that may arise when renaming or moving files in their project.'
        ignore-submodules: '[AI] The `git status --ignore-submodules` command is used to check the current state of the Git repository without considering the submodule''s status. With this option, Git will hide any information related to submodules and only display the changes in the main project files. This can be useful when you want to focus on the main project and not worry about the state of its submodules at the moment.'
        ignored: '[AI] The `git status --ignored` command displays the files in your Git repository that are currently ignored by Git, based on the .gitignore files in your project. It does not show changes to those files or any other file status information. The output lists the names of the ignored files under the "Ignored" heading.'
        long: |-
            [AI] `git status --long` is a Git command that displays the current state of the working directory and the staging area in a more detailed format. It lists files in three sections:

            1. **Untracked files:** Files not yet under version control.
            2. **Modified files:** Files with local changes that have not been staged for commit.
            3. **Staged files:** Files that have been modified and are ready to be committed.

            For each file, it shows the file path and its current state (unmodified, modified, or deleted). This command helps developers understand which files need attention before committing changes.
        no-ahead-behind: '[AI] The `git status --no-ahead-behind` command displays the current state of the Git repository, specifically focusing on any local branches that are not up-to-date with their respective remote branches. It does not show files that have been modified or staged, but only shows branches that are behind or have diverged from their remote counterparts. This can help developers keep track of branches that require pushing or pulling changes to maintain sync with their collaborators.'
        no-column: '[AI] The `git status --no-column` command displays the listing of modified, staged, and untracked files in a raw format without columns or formatting for easy parsing by scripts or other tools. It shows the file name followed by its current Git state: "A" for added, "M" for modified, "D" for deleted, "R" for renamed, "S" for staged, and "?" for untracked files. There is no visual separation between file names and their states unlike the default `git status` output.'
        no-renames: '[AI] `git status --no-renames` is a Git command that displays the current state of the working directory and the staging area (index), without showing file renames. This means it only reports added, modified, or deleted files, but does not show files that have been renamed as new or different files. It''s useful when you want to see the changes in your working directory and the index separately, but don''t need to see renamed files listed twice.'
        porcelain: |-
            [AI] `git status --porcelain` is a command used to display the changes made in a Git repository in a succinct and standardized format. The output consists of a series of lines, with each line representing a file or a part thereof under version control.

            A typical porcelain output includes the following columns:

            1. The status of the file (A for added, M for modified, D for deleted)
            2. The filename
            3. The hash of the last commit affecting the file, abbreviated to the first 7 characters
            4. The hash of the current file version, also abbreviated.

            This output format is designed for easy parsing by scripts and other automated tools, making it an essential command for advanced Git workflows.
        renames: '[AI] `git status --renames` is a Git command used to display the changes in the working directory that are not yet added to the staging area, with an emphasis on renamed files or directories. It shows both the files that have been deleted and the new files that replaced them, making it helpful when dealing with file renames during development. The output also indicates which files have been modified, and whether they''re in the working directory, indexed for a commit, or both.'
        short: |-
            [AI] `git status --short` is a Git command that provides a brief summary of the current state of the working directory and the staging area (index). It lists files in three states:

            1. `M` for modified files which have been changed since the last commit but not yet staged.
            2. `A` for added or deleted files that are staged for the next commit.
            3. `?` for untracked files which aren't under Git version control.

            This command is useful when you want a quick overview of changes without delving into detailed information.
        show-stash: '[AI] `git status --show-stash` is a Git command that provides an overview of the current state of your repository, including any uncommitted changes and files in the staging area. Additionally, it displays the contents of the stashing area (also known as the stash), which holds snapshots of your working directory and index that have been saved but not yet applied or dropped. This command is useful when you want to see what changes are currently being tracked, what''s in the staging area, and what''s in the stash, all in one go.'
        untracked-files: '[AI] The `git status --untracked-files` command displays the files in your current Git repository that are not yet under version control. These files have been added to your working directory but not yet committed or tracked by Git. The output of this command lists the names of untracked files, located in the current directory and its subdirectories, helping you identify and manage them as needed.'
        verbose: '[AI] `git status --verbose` is a Git command that displays the current state of the working directory and the staging area (index) in greater detail. The `--verbose` option enhances the output by providing more descriptive information on modified files, untracked files, deleted files, and other changes. For instance, it can show the exact file modifications like additions, deletions, or renamings within a file, as well as the location of the changes within the file. This command helps developers to better understand their Git working environment and the impact of their changes before committing them.'
        z: '[AI] `git status -z` is a Git command that displays the list of modified, added, and deleted files in your working directory, but it uses a compressed format (delimited by null characters) instead of the default human-readable output. This can be useful when processing Git data programmatically rather than interactively. Each line in the output represents a file or a directory and contains a status code indicating the file''s state: ''A'' for added, ''M'' for modified, ''D'' for deleted, and no character if unchanged.'
