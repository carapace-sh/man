# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: diff-closures
description: show the closure difference between each version of a profile
flags:
    --debug: Set the logging verbosity level to 'debug'
    --log-format=: Set the format of log output
    --profile=: The profile to operate on
    --quiet: Decrease the logging verbosity level
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] The `nix profile diff-closures` command is used in Nix, a package manager for Linux and other systems, to show the difference between two Nix profile configurations regarding their closure packages. A closure is a self-contained environment in Nix where all required dependencies are included. This command helps in identifying which closure packages have been added, removed or changed between the two profiles.'
    flag:
        debug: |-
            [AI] `nix-profile diff-closures --debug` is a Nix command that generates a debug output showing the differences between two Nix profile closure hashes.

            Nix profiles are collections of software packages managed by Nix. Each profile has a specific closure, which is a snapshot of the installed software at a particular point in time. By comparing closure hashes, you can see what changes have been made to the profile since the last snapshot.

            The `--debug` flag increases the verbosity of the output, providing more detailed information about the differences between the closures. This can be useful for troubleshooting and understanding the exact changes that were made to a Nix profile.
        log-format: '[AI] The `nix-profile diff-closures --log-format` command is used to generate a log showing differences between two Nix profile closures. A closure in Nix is a snapshot of the Nix expression tree at a given point in time, capturing the version of packages and their dependencies at that moment. The `--log-format` option specifies the output format for this log, which can be in JSON or text format. The generated log will display the changes made between the two closures, including additions, deletions, and modifications to packages and their versions.'
        print-build-logs: '[AI] `nix profile diff-closures --print-build-logs` is a Nix expression used to generate a difference report between two Nix profile configurations and print the build logs for those closures that have changed. It''s particularly useful when managing complex systems with multiple Nix profiles, helping to identify which profiles and closures (i.e., individual builds of packages) have been modified since the last comparison. The output provides detailed information about the changes made to the respective profiles, making it easier to understand the impact of those modifications.'
        profile: '[AI] `nix-profile diff-closures --profile` is a command in Nix, a package manager for Linux and other systems. It generates a difference report between the current and the specified Nix profile''s closure configurations. Closure configurations define the set of packages installed in a Nix profile. By comparing these differences, you can identify which packages have been added or removed between two profiles, helping in version control, configuration management, and understanding profile dependencies.'
        quiet: '[AI] The `nix-profile diff-closures --quiet` command is a Nix expression that generates a quiet difference report between two Nix profile closures. A closure in Nix refers to a specific snapshot of the system''s configuration, and `diff-closures` compares the differences between two such snapshots. The `--quiet` option silences informational messages during the comparison process, providing only the differences themselves.'
        verbose: '[AI] The `nix-profile diff-closures --verbose` command is a Nix expression that generates a detailed difference report between two Nix profile closures. A closure in Nix is a snapshot of the system state, including installed packages and their versions. This command shows the changes made to each individual attribute or property, such as package names, versions, and configuration settings, making it useful for understanding the differences between two Nix profile configurations.'
