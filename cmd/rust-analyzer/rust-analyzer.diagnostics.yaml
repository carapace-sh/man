# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: diagnostics
flags:
    --disable-build-scripts: Don't run build scripts or load `OUT_DIR` values by running `cargo check` before analysis.
    --disable-proc-macros: Don't use expand proc macros.
documentation:
    command: '[AI] `rust-analyzer diagnostics` is a Rust language server command that returns compiled diagnostic messages from the source code analysis performed by `rust-analyzer`. It provides detailed error and warning information about potential issues in Rust projects, which can be used to improve the codebase. The output is usually consumed by integrated development environments (IDEs) or text editors for real-time feedback to developers.'
    flag:
        disable-build-scripts: '[AI] The `--disable-build-scripts` flag for Rust analyzer''s diagnostics disables the checking of build scripts (like Cargo.toml) during linting and static analysis. This means that issues related to the format or correctness of the build configuration will not be reported, allowing users to focus on other types of errors in their codebase.'
        disable-proc-macros: '[AI] The `--disable-proc-macros` option in the Rust compiler''s diagnostic output, when used with rust-analyzer, disables the reporting of proc macros in the diagnostics. Proc macros are a powerful feature in Rust that allows macro definitions to produce code at compile time. However, they can generate complex and voluminous diagnostic messages. Disabling these messages might improve the clarity and focus of diagnostic output for some users.'
