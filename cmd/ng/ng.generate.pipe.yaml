# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pipe
description: Creates a new, generic pipe definition in the given or default project
flags:
    --export: The declaring NgModule exports this pipe.
    --flat: When true (the default) creates files at the top level of the project.
    --project=: The name of the project.
    --skip-import: Do not import this pipe into the owning NgModule.
    --skip-tests: Do not create "spec.ts" test files for the new pipe.
    -m, --module: The declaring NgModule.
documentation:
    command: '[AI] `ng generate pipe` is an Angular CLI command used to create a new custom Pipe. A Pipe is a functional component in Angular that transforms input data using a pure function. This command creates a new TypeScript file for the pipe, sets up the necessary metadata, and adds it to the appropriate Angular module. Once generated, you can use the pipe in your templates by adding it as a pipe within square brackets `[]`. For example: `{{ someProperty | myCustomPipe }}`.'
    flag:
        export: '[AI] `ng generate pipe --export` is a command used in Angular to create a new custom pipeline (also called filter or transform) with the `--export` option enabled. This option generates both the pipe definition file (located in `src/pipes`) and a separate file containing the exported pipe for external use (placed in `src/pipes` and `angular.json`''s `exports` array). The newly created pipe can be imported and used throughout your application, as well as in other projects via npm.'
        flat: '[AI] `ng generate pipe --flat` is a command used in Angular to create a new custom Pipe with the `--flat` option enabled. This option generates a single file for both the Pipe definition and its associated test file, as opposed to creating two separate files. It''s useful when you want to keep your pipe simple and have fewer files in your project.'
        module: '[AI] The `ng generate pipe --module` command is used in Angular to create a new custom pipe with its corresponding TypeScript file and a specified module where it will be registered for use in the application. This is accomplished by running the Angular CLI (Angular Command Line Interface) command, followed by the sub-command `generate`, then `pipe` to specify that we want to generate a pipe. The `--module` option is provided alongside the pipe name to indicate where the newly created pipe should be registered. This results in creating a new pipe component and registering it with the specified module for import and usage throughout the Angular application.'
        project: '[AI] `ng generate pipe --project` is a command used in Angular to create a new custom pipe within an existing Angular project. A pipe is a component that transforms input data using a pure function. This command generates the necessary files, including the TypeScript definition file and the HTML template if needed, for the new pipe based on the provided name.'
        skip-import: '[AI] `ng generate pipe --skip-import` is a command used in Angular to create a new custom Pipe without generating an import declaration for it in the corresponding Angular module file. This means that you will need to manually import and register the new pipe in the desired module after creation. The benefit of using this option is avoiding an unnecessary import statement, which can help keep your codebase cleaner and more focused on the specific changes you want to make.'
        skip-tests: '[AI] `ng generate pipe --skip-tests` is a command used in Angular for generating a new pipe without executing the tests associated with it during the generation process. This can be useful when you''re creating a pipe for local use or when you want to bypass the test phase for some reason, saving time and resources. The `--skip-tests` flag instructs Angular CLI to exclude running tests while generating the pipe.'
