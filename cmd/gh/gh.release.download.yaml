# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: download [<tag>]
description: Download release assets
group: Targeted commands
flags:
    --clobber: Overwrite existing files of the same name
    --skip-existing: Skip downloading when files of the same name exist
    -A, --archive=: Download the source code archive in the specified `format` (zip or tar.gz)
    -D, --dir=: The `directory` to download files into
    -O, --output=: The `file` to write a single asset to (use "-" to write to standard output)
    -p, --pattern*=: Download only assets that match a glob pattern
documentation:
    command: |-
        [AI] The `gh release download` command is used in GitHubActions and GitHub's gh CLI to download an artifact from a specific GitHub release. It requires specifying the repository, release identifier (tag or commit sha), and the name of the artifact to be downloaded. For example:

        ```bash
        gh release download REPO_OWNER/REPO_NAME@RELEASE_TAG ARTIFACT_NAME
        ```

        or:

        ```bash
        gh release download REPO_OWNER/REPO_NAME @RELEASE_COMMIT_SHA ARTIFACT_NAME
        ```
    flag:
        archive: '[AI] `gh release download --archive` is a command used in GitHub''s Git-over-HTTPS (gh) client to download all artifacts associated with a specific GitHub release. The `--archive` flag indicates that an archive of releases should be downloaded instead of individual files, making it convenient for those who need to obtain multiple artifacts at once.'
        clobber: '[AI] `gh release download --clobber` is a GitHub command used to force download the latest release artifact for a specific GitHub repository, overwriting any existing local file with the same name and hash. The `--clobber` flag permits this overwrite action.'
        dir: '[AI] `gh release download` is a GitHub command used to download artifacts (files) associated with a specific release of a GitHub repository. The `--dir` option specifies that the downloaded files should be saved in a designated directory instead of the current working directory. For example, `gh release download v1.0.0 --dir=downloads` would save the release artifacts in a folder named "downloads".'
        output: '[AI] `gh release download` is a command from GitHub''s CLI (Command-Line Interface) tool, `gh`, used to download a specific release file from a repository. The `--output` option specifies the output file name and destination path for the downloaded content. For example, `gh release download v1.0.0 --output my_file.tar.gz` will download the file named `my_file.tar.gz` from GitHub release with tag `v1.0.0`.'
        pattern: '[AI] `gh release download` is a command used in GitHub''s Git-Over-SSH (GitHub for Windows and Linux) or Git for Desktop tools to download a specific release of a GitHub repository as an archive file. The `--pattern` option filters the releases based on their tag names or other patterns, allowing you to download multiple releases that match the given pattern in one go. For example, `gh release download v1.0.0 v1.1.0 --pattern="v*.*.*"` would download releases with tags starting with "v" followed by two dots and any number of characters (version numbers).'
        skip-existing: '[AI] `gh release download --skip-existing` is a command used in GitHub''s Git-over-HTTPS (gh) CLI tool to download a specific release archive or artifact from a repository, bypassing existing local files with the same name and hash. This can be useful when dealing with large binaries that need frequent updates without requiring users to manually delete old files before downloading new ones.'
