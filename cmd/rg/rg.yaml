# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rg
description: recursively search current directory for lines matching a pattern
flags:
    --binary: Enabling this flag will cause ripgrep to search binary files.
    --block-buffered: When enabled, ripgrep will use block buffering
    --color=: This flag controls when to use colors.
    --colors=: This flag specifies color settings for use in the output.
    --column: Show column numbers (1-based).
    --context-separator=: The string used to separate non-contiguous context lines in the output.
    --count-matches: This flag suppresses normal output and shows the number of individual
    --crlf: When enabled, ripgrep will treat CRLF as a line terminator instead
    --debug: Show debug messages.
    --dfa-size-limit=: The upper size limit of the regex DFA. The default limit is 10M.
    --engine=: Specify which regular expression engine to use.
    --files: Print each file that would be searched without actually performing the search.
    --files-without-match: Only print the paths that contain zero matches.
    --glob-case-insensitive: Process glob patterns given with the -g/--glob flag case insensitively.
    --heading: This flag prints the file path above clusters of matches from each file instead
    --hidden: Search hidden files and directories.
    --iglob=: Include or exclude files and directories for searching that match the given
    --ignore-file-case-insensitive: Process ignore files (.gitignore, .ignore, etc.) case insensitively.
    --ignore-file=: Specifies a path to one or more .gitignore format rules files.
    --include-zero: When used with --count or --count-matches, print the number of matches for
    --json: Enable printing results in a JSON Lines format.
    --line-buffered: When enabled, ripgrep will use line buffering.
    --max-columns-preview: When the '--max-columns' flag is used, ripgrep will by default completely
    --max-depth=: Limit the depth of directory traversal to NUM levels beyond the paths given.
    --max-filesize=: Ignore files larger than NUM in size. This does not apply to directories.
    --mmap: Search using memory maps when possible.
    --multiline-dotall: This flag enables "dot all" in your regex pattern, which causes '.' to match
    --no-config: Never read configuration files.
    --no-heading: Don't group matches by each file.
    --no-ignore: Don't respect ignore files (.gitignore, .ignore, etc.).
    --no-ignore-dot: Don't respect .ignore files.
    --no-ignore-exclude: Don't respect ignore files that are manually configured for the repository
    --no-ignore-files: When set, any --ignore-file flags, even ones that come after this flag, are
    --no-ignore-global: Don't respect ignore files that come from "global" sources such as git's
    --no-ignore-messages: Suppresses all error messages related to parsing ignore files such as .ignore
    --no-ignore-parent: Don't respect ignore files (.gitignore, .ignore, etc.) in parent directories.
    --no-ignore-vcs: Don't respect version control ignore files (.gitignore, etc.).
    --no-messages: Suppress all error messages related to opening and reading files.
    --no-mmap: Never use memory maps, even when they might be faster.
    --no-pcre2-unicode: DEPRECATED. Use --no-unicode instead.
    --no-require-git: By default, ripgrep will only respect global gitignore rules, .gitignore rules
    --no-unicode: By default, ripgrep will enable "Unicode mode" in all of its regexes.
    --null-data: Enabling this option causes ripgrep to use NUL as a line terminator instead of
    --one-file-system: When enabled, ripgrep will not cross file system boundaries relative to where
    --passthru: Print both matching and non-matching lines.
    --path-separator=: Set the path separator to use when printing file paths.
    --pcre2-version: When this flag is present, ripgrep will print the version of PCRE2 in use,
    --pre-glob=: This flag works in conjunction with the --pre flag.
    --pre=: For each input FILE, search the standard output of COMMAND FILE rather than the
    --regex-size-limit=: ""
    --sort=: This flag enables sorting of results in ascending order.
    --sortr=: This flag enables sorting of results in descending order.
    --stats: Print aggregate statistics about this ripgrep search.
    --trim: When set, all ASCII whitespace at the beginning of each line printed will be
    --type-add=: Add a new glob for a particular file type.
    --type-clear=: Clear the file type globs previously defined for TYPE.
    --type-list: Show all supported file types and their corresponding globs.
    --vimgrep: Show results with every match on its own line, including line numbers and
    -0, --null: Whenever a file path is printed, follow it with a NUL byte.
    -A, --after-context=: Show NUM lines after each match.
    -B, --before-context=: 'Show NUM lines before each match.  '
    -C, --context=: Show NUM lines before and after each match.
    -E, --encoding=: Specify the text encoding that ripgrep will use on all files searched.
    -F, --fixed-strings: Treat the pattern as a literal string instead of a regular expression.
    -H, --with-filename: Display the file path for matches.
    -I, --no-filename: Never print the file path with the matched lines.
    -L, --follow: When this flag is enabled, ripgrep will follow symbolic links while traversing
    -M, --max-columns=: Don't print lines longer than this limit in bytes.
    -N, --no-line-number: Suppress line numbers. This is enabled by default when not searching in a
    -P, --pcre2: When this flag is present, ripgrep will use the PCRE2 regex engine instead of
    -S, --smart-case: Searches case insensitively if the pattern is all lowercase.
    -T, --type-not=: Do not search files matching TYPE.
    -U, --multiline: Enable matching across multiple lines.
    -V, --version: Prints version information
    -a, --text: Search binary files as if they were text.
    -b, --byte-offset: Print the 0-based byte offset within the input file before each line of output.
    -c, --count: This flag suppresses normal output and shows the number of lines that match
    -e, --regexp=: A pattern to search for.
    -f, --file=: Search for patterns from the given file, with one pattern per line.
    -g, --glob=: Include or exclude files and directories for searching that match the given
    -h, --help: Prints help information.
    -i, --ignore-case: When this flag is provided, the given patterns will be searched case
    -j, --threads=: The approximate number of threads to use.
    -l, --files-with-matches: Only print the paths with at least one match.
    -m, --max-count=: Limit the number of matching lines per file searched to NUM.
    -n, --line-number: Show line numbers (1-based).
    -o, --only-matching: Print only the matched (non-empty) parts of a matching line, with each such
    -p, --pretty: This is a convenience alias for '--color always --heading --line-number'.
    -q, --quiet: Do not print anything to stdout.
    -r, --replace=: Replace every match with the text given when printing results.
    -s, --case-sensitive: Search case sensitively.
    -t, --type=: Only search files matching TYPE.
    -u, --unrestricted: Reduce the level of smart searching.
    -v, --invert-match: Show lines that do not match the given patterns.
    -w, --word-regexp: Only show matches surrounded by word boundaries.
    -x, --line-regexp: Only show matches surrounded by line boundaries.
    -z, --search-zip: Search in compressed files.
documentation:
    command: '[AI] `rg` is a powerful text searching tool for the terminal, similar to `grep`. The name `rg` stands for "ripple grep," reflecting its ability to search recursively through directories and subdirectories. It supports various advanced search features like regex, multi-column searches, and more. With `rg`, you can quickly find specific text patterns in large codebases or file structures using efficient indexing and filtering capabilities.'
    flag:
        after-context: '[AI] The `--after-context` option in Git''s `rg` (Repository Grep) command is used to show the context of the matching lines in the output, but only for the changed lines from the most recent commit. In other words, it displays the preceding and following context of the modified lines that match the search pattern. This can be helpful when you want to see the exact changes made to the files in a given repository.'
        before-context: '[AI] The `--before-context` option in Git''s `rg` (repository grep) command is used to display the context (lines of code) before a match. It takes an integer argument specifying the number of lines to display before each match. This can be useful when trying to understand the context in which a match occurs, especially in larger files or projects. For example, `rg --before-context 3 file_path keyword` would display the three lines before each line containing the specified keyword.'
        binary: '[AI] The `rg --binary` flag is a command-line option used with the ripgrep (rg) search tool. This flag instructs ripgrep to perform a binary file search, which means it will look for exact byte sequences in specified files without decoding or interpreting their content. It''s particularly useful when searching for specific binary data within large binary files or across multiple files.'
        block-buffered: '[AI] The `--block-buffered` flag is used with the `rg` (ripgrep) command-line search tool to perform a block-buffered search. This means that rg reads the entire input file or standard input stream into memory in blocks before processing the data, which can improve performance when dealing with large files or large input streams. The flag improves efficiency by reducing the number of read() system calls, allowing rg to process the data more quickly.'
        byte-offset: '[AI] The `--byte-offset` option is used with the `rg` (ripgrep) command, which is a powerful search tool for text. This option modifies the output format to include the byte offsets of the matched lines in the input files. By providing these offsets, users can easily navigate to the precise location within the file where the search term appears. The offset values are provided relative to the beginning of each file.'
        case-sensitive: '[AI] The `--case-sensitive` flag is used with the `rg` (ripgrep) search tool, which is a powerful text search utility. This flag instructs `rg` to perform case-sensitive searches by default, meaning it will only find matches that exactly match the given search pattern in terms of upper and lower case letters. If not specified, `rg` performs case-insensitive searches by default.'
        color: '[AI] The `--color` option in the `rg` (ripgrep) command is used to enable colored output for search results. It makes the matching text stand out, making it easier to identify within the search output. Without this option, the output would be monochrome. This can be particularly helpful when searching through large codebases or files with numerous matches.'
        colors: '[AI] The `--colors` option is a flag used with the `rg` (ripgrep) search tool in terminal applications. When enabled, it changes the output color scheme to highlight the matched text and make it more visually distinguishable from the surrounding text. By default, `rg` uses monochrome colors for its output, so enabling this option can enhance readability, especially when searching through large files or directories.'
        column: '[AI] The `rg --column` option in `ripgrep` (`rg`) is used to output only the matched columns instead of the whole matching lines. It takes a column number or a column name as an argument and prints only the specified column for each matching line. For example, `rg --column 1 filename.ext` will print only the second column of each matching line in `filename.ext`.'
        context: '[AI] `rg --context` is a command used in the `ripgrep` (rg) search tool for Git repositories. This option displays the context, i.e., the surrounding lines, of each matching result. The number of context lines displayed can be specified using the `--num` flag, followed by an integer value. For example, `rg --context 5 my_search_term .` will display 5 lines before and after each match within the current directory.'
        context-separator: |-
            [AI] The `--context-separator` option is used with the `git diff` or `git log` commands in Git, when you want to see the difference between two versions of a file with a clear separation between the added and deleted context.

            When you use this option, Git will display the differences with a line that separates the added context from the deleted context. This makes it easier to identify which lines have been added or removed.

            For example: `git diff --context=3 <file> -- <commit1> <commit2>` would show the differences between two commits, with three lines of added context and three lines of deleted context clearly separated by a line.
        count: '[AI] The `rg --count` command is a feature of the `ripgrep` (rg) tool, which is used for searching text files for patterns. This option counts the number of matching lines in each file instead of displaying the matching lines themselves. So, when you run `rg --count PATTERN .`, it will print out how many lines in total across all matched files contain the given pattern.'
        count-matches: '[AI] The `--count-matches` flag is a command-line option used with `git`''s `rg` (fancy grep) tool for searching recursively through directories. When this flag is set, `rg` will return the number of matches instead of displaying the matching lines themselves. This can be useful when you just want to know how many times a particular pattern appears across multiple files in your repository without having to sift through the output.'
        crlf: '[AI] The `rg --crlf` command is a regex replacement using the ripgrep (rg) tool with the `--crlf` option. This option instructs rg to treat text as if it was created by Windows Notepad, automatically converting LF line endings to CRLF (Carriage Return + Line Feed), and vice versa during search and replace operations. This is useful when working with files that have mixed line ending formats, such as those transferred between Windows and Unix systems.'
        debug: '[AI] The `rg --debug` command is a debugging option for the ripgrep (rg) search tool. It runs the search with extended debugging output, which can help in understanding the internal workings of the program and diagnosing complex search issues. This output includes detailed information about each step of the search process, such as the regular expression being used, the patterns matched, and other relevant data.'
        dfa-size-limit: '[AI] The `rg` command with the flags `--dfa-size-limit` is used in regular expression search and replace operations in Git. This flag sets a limit on the size of the deterministic finite automaton (DFA) that is generated during the search. When searching large files or many files, generating a DFA can consume significant memory. By setting a limit with `--dfa-size-limit`, you can prevent the search from using excessively large amounts of memory and potentially bringing down your system. The flag takes an argument specifying the maximum size in bytes.'
        encoding: '[AI] The `--encoding` option in the `rg` (ripgrep) command is used to specify the character encoding of the search text or the source files being searched. It ensures that the search pattern and the file contents are correctly decoded before comparison, leading to accurate search results. This helps handle files with non-standard encodings, such as UTF-8 or Latin1, ensuring robustness in cross-platform text searches.'
        engine: '[AI] The `--engine=rg` option in a Git command sets the default diff and merge tool to be `rakefile`, which is part of the `git-rag` (Raise Git) extension. This engine provides an interactive textual conflict resolution interface, useful for resolving conflicts in text files when merging or pulling from version control.'
        file: '[AI] The `rg --file` command in the `ripgrep` (`rg`) tool is used to search for a specific text pattern within one or more files. The `--file` option specifies that the search should be performed inside the named files instead of the standard input stream. For example, running `rg --file path/to/file.txt "search_pattern"` would look for the specified pattern only in the given file.'
        files: '[AI] The `rg --files` command in the ripgrep (rg) search tool is used to find text matches in specified files or directories. With this option, rg searches only in the listed files instead of recursively searching through directories. It takes a list of file paths as arguments and outputs the lines containing the match within those files.'
        files-with-matches: '[AI] `rg --files-with-matches` is a command in the ripgrep (rg) tool used for searching text in files. This option returns only the names of files that contain a match instead of displaying the matching lines within those files. It can be useful when you want to quickly find files containing specific text without having to manually open each file.'
        files-without-match: '[AI] `rg --files-without-match` is a command in the ripgrep (rg) search tool. It returns a list of files that do not match a given search pattern, as opposed to returning lines within matching files. This can be useful when you want to find files that do not contain a specific text or pattern. The `--files-without-match` option takes the search pattern as an argument and outputs the non-matching filenames.'
        fixed-strings: '[AI] The `rg` command with the `--fixed-strings` option is a text search utility similar to `grep`. This option tells `rg` to search for exact matches of the given strings only, disregarding case and character encoding. It''s useful when you are sure about the exact text you want to find in your files, allowing for more precise filtering results.'
        follow: '[AI] `rg --follow` is a command used in the ripgrep (rg) search tool. The `--follow` option enables the display of matched text from each version of a file that has been tracked by Git, allowing you to see the evolution of changes related to your search query. It''s particularly useful when searching for text across multiple commits or branches in a Git repository.'
        glob: |-
            [AI] The `rg --glob` option is used with the `ripgrep` (rg) command-line tool for searching text in files. The `--glob` option enables extended regular expressions (ERE), also known as globbing, allowing pattern matching using shell-style wildcard characters such as `*`, `?`, and `[]`. This can be useful when searching for multiple files or patterns with similar naming conventions. For example:

            ```bash
            rg --glob '*.txt' path/to/search/directory
            ```

            This command searches the specified directory for all text files (files with a `.txt` extension) and returns lines containing the search query in those files.
        glob-case-insensitive: '[AI] The `rg` command with the option `--glob-case-insensitive` is used in Git for performing case-insensitive globbing during a search. In simple terms, it allows patterns like `*.txt` or `[A-Z]*.txt` to match files with any combination of upper and lower case letters in their names while searching through the repository. This can be particularly useful when dealing with case-sensitive file systems or large codebases where consistent naming conventions may not always be followed.'
        heading: '[AI] The `rg` command with the option `--heading` is used in the `ripgrep` (`rg`) tool for searching text files. This option instructs `rg` to treat the first matching line as a header and to display it separately from the search results. It allows users to distinguish headers from regular search matches, making it easier to navigate through the output.'
        help: '[AI] `rg --help` is a command used in the ripgrep (rg) search tool. The `--help` option displays detailed information about how to use the rg command, including its usage syntax and available options for customizing searches. It provides a quick reference guide for users to effectively utilize rg for searching text in various contexts.'
        hidden: '[AI] The `rg --hidden` command is a combination of `ripgrep` (rg) and the `--hidden` option. The `rg` command is a powerful text search tool for searching through files in a recursive manner. The `--hidden` option instructs rg to search for matching texts only in hidden files (files with a dot at the beginning of their names). In other words, it searches in files that start with a dot and are not displayed by default when using a file explorer or ls command.'
        iglob: |-
            [AI] `rg --iglob` is a command-line option for the ripgrep (rg) search tool. It enables globbing patterns in regular expressions used with rg. This means you can use shell-style wildcard characters like `*`, `?`, and `[]` inside your search terms, allowing you to match multiple filenames or text patterns at once. For example:

            ```sh
            rg --iglob '*.txt' path/to/search
            ```

            This command searches for the text pattern in all files with the '.txt' extension within the given directory.
        ignore-case: '[AI] `rg --ignore-case` is a command-line option used with the ripgrep (rg) search tool. It instructs ripgrep to perform case-insensitive searches, meaning it will find matches regardless of upper or lower case characters in both the search pattern and the text being searched. This can be useful when searching for patterns that may appear with different capitalizations.'
        ignore-file: '[AI] The `--ignore-file` option is a flag used with the `git rimraf` or `git reset` commands in Git version control system. It specifies a file containing a list of patterns to be ignored when performing the respective operation. For instance, when using `git reset`, it can be used to exclude specific files or directories from being reset to their previous commit state. Similarly, for `git rimraf`, it is used to ignore certain files or directories during a delete operation. The ignored patterns are read from the specified file using the `--` delimiter.'
        ignore-file-case-insensitive: '[AI] `rg` is a powerful text searching tool for Git Repositories, similar to `grep`. The option `--ignore-file-case-insensitive` is used to ignore case differences while searching for regular expressions patterns in file names during a search using `rg`. This means that searches will match files with case insensitive differences in their names. For instance, if you have both "MyFile.txt" and "myfile.txt", running a search with this option will find both files.'
        include-zero: |-
            [AI] The `rg` command with the option `--include-zero` is a regular expression search and replace tool from the `ripgrep` family. This option modifies the behavior of the `find-files` argument, which specifies the pattern used to select files for searching.

            With the `--include-zero` flag, `rg` will also consider an empty string as a valid pattern, meaning it will match against files with no name (i.e., hidden directories or special files like `.git` or `.svn`). When using this option, ensure that you provide appropriate file selection patterns if you don't intend to search inside hidden directories or special files.
        invert-match: '[AI] `rg --invert-match` is a command used in the ripgrep (rg) text search tool. It is used to find lines that do not match a given regular expression pattern instead of the usual behavior of finding lines that do match. The `--invert-match` flag reverses the sense of the search, returning lines that do not contain the searched pattern.'
        json: '[AI] `rg --json` is a command used in the ripgrep (rg) search tool. This option returns the search results in JSON format, making it easier to parse and use the output programmatically in scripts or other automated workflows. It displays each match as an object with keys for the file path, line number, and matched text.'
        line-buffered: '[AI] The `--line-buffered` option is used with the `rg` (ripgrep) command-line search tool. It sets up the output to be line-buffered, meaning that it waits for a complete line to be written before printing it to the standard output. This can improve performance by reducing the number of times the `rg` process needs to interact with the terminal. In general, using `--line-buffered` is beneficial when dealing with large search results or when running `rg` in a pipeline.'
        line-number: '[AI] The `--line-number` option is a flag used with the `rg` (ripgrep) command in text search operations. It causes `rg` to print the line numbers of matching lines along with the matching text. This can be useful for quickly locating specific lines in large files or projects. For example, `rg --line-number pattern file.txt` will display the lines containing "pattern" and their corresponding line numbers in "file.txt".'
        line-regexp: '[AI] The `rg --line-regexp` command is a text search and replacement tool similar to GNU grep, but with additional features and improvements. The `--line-regexp` option makes `rg` match the regular expression pattern against entire lines instead of individual words or substrings within lines. This allows for more precise filtering and manipulation of text data based on line contents that match a specific regular expression pattern.'
        max-columns: '[AI] `rg --max-columns` is a command-line option for the `ripgrep` (rg) search tool. It limits the maximum number of columns in the output to be displayed. By default, rg displays the entire matching line. However, with this option, you can set a limit on the number of columns to be shown per line in the output, making it easier to read and navigate large results. For example, `rg --max-columns=50 path/to/search/regex`.'
        max-columns-preview: '[AI] The `--max-columns-preview` flag is a command line option for the `rg` (ripgrep) search tool, which is used to search for text patterns in various types of files. This flag sets the maximum width of the output columns for the preview snippets of matching files. By default, no column limit is applied. With this flag, users can control the width of the columns to better fit their terminal windows or preferences. For instance, `rg --max-columns-preview=78 .` will limit the preview width to 78 columns.'
        max-count: '[AI] The `--max-count` option in the `rg` (ripgrep) command is used to limit the number of matches returned. It takes an integer argument, specifying the maximum number of matching lines to display. This can help reduce the output noise and improve performance when dealing with large files or multiple matches.'
        max-depth: '[AI] The `--max-depth` option in a `git rebase` (`rg`) command sets the maximum depth for a merge tree during the rebasing process. In other words, it limits the number of parent commits that can be included in the new base commit. This can be useful when dealing with deep merge histories or to enforce a specific branching strategy. By default, there is no limit on the depth, so using this option helps keep your commits more linear and easier to manage.'
        max-filesize: '[AI] The `--max-filesize` option in `rg` (ripgrep), a powerful search tool, sets a limit on the size of files that will be searched. Files larger than this limit will be skipped during the search process to improve performance and reduce resource usage. By specifying a size using prefixes like KB, MB, or GB followed by a number, you can set an appropriate limit based on your system''s capabilities. For example, `rg --max-filesize=10MB .` would only search files up to 10MB in size within the current directory.'
        mmap: '[AI] The `--mmap` flag is used with the `git rm` command in Git version control system. It instructs Git to remove a file from the index and the working directory, but instead of deleting the file from the disk entirely, it maps the file as read-only memory for efficiency. This allows Git to keep track of the deleted file''s history while saving the physical disk space by not actually deleting the file until a later commit or the use of `git prune` command.'
        multiline: '[AI] `rg --multiline` is a regular expression search command in Git. The `--multiline` option makes the search pattern match across multiple lines in a file, allowing you to find multi-line matches. For instance, if you''re looking for a specific pattern that appears in more than one line in a given file, using `rg --multiline <pattern>` would be an effective way to search for it.'
        multiline-dotall: |-
            [AI] The `--multiline` and `--dotall` flags are options used with the `grep` command in Unix-based systems for pattern matching in text files.

            The `--multiline` flag allows `grep` to match patterns across multiple lines, including before the context line if the `^M` (beginning of a line) anchor is used in the regular expression.

            The `--dotall` flag makes the `^` and `$` anchors match at the beginning or end of each character instead of the beginning or end of the whole line, allowing partial matches. This can be useful when dealing with binary data or multiline strings.

            Together, these flags make it possible to search for complex patterns that span multiple lines and may include characters that are not at the beginning or end of a line.
        no-config: '[AI] The `rg` (ripgrep) command with the `--no-config` flag is used to perform a case-sensitive text search without loading or modifying any previously saved config files. It is often used when running scripts or automation tasks where default config settings are not desired.'
        no-filename: '[AI] The `rg` command with the option `--no-filename` is a part of the ripgrep search tool. This option instructs ripgrep not to include filenames in the output when searching for a pattern in text files. The focus is on displaying only the matching lines or context around them, without specifying the source files.'
        no-heading: '[AI] The `rg` command with the option `--no-heading` is used in Git for searching text within a repository. The option `--no-heading` tells `rg` to exclude matching lines that begin with a header or blank line, allowing for more accurate search results when dealing with files containing structured data like YAML or INI files.'
        no-ignore: '[AI] The `rg` command is a powerful text search tool for Git repositories, similar to `grep`. The option `--no-ignore` is used to disable file and directory ignoring during the search. By default, `rg` ignores certain files and directories based on the `.gitignore` files in your repository. With `--no-ignore`, you can search for text in all files including those that would normally be ignored.'
        no-ignore-dot: '[AI] The `rg` command with the option `--no-ignore-dot` is used in Git Bash or other Unix-like environments for performing regular expression searches in files and directories. The `--no-ignore-dot` flag instructs `rg` to match files and hidden files (those with names starting with a dot) in the search. By default, `rg` ignores hidden files in a search. This option allows you to include them in your search results.'
        no-ignore-exclude: '[AI] The `rg` command with the option `--no-ignore-exclude` is used in the `ripgrep` (rg) search tool for recursively searching files or directories, while ignoring specific patterns specified in the `.gitignore` and other exclude files. With the `--no-ignore-exclude` flag, rg disables this ignore behavior, making it search through all files, including those matched by the ignore patterns defined in the exclude files. This can be useful when you want to explicitly include specific files or directories that are usually ignored during a search.'
        no-ignore-files: '[AI] The `rg` command with the option `--no-ignore-files` is used in Git to perform a case-sensitive search for regular expressions across all files in the current repository, without ignoring files that are listed in the `.gitignore` file(s). In other words, it searches for matches in all files, including those that would typically be ignored based on the `.gitignore` rules.'
        no-ignore-global: '[AI] The `rg` command with the flag `--no-ignore-global` is used in regular expression searches with the ripgrep tool. This flag tells ripgrep to search for matches in the current directory only, and not in files globally ignored by `.gitignore` or other ignore files. In essence, it limits the search scope to the current directory excluding files explicitly ignored by any ignore files.'
        no-ignore-messages: '[AI] The `rg` command with the option `--no-ignore-messages` is used in the `ripgrep` (rg) search tool for Git repositories. This option disables the display of informational messages during the search process, allowing only the matching results to be shown. In essence, it suppresses non-error messages and focuses the output on the desired search results.'
        no-ignore-parent: '[AI] The `rg --no-ignore-parent` command is a regular expression search and replace tool in Git, similar to `grep`. The `--no-ignore-parent` option disables ignoring parent directories when searching or replacing across subdirectories. This means that the search will be performed recursively in subdirectories while considering the changes made in the parent directory as well. Without this flag, the search would only consider files and directories directly under the current one.'
        no-ignore-vcs: '[AI] The `rg` command is a popular text search tool in the Git repository, similar to `grep`. The option `--no-ignore-vcs` tells `rg` not to ignore files that are tracked by Version Control System (VCS) like Git. This means that files under version control will be searched when using the `rg` command with this flag.'
        no-line-number: '[AI] The `rg` command with the option `--no-line-number` is a text search tool similar to grep, but using regular expressions. This option disables the display of line numbers in the output. It focuses only on showing the matching parts of lines without indicating which line they belong to. This can be useful when dealing with large files or focusing on specific parts of the data without being distracted by line number information.'
        no-messages: '[AI] The `rg` command with the option `--no-messages` is a recursive search and replace tool in Git''s `ripgrep` (or `grep-r`) utility. This option disables the display of informational messages, such as when a file is being searched or replaced. So, using `rg --no-messages` will execute the search and replace operation silently without any extra output.'
        no-mmap: |-
            [AI] The `rg` command with the flag `--no-mmap` is used in the `ripgrep` (rg) search tool, which is designed for searching through large or nested directories for specific text patterns.

            The `--no-mmap` flag disables memory mapping while performing the search operation. Memory mapping allows the operating system to map files directly into memory, which can be faster and more efficient for reading large files. However, it can also consume significant amounts of memory.

            By disabling memory mapping with the `--no-mmap` flag, rg will read files sequentially instead of mapping them into memory, making it a good option when dealing with limited memory environments or very large files that may not fit entirely into memory. This comes at the cost of slower search performance compared to enabling memory mapping.
        no-pcre2-unicode: |-
            [AI] The `--no-pcre2-unicode` flag is an option for the `rg` (ripgrep) command-line search tool, which disables Unicode property support in Perl Compatible Regular Expressions (PCRE).

            PCRE is a popular regular expression library used by `rg`. The Unicode Property Support extension (pcre2-unicode) enables the use of Unicode properties in PCRE patterns. These properties allow matching based on various Unicode character classes, such as script, property, or bidirectional class.

            By setting `--no-pcre2-unicode`, you disable this functionality and restrict the search to plain ASCII regular expressions, which might be useful when dealing with files that don't contain Unicode characters or where performance is a concern.
        no-require-git: |-
            [AI] The `rg` command with the flag `--no-require-git` is used in the `ripgrep` (rg) search tool for Git repositories. This flag modifies the default behavior of rg to allow searching files outside of a Git repository without requiring that Git be initialized or being in a Git working directory.

            In other words, `rg --no-require-git` enables searching files both within and outside of Git repositories, making it more versatile for finding text across various types of file structures.
        no-unicode: '[AI] The `rg` command with the option `--no-unicode` is used in the `ripgrep` (rg) search tool for text. This option disables Unicode processing of the search pattern, which can help improve search performance and reduce memory usage when dealing with large files or complex search patterns that do not involve Unicode characters. It does this by treating non-ASCII characters as simple literals instead of handling them as Unicode code points, resulting in faster and less resource-intensive searches.'
        "null": '[AI] The `rg --null` command is a combination of `rg`, the ripgrep search tool, and the `--null` option. This option instructs `rg` to output empty lines when no matching lines are found for a search query in files or directories. This can be useful in piping the output into other tools like `awk` or `sort`. In summary, `rg --null` searches for patterns in files and outputs nothing if there is no match, or an empty line if the file is to be included in further processing.'
        null-data: '[AI] The `--null-data` flag is a command-line option used with `git`''s `rg` (faster `grep`) tool for handling null data in search results. When this flag is set, if no matching data is found in a file or directory, the output will be an empty string rather than the absence of any output. This can be useful when working with files that may contain null characters or when processing search results programmatically.'
        one-file-system: '[AI] The `rg` command with the flag `--one-file-system` is used in the `ripgrep` (rg) search tool for Git repositories. This flag ensures that the search is limited to a single file system, preventing it from recursively searching across all subdirectories within the repository. It can be useful when performing a search for a specific pattern within a large Git repository without the need to include subdirectories in the search results.'
        only-matching: |-
            [AI] The `--only-matching` option in a `git` `rg` (regex) search command instructs it to only show the parts of the file that match the given regular expression pattern, instead of showing all lines containing any part of the pattern. This can be useful when you want to narrow down your search results to specific matches. For example:

            ```bash
            $ git grep --only-matching 'pattern' path/to/file(s)
            ```

            This command will only display lines containing `'pattern'` exactly as it is written and won't show any context around the match.
        passthru: '[AI] The `--passthru` flag is used with the Git `rg` (git-rg, or git-fuzzy find in the repository) command. When this option is passed, rg will not apply any filtering or processing to the file paths that match the search query. Instead, it will simply return the exact matched paths as output. This can be useful when working with scripts or other tools that expect a list of file paths as input.'
        path-separator: '[AI] The `--path-separator` option is a flag used with the `git rm` (remove) command in Git version control system. This option allows specifying a custom path separator when removing multiple files or directories that have paths containing the default separator (usually ''/'' on Unix-based systems and ''\'' on Windows). By setting `--path-separator=<char>`, you can replace the default separator with another character, facilitating the removal of paths with the specified separator. For instance, if a path contains '':'' as a separator (like in Windows), use this flag with the '':'' character to correctly remove the files or directories.'
        pcre2: '[AI] The `rg --pcre2` command is used with the `ripgrep` (`rg`) tool for performing text search in files. The `--pcre2` option enables Perl Compatible Regular Expressions version 2, which provides more powerful and efficient regular expression patterns compared to the default Perl Compatible Regular Expressions. This can be particularly useful when dealing with complex search patterns or large datasets.'
        pcre2-version: |-
            [AI] The `--pcre2-version` option is a flag used in `git` during the configuration of the `git diff-index` or `git grep` commands with the `rg` (ripgrep) search tool, which is often used as an alternative to traditional grep.

            This flag specifies the version of PCRE2 (Perl Compatible Regular Expressions) engine to be used by rg. By default, rg uses the built-in PCRE1 engine. However, setting `--pcre2-version` allows users to explicitly request a specific PCRE2 version for their search operations.

            For example, using `rg --pcre2-version=10.34.0` instructs rg to use the PCRE2 library with version 10.34.0 during the search process. This can be helpful if you need to ensure compatibility with a specific PCRE2 version for your regular expressions or if you want to take advantage of new features available in that particular version.
        pre: '[AI] The `rg --pre` command in Git is used to preview changes before committing them with the `git rebase` workflow. The `--pre` option stands for "interactive rebase -pick --preserve-merge-base," which means that Git will stop at each commit, allowing you to review and edit the changes before continuing the rebase process. This can help ensure that commits are clean, well-formed, and correctly ordered before they are finally committed to the main branch.'
        pre-glob: '[AI] `rg --pre-glob` is a command-line option for the ripgrep (rg) tool, which is a popular text search utility. This option modifies the behavior of rg by interpreting the given pattern as a glob expression instead of a regular expression. Glob expressions are patterns used to match filenames or paths, rather than text within files. The effect is that rg will search for files matching the given glob pattern, and print the contents of those files that match any pattern found within them.'
        pretty: '[AI] `rg --pretty` is a command-line option for the ripgrep (rg) search tool. It''s used to customize the output format of the search results. Instead of displaying the default raw matches, you can use various templates to show the path, the matched text, or other relevant information in a more readable way. The exact output format is defined using the provided template string.'
        quiet: '[AI] The `rg --quiet` command is a regular expression search and replace tool, specifically the `ripgrep` version of it. The `--quiet` option makes the output of the command silent, meaning that no message will be displayed unless an error occurs during the search or replacement process. In other words, if a match is found, nothing will be printed to the console, making it useful for background or automated tasks where you only need to know whether a search was successful or not.'
        regex-size-limit: '[AI] The `--regex-size-limit` flag is a option for GNU `rg` (ripgrep), a powerful search tool, used to limit the size of regular expressions. It sets an upper limit on the size of a regular expression pattern in bytes. If the size of a given regex exceeds this limit, rg will throw an error and refuse to execute the search command. This flag helps prevent potential performance issues or memory consumption caused by large or complex regex patterns.'
        regexp: '[AI] The `rg` command with the `--regexp` option is a powerful text search tool for the terminal, similar to `grep`. The `--regexp` flag enables regular expression searches using the `rg` command, allowing more complex search queries than simple string matches. Regular expressions provide a flexible and expressive way to specify search patterns, including wildcards, character classes, and various quantifiers.'
        replace: |-
            [AI] The `rg --replace` command is a text filtering tool in Git for performing search-and-replace operations in multiple files within a Git repository. The `--replace` flag tells `rg` to replace all occurrences of a pattern with a replacement string, instead of just printing the matching lines.

            The general syntax is: `rg 'pattern' --replace='replacement_string' path/to/files`. This command will search for every occurrence of the specified `pattern` in the files located at the given `path`, and replace them with `replacement_string`. If used with the `--inplace` flag, the replacements will be made directly to the files.
        search-zip: '[AI] The `rg` command with the `--search-zip` option is a part of the ripgrep (rust-grep) search tool. It allows searching for text within compressed files without first extracting them, saving time and resources. When used in a command like `rg --search-zip <pattern> path/to/directory/*.gz`, it searches for the specified `<pattern>` within all `.gz` (gzip) compressed files in the given `path/to/directory`.'
        smart-case: |-
            [AI] The `--smart-case` option is a flag used with the `rg` (ripgrep) search tool for case-insensitive searches with respect to directories and file extensions. It automatically adjusts the search behavior between filenames and text inside files based on the given pattern:

            1. If a search term starts with a capital letter, `rg` will look for exact matches in filenames or directories.
            2. If a search term is all lowercase letters, `rg` will perform case-insensitive searches within files.
            3. For mixed-case search terms, `--smart-case` ensures that the search remains case-insensitive inside files but case-sensitive for filenames and directories.
        sort: '[AI] The `rg --sort` command is used with the ripgrep (rg) text search tool to sort the output of a search alphabetically based on the matched files or lines. By default, the output is displayed in the order that the files or lines were found during the search. With `--sort`, you can specify either `--sort=filename` to sort by file name or `--sort=line-num` to sort by line number within a file.'
        sortr: '[AI] The `rg --sortr` flag is a command-line option used with the `ripgrep` (`rg`) tool for searching text. It sorts the output of the search results in reverse order based on the matches found in the files, with the file containing the most occurrences listed first. This can be helpful when dealing with large projects or numerous matching files, allowing users to quickly locate the files with the highest concentration of the searched pattern.'
        stats: '[AI] `rg --stats` is a command used in the ripgrep (rg) search tool. It returns statistics about the search results, including the number of matching files, the number of matches within each file, and the percentage of total bytes matched. This command helps to provide an overview of the search results and can be useful for understanding the scope of the search.'
        text: '[AI] The `rg --text` command is a text search and replace operation using the ripgrep (rg) tool. This command searches for specified text patterns in all files within a directory recursively and displays the matching lines in text format without showing file paths or filenames. It is often used to quickly find and modify specific text across multiple files in a project.'
        threads: '[AI] The `--threads` option in the `rg` (ripgrep) command is used to specify the number of threads to use during a search operation. It allows parallel processing, which can significantly improve search performance, especially on large projects or filesystems, by distributing the workload across multiple CPU cores. By default, `rg` uses a single thread for searching.'
        trim: '[AI] The `rg --trim` command is a regular expression search and replace tool in Git for Linux and macOS. The `--trim` flag is used to remove leading and trailing whitespace from matched text during replacement operations. It ensures that the replaced text fits perfectly into the file without any extra spaces.'
        type: |-
            [AI] The `rg --type` flag is used with the `ripgrep` (rg) command-line tool for searching text in files or directories. The `--type` option filters the search results based on file type extensions.

            For example, using `rg --type=txt *.txt` will search for a specific text pattern only in `.txt` files. Similarly, `rg --type=py *.py` will search for the pattern in all `.py` Python files. Multiple file types can be specified by separating them with commas (e.g., `rg --type=txt,json *.*`).
        type-add: '[AI] `rg --type-add` is a command in the ripgrep (rg) search tool, used to add a new file type association for regular expressions in the search pattern. When you run `rg --type-add <extension>`, it tells rg to index and search files with the specified file extension using the given regex patterns. This improves the performance of future searches by allowing rg to filter out unmatched files earlier, as the extension is part of the indexing process rather than being checked every time a search is run.'
        type-clear: '[AI] `rg --type-clear` is a command-line option for the ripgrep (rg) text search tool. This option is used to clear the previously set file type exclusion list, effectively disabling any file type filtering. With this option, ripgrep will search in all files regardless of their types.'
        type-list: '[AI] The `rg` command with the option `--type=list` is a text search utility from the ripgrep (or "grep" for regex) project. This option instructs `rg` to output matches as a list, each on a separate line, rather than printing them inline with surrounding text. For example, if you use the command `rg --type=list pattern file`, it will display the paths of files containing the match instead of showing the matching lines directly.'
        type-not: '[AI] The `rg --type=not` command is used with the ripgrep (rg) text search tool to find lines that do not match a given pattern or regular expression. The `--type=not` option inverts the search results, meaning it returns lines that do not contain the searched pattern instead of lines that do.'
        unrestricted: '[AI] The `--unrestricted` flag in a `git rebase` command disables Git''s default fast-forward protection, allowing you to perform non-fast-forward rebases even if you are trying to reapply commits that already exist upstream. This can be useful when merging feature branches or dealing with conflicts, but it should be used with caution as it may introduce unwanted changes and create merge conflicts.'
        version: '[AI] `rg --version` is a command used in the ripgrep (rg) search tool. It returns the current version of ripgrep installed on your system. The output will display the major.minor.patch format, such as "rg 12.3.45". This helps users ensure they have the latest or desired version of ripgrep for their tasks.'
        vimgrep: |-
            [AI] `rg` is a powerful and versatile text search tool, similar to `grep`, but with features like multi-file search, recursive search, and regular expressions. The command `rg --vimgrep` is specifically designed for searching for text patterns in visual files within version control systems using the Rust-based `ripgrep` engine.

            The `--vimgrep` flag sets up an interface for use with Neovim or Vim text editors. When invoked, it will search for the specified regular expression across all text files within the current directory and its subdirectories, recursively. It returns a list of file paths and line numbers where each match was found, which can then be easily navigated using Neovim or Vim. This functionality is particularly useful when working with large projects or searching for specific text within multiple files.
        with-filename: '[AI] The `rg` command with the option `--with-filename` is a part of the ripgrep (rg) text search tool. This option instructs `rg` to display the filename in addition to the matching line when searching for a pattern in multiple files. It helps users easily identify which file contains the matching text, making it useful during code searches or similar tasks.'
        word-regexp: '[AI] The `rg` command with the option `--word-regexp` is a text search and replace tool similar to `grep`. This option makes `rg` search for regular expressions as whole words only. For instance, if you use the command `rg --word-regexp "pattern" file`, it will match the exact word "pattern" in the file instead of matching the pattern within other words or substrings.'
