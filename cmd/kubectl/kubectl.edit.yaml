# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit (RESOURCE/NAME | -f FILENAME)
description: Edit a resource on the server
group: basic intermediate
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --field-manager=: Name of the manager used to track field ownership.
    --output-patch: Output the patch if the resource is edited.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --subresource=: If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is beta and may change in the future.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    --windows-line-endings: Defaults to the line ending native to your platform.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files to use to edit the resource
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl edit` is a Kubernetes command-line interface (CLI) tool used to edit YAML files representing Kubernetes resources in place, directly within your terminal or text editor, before applying the changes back to your cluster. It creates an ephemeral editor session using `vim`, `emacs`, or any other editor you specify via the `$EDITOR` environment variable. The command retrieves the resource definition from the cluster, allows you to modify it, and saves and applies the updated configuration when you save and exit the editor.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl edit --allow-missing-template-keys` is a command used with Kubernetes'' `kubectl` tool to edit YAML files for managing Kubernetes resources, such as deployments or services. With this flag, `kubectl` allows editing templates even if some keys are missing in the file, without raising an error during the editing process. This is particularly useful when working with complex YAML files and making incremental changes, as it avoids having to write complete YAML files each time, and instead lets users focus on the specific changes they want to make. It''s important to note that missing keys will still result in errors when attempting to apply the edited file back to the cluster.'
        field-manager: '[AI] `kubectl edit --field-manager` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. It allows users to edit YAML files representing Kubernetes resources in place within the running cluster, using an integrated merge conflict editor. The `--field-manager` flag instructs `kubectl edit` to use a specific field manager, such as `jsonpath`, `yaml`, or `kt`, for handling complex fields or nested data structures during editing. This can help simplify the process of modifying more intricate configurations directly in the cluster, while ensuring merge conflicts are resolved correctly.'
        filename: |-
            [AI] `kubectl edit --filename` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command opens the specified file in your default editor for you to edit the YAML or JSON configuration files that define Kubernetes resources before applying them back to your cluster.

            The `--filename` flag is used to specify the local path and name of the file to be edited. Once the editing is done, `kubectl apply` command is automatically run to update the cluster with the changes made in the file.
        kustomize: '[AI] `kubectl edit --kustomize` is a command used with Kubernetes'' `kubectl` tool to edit YAML files using kustomize customization framework. It loads the Kustomization file in the current directory, applies the customizations defined there, and opens the edited YAML files in your default text editor for modification. This workflow allows for efficient and consistent management of complex Kubernetes configurations.'
        output: '[AI] `kubectl edit --output` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to edit YAML files representing Kubernetes resources directly in your text editor, and then apply those changes to the corresponding resource in your cluster. The `--output` flag is optional and specifies the output format for the command. When this flag is used, the result of the `edit` operation will be printed to stdout instead of being applied directly to the Kubernetes cluster. This can be useful for previewing changes before applying them or for scripting purposes. The formats supported include json and yaml.'
        output-patch: '[AI] `kubectl edit --output-flag` is a command used in Kubernetes to edit YAML files representing Kubernetes resources, such as deployments or services, directly in the terminal. The `--output-patch` flag is used to output the changes made during the editing process in a patch format, which can be applied using other tools like `kubectl apply`. This way, you can make and see the difference of your resource configuration before and after the edits without leaving the terminal, making it an efficient way to modify Kubernetes resources.'
        record: '[AI] `kubectl edit --record` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command opens the editor specified in your `$EDITOR` environment variable or uses vi by default, to edit a resource file in-place in your local Kubernetes cluster. The `--record` flag indicates that the changes should be persisted to the API server after saving the file. Essentially, it lets you make live edits to running resources without having to create and delete YAML files.'
        recursive: '[AI] `kubectl edit --recursive` is a command used in Kubernetes for editing YAML files that define Kubernetes resources, such as Deployments or ConfigMaps, with an integrated text editor called `vim`. The `--recursive` flag tells the command to also edit all files within subdirectories that match the selected resource type. This is useful when you need to make complex changes that span multiple related Kubernetes objects in a single operation. Once you save your changes, they are immediately applied to your cluster.'
        save-config: '[AI] `kubectl edit --save-config` is a command used with Kubernetes'' `kubectl` tool to edit YAML files for managing and configuring Kubernetes resources. This command opens the specified resource in a text editor, allows you to make changes, and then saves and applies those edits directly back to the Kubernetes cluster. The `--save-config` flag ensures that after editing, the current configuration is saved to the `kubeconfig` file for future use.'
        show-managed-fields: '[AI] `kubectl edit --show-managed-fields` is a command used with the Kubernetes command-line interface (CLI) tool `kubectl`. This command opens an editor to allow users to edit YAML files that define Kubernetes resources, such as Deployments or ConfigMaps. However, it has an additional flag `--show-managed-fields`, which highlights the fields in the YAML file that have been managed by Kubernetes'' reconciliation process. These fields may indicate changes made by controllers like the ReplicaSet or the StatefulSet to ensure desired state of the resources. This can be useful for understanding the current state and potential changes to a resource without having to manually inspect each field.'
        subresource: '[AI] `kubectl edit --subresource` is a command used with the Kubernetes `kubectl` tool to edit the subresources of an existing Kubernetes object, such as a pod''s logs or events. It opens the YAML definition of the selected subresource in your default editor for modification, saves and applies the changes back to the cluster. This command provides a convenient way to manipulate specific parts of complex Kubernetes objects without having to modify the entire object.'
        template: '[AI] `kubectl edit --template` is a command in Kubernetes using the `kubectl` CLI tool. It allows you to edit YAML files that define Kubernetes resources (e.g., Deployments, Services) using a template engine like GoText or Jsonnet instead of manually editing the files. The user writes templates specifying how they want the resource to be updated, and `kubectl` applies those changes directly to the cluster. This can be useful for making consistent, repeatable modifications across multiple resources in your Kubernetes cluster.'
        validate: '[AI] `kubectl edit --validate` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows users to edit YAML files defining Kubernetes resources, such as deployments or services, in place in the cluster. The `--validate` flag ensures that the changes made to the file are valid against the Kubernetes schema before applying them. If the edited YAML contains errors, `kubectl` will return an error message describing the issues and provide suggestions for corrections. This helps prevent misconfigurations and saves time by catching errors early in the process.'
        windows-line-endings: |-
            [AI] The `kubectl edit` command is a tool used to edit Kubernetes resources directly from the command line. The `--windows-line-endings` flag is an option that specifies the line ending format for the edited file.

            By default, `kubectl edit` uses Unix-style line endings (LF). However, some text editors used on Windows systems, such as Notepad, use CRLF line endings. If you edit a Kubernetes resource using `kubectl edit` on a Windows system and save the file with CRLF line endings, it may cause issues when applying the changes back to the cluster because Kubernetes uses Unix-style line endings.

            The `--windows-line-endings` flag ensures that the edited file is saved with Unix-style line endings even if you're using a Windows text editor, avoiding potential issues when applying the changes back to the cluster.
