# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: deployment NAME --image=image -- [COMMAND] [args...]
aliases:
    - deploy
description: Create a deployment with the specified name
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --image!*=: Image names to run.
    --port=: The port that this container exposes.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
    -r, --replicas=: Number of replicas to create. Default is 1.
documentation:
    command: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment in your cluster. It takes as arguments the name of the deployment, the Docker image or container to use, and optional parameters such as labels, replicas, and container ports. For example: `kubectl create deployment myapp --image=myregistry/myimage:v1 --replicas=3`. This command creates a new deployment with the specified name, using the given image and creating three replicas of the container within that deployment.'
    flag:
        allow-missing-template-keys: |-
            [AI] The `kubectl create deployment` command is used to create a new Kubernetes deployment in a cluster. The `--allow-missing-template-keys` flag is an optional argument that allows the creation of a deployment even if there are missing keys in the YAML manifest file.

            When creating a deployment using kubectl, the command expects a valid YAML manifest file as input. This manifest file defines the desired state of the application including the container image to use, number of replicas, and various other configuration options. However, if some keys are missing from this manifest file, the creation of the deployment will fail by default, throwing an error message.

            By using the `--allow-missing-template-keys` flag, Kubernetes will ignore any missing keys in the YAML manifest file during deployment creation and proceed with creating the deployment based on the provided keys that are present. This can be helpful when working with incomplete or evolving YAML files where certain keys may not have been defined yet but you still want to create or update the existing application as soon as possible, without having to wait for the completion of the manifest file. However, it is important to keep in mind that ignoring missing keys can lead to unintended consequences and potential issues with the deployed application. Therefore, this flag should be used with caution and only when necessary.
        dry-run: '[AI] `kubectl create deployment --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a deployment object in a Kubernetes cluster, but in a dry-run mode. In this mode, no actual changes are made to the cluster, instead, it only simulates the creation and shows what would be done if the command were run without the `--dry-run` flag. It returns the YAML manifest file that would have been applied if the deployment were created in real life. This is useful for reviewing changes before applying them to a production environment.'
        field-manager: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment. The `--field-manager` flag is an option that allows you to specify a custom StrategicMaker or RollingUpdateStrategy for the deployment controller. This can be useful when you want to customize how your deployments are updated, such as controlling the number of replicas or the update rollout strategy. When using this flag, you provide a YAML file or JSON data defining the desired strategy.'
        image: '[AI] `kubectl create deployment` is a command used to create a new deployment in Kubernetes using a specified container image. The `--image` option takes the Docker image name and tag as its argument, e.g., `my-image:v1.0`. This command also creates a corresponding ReplicaSet and Deployment YAML file under the `kube/manifests` directory by default. The deployment ensures that a specified number of replicas of the container are running and available in the cluster at all times, scaling up or down as needed based on the configured replica count and other settings.'
        output: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment in a cluster. The `--output` flag specifies the format for the output of the command. For example, `--output yaml` will return the YAML definition of the created deployment object. This can be useful for saving the output to a file or for further processing with other tools. Other common formats include json and table.'
        port: '[AI] The `kubectl create deployment` command is used to create a new Kubernetes deployment in a cluster. The `--port` flag specifies the container port number that will be exposed and accessible for the deployed pods. This allows external traffic to reach the application running inside the containers. For example, `kubectl create deployment my-app --image=my-registry/my-app:v1 --port=80`.'
        replicas: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment in a cluster. The `--replicas` option specifies the number of replica pods for the deployment. When this command is executed, Kubernetes creates and manages the specified number of replica pods based on the provided container image or configuration file. This deployment can be scaled horizontally to increase or decrease the number of replicas as needed, ensuring that the desired number of instances of the application are running.'
        save-config: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment. The `--save-config` flag is an optional argument that saves the created deployment''s configuration as a YAML file in your current working directory, with a default filename of `deployment-<name>.yaml`, where `<name>` is the name you provided for your deployment. This can be useful if you want to keep a record of the deployment configuration or apply it to other clusters.'
        show-managed-fields: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment in a cluster. The `--show-managed-fields` flag is an optional argument that instructs `kubectl` to display the fields managed by the Kubernetes API in the output. These are the fields that will be automatically managed and updated by Kubernetes as part of the deployment''s lifecycle, such as replicas, availability, and rolling updates. This flag helps users understand what will be managed by Kubernetes, allowing for better understanding and control over the deployment.'
        template: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment in your cluster. The `--template` flag is an optional argument that allows you to provide a template file containing the desired YAML configuration for the deployment instead of specifying it directly on the command line. This can be useful when you need to create multiple similar deployments with only minor differences between them, as you can maintain a single template file and use `strategic merge patches` or `helm values` to modify the specific configurations for each deployment.'
        validate: '[AI] `kubectl create deployment` is a command used to create a new Kubernetes deployment with the specified configuration. The `--validate` flag is an optional argument that requests Kubectl to validate the given YAML file or configuration against the Kubernetes schema without actually creating the resource in the cluster. This can help prevent mistakes and ensure the correctness of the configuration before applying it. If the validation fails, an error message will be displayed, indicating which part of the configuration is invalid.'
