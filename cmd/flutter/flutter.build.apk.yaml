# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: apk
description: Build an Android APK file from your app
flags:
    --analyze-size: Produce additional profile information for artifact output size.
    --build-name=: A "x.y.z" string used as the version number shown to users.
    --build-number=: An identifier used as an internal version number.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-analyze-size: Do not produce additional profile information for artifact output size.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-track-widget-creation: Do not track widget creation locations.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --release: Build a release version of your app (default mode).
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --split-per-abi: Whether to split the APKs per ABIs.
    --target-platform=: The target platform for which the app is compiled.
    --track-widget-creation: Track widget creation locations.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build apk` is a command used in Flutter development to build an Android Application Package (APK) for distribution or testing on devices or via Google Play Store. It compiles Dart code into native ARM machine code, packages the application resources, and generates the APK file under `build/outputs/apk/`. The resulting APK can be installed directly on a device or used in various deployment scenarios.'
    flag:
        analyze-size: '[AI] `flutter build apk --analyze-size` is a command used in Flutter development to generate an APK (Android Package) while also analyzing and reporting the size of the generated application. This includes the code size, resource size, and the total size of the APK. The analysis results can help developers make informed decisions about optimizing their project to reduce app size and improve performance.'
        build-name: '[AI] `flutter build apk --build-name` is a command used in Flutter, a mobile application development framework. This command builds an Android Application Package (APK) from the source code. The `--build-name` option specifies a custom name for the APK file during the build process. Instead of using the default generated name, this name will be used when saving the APK file.'
        build-number: |-
            [AI] `flutter build apk --build-number` is a command used in Flutter, a mobile app development framework, to build an Android APK (Android Application Package) with a specific build number.

            When you run `flutter build apk`, Flutter creates a new unsigned APK each time. However, when you want to create an APK with a custom build number for versioning and tracking purposes, you can use the `--build-number` option followed by the desired build number.

            For example: `flutter build apk --build-number 1.0.5` will generate an APK with the given build number (1.0.5 in this case). This information is embedded within the APK and can be accessed later on devices or marketplaces for tracking and managing different versions of your app.
        dart-define: '[AI] `flutter build apk --dart-define` is a command used in Flutter, a mobile application development framework. This command generates a signed APK (Android Application Package) for an application built with Flutter. The `--dart-define` option is used to define constant variables that can be accessed from the Dart code at compile time. It allows passing key-value pairs as environment variables to the Dart VM, which can then be used in the app''s Dart source code without requiring a rebuild of the entire application each time the value changes. This can be useful for customizing the behavior of an app based on specific configurations or conditions.'
        debug: '[AI] `flutter build apk --debug` is a command used in Flutter development to generate a debug version of an Android application package (APK). The `--debug` option enables extra debuggability features, such as keeping the application''s debuggable flag set during compilation and including additional debug metadata. This can help with identifying and resolving issues when testing or debugging your Flutter app on an Android device.'
        flavor: '[AI] `flutter build apk --flavor` is a command used in Flutter development to generate an APK (Android Packaging Kit) file for a specific application flavor. In Flutter, a flavor is a variant of your app that differs from other variants based on certain characteristics, such as different package names or resources. The `--flavor` option allows you to build and create an APK for the specified flavor configuration, which can be useful in creating multiple versions of your application with distinct features or targeting various markets.'
        help: |-
            [AI] `flutter build apk --help` is a command used in the Flutter framework to build an Android Application Package (APK) with additional help and information. When executed, it shows detailed usage and options for building an APK using Flutter. Here are some key points:

            - The `--help` option requests that the command prints out its usage and available options.
            - In this context, it provides comprehensive details about how to build an APK with Flutter.
            - It explains various flags such as `--release`, `--no-shrink-wrapping`, `--full-build` among others and their purpose during the build process.
            - Also includes information about generating keystore files for releasing applications on Google Play Store.
        no-analyze-size: '[AI] `flutter build apk --no-analyze-size` is a command used in Flutter, a mobile application development framework. This command builds an APK (Android Application Package) for distribution on the Android platform without performing size analysis during the build process. The `--no-analyze-size` option disables the generation of size reports, which can save time during the build process and reduce the overall build duration.'
        no-null-assertions: '[AI] `flutter build apk --no-null-assertions` is a command used in Flutter development to build an Android Application Package (APK) without enabling null safety checks. The `--no-null-assertions` flag disables the null safety feature introduced in Flutter 2.0, allowing potential null pointer exceptions at runtime. This could lead to more stable builds for existing projects that rely on nullable types, but aren''t ready to fully adopt null safety yet. However, it is recommended to enable null safety in new projects and gradually migrate older ones as the benefits of null safety include improved code robustness and easier debugging.'
        no-obfuscate: '[AI] `flutter build apk --no-obfuscate` is a command used in Flutter development to build an Android Application Package (APK) without obfuscation. Obfuscation is a process of renames classes, methods, and variable names to make the code harder to read and reverse engineer. The `--no-obfuscate` flag prevents Flutter from applying obfuscation during the build process, resulting in clearer and more readable code in the generated APK.'
        no-pub: '[AI] The command `flutter build apk --no-pub` is used to build an APK (Android Package) in Flutter without using the packages from the `pubspec.yaml` file. The `--no-pub` flag disables the downloading and compiling of dependencies from the Flutter package registry during the build process. This can be useful when building the app for offline distribution or when experiencing network issues. The resulting APK will only contain the code in your local project, excluding any external dependencies.'
        no-track-widget-creation: '[AI] The `flutter build apk --no-track-widget-creation` command is used to build an APK (Android Package) for a Flutter application without enabling the "Track Widget Creation" feature. This option is disabled by adding the `--no-track-widget-creation` flag to the command line. Tracking widget creation helps developers identify which widgets in their app cause performance issues during runtime. However, this feature might not be required for every development scenario and can add build time and increase app size. So disabling it while building an APK could save time and reduce app size.'
        no-tree-shake-icons: '[AI] The `flutter build apk --no-tree-shake-icons` command is used to build an APK (Android Application Package) using Flutter, but with the option to disable tree shaking of icons during the build process. Tree shaking is a technique used by Flutter to remove unused code from the application at compile time. The `--no-tree-shake-icons` flag prevents this optimization from affecting the icon resources in the APK, ensuring that all specified icons are included regardless of their usage in the application.'
        null-assertions: '[AI] `flutter build apk --no-root` is a command used in Flutter development to build an Android APK using the `--no-root` option, which disables the checks for null assertions. This means that the Flutter engine will not throw exceptions when it encounters expressions that assume a non-null value without checking it first. Instead, the app continues execution and may cause runtime errors if a referenced object is indeed `null`. Disabling null-assertion checks can simplify code development but may result in harder-to-debug runtime issues.'
        obfuscate: |-
            [AI] `flutter build apk --obfuscate` is a command used in Flutter, a mobile application development framework, to build a release-mode Android Application Package (APK) with obfuscation enabled.

            Obfuscation is the process of renaming original code identifiers with meaningless ones, removing unnecessary code and metadata, and shrinking the bytecode size, aiming to make reverse engineering more difficult. This helps in protecting intellectual property and improving app security by making it harder for malicious actors to understand and manipulate the underlying code.

            When you run `flutter build apk --obfuscate`, Flutter uses ProGuard or R8 as an obfuscation tool, depending on your project setup. The generated APK will be smaller in size and have its codebase harder to reverse engineer than an un-obfuscated release.
        profile: '[AI] The `flutter build apk --profile` command is used in Flutter development to generate an APK (Android Application Package) with profiling information enabled. This profiling data can be used for analyzing and optimizing the performance of the app during runtime. By default, this option minimizes code obfuscation for easier analysis. Note that enabling profiling may increase the size of the generated APK.'
        pub: '[AI] `flutter build apk --pub` is a command used in Flutter development to build an Android Application Package (APK) from the source code. The `--pub` option indicates that Flutter should also run the `pub get` command before building, ensuring that all required dependencies are downloaded and installed for the project. This command generates a single APK file suitable for installation on Android devices or emulators.'
        release: '[AI] `flutter build apk --release` is a command used in Flutter development to generate a release APK (Android Application Package) for publishing or distributing an app. This command performs tree shaking, shrinking, and other optimizations for code size reduction, improving the app''s performance and preparing it for production deployment. It also generates unsigned APK files that can be manually signed later using the Android Studio or command-line tools.'
        split-debug-info: |-
            [AI] `flutter build apk --split-debug-info` is a command used in Flutter development to build an APK (Android Application Package) with split debug info enabled. This option separates the debug information for each individual Dart module into its own .apk file instead of bundling it all together in the main apk file.

            This separation has several advantages:

            1. Reduced Apk Size: Since debug info is large and not required for end-users, splitting it out helps reduce the size of the APK that users download.
            2. Faster Installation: Installing a smaller APK is quicker than installing a larger one, which improves the user experience.
            3. Easier Debugging: With separate debug info files for each module, it becomes easier to attach the correct debugger during development and testing.
            4. Improved Test Coverage: The ability to obtain more accurate test coverage reports is a significant benefit of splitting debug information.

            To summarize, `flutter build apk --split-debug-info` is an essential command for Flutter developers looking to optimize their APKs and enhance the debugging experience.
        split-per-abi: '[AI] `flutter build apk --split-per-abi` is a command used in Flutter, a mobile app development framework, to build an Android application package (APK) with split APK support for different ABIs (Architecture Binary Interfaces). It means that the APK will be generated as separate files for each supported architecture such as arm64-v8a, armeabi, x86 etc. This command improves the installation size and download time by providing optimized APKs for specific device architectures.'
        target: '[AI] The `flutter build apk --target` command is used to build a Android Application Package (APK) using Flutter. The `--target` option specifies the ABIs (Architectures, Binary Interfaces) for which the APK should be built. For example, `--target=x86_64-vms` would build an APK for x86\_64 architecture used in some virtual machines or emulators, while `--target=armv7-vneon` would target ARMv7 devices with NEON support. Multiple targets can be specified by separating them with commas.'
        target-platform: '[AI] `flutter build apk --target-platform` is a command used in Flutter development to generate an Android APK (Android Application Package) with a specific target platform version. The `--target-platform` option allows you to specify the API level or the SDK version of the Android platform for which the APK is being built. This can help ensure your app is compatible with certain devices and their software versions. Note that building an APK in this way doesn''t automatically include any additional device-specific libraries, so you might need to add those separately if needed.'
        track-widget-creation: '[AI] The `flutter build apk --track-widget-creations` command is used to build an APK (Android Package) in Flutter with the track-widget-creation option enabled. This option is necessary when building an app that uses custom widgets or components which may have unique identifiers. With this option, Flutter keeps track of these custom widget instances during the build process and ensures their unique identifiers are properly preserved in the APK. This helps avoid issues such as duplicate widget IDs, ensuring proper functionality and stability in the resulting Android app.'
        tree-shake-icons: '[AI] `flutter build apk --tree-shake-icons` is a command used in Flutter development to create an Android APK (Android Application Package) with tree shaking for icon resources. Tree shaking is a process that removes unused code and assets from the application, reducing its size. In this specific command, Flutter also applies tree shaking to icon resources. By doing so, only the icons actually used in your app will be included in the APK, saving storage space and improving download times for users.'
