# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mvn
description: Apache Maven is a software project management and comprehension tool
flags:
    --color=: Defines the color mode of the output
    -B, --batch-mode: Run in non-interactive (batch) mode
    -C, --strict-checksums: Fail the build if checksums don't match
    -D, --define=: Define a system property
    -N, --non-recursive: Do not recurse into sub-projects
    -P, --activate-profiles=: Comma-delimited list of profiles to activate
    -T, --threads=: Thread count
    -U, --update-snapshots: Forces a check for missing releases and updated snapshots on remote repositories
    -V, --show-version: Display version information WITHOUT stopping build
    -X, --debug: Produce execution debug output
    -am, --also-make: also build projects required by the list
    -amd, --also-make-dependents: also build projects that depend on projects on the list
    -b, --builder=: The id of the build strategy to use
    -c, --lax-checksums: Warn if checksums don't match
    -e, --errors: Produce execution error messages
    -emp, --encrypt-master-password=: Encrypt master security password
    -ep, --encrypt-password=: Encrypt server password
    -f, --file=: Force the use of an alternate POM file
    -fae, --fail-at-end: Only fail the build afterwards
    -ff, --fail-fast: Stop at first failure in reactorized builds
    -fn, --fail-never: NEVER fail the build, regardless of project result
    -gs, --global-settings=: Alternate path for the global settings file
    -gt, --global-toolchains=: Alternate path for the global toolchains file
    -h, --help: Display help information
    -l, --log-file=: Log file where all build output will go
    -llr, --legacy-local-repository: Use Maven 2 Legacy Local Repository behaviour
    -nsu, --no-snapshot-updates: Suppress SNAPSHOT updates
    -ntp, --no-transfer-progress: Do not display transfer progress when downloading or uploading
    -o, --offline: Work offline
    -pl, --projects=: Comma-delimited list of specified reactor projects to build instead of all projects
    -q, --quiet: Quiet output - only show errors
    -rf, --resume-from=: Resume reactor from specified project
    -s, --settings=: Alternate path for the user settings file
    -t, --toolchains=: Alternate path for the user toolchains file
    -v, --version: Display version information
documentation:
    command: '[AI] `mvn` is a command-line interface used to invoke Apache Maven projects. It manages project build processes with reusable plugins for handling tasks such as compilation, testing, site publication, and more. By using a POM (Project Object Model) file, Maven understands the project''s structure and required dependencies to execute the desired build operations.'
    flag:
        activate-profiles: '[AI] `mvn --activate-profiles` is a command used in Maven, a popular build automation tool for Java projects. This command is used to explicitly activate one or more Maven profiles during the build process. Profiles are sets of configuration settings that can be applied conditionally based on various criteria such as specific environments, features, or build types. By using `--activate-profiles`, you can override the default profile and apply a custom set of configurations to your build.'
        also-make: '[AI] `mvn --also-make` is a command used in Maven, a popular Java build automation tool. This goal runs the default life cycle phases (clean, compile, test, package, and install) of a Maven project followed by executing any integrated tests, running the Maven site plugin, and then invoking `exec:java` or `exec:exec` goals on the built artifacts. The `--also-make` flag is optional; it implies `-am`, which stands for "also make". In other words, it builds the project and runs any tests marked as integrated.'
        also-make-dependents: '[AI] The `mvn --also-make-dependents` command is a goal in Apache Maven, a build automation tool for Java projects. It compiles and runs tests not only for the project being built but also for its dependent projects, ensuring that all necessary artifacts are up-to-date before executing the test phase. This goal can be useful when working on complex multi-module projects where dependencies need to be synchronized between projects before testing can begin.'
        batch-mode: '[AI] The `--batch-mode` option is a command-line argument used with Maven, a popular Java build automation tool. This mode is used to run Maven projects in non-interactive mode, which means it does not show any output on the console by default. Instead, the output of the build process is redirected to error streams and log files. It''s particularly useful for continuous integration (CI) systems or automated testing environments where minimal human intervention is desired.'
        builder: '[AI] `mvn --builder` is a command used in Apache Maven, a popular build automation tool for Java projects. This command explicitly specifies that Maven should use an external builder instead of its default Java compiler to execute the build. This can be useful when working with languages other than Java or when using custom builders. The flag does not indicate which builder to use; it only informs Maven that an external builder should be employed.'
        color: '[AI] `mvn --color` is a command-line option used with Apache Maven, a popular Java build automation tool. This option enables colorized output when executing Maven goals or phases. Colored output makes it easier to distinguish between different types of messages, such as error messages, warnings, and informational messages, in the console output.'
        debug: '[AI] `mvn --debug` is a command used in Apache Maven, a popular build automation tool for Java projects. This command sets the logging level to `DEBUG`, which results in Maven printing more detailed information about its activities during the build process. It can help diagnose issues and understand the flow of the build lifecycle in greater detail.'
        define: |-
            [AI] `mvn` is the command-line interface for Apache Maven, a popular build automation tool used primarily for Java projects. The option `--define` is used to define properties or settings that can be used throughout the entire Maven project or within a specific pom.xml file. For example:

            ```bash
            mvn clean install --define myProperty=myValue
            ```

            This command sets the value of `myProperty` to `myValue` for the current build only. The defined property can be used in Maven plugins, mojos (goals), and within the pom.xml file itself by referencing `${myProperty}`.
        encrypt-master-password: '[AI] `mvn --encrypt-master-password` is a command used in Apache Maven, a build automation tool. This command is used to encrypt a master password for Maven settings and user properties files, ensuring that the sensitive data is securely stored and not accessible in plain text. When this command is executed with valid arguments, Maven uses Java''s KeyStore API to create or update an encrypted keystore file containing the master password. This helps maintain the security of your Maven projects, especially when using version control systems like GitHub, where sensitive information should not be committed.'
        encrypt-password: '[AI] `mvn --encrypt-password` is a command used in Apache Maven, a popular build automation tool for Java projects. This command encrypts a given plaintext password using the keystore file specified in the `-Dmaven.crypto.file.algorithm` and `-Dmaven.crypto.file.passphrase` system properties or in the user settings file. The encrypted password is then stored in the settings.xml file, allowing secure storage of sensitive information for Maven projects.'
        errors: '[AI] The `mvn` command with the `--errors` option is used in Apache Maven project builds to specifically display only the error stack traces. When invoked with this option, Maven will exit with a non-zero status code if there are any errors during the build process. This helps developers quickly identify and fix issues in their projects by focusing on the error messages.'
        fail-at-end: '[AI] `mvn --fail-at-end` is a command used in Apache Maven, a popular build automation tool for Java projects. This option configures Maven to stop executing targets and tests as soon as the first failure occurs during the build process. By default, Maven continues running all tasks even if an error occurs in one of them. Using `--fail-at-end` ensures that only completed phases or goals contribute to the final result and build status. This can be useful when you want to quickly identify the source of a build failure.'
        fail-fast: |-
            [AI] `mvn --fail-fast` is a command-line option used with Apache Maven, a popular build automation tool for Java projects. This option, when enabled (`--fail-fast true` by default), makes Maven exit immediately as soon as it encounters the first failure during the build process.

            In other words, `--fail-fast` prioritizes error reporting and helps developers identify and resolve issues quickly by not continuing to execute further tasks if an error has occurred. This can save time and resources in cases where some tests or builds are known to fail consistently.
        fail-never: '[AI] The `--fail-never` option in Maven is used to disable Maven''s automatic failure mode. With this option, even if there are build warnings or errors in a project, Maven will continue executing the rest of the build and report only the failed stages, but not stop the entire build process due to these issues. This can be useful when dealing with complex projects where it is desired to have a complete build even if some parts fail. However, this should be used with caution as it might hide important errors that need to be addressed in order to ensure the correctness of the overall project.'
        file: '[AI] The `--file` option in Maven is used to specify a particular project or build file when invoking the Maven command line interface (CLI) from the terminal. Instead of using the default `pom.xml` file located in the current working directory, you can point to an alternate location or name of the build file by passing the path as an argument with the `--file` flag. For example: `mvn --file /path/to/your/project/pom.xml clean install`. This way, Maven will read and execute the instructions defined in that specific pom file.'
        global-settings: '[AI] `mvn --global-settings` is a command used in Apache Maven, a popular Java build automation tool. This command is used to specify a custom settings file for global Maven configurations. The `--global-settings` option followed by the path to the settings file, allows you to override default Maven settings with your own custom values. These settings apply across all projects built using that Maven installation.'
        global-toolchains: '[AI] `mvn --global-toolchains` is a command in Apache Maven, a popular build automation tool for Java projects. This command is used to manage global toolchains, which are external tool sets (like JDKs, Scala versions, or GraalVM) that can be configured to be automatically downloaded and used across all Maven projects within a system, rather than having to manually specify the location of each toolset for every individual project. This command allows users to list, add, remove, or update global toolchains from a central configuration file (`.mvn/toolchains.xml`) or via the command line.'
        help: '[AI] `mvn --help` is a command used in Apache Maven, a popular build automation tool for Java projects. This command displays an extensive help message that provides information on available goals, options, and plugins. It can be used to quickly check the capabilities of Maven or to get detailed usage instructions for specific goals or commands. The output includes a list of supported Goals and Phases, along with brief descriptions and usage examples, making it a useful resource for developers who want to make the most out of Apache Maven.'
        lax-checksums: |-
            [AI] `mvn --lax-checksums` is a command used in Apache Maven, a popular build automation tool for Java projects. This command is used to execute a Maven project with a more permissive checksum verification policy.

            Normally, Maven downloads artifacts from its central repository (Maven Central) and checks the integrity of those downloaded files using checksums. However, there are cases where checksums might be missing or invalid due to network issues or repository misconfigurations. In such situations, `--lax-checksums` is used as an option to bypass strict checksum verification and proceed with the build.

            By running `mvn --lax-checksums`, Maven will still attempt to validate downloaded artifacts using checksums but won't halt the build if validation fails. Instead, it will continue with the process, potentially warning the user about the failed checksum verification. This command can help in situations where a network issue might be intermittent or when temporarily accessing a misconfigured repository. However, using it indiscriminately could expose your project to potential security risks, as you might unknowingly build with malicious or outdated artifacts.
        legacy-local-repository: '[AI] The `mvn` command with the option `--legacy-local-repository` is used to configure Maven, a Java build automation tool, to use an older version of its local repository instead of the default one. This can be useful when working on projects that have dependencies on outdated versions of libraries or when testing compatibility with older environments. When this option is provided during a Maven build or install command, it will prioritize using the specified local repository instead of the newer one.'
        log-file: '[AI] `mvn` is a command-line interface for Apache Maven, a popular build automation tool used mainly for Java projects. The option `--log-file` instructs Maven to write its output to the specified file instead of printing it to the console. This can be useful when dealing with large or complex builds and wanting to save and review the output later in detail.'
        no-snapshot-updates: '[AI] `mvn --no-snapshot-updates` is a command used in Maven, a popular build automation tool for Java projects. This option disables the use of snapshot versions (in-development builds) in the project''s dependencies during the build process. By using this command, Maven will only download and use released versions from the remote repositories or local cache instead. It helps to ensure a consistent and stable build by preventing the usage of changing snapshot versions which may introduce new bugs or incompatibilities.'
        no-transfer-progress: '[AI] The `--no-transfer-progress` option, when used with Maven (a Java-based build automation tool), disables the transfer progress bar during artifact downloads or uploads. This can be helpful in cases where you prefer to suppress the display of the progress bar for a smoother or headless build experience.'
        non-recursive: '[AI] `mvn --non-recursive` is a command used in Apache Maven, a build automation tool for Java projects. The `--non-recursive` option is used when running the mvn command from the root project directory, and it instructs Maven not to perform the build process recursively in sub-modules or multi-module projects. This can help save time and resources by only building the current project and skipping dependent sub-projects if desired.'
        offline: '[AI] `mvn --offline` is a command used in Apache Maven, a popular Java build automation tool. This command instructs Maven to download and cache all necessary dependencies locally before building the project. As a result, once the dependencies are cached, you can build the project offline without an internet connection. It''s useful when working in environments with limited or no network access.'
        projects: '[AI] `mvn --projects` is a command used in Apache Maven, a popular build automation tool for Java projects. This command is used to list all the Maven projects defined in the current `pom.xml` file or in the local Maven repository, depending on where it''s run from. It prints the groupId and artifactId of each project as output, providing a quick overview of the related projects within the build system.'
        quiet: '[AI] `mvn --quiet` is a command used in Apache Maven, a popular build automation tool for Java projects. The `--quiet` option is used to suppress output from Maven during execution, except for error messages. This can be useful when running automated builds where detailed output may not be necessary. It helps in maintaining a clean console or terminal window and can improve the readability of build logs.'
        resume-from: |-
            [AI] `mvn --resume-from` is a command used in Maven, a popular build automation tool for Java projects. This option is used to resume the execution of a previously failed or interrupted build from a specific point instead of starting from the beginning.

            When a Maven build fails, it may leave behind partial artifacts or incomplete tasks. The `--resume-from` option allows specifying a particular phase or goal that should be resumed during the next build execution. For example, `mvn clean install --resume-from compile` will resume the build from the "compile" phase after any previous failures in earlier phases.

            This flag is particularly useful when dealing with long and complex builds, especially on large projects where interruptions or failures are common. It saves time by not re-executing completed tasks and reduces the likelihood of encountering the same issues that caused the initial failure.
        settings: '[AI] The `mvn` command with the option `--settings` is used to specify the location of the Maven settings file in a command-line interface. Maven settings file contains various configurations like repositories for dependency downloads, plugins, and user properties. By using this option, users can override default settings or use alternative setting files. For example, `mvn --settings my-settings.xml` instructs Maven to use the specified XML file as its settings file instead of the default one located in `~/.m2/settings.xml`.'
        show-version: '[AI] `mvn --show-version` is a command used in Apache Maven, a popular build automation tool for Java projects. This command displays the version number of Maven itself, along with the versions of other components like the Java compiler and the Java runtime environment (JRE) being used. It helps users to confirm that they are running the desired versions of these tools while building their projects.'
        strict-checksums: '[AI] `mvn --strict-checksums` is a command used in Apache Maven, a popular build automation tool for Java projects. This option ensures that all the downloaded artifacts'' checksums match those previously stored in the local Maven repository or the remote repositories defined in the settings.xml file. By using this flag, Maven adds an extra layer of security to prevent manipulation of dependencies during the build process. If any artifact fails the checksum verification, Maven will not continue with the build and report an error.'
        threads: '[AI] The `--threads` option in Maven is used to configure the number of threads that Maven should use for building a project. By default, Maven determines the optimal number of threads based on available system resources. However, you can override this setting with the `--threads` option to specify a fixed number of threads. This can be useful when running builds in environments where resource availability is known or when seeking to maximize or minimize parallelism for performance tuning purposes. Note that increasing the number of threads beyond what your system can handle may lead to decreased build performance and even build failures.'
        toolchains: '[AI] `mvn --toolchains` is a command used in Maven, a popular build automation tool for Java projects. This command allows specifying alternative JDK (Java Development Kit) implementations or toolchains to be used when building a project. The flag takes a comma-separated list of identifiers for the desired toolchains. For instance, `--toolchains java11,openjdk-15` will instruct Maven to use Java 11 and OpenJDK 15 as the toolchains during the build process. This can be useful when working with multiple JDK versions or when using non-standard JDK implementations.'
        update-snapshots: '[AI] `mvn --update-snapshots` is a command used in Maven, a popular build automation tool for Java projects. This goal updates all the project''s snapshots in the local and remote repositories based on their lastUpdate and lastBuilt time stamps. It does not perform any other builds or tests. This command helps to keep your local repository up-to-date with the latest snapshot versions of your projects and their dependencies.'
        version: '[AI] `mvn --version` is a command used in Apache Maven, a popular build automation tool for Java projects. This command is executed in the terminal or command prompt to print out the version information of the installed Apache Maven installation, including the version number and build timestamp. It helps users ensure they are using the desired Maven version for their project and can verify if an update is required.'
