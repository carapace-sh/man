# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fmt [options] [target...]
description: Reformat your configuration in the standard style
flags:
    -check: Check if the input is formatted
    -diff: Display diffs of formatting changes
    -list: Don't list files whose formatting differs
    -no-color: If specified, output won't contain any color
    -recursive: Also process files in subdirectories
    -write: Don't write to source files
documentation:
    command: '[AI] `terraform fmt` is a Terraform command used to reformat Terraform configuration files to ensure consistent formatting according to the Terraform style guide. This command does not make any changes to your infrastructure, it only adjusts the appearance of your HCL (Hashicorp Configuration Language) code to adhere to the preferred Terraform styling rules. This can be helpful for maintaining a team''s Terraform codebase and promoting a consistent look and feel across projects.'
    flag:
        check: '[AI] `terraform fmt -check` is a command provided by Hashicorp''s Terraform configuration management tool. This command is used to check for any format issues in your Terraform configuration files without actually formatting them. It ensures that all the configuration files adhere to Terraform''s recommended style, making it easier for teams to maintain consistent code. The output shows a list of any detected non-compliant lines, allowing you to make necessary corrections before committing changes.'
        diff: '[AI] `terraform fmt -diff` is a command provided by Hashicorp''s Terraform configuration management tool. It formats your Terraform HCL (Hashicorp Configuration Language) files according to the Terragrunt style guide or the default style, and shows the differences between the original and formatted files in a diff output format. This can help ensure consistency across different team members or projects, making code reviews more effective. The `-diff` option allows you to see the changes before actually applying them, enabling careful review and consideration.'
        list: '[AI] `terraform fmt -list` is a command used with Hashicorp''s Terraform configuration management tool. It checks your Terraform files for formatting issues and lists them out, but does not automatically apply any formatting changes. This command helps maintain consistent formatting in your Terraform codebase by providing suggestions to keep the configurations clean and readable according to the Terraform style guide.'
        no-color: '[AI] `terraform fmt -no-color` is a command used with Terraform, an open-source infrastructure as code software tool. The command formattes your Terraform configuration files to conform to Terraform''s style guide. The `-no-color` option disables the use of color in the output, making it more suitable for scripts or CI/CD environments where color may not be displayed properly.'
        recursive: |-
            [AI] `terraform fmt -recursive` is a command used in Terraform, an open-source infrastructure as code software tool. This command formats Terraform configuration files and their contained HCL (Hashicorp Configuration Language) code following Terraform's style guide to ensure consistency across teams and projects.

            The `-recursive` flag instructs Terraform to format not only the current directory but also all subdirectories containing Terraform configuration files, making it useful for formatting an entire project.
        write: '[AI] `terraform fmt -write` is a command used with Hashicorp''s Terraform configuration management tool. This command formats Terraform HCL (Hashicorp Configuration Language) files according to the Terraform style guide, and then writes the formatted code back to the original files in-place. It helps maintain a consistent coding style across your Terraform projects.'
