# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: review [<number> | <url> | <branch>]
description: Add a review to a pull request
group: Targeted commands
flags:
    -F, --body-file=: Read body text from `file` (use "-" to read from standard input)
    -a, --approve: Approve pull request
    -b, --body=: Specify the body of a review
    -c, --comment: Comment on a pull request
    -r, --request-changes: Request changes on a pull request
documentation:
    command: |-
        [AI] `gh pr review` is a GitHub CLI (Command Line Interface) command used to perform various actions related to pulling, reviewing, and managing pull requests. Here are some common uses:

        1. **Review a specific pull request**: To review a pull request, navigate to the repository in your terminal and run `gh pr review <pull-request-number>`. This will open the web interface for that PR in your default web browser, allowing you to inspect changes and leave comments.

        2. **Sync or fetch the latest changes from a remote branch or repository**: To update your local repository with the latest changes from a remote branch or repository, run `gh pr fetch <branch-or-repository>`. This command is often used before reviewing a pull request to make sure you're working with the most up-to-date codebase.

        3. **Create and open a new pull request**: To create and open a new pull request, run `gh pr create -b <source-branch> -d "<commit-message>"`. This command creates a new branch from your current local branch, commits the changes, opens a new PR, and displays its URL in the terminal.

        4. **List all of your open or merged pull requests**: To view a list of your open or merged pull requests, run `gh pr list --all` or `gh pr list --closed`, respectively. These commands display information about each PR, including the branch name, status, and number of comments.
    flag:
        approve: '[AI] `gh pr review --approve` is a GitHub command used to approve a pull request (PR) for merging. This command signifies that the reviewer has thoroughly checked the changes in the PR and believes they are ready to be merged into the base branch. The approval adds a review comment, usually with an approval message, and marks the PR as having at least one approving review. If the pull request also requires other approvals or passes additional checks like CI, it can still be merged.'
        body: '[AI] `gh pr review --body` is a command used in the GitHub CLI (Command Line Interface) to leave comments on pull requests. The "--body" option specifies the text of the comment to be added. In other words, this command allows you to review a pull request and add a message as feedback for the author.'
        body-file: '[AI] `gh pr review --body-file` is a command used in GitHub''s command-line tool (Git Hub CLI or gh) for managing pull requests. This command is utilized to provide a file as the body of a pull request review, allowing users to submit detailed feedback with formatting and additional context. Instead of typing out the review text directly within the GUI or in the comment box, this command enables users to write and submit their reviews using markdown or other rich text formats contained within a local file.'
        comment: '[AI] The `gh pr review --comment` command is a GitHub CLI (Command Line Interface) command used to add or edit comments on a pull request. It allows you to interact with a specific review, leaving feedback and suggestions for the author of the pull request to improve their changes before merging. This command can be particularly useful during code reviews in collaborative development projects.'
        request-changes: '[AI] The `gh pr review --request-changes` command is a GitHub CLI (Command Line Interface) command used to request changes on a pull request. It asks the reviewers to suggest modifications or improvements before the change can be merged into the main branch. This command facilitates collaborative development by enabling a more thorough review process, improving code quality and maintaining consistency within your project.'
