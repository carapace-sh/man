# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit
description: edit go.mod from tools or scripts
flags:
    -dropexclude=: drop an exclusion
    -dropreplace=: drop a module replacement
    -droprequire=: drop a requirement
    -exclude=: add an exclusion
    -fmt: reformats the go.mod file without making other changes
    -go=: set the expected Go language version
    -json: print the final go.mod file in JSON format instead instead of writing back
    -module=: changes the module's path
    -print: print the final go.mod in its text format instead of writing back
    -replace=: add a module replacement
    -require=: add a requirement
documentation:
    command: '[AI] `go mod edit` is a Go module command used to modify the Go.mod file in a Go moduled project. It allows users to update the dependencies'' versions, add or remove modules, and make other changes to the file without having to rebuild the entire project from scratch with `go get`. This command helps maintain control over the project''s dependencies while keeping the go.mod file up-to-date.'
    flag:
        dropexclude: '[AI] The `go mod edit -dropexclude` command is used with Go Mod, which is a dependency management system in Golang. This command is utilized to remove files or directories from the `excluded` section of the `go.mod` file. When you use this command followed by the path to a directory or file, it removes that specific entry from the list of excluded dependencies, making them subject to being downloaded and managed by Go Mod during the next build or update operation.'
        dropreplace: '[AI] The `go mod edit -dropreplace` command is a sub-command used with the Go Mod Tool in Go programming language. It is used to remove replaced dependencies from the go.mod file. When a dependency is replaced, it means that another dependency has been introduced to replace the functionality of the original one. This command removes such replaced dependencies from the go.mod file while keeping their original dependencies if they still exist in the project. The effect is to undo a `go get -replace` operation.'
        droprequire: '[AI] The `go mod edit -droprequire` command is used with Go Mod, which is a dependency management system in the Go programming language. This command is used to remove an imported package as a requirement from the go.mod file. When you run this command followed by the path to the package, it will be removed from the list of required packages in the go.mod file without affecting your local source code. This can be helpful when you no longer need a specific version of a package or if you''ve resolved dependencies manually outside Go Mod.'
        exclude: |-
            [AI] The `go mod edit -exclude` command is a Go module tool that allows you to exclude specific modules from being managed by Go Mod. This can be useful when working with third-party libraries that are not managed as Go modules or when you prefer managing certain dependencies externally.

            To use this command, you provide the file or directory containing the `go.mod` file that represents your module's dependency tree. Then, specify the modules to exclude by their import paths. The excluded modules will no longer be managed by Go Mod and must be installed and updated manually outside of the Go mod environment.

            Example:
            ```bash
            $ go mod edit -exclude github.com/example/library1 github.com/example/library2 myproject/go.mod
            ```
            This command excludes `github.com/example/library1` and `github.com/example/library2` from the dependencies managed by Go Mod in your project's `myproject/go.mod` file.
        fmt: '[AI] `go mod edit -fmt` is a command used in Go programming language to format the Go.mod file according to the Go Mod File Format specification set by Google. This command rewrites the module requirements and versions specified in the .mod file while maintaining the same semantic meaning, ensuring consistent formatting and adherence to the official Go MOD file format standards.'
        go: '[AI] The `go mod edit -go` command is a Go module tool command used to modify the go.mod file manually. The `-go` flag indicates that the changes should be made based on the current state of the Go source files in the working directory, without checking for or downloading any external modules. This command allows developers to update the go.mod file with explicit dependencies as needed, while keeping the project offline if desired.'
        json: '[AI] `go mod edit -json` is a command used in Go programming language to edit or modify the `Go.mod` file in a JSON format. The `Go.mod` file is a manifest file that specifies the required modules and their versions for a given Go project. The `-json` option with this command outputs the current `Go.mod` file content in JSON format, which can then be edited using other JSON tools or manually before applying the changes back to the `Go.mod` file using the `go mod edit` command without any options. This way, you can have more control over the dependencies of your project and ensure their exact versions.'
        module: '[AI] `go mod edit -module` is a command used in Go programming language to update or modify the module declaration in a Go Mod file (go.mod). This file specifies the dependencies and their versions for the current module, as well as any external modules imported into the project. By using `go mod edit -module`, you can change the name or path of the current module in the go.mod file without affecting other parts of the file, allowing you to keep your project''s dependency configuration up-to-date and accurate.'
        print: '[AI] `go mod edit -print` is a command used in Go programming language to display the current Go module file (Go.mod) without making any changes to it. This command provides the information about the module dependencies and their versions as specified in the module file.'
        replace: '[AI] `go mod edit -replace` is a command used in Go programming language to modify the go.mod file for dependency management. The `-replace` option allows replacing an existing import path with a new one, updating the go.mod file accordingly. This can be useful when needing to use a specific version of a library instead of the latest one, or when transitioning from an external dependency to one that''s integrated into your project.'
        require: '[AI] `go mod edit -require` is a command used in Go programming language for managing dependencies in a Go Mod file (go.mod). This command allows you to update or modify the list of required modules and their versions that your Go project depends on. By specifying the new module name and version, you can add or modify an existing entry within the go.mod file using this command. This helps keep your project''s dependencies up-to-date and correctly declared.'
