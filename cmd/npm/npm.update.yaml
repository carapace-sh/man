# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: update
description: Update packages
flags:
    --audit: submit audit reports
    --bin-links: Create symlinks for package executables
    --dry-run: Only report changes
    --fund: Display funding message
    --global-style: Use global layout
    --ignore-scripts: do not run scripts specified in package.json
    --legacy-bundling: Use legacy bundling
    --omit*=: omit dependency types
    --package-lock: Only update package-lock.json
    --strict-peer-deps: Fail and abort for any conflicting `peerDependencies`
    --workspaces: Enable running a command in the context fo all workspaces
    -g, --global: operate in global mode
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm update` is a command used in Node.js projects to install or update the specified packages listed in the `package.json` file to their latest versions. When run, npm will check the currently installed packages against the latest versions available in the registry and download and install any updates if found. By default, it only affects the devDependencies, but you can also update the dependencies by adding "--only=production" or "production" as an argument.'
    flag:
        audit: '[AI] `npm update --audit` is a command used in Node.js package management with npm (Node Package Manager). This command runs an audit of the project''s dependencies and their vulnerabilities, then suggests and applies updates to fix any known security issues. It helps keep your Node.js projects secure and up-to-date.'
        bin-links: '[AI] `npm update --bin-links` is a command used in npm (Node Package Manager) to update installed packages while creating symbolic links for global binaries instead of downloading and installing new binary files. This can save disk space, especially when dealing with large binary packages, as it retains the existing binaries. However, it''s important to note that this command only affects newly updated packages; existing global binaries will not be affected.'
        dry-run: '[AI] `npm update --dry-run` is a command used in Node.js package management with npm (Node Package Manager). This command simulates an update of installed packages and their dependencies without actually making any changes to the files or lockfile. It provides a preview of which packages would be updated, and what new versions would be installed, helping users to evaluate potential impacts before running an actual update.'
        fund: '[AI] `npm update --fund` is a command used in Node.js projects managed with npm (Node Package Manager). This command is used to automatically fetch and install new versions of dependencies listed in the package.json file, along with their required funds from your default credit card through npm''s partnership with GitHub''s marketplace. This streamlines the process of managing project dependencies while keeping them up-to-date.'
        global: '[AI] `npm update --global` is a command used in Node.js package management with npm (Node Package Manager). This command updates the global packages installed in the system-wide npm installation. By using `--global` option, only the global packages are updated without affecting any local project''s dependencies.'
        global-style: '[AI] The `npm update --global-style` command is used to update all globally installed packages in Node.js using npm (Node Package Manager), with a preference for installing packages that have style consistency across their global binaries. This command ensures that the look and feel of the command-line interfaces of globally installed packages are consistent, making it easier for users to manage multiple global packages.'
        ignore-scripts: '[AI] The `npm update --ignore-scripts` command is used when updating packages in a Node.js project with npm, but you want to bypass running any scripts mentioned in the packages'' `package.json` files. This can be useful if you suspect that running the scripts might cause issues during the update process. The `--ignore-scripts` flag tells npm not to execute any installed scripts when installing or updating dependencies.'
        legacy-bundling: '[AI] The `npm update --legacy-bundling` command is used when updating dependencies in a Node.js project that relies on outdated bundlers like Babel 5 or webpack 1 for handling legacy code. This flag tells npm to install the latest packages, but use the old bundling configuration instead of applying any new bundling configurations that might break the existing setup. In other words, it allows for a safe update of dependencies while keeping the current bundling process unchanged.'
        omit: '[AI] `npm update --omit` is a command used in Node.js projects with npm (Node Package Manager) for managing dependencies. The `update` keyword tells npm to install the latest versions of all listed packages in the package.json file. The `--omit` flag specifies that the latest version of some specific packages should be omitted, meaning they will remain at their current versions. This can be useful if you want to update some packages while keeping others at their current state.'
        package-lock: '[AI] `npm update --package-lock` is a command used in Node.js package management with npm (Node Package Manager). This command triggers an automatic update of all project dependencies listed in the `package-lock.json` file to their latest versions, while keeping the current versions of other packages unchanged. It also generates and saves updated `package-lock.json` and `package.json` files with the new version numbers. The purpose is to maintain a consistent development environment and ensure that all required dependencies are up to date.'
        strict-peer-deps: '[AI] The `npm update --strict-peer-deps` command is used when running `npm update` to install new versions of dependencies in a Node.js project. The `--strict-peer-deps` flag introduces stricter dependency resolution rules. With this flag, npm will only install updates that do not conflict with the listed peer dependencies in your package.json file. This helps ensure that your project''s dependencies remain compatible and functions as expected after updating.'
        workspace: '[AI] `npm update --workspace` is a command used in Node.js projects managed with npm (Node Package Manager). This command updates the dependencies of all packages listed in an `npm workspaces` configured root package.json file and its linked child package.json files to their latest versions, as defined in their respective `package-lock.json` or `yarn.lock` files. It helps manage consistent dependencies across multiple packages within a monorepo (monolithic repository) setup.'
        workspaces: '[AI] `npm update --workspaces` is a command used in npm (Node Package Manager), a popular package manager for Node.js projects. This command updates all the packages in a multi-package project, also known as a monorepo or a workspace, with the latest available versions according to their `package-lock.json` or `yarn.lock` files. It''s an efficient way to keep multiple packages within a single Git repository up to date while ensuring consistency across the entire project.'
