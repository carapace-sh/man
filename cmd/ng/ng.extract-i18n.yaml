# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: extract-i18n
description: Extracts i18n messages from source code
flags:
    --browser-target=: A browser builder target to extract i18n messages
    --format=: Output format for the generated file.
    --out-file=: Name of the file to output.
    --output-path=: Path where output will be placed.
    --progress: Log progress to the console.
    -c, --configuration=: One or more named builder configurations
documentation:
    command: '[AI] `ng extract-i18n` is an Angular CLI command used for extracting i18n data from Angular applications. It analyzes the source code and identifies all i18n tokens, creating a corresponding JSON file for each supported locale. The generated files can be further processed using other tools or libraries to create translation files in various formats.'
    flag:
        browser-target: '[AI] `ng extract-i18n` is a command used in Angular projects for extracting and generating i18n files using Angular''s built-in i18n support. The `--browser-target` option specifies the target browser or platform that the extracted i18n data will be optimized for. By default, it is set to "ShrinkToSizeOrModuleId". However, you can also use specific browser names or Angular CLI supported build targets like "safari", "chrome", or "bundler:rollup". This helps ensure optimal i18n data size and performance for the chosen target.'
        configuration: '[AI] The `ng extract-i18n` command is used to generate an i18n JSON file from Angular applications using the Angular CLI. The `--configuration` option specifies which i18n configuration file to use when generating the JSON file. This allows you to manage and organize your translation files in separate projects or modules within larger Angular applications.'
        format: |-
            [AI] The `ng extract-i18n` command is a part of Angular's i18n (internationalization) feature. It is used to generate JSON files for translations from your Angular application.

            The `--format` option specifies the desired format for the generated output files. By default, it generates files in JavaScript format (`.json` with a `.js` extension). You can also use other formats like `ts` (TypeScript), `xliff`, or `po` by providing their corresponding flags instead:

            - `--format=ts` for TypeScript files (`.json` with a `.ts` extension)
            - `--format=xliff` for XLIFF format
            - `--format=po` for PO (Portable Object) format

            So, in summary, the `--format` flag in the `ng extract-i18n` command is used to specify the desired format of the generated translation files.
        out-file: '[AI] The `ng extract-i18n` command is a part of Angular''s i18n (internationalization) capabilities. It is used to extract and generate i18n data from Angular applications. The `--out-file` option specifies the output file where the extracted i18n data will be written. This data can then be used for generating translations in various languages.'
        output-path: '[AI] The `ng extract-i18n` command is used in Angular projects for extracting and generating i18n resources files (e.g., .pot and .po files) from Angular application code. The `--output-path` flag specifies the output directory where the extracted i18n resources will be saved after the execution of this command. For instance, if you set `--output-path=locales`, the generated i18n files will be placed in a new or existing locales folder within your Angular project.'
        progress: '[AI] `ng extract-i18n --progress` is a command used in Angular projects with internationalization (i18n) setup. This command utilizes the Angular CLI''s `extract-i18n` tool to generate and extract i18n data from your Angular application into separate `.json` files. The `--progress` flag enables the display of progress messages during the execution of this command.'
