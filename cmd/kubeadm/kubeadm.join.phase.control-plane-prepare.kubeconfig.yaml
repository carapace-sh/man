# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: kubeconfig
description: Generate the kubeconfig for the new control plane components
flags:
    --certificate-key=: Use this key to decrypt the certificate secrets uploaded by init.
    --config=: Path to kubeadm config file.
    --control-plane: Create a new control plane instance on this node
    --discovery-file=: For file-based discovery, a file or URL from which to load cluster information.
    --discovery-token-ca-cert-hash*=: 'For token-based discovery, validate that the root CA public key matches this hash (format: "<type>:<value>").'
    --discovery-token-unsafe-skip-ca-verification: For token-based discovery, allow joining without --discovery-token-ca-cert-hash pinning.
    --discovery-token=: For token-based discovery, the token used to validate cluster information fetched from the API server.
    --tls-bootstrap-token=: Specify the token used to temporarily authenticate with the Kubernetes Control Plane while joining the node.
    --token=: Use this token for both discovery-token and tls-bootstrap-token when those values are not provided.
documentation:
    command: '[AI] The `kubeadm join` command with the argument `phase control-plane-prepare kubeconfig`, is used to initiate the preparation stage of setting up a new worker node in a Kubernetes cluster managed by Kubeadm. During this phase, Kubeadm generates and configures the kubeconfig file for the new node, allowing it to communicate with the existing control plane components. This command sets up the new node as a control plane node, capable of running etcd, the Kubernetes control plane services, and managing the cluster.'
    flag:
        certificate-key: '[AI] The `kubeadm join` command with the `phase control-plane-prepare kubeconfig --certificate-key` option is used to prepare a new control plane node in a Kubernetes cluster managed by `kubeadm`. This specific phase configures the new node with the necessary `kubeconfig` data to communicate with the existing control plane. The `--certificate-key` flag refers to the location of the private key used for signing the certificate of the new control plane node. Once this command is executed, the new node will be configured and ready to join the cluster as part of the control plane.'
        config: |-
            [AI] `kubeadm join` is a command used to join worker nodes to a Kubernetes cluster managed by `kubeadm`, a tool for bootstrapping and managing Kubernetes clusters. The `phase control-plane-prepare kubeconfig --config` argument specifies that this command should enter the control plane preparing phase during the node join process.

            During this phase, `kubeadm` generates a new `kubeconfig` file containing the necessary configuration data for communicating with the cluster's control plane components, such as the etcd and kube-apiserver. This file is saved to the specified location, which in this case is not explicitly provided but assumed to be the default location, typically at `~/.kube/config`.

            By using the `--config` flag, you can specify an alternative location for saving the generated `kubeconfig` file if needed. In summary, this command prepares a worker node as a control plane node by generating and configuring its `kubeconfig` file.
        control-plane: |-
            [AI] `kubeadm join` is a command used to add a node to a Kubernetes cluster managed by `kubeadm`. The `phase control-plane-prepare kubeconfig --control-plane` argument specifies the phase of the join process for setting up a control-plane (master) node.

            In this phase, `kubeadm` generates and configures the necessary Kubernetes configuration files (kubeconfig) for the new control-plane node to communicate with the existing cluster components. These configuration files include the certificate authorities, client certificates, and server certificates required for secure communication between nodes in the cluster.

            After this phase is completed, you can proceed with the remaining steps to initialize the new control-plane node by running `kubeadm init` or `kubeadm bootstrap`. This will set up the Kubernetes control plane components (etcd, kube-apiserver, kube-controller-manager, and kube-scheduler) on the new node.
        discovery-file: |-
            [AI] The `kubeadm join` command is used to add a worker node to a Kubernetes cluster managed by `kubeadm`. The option `--discovery-file` specifies the location of a file containing information about the existing Kubernetes control plane.

            The phase `control-plane-prepare` is part of the `join` process and is responsible for preparing the node to join as a control plane member. During this phase, `kubeadm` generates the necessary certificates and configures the system to run various Kubernetes components such as etcd, kube-apiserver, and kube-controller-manager.

            The option `--kubeconfig` is used to generate or update the `kubeconfig` file on the joining node with the appropriate configuration information for communicating with the existing control plane cluster. This includes the API server address and client certificates. By including this flag, `kubeadm join` ensures that the worker node will be configured correctly once it has joined the cluster as a control plane member.
        discovery-token: |-
            [AI] The `kubeadm join` command with the `phase control-plane-prepare kubeconfig --discovery-token` argument is used to prepare a new control plane node in a Kubernetes cluster managed by `kubeadm`.

            In simpler terms, it generates and configures the necessary `kubeconfig` file for joining this new node as part of the control plane. The `--discovery-token` flag specifies that the token for discovery should be used to set up the connection between nodes in a stateless way. This means the nodes do not need a pre-existing relationship or manually configured certificates and keys.

            The command performs the following steps:

            1. Downloads the required certificate authorities (CAs) from the etcd server.
            2. Generates and prints a new token for joining the control plane.
            3. Configures the `kubeconfig` file with the necessary connection details, including the discovered CA, the token, and the address of the existing control plane node or etcd cluster.
            4. Prints the configuration as output to be used when executing `kubeadm join` on the new node.

            These actions enable the new node to safely connect to the cluster, authenticate with existing nodes, and start serving as a control plane component in the Kubernetes infrastructure.
        discovery-token-ca-cert-hash: |-
            [AI] `kubeadm join` is a command-line utility used to join worker nodes to a Kubernetes cluster managed by `kubeadm`, a tool for bootstrapping Kubernetes clusters. The `control-plane-prepare` subcommand is responsible for preparing a node to become a control-plane (master) node in the cluster.

            The option `--discovery-token-ca-cert-hash` specifies the CA certificate hash value that should be used for token discovery when configuring `kubeconfig`. During the process of setting up a new control-plane node, `kubeadm` generates a join token and serves it with a signed certificate. The worker node joining the cluster uses this token along with the CA certificate's hash to authenticate and create the required `kubeconfig` file for communicating with the Kubernetes control plane.
        discovery-token-unsafe-skip-ca-verification: |-
            [AI] `kubeadm join` is a command used to join worker nodes to a Kubernetes cluster managed by `kubeadm`, a tool for initializing clusters and joining existing ones. The specific option `--control-plane-prepare kubeconfig --discovery-token-unsafe-skip-ca-verification` is used during the join process to prepare the kubeconfig file for the worker node.

            The `--control-plane-prepare` flag instructs `kubeadm join` to generate a new control plane certificate and key, as well as update the `kubeconfig` file with the necessary information for communicating with the control plane nodes.

            The `--discovery-token-unsafe-skip-ca-verification` flag is used in conjunction with `--control-plane-prepare` to skip CA (Certificate Authority) verification during the token discovery process. This can be useful when dealing with self-signed certificates or when automating the join process, but it should only be used in secure environments where trust has been established between nodes.
        tls-bootstrap-token: |-
            [AI] The `kubeadm join` command with the `phase control-plane-prepare kubeconfig --tls-bootstrap-token` argument is used to prepare a new node to join a Kubernetes cluster as a control plane member.

            This specific phase configures the new control plane node by creating and setting up a TLS bootstrap token for secure communication between nodes in the cluster. It also generates and saves the `kubeconfig` file, which contains the necessary configuration information for communicating with the Kubernetes cluster.

            By using the `--tls-bootstrap-token` flag, `kubeadm` ensures that each control plane node has a unique token to authenticate during the joining process, enhancing security and reducing potential risks of unauthorized access to the cluster.
        token: |-
            [AI] The command `kubeadm join --phase control-plane-prepare kubeconfig --token <token>` is used to prepare a kubeconfig file for joining a worker node to a Kubernetes cluster managed by Kubadm as a control plane node.

            Here's a breakdown of the command:

            1. `kubeadm join`: This is the main command to join a node to a Kubernetes cluster using Kubadm.
            2. `--phase control-plane-prepare`: This option specifies that the kubeconfig file should be prepared for a control plane node, which includes setting up necessary certificates and keys.
            3. `kubeconfig`: This is the output file where the generated kubeconfig will be saved.
            4. `--token <token>`: This option requires a token that identifies the join request to the cluster. The token can be obtained from the existing control plane nodes using the `kubeadm init --print-join-command` command.
            5. In summary, this command generates and configures a kubeconfig file for joining a node as a control plane node to a Kubernetes cluster managed by Kubadm using the provided token.
