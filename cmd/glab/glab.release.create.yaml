# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: create <tag> [<files>...]
description: Create a new or update a GitLab Release for a repository
flags:
    -D, --released-at=: The `date` when the release is/was ready. Defaults to the current datetime. Expected in ISO 8601 format (2019-03-15T08:00:00Z)
    -F, --notes-file=: Read release notes `file`. Specify `-` as value to read from stdin
    -N, --notes=: The release notes/description. You can use Markdown
    -a, --assets-links=: '`JSON` string representation of assets links (e.g. `--assets-links=''[{"name": "Asset1", "url":"https://<domain>/some/location/1", "link_type": "other", "filepath": "path/to/file"}]'')`'
    -m, --milestone*=: The title of each milestone the release is associated with
    -n, --name=: The release name or title
    -r, --ref=: If a tag specified doesn't exist, the release is created from ref and tagged with the specified tag name. It can be a commit SHA, another tag name, or a branch name.
documentation:
    command: '[AI] `glab release create` is a GitLab CI/CD command used to create a new GitLab Release. It takes one required argument which is the tag or commit SHA reference for the version to be released, followed by any optional arguments such as release name and notes. The created release will include the artifacts specified in the `.gitlab-ci.yml` file, allowing easy distribution of software packages or other assets associated with the versioned code.'
    flag:
        assets-links: '[AI] The `glab release create` command with the `--assets-links` flag is used to create a new GitLab Release in GitLab, specifically for managing assets associated with that release. The `--assets-links` option instructs GitLab to create links between the release and the uploaded files instead of embedding the file contents directly into the release notes. This approach allows for easier file updates without modifying the release notes content. In summary, this command creates a new GitLab Release with support for managing linked assets.'
        milestone: '[AI] `glab` is a Gitops tool for managing Kubernetes resources using Git operations. The command `glab release create --milestone` creates a new Kubernetes Release object in your GitOps workflow. This command takes as an argument the name of the release and the associated Git branch or tag, represented by the milestone. The Release object manages the deployment of a specific version of a Kubernetes application. Once created, `glab` will sync the desired release with your Kubernetes cluster.'
        name: '[AI] The `glab release create` command is used in GitLab to create a new release for a specific project. The `--name` option sets the name or tag for the release. This command generates an artifact archive, creates a new Git tag, and finally creates a new Git release with the specified name.'
        notes: '[AI] `glab release create` is a command used in the GitLab CI/CD tool to create a new GitLab Release. The `--notes` option allows you to provide release notes as part of the creation process. These notes will be visible to users when viewing the release on the GitLab interface.'
        notes-file: '[AI] The `glab release create` command is a part of Glab, a Gitops CLI for Kubernetes, which helps manage deployments and releases using Git-like workflows. The `--notes-file` option specifies a file containing release notes to be included in the new release created by this command. In other words, it allows you to attach detailed descriptions or changelog information to your Kubernetes releases.'
        ref: '[AI] `glab` is a Git interface for Kubernetes, and the command `glab release create --ref <ref>` creates a new Kubernetes release object based on the specified Git ref (branch or tag) in the given repository. The release will have the image built from the Dockerfile in that repository and deployed to the cluster managed by `glab`.'
        released-at: '[AI] The `glab release create` command is a part of Glab, a GitOps tool built on top of Git and Kubernetes. It creates a new Kubernetes release using Glab. The `--released-at` flag sets the release time, which is the timestamp when the release will be marked as stable in your CI/CD pipeline. This means that the release will be deployed to production only after this specified time. This can help ensure that your production environment remains stable and consistent by only promoting releases that have passed all desired tests and checks before deployment.'
