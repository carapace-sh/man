# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fmt
description: Format source files
flags:
    --check: Check if the source files are formatted
    --ext=: 'Set standard input (stdin) content type [default: ts]  [possible values: ts, tsx, js, jsx, md, json, jsonc]'
    --ignore=: Ignore formatting particular source files
    --options-indent-width=: Define indentation width. Defaults to 2.
    --options-line-width=: Define maximum line width. Defaults to 80.
    --options-prose-wrap=: 'Define how prose should be wrapped. Defaults to always. [possible values: always, never, preserve]'
    --options-single-quote: Use single quotes. Defaults to false.
    --options-use-tabs: Use tabs instead of spaces for indentation. Defaults to false.
    --watch: 'UNSTABLE: Watch for file changes and restart process automatically'
    -c, --config=: Load configuration file
documentation:
    command: '[AI] `deno fmt` is a command provided by Deno, a modern and secure TypeScript runtime. It''s used for formatting Deno source code files according to the Deno style guide. When you run this command in your terminal, it will read the specified file(s), apply formatting rules, and write the result back to the same location with a `.mjs` or `.ts` extension. This helps maintain a consistent coding style within a project.'
    flag:
        check: '[AI] `deno fmt --check` is a command provided by Deno, a modern and secure TypeScript runtime. It checks the codebase in the current directory for format issues without actually formatting the files. This helps developers ensure their code adheres to a consistent style before committing changes.'
        config: '[AI] `deno fmt --config` is a command used in Deno, a modern JavaScript runtime, to format your codebase according to a specific configuration. The `--config` option specifies the path to a `deno.json` file that contains formatting rules and preferences. This allows you to enforce consistent coding styles across multiple projects or within a team.'
        ext: '[AI] `deno fmt --ext` is a command used in Deno, a modern JavaScript runtime. It''s a formatting tool that helps maintain consistent coding styles within a project. The `--ext` option is a flag that specifies the file extensions to be formatted. When you run `deno fmt --ext .js`, it will format all the `.js` files in your project, keeping the codebase clean and readable.'
        ignore: '[AI] `deno fmt --ignore` is a command used in Deno, a modern and secure TypeScript runtime. It''s primarily employed to format Deno code according to the official style guide, ensuring consistency within a project. The `--ignore` flag modifies this process, allowing you to exclude specific files or directories from being formatted during the Deno fmt run. This is useful when dealing with custom code structures that don''t conform to the default style guidelines or when certain files are still under development and should not be modified by the formatter at that time.'
        options-indent-width: '[AI] `deno fmt` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The option `--options-indent-width <width>` sets the preferred width for code indentation when using `deno fmt` to format your TypeScript or JavaScript codebase. By default, it''s set to 2 spaces. You can change this value as needed (e.g., 4 spaces, tab, etc.) to maintain a consistent and uniform indentation style within your project.'
        options-line-width: '[AI] The `deno fmt` command is a tool provided by Deno, a modern and secure TypeScript runtime, for formatting your TypeScript or JavaScript code consistently according to a widely adopted coding style. The option `--options-line-width` sets the maximum width for each line in the code. For example, `deno fmt --options-line-width 120 file.ts` would format the contents of "file.ts" with a maximum line length of 120 characters. This helps maintain a consistent and readable code style within your project.'
        options-prose-wrap: '[AI] The `deno fmt` command is a tool provided by Deno, a modern and secure TypeScript runtime. The option `--options-prose-wrap` sets the default wrapping width for prose text in your Deno code files, making it easier to maintain consistent formatting. When this option is used, Deno will automatically wrap lines of prose (strings of text that aren''t code) at the specified width. This helps ensure a clean and readable look for your code while maintaining a consistent style across your project.'
        options-single-quote: '[AI] `deno fmt` is a command-line tool from Deno, a modern JavaScript runtime. The `--options-single-quote` flag is used to configure `deno fmt` to apply single quotes style consistently across a project or codebase. This means that all strings in the codebase will be wrapped with single quotes instead of double quotes or template literals. It helps enforce a consistent coding style.'
        options-use-tabs: '[AI] `deno fmt` is a command-line tool provided by Deno, a modern and secure TypeScript runtime. The `--options-use-tabs` flag is used to configure `deno fmt` to use tabs instead of spaces for indentation when formatting Deno or TypeScript code. This flag is helpful for teams that prefer using tabs over spaces for coding consistency.'
        watch: '[AI] `deno fmt --watch` is a command provided by Deno, a modern and secure TypeScript runtime. It formats the current directory (and its subdirectories) in the Deno project according to Deno''s coding style guidelines in real-time using the ''fmt'' tool. This command keeps running and automatically formats any file changes as they occur, making your project codebase consistently formatted.'
