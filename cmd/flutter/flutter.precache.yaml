# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: precache
description: Populate the Flutter tool's cache of binary artifacts
flags:
    --fuchsia: Precache artifacts for Fuchsia development.
    --ios: Precache artifacts for iOS development.
    --linux: Precache artifacts for Linux desktop development.
    --macos: Precache artifacts for macOS desktop development.
    --no-fuchsia: Do not precache artifacts for Fuchsia development.
    --no-ios: Do not precache artifacts for iOS development.
    --no-linux: Do not precache artifacts for Linux desktop development.
    --no-macos: Do not precache artifacts for macOS desktop development.
    --no-universal: Do not precache artifacts required for any development platform.
    --no-web: Do not precache artifacts for web development.
    --no-windows: Do not precache artifacts for Windows desktop development.
    --no-winuwp: Do not precache artifacts for Windows UWP desktop development.
    --universal: Precache artifacts required for any development platform.
    --web: Precache artifacts for web development.
    --windows: Precache artifacts for Windows desktop development.
    --winuwp: Precache artifacts for Windows UWP desktop development.
    -a, --all-platforms: Precache artifacts for all host platforms.
    -f, --force: Force re-downloading of artifacts.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `flutter precache` is a command-line tool in Flutter framework that is used to preload assets and images into the application''s cache before running the app. This helps improve the performance of your app by reducing the time it takes to load assets during runtime. When you run `flutter precache`, Flutter copies all the files listed in the `flutter.pubspec.yaml` file under the `assets` and `images` directories into the cache directory, so they can be quickly accessed when the app is running.'
    flag:
        all-platforms: '[AI] The `flutter precache --all-platforms` command is a Flutter development tool used to preload application assets and code for all supported platforms (iOS, Android, web, etc.) into the local cache. This action reduces the amount of data that needs to be downloaded at runtime, resulting in faster app launch times and smoother user experience. It''s particularly useful when testing or deploying an app. The precaching process stores the assets both in the `/cache` directory under your Flutter project and on the target device or platform.'
        force: '[AI] `flutter precache --force` is a command used in Flutter development to pre-cache specified assets or all assets in an application before building or running it. The `--force` option overwrites any previously cached data, ensuring that the latest versions of assets are used. This can help reduce loading times and improve app performance by reducing network requests for assets during runtime.'
        fuchsia: '[AI] The `flutter precache` command is a development tool in the Flutter framework used to preload specific assets for faster access during app runtime. The `--fuchsia` option is specific to apps targeting the Fuchsia operating system. It instructs Flutter to precache assets that will be served from the Fuchsia asset server instead of the usual bundle file. This can improve app performance and reduce latency on Fuchsia devices by minimizing network requests for assets during app execution.'
        help: |-
            [AI] `flutter precache` is a command-line tool provided by Flutter to pre-cache specified assets for offline use in a Flutter application. The `--help` option provides detailed usage information for this command, including:

            1. Description: Pre-caches assets and files that will be used when the app is run.
            2. Usage: `flutter precache [options] <path>...`
            3. Options:
               - `--offline`: Runs in offline mode, skipping network requests.
               - `--delete`: Deletes previously cached assets and files before pre-caching new ones.
            4. Examples:
               - `flutter precache --help`: Displays this help message.
               - `flutter precache images/`: Pre-caches all the images in the "images" directory and its subdirectories.
               - `flutter precache --offline .`: Pre-caches assets for offline use without making any network requests.
        ios: '[AI] `flutter precache --ios` is a command used in Flutter development to pre-cache the specified iOS app''s resources for offline use during testing or deployment to the App Store. This improves app loading time and reduces network dependencies, ensuring a smoother user experience. The command utilizes Xcode to bundle the assets, which are then available through the `NSBundle` class in the app code.'
        linux: |-
            [AI] `flutter precache` is a command-line utility provided by the Flutter framework to preload application assets for faster access during runtime. The `--linux` option specifies that you are using a Linux operating system.

            When you run `flutter precache --linux`, it preloads all the necessary assets, images, fonts, etc., into the local cache directory (usually located in `~/.cache/flutter`) on your Linux system. This helps reduce the time taken to load these assets during the execution of your Flutter application.

            This command is useful when you have a large number of assets or when network access is slow, ensuring that your application starts faster and runs more smoothly.
        macos: '[AI] The `flutter precache --macos` command is a Flutter development tool used for caching assets and resources for a Flutter application specifically for macOS platform. This command reads all the referenced files from the current project, bundles them, and stores them in the local cache to optimize the app''s launch time and reduce network traffic during runtime on macOS systems. It helps improve overall performance by reducing the time taken to load assets when running or building the Flutter application.'
        no-fuchsia: '[AI] `flutter precache` is a command-line tool provided by Flutter to preload application assets and code into the device or emulator cache for faster startup times. The `--no-fuchsia` option restricts this operation to only non-Fuchsia (i.e., Android, iOS, Web, etc.) platforms. So when using this command `flutter precache --no-fuchsia`, you are instructing Flutter to precache assets and code for all supported platforms except Fuchsia.'
        no-ios: '[AI] `flutter precache` is a command-line tool provided by the Flutter framework for caching assets and resources for faster app start-up times and improved offline performance. The `--no-ios` option is used to exclude iOS platforms from the precache process. This means that only the Android platform''s assets will be precached, while those for iOS will not be affected. By omitting iOS in the command, you save time and resources during development when testing primarily on an Android device or emulator.'
        no-linux: '[AI] `flutter precache` is a command-line tool used in Flutter development to preload application assets into the Dart VM and the cache for faster app startup time and reduced network usage. The `--no-linux` option disables the Linux file system caching for this specific operation, meaning that Flutter will not rely on the operating system''s caching but instead handles it entirely by itself, ensuring consistent asset loading across different environments.'
        no-macos: '[AI] `flutter precache` is a command-line tool used in Flutter development to preload application assets into memory or cache for faster access during runtime. The `--no-macos` option disables the use of this command on MacOS platforms, as by default it comes with an additional feature to precache assets using macOS''s background prefetching mechanism. By excluding this option, you ensure that only Flutter''s built-in precaching mechanism is executed.'
        no-universal: '[AI] The `flutter precache` command is used to preload assets and code into the application''s cache, reducing the load time when running or deploying the app. The `--no-universal` flag disables the universal build mode for this command. In universal build mode, Flutter generates multiple binary outputs for different architectures (e.g., ARM64, x64), but it comes with a higher build size and longer build time. By using `--no-universal`, you instruct Flutter to generate only one binary output, optimizing the build process for a specific architecture while potentially increasing the app''s deployment size if run on other architectures.'
        no-web: '[AI] `flutter precache` is a command-line tool provided by Flutter, a mobile application development framework. The `--no-web` option is used to instruct the tool to only cache assets for native app platforms (Android and iOS), excluding web assets. By running `flutter precache --no-web`, you''re asking Flutter to prepare the application for faster launch by preloading and caching the required native app assets.'
        no-windows: |-
            [AI] `flutter precache` is a command-line tool provided by Flutter, a mobile application development framework. The command is used to preload assets (images, fonts, etc.) into the application's cache for faster access during runtime.

            The `--no-windows` flag restricts this operation from running on Windows platforms. It's useful when you want to run this command on other operating systems like Linux or macOS without interfering with any potential ongoing precaching processes in the Windows environment.
        no-winuwp: '[AI] The `flutter precache` command is a tool provided by the Flutter framework for caching application assets and resources for faster access during runtime. The `--no-winuwp` option specifically disables pre-caching for the Windows UWP (Universal Windows Platform) target. By using this option, you exclude the WinUWP platform from the precaching process, potentially reducing the overall build time and size of the generated bundles without affecting the performance on other supported platforms.'
        universal: '[AI] `flutter precache --universal` is a command-line utility provided by Flutter, a mobile application development framework. This command is used to preload all assets (images, fonts, etc.) that will be used in a Flutter application into the device or emulator''s cache. By doing so, the application can access these assets more quickly upon first launch or when revisiting previously loaded screens. The `--universal` flag is optional and specifies that both the web and app bundles should be preloaded with assets, making it suitable for testing and development purposes on various platforms.'
        web: '[AI] `flutter precache --web` is a command-line tool provided by Flutter, a mobile app development framework. It''s used to preload assets for a web application during the build process. When you run `flutter precache --web`, it generates a list of all the assets that will be used in the web application and saves them locally in the cache directory. This cached data is then included in the final web application bundle, allowing for faster asset loading times when users access the app. In summary, this command optimizes asset loading performance for Flutter web applications.'
        windows: '[AI] `flutter precache` is a command-line tool provided by Flutter Framework to preload assets for faster access during app execution, especially when used offline or with unstable network connections. The `--windows` option specifies that the pre-cache operation should be performed on Windows platforms. In summary, this command will precache and prepare assets for use on a Windows app built using Flutter.'
        winuwp: '[AI] `flutter precache` is a command-line tool provided by Flutter, a mobile app development framework. It''s used to preload assets and other resources that will be used in an application for faster access during runtime. The `--winuwp` flag specifically targets Windows Universal Platform (UWP) apps developed with Flutter. By using this command, developers can ensure that the required assets are precached before deployment, improving app launch time and reducing network usage on the target device.'
