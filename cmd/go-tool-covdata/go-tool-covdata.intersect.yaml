# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: intersect
description: generate intersection of two sets of data files
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -o=: Output directory to write
    -pkg=: Restrict output to package(s) matching specified package pattern
    -v=: Verbose trace output level
documentation:
    command: |-
        [AI] `go-tool-covdata intersect` is a command-line tool in Go's `govuln` and `cover` packages used to merge or intersect coverage data from multiple tests or test runs. The result is a new file containing the merged or intersected coverage data, which can be useful for comparing and combining coverage results.

        The command takes input files (generated by `go test -cover`) as arguments and writes the output to an optional output file specified by the user. For example:

        ```bash
        go-tool-covdata intersect cover1.out cover2.out > merged_coverage.out
        ```

        By merging or intersecting coverage data, you can identify common test cases that provide good coverage for multiple parts of your codebase and use this information to improve overall code quality and test coverage.
    flag:
        cpuprofile: '[AI] The command `go-tool-covdata intersect -cpuprofile` is a part of the Go programming language''s testing and coverage analysis tools. It merges and intersects two or more profile data files generated by the `pprof` tool in Go with the `-cpuprofile` flag during program execution. The resulting output provides information on the shared CPU profiling data among the input profiles, highlighting common performance issues across them. This can be useful for comparing and analyzing profiling results from different test runs or iterations of optimization efforts to gain insights into improving overall application performance.'
        hw: |-
            [AI] `go-tool-covdata intersect -hw` is a command used in Go programming language for code coverage analysis. The `go-tool-covdata` is a Go tool that processes and analyzes .gcda files generated during the compilation of Go source codes to extract code coverage data.

            The `intersect` subcommand is used to merge multiple .gcda files into one. The `-hw` option specifies that only the intersection of the functions with hits (executed lines) across all input files should be included in the output file. This means only functions that were executed in all input files will appear in the merged coverage data.
        i: '[AI] The `go-tool-covdata intersect -i` command is a part of the Go Cover toolset used for collecting and analyzing code coverage data in Go projects. This specific command performs an intersection operation on two or more coverage data files, producing a new file containing only the common lines that are covered by all input files. Intersection helps to identify the minimum set of source code lines that need testing across multiple tests or test runs.'
        memprofile: |-
            [AI] `go-tool-covdata` is a command-line tool from the Go programming language's standard library for managing and processing coverage data. The `intersect` subcommand is used to merge multiple coverage datasets into a single one, while `-memprofile` is an optional flag that merges memory profiles in addition to coverage data.

            When you run `go-tool-covdata intersect -memprofile <file1> <file2> ... <output>`, it will read and combine the given input coverage files and memory profiles, producing a new output file containing the merged results. This can be helpful when analyzing code coverage and memory usage across multiple builds or testing runs.
        memprofilerate: '[AI] `go-tool-covdata` is a command-line tool from the Go programming language''s standard library for handling code coverage data. The `intersect` subcommand compares two sets of code coverage data and produces output that represents the intersection of the two sets. The `-memprofilerate` option filters the data to only include memory profiling information, which can be useful when analyzing memory usage patterns across different runs or configurations.'
        o: '[AI] The `go-tool-cov data intersect -o` command is a part of the Go Cover tool used for measuring test coverage in Go programs. This specific command takes two or more cov.out files as input and generates an output file (specified with the `-o` flag) that contains the intersection of the coverage data from all the input files. In other words, it reports only the lines that were covered by all the tests across multiple test runs.'
        pkg: '[AI] `go-tool-covdata intersect -pkg` is a command provided by the Go toolchain to merge and intersect code coverage data from multiple tests or test runs into a single result. The `intersect` flag instructs it to only keep the intersection of covered lines, meaning only those lines that are covered in all input files will be included in the output. The `-pkg` option limits the output to the specified Go package(s), excluding any coverage data for imported packages.'
        v: '[AI] `go-tool-covdata intersect` is a command-line tool from the Go programming language''s `govendor` or `gocode` tools, used for code coverage analysis. The `intersect` subcommand compares and merges multiple coverage data files produced during testing, generating an output file that represents their intersection. This operation can help identify shared test cases or code areas with high coverage across different parts of your application. The `-v` flag increases the verbosity of the output, providing more detailed information about each step in the merging process.'
