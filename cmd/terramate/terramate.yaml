# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: terramate
description: A tool for managing terraform stacks
flags:
    --disable-check-git-uncommitted: Disable git check for uncommitted files
    --disable-check-git-untracked: Disable git check for untracked files
    --disable-checkpoint: Disable checkpoint checks for updates
    --disable-checkpoint-signature: Disable checkpoint signature
    --log-destination=: Destination of log messages
    --log-fmt=: 'Log format to use: ''console'', ''text'', or ''json'''
    --log-level=: 'Log level to use: ''disabled'', ''trace'', ''debug'', ''info'', ''warn'', ''error'', or ''fatal'''
    --no-tags*=: Filter stacks that do not have the given tags
    --quiet: Disable output
    --tags*=: 'Filter stacks by tags. Use ":" for logical AND and "," for logical OR. Example: --tags app:prod filters stacks containing tag "app" AND "prod". If multiple --tags are provided, an OR expression is created. Example: "--tags a --tags b" is the same as "--tags a,b"'
    --version: Terramate version
    -B, --git-change-base=: Git base ref for computing changes
    -C, --chdir=: Sets working directory
    -c, --changed: Filter by changed infrastructure
    -h, --help: Show context-sensitive help.
    -v, --verbose*=: Increase verboseness of output
documentation:
    command: '[AI] "Terramate" is not a standard command or tool in Unix or Linux systems. It appears to be a made-up term with no widely recognized meaning or function in computing or geospatial contexts.'
    flag:
        changed: '[AI] The `terramate --changed` command is a Terraform CLI (Command Line Interface) argument that triggers an incremental plan in Terraform. Incremental plan means that Terraform will only consider changing the resources that have been explicitly modified or depend on the changed resource, rather than re-planning the entire infrastructure. This helps save time and resources by reducing unnecessary computations during the execution of a Terraform configuration.'
        chdir: '[AI] The `terramate --chdir` command is a part of Terramate, an open-source Terragen shader plugin. The `--chdir` option is used to change the current working directory within the plugin before executing other commands or scripts. This allows you to specify a different directory as a base for relative paths used in the plugin. It helps in managing and organizing plugin files more effectively.'
        disable-check-git-uncommitted: |-
            [AI] The `--disable-check-git-uncommitted` flag for the Terraform command-line interface (CLI) tool, `terraform`, is used to disable checking for uncommitted changes in the Git repository before running Terraform commands.

            By default, Terraform checks if there are any uncommitted Git changes before executing any plans or apply actions to prevent accidental modification of infrastructure configurations. However, when this flag is set, Terraform skips the check and proceeds with the specified command regardless of the Git repository status.

            It's essential to use this flag with caution and only when necessary, as it can potentially lead to unintended modifications or data loss if used on a branch containing uncommitted changes.
        disable-check-git-untracked: '[AI] The `--disable-check-git-untracked` flag for the `terraform` command is used to disable Terriform''s built-in Git repository detection and tracking of uncommitted changes in the working directory before applying configuration changes. By disabling this check, you can use Terriform even if there are uncommitted changes in your Git repository without getting a warning or error message. This might be useful when you want to force-apply configuration changes despite having uncommitted modifications. However, it''s important to note that this could potentially lead to data loss or conflicts between your working directory and the Terraform-managed infrastructure. Use this option with caution and consider using a Git branch or other methods for managing and merging your changes instead.'
        disable-checkpoint: '[AI] The `terramate --disable-checkpoint` is a command-line argument used with Terramate, an open-source GIS processing engine. This flag disables Terramate''s checkpointing feature during the processing of geospatial tasks. Checkpointing creates automatic saves of processing progress to enable faster recovery from crashes or interruptions. Disabling this feature may lead to data loss if a task is interrupted but can result in improved processing efficiency due to reduced I/O operations.'
        disable-checkpoint-signature: '[AI] The `--disable-checkpoint-signature` flag for Terraform is used to disable verification of checksum signatures on downloaded Terraform modules and provider binaries during initialization or execution. This can be useful in specific use cases, such as when working behind a corporate proxy that modifies the checksums without notification. However, it is generally recommended to keep this feature disabled for security reasons, as checking signatures helps ensure the authenticity and integrity of the modules and providers being used.'
        git-change-base: '[AI] `terramate --git-change-base` is a command used in Terraform, an open-source infrastructure as code software tool. This command modifies the base Git branch or commit that Terraform uses when applying changes to infrastructure. The `--git-change-base` option allows users to specify a new base Git commit or branch instead of using the latest one, enabling them to apply infrastructure changes relative to a specific point in Git history. This can be useful for rolling back changes or working on feature branches without interfering with the main infrastructure.'
        help: '[AI] The `--help` option when used with the `terrmate` command displays detailed help information about the terminal emulator. It provides an overview of the available commands and their usage, along with various options that can be set to customize its behavior. This information is presented in a clear and concise format, making it easy for users to understand how to use the tool effectively.'
        log-destination: |-
            [AI] The `--log-destination` option in the Terraform command-line interface (CLI) is used to specify where Terraform should write its logs. The available destinations are:

            1. `stdout`: Outputs logs to the console, ideal for ad-hoc runs and quick checks.
            2. `stderr`: Similar to `stdout`, but outputs errors and warnings separately.
            3. `file`: Writes logs to a file. Useful for longer runs or when debugging issues.
            4. `null`: Suppresses all log output, useful for automated scripts or CI/CD pipelines.
            5. `journald` (Linux only): Writes logs to the system journal. Can be configured using the appropriate environment variables.

            The flag takes a string value as an argument that indicates the chosen log destination. For example: `terraform apply --log-destination=file:/path/to/logfile.txt`.
        log-fmt: '[AI] The `--log-fmt` option in the `terraform` command-line tool sets the log output format. The value `"json"` or `"table"` are common choices, which respectively output logs in JSON or tabular formats for easier parsing and processing by other tools. For example, using `--log-fmt=json` will produce logs in a standardized JSON format that can be easily processed with various scripting languages.'
        log-level: '[AI] The `--log-level` option in the `terramate` command relates to setting the log level for Terraform output. It specifies the minimum severity level that Terramate should print logs for. For example, using `--log-level=INFO` will display informational and higher severity (e.g., error) messages, while using `--log-level=DEBUG` will display all messages including debug messages. Other possible values include TRACE and WARN. The default log level is usually INFO.'
        no-tags: '[AI] The `terramate --no-tags` command is a flag used with Terraform, an open-source infrastructure as code software tool. This flag instructs Terraform to not create or manage any Git tags during the execution of a Terraform plan or apply. By using this flag, Terraform will only commit changes to the repository without creating or modifying any Git tags.'
        quiet: '[AI] The `terraform` command `terrfmt --quiet` is used to run Terraform with minimal output. The `--quiet` flag suppresses all non-error messages during execution, providing a quieter and more streamlined experience for users who prefer a clutter-free terminal session while managing their infrastructure configurations using Terraform.'
        tags: '[AI] The `--tags` option in the `terramate` command is used to apply specific tags to Terraform configurations. Terramate is a Terraform plugin that provides additional features and abstractions, allowing for more complex and modular Terraform code. By using the `--tags` flag, users can assign one or more metadata key-value pairs as tags to the resources being created in their configuration. This can help with organizing and filtering infrastructure based on certain labels, making it easier to manage large and complex deployments.'
        verbose: '[AI] The `terramate --verbose` command relates to Terraform, an open-source infrastructure as code software tool. The `--verbose` flag is used to increase the amount of output information produced during Terraform execution. It provides more detailed and frequent updates on the progress of Terraform operations such as plan, apply, or destroy. This can be helpful for debugging and understanding the steps Terraform takes to manage infrastructure.'
        version: '[AI] `terraform --version` is a command used in Hashicorp''s Terraform infrastructure configuration tool to display the current version of Terraform installed on your system. Running this command provides information about the major, minor, and patch versions, as well as the build number and date. This can be helpful for ensuring that you are using the latest or a specific version of Terraform for your infrastructure deployments.'
