# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bisect
description: Use binary search to find the commit that introduced a bug
group: main
flags:
    --term-bad: show term for bad/new
    --term-good: show term for good/old
documentation:
    command: '[AI] `git bisect` is a Git command used to find the commit that introduced a bug or regression in your project''s codebase. It automates the process of binary search in Git history for the commit where the issue was introduced. Once you mark a "good" and a "bad" commit, Git Bisect will automatically check out commits between those two and test each one until it finds the one that introduced the bug. This helps to quickly isolate the specific commit responsible for the regression.'
    flag:
        term-bad: '[AI] `git bisect --term-bad` is a Git command used for finding the commit that introduced a bug. The `--term-bad` option instructs Git to mark the current branch as bad, indicating the state where the bug was first noticed. This command starts an interactive rebuild process and prompts the user to specify a good (working) and a bad (broken) commit. Then Git automatically checks out the middle commits and builds them one by one, asking for feedback after each build. The user marks each checked-out commit as "good" or "bad". If marked as "bad", Git assumes that the next commit is the one introducing the bug and continues the process from there.'
        term-good: |-
            [AI] `git bisect --term-good` is a Git command used to mark a specific commit as good, or not containing the regressive change, during a bisect session. When you suspect that a particular commit introduced a bug and want to find the committing point, Git's bisect feature helps narrow down the search range by repeatedly checking commits in between the last known good commit and the commit under suspicion.

            After testing a commit, if the result is desirable (i.e., the code works correctly), you should use `git bisect good <commit>` to mark it as good. The opposite command is `git bisect bad <commit>`. In case of mistakes or typos, you can use `git bisect --term-good` or `git bisect --terminate-on-error` for the same effect â€“ to mark a commit as good and terminate the current session.
