# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pandoc
description: general markup converter
flags:
    --abbreviations=: Specifies a custom abbreviations file
    --ascii: Use only ASCII characters in output
    --bash-completion: Generate a bash completion script
    --biblatex: Use biblatex for citations in LaTeX output
    --bibliography=: Set the bibliography field in the document’s metadata
    --citation-abbreviations=: Set the citation-abbreviations field in the document’s metadata
    --citeproc=: Process the citations in the file
    --columns=: Specify length of lines in characters
    --csl=: Set the csl field in the document’s metadat
    --data-dir=: Specify the user data directory
    --default-image-extension=: Specify a default extension to use when image paths/URLs have no extension
    --dpi=: Specify the default dpi value for conversion
    --dump-args: Print information about command-line arguments to stdout
    --email-obfuscation=: Specify a method for obfuscating mailto
    --eol=: Manually specify line endings
    --epub-chapter-level=: Specify the heading level at which to split the EPUB into separate files
    --epub-cover-image=: Use the specified image as the EPUB cover
    --epub-embed-font=: Embed the specified font in the EPUB
    --epub-metadata=: Look in the specified XML file for metadata for the EPUB
    --epub-subdirectory=: Specify the subdirectory that is to hold the EPUB-specific  contents
    --extract-media=: Extract images and other media contained in or linked from the source document
    --fail-if-warnings: Exit with error status if there are any warnings
    --file-scope: Parse each file individually before combining for multifile documents
    --gladtex: Enclose TeX math in <eq> tags in HTML output
    --highlight-style=: Specifies the coloring style to be used in highlighted source code
    --html-q-tags: Use <q> tags for quotes in HTML
    --id-prefix=: Specify a prefix to be added to all identifiers and internal links
    --ignore-args: Ignore command-line arguments
    --incremental=: Make list items in slide shows display incrementally
    --indented-code-classes=: Specify classes to use for indented code blocks
    --ipynb-output=: Determines how ipynb output cells are treated
    --katex=: Use  KaTeX to display embedded TeX math in HTML output
    --list-extensions=: List  supported  extensions for FORMAT
    --list-highlight-languages: List supported languages for syntax highlighting
    --list-highlight-styles: List supported styles for syntax highlighting
    --list-input-formats: List supported input formats
    --list-output-formats: List supported output formats
    --listings: Use the listings package for LaTeX code blocks
    --log=: Write log messages in machine-readable JSON format to FILE
    --markdown-headings=: Specify heading style
    --mathjax=: Use  MathJax to display embedded TeX math in HTML output
    --mathml: Convert TeX math to MathML
    --metadata-file=: Read metadata from the supplied YAML (or JSON) file
    --natbib: Use natbib for citations in LaTeX output
    --no-check-certificate: Disable the certificate verification to allow access to unsecure HTTP resources
    --no-highlight: Disables syntax highlighting for code blocks and inlines
    --number-offset=: Offset for section headings in HTML output
    --number-sections=: Number section headings
    --pdf-engine-opt=: Use the given string as a command-line argument to the pdf-engine
    --pdf-engine=: Use the specified engine when producing PDF output
    --print-default-data-file=: Print a system default data file
    --print-highlight-style=: ""
    --quiet: Suppress warning messages.
    --reference-doc=: Use the specified file as a style reference
    --reference-links: Use reference-style links
    --reference-location=: Specify whether footnotes are placed
    --request-header=: Set the request header NAME to the value VAL when making HTTP requests
    --resource-path=: List of paths to search for images and other resources
    --section-divs: Wrap sections in <section> tags
    --self-contained: Produce a standalone HTML file with no external dependencies
    --shift-heading-level-by=: Shift heading levels by a positive or negative integer
    --slide-level=: Specifies that headings with the specified level create slides
    --standalone=: Produce  output with an appropriate header and footer
    --strip-comments: Strip out HTML comments in the Markdown or Textile source
    --syntax-definition=: Instructs pandoc to load a KDE XML syntax definition file
    --tab-stop=: Specify the number of spaces per tab (default is 4)
    --table-of-contents: Include  an automatically generated table of contents
    --template=: Use the specified file as a custom template for the  generated  document
    --toc: Include  an automatically generated table of contents
    --toc-depth=: Specify the number of section levels to include in the table of  contents
    --top-level-division=: Treat top-level headings as the given division type
    --track-changes=: Specifies what to do with insertions, deletions, and comments
    --verbose: Give verbose debugging output.
    --webtex=: Convert TeX formulas to <img> tags
    --wrap=: Determine how text is wrapped in the output
    -A, --include-after-body=: Include contents of FILE after body
    -B, --include-before-body=: Include contents of FILE before body
    -D, --print-default-template=: Print the system default template for an output FORMAT
    -F, --filter=: Specify  an  executable  to  be used as a filter transforming the pandoc AST
    -H, --include-in-header=: Include contents of FILE in header
    -L, --lua-filter=: Transform the document in a similar fashion as JSON filters
    -d, --defaults=: Specify a set of default option settings
    -f, --from=: Specify input format
    -h, --help: Show usage message
    -o, --output=: Write output to FILE instead of stdout
    -p, --preserve-tabs: Preserve  tabs  instead  of  converting them to spaces
    -r, --read=: Specify input format
    -t, --to=: Specify output format
    -v, --version: Print version
    -w, --write=: Specify output format
documentation:
    command: '[AI] `pandoc` is a versatile document converter that can translate files between various markup and rich text formats, such as Markdown, reStructuredText, HTML, LaTeX, and many others. It''s often used for converting files to create dynamic documents, slideshows, or presentations while maintaining formatting and structure. The command is typically followed by the input file, format, and output file specifications, e.g., `pandoc input.md -o output.pdf`.'
    flag:
        abbreviations: '[AI] The `--abbreviations` flag in Pandoc is used to specify a file containing user-defined abbreviations for use with Markdown or reStructuredText documents. This can be useful for defining commonly used acronyms or other shorthand notations within your document. When the flag is used, Pandoc will read and apply the specified abbreviation file during conversion to various output formats.'
        ascii: '[AI] `pandoc` is a universal document converter that can read from and write to various formats. The option `--ascii` is used when you want to convert your document into plain ASCII text format, which means removing all formatting and keeping only the raw text content. It is also known as "plain text" or "text only" output format.'
        bash-completion: '[AI] `pandoc --bash-completion` is a command used in Pandoc, a universal document converter, to enable Bash autocompletion for Pandoc-related commands and options. This feature makes interacting with Pandoc in the terminal more efficient by providing suggestions as you type, reducing the chances of typos and improving overall productivity.'
        biblatex: '[AI] `pandoc` is a versatile document converter supporting various formats. The option `--biblatex` specifies that BibTeX files are used for handling citations and bibliography in LaTeX documents when converting between formats. It instructs Pandoc to process these files accordingly and generate properly formatted citations and a bibliography in the output document.'
        bibliography: |-
            [AI] `pandoc` is a document converter that supports various markup languages and formats. The `--bibliography` option is used to specify a file containing BibTeX citations and bibliographic data, which Pandoc uses to generate the bibliography for a LaTeX output or Citations and References sections for other output formats. For example:

            ```bash
            pandoc input.md --bibliography=bibfile.bib -o output.pdf
            ```

            This command converts `input.md` markdown file to a PDF document using LaTeX format and uses the bibliographic data from `bibfile.bib`.
        citation-abbreviations: '[AI] `pandoc --citation-abbreviations` is a command-line option used with Pandoc, a universal document converter. This option enables the usage of custom citation abbreviations in your markup files. With this setting, you can define specific abbreviations for various citation styles, making it easier to write citations and references in your document. The actual abbreviations are defined using BibTeX-style `\bibitem` commands or YAML front matter.'
        citeproc: '[AI] `pandoc --citeproc` is a command used with Pandoc, a document converter, to enable automated bibliography and citation processing using CiteProc, a BibTeX-like citation engine. This command integrates Pandoc with CiteProc to produce correctly formatted citations and bibliographies in various citation styles based on the provided `bib` files.'
        columns: '[AI] `pandoc --columns` is a command-line option for Pandoc, a universal document converter. This option sets the maximum output column width. By default, Pandoc does not wrap lines when converting text between formats, which can result in wide tables or code listings extending beyond the terminal or PDF page margins. The `--columns` flag specifies the maximum width (in characters) for output lines, allowing you to control line wrapping and prevent truncation of content.'
        csl: '[AI] `pandoc` is a document converter that can translate files between various markup formats, such as Markdown, LaTeX, and HTML. The `--csl` option is used to specify a Citation Style Language (CSL) file when generating citations and bibliographies in pandoc. This allows users to customize the appearance of their citations and bibliographies according to specific citation styles, such as APA, MLA, or Chicago. The CSL file should be provided as an argument following `--csl`, for example: `pandoc document.md --csl my_csl_file.csl -o output.pdf`.'
        data-dir: '[AI] `pandoc --data-dir` is a command-line option used with Pandoc, a popular document converter. This option specifies a directory that will be searched for custom templates, filters, and other data files, allowing users to customize the output of their documents without modifying the original content.'
        default-image-extension: '[AI] The `--default-image-extension` option in Pandoc is used to specify the default image file extension when converting markdown or reStructuredText files that contain inline images, into other formats like PDF, HTML or EPUB. By default, Pandoc infers image extensions based on the file name. However, if you want to enforce a specific image extension (for instance, .png), you can set this option while calling Pandoc: `pandoc input.md -s --default-image-extension=.png output.pdf`'
        defaults: |-
            [AI] `pandoc --defaults` is a command used with Pandoc, a universal document converter. This command sets default values for various options that can be overridden in individual documents. The `--defaults` option takes a YAML or JSON file as an argument where each key-value pair represents a default option. For instance, you could create a file called `mydefaults.yml` with the following content:

            ```yaml
            --highlight: hlp-css
            --variable.author: "Your Name"
            ```

            Then run the command as follows:

            ```bash
            pandoc --defaults=mydefaults.yml input.md -o output.pdf
            ```

            This sets the `highlight` and `author` options to their respective values for all documents processed with this command, unless otherwise overridden in individual documents.
        dpi: '[AI] The `--dpi` option in Pandoc is used to specify the dots per inch (dpi) for output devices that support this setting, such as PostScript or PDF printers. A higher dpi value results in a greater resolution and more detailed output. By default, Pandoc sets the dpi to 72 for HTML, Markdown, and SVG outputs, and to 96 for EPUB outputs.'
        dump-args: '[AI] `pandoc --dump-args` is a command-line option for Pandoc, a universal document converter. It''s used to output a list of arguments that were passed to a filter or custom pandoc reader or writer when using those features in a pandoc document. This can be helpful for debugging and understanding the specific options being applied to your document during conversion.'
        email-obfuscation: '[AI] `pandoc` is a universal document converter that can read from and write to various popular formats. The `--email-obfuscation` option is used for obfuscating email addresses in the output of converted documents to prevent automated email address harvesting. When enabled, this option replaces email addresses with hidden images or JavaScript snippets that reveal the address only when interactively clicked. This measure helps protect email addresses from being scraped by spambots and reduces unsolicited emails.'
        eol: '[AI] The `--eol` option in Pandoc is used to specify the end-of-line character sequence for the output file. It can be set to `native`, which means using the native line ending of the output format, or to a specific sequence like `\r\n` (CARRIAGE RETURN + LINE FEED) for other systems. This option is particularly useful when converting files between different operating systems or text editors that may use different line endings.'
        epub-chapter-level: |-
            [AI] `pandoc` is a universal document converter that can convert files between various formats, including EPUB. The `--epub-chapter-level` option is used when converting to EPUB format to specify the level of headings in a document considered as chapter titles in the output EPUB book.

            By default, Pandoc considers headings with levels 1 and 2 as chapters in an EPUB file. However, you can change this behavior by setting `--epub-chapter-level` to any valid heading level from 1 to 6. For example, `pandoc input.md --from markdown --to epub --epub-chapter-level 3` would consider headings with level 3 and above as chapters in the output EPUB file.
        epub-cover-image: '[AI] The `--epub-cover-image` option in Pandoc is used to specify a file containing an image that will be set as the cover page for an output EPUB file. When using this command-line argument, Pandoc will include the specified image file as the first page of the EPUB document, creating an attractive and eye-catching visual representation for the eBook. This can enhance the user experience by providing a clear and engaging introduction to the content within the EPUB file.'
        epub-embed-font: '[AI] The `--epub-embed-font` option in Pandoc is used when converting documents to EPUB format. It instructs Pandoc to embed fonts within the EPUB file instead of relying on external sources. This ensures that the text appears correctly in all readers, regardless of whether the specified fonts are installed on the device. Embedding fonts makes the EPUB file larger but can improve the portability and accessibility of the document.'
        epub-metadata: '[AI] `pandoc --epub` is a command used in Pandoc, a universal document converter, to create an EPUB e-book from various source formats. The `--epub-metadata` option is used to specify metadata for the EPUB file. Metadata includes author and title information, as well as other descriptive data that can be displayed by e-readers and other software when browsing or organizing the EPUB library. This information makes the e-book more discoverable and accessible to users.'
        epub-subdirectory: |-
            [AI] `pandoc` is a universal document converter that can convert files between various formats, including EPUB. The `--epub-subdirectory` option is used when converting a file to EPUB format and specifying an output directory for the EPUB files.

            Instead of placing all EPUB files in the current directory, this option creates an additional subdirectory named "_epub" within the specified output directory. All generated EPUB files will be saved in this subdirectory. This can help keep the output directory organized when dealing with multiple EPUB conversions.
        extract-media: '[AI] `pandoc` is a versatile document converter that can convert files between various formats. The `--extract-media` option is used to extract embedded media files from a source document and save them in the output directory, along with the generated document. This allows for easy inclusion of multimedia content in the converted document without relying on external links or file embeds.'
        fail-if-warnings: '[AI] The `--fail-if-warnings` option in Pandoc is used to cause Pandoc to exit with an error status if it encounters any warnings during the conversion process. By default, Pandoc will continue processing and output a document even if there are warnings. Using this option ensures that only error-free outputs are generated.'
        file-scope: '[AI] The `--file-scope` flag in Pandoc is used to apply conversions and transformations only to the current input or output file, and not to any embedded Markdown or other content within that file. This means that any headers, lists, tables, or other structures defined within the file will be treated as standalone entities and not affected by previous or subsequent files processed by Pandoc. It can be useful for preserving the formatting and structure of individual documents when converting between different formats.'
        filter: |-
            [AI] `pandoc` is a universal document converter that can read from and write to various formats such as Markdown, HTML, LaTeX, etc. The `--filter` option is used to apply custom filters or transforms to the input or output documents.

            Filters are small programs or scripts written in Haskell or any other language that can be integrated with Pandoc to extend its functionality. They can perform various tasks like adding metadata, processing images, converting math equations, etc.

            The `--filter` option takes a path to the filter file as an argument, which is then executed during the conversion process. For instance, if you have a filter named "myfilter.hs" that adds custom bibliography entries to a Latex document, you would use it as follows:

            ```bash
            pandoc input.md -s --filter myfilter.hs -o output.pdf
            ```

            This command converts the Markdown file `input.md` to a LaTeX document (`output.pdf`) and applies the filter `myfilter.hs` during the conversion process. The resulting document will have the custom bibliography entries added by the filter.
        from: '[AI] `pandoc --from` is a command-line option for Pandoc, a universal document converter. It specifies the input file format of the source document to be converted. For example, `--from markdown` indicates that the input is in Markdown format and should be converted accordingly. Other common values include `html`, `latex`, `rtf`, and `text`. The correct choice of input format ensures accurate conversion of your document to the desired output format.'
        gladtex: '[AI] `pandoc --gladtex` is a command-line option used with Pandoc, a universal document converter. This option enables the generation of LaTeX code within Pandoc outputs for inclusion of math expressions. With this flag, MathJax or other JavaScript display engines can be used to render mathematical notation in HTML output. It bridges the gap between rich text formats and typeset documents with complex mathematical equations.'
        help: '[AI] `pandoc --help` is a command used with the Pandoc document converter. The help option provides information about how to use Pandoc, including a list of input and output formats it supports, as well as various options for customizing the conversion process. For example, you can specify the input file format (e.g., `--from markdown`), output format (e.g., `--to html`), or enable features like metadata processing (`--metadata-file myfile.yaml`) or math rendering (`--filter pandoc-citeproc --biblatex mybibfile.bib`). The output of `pandoc --help` is detailed and comprehensive, making it an essential resource for using Pandoc effectively.'
        highlight-style: '[AI] `pandoc` is a universal document converter that can convert files between various formats like Markdown, HTML, LaTeX, and many others. The `--highlight-style` option in `pandoc` is used to specify the syntax highlighting style for code blocks in the output document. Different styles like `pygments`, `espresso`, `haskell`, etc., are available to customize the appearance of code blocks in the generated document.'
        html-q-tags: '[AI] `pandoc --html-q-tags` is a command-line option for Pandoc, a universal document converter. It instructs Pandoc to enable the use of HTML character entities (represented by the "q-tags" acronym) in the generated HTML output, in addition to their Unicode equivalents. This can be useful when writing math or technical content where it''s more convenient to use named entities rather than typing the corresponding characters directly.'
        id-prefix: '[AI] `pandoc` is a versatile document converter that can convert files between various formats. The option `--id-prefix` is used to specify a prefix for automatic identification of output file names. When using `pandoc` to convert multiple input files into output files, it automatically generates file names based on the input files'' names by default. However, with `--id-prefix`, you can add a custom prefix to the generated filenames to maintain consistency or organization in your output files. For instance, if you provide the command `pandoc --id-prefix="report_"`, all automatically named output files will start with "report\_".'
        ignore-args: '[AI] `pandoc` is a universal document converter that can read from various formats and write to different ones. The option `--ignore-args` is used when invoking pandoc from another script or automation tool, and it instructs pandoc to ignore any arguments given after the conversion options. This means that only the input file format, output file format, and any conversion options should be provided in the command, while other arguments will be ignored by pandoc.'
        include-after-body: '[AI] `pandoc` is a universal document converter that can read from various formats and convert to multiple output formats. The `--include-after-body` flag is an option used when generating HTML output. With this flag, extra content (HTML or Markdown) can be provided after the document body in the input file, which will be included verbatim in the generated HTML output. This is useful for adding custom JavaScript, CSS, or other HTML elements not handled by Pandoc''s default templates or extensions.'
        include-before-body: '[AI] The `--include-before-body` option in Pandoc is used to specify a file containing extra content that will be included before the document body when generating output. This can be useful for adding custom header or metadata information, such as HTML tags or CSS stylesheets, before the document content begins. The specified file should be an absolute or relative path to a text file.'
        include-in-header: |-
            [AI] `pandoc` is a document converter that can convert files between various formats such as Markdown, HTML, LaTeX, and more. The `--include-in-header` option is used to specify one or more files containing headers, footers, or other content that should be included at the beginning of the output document. This is useful for adding custom stylesheets, scripts, or metadata to the output document. For example:

            ```bash
            pandoc input.md --include-in-header=styles.css --include-in-header=metadata.yml -o output.html
            ```

            This command converts `input.md` to HTML with the contents of `styles.css` and `metadata.yml` included at the beginning of the generated HTML file.
        incremental: '[AI] The `--incremental` flag in Pandoc is used to generate incrementally built slide presentations. It produces output files with the `.html` or `.md` extension, which can be opened in a web browser to view the slides, one at a time. When presented this way, new content is revealed as the user advances through the slides, making it ideal for live talks where you want to keep your audience engaged and focused on the current topic.'
        indented-code-classes: |-
            [AI] `pandoc` is a universal document converter that can read from various formats and convert to several other formats. The `--indented-code-classes` option is used to control the indentation style for code blocks in the output document when using certain markup languages like Markdown or reStructuredText.

            With this flag, you can customize how code blocks are indented by assigning classes with specific indentation rules to them. For instance, you might want to use different indentation styles for various programming languages or syntax highlighting engines. The indentation classes are defined using CSS-like rules and applied to the `pre` HTML elements within the document.

            In summary, the `--indented-code-classes` option in `pandoc` lets you customize code block indentation styles in your output document for specific markup languages.
        ipynb-output: '[AI] `pandoc --ipynb-output` is a command-line option for Pandoc, a versatile document converter. This option instructs Pandoc to output an IPython Notebook file instead of the default format when converting source files. IPython Notebook is a popular interactive computing environment for Jupyter notebooks, which supports code execution, rich media, and various types of dynamic outputs in text-based as well as graphical formats. Therefore, using `--ipynb-output` allows users to convert their documents into interactive and reproducible IPython Notebooks.'
        katex: '[AI] `pandoc --katex` is a command used with the Pandoc document converter. It enables the rendering of LaTeX math expressions within Markdown or reStructuredText documents. The `--katex` flag activates the use of KaTeX, an open-source typesetting engine for math, to render these expressions while converting the document to other formats such as PDF, HTML, or EPUB.'
        list-extensions: '[AI] `pandoc --list-extensions` is a command used in Pandoc, a universal document converter. This command displays a list of built-in extensions supported by Pandoc for markup languages like Markdown or ReStructuredText. Extensions modify the parsing and processing rules of the input documents, adding new features like definitions lists, footnotes, or math equations. By using this command, users can understand which built-in features are available in their Pandoc installation without having to refer to extensive documentation.'
        list-highlight-languages: '[AI] `pandoc --list-highlight-languages` is a command used in Pandoc, a universal document converter. This specific command returns a list of all available highlighting languages supported by Pandoc for syntax highlighting in source code blocks within the generated documents. These languages include popular options like Python, Java, JavaScript, CSS, and many others. This feature allows developers and writers to maintain consistent code snippets across various programming languages when working on documentation or technical content.'
        list-highlight-styles: '[AI] `pandoc --list-highlight-styles` is a command used with Pandoc, a universal document converter. This specific command displays a list of available highlighting styles for source code blocks in markup languages such as HTML, LaTeX, and Markdown. These styles define how syntax-highlighted code appears visually, impacting readability and aesthetics. By providing this list, users can choose the desired style when converting their documents between various formats.'
        list-input-formats: '[AI] `pandoc` is a versatile document converter that supports various input and output formats. The command `pandoc --list-input-formats` displays a list of all available input formats recognized by Pandoc, along with their extensions or mime types. This can be helpful when you want to check which formats Pandoc can read from before converting your document into another format.'
        list-output-formats: '[AI] `pandoc` is a versatile document converter that can convert files between various formats, such as Markdown to PDF or HTML. The command `pandoc --list-output-formats` simply lists all the supported output formats by Pandoc. This can be useful when you want to know which formats are available for conversion without having to refer to the documentation each time.'
        listings: '[AI] The `--listings` option in Pandoc is used to enable listing output in LaTeX, Beamer, or Slidy presentations, markdown documents, and HTML. It adds numbering or labeling and line numbers for lists (code blocks, listings, and tables) in the generated output. This makes it easier to refer back to specific lines of code when reading the document.'
        log: '[AI] `pandoc` is a universal document converter that can read from various formats and write to different ones. The `--log` option in `pandoc` is used to specify a file where the application will output verbose logging information during the conversion process. This can be helpful for troubleshooting, understanding what''s happening under the hood, or tracking down potential errors. The log file contains detailed information about the input and output formats, as well as any filters or transformations applied to the document.'
        lua-filter: '[AI] `pandoc --lua-filter` is a command-line option in Pandoc, a document converter, that allows users to apply custom Lua filters during the conversion process. The filter is a Lua script file that gets executed during the conversion, enabling users to extend Pandoc''s functionality by adding custom transformations or data processing. This feature is particularly useful when dealing with non-standard input formats or customizing output generation.'
        markdown-headings: '[AI] `pandoc --markdown-headings` is a command used in Pandoc, a universal document converter, to process Markdown files with specific handling for headings. The `--markdown-headings` flag enables Pandoc to automatically identify and convert Markdown-formatted headers into the appropriate structured HTML or other output formats based on header levels (h1 through h6). This ensures consistent formatting and proper rendering of headings in the final document.'
        mathjax: '[AI] `pandoc --mathjax` is a command used with Pandoc, a universal document converter, to enable rendering of mathematical equations using MathJax, a JavaScript display engine for mathematics. When used in a Pandoc compilation process, this option ensures that MathJax library is included in the output file, usually an HTML or LaTeX document, allowing for proper rendering and display of math expressions written in TeX or MathML format within the document.'
        mathml: '[AI] `pandoc --mathml` is a command-line option for Pandoc, a universal document converter. It enables the output of MathML in documents that contain mathematical equations written using Markdown or LaTeX syntax. MathML is an XML-based markup language for describing mathematical notation and can be rendered by assistive technologies or converted to other formats like SVG or bitmaps for use on the web.'
        metadata-file: |-
            [AI] The `pandoc` command with the option `--metadata-file` allows you to provide a separate file containing metadata (data about data) that will be included in the output document. This is useful when you have information that needs to be included in the final document but doesn't fit naturally within the content of the document itself. The metadata file can contain key-value pairs and can be written in various formats, such as YAML or JSON. For example:

            ```bash
            pandoc input.md --metadata-file=metadata.yaml -o output.pdf
            ```

            In this command, `input.md` is the main document, and `metadata.yaml` contains any additional data you'd like to include in the final output. The metadata file can be used to specify things like document title, author information, or custom document properties for various output formats.
        natbib: '[AI] `pandoc --natbib` is a command used with Pandoc, a document converter, to enable the use of the Natural Language and BibTeX systems for handling citations and bibliographies in LaTeX documents when converting between formats. This flag ensures that Pandoc utilizes these specific systems during the conversion process, preserving the formatting and functionality of citations and bibliographies.'
        no-check-certificate: '[AI] `pandoc --no-check-certificate` is a command-line option for Pandoc, a popular document converter. This option disables SSL certificate validation during HTTPS connections when fetching remote content (such as images or references) for your document. Using this flag bypasses the usual security checks, potentially exposing you to man-in-the-middle attacks or other security risks. It''s recommended to only use this option in trusted environments or when necessary for specific workflows.'
        no-highlight: '[AI] The `pandoc` command with the option `--no-highlight` is used to disable the rendering of code blocks and inline code snippets with syntax highlighting in the output document. This can be useful when the source code or the desired syntax highlighter is not available, or when the default syntax highlighting scheme is not preferred. The flag ensures that the raw source code is preserved in the output format instead.'
        number-offset: '[AI] `pandoc` is a document converter that can translate texts between various formats. The option `--number-offset` is used to adjust the starting number for lists and figures in the output document. For example, if you have a list or figure with the number 1 in your source document, but want it to be labeled as 2 in the output, you can use `--number-offset=1`. This way, all subsequent numbers will also increase by one. It''s particularly useful when combining multiple documents and maintaining consistent numbering.'
        number-sections: |-
            [AI] `pandoc` is a universal document converter that can read from and write to various formats, such as Markdown, HTML, LaTeX, and RTF. The option `--number-sections` is used when converting files written in markup languages like Markdown or reStructuredText, which by default do not number sections automatically.

            When you use the command `pandoc input_file.md -s --number-sections output_file.pdf`, it tells Pandoc to produce a PDF document with section numbers added to the headers of each top-level section in the source file. This makes the resulting document easier to navigate and reference, especially for longer documents.
        output: '[AI] The `--output` option in Pandoc is used to specify the output file name or destination for the generated document. It takes a string argument, which can be an absolute or relative file path, or a URL for saving the output as a specific format on the web. By default, Pandoc saves the output to a file named "output.html", "output.pdf", or the format-appropriate default name depending on the input and output formats used.'
        pdf-engine: '[AI] The `--pdf-engine` option in Pandoc is used to specify which PDF engine should be employed when converting markdown or other sources into a PDF document using Pandoc. This option allows users to choose between various back-end engines like `mupdf`, `xelatex`, `lualatex`, `hugopdf`, and others, depending on the specific system and desired features for the output PDF file.'
        pdf-engine-opt: '[AI] `pandoc --pdf-engine-opt` is a command line option for Pandoc, a versatile document converter. This option allows users to pass additional options directly to the chosen PDF engine (such as LaTeX or Xelatex) when generating PDF output from other formats like Markdown or RST. The goal is to customize and fine-tune the PDF generation process based on specific requirements. For instance, if a complex LaTeX project needs additional compilation flags, one could use `--pdf-engine-opt="--shell-escape"` to enable shell escapes in the LaTeX engine.'
        preserve-tabs: '[AI] The `pandoc` command with the option `--preserve-tabs` instructs Pandoc, a document converter, to keep tab characters in the output format instead of converting them into spaces. This is useful when preserving the original formatting, especially for code blocks or indentation in specific formats like Markdown or RST.'
        print-default-data-file: '[AI] The `pandoc` command with the option `--print-default-data-file` instructs Pandoc, a document converter, to print the path of its default data file (also known as template or filter files) instead of actually applying them during conversion. This can be useful for determining the location of these files in case they need to be customized or used separately from the main document conversion process.'
        print-default-template: '[AI] `pandoc --print-default-template` is a command used in Pandoc, a versatile document converter. This specific command displays the default template file that Pandoc uses to generate PDF output from Markdown or other formats. The template contains LaTeX code defining the structure and appearance of the resulting PDF document, such as headers, footers, page layout, etc. Using this command provides insight into the customization possibilities for generating custom PDF outputs using Pandoc.'
        print-highlight-style: '[AI] `pandoc --print-highlight-style` is a command line option for Pandoc, a document converter. It specifies the highlighting style for source code blocks in the output document. Commonly used values are "pygments", "hcjs", or none (no highlighting). The choice of style depends on your preferred styling engine and the target format of your document.'
        quiet: '[AI] `pandoc --quiet` is a command-line option for the Pandoc document converter. It instructs Pandoc to run in quiet mode, which means it will produce only the minimum amount of output during the conversion process. This can be useful when automating conversions or running Pandoc as part of a larger workflow where excessive output might interfere or cause confusion.'
        read: '[AI] `pandoc --read` is a command used in Pandoc, a universal document converter. This command specifies the input format of the source file that will be converted. For example, if your input file is in Markdown format, you would use `--read markdown`. Pandoc supports various input formats such as Markdown, reStructuredText, HTML, and many others. The conversion process begins by reading the input file in its original format using this command.'
        reference-doc: '[AI] `pandoc` is a versatile document converter that can translate texts between various markup and rich text formats. The command `pandoc --reference-doc <file>` instructs Pandoc to use the specified file as an external reference document when generating citations and bibliographies. This option is particularly useful when writing documents that include multiple sources, as it allows keeping the bibliographic data in a separate file instead of embedding it within the main text.'
        reference-links: '[AI] `pandoc` is a popular document converter that can translate files between various markup languages and formats, including HTML, LaTeX, Markdown, and RTF. The `--reference-links` option is used when converting Markdown or reStructuredText documents to HTML format. With this flag enabled, Pandoc will convert reference-style links (i.e., footnotes or endnotes) into linked references in the output HTML document. These references typically appear as numbered or lettered citations in the text and are defined elsewhere in the document using a label. When clicked, these references take readers to the corresponding location in the document where the source of the information is discussed. This feature facilitates creating well-documented articles and reports with proper citation information.'
        reference-location: '[AI] The `--reference-location` option in Pandoc is used to specify where references are located within a document, either as footnotes or as numbered sections at the end of the document. By default, Pandoc sets references to be footnotes, but with this option, you can change that behavior and have references output as end notes instead. This can be useful when working with documents that adhere to specific formatting styles.'
        request-header: '[AI] `pandoc` is a universal document converter that can read from various source formats and convert to multiple output formats. The `--request-header` option is used to specify custom HTTP headers for outgoing requests when Pandoc accesses remote content, such as images or templates, during the conversion process. This option allows users to add metadata or authentication tokens to the request, enhancing security or providing additional information to the server.'
        resource-path: '[AI] `pandoc` is a versatile document converter that supports various input and output formats. The `--resource-path` option is used to specify a directory or list of directories where `pandoc` should look for external resources such as images, templates, and custom stylesheets, when processing a document. This helps ensure that these files are accessible during conversion and can prevent errors due to missing resources. The path can be specified as an absolute or relative location and can contain multiple directories separated by colons (:`:`) on Unix-based systems or semicolons (`;`) on Windows.'
        section-divs: '[AI] `pandoc --section-divs` is a command-line option for Pandoc, a universal document converter. This flag instructs Pandoc to use HTML `<div>` elements instead of `<section>` elements to mark up document sections during conversion. Using `<div>` elements allows for greater flexibility in styling and structuring the output document compared to using `<section>` elements, which have more specific semantic meaning.'
        self-contained: '[AI] The `--self-contained` option in Pandoc is used to generate output files that include all necessary embedded resources, such as images or embedded LaTeX documents, instead of referencing them externally. This results in a standalone document that can be easily shared without requiring additional files. The generated file will have an expanded size due to the inclusion of these resources but ensures the document''s portability and accessibility in different environments.'
        shift-heading-level-by: '[AI] The `--shift-heading-level-by` option in Pandoc is used to shift the heading levels in a Markdown or reStructuredText document up or down by one level. This can be useful when converting between different document formats or when working with nested headings. For example, if you have a Markdown file with three levels of headings and you want to convert it to HTML, but your HTML template uses only two levels of headings, you can use `--shift-heading-level-by=1` to reduce the number of heading levels in the output by one. Similarly, if you are working with nested headings in Markdown and want to maintain the hierarchy when converting to another format, you can use `--shift-heading-level-by=-1` to keep the nested structure intact.'
        slide-level: '[AI] The `--slide-level` option in Pandoc is used to specify the level of Markdown slides for output formats that support slide presentations, such as HTML with Reveal.js or PDF. The valid levels are: `1`, `2`, or `3`, indicating increasing depths of sections per slide. For example, using `--slide-level 2` will produce two levels of headings per slide. By default, Pandoc sets this option to `1`.'
        standalone: '[AI] `pandoc --standalone` is a command-line option used with Pandoc, a universal document converter. This option instructs Pandoc to produce output that includes only the generated content, without any input formatting or additional markup from the source document. In other words, it generates "self-contained" documents with embedded images, stylesheets, and other resources, making them ready for distribution in various formats like HTML, PDF, or EPUB.'
        strip-comments: '[AI] The `pandoc` command with the option `--strip-comments` is used to remove all commentary and metadata from input files before converting the content into a different format. This is particularly useful when working with Markdown or reStructuredText files, where comments and front matter might not be desired in the output format. For instance, if you want to convert a markdown file to PDF, HTML or RTF and want to discard all comments, this command comes in handy. Remember that this action is irreversible, so use it with caution.'
        syntax-definition: |-
            [AI] `pandoc` is a versatile document converter that supports various markup languages and formats. The `--syntax-definition` option is used to define custom reader or writer components for extending Pandoc's capabilities.

            This command line argument allows you to specify a file containing metadata about a new reader or writer, including its name, file extension, mime type, and the corresponding reader/writer functions written in Haskell or Lua. This way, users can create their own custom markup languages or formats that Pandoc can handle.
        tab-stop: |-
            [AI] `pandoc` is a versatile document converter that can translate files between various markup and rich text formats, such as Markdown, HTML, LaTeX, and more. The `--tab-stop` option is a formatting flag used with pandoc to set the number of units a tab represents in the output document.

            By default, pandoc uses a tab stop width of 8 units (spaces). However, you can customize this by using the `--tab-stop=N` option where N is an integer representing the desired tab size in units. For example, `pandoc input.md -s --tab-stop=4 output.html` would produce an HTML file with a tab stop width of 4 units (spaces).
        table-of-contents: '[AI] `pandoc --table-of-contents` is a command-line option for Pandoc, a universal document converter. It generates a table of contents from Markdown or reStructuredText documents, which can be automatically numbered and linked to the corresponding headings in the output file. This makes navigation easier and more accessible for readers.'
        template: '[AI] `pandoc` is a universal document converter that can translate texts between various formats. The `--template` option in `pandoc` is used to specify a custom template file for output document formatting. This allows users to define their own layout, including header and footer content, section titles, and other stylistic elements, using Markdown or other supported format syntax. By providing a custom template, users have greater control over the appearance of their generated documents.'
        to: '[AI] `pandoc` is a universal document converter. The option `--to` specifies the output format for the conversion process. For example, if you have an Markdown (`.md`) file and want to convert it to PDF format, you would use the command: `pandoc input.md --to pdf -o output.pdf`. Here, `input.md` is the source file, `--to pdf` instructs Pandoc to convert the output to a PDF document, and `output.pdf` is the name of the resulting file. Other common output formats include HTML (`.html`, `.htm`), EPUB (`.epub`), RTF (`.rtf`), and plain text (`.txt`).'
        toc: '[AI] `pandoc` is a universal document converter that can read from and write to various formats. The option `--toc` is used when converting files with `pandoc`. It generates an automatically produced table of contents (TOC) at the beginning of the output file based on headings in the input document. This makes navigating long documents easier, especially for electronic publications.'
        toc-depth: '[AI] `pandoc --toc-depth` is a command-line option for Pandoc, a universal document converter. It sets the maximum nesting level for headers in the Table of Contents (ToC) that will be generated when using formats like Markdown or reStructuredText. The depth level can be an integer value between 1 and 6, where 1 is the shallowest heading and 6 is the deepest. For example, `--toc-depth 3` generates a ToC up to headers with a level of three (subheadings).'
        top-level-division: |-
            [AI] `pandoc` is a universal document converter that can read from various markup formats and convert them into different output formats like HTML, PDF, LaTeX, etc. The option `--top-level-division` specifies the structural unit of the top-level heading in the source document when generating multi-page output like PDF or EPUB.

            When set to "document" (default), pandoc treats the entire input as a single standalone document and sets the highest level heading as the title of the document. When set to "section", each input file is treated as a separate section within a larger document, and the first heading in the file becomes a section title. This can be useful when creating multi-page documents or books from multiple markdown files.
        track-changes: '[AI] The `pandoc` command with the option `--track-changes` is used to produce a document in a format that shows tracked changes. This means that modifications made to the source document will be highlighted and displayed alongside the corresponding text in the output file, enabling reviewers to easily identify and accept or reject these changes. It''s particularly useful when collaborating on documents with others, ensuring clear communication about what has been added, modified, or deleted. The supported output formats for tracked changes include `docx`, `odt`, and `html`.'
        verbose: '[AI] The `pandoc` command with the `--verbose` option enables detailed output during compilation. It provides a step-by-step description of the conversion process from one markup format to another, including information about the input and output files, filters used, and any warnings or errors that occur. This option can be helpful for troubleshooting and understanding how Pandoc processes your documents.'
        version: '[AI] `pandoc --version` is a command used in the Terminal or Command Prompt to check the current version of Pandoc installed on your system. Pandoc is a universal document converter that can read from and write to various popular formats, including Markdown, HTML, LaTeX, and many others. The `--version` option generates output displaying the specific version number of the installed Pandoc software.'
        webtex: '[AI] The `pandoc` command with the `--webtex` option is used to convert markdown or reStructuredText documents into various output formats, including HTML, while enabling the processing of LaTeX mathematical expressions within the document using a web-based service like MathJax. This allows for the visual representation of complex mathematical equations directly in the HTML output.'
        wrap: '[AI] The `--wrap` option in Pandoc is used to specify how lines of output should be wrapped when generating Markdown, HTML, or other formats. By default, Pandoc wraps text at 72 columns, but this can be changed with the `--wrap` flag. For example, using `--wrap=none` will disable wrapping altogether, while `--wrap=preserve` will preserve existing wrapping in the source document. Other values like `--wrap=72`, `--wrap=80`, or even a custom value like `--wrap=60:120` can be used to set fixed column widths for multiple columns, if desired.'
        write: '[AI] `pandoc --write` is a command used in Pandoc, a universal document converter, to specify the output format of a converted file. The argument that follows `--write` indicates the desired output format, such as "latex", "pdf", "html", or "epub". For example, `pandoc input.md --write html output.html` converts an Markdown file to HTML format.'
