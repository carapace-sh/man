# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: interpret-trailer
description: Add or parse structured information in commit messages
group: low-level helper
flags:
    --if-exists=: action if trailer already exists
    --in-place: edit files in place
    --no-divider: do not treat --- specially
    --only-input: do not apply config rules
    --only-trailers: output only the trailers
    --parse: set parsing options
    --trailer=: trailer(s) to add
    --trim-empty: trim empty trailers
    --unfold: join whitespace-continued values
    --where=: where to place the new trailer
documentation:
    command: '[AI] `git interpret-trailer` is a Git porcelain (command-line) command used to parse and extract trailer information from a Git commit message. Trailer information is metadata that can be added after the main commit message on new lines, starting with a `:` character. This command outputs the trailer information as key-value pairs in JSON format when called without any arguments or saves it to the file specified if an argument is provided.'
    flag:
        if-exists: '[AI] `git interpret-trailer --if-exists` is a Git command used to parse and apply trailer information in commit messages, if it already exists. Trailer information are key-value pairs appended at the end of a Git commit message, often used for storing metadata or additional information about the commit. By using `--if-exists`, Git will only apply the trailer information if the commits already have them. This command can be useful when processing multiple commits in an automated workflow and avoiding unintended changes to existing trailer data.'
        in-place: '[AI] `git interpret-trailer --in-place` is a Git command used to parse and apply trailer lines, which are text snippets saved beneath a commit message during commit. The "--in-place" option modifies the current file without creating a new one. When you run this command on a file under version control with Git, it will read any trailer lines associated with that commit, parse them, and apply the contents to the file in place. This can be useful for applying standardized header information or metadata to your files as they are committed.'
        no-divider: '[AI] `git interpret-trailer` is a Git command used to decode and apply trailer information in commit messages. The `--no-divider` option is an argument that instructs this command not to display a divider line between the message and the trailer information when outputting the decoded trailer data. In other words, it suppresses the visual separation of the two parts of the commit message for a cleaner output.'
        only-input: '[AI] `git interpret-trailer` is a Git command used to parse and extract trailer lines from commit messages. The option `--only-input` is used to output only the trailer lines without any interpretation or processing. In other words, it returns the raw input as it appears in the commit message trailers.'
        only-trailers: '[AI] `git interpret-trailer` is a Git command used to parse and extract trailer lines from commit messages. The option `--only-trailers` requests that only the trailer lines are printed, without the actual message body. In other words, this command is used to extract just the metadata or information appended at the end of a commit message, following the "\n\n" delimiter.'
        parse: |-
            [AI] `git interpret-trailer` is a Git command used to parse and extract trailer information from commit messages. The `--parse` option instructs Git to only parse the trailer information without creating or modifying any commits.

            Trailers are lines in commit messages that begin with a colon (:`), allowing developers to include additional metadata, such as issue references or CI statuses, in their commit messages. By using `git interpret-trailer --parse`, you can extract this trailer information from a commit message without altering the commit itself. This command outputs the parsed trailer information in JSON format.
        trailer: '[AI] `git interpret-trailer` is a Git command used to parse and extract trailer information from commit messages. The `--trailer` option specifies that only the trailer (i.e., the information following a blank line in the commit message) should be extracted and printed. The output will include key-value pairs representing the trailer data.'
        trim-empty: |-
            [AI] `git interpret-trailer` is a Git command used to parse and apply trailer lines to committed files. Trailer lines are pieces of metadata stored at the end of a file in Git, typically containing author information or copyright notices.

            The option `--trim-empty` instructs Git to remove any empty trailer lines before parsing the remaining lines. This can be useful when dealing with inconsistencies in trailer line usage across commits, as it helps maintain a clean and standardized trailer format throughout your Git history.
        unfold: '[AI] `git interpret-trailer --unfold` is a Git command used to parse and expand trailers in commit messages. Trailers are metadata blocks following a blank line at the end of a commit message, containing additional information such as issue references or CI notifications. The `--unfold` option expands each trailer into a new child commit, creating a tree structure in the Git history. This can be useful for maintaining separate records of the trailer data and the main commit message content.'
        where: |-
            [AI] `git interpret-trailer` is a Git command used to parse and apply trailer information in commit messages. The `--where` option specifies where to look for trailer lines within a commit message:

            1. When using `--raw`, it looks for trailer lines after a blank line at the end of the commit message.
            2. When using `--input <file>`, it parses the trailer lines from the contents of the file provided, rather than from a commit message.
            3. By default (no `--where` option), Git assumes that trailer lines are present if there's a blank line before the last non-empty line in the commit message.
