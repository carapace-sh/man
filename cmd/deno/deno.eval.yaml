# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: eval
description: Eval script
flags:
    --cached-only: Require that remote dependencies are already cached
    --cert=: Load certificate authority from PEM encoded file
    --ext=: 'Set standard input (stdin) content type [default: js]  [possible values: ts, tsx, js, jsx]'
    --import-map=: Load import map file
    --inspect-brk=: Activate inspector on host:port and break at start of user script
    --inspect=: 'Activate inspector on host:port (default: 127.0.0.1:9229)'
    --location=: Value of 'globalThis.location' used by some web APIs
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    --seed=: Seed Math.random()
    -c, --config=: Load configuration file
    -p, --print: print result to stdout
    -r, --reload=: Reload source code cache (recompile TypeScript)
documentation:
    command: '[AI] `deno eval` is a command provided by Deno, a modern and secure TypeScript runtime. It''s used to execute and evaluate TypeScript or JavaScript code directly from the command line without creating a new file or project. When you run `deno eval <file.ts|js>`, it reads the code from the specified file, compiles it in-memory, and then executes it. This is particularly useful for quick testing, experimentation, or running scripts that don''t require complex project structures.'
    flag:
        cached-only: '[AI] `deno eval --cached-only` is a command used in Deno, a modern and secure TypeScript runtime. The `--cached-only` flag instructs Deno to only use the compiled cache for the specified file(s), bypassing the need to recompile the code. This can save time when repeatedly running tests or executing scripts that haven''t changed since the last compile.'
        cert: '[AI] The `deno eval --cert` command is used in Deno, a modern and secure TypeScript runtime, to evaluate TypeScript or JavaScript code with TLS certificate authentication enabled. The `--cert` option specifies the path to the TLS certificate file for secure communication between client and server. This flag ensures that only requests coming from authenticated clients are accepted.'
        config: '[AI] The `deno eval --config` command is used in Deno, a modern and secure TypeScript runtime. This command executes a piece of TypeScript code directly from the command line without creating a new file or project. The `--config` flag specifies a configuration file that contains Deno-specific settings, such as import maps or environment variables. This allows for easy configuration of complex projects or tasks without having to write extensive setup code.'
        ext: |-
            [AI] The `deno eval --ext` command is used in Deno, a TypeScript-based runtime, to run and evaluate TypeScript code directly from the command line without creating a new file or project structure.

            The `--ext` option specifies the file extension of the input code file, typically `.ts`. For example, `deno eval --ext .ts myCode.ts` will evaluate the contents of `myCode.ts` directly. This can be useful for quick tests, debugging, or running scripts on the fly.
        import-map: '[AI] The `deno eval --import-map` command is a feature in Deno, a modern and secure runtime for JavaScript and TypeScript. It allows users to specify an import map file during the execution of the `deno eval` command. An import map defines how external dependencies are resolved and loaded. This flag enables projects with custom import maps or those using external packages that don''t have a registry entry yet. Essentially, it provides greater control over import resolution for Deno scripts.'
        inspect: '[AI] `deno eval --inspect` is a command used in Deno, a modern and secure TypeScript runtime. This command runs a script in interactive mode with the added capability of inspecting the execution using the V8 Debugger. It loads the script and immediately starts its execution, allowing developers to set breakpoints, inspect variables, and control the program flow at runtime for better debugging experience.'
        inspect-brk: '[AI] `deno eval --inspect-brk` is a command used in Deno, a modern and secure TypeScript runtime. This command runs a Deno script with the built-in Node.js Debugger (vscode-js-debug). The `--inspect-brk` flag instructs Deno to start the script with the debugger already attached and paused at the first line, allowing you to inspect and debug the code in real-time using supported IDEs like Visual Studio Code.'
        location: '[AI] The `deno eval` command is a tool provided by Deno, a modern and secure TypeScript runtime, for running Deno scripts interactively in the terminal without having to create a separate file. The `--location` flag that can be passed with this command provides the location (file path or URL) of the script to be executed. This flag helps Deno determine where to find the input script and run it accordingly.'
        lock: '[AI] The `deno eval --lock` command is used in Deno, a modern and secure TypeScript runtime. This command runs a Deno script directly from the terminal without creating a new Deno project. The `--lock` flag enables Deno to manage dependencies using its built-in lockfile system (similar to npm''s package-lock.json or Yarn''s lockfile). This ensures that specific versions of dependencies are used when running the script, preventing potential version conflicts and maintaining consistency across different runs.'
        lock-write: '[AI] `deno eval --lock-write` is a command used in Deno, a modern and secure TypeScript runtime. This command runs a Deno script in the REPL (Read-Evaluate-Print Loop) environment with the flag `--lock-write` enabled. This flag allows the script to modify the project''s `deno.lock` file directly for writing lockfile updates, enabling automatic dependency management and ensuring consistent project dependencies across different environments.'
        no-check: '[AI] `deno eval --no-check` is a command used in Deno, a modern and secure TypeScript runtime. This command runs a script directly without performing type checking or other compiler analyses before execution. The `--no-check` flag disables the built-in type checking and compilation step, allowing you to bypass this safety measure for quick testing or experimentation purposes. Keep in mind that using this option without proper caution may introduce potential runtime errors or security vulnerabilities.'
        no-remote: '[AI] The `deno eval --no-remote` command is a tool used in Deno, a modern and secure TypeScript runtime. It is used to execute Deno scripts directly from the command line without having to create a separate `.ts` file. The `--no-remote` flag disables remote deno modules downloading, meaning all required modules must be locally installed or available in the project''s `node_modules` folder for the script to run successfully.'
        print: |-
            [AI] The `deno eval --print` command is a part of Deno, a modern and secure TypeScript runtime. This command is used to execute TypeScript code directly from the terminal without creating a new file or project.

            The `eval` keyword in this context instructs Deno to evaluate the provided code immediately, rather than creating a new file or module. The `--print` flag is optional but recommended for printing the result of the evaluated code to the console instead of returning it as an exit status.

            So, if you have some TypeScript code snippet ready in your terminal, you can execute it using Deno with this command:

            ```bash
            deno eval 'const x = 5; print(x * 2);' --print
            ```

            This example evaluates the given code that defines a constant `x` as 5 and prints the result of multiplying `x` by 2 to the console.
        reload: '[AI] `deno eval --reload` is a command used in Deno, a TypeScript-based runtime for building and executing JavaScript and TypeScript applications. This command runs a script with realtime reloading capability, allowing the developer to make changes to the source file and see the effects reflected in the console without having to manually reload the script every time. The `--reload` flag instructs Deno to monitor the specified file for changes and automatically restart the execution of the script when an update is detected.'
        seed: '[AI] `deno eval` is a command-line tool from Deno, a TypeScript-based runtime for building and running web applications. The `--seed` option is used to specify a seed value for Deno''s built-in random number generator, which is utilized when writing tests or in scenarios where deterministic randomness is essential. By passing a specific seed value, the generated numbers will be predictable, helping ensure consistent test results across different runs.'
