# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Install packages
flags:
    --abi*=: Only use wheels compatible with Python abi
    --compile: Compile Python source files to bytecode
    --extra-index-url=: Extra URLs of package indexes to use in addition to --index-url
    --force-reinstall: Reinstall all packages even if they are already up-to-date
    --global-option=: Extra global options to be supplied to the setup.py call before the install command
    --ignore-requires-python: Ignore the Requires-Python information
    --implementation=: Only use wheels compatible with Python implementation <implementation>
    --install-option*=: Extra arguments to be supplied to the setup.py install command
    --no-binary*=: Do not use binary packages
    --no-build-isolation: Disable isolation when building a modern source distribution
    --no-clean: Don't clean up build directories
    --no-compile: Do not compile Python source files to bytecode
    --no-deps: Don't install package dependencies
    --no-index: Ignore package index
    --no-warn-conflicts: Do not warn about broken dependencies
    --no-warn-script-location: Do not warn when installing scripts outside PATH
    --only-binary*=: Do not use source packages
    --platform*=: Only use wheels compatible with <platform>
    --pre: Include pre-release and development versions
    --prefer-binary: Prefer older binary packages over newer source packages
    --prefix=: Installation prefix where lib, bin and other top-level folders are placed
    --progress-bar=: Specify type of progress to be displayed
    --python-version=: The Python interpreter version to use for wheel
    --require-hashes: Require a hash to check each requirement against
    --root=: Install everything relative to this alternate root directory
    --src=: Directory to check out editable projects into
    --upgrade-strategy=: Determines how dependency upgrading should be handled
    --use-pep517: Use PEP 517 for building source distributions
    --user: Install to the Python user install directory for
    -I, --ignore-installed: Ignore the installed packages, overwriting them
    -U, --upgrade: Upgrade all specified packages to the newest available version
    -c, --constraint*=: Constrain versions using the given constraints file
    -e, --editable=: Install a project in editable mode
    -f, --find-links=: If a URL or path to an html file, then parse for links to archives such as sdist
    -i, --index-url=: Base URL of the Python Package Index
    -r, --requirement*=: Install from the given requirements file
    -t, --target=: Install packages into <dir>
documentation:
    command: '[AI] `pip install` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository. This command is typically run in the terminal or command prompt while navigating to the desired project directory. When executed, it downloads, builds and installs the specified package(s) and their dependencies, making them ready for use within the project.'
    flag:
        abi: '[AI] The command `pip install --abi` is used with Pip, which is a package manager for Python. This specific command is used to install a Python package from a particular build architecture (ABI) instead of the default one. For example, `--abi=win32` or `--abi=manylinux1_x86_64` can be used to specify the desired ABI. It helps in resolving compatibility issues with different system configurations and ensuring that the installed package works correctly on the target platform.'
        compile: '[AI] `pip install --compile` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository with compiler flags enabled during the build process. This command ensures that the source code of the package is compiled, instead of just installing pre-compiled binary files. The `--compile` flag instructs pip to only compile the package and not run any tests or other post-processing steps. This can be useful when you want to rebuild packages from their source code, for instance, to ensure that they are built with specific compiler flags or to check if there are any build errors.'
        constraint: '[AI] `pip install` is a command-line tool for installing Python packages using the pip package manager. The `--constraint` option is used to specify a pinning file, which defines exact or minimum version requirements for dependencies of the main package being installed. This can be useful when dealing with complex project dependencies and avoiding potential version conflicts or compatibility issues. It ensures that specific versions of dependencies are installed instead of letting pip choose automatically.'
        editable: '[AI] `pip install --editable` is a command used in Python for installing packages from source, specifically from a local git repository or a local editable file. The "--editable" option tells pip to create a special link instead of installing the package in a traditional way. This allows changes made to the source code to be reflected immediately without having to reinstall the package every time. It''s useful for development environments where the source code is frequently being updated.'
        extra-index-url: '[AI] The `pip install` command is used to install Python packages using pip, which is a package manager for Python. The `--extra-index-url` option specifies an additional URL to search for packages when installing, in case the default indexes do not contain the required package or the latest version of it. This can be useful when working with private packages or repositories, or when the package is not available on the PyPI (Python Package Index) but can be found on another repository instead.'
        find-links: '[AI] `pip install --find-links` is a command used with setuptools in Python for installing packages from external indexes or files instead of the default PyPI repository. The `--find-links` option specifies one or more URLs or file paths containing the index files, which pip uses to locate and install the packages. It''s often used when working with private repositories or dealing with dependencies not available in PyPI.'
        force-reinstall: '[AI] `pip install --force-reinstall` is a command used in Python programming language to force reinstall an existing package and its dependencies, overwriting any previously installed files. This can be useful when dealing with corrupted or outdated installation, or when there are conflicts between different versions of the same package. It''s important to note that using `--force-reinstall` should be considered as a last resort, as it may lead to unintended consequences such as losing customizations or configuration files.'
        global-option: '[AI] `pip install` is a command used to install packages in Python using PIP, the Package Installer for Python. The `--global-option` option modifies PIP''s global behavior. When you use `pip install --global-option option=value`, it sets that specific option as a default for all your future pip installations. For example, if you want to always install packages in a particular location or with a specific user, you can set those options globally using the `--global-option` command.'
        ignore-installed: '[AI] The `pip install` command is used to install packages in Python using the pip package manager. The `--ignore-installed` flag modifies the installation behavior by ignoring any installed packages that match the specified requirement, even if they are already present in the local Python environment. This allows for overriding previously installed versions with new ones or installing a specific version of a package while keeping other installed versions unchanged.'
        ignore-requires-python: '[AI] The `pip install` command with the `--ignore-requires-python` flag is used when installing Python packages via pip. This flag instructs pip to not check or install any dependencies listed in the target package''s `requirements.txt` file that have a Python version requirement. This can be useful when you want to install a specific package with known compatibility issues with some of its dependencies, and prefer managing those dependencies manually.'
        implementation: '[AI] The `pip install` command is used to install Python packages using Pip, which is a package manager for Python. The `--implementation` option is not a standard or widely-used argument for this command. It appears to be specific to certain Python distributions, such as Anaconda or Miniconda. This option allows specifying the implementation (i.e., the underlying Python interpreter) to use when installing packages, which can be helpful in cases where multiple Python versions are installed on a system. For example, `pip install --implementation miniconda` would instruct pip to use Miniconda as the implementation for installing the specified package.'
        index-url: '[AI] The `pip install` command is a popular tool for installing and managing Python packages. The `--index-url` option specifies a custom URL for the package index, or repository, from which pip will download the packages to be installed. This can be useful when working with private package repositories or when using a specific proxy server. For example, `pip install --index-url=https://myproxyserver.com/simple mypackage` would tell pip to install the package "mypackage" from the index located at "<https://myproxyserver.com/simple>". This way, pip can access and download the packages directly from the specified URL instead of the default Python Package Index (PyPI).'
        install-option: '[AI] `pip install --install-option` is a command used with pip, which is a package manager for Python. This option allows specifying custom installation options when installing or upgrading a Python package. For instance, you can use it to set extra index URLs (`--index-url`) or build system flags (`--no-binary`) among other things, depending on the specific requirement of the software being installed. This can be useful in various scenarios such as installing packages from custom repositories or building Python extensions.'
        no-binary: '[AI] `pip install --no-binary` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository using pip, the package installer for Python. The `--no-binary` flag disables the use of precompiled binary packages and instead downloads and builds the packages from their source code. This is useful when the installed system does not have all required dependencies or when developing custom packages where the developer wants to build and test the package locally.'
        no-build-isolation: |-
            [AI] `pip install --no-build-isolation` is a command used with the pip package installer for Python. The `--no-build-isolation` option disables the use of Python's built-in "isolation mode" during the installation process.

            Isolation mode, also known as "venv" (virtual environment), creates a separate Python environment for each project to avoid version conflicts and maintain consistency across different projects. By disabling it with `--no-build-isolation`, pip will use the global site-packages directory instead. This can lead to potential package version conflicts and other issues if multiple projects depend on different versions of the same package, but it might be necessary in certain situations, such as when working on a project that relies on specific packages installed globally.
        no-clean: '[AI] `pip install --no-clean` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository using pip, which is a package manager for Python. The `--no-clean` flag prevents pip from deleting the build and source directories after a successful installation, allowing users to keep these directories if needed for future reference or troubleshooting. In summary, this command installs a Python package without cleaning up the intermediate files.'
        no-compile: '[AI] The `pip install` command is used to install Python packages from the PyPI (Python Package Index) repository using pip, the Python package installer. The `--no-compile` option is a flag that can be passed when using this command, and it instructs pip not to attempt compilation of the source code during the installation process. This flag is typically used when installing packages from source distribution archives (e.g., .tar.gz or .zip files), and it''s useful when dealing with complex projects that require specific build environments or dependencies. By skipping the compilation step, pip installs only the precompiled Python wheels or executable scripts if available, which can save time and reduce potential errors.'
        no-deps: '[AI] `pip install --no-deps` is a command used in Python programming language for installing packages from the PyPI (Python Package Index) repository using pip, the package installer. The `--no-deps` flag tells pip not to install any dependencies that a required package may have. This can be useful when you want to install a specific version of a package without having its dependencies updated or if you plan on managing dependencies manually. However, keep in mind that this approach might lead to compatibility issues between packages as their dependencies might not function correctly with each other.'
        no-index: '[AI] The command `pip install --no-index` is used when installing packages with pip, but without using the PyPI (Python Package Index) as a source for discovering and downloading the required package. This option is useful when working offline or when the network connection is unreliable, as it allows you to specify the exact location of the package files. The installation process will still check for the package dependencies in the index, but the packages themselves must be provided locally.'
        no-warn-conflicts: '[AI] `pip install --no-warn-conflicts` is a command used with pip, which is a package manager for Python. This specific command tells pip to suppress or ignore warnings about potential conflicts during the installation of packages. It allows users to install packages even if they might conflict with each other without being notified by pip. This can be useful when the user intends to manage conflicts manually or when there are known compatibility issues between certain packages that have already been resolved. However, it is generally recommended to use this option with caution as ignoring potential conflicts could lead to unexpected issues in Python projects.'
        no-warn-script-location: '[AI] The `pip install` command is used to install Python packages via the Pip package manager. The `--no-warn-script-location` flag is an optional argument that can be passed to suppress warnings related to running scripts located outside of the Python package index, PyPI. This flag is useful when installing packages from sources other than PyPI or when working with custom or local packages where script locations may not adhere to the standard PyPI format. By using this flag, pip will not display any warnings regarding non-standard script locations during installation.'
        only-binary: '[AI] The `pip install --only-binary` command is used when installing packages with pip that include binary components, such as extensions written in languages like Cython or C++. This option tells pip to only download and build the binary wheels instead of source packages, which can significantly speed up the installation process and avoid potential compilation issues. It''s especially useful when dealing with large or complex packages where building from source could be time-consuming or problematic.'
        platform: '[AI] The `pip install` command is a popular way to install Python packages using the pip package manager. The `--platform` option is not a standard or widely-used option for this command. It''s not documented in the official pip documentation. It might have been used in specific contexts, possibly related to cross-compiling or building packages for specific platforms other than your current one. However, without more information about the intended use case and the context in which this option is being used, it is impossible to provide a definitive explanation. If you encounter this option, I would recommend checking the documentation of the specific project or toolchain that recommends its use.'
        pre: '[AI] `pip install --pre` is a command used in Python programming language to install packages from Pre-release or Development versions using Pip, the Package Installer for Python. The `--pre` option tells pip to look for and install packages that are not yet officially released but are still available for testing and development. This allows users to try out new features before they become stable releases.'
        prefer-binary: '[AI] The command `pip install --prefer-binary` is used when installing packages with pip, the Python package installer. The `--prefer-binary` option tells pip to prioritize installing precompiled binary wheels instead of building packages from source code. This can save time and resources, especially for large packages, as binary wheels are usually faster to download and install than building from scratch. However, using this option may not always provide the most up-to-date or customizable installation, as it relies on existing precompiled packages.'
        prefix: '[AI] The `--prefix` option in the `pip install` command is used to specify a custom installation prefix for the Python packages being installed. This means that the packages will be installed into a specific directory instead of the default location. For instance, `pip install --prefix /path/to/custom/location package_name` would install the specified package in the given directory under /path/to/custom/location rather than the standard Python site-packages directory. This can be useful for managing multiple Python environments or installing packages globally without interfering with other Python installations.'
        progress-bar: '[AI] `pip install --progress-bar` is a command used with pip, which is a package manager for Python. This specific command enables the progress bar during the installation of packages using pip. It provides real-time feedback on the installation process by displaying a progress bar in the terminal or console window. This can be helpful to track the installation progress and gauge its completion, especially when installing multiple packages or large packages.'
        python-version: '[AI] `pip install` is a command used to install Python packages using Pip, which is a package manager for Python. The option `--python-version` specifies the exact version of Python interpreter to be used during the installation process. This helps ensure compatibility between the installed package and the target Python interpreter version. For example, `pip install package_name --python-version 3.7.4` will install the package using Python interpreter version 3.7.4.'
        require-hashes: '[AI] `pip install --require-hashes` is a command used with setuptools and pip to ensure the authenticity of downloaded Python packages by verifying their digital signatures or hashes before installation. It''s an added security measure for managing dependencies in a reproducible way, preventing man-in-the-middle attacks. In other words, it checks that the downloaded package matches the expected cryptographic hash to ensure the integrity and authenticity of the installed software.'
        requirement: |-
            [AI] `pip install` is a command-line tool used for installing Python packages from the PyPI (Python Package Index) repository. The `--requirements` option is used to install multiple packages at once by providing a file containing a list of required packages and their versions.

            The file should be in one of the following formats: text, with each line specifying a package name followed by an optional version number (e.g., `numpy==1.21.2`), or in requirement format using pip's syntax (e.g., `-r requirements.txt` to install all packages listed in 'requirements.txt').

            By using `pip install --requirements <file>`, you can easily manage dependencies and ensure the correct versions of required libraries are installed for your project.
        root: '[AI] `pip install --root` is a command used in Python programming language for installing packages from the command line using pip. The `--root` option specifies an alternative location to the default site-packages directory where installed packages will be placed. This can be useful when managing multiple Python environments or project setups requiring specific packages. It overrides the default installation path, allowing for better control and isolation of package installations.'
        src: '[AI] The `pip install` command is used to install packages in Python using pip, which is a package manager for Python. The option `--src` is not a standard pip command but an extension provided by some project setups. It creates a source distribution directory during the installation process, making it easier to distribute and manage the installed packages'' sources. In other words, `pip install --src` installs a package while creating a separate sourced distribution directory for that package.'
        target: '[AI] `pip install --target` is a command used with pip, which is a package manager for Python. The option `--target` specifies a directory as the installation location for the packages instead of the default system site-packages or user site-packages. This can be useful when working on multiple Python projects with different dependencies or when you want to avoid modifying the global site-packages directory.'
        upgrade: '[AI] `pip install --upgrade` is a command used in Python programming language for managing dependencies with pip, which is a package manager for Python. This specific command tells pip to find the latest version of installed packages and upgrade them in the current virtual environment or project. It helps keep your packages updated, ensuring you have access to the latest features and bug fixes.'
        upgrade-strategy: |-
            [AI] `pip install --upgrade-strategy` is a command used with pip, which is a package manager for Python. This specific command is used to control the strategy for upgrading installed packages during the installation or updating process.

            The available strategies are:

            1. `eager`: Install the latest version of each package as soon as possible (the default).
            2. `deferred`: Wait until all installations have completed before upgrading any packages. This strategy can be useful when you want to minimize the risk of potential incompatibilities between packages during an upgrade.
            3. `on-demand`: Upgrade only those packages that are being explicitly installed or updated.

            The command is used as follows: `pip install --upgrade-strategy={eager|deferred|on-demand} [package_name]`.
        use-pep517: |-
            [AI] `pip install` is a command used to install packages in Python using Pip, which is the package manager for Python. The option `--use-pep517` is related to PEP 517, which introduced support for source distribution bundles with a specific directory structure in Python.

            When you use this flag during installation, pip looks for a Wheel distribution (a precompiled binary package) or a Source distribution following the PEP 517 standards, allowing you to install packages that include these distributions more efficiently. In summary, `pip install --use-pep517` allows pip to find and install packages with optimized distribution formats.
        user: '[AI] `pip install --user` is a command used in Python programming language for installing packages locally for a specific user, rather than system-wide. The `--user` flag instructs pip to install packages in the site-packages directory of the current user''s environment, usually located within the hidden `.pythonignore` and `.pypirc` files in the user''s home directory. This method allows multiple Python versions or environments to coexist on a single system without interfering with each other.'
