# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-metadata
description: Output the resolved dependencies of a package
flags:
    --all-features: Activate all available features
    --color=: 'Coloring: auto, always, never'
    --config=: Override a configuration value
    --filter-platform=: Only include resolve dependencies matching the given
    --format-version=: 'Format version [possible values: 1]'
    --frozen: Require Cargo.lock and cache are up to date
    --locked: Require Cargo.lock is up to date
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-deps: Output information only about the workspace members and don't
    --offline: Run without accessing the network
    -F, --features=: Space or comma separated list of features to activate
    -Z=: Unstable (nightly-only) flags to Cargo, see 'cargo -Z help'
    -h, --help: Print help information
    -q, --quiet: Do not print cargo log messages
    -v, --verbose: Use verbose output (-vv very verbose/build.rs output)
documentation:
    command: '[AI] `cargo-metadata` is a command-line tool that comes with Rust''s package manager, Cargo. It generates and displays metadata about the dependencies, targets, and other properties of a Cargo project. Users may invoke it to obtain an overview of their project''s current state or to extract specific information, such as the version numbers of direct dependencies.'
    flag:
        Z: '[AI] `cargo metadata -Z` is a command used in Rust programming language''s Cargo build tool. It generates a JSON output containing all project dependencies and their versions, which can be passed as an argument to other commands for further processing or analysis. The `-Z` flag enables the "json" output format.'
        all-features: '[AI] `cargo-metadata --all-features` is a command used in Rust programming language''s Cargo build tool. It generates metadata about all features of all packages in the current project or dependency tree, displaying comprehensive information such as names, descriptions, dependencies, and version compatibility. This command can be helpful for understanding the interrelationships between different features and packages in a complex project.'
        color: '[AI] `cargo-metadata --color` is a command used with Cargo, Rust''s package manager. The `--color` option enables colored output for various messages and progress bars in the terminal. It enhances the readability of the output by adding different colors to distinguish between different types of messages or stages during the build process.'
        config: '[AI] `cargo-metadata --config` is a command used in Rust programming language''s Cargo build tool. The `--config` option instructs Cargo to read configurations from a specific file instead of the default one (usually located at `Cargo.toml`). This can be useful when working with complex projects or multiple configurations, as it allows users to customize their build process without modifying the main configuration file directly.'
        features: '[AI] `cargo-metadata --features` is a command used in Rust programming language''s build system, Cargo. It generates metadata about a Cargo project and displays the list of enabled features for the specified crate. Features are optional components that can be activated when building or using a library or executable, extending its functionality without being included by default.'
        filter-platform: '[AI] `cargo-metadata` is a command-line tool for Rust projects that generates metadata about the dependencies and other package information. The `--filter-platform` flag is used to filter the output based on the target platform. It only shows the packages that have known builds for the specified platform. This can be useful when building Rust projects for specific platforms, as it helps ensure that only the necessary dependencies are included in the project.'
        format-version: '[AI] `cargo-metadata --format-version` is a command used with Cargo, Rust''s package manager. This command outputs the format version of the Cargo metadata file. The Cargo metadata describes various aspects of the project, such as dependencies and build scripts. Having consistent format versions ensures compatibility between different tools processing this data.'
        frozen: '[AI] `cargo-metadata --frozen` is a command used in Rust programming language''s Cargo build tool. It generates a complete and immutable metadata file about a project. The `--frozen` flag ensures that the generated metadata is not overwritten by any subsequent changes to the project, making it suitable for use as part of a package archive or for sharing with other developers. This allows them to have a consistent view of the project''s dependencies and other metadata.'
        help: |-
            [AI] `cargo-metadata` is a Cargo subcommand that generates metadata reports for Rust projects. The `--help` flag provides information about how to use this command, including its arguments and options.

            Here's a brief summary of the output you may get when using `cargo-metadata --help`:

            ```sh
            Usage: cargo metadata [OPTIONS] [TARGET]

            Generates metadata reports for Rust projects.

            Options:
              -h, --help                       Print help documentation and exit
                  --manifest-path PATH           Path to the Cargo.toml file
              -v, --verbose                    Be more verbose (can be used multiple times)
              -q, --quiet                      Be quiet, print only errors and warnings
              -V, --version                    Print version information and exit
            ```

            You can use this command to get a quick overview of the available options for `cargo-metadata`. For example, you can specify the path to the Cargo.toml file using the `--manifest-path` option or increase verbosity with the `--verbose` flag.
        locked: '[AI] The `cargo-metadata --locked` command is used in Rust programming language projects managed with Cargo build system. This command generates a metadata file named `Cargo.lock` that records the exact version of every dependency and their corresponding hashes, ensuring consistent builds by locking down the dependencies at specific versions. It helps prevent unintended updates to dependencies, which could potentially introduce regressions or incompatibilities with other components of the project.'
        manifest-path: '[AI] `cargo-metadata` is a Cargo subcommand used to generate metadata about a Rust project. The option `--manifest-path` specifies the path to the `Cargo.toml` file, which is the manifest file that defines the project''s dependencies, build properties, and other metadata. When you run `cargo metadata --manifest-path <PATH>`, it generates a JSON output that contains all the information in the specified `Cargo.toml` file and any locked dependencies in the project''s cache. This command is useful for querying or generating metadata about a Rust project, such as getting a list of all dependencies or their versions.'
        no-default-features: '[AI] `cargo-metadata` is a Cargo subcommand used to generate metadata about a Rust project. The `--no-default-features` flag disables the use of default features for all dependencies in the project''s Cargo.toml file. This means that only explicitly specified features will be included when generating the metadata, providing more control over which dependency versions and features are used.'
        no-deps: '[AI] `cargo-metadata --no-deps` is a command used in Rust programming language''s Cargo build system. This command generates a metadata file (named `Cargo.toml.json`) for the given project, but it does not include any dependency information in the output. This means that the resulting file only contains the project''s own metadata and not the metadata of its dependencies. This option can be useful when you want to share a minimal metadata representation of your project without including the full dependency tree.'
        offline: '[AI] `cargo-metadata --offline` is a command used in Rust programming language''s Cargo build tool. This command generates a local metadata cache, allowing Cargo to operate without network access. The offline flag ensures that Cargo uses only the locally available packages and their dependencies, making it useful for air-gapped or disconnected environments where internet access is limited or unavailable.'
        quiet: '[AI] `cargo-metadata --quiet` is a command used in Rust programming language''s Cargo build tool. The `--quiet` flag reduces the amount of output printed to the console during execution, making the build process less verbose. It''s useful when you want to run Cargo tasks silently in the background.'
        verbose: '[AI] `cargo-metadata --verbose` is a command used in Cargo, Rust''s package manager. The `--verbose` flag increases the amount of output Cargo provides during the execution of the `cargo-metadata` subcommand. This command generates metadata about your project, such as dependencies and their versions, which can be useful for understanding the project''s dependencies or for scripting purposes. With the `--verbose` flag, more detailed information about the process is displayed, allowing for better insight into what Cargo is doing.'
