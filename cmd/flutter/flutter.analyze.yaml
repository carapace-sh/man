# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: analyze
description: Analyze the project's Dart code
flags:
    --congratulate: Show output even when there are no errors, warnings, hints, or lints.
    --current-package: Analyze the current project, if applicable.
    --fatal-infos: Treat info level issues as fatal.
    --fatal-warnings: Treat warning level issues as fatal.
    --no-congratulate: Do not show output even when there are no errors, warnings, hints, or lints.
    --no-current-package: Do not analyze the current project, if applicable.
    --no-fatal-infos: Do not treat info level issues as fatal.
    --no-fatal-warnings: Do not treat warning level issues as fatal.
    --no-preamble: When analyzing the flutter repository, do not display the number of files that will be analyzed.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --preamble: When analyzing the flutter repository, display the number of files that will be analyzed.
    --pub: Run "flutter pub get" before executing this command.
    --watch: Run analysis continuously, watching the filesystem for changes.
    --write=: Also output the results to a file.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `flutter analyze` is a command-line tool provided by Flutter, a mobile application development framework. It performs static analysis on your Flutter project to identify potential issues such as unused imports, deprecated APIs, and other code quality concerns. The output provides suggestions for improvements to maintain a clean and efficient codebase. It''s recommended to run this command regularly during development to ensure the highest possible code quality and compatibility with future Flutter updates.'
    flag:
        congratulate: |-
            [AI] `flutter analyze --congratulate` is a command used in Flutter development to run an analysis of your project's Dart codebase with the Analyzer tool. The `--congratulate` flag is optional and is meant to be used in conjunction with continuous integration (CI) systems or automated testing frameworks.

            When this flag is present, the Analyzer will output a message congratulating you if no lint issues are found in your codebase. It's a way to visually acknowledge that your code has passed the analysis stage and is ready for further processing, such as building or testing. However, keep in mind that it doesn't actually prevent the build or execution process from continuing with potential errors or warnings. It merely provides a friendly reminder of the current state of your codebase.
        current-package: '[AI] `flutter analyze` is a command-line tool provided by Flutter to perform static analysis on Dart code. The `--current-package` option is used to analyze only the current package, i.e., the package that contains the Dart entry point (usually main.dart) of your Flutter application. This helps limit the scope of the analysis and focuses on potential issues within that specific package. It can help improve code quality and catch errors early in the development process.'
        fatal-infos: '[AI] `flutter analyze` is a command-line tool provided by Flutter for performing static analysis of Dart code in your Flutter project. The `--fatal-infes` option is used to configure the analysis tool to print only errors that cause the build process to fail (fatal errors), and exit with an error status if any such errors are found. This can be useful when you want to quickly identify and address critical issues in your codebase, as it allows you to focus on resolving fatal errors before continuing with other development tasks.'
        fatal-warnings: '[AI] `flutter analyze --fatal-warnings` is a command used in the Flutter framework for performing static analysis of Dart code. The `--fatal-warnings` option causes any non-error warnings to be treated as errors, meaning that the build process will not continue unless all warnings have been resolved. This helps ensure a higher level of code quality by addressing potential issues before they become bigger problems.'
        help: |-
            [AI] `flutter analyze` is a command-line tool provided by the Flutter framework for performing static analysis on Dart codebases. The `--help` option, when used with this command, displays detailed help information about it. Here's a brief summary:

            `flutter analyze --help` shows you how to use the flutter analyze tool effectively, providing the following information:

            1. Description of the tool and its purpose.
            2. Usage information and valid options, including `--no-analyze-resolvers`, which disables specific analysis resolver checks.
            3. Examples of common usage scenarios.
            4. Detailed explanations of each option, such as `--help-format` for choosing output format (plain text or JSON) and `--reporter` to customize the reporter for the results.
            5. Explanation on how to run the analysis in background and handle large projects efficiently using `--batch-mode`.
            6. Information about where to find further help, such as the official Flutter documentation.
        no-congratulate: '[AI] `flutter analyze --no-congratulate` is a command used in Flutter development to perform static analysis on Dart code. It checks for potential errors, warnings, and suggestions for improving code quality. The `--no-congratulate` flag disables the success message that is usually displayed when analysis completes successfully. This option can be useful during continuous integration or automated testing where success indicators may not be necessary.'
        no-current-package: '[AI] `flutter analyze` is a command-line tool provided by Flutter framework for performing static analysis on Dart codebase. The `--no-current-package` option disables the use of the current package as the analyzed package. In other words, it analyzes all packages in the project except the one that is currently active (implicitly analyzed when no package is specified). This can be useful when you want to analyze dependencies or shared libraries independently from their main applications.'
        no-fatal-infos: '[AI] `flutter analyze` is a command-line tool provided by Flutter framework to perform static analysis on Dart codebase. The `--no-fatal-infos` option is used to suppress the display of fatal error messages. In other words, it continues the analysis process even if there are warnings or non-fatal errors found in the codebase. This can be useful during continuous integration or large-scale development projects, where identifying and fixing all issues at once might not be practical. The output will still contain the list of identified issues but without stopping the process due to fatal errors.'
        no-fatal-warnings: |-
            [AI] `flutter analyze` is a command-line tool provided by Flutter framework to perform static analysis on Dart code. The `--no-fatal-warnings` option is used to suppress fatal warnings during the analysis process.

            With this flag, any warning messages that would normally cause the analysis to fail will be instead printed to the console without halting the analysis. This allows developers to continue working with potentially actionable warnings in their codebase, rather than having to fix them before continuing development.
        no-preamble: '[AI] `flutter analyze` is a command-line tool provided by Flutter framework to perform static analysis on Dart code. The `--no-preamble` option is used to suppress the initial output that provides version and licensing information. In simple terms, it runs the analysis without displaying the preamble messages.'
        no-pub: '[AI] `flutter analyze --no-pub` is a command used in Flutter development to perform static analysis on your project''s Dart codebase without running the pub get command to fetch and install dependencies first. The "--no-pub" option disables the automatic execution of pub get. This can be useful when you want to perform an analysis locally, without updating or modifying your current dependencies. It helps in identifying potential issues related to syntax, style, and type errors within your codebase.'
        preamble: '[AI] `flutter analyze` is a command-line tool provided by Flutter, a mobile application development framework. It performs static analysis on Dart code to identify potential issues and suggestions for improvements. The `--preamble` option is used to generate a preamble file containing an overview of the analysis results in JSON format. This file can be used as input for other tools or scripts to gain insights into the codebase''s quality. In summary, `flutter analyze --preamble` generates a JSON file with analysis results that can be further processed by other tools.'
        pub: '[AI] `flutter analyze --pub` is a command used in Flutter development. It runs the `analyze` tool with the `--pub` option, which performs static analysis on your project''s Dart code and pubspec.yaml file for dependencies. This helps to identify potential issues like unused imports, deprecated APIs, and type annotation errors within your codebase and pubspec file. It aims to improve the overall quality of your Flutter project by providing suggestions for refactoring and optimization.'
        watch: '[AI] `flutter analyze --watch` is a command used in Flutter development to perform static analysis of Dart code in real-time. The `analyze` tool checks your codebase for potential errors, warnings, and suggestions for improvements. The `--watch` flag enables live monitoring of the codebase, triggering analyses each time files are saved or modified. This allows developers to quickly address issues as they arise during development.'
        write: '[AI] `flutter analyze --write` is a command used in Flutter development to perform static analysis of Dart code. It checks your codebase for potential errors, style issues, and suggests improvements based on the coding conventions set by the Dart project team. The `--write` option generates an error report file named `analyzes.json` which can be reviewed for fixing identified issues. This command is essential for maintaining a clean and efficient codebase in a Flutter project.'
