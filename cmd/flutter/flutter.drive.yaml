# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: drive
description: Run integration tests for the project on an attached device or emulator
flags:
    --android-emulator: Perform Flutter Driver testing using an Android Emulator.
    --browser-dimension=: The dimension of the browser when running a Flutter Web test.
    --browser-name=: Name of the browser where tests will be executed.
    --build: (deprecated) Build the app before running.
    --cache-sksl: Cache the shader in the SkSL format instead of in binary or GLSL formats.
    --chrome-binary=: Location of the Chrome binary.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --dds-port=: When this value is provided, the Dart Development Service (DDS) will be bound to the provided port.
    --debug: Build a debug version of your app (default mode).
    --device-timeout=: Time in seconds to wait for devices to attach.
    --device-user=: Identifier number for a user or work profile on Android only.
    --device-vmservice-port=: Look for vmservice connections only from the specified port.
    --driver-port=: The port where Webdriver server is launched at.
    --driver=: The test file to run on the host (as opposed to the target file to run on the device).
    --dump-skp-on-shader-compilation: Automatically dump the skp that triggers new shader compilations.
    --endless-trace-buffer: Enable tracing to an infinite buffer, instead of a ring buffer.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --headless: Launch driver browser in headless mode.
    --host-vmservice-port=: When a device-side vmservice port is forwarded to a host-side port, use this value as the host port.
    --keep-app-running: Will keep the Flutter application running when done testing.
    --no-android-emulator: Do not perform Flutter Driver testing using an Android Emulator.
    --no-build: (deprecated) Do not build the app before running.
    --no-headless: Do not launch driver browser in headless mode.
    --no-keep-app-running: Will not keep the Flutter application running when done testing.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-start-paused: Do not start in a paused mode and wait for a debugger to connect.
    --no-track-widget-creation: Do not track widget creation locations.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --profile: Build a version of your app specialized for performance profiling.
    --profile-memory=: Launch devtools and profile application memory, writing The output data to the file path provided to this argument as JSON.
    --purge-persistent-cache: Removes all existing persistent caches. This allows reproducing shader compilation jank that normally only happens the first time an app is run, or for reliable testing of compilation jank fixes (e.g. shader warm-up).
    --release: Build a release version of your app.
    --route=: Which route to load when running the app.
    --screenshot=: Directory location to write screenshots on test failure.
    --start-paused: Start in a paused mode and wait for a debugger to connect.
    --test-arguments=: Additional arguments to pass to the Dart VM running The test script.
    --trace-skia: Enable tracing of Skia code.
    --trace-startup: Trace application startup, then exit, saving the trace to a file.
    --trace-systrace: Enable tracing to the system tracer.
    --track-widget-creation: Track widget creation locations.
    --use-application-binary=: Specify a pre-built application binary to use when running.
    --use-existing-app=: Connect to an already running instance via the given observatory URL.
    --verbose-system-logs: Include verbose logging from the Flutter engine.
    --web-renderer=: The renderer implementation to use when building for the web.
    --write-sksl-on-exit: Attempts to write an SkSL file when the drive process is finished to the provided file, overwriting it if necessary.
    -P, --android-project-arg=: Additional arguments specified as key=value that are passed directly to the gradle project via the -P flag.
    -a, --dart-entrypoint-args=: Pass a list of arguments to the Dart entrypoint at application startup.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter drive` is a Flutter development command used to run and test your application in the background, allowing you to see live changes as you make modifications to your codebase. It starts a web server for serving your app, launches a test runner (like `flutter tests`) or a simulator/emulator, and connects them together so that changes are automatically reflected in the running app without needing to rebuild and redeploy each time. This is particularly useful during iterative development and testing processes.'
    flag:
        android-emulator: '[AI] `flutter drive --android-emulator` is a command used in Flutter development to run and test your application on an Android emulator using the Flutter Drive tool. It starts the emulator if it''s not already running, installs and launches the app, and keeps the app running while making changes to the code and rebuilding. This helps developers see the impact of their updates in real-time without having to build and deploy an APK every time.'
        android-project-arg: '[AI] `flutter drive` is a command-line tool used to test and interact with Flutter applications in the context of an emulator or physical device. The `--android-project-arg` option is used to pass custom arguments to the underlying Android project when launching it for testing or debugging. For example, you might use this option to specify a particular activity or intent filter, set environment variables, or modify application properties in your `android/app/build.gradle` file. This can be helpful when working with complex projects that require specific configurations for testing and development.'
        browser-dimension: '[AI] `flutter drive` is a command-line tool provided by Flutter, a mobile application development framework. The option `--browser-dimension` is used to specify custom dimensions for the browser window when running tests in headless mode or using the web test runner. This can be helpful to ensure consistent testing environments and prevent potential layout issues caused by varying screen sizes. For example, `flutter drive --browser-dimension=1280x720` sets the browser window size to 1280 pixels wide and 720 pixels tall.'
        browser-name: '[AI] The `--browser-name` option in Flutter''s `drive` command is used to specify the name of the browser or Chrome DevTools emulated mobile device that will be used to launch and test a Flutter application in the web mode. By default, Flutter Drive uses Chrome for testing. However, you can use this option to specify a custom browser name if needed for your specific testing setup. For example, you could use `--browser-name=Firefox` or `--browser-name=Chrome Mobile` depending on your requirements.'
        build: '[AI] `flutter drive --build` is a command used in Flutter development to build and test an application using Flutter Drive, which is a testing tool that provides end-to-end testing capabilities for Flutter applications. The `--build` flag instructs Flutter Drive to first build the application before running the tests. This ensures that the latest code changes are included in the test run.'
        cache-sksl: |-
            [AI] `flutter drive` is a command-line tool for Flutter, a mobile application development framework. The option `--cache-skip` skips the build cache during test execution, and the argument `--cache-sksl` specifies that only the Skia shader cache should be skipped.

            Skia is an open-source 2D and 3D graphics library used by Flutter to render UI elements. The Skia shader cache stores compiled shader programs for faster rendering. By skipping this cache, you may experience slower test execution times but potentially also see more up-to-date rendering results due to freshly compiled shaders.

            In summary, the `--cache-skip --cache-sksl` option in `flutter drive` skips only the Skia shader cache during test execution, potentially leading to slower tests with more current shader rendering results.
        chrome-binary: '[AI] `flutter drive --chrome-binary` is a command used in Flutter development to launch and test Dart web applications using Google Chrome as the rendering engine. The `--chrome-binary` option specifies the path to the Chrome executable, allowing you to use a custom version of Chrome for testing. This can be useful when working with specific Chrome features or extensions that are not available in Flutter''s default Chrome implementation.'
        dart-define: '[AI] `flutter drive` is a command-line tool provided by Flutter to test and build applications. The option `--dart-define` allows you to define key-value pairs that will be available as constants in the Dart code during testing or driving an app with the Flutter test runner or the Flutter driver. This can be useful for setting configuration values or environment variables without modifying your source code directly. For example, `--dart-define=MY_CONSTANT=value` sets a constant named `MY_CONSTANT` with the value `value`.'
        dart-entrypoint-args: '[AI] `flutter drive` is a command-line tool provided by Flutter for testing and running applications in the background or in the emulator/simulator. The `--dart-entrypoint-args` option is used to pass arguments specifically to the Dart entry point of your Flutter application. These arguments can be used to override default values or provide additional input to your application during test runs or background execution. For example, you might use it to set environment variables, provide command line arguments, or control application behavior.'
        dds-port: '[AI] The `--dds-port` flag in Flutter''s `drive` command is used to specify the port number for the Data Dependency Inspection (DDI) server during test runs. DDI is a feature of Flutter that helps identify and report data dependencies between tests, allowing you to analyze potential issues with test isolation. When running tests with the `flutter drive` command, you can pass this flag followed by an integer number, for instance, `--dds-port 9012`, to customize the default port used for DDI server communication.'
        debug: '[AI] `flutter drive --debug` is a command used in Flutter development to run and test an application in the background with debugging capabilities. It starts a new instance of the Flutter driver, attaches a debugger to it, and launches the specified application. This is useful for testing and debugging complex scenarios or interactions that require real-time feedback and inspection of the application state. The `--debug` flag enables the debugging mode in the driver, allowing you to use common IDE debugging tools, such as setting breakpoints or inspecting variables, while your app runs in an emulator or physical device.'
        device-timeout: '[AI] `flutter drive` is a Flutter development tool used to test and debug your app on an emulator or physical device. The `--device-timeout` option sets a timeout (in seconds) for the connected device during automated tests. If the device does not respond within this time limit, the test will be marked as failed. This helps prevent tests from hanging indefinitely due to slow or unresponsive devices.'
        device-user: '[AI] The `--device-user` flag in Flutter''s `drive` command is used to specify a custom user and group ID when running tests or building apps on a remote device via Flutter''s test and build services (formerly known as Firebase Test Lab and App Distribution). This is necessary when the default user IDs do not match the IDs used by your development environment or the target device. Providing the correct user IDs ensures that the tests run with the appropriate permissions and can access files, directories, or resources required for successful execution.'
        device-vmservice-port: '[AI] The `--device-vmservice-port` flag in Flutter''s `drive` command is used to specify a custom port number for the VM Service (Virtual Machine Service) that Flutter Drive uses to communicate with an Android or iOS emulator or device. When running tests, building apps, or inspecting elements using the Chrome DevTools during development, you may encounter situations where the default port conflicts with other services on your machine. In such cases, specifying a custom port number using this flag helps avoid any conflicts and ensures a smooth development process.'
        driver: '[AI] The `flutter drive --driver` command is used to run a Flutter application in the background using the Flutter driver package. It launches the test harness and connects to the running app instance, allowing you to interact with it through tests or manually via the REPL (Read-Evaluate-Print Loop). This is often employed for end-to-end testing or automated UI testing in a headless mode.'
        driver-port: '[AI] `flutter drive` is a Flutter development tool used to test and debug applications. The `--driver-port` option is a command-line argument that specifies the port number on which the Flutter driver listens for incoming connections from test runners or IDEs. By default, it uses an available random port. However, if you want to use a specific port, you can pass it via `--driver-port <port_number>` to ensure consistency across runs or to facilitate communication between multiple projects.'
        dump-skp-on-shader-compilation: |-
            [AI] `flutter drive` is a command-line tool used for testing and developing Flutter applications. The option `--dump-skp-on-shader-compilation` is used to enable Skia's production mode shader caching during testing or development.

            Skia is the 2D rendering engine that Flutter uses. This option instructs Flutter to write Skia's production mode shader cache files into the output directory during the shader compilation process, making it easier for subsequent runs of the application to use the pre-compiled shaders, thus speeding up the build and test processes.
        endless-trace-buffer: '[AI] `flutter drive --endless-trace-buffer` is a command used in Flutter development for testing and debugging. It starts a test or runs an application in the background with an endless trace buffer, meaning it continuously collects and displays detailed logs output without stopping. This can be helpful when dealing with long-running tests or complex applications to identify hard-to-find issues or performance bottlenecks.'
        flavor: '[AI] The `--flavor` option in Flutter''s `drive` command is used to specify which Flavor of an application to test or build. A Flavor is a named configuration that can be used to customize the same codebase for different environments, such as staging and production, or for creating multiple versions of the same app with slightly different features. It can affect things like build type (debug or release), application ID, version name or number, and other settings specific to each environment. By using `--flavor` with `drive`, you can test your application in a specific environment configuration.'
        headless: '[AI] `flutter drive --headless` is a command used in Flutter, a mobile application development framework. This command launches and tests an app in the background without a user interface (UI), making it ideal for continuous integration (CI) or automated testing scenarios. By using `--headless`, you can run your tests faster and more efficiently as there''s no need to render the UI, thus saving time and resources.'
        help: '[AI] `flutter drive --help` is a command used in Flutter, a mobile app development framework, to display help information about the ''drive'' tool. This command provides an overview of what ''flutter drive'' does and how it can be used to test and run apps on various devices or emulators. It includes details on arguments for specifying device targets, enabling hot reload, and other options for customizing the testing process.'
        host-vmservice-port: '[AI] `flutter drive` is a command-line tool used for testing and driving Flutter applications. The option `--host-vmservice-port` specifies the port number that Flutter''s Virtual Machine Service (VMS) listens on, allowing communication between the IDE, test runner, and the application under test running inside DartVM or in a mobile emulator or physical device. By default, this port is set to 5069. You can override it with this flag for specific use cases.'
        keep-app-running: '[AI] `flutter drive --keep-app-running` is a command used in Flutter development for testing and driving an application. The `--keep-app-running` option keeps the tested app running after tests have finished, allowing for continuous integration or background functionality tests without having to start the app every time. It helps to maintain a persistent connection between the test environment and the app instance.'
        no-android-emulator: '[AI] `flutter drive` is a Flutter development tool used to test and deploy applications. The option `--no-android-emulator` disables using an Android emulator in the testing process. Instead, it uses a physical or connected Android device for testing the application directly. This can lead to more accurate results as real devices may have different behavior compared to emulators.'
        no-build: '[AI] The `flutter drive --no-build` command is used in Flutter development to run tests or interact with a running app without recompiling the code. This can be useful when making UI-level changes or testing existing functionality. The `--no-build` flag prevents Flutter from rebuilding your application before starting the test or serving the app for interaction. Instead, it uses the previously built binary to save time and resources during development.'
        no-headless: '[AI] `flutter drive --no-headless` is a command used in Flutter development for testing and driving applications. The `--no-headless` flag disables the creation of a headless test mode''s GUI, which runs tests without the need for user interaction but does not produce a visual output. It is primarily used when running automated tests or performing continuous integration tasks where no graphical interface is required.'
        no-keep-app-running: '[AI] The `flutter drive` command is a Flutter development tool used to test and interact with a Flutter application in the context of an entire widget tree, including its dependencies. The option `--no-keep-app-running` instructs the command not to keep the application running after tests or interactions have ended. In other words, it allows the test or interaction session to be run to completion and then exits the application. This is useful when running automated tests or one-off interactions without needing to leave the command line interface.'
        no-null-assertions: '[AI] The `--no-negative-assertions` flag in Flutter is used to disable the null safety feature during dart compilation. With this option, Dart compiler does not check for potential null values and allows the code to compile even if it contains unchecked null references. It''s important to note that disabling null safety might lead to runtime errors and inconsistent behavior in your application. Therefore, it should be used with caution, and only when necessary for specific use cases.'
        no-start-paused: '[AI] `flutter drive --no-start-paused` is a command used in Flutter development to run and test an application on an emulator or physical device without automatically pausing at the first breakpoint it encounters. The `--no-start-paused` flag instructs the Flutter test runner not to pause execution when a test starts, allowing tests to run continuously and more quickly. This is particularly useful for large test suites where manual intervention to continue testing can significantly increase the overall test run time.'
        no-track-widget-creation: '[AI] `flutter drive` is a command-line tool in Flutter for testing and driving your application from the terminal. The option `--no-track-widget-creation` disables the creation of tracked widgets during test runs. Tracked widgets are widgets that Flutter identifies as being tested, and it provides extra features like rebuilding them when their state changes to simulate user interactions or record test output. When this option is used, Flutter will run your tests without creating or interacting with tracked widgets, which can be useful for testing certain types of widgets or testing workflows that don''t rely on user interactions.'
        null-assertions: |-
            [AI] The `--null-assertions` flag in Dart is used when running the Flutter test command (`flutter drive`) to disable null safety checks for the project. This allows the code to proceed even if it attempts to access a property or call a method on a null object.

            Using this flag can lead to potential NullPointerExceptions at runtime, as it overrides Dart's built-in null safety protections. It should be used with caution and only when testing edge cases where handling null values is not an option.

            In summary, the `--null-assertions` flag disables null safety checks in Flutter tests, allowing potentially null objects to be treated as non-nullable without checking for null values.
        profile: '[AI] `flutter drive --profile` is a command used in Flutter development for profiling and analyzing Dart application performance. It launches an application in a test driver mode with a specified profile, allowing you to collect and analyze CPU, memory, and I/O usage statistics, as well as other performance metrics. The collected data can be used to identify and optimize performance bottlenecks.'
        profile-memory: '[AI] `flutter drive` is a Flutter development tool that provides hot reloading and testing capabilities for mobile applications. The `--profile-memory` option is used to generate a memory profile report during the testing or driving of your Flutter application. This report will help identify memory consumption patterns and potential memory leaks, providing insights into optimizing your application''s memory usage.'
        purge-persistent-cache: '[AI] `flutter drive --purge-persistent-cache` is a command used in Flutter development to clear the persistent cache created by the Flutter DevTools when using the Flutter driver for testing or debugging. This cache stores data such as logs, screenshots, and other artifacts to help with analyzing and inspecting the running tests or applications. However, over time, this cache can accumulate large amounts of data, leading to increased storage usage and potentially slower performance. By using `--purge-persistent-cache`, you can remove this data, freeing up disk space and improving the overall efficiency of your development workflow.'
        release: '[AI] `flutter drive --release` is a command used in Flutter development to build and run tests or a release-mode app in the background on a connected device or emulator. The `--release` flag optimizes the compiled code for smaller size and faster execution compared to the default debug mode. This command is suitable for continuous integration, testing automation, and production deployment scenarios.'
        route: '[AI] `flutter drive --route` is a command used in Flutter development for testing and interacting with a running app. This command launches a new instance of the test runner in the background, and opens the application in a Chrome or WebKit-based browser with the connected device or emulator. The `--route` option specifies the URL path to navigate to within the app after launch. It''s useful for testing specific app routes and interactions.'
        screenshot: '[AI] `flutter drive --screenshot` is a command used in Flutter development to take a screenshot of the currently running test or UI test on an emulator or physical device. The Flutter Test framework provides this functionality as part of its testing tools. When you run this command, it launches your app under test, runs the tests, and takes a snapshot of the screen when a test passes or fails. The screenshot is saved in the `test_outputs/flutter_web` or `test_output/<device>` directories, depending on whether you''re testing for web or mobile platforms.'
        start-paused: '[AI] `flutter drive --start-paused` is a command used in Flutter development to start the test driver with the application in a paused state. This allows you to manually inspect and interact with the app''s user interface before continuing the test execution. It can be useful for setting up initial conditions or debugging test cases.'
        target: '[AI] `flutter drive --target` is a command used in Flutter development to run and test an application in the background or on a connected device, emulator or simulator. The `--target` option specifies which Flutter project or entry point to use for driving. It can be a Dart file name, a test file name with `._test.dart` extension, or an entrypoint specified in the `flutter.json` file under the `"flutter"` key named `"main"` or `"test"`. For example, `flutter drive --target=my_project.dart` or `flutter drive --target=my_project._test.dart`. This command is useful for running and observing tests, rebuilding apps on devices, or keeping a test runner in the foreground while performing automated UI testing with tools like Testing Library.'
        test-arguments: |-
            [AI] `flutter drive --test-arguments` is a command used in Flutter, a mobile app development framework. This command is used to run tests with specific arguments that can be passed to individual test files. The `--test-arguments` option allows you to provide extra command line arguments that will be sent to the test runner when executing the tests. For example:

            ```bash
            flutter drive --test-args="--filter=my_test.dart"
            ```

            This command runs all tests in the project, but only the ones with a file name matching "my\_test.dart". The `--test-arguments` flag enables passing custom arguments to the test runner, which can be used for various purposes such as setting environment variables or changing test behavior.
        trace-skia: '[AI] `flutter drive --trace-skia` is a command used in Flutter development to enable Skia tracing during testing or driving an application. Skia is the open-source 2D and 3D graphics library behind Flutter, which enables fast rendering on various platforms. The `--trace-skia` flag records detailed Skia API calls made by your Flutter app for debugging and performance analysis purposes. This information can be later saved as a file or streamed in real time to help identify and fix graphic-related issues.'
        trace-startup: '[AI] `flutter drive` is a command-line tool in Flutter, a mobile application development framework, used to test and build applications. The `--trace-startup` option is used to generate a detailed startup trace for the application. It records all Dart initialization messages during the application''s startup process, helping developers identify issues related to performance, configuration errors or dependencies. This information can be saved to a file for further analysis.'
        trace-systrace: |-
            [AI] `flutter drive` is a command-line tool provided by Flutter for testing and driving Dart applications. The `--trace-systrace` option enables System Trace (systrace) output during the test execution.

            System Trace is a profiling tool from Android Studio that helps identify performance bottlenecks in native code. When `--trace-systrace` is used, Flutter drive generates a systrace file which contains detailed information about the system resources usage and call stacks of your app during test execution.

            This data can be further analyzed using Android Studio's Profiler tools or other third-party tools to identify potential performance issues in your app.
        track-widget-creation: '[AI] `flutter drive` is a Flutter development tool that provides hot reloadable test runs of your application. The `--track-widget-creation` argument is an option for this command. It enables tracking of widget creation during testing, which helps in debugging and understanding the lifecycle of widgets in your application. When this flag is used, Flutter will print out detailed information about each widget being created during test runs, including the widget type, construction time, and parent widget. This can be useful for identifying performance issues or verifying the correctness of widget rendering during tests.'
        use-application-binary: '[AI] `flutter drive --use-application-binary` is a command used in Flutter development to test and interact with an already built application binary instead of rebuilding it during test execution. This can save time, especially for large projects or when testing multiple scenarios with the same application instance. The binary should be located at a specified path and must be built with the same project configuration as the testing environment.'
        use-existing-app: '[AI] `flutter drive --use-existing-app` is a command used in Flutter development to test and interact with an existing Flutter application using Flutter''s built-in test runner and server, without having to build the project from scratch every time. It allows you to connect your IDE or terminal to the running app, making it easier to debug and modify the code during testing.'
        verbose-system-logs: '[AI] `flutter drive` is a command-line tool provided by Flutter to test and drive applications from the command line. The option `--verbose-system-logs` is used to increase the amount of output produced during testing or driving an application. It specifically relates to system logs, meaning it will print more detailed information about the operating system''s actions and interactions with the application under test. This can be helpful for debugging system-level issues or gaining a better understanding of how the application interacts with the underlying system.'
        web-renderer: '[AI] `flutter drive` is a command-line tool in Flutter, a mobile app development framework by Google. It is used to run and test your application with hot reload. The option `--web-renderer` tells Flutter to launch the application in a web context using Chrome or Chromium as the rendering engine instead of the default mobile emulator. In other words, it builds and runs your Flutter app in the browser for web testing.'
        write-sksl-on-exit: '[AI] `flutter drive` is a Flutter development tool for testing and driving your application in various environments. The option `--write-sksl-on-exit` instructs it to write Skia shader language (SKSL) files upon test execution termination. These files can be used for analyzing or modifying the shaders that are being used by your Flutter app, which might be useful during debugging or performance optimization.'
