# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: drain NODE
description: Drain node in preparation for maintenance
group: cluster management
flags:
    --chunk-size=: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.
    --delete-emptydir-data: Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).
    --delete-local-data&: Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).
    --disable-eviction: Force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --force: Continue even if there are pods that do not declare a controller.
    --grace-period=: Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
    --ignore-daemonsets: Ignore DaemonSet-managed pods.
    --pod-selector=: Label selector to filter pods on the node
    --skip-wait-for-delete-timeout=: If pod DeletionTimestamp older than N seconds, skip waiting for the pod.  Seconds must be greater than 0 to skip.
    --timeout=: The length of time to wait before giving up, zero means infinite
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
documentation:
    command: '[AI] `kubectl drain` is a Kubernetes command used to evict all pods from a worker node, making it offline for maintenance or updates without disrupting the running applications. It does this by pausing new pod assignments and draining the existing ones, which are then terminated with their respective deployments if not gracefully terminated within a configurable timeout. The node becomes unschedulable until it''s marked back online with `kubectl add node` or when its condition in the Kubernetes API changes.'
    flag:
        chunk-size: '[AI] `kubectl drain` is a command-line tool used in Kubernetes to evict and delete nodes from the cluster. The `--chunk-size` flag specifies the number of pods to be evicted at once during node draining. This flag helps control the rate of pod termination to avoid overwhelming the node with too many terminations at once, thus ensuring a graceful shutdown process. A larger chunk size will result in fewer iterations but a more disruptive process, while a smaller chunk size will result in more iterations but a less disruptive process. The default value for `--chunk-size` is 25%.'
        delete-emptydir-data: '[AI] `kubectl drain --delete-emptydir-data` is a command used in Kubernetes to drain nodes of their workloads and delete empty DirectoryData volumes. When a node is drained, no new pods can be scheduled on it, and all running pods are terminated with a grace period. The `--delete-emptydir-data` flag further instructs `kubectl drain` to also delete any empty DirectoryData volumes that were created for the pods on that node but are now empty since their pods have been evicted or deleted. This helps ensure that unused data is cleaned up and resources are efficiently utilized in the Kubernetes cluster.'
        delete-local-data: |-
            [AI] `kubectl drain --delete-local-data` is a command used in Kubernetes to drain nodes of their workloads and delete local data stored on those nodes. The command does the following:

            1. Evicts all running pods on the node, making them unschedulable.
            2. Stops any new pods from being scheduled on that node.
            3. Deletes persistent volumes local to that node (specified with `--delete-local-data` flag).

            This command is typically used before maintenance tasks, such as node updates or decommissioning, and ensures data consistency in the cluster by moving all critical stateful workloads off the drained node.
        disable-eviction: '[AI] `kubectl drain --disable-eviction` is a command used in Kubernetes to forcibly evict all pods from a node, while disabling the node''s eviction protections. This means that even if there are critical workloads running on the node, they will be terminated when this command is executed. This command should only be used when it''s necessary to perform maintenance or upgrades on the node, and you are certain no pods should remain on it. It can also be useful in cases where a node needs to be taken offline permanently. Keep in mind that using this command may cause data loss and downtime for applications running on the affected nodes.'
        dry-run: '[AI] `kubectl drain --dry-run` is a command used with the Kubernetes `kubectl` tool to simulate the effect of draining nodes without actually performing the action. Draining a node removes all the running pods from it, making it ready for maintenance or removal from the cluster. The `--dry-run` option provides a preview of what would be done if the command were executed without causing any changes to the cluster state. This can help users understand the impact of their actions before actually performing them.'
        force: '[AI] `kubectl drain --force` is a command used in Kubernetes to forcibly evacuate nodes from a cluster. This means that all running pods on the node will be terminated and deleted, and their workloads will be rescheduled onto other available nodes. The `--force` flag is used to bypass certain safety checks and confirmations, making the operation more aggressive and potentially risky. It''s important to use this command with caution and only when absolutely necessary, as it can lead to data loss or application downtime if not done correctly.'
        grace-period: '[AI] `kubectl drain --grace-period` is a command used in Kubernetes to forcibly drain nodes of their pods, making them ready for maintenance or removal from the cluster. The `--grace-period` flag sets a delay before considering nodes completely drained. During this period, Kubernetes will try to reschedule evicted pods on other nodes, allowing the node being drained to finish any ongoing tasks gracefully and minimize potential disruption to running applications.'
        ignore-daemonsets: '[AI] `kubectl drain` is a command in Kubernetes used to evacuate nodes from a cluster, making them ready for maintenance or removal. The `--ignore-daemonsets` flag modifies the default behavior of `kubectl drain`. With this flag, DaemonSets are not drained, meaning their pods will remain running on the node being evacuated. This can be useful when you want to avoid disrupting certain services that are managed as DaemonSets.'
        pod-selector: '[AI] `kubectl drain` is a command-line tool used in Kubernetes to drain nodes of their pods, making them read-only and preparing them for maintenance or removal from the cluster. The option `--pod-selector` allows specifying a label selector to target specific pods on the node being drained. These pods will be evicted along with their associated volumes and configurations during the drain process, ensuring minimal downtime or data loss when performing node upgrades or maintenance.'
        selector: '[AI] `kubectl drain --selector` is a command used in Kubernetes to evict and delete pods that match the given label selector. This operation drains nodes of their workloads, preparing them for maintenance or removal from the cluster. The flag `--selector` specifies which pods to be evicted based on the provided label key-value pairs. For instance, `--selector=app=myApp` will drain nodes with pods labeled ''app=myApp''. It''s important to note that using this command may affect your applications and services, so it should be used carefully and only when necessary.'
        skip-wait-for-delete-timeout: |-
            [AI] `kubectl drain` is a command used in Kubernetes to drain nodes, which means evicting all running pods and making the node unschedulable. The option `--skip-wait-for-delete-timeout` is used to bypass the default wait-for-delete timeout when deleting persistent volumes or other resources associated with the drained node.

            When you delete a node in Kubernetes, there's a delay (default is 30 minutes) before the node is considered permanently deleted. During this period, if you attempt to use `kubectl drain`, it will wait for this timeout to elapse before proceeding. The `--skip-wait-for-delete-timeout` flag lets you forcefully bypass this delay and continue with the drain operation even if the node's resources have not yet been deleted. However, be aware that using this option may result in data loss or other unexpected behavior if the associated resources are not managed properly.
        timeout: '[AI] `kubectl drain` is a command-line tool used in Kubernetes to drain nodes of their workloads for maintenance or evacuation. The `--timeout` flag sets the maximum duration that `kubectl` should wait for nodes to terminate their pods before forcefully terminating them. If not specified, it defaults to no timeout. A non-zero value is provided in seconds, and if a pod does not terminate within that time, `kubectl drain` will use the node''s taint to prevent new pods from being scheduled on it.'
