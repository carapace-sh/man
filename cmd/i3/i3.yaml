# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: i3
description: an improved dynamic, tiling window manager
flags:
    --force-xinerama: Use Xinerama instead of RandR.
    --get-socketpath: Retrieve the i3 IPC socket path from X11, print it, then exit.
    --shmlog-size=: Limits the size of the i3 SHM log to <limit> bytes.
    -C: validate configuration file and exit
    -L=: path to the serialized layout during restarts
    -V: enable verbose mode
    -a: disable autostart ('exec' lines in config)
    -c=: use the provided configfile instead
    -d=: enable debug output
    -v: display version and exit
documentation:
    command: '[AI] i3 is a tiling window manager for Linux and other Unix-like operating systems. It arranges windows in tiles of specified dimensions and allows users to create custom layouts, workspaces, and shortckeys for efficient multi-tasking. i3 is known for its minimalistic design, low resource usage, and extensibility through configuration files or the built-in Lua scripting language.'
    flag:
        C: '[AI] The `i3` command with the `-C` flag is used in i3WM (i3 Window Manager), a popular tiling window manager for Linux and Unix systems. The `-C` option stands for "configure" or "reconfigure". When you run `i3` with this flag, it enters a mode where you can edit the window manager''s configuration file interactively using the i3''s built-in text editor. This is useful when you want to make adjustments to your i3 settings without editing the file manually.'
        L: '[AI] The `-L` flag in i3 window manager is used to enable tiling mode layouts. With this option, windows are arranged in a grid or tile layout, filling up the entire screen or workspaces. The `i3` command without any flags runs the i3 window manager.'
        V: '[AI] `i3` is a popular tiling window manager for Linux and other Unix-like operating systems. The command `i3 -V` is used to display the version information of the installed `i3` window manager. When executed, it will print out the major.minor version number, along with any relevant build information such as the commit hash or build date.'
        a: '[AI] The `i3` command with the `-a` flag is used in the i3 window manager for Linux to attach a workspace (or container) to all available output ports of a display or monitor. In simpler terms, it attaches the current workspace to all available screens or monitors connected to the system.'
        c: '[AI] The `i3` command with the flag `-c` is used to create or open a new container in the i3 window manager. The container is essentially a grouping of windows or workspaces that can be managed together. This flag is typically used in combination with other flags or commands, such as specifying the name or layout of the container. For example, `i3-msg "workspace new --name my_project --layout grid"` would create a new workspace named "my\_project" with a grid layout.'
        d: '[AI] The `i3` command with the `-d` flag is used in the i3 window manager for Linux to run a command or script in the background and display its output in the status bar of the i3 window manager. The `i3` command itself is used to interactively manage windows, sessions, and workspaces. The `-d` flag stands for "detached," meaning that the command or script runs in the background and does not block further interaction with the i3 terminal or shell from which it was called.'
        force-xinerama: |-
            [AI] The `--force-xinerama` flag is a command-line option for the i3 window manager, which is a popular and efficient tiling window manager for Linux and Unix systems. This option is used to enforce Xinerama, a multi-head extension of the X Window System.

            Xinerama allows sharing a single X server among multiple physical displays or monitors. When `--force-xinerama` is passed to i3, it ensures that all connected displays are configured and managed as a single, logical display, even if they have different resolutions, color depths, or other characteristics. This enables seamless tiling window management across multiple screens.
        get-socketpath: |-
            [AI] `i3` is a popular open-source window manager for Linux and Unix systems. The `--get-socketpath` option is not a common command for users, but rather an internal utility for interacting with the i3 socket.

            The socket is a mechanism for inter-process communication (IPC), allowing different processes to exchange information. In the context of i3, the socket enables interaction between the i3wm window manager process and other applications or scripts.

            By using `i3 --get-socketpath`, you can obtain the location of the i3 socket file. This is often required when writing custom i3 scripts or configurations that need to communicate with the running i3wm process. The socket path information is returned as a single line output, similar to:

            ```bash
            /var/run/user/<USERNAME>/i3/wayland-0.sock
            ```

            Replace `<USERNAME>` with your current user account name on your Linux system. Keep in mind that this command should be executed as the user for which you want to obtain the socket path.
        shmlog-size: '[AI] The `--shmlog-size` flag in i3 window manager configuration sets the size of the shared memory log file. This log file is used to store event data for the i3wm instance, enabling event replay and troubleshooting. The value following this flag specifies the maximum size of the log file in bytes.'
        v: '[AI] The `i3` command with the flag `-v` is used to start the i3 window manager in verbose mode. This means that i3 will print out detailed information about its actions and events while it initializes and starts up, which can be useful for debugging or understanding what i3 is doing behind the scenes.'
