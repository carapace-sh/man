# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gen-l10n
description: Generate localizations for the current project
flags:
    --arb-dir=: The directory where the template and translated arb files are located.
    --gen-inputs-and-outputs-list=: When specified, the tool generates a JSON file containing the tool's inputs and outputs named gen_l10n_inputs_and_outputs.json.
    --header-file=: The header to prepend to the generated Dart localizations files.
    --header=: The header to prepend to the generated Dart localizations files.
    --no-nullable-getter: Localizations class getter is not nullable.
    --no-required-resource-attributes: Does not equire all resource ids to contain a corresponding resource attribute.
    --no-synthetic-package: 'Disable generated output files. '
    --no-use-deferred-loading: Do not generate the Dart localization file with locales imported as deferred.
    --nullable-getter: Localizations class getter is nullable.
    --output-class=: The Dart class name to use for the output localization and localizations delegate classes.
    --output-dir=: The directory where the generated localization classes will be written if the synthetic-package flag is set to false.
    --output-localization-file=: The filename for the output localization and localizations delegate classes.
    --preferred-supported-locales=: The list of preferred supported locales for the application.
    --project-dir=: Directory of the root Flutter project.
    --required-resource-attributes: Requires all resource ids to contain a corresponding resource attribute.
    --synthetic-package: Enable generated output files.
    --template-arb-file=: The template arb file that will be used as the basis for generating the Dart localization and messages files.
    --untranslated-messages-file=: The location of a file that describes the localization messages have not been translated yet.
    --use-deferred-loading: Generate the Dart localization file with locales imported as deferred.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `flutter gen-l10n` is a Flutter CLI command used to generate localization files based on the existing code annotated with `@override` decorators for localized strings. This command utilizes the Flutter''s built-in internationalization (i18n) support and the gen_l10n tool to create or update localization resources in your project, making it easier to handle translations for different languages.'
    flag:
        arb-dir: '[AI] `flutter gen-l10n --arb-dir` is a command used in Flutter development for generating localized messages and extracting translations from source code into separate `.arb` files. The `--arb-dir` option specifies the directory where the generated `.arb` files will be placed. It simplifies the process of managing and updating translations across multiple platforms and languages in a Flutter project.'
        gen-inputs-and-outputs-list: '[AI] `flutter gen-l10n --gen-inputs-and-outputs-list` is a command used in Flutter for generating localization files. It specifically generates lists of input and output file paths for each locale, which are required for the rest of the localization generation process to complete successfully. This command doesn''t actually create or update any translation files, but instead prepares the necessary metadata for the following steps.'
        header: '[AI] `flutter gen-l10n --header` is a command used in Flutter for generating localized messages (l10n) files. The `--header` option adds custom header lines to the generated ` messages_all.dart` file, allowing developers to include additional information or metadata. This can be useful for documentation or versioning purposes.'
        header-file: '[AI] `flutter gen-l10n --header-file` is a command used in Flutter for generating localization files. The `--header-file` option specifies a file where the import statements for the generated localization files will be written. This is useful when working with large projects where manually adding import statements for each localization file can be tedious and error-prone. The resulting header file can then be included in the Dart code to automatically import all the generated localization files.'
        help: |-
            [AI] `flutter gen-l10n` is a command-line tool provided by Flutter for generating localized files based on your app's existing code annotations. The `--help` option is used to display detailed help and usage information about this command.

            Here's a brief summary of the help output:

            * `flutter gen-l10n` generates or updates localization files in the specified locales based on your app's source code annotations.
            * It supports various options such as `--base-locale`, `--output-dir`, and `--no-use-deferred- loading` to customize its behavior.
            * You can generate/update localization files for all supported locales or just a specific one using the `--localizations` option.
            * The tool uses your app's existing annotated messages, but it also allows you to provide a JSON file containing additional translations.
            * To use this command, navigate to your project directory and run the command in the terminal: `flutter gen-l10n`. For more details, use the `--help` option.
        no-nullable-getter: '[AI] The command `flutter gen-l10n --no-nullable-getter` is used in Flutter development for generating localization files based on the `messages_all.dart` file. The `--no-nullable-getter` flag disables the generation of nullable getters for localized strings. This can help ensure that null checks are explicitly written in the code, improving type safety and reducing potential runtime errors.'
        no-required-resource-attributes: '[AI] The `flutter gen-l10n --no-required-resource-attributes` command is used in Flutter for generating localization files. The `--no-required-resource-attributes` flag prevents the generation of required resource attributes in the `messages_all.dart` file. These attributes are added by default when using the `flutter gen-l10n` command, and they help in automatically setting the unique key for each localized string. However, if you prefer to manage these keys manually, you can use this flag to exclude them from the generated files.'
        no-synthetic-package: |-
            [AI] `flutter gen-l10n --no-synthetic-package` is a command used in Flutter development for generating localization files. The `gen-l10n` tool extracts localized strings from your code and generates the corresponding ` messages.arb` files, which can be edited by translators to provide localized versions of those strings.

            The `--no-synthetic-package` flag is optional but prevents Flutter from creating a synthetic package for localizations in the `pubspec.yaml` file. This means that the localization files will not be published as a separate package on `pub.dev`. Instead, the localized messages are directly referenced and imported in your application's code.
        no-use-deferred-loading: '[AI] `flutter gen-l10n --no-use-deferred-loading` is a command used in Flutter development to generate localization files. The `gen-l10n` tool extracts and generates localized versions of your app''s text and other resources from your codebase. The `--no-use-deferred-loading` flag disables the deferred loading feature, which means that all localized strings are loaded at once instead of being loaded lazily as needed. This might lead to larger initial application sizes but can simplify the localization process and improve app performance for specific use cases.'
        nullable-getter: '[AI] `flutter gen-l10n --nullable-getter` is a command used in Flutter for generating localization files. The `--nullable-getter` option is specifically used to handle nullable types in Dart, ensuring that getters for localized strings can return null values. This helps avoid runtime errors and enables proper handling of null cases in the application''s localization logic.'
        output-class: '[AI] `flutter gen-l10n --output-class` is a command used in Flutter for generating localization files. The `gen-l10n` tool generates localized messages based on the provided text keys and saves them into .arb files. The `--output-class` option specifies that the output of this command should be a Dart class file instead of the default JSON format, which makes it easier to use these generated localization classes in your Flutter application.'
        output-dir: '[AI] `flutter gen-l10n --output-dir` is a command used in Flutter development to generate localized messages and extractables for an application. The `--output-dir` option specifies the output directory where the generated files will be saved. This command utilizes the Flutter''s localization generation tool to process `msg` files, which contain translations, and generates corresponding `messages_<locale>.dart` files, as well as extractable resources for icons or images.'
        output-localization-file: '[AI] `flutter gen-l10n --output-localization-file` is a command used in Flutter development for generating and updating localized strings in an application. This command uses the Flutter''s `gen_l10n` tool to extract localizable strings from source code files, merge them into a single `messages.arb` file, and optionally update or generate missing translations based on the specified localization directories. The `--output-localization-file` flag specifies the output file name for the generated `messages.arb` file, which is used by Flutter''s localization system to load and display the translated strings in the application.'
        preferred-supported-locales: '[AI] `flutter gen-l10n --preferred-supported-locales` is a command used in Flutter development to generate localization files. The `--preferred-supported-locales` option specifies the list of locale codes preferred for localized strings in your application. This means, the application will prioritize these locales when loading translations and fall back to other available locales if needed. It helps ensure that your app is primarily translated into the preferred locales, improving the user experience for those audiences.'
        project-dir: '[AI] `flutter gen-l10n --project-dir` is a command used in Flutter development for generating localized message extractors and messages files based on existing text in the project. The `--project-dir` option specifies the absolute path to the project directory where the extraction will be performed. This command is often used before starting a localization process, helping to ensure that all necessary strings are extracted and properly identified for translation.'
        required-resource-attributes: '[AI] `flutter gen-l10n --required-resource-attributes` is a command used in Flutter development for generating localization files (.arb) based on Dart code annotated with localization keys. The `--required-resource-arguments` option specifies attributes that should be included as arguments in the generated resource entries, allowing for more dynamic localization content. This can be useful when dealing with complex translations or parameterized strings in your application.'
        synthetic-package: '[AI] `flutter gen-l10n --synthetic-package` is a command used in Flutter for generating localization files. The `--synthetic-package` option creates a new package (a ".g.dart" file) that can be published to the Flutter plugins registry. This command generates and compiles localized messages, making it easier to manage translations across different applications or projects.'
        template-arb-file: '[AI] `flutter gen-l10n --template-arb-file` is a command used in Flutter development for generating localization files (`.arb`) based on existing Dart source files annotated with the `@override` `LocaleKeys` class. The command automatically creates, updates, or manages the `.ar` and `.pot` files for each supported locale and generates a machine-readable template file in `.arb` format, which can be edited by translators to provide localized strings for your Flutter application.'
        untranslated-messages-file: '[AI] `flutter gen-l10n --untranslated-messages-file` is a command used in Flutter for generating localization files. The `--untranslated-messages-file` option specifies a file where all untranslated strings found in the application code will be written for further translation. This helps developers to keep track of strings that need localization and facilitates the process of ensuring complete coverage for their applications in various languages.'
        use-deferred-loading: |-
            [AI] `flutter gen-l10n --use-deferred-loading` is a command used in Flutter for generating localization files. This option, `--use-deferred-loading`, instructs the tool to use deferred loading for localized strings.

            Deferred loading means that instead of importing the entire generated localization file at once, Flutter imports only the required translations on demand. This approach can help reduce the size of the application by including only the necessary translations in the app at runtime, improving its overall performance and efficiency.
