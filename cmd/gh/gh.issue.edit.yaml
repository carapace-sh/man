# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: edit {<numbers> | <urls>}
description: Edit issues
group: Targeted commands
flags:
    --add-assignee*=: Add assigned users by their `login`. Use "@me" to assign yourself.
    --add-label*=: Add labels by `name`
    --add-project*=: Add the issue to projects by `name`
    --remove-assignee*=: Remove assigned users by their `login`. Use "@me" to unassign yourself.
    --remove-label*=: Remove labels by `name`
    --remove-project*=: Remove the issue from projects by `name`
    -F, --body-file=: Read body text from `file` (use "-" to read from standard input)
    -b, --body=: Set the new body.
    -m, --milestone=: Edit the milestone the issue belongs to by `name`
    -t, --title=: Set the new title.
documentation:
    command: '[AI] The `gh issue edit` command is used with the GitHub CLI (Command Line Interface) tool to edit an existing issue''s title or body. When you run this command, you specify the repository and issue number as arguments, and then modify the text in your default text editor before saving and committing the changes back to GitHub. This is a convenient way to update issue details without using the web interface.'
    flag:
        add-assignee: '[AI] `git hub issue edit --add-assignee` is a command used in GitHub''s Issue tracking system to assign a specific user to work on an open issue. This command can be run from the GitHub website or through the GitHub API using tools like cURL, Git, or other programming languages. The `--add-assignee` option allows you to specify the username of the person to be assigned to the issue. Once executed, the assignee will receive a notification about the assignment and can begin working on the issue. This command helps to streamline issue management by enabling quick and efficient assignment of tasks to team members.'
        add-label: '[AI] `gh issue edit --add-label` is a command used in GitHub''s command-line interface (CLI), `gh`, to add a label to an existing issue. It takes the issue number as an argument, followed by the label name. For example: `gh issue edit <issue_number> --add-label=bug`. This command enables users to manage their GitHub issues from the terminal.'
        add-project: |-
            [AI] The `gh issue edit --add-project` command is used with GitHub's `gh` CLI (Command Line Interface) tool to add a project label to an open issue on a GitHub repository. This command allows you to easily manage and organize issues based on the projects or initiatives they belong to, making it easier for team members to identify and prioritize them. To use this command, replace `<issue-number>` with the number of the specific issue you want to edit and `<project>` with the name of the project label:

            ```sh
            gh issue edit <issue-number> --add-project <project>
            ```

            This command will update the specified issue, adding the given project label to it. This can be useful when you want to quickly filter issues related to a specific project or initiative in your repository, making collaboration more efficient and effective.
        body: '[AI] `gh issue edit` is a GitHub CLI command used to edit the body of an existing issue in a repository. The `--body` option specifies the new content to be set as the issue description. After running this command, you''ll be prompted to enter or paste your desired text, and upon confirmation, the changes will be saved and applied to the GitHub issue.'
        body-file: '[AI] `gh issue edit` is a GitHub CLI command used to edit an issue''s body text. The `--body-file` option allows you to provide a local file path instead of typing or pasting the new content directly in the command line. This can be useful when working with large or complex text changes, as it enables you to edit the file using your preferred text editor before committing the change to the issue.'
        milestone: '[AI] The `gh issue edit --milestone` command is used with the GitHub CLI (github-cli) to update the milestone assignment for an existing issue. It modifies the specified issue by changing its associated milestone, allowing users to reassign issues to different project milestones as needed. This command can help manage and prioritize issues in a GitHub repository effectively.'
        remove-assignee: '[AI] The `gh issue edit --remove-assignee` command is a GitHub CLI (Command Line Interface) command used to remove an assignee from a specific issue. This command allows you to modify the details of an issue, including the assignee, labels, title, or body. By using the `--remove-assignee` option, you are instructing GitHub to delete the currently assigned user as the issue''s assignee without assigning a new one.'
        remove-label: '[AI] `gh issue edit --remove-label` is a command used in GitHub''s `git-hub` CLI tool for managing GitHub issues. It removes an existing label from an issue by its number or title, allowing you to modify the labels associated with a specific issue. This can be useful when updating the issue tracking workflow and removing irrelevant labels.'
        remove-project: '[AI] The `gh issue edit --remove-project` command is used with the GitHub CLI (gh) to remove a project association from an issue. This means that you can detach an issue from one repository and associate it with another, allowing for greater flexibility in managing issues across multiple projects. By using this command, you can modify the project field of an issue without having to open the issue in the GitHub web interface.'
        title: '[AI] `gh issue edit` is a GitHub CLI command used to edit an existing issue title on a GitHub repository. The `--title` option specifies the new title for the issue. When you run this command, it opens the editor interface in your default text editor (or in-terminal if you prefer), allowing you to modify the title before saving and committing the change back to the repository.'
