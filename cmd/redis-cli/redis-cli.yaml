# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: redis-cli
description: Redis command line interface
flags:
    --askpass: Force user to input password with mask from STDIN
    --bigkeys: Sample Redis keys looking for keys with many elements
    --cacert=: CA Certificate file to verify with
    --cacertdir=: Directory where trusted CA certificates are stored
    --cert=: Client certificate to authenticate with
    --cluster=: Cluster Manager command and arguments
    --csv: Output in CSV format
    --eval=: Send an EVAL command using the Lua script at <file>
    --functions-rdb=: Like --rdb but only get the functions when getting the RDB dump file
    --help: Output this help and exit
    --hotkeys: Sample Redis keys looking for hot keys
    --insecure: Allow insecure TLS connection by skipping cert validation
    --intrinsic-latency=: Run a test to measure intrinsic system latency
    --json: Output in JSON format
    --key=: Private key file to authenticate with
    --latency: Enter a special mode continuously sampling latency
    --latency-dist: Shows latency as a spectrum, requires xterm 256 colors
    --latency-history: Like --latency but tracking latency changes over time
    --ldb: Used with --eval enable the Redis Lua debugger
    --ldb-sync-mode: Like --ldb but uses the synchronous Lua debugger
    --lru-test=: Simulate a cache workload with an 80-20 distribution
    --memkeys: Sample Redis keys looking for keys consuming a lot of memory
    --memkeys-samples=: Sample Redis keys looking for keys consuming a lot of memory
    --no-auth-warning: Don't show warning message when using password on command line interface
    --no-raw: Force formatted output even when STDOUT is not a tty
    --pass=: Alias of -a for consistency with the new --user option
    --pattern=: Keys pattern when using the --scan, --bigkeys or --hotkeys options
    --pipe: Transfer raw Redis protocol from stdin to server
    --pipe-timeout=: In --pipe mode, abort with error if after sending all data
    --quoted-input: Force input to be handled as quoted strings
    --quoted-json: Same as --json, but produce ASCII-safe quoted strings, not Unicode
    --quoted-pattern=: Same as --pattern, but the specified string can be quoted
    --raw: Use raw formatting for replies
    --rdb=: Transfer an RDB dump from remote server to local file
    --replica: Simulate a replica showing commands received from the master
    --scan: List all keys using the SCAN command
    --show-pushes=: Whether to print RESP3 PUSH messages
    --sni=: Server name indication for TLS
    --stat: 'Print rolling stats about server: mem, clients, ...'
    --tls: Establish a secure TLS connection
    --tls-ciphers=: Sets the list of preferred ciphers
    --tls-ciphersuites=: Sets the list of preferred ciphersuites
    --user=: Used to send ACL style 'AUTH username pass'
    --verbose: Verbose mode
    --version: Output version and exit
    "-2": Start session in RESP2 protocol mode
    "-3": Start session in RESP3 protocol mode
    -D=: Delimiter between responses for raw formatting
    -X: Read <tag> argument from STDIN
    -a=: Password to use when connecting to the server
    -c: Enable cluster mode
    -d=: Delimiter between response bulks for raw formatting
    -e: Return exit error code when command execution fails
    -h=: Server hostname
    -i=: When -r is used, waits <interval> seconds per command
    -n=: Database number
    -p=: Server port
    -r=: Execute specified command N times
    -s=: Server socket
    -u=: Server URI.
    -x: Read last argument from STDIN
documentation:
    command: '[AI] `redis-cli` is a command-line interface tool for interacting with Redis databases. It allows users to execute various Redis commands, such as setting and getting keys, managing lists, hash tables, sorted sets, and more. Users can connect to one or multiple Redis instances using this tool and perform database operations in real time.'
    flag:
        "2": '[AI] `redis-cli` is a command-line interface tool for interacting with Redis databases. The option `-2` passed to it specifies that Redis Client Library version 2 should be used. This can be useful when working with specific Redis database versions or features only available in that version.'
        "3": '[AI] `redis-cli` is a command-line interface tool for interacting with Redis, an in-memory data structure store that can be used as a database, cache, and message broker. The flag `-3` is not part of the standard usage of `redis-cli`. It seems to be specific to certain Redis installations or configurations. Without more context, it''s impossible to determine what `-3` does exactly. However, it might suggest a connection to a Redis cluster with three nodes. Consult your Redis documentation for more information if you encounter this flag in practice.'
        D: '[AI] `redis-cli` is a command-line interface tool used to interact with Redis, an in-memory data structure store that can be used as a database, cache, and message broker. The option `-D` or `--databases` is used when connecting to a Redis instance running multiple databases. This flag allows the user to select which database to work with by specifying its number (0-15) after the `select` command. For example, `select 3;` would switch the connection to database 3. Without this flag, the default behavior is connecting to database 0.'
        X: '[AI] `redis-cli -X` is a command used with Redis CLI (Command Line Interface) client. The `-X` flag enables the execution of extended commands, also known as Lua scripts, in Redis. With this option, you can write scripts in the Lua programming language and run them inside Redis for data manipulation or processing. This can be useful when dealing with complex operations that are difficult to perform using standard Redis commands alone.'
        a: '[AI] `redis-cli` is a command-line interface tool used to interact with a Redis database. The option `-a` or `--ask-pass` is used to request the user to input the Redis password before connecting to the server. If no password is set, this option has no effect.'
        askpass: |-
            [AI] The `--askpass` flag is a command-line option for Redis CLI (Command Line Interface), which is a utility used to interact with a Redis database from the terminal.

            When this flag is set, Redis CLI will prompt you for a password before connecting to a Redis server that requires authentication. This is useful when you want to secure your Redis instance and prevent unauthorized access, especially in production environments or shared development environments. The password is entered interactively and not stored in plain text in the command history or configuration files.
        bigkeys: '[AI] The `redis-cli --bigkeys` command is a feature in Redis, an in-memory data structure store, used for scanning large keys in the database efficiently. When executed, this command enables the BigKeys mode in RedIS CLI (Command Line Interface), allowing you to execute `SCAN` and `SSCAN` commands with larger key counts than the default limit. This can be particularly useful when working with databases containing a large number of keys.'
        c: '[AI] `redis-cli` is a command-line interface tool for interacting with Redis databases. The option `-c <script>` is used to load and execute a Redis script file `<script>` from the command line. This allows for automating Redis tasks by defining a series of commands in a file, which can be executed with a single command using the `redis-cli -c` combination.'
        cacert: '[AI] The `redis-cli --cacert` option is used with Redis Client (CLI) to specify a CA (Certificate Authority) file for SSL/TLS certificate verification when connecting to a Redis server over a secure connection using the Redis Protocol. This helps ensure data security by verifying that the SSL/TLS certificate presented by the server matches an expected certificate from a trusted CA.'
        cacertdir: '[AI] `redis-cli --cacertdir` is a command-line option used with Redis Clients like redis-cli or redis-rb, which specifies the directory path containing Certificate Authority (CA) certificates for SSL/TLS encryption in Redis connections. The CA certificates are used to verify the identity of the server during secure connections. This option ensures secure communication between clients and servers by validating the SSL/TLS certificate presented by the Redis server.'
        cert: '[AI] The `--cert` option in Redis CLI (Command Line Interface) is used to specify a SSL/TLS certificate file when connecting to a Redis server over a secure connection using encryption. This option ensures data transmitted between the client and the server is encrypted, enhancing security. Provide the full path to the certificate file for correct authentication and communication.'
        cluster: |-
            [AI] `redis-cli --cluster` is a command-line interface (CLI) tool for Redis, a popular in-memory data structure store, used to connect and interact with a Redis cluster. A Redis cluster is a setup that provides high availability and read scalability by having multiple nodes, some of which are masters for write operations and others are slaves for read operations.

            The `--cluster` flag in the `redis-cli` command specifies that the tool should connect to a Redis cluster instead of a single node. When used, it automatically discovers the cluster members and their roles (master or slave) by connecting to the seed node provided as an argument, and then selects a random master for write operations.

            By default, `redis-cli` in cluster mode will route read operations to any available slave, ensuring that the load is distributed among the nodes. For more complex scenarios, you can manually specify which node to use for reads or writes by using the `--read-only <slave>` and `--master <master>` flags respectively.
        csv: '[AI] `redis-cli --csv` is a command-line argument used with Redis CLI (Command Line Interface) to enable CSV (Comma Separated Values) format output for data retrieved from Redis database. This option returns the results as tabular data, where each row corresponds to an individual key-value pair and columns represent key and value respectively. It simplifies further processing of the data using tools like Excel or other CSV-compatible software.'
        d: '[AI] The `redis-cli --db <dbid>` command is used to connect Redis CLI (Command Line Interface) to a specific database in a Redis server. The `<dbid>` is an integer representing the number of the desired database. For example, if you want to connect to database 3, use `redis-cli --db 3`. By default, Redis has 15 databases with 0 as the first database (or the current database when no DB is specified).'
        e: '[AI] `redis-cli -e` is a command used in Redis, an in-memory data structure store, to execute a single Redis command passed as an argument directly from the command line interface (CLI) of the Redis Client (redis-cli). The `-e` flag stands for "eval" or "execute," and it allows you to pass a Lua script or a Redis command as an argument, which is then executed when the client connects to the Redis server. So, using `redis-cli -e "COMMAND ARGUMENTS"` would execute the specified Redis command with its arguments on the connected Redis server.'
        eval: |-
            [AI] `redis-cli --eval` is a command used in Redis, an in-memory data store, to execute Lua scripts directly from the command-line interface (CLI). The `--eval` flag indicates that a Lua script follows the command in the same line. For example:

            ```bash
            redis-cli --eval "return 2 * 3" nameofyourrediskey spacekey
            ```

            This command will run the Lua expression `2 * 3` and print the result (6) to the console. The `nameofyourrediskey` and `spacekey` are placeholders for specific keys or databases you might be working with in Redis.
        functions-rdb: |-
            [AI] The `redis-cli --functions-rdb` is a command used with Redis CLI (Command Line Interface), which is a part of Redis database system. This option enables loading and saving Lua scripts as Redis data using RDB (Redis Database) snapshots.

            With this flag, you can save Lua functions defined in Redis as values of keys in the Redis database, along with regular data during an RDB snapshot. This makes it possible to restore those functions when loading an RDB dump file.

            This feature is especially useful for deployments where a set of pre-defined scripts should be available across multiple Redis instances or nodes. It helps maintain a consistent behavior and functionality across different environments, as the scripts do not need to be manually loaded every time you set up or restore a Redis instance.
        h: '[AI] `redis-cli -h` is a command used in Redis, an in-memory data structure store, to connect and interact with a Redis server using the command-line interface (CLI). The `-h` flag specifies the hostname or IP address of the Redis server to connect to. For example, `redis-cli -h localhost` will connect to a Redis server running on the local machine.'
        help: '[AI] `redis-cli --help` is a command used with the Redis Command Line Interface (CLI) tool to display comprehensive information about its usage and available options. The flag `--help` triggers the tool to output detailed help text, including commands, options, and usage examples. This assistance enables users to effectively interact with Redis databases and perform various tasks such as setting keys, manipulating strings, or implementing data structures like hashes and lists.'
        hotkeys: '[AI] `redis-cli --hotkeys` is a command-line argument for Redis Command Line Interface (CLI). It enables the use of keyboard shortcuts in the CLI for various actions such as saving, loading, executing scripts, and navigating the history. This option enhances user experience by increasing productivity and efficiency when working with Redis databases.'
        i: '[AI] `redis-cli -i` is a command used in Redis, an in-memory data structure store, to open a interactive Redis client interface from the terminal or command prompt. The `-i` flag specifies that the client should read commands from a file instead of the standard input. This allows users to execute a series of Redis commands stored in a file without having to manually type each one.'
        insecure: '[AI] The `redis-cli --insecure` command is used in Redis, an open-source in-memory data structure store, to connect to a Redis server over an unsecured connection (without SSL/TLS encryption). The `--insecure` flag tells the Redis Command Line Interface (CLI) tool to ignore any SSL certificate verification when connecting to the server. This can be useful for development or testing environments where SSL is not configured, but it should be used with caution in production settings due to potential security risks.'
        intrinsic-latency: '[AI] The `--intrinsic-latency` flag in Redis CLI (Command Line Interface) is used to measure and report the intrinsic latency of Redis commands. Intrinsic latency refers to the time it takes for a command to be processed by the Redis server itself, excluding network propagation delays and other external factors. This flag helps in evaluating the performance of Redis at the database level, providing valuable insights into the internal processing times of different Redis commands.'
        json: '[AI] `redis-cli --json` is a command-line argument used with Redis CLI (Command Line Interface) tool. This option enables JSON output format for Redis commands and responses. It allows users to interact with Redis in a more structured way, making it easier for applications or tools that deal with JSON data. JSON format provides a clearer representation of the data exchanged between Redis and the client.'
        key: '[AI] The `redis-cli --key` command is used in Redis, an in-memory data store, to interact with the key space. The `--key` option is passed to Redis Command Line Interface (CLI) client when you want to perform specific operations on a single Redis key. For instance, you can use this command to get, set, delete or inspect properties of a Redis key using various Redis commands like GET, SET, DELETE, or TYPE. This command is essential for managing and querying data stored in Redis as keys.'
        latency: '[AI] The `redis-cli --latency` command is a feature of Redis, an in-memory data structure store that can be used as a database, cache, and message broker. This command is used to measure the latency or round-trip time between Redis client and server. When executed with the Redis Command Line Interface (CLI), it enables the profiling of Redis operations, showing the time taken for each command, including the network latency, allowing for a more detailed analysis of the Redis performance.'
        latency-dist: '[AI] `redis-cli --latency-dist` is a command used with Redis, an in-memory data structure store, to measure and display the latency distribution of Redis commands. The `--latency-dist` flag enables the Redis CLI (Command Line Interface) client to collect and print detailed statistics about the time it takes for each Redis command to be processed by the server. This can help in diagnosing performance issues, identifying outliers, and assessing overall Redis server responsiveness.'
        latency-history: |-
            [AI] The `redis-cli --latency-history` command is a feature of Redis, an in-memory data structure store, used to interact with it using the command-line interface (CLI). This specific command displays the latency statistics for recent Redis operations.

            When you execute this command, Redis CLI will print out a list showing the number of requests, the minimum, average, maximum, and standard deviation of the response times in microseconds for each Redis operation category (like `GET`, `SET`, `LRANGE`, etc.) during the session or since the Redis server was last restarted. This can help you identify potential performance issues by highlighting commands that take longer to execute than others.
        ldb: '[AI] `redis-cli --ldb` is a command-line argument for Redis Clients such as redis-cli or redis-benchmark, provided by Redis databases. The `--ldb` flag enables the Large Dataset (LDb) mode in these clients. This mode allows efficient handling of large datasets by using multiple threads to process different parts of the dataset concurrently, which improves throughput and reduces latency during read and write operations. It is particularly useful for workloads requiring high I/O throughput or when dealing with massive data sets.'
        ldb-sync-mode: |-
            [AI] The `--ldb-sync-mode` flag in Redis CLI (Command Line Interface) is used to configure the sync mode for Redis's Largekey-Distributed Database (LDB). LDB is a Redis module that provides support for large keys and is particularly useful for handling data that exceeds the Redis limit of 512MB.

            When `--ldb-sync-mode` is set to `async`, Redis will asynchronously write data to disk without waiting for an acknowledgement from the operating system, resulting in faster writes but increased risk of data loss in case of a power failure or other unexpected shutdowns. When set to `fdatasync`, Redis will synchronously wait for the operating system to acknowledge that the data has been written to disk, ensuring data safety at the cost of slower write performance.
        lru-test: '[AI] `redis-cli --lru-test` is a command used in Redis, an in-memory data store, to perform an LRU (Least Recently Used) test. This test measures the performance of Redis when dealing with large amounts of data and evaluates the eviction policy based on the usage of keys. The `--lru-test` option is passed to the Redis command-line interface client (redis-cli) to initiate this specific test. It generates random key-value pairs and simulates access to them, removing the least recently used ones when the maximum limit is reached. The output provides statistics on hit rate, eviction rate, throughput, and latency, among other metrics.'
        memkeys: '[AI] `redis-cli --memkeys` is a command used with Redis, an in-memory data structure store, to query keys based on a given pattern in the memory of the Redis instance. The `--memkeys` flag is passed to the Redis Command Line Interface (CLI) tool and returns the keys in the current database that match the given pattern without performing any operation on them. This command helps in identifying and managing memory usage by finding the keys consuming the most memory.'
        memkeys-samples: '[AI] The `--memkeys-samples` flag is a command-line option for Redis CLI (Command Line Interface), which is a tool used to interact with a Redis database. This option allows you to retrieve a sample of keys along with their memory usage statistics, without having to specify each key individually. It simplifies the process of gathering memory usage information for a large number of keys in a Redis database.'
        "n": '[AI] The `redis-cli -n` command is used in Redis, an in-memory data structure store, to select a specific database or named keyspace when working with the Redis Command Line Interface (CLI). The `-n` option followed by an integer argument indicates the number of the database to work on. This allows users to interact with multiple databases within a single Redis instance without having to switch between them repeatedly.'
        no-auth-warning: '[AI] The `--no-auth-warning` flag is a command-line option for Redis CLI (Command Line Interface), which is used to interact with a Redis database. This option disables the warning message that would normally be displayed when connecting to a RedIS server without providing an authentication password. By using this flag, the connection process will not be interrupted by the warning and the user can proceed with executing commands against the Redis database without being prompted for a password. It is important to note that using `--no-auth-warning` implies that the Redis server is configured to require a password for access, and therefore, it should only be used in secure environments where the connection is trusted.'
        no-raw: '[AI] The `redis-cli --no-raw` command is used in Redis, an in-memory data structure store, to start the Redis Command Line Interface (CLI) without raw mode. With raw mode disabled (using `--no-raw`), the CLI interprets input lines as Redis commands and arguments instead of treating them as raw bytes. This makes it easier for users to interact with the Redis server by allowing them to write commands in a more human-readable format, without having to worry about encoding special characters or escaping spaces.'
        p: '[AI] The `redis-cli -p` command is used to connect to a Redis database server with the Redis Command Line Interface (CLI) tool, specifying the given port number instead of the default one (6379). The `-p` flag followed by the port number argument allows connecting to a non-default Redis server instance. For example, `redis-cli -p 6380` would connect to a Redis server running on port 6380 instead of the default one.'
        pass: '[AI] The `--pass` option in the Redis CLI (Command Line Interface) is used to specify a password for connecting to a Redis server. When you run `redis-cli --pass <password>`, it will establish a connection to the Redis server only if the given password matches the one set on the server. This provides an additional layer of security, as unauthorized users will be unable to access the Redis database without the correct password.'
        pattern: '[AI] `redis-cli --pattern` is a command-line argument used with Redis CLI (Command Line Interface) tool. The `--pattern` option enables the use of Redis pattern matching queries for keys. It allows users to search for keys based on a specified pattern, which can include wildcard characters such as ''?'' and ''*''. This feature helps in efficiently filtering and managing large sets of Redis keys.'
        pipe: '[AI] `redis-cli --pipe` is a command-line option for Redis CLI (Command Line Interface) tool. It enables piped input and output, allowing users to send multiple commands to Redis in one go through standard input (stdin), followed by data or keys, and receive responses as output stream (stdout). This mode improves performance when dealing with large datasets or complex Redis transactions.'
        pipe-timeout: '[AI] `redis-cli --pipe-timeout` is a command-line option for Redis CLI (Command Line Interface) tool. It sets the timeout duration in milliseconds for piped inputs and outputs when using Redis streams or pub/sub features. If data isn''t received within this time frame, the operation will be aborted. By default, there is no timeout set.'
        quoted-input: '[AI] The `--quoted-input` flag in Redis CLI (Command Line Interface) is used when working with data that contains spaces or special characters. With this option enabled, Redis interprets the input as a single string enclosed within double quotes (" "), allowing users to enter multiple key-value pairs separated by new lines, each as an individual quoted string, in a single command. This can be helpful when importing data with complex keys or values.'
        quoted-json: '[AI] The `redis-cli --quoted-json` is a command-line argument used with Redis CLI (Command Line Interface), which is a tool to interact with a Redis database. This flag modifies the output format of Redis commands that return JSON data, by ensuring that JSON keys are enclosed in double quotes. Without this flag, Redis may not return keys as strings, which could cause issues when parsing the output as JSON. For instance, if a key contains special characters or spaces, it would not be treated as a valid JSON key without the quotes. Overall, `--quoted-json` helps ensure that data returned from Redis is in a properly formatted JSON format.'
        quoted-pattern: '[AI] `redis-cli` is a command-line interface tool for interacting with Redis databases. The option `--quoted-pattern` is used to enable regular expression patterns in Redis queries with quoted meta-characters, which are characters that have special meanings in regex and need to be escaped. With this flag enabled, you can use regex patterns more complex than simple strings for Redis commands like `KEYS`, `SCAN`, or `MATCH`. For example, instead of `KEYS my*pattern`, you could use `KEYS --quoted-pattern my.*pattern` or `KEYS --quoted-pattern my[^]*.pattern`. This can be useful when dealing with keys that have complex naming patterns.'
        r: '[AI] The `redis-cli` command with the `-r` option is used to load a Redis script file from a local file instead of reading it from the standard input stream (which is the default behavior when no file is specified). This allows you to write complex Redis commands and scripts in external files, making it easier to manage, test, and reuse them. The general syntax would be `redis-cli <options> -r <script_file>`.'
        raw: '[AI] `redis-cli --raw` is a command-line option for Redis CLI (Command Line Interface) tool. It disables the automatic formatting of Redis responses and returns raw output. This can be useful when dealing with complex or customized Redis data structures, like Lua scripts or serialized data, which may not format correctly using default settings.'
        rdb: '[AI] The `redis-cli --rdb` command is used in Redis, an in-memory data structure store, to save or load a snapshot of the current database state into or from a local file. The `--rdb` option specifies that this operation should be performed using the RDB (Redis Database) format, which is a serialized representation of the Redis database. This command helps in performing point-in-time recovery or backup of the RedIS databases.'
        replica: '[AI] The `redis-cli --replica` command is used in Redis, an in-memory data structure store, to connect and interact with a replica server instead of a master node. A Redis replica is a read-only copy of a Redis database that maintains the same data as its master through periodic background syncs or on-demand full resynchronization. Using `redis-cli --replica` allows users to perform read-only operations and check the replication status between master and replica servers.'
        s: '[AI] `redis-cli -s` is a command line option for Redis CLI (Command Line Interface) tool. The `-s` or `--server` option allows users to connect to a specific Redis server instance instead of the default one, by specifying the connection string or IP address and port number in the format `localhost:6379`. This is useful when working with multiple Redis instances or running Redis in a distributed environment.'
        scan: '[AI] `redis-cli --scan` is a command in Redis Clients'' Interface (CLI) for Redis databases. It''s used to perform a recursive scan of the entire database, looking for keys that match a given pattern. The command takes an optional argument as a regex pattern and returns matching keys along with their types (string, list, set, sorted set, hash, or zone) and sizes in bytes. This feature is helpful in managing large databases by allowing easy discovery of specific data.'
        show-pushes: '[AI] The `redis-cli --show-pushes` command is a feature of Redis, an in-memory data structure store used as a database, cache, and message broker. This command is run in the Redis Command Line Interface (CLI) and displays information about all the transactions that were pushed to the server but not yet applied due to pipeline or multi commands. The flag `--show-pushes` enables the printing of these pending transactions along with their IDs, allowing users to monitor and manage them effectively.'
        sni: '[AI] The `--sni` option in Redis CLI (Command Line Interface) is used to set the Server Name Indication (SNI) during a TLS (Transport Layer Security) connection. SNI allows specifying the domain name of the server being connected to, which can be useful for Redis instances running behind a reverse proxy or load balancer. Setting `--sni` with a valid certificate ensures secure communication between client and server by verifying the server''s identity based on its presented certificate.'
        stat: '[AI] `redis-cli --stats` is a command used in Redis, an in-memory data structure store, to retrieve real-time statistics about the Redis instance. The command is typically run from the Redis Command Line Interface (CLI) and returns a JSON object containing various metrics such as memory usage, keyspace hits and misses, evictions, and various latencies. These statistics can be useful for monitoring Redis performance and resource utilization.'
        tls: '[AI] `redis-cli --tls` is a command used with the Redis CLI (Command Line Interface) tool to connect and interact with a Redis server over a secure TLS (Transport Layer Security) connection. The `--tls` option enables the use of TLS encryption for the connection, providing an added layer of security by encrypting data transmitted between the client and server.'
        tls-ciphers: |-
            [AI] The `--tls-ciphers` option in Redis CLI is used to specify the TLS (Transport Layer Security) cipher suites that should be allowed during a secure connection between Redis and the client.

            TLS cipher suites are cryptographic protocols that provide security for data transmitted over the network. They define the encryption algorithms, key exchange methods, and other security features used during the communication.

            By specifying `--tls-ciphers` with a comma-separated list of allowed cipher suites, you can restrict the Redis server to use only those cipher suites for secure connections. This helps ensure that your Redis installation complies with your organization's security policies and uses strong encryption methods.

            Example usage: `redis-cli --host localhost --port 6379 --tls-cert path/to/client.pem --tls-key path/to/client.key --tls-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:EDH+RC4:!ADH:!AECDH:!MD5`
        tls-ciphersuites: '[AI] The `--tls-ciphersuites` option in Redis CLI (Command Line Interface) is used to configure the TLS (Transport Layer Security) cipher suites that will be enabled during encrypted connections between the client and server. Cipher suites define the cryptographic algorithms used for encryption and decryption of data transmitted over the connection. By specifying a list of desired cipher suites with this option, users can ensure secure communication while adhering to their organization''s security policies or industry best practices.'
        u: '[AI] The `redis-cli --u` (or `--user`) option is used with Redis CLI (Command Line Interface) to specify a username for authentication when connecting to a Redis server. This flag ensures secure access to the Redis instance, helping prevent unauthorized access and maintaining data security.'
        user: '[AI] The `--user` option in Redis CLI (Command Line Interface) is used to specify a username when connecting to a Redis server that requires authentication. Without this option, Redis CLI does not provide an easy way to include user credentials during connection. By providing the `--user <username>` argument, Redis CLI includes the username in the connection request, allowing users to authenticate with their Redis instances securely.'
        verbose: '[AI] `redis-cli --verbose` is a command used in Redis, an in-memory data structure store, used as a client to interact with a Redis server. The `--verbose` option increases the amount of output produced by the client when performing commands. It provides more detailed information about each command execution, including the command''s ID and any relevant response or error messages. This can be helpful for debugging and understanding the flow of commands during testing or development.'
        version: '[AI] `redis-cli --version` is a command used to check the version information of Redis CLI (Command Line Interface), a tool for interacting with a Redis database. When executed, it prints out detailed information about the installed Redis CLI client and its connected Redis server, including their respective versions numbers.'
        x: '[AI] `redis-cli` is a command-line interface tool for interacting with Redis databases. The option `-x` enables an extended mode in redis-cli, which allows the use of a more expressive and powerful syntax for performing various Redis operations. In this mode, Redis commands are written in a more Redis-like way, using pipelining, multiple queries in a single request, and other advanced features. This can be particularly useful when working with complex data structures or large datasets.'
