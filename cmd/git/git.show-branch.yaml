# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: show-branch
description: Show branches and their commits
group: interrogator
flags:
    --color?: color '*!+-' corresponding to the branch
    --current: include the current branch
    --date-order: topologically sort, maintaining date order where possible
    --independent: show refs unreachable from any other ref
    --list: synonym to more=-1
    --merge-base: show possible merge bases
    --more?: show <n> more commits after the common ancestor
    --no-name: suppress naming strings
    --sha1-name: name commits with their object names
    --sparse: show merges reachable from only one tip
    --topics: show only commits not on the first branch
    --topo-order: show commits in topological order
    -a, --all: show remote-tracking and local branches
    -g, --reflog?: show <n> most recent ref-log entries starting at base
    -r, --remotes: show remote-tracking branches
documentation:
    command: '[AI] `git show-branch` is a Git command used to display the branch information for one or more branches. It shows the branch name, its upstream branch if any, the current commit on the branch, and the number of commits difference between the current branch and the upstream branch (if applicable). This command provides a summary view of branch status without checking out the branch.'
    flag:
        all: '[AI] `git show-branch --all` is a Git command used to display all branches in a repository along with their corresponding commit tips (latest commits). This command shows both local and remote branches, providing an overview of the current branching structure. It does not switch to any branch or make any changes; it''s purely informational.'
        color: '[AI] `git show-branch --color` is a Git command used to display the branch information with colored output. This command shows the current branch and all the branches that have merge conflicts with the current branch, with the names of conflicting branches highlighted in red. Additionally, it shows the number of commits on each branch and the commit status (such as "Ahead", "Behind" or "Up-to-date"). This command is useful for quickly identifying branches with merge conflicts when working on a shared repository.'
        current: '[AI] The `git show-branch --current` command is used to display the details of the current branch in Git, including its name, upstream connection (if any), and the commit hash at the tip of the branch. It''s a convenient way to check the status of your current Git branch without having to switch to the branch view or use other commands like `git status` or `git describe`.'
        date-order: '[AI] `git show-branch --date-order` is a Git command used to list the branches with their last commit information, sorted by the commits'' dates in ascending order (oldest first). This can help users visualize the branching history and identify which branches were created or merged when. It doesn''t create a new branch or modify any existing ones; it simply displays the information for reference.'
        independent: '[AI] `git show-branch --independent` is a Git command used to list the branches that have been merged into the current branch, but not yet fully incorporated. These are often referred to as "detached branches" or "dangling branches." The flag `--independent` shows only the branches that are completely independent of other branches, meaning they do not share any common commits with other branches. This command is helpful for identifying and managing isolated development lines within a Git repository.'
        list: '[AI] `git show-branch --list` is a Git command used to list all the branches, both local and remote, that have merge commits with the current branch. The output shows the branch name, its upstream branch if it exists, and the number of commits merged from that branch into the current one. It provides information about the merging history between different branches in a Git repository.'
        merge-base: '[AI] `git show-branch --merge-base` is a Git command used to display information about branches, specifically their merge bases. The merge base is the common ancestor commit between two branches, meaning it''s the most recent commit that both branches have in common. This command helps in understanding the merging relationship between different branches and can be useful when resolving merge conflicts or studying branch histories. It shows the name of the branch, the commit hash of its current tip, and the merge base commit hash.'
        more: '[AI] `git show-branch --more` is a Git command used to display more detailed information about branches. It provides an output similar to `git branch`, but with additional information such as the last commit message, author, and date for each branch tip. This command can be useful when trying to identify which branch contains the desired changes or when comparing the history of multiple branches.'
        no-name: '[AI] `git show-branch --no-name` is a command used in Git, a version control system. This command displays the branches that have been merged into the current branch, without showing the names of those branches. The output includes the commit message and the author information for each merge commit. This can be helpful when you want to see a list of merges without having to remember or look up the branch names.'
        reflog: '[AI] `git show-branch --reflog` is a Git command used to display the reflog, which is a record of all the commits that have been created and deleted in the current repository. This command specifically shows the branches and their associated reflogs. The reflog stores every commit message, author, date, and parent hash. It''s useful for recovering lost commits or branches in Git.'
        remotes: '[AI] `git show-branch --remotes` is a Git command used to display branches that have been set up in remote repositories, but not yet fetched or merged into the local repository. This command helps keep track of branches that exist on other Git repositories, allowing for easier collaboration and merging of code changes. By using `--remotes`, you can see a list of branches from your current perspective, without having to fetch them first. This information can be useful when planning merge strategies or coordinating development efforts across multiple teams or projects.'
        sha1-name: '[AI] `git show-branch` is a Git command used to display branch information, specifically the branch''s current HEAD commit and its associated messages and metadata. The `--sha1-name` option appends the SHA-1 hash of the commit to the output, providing a unique identifier for the given branch state. In summary, this command displays branch details with the added feature of showing the corresponding commit SHA-1.'
        sparse: '[AI] `git show-branch --sparse` is a Git command used to display the branches and their corresponding commit points, but with an added feature: sparse checkout. With this option, you can limit which parts of a repository are checked out during the operation. This allows for faster branch comparison by showing only the relevant files or directories between branches instead of checking out the entire repository.'
        topics: '[AI] The `git show-branch --topics` command displays a list of branches in Git that have been annotated with specific topic labels. These topic labels are often used to identify and manage feature branches or other development workstreams within a Git repository. By using this command, you can quickly see which branches have been assigned specific labels and get an overview of the ongoing development efforts in your project.'
        topo-order: '[AI] `git show-branch --topo-order` is a Git command used to display the branches in a tree format based on their merge relationships, showing the branch merges and merges between branches in a hierarchical view. This command is particularly useful when dealing with complex merge histories and can help visualize the relationship between branches and their merging history. The output of this command will show branches as nodes connected by edges representing merges or merge bases.'
