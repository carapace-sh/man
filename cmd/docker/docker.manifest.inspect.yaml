# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: inspect [OPTIONS] [MANIFEST_LIST] MANIFEST
description: Display an image manifest, or manifest list
flags:
    --insecure: Allow communication with an insecure registry
    -v, --verbose: Output additional info including layers and platform
documentation:
    command: '[AI] The `docker manifest inspect` command is used to display detailed information about a Docker image manifest. A Docker manifest defines the files, configurations, and other metadata for an immutable multi-stage build. By running this command followed by the image name or manifest file path, you can view various attributes such as the digest of each layer, media types, architecture, OS, and size information. This command provides a comprehensive understanding of the contents and structure of a Docker image manifest.'
    flag:
        insecure: '[AI] `docker manifest inspect --insecure` is a command used in Docker to retrieve detailed information about a specified Docker image manifest. The `--insecure` flag is optional and allows communication with registries that use transport layer security (TLS) certificates that are not signed by a trusted certificate authority. This command helps users to verify the details of an image, such as its digest, size, and history, ensuring the image''s authenticity and integrity.'
        verbose: |-
            [AI] The `docker manifest inspect --verbose` command is used to display detailed information about a Docker image manifest. A Docker manifest is a file that lists the filesystem layers and their corresponding tags, as well as the configuration for the image, such as its name, base image, and entrypoint.

            The `--verbose` flag increases the amount of output produced by the command, providing more detailed information about each layer in the manifest, including the media type, size, and digests (SHA256 checksums). Additionally, it shows the history for each layer, which includes the time it was created, who built it, and any comments associated with it. Overall, this command helps users understand the composition of their Docker images at a granular level.
