# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fsck
description: Verifies the connectivity and validity of the objects in the database
group: interrogator
flags:
    --cache: Consider any object recorded in the index also as a head node for an unreachability trace
    --connectivity-only: Check only the connectivity of reachable objects
    --dangling: Print objects that exist but that are never directly used
    --full: Check not just objects in GIT_OBJECT_DIRECTORY
    --lost-found: Write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/
    --name-objects: Also display a name that describes how objects are reachable
    --no-dangling: Do not print objects that exist but that are never directly used
    --no-full: Check only objects in GIT_OBJECT_DIRECTORY
    --no-progress: Do no report progress status
    --no-reflogs: Do not consider commits that are referenced only by an entry in a reflog to be reachable
    --progress: Report progress status
    --root: Report root nodes
    --strict: Enable more strict checking
    --tags: Report tags
    --unreachable: Print out objects that exist but that arenâ€™t reachable from any of the reference nodes
    --verbose: Be chatty
documentation:
    command: '[AI] `git fsck` is a Git command used to check the integrity of the Git object database. It performs an internal consistency check on all reachable objects in the repository. The command reports any errors or warnings it finds, such as missing or damaged objects, which could lead to data loss or corruption. Running `git fsck` periodically can help prevent and detect issues with a Git repository.'
    flag:
        cache: '[AI] `git fsck --cache` is a Git command used to verify the integrity of objects in the Git cache or index file. The cache is where Git stores loose objects that have not yet been added to the active database. This command scans through the cached objects and checks their integrity by comparing their checksums against the ones stored in the main Git database. If any mismatches are found, Git will warn you about it and suggest resolving the issue by fetching the missing objects from a remote repository or recloning the entire repository. This command helps ensure data consistency in Git and can help prevent potential issues caused by corrupt or missing objects in the cache.'
        connectivity-only: '[AI] `git fsck --connectity-only` is a Git command used to check the connectivity between objects in a local Git repository. It performs a shallow verification of pack files and local loose objects, checking if they can be reached from other reachable objects, ensuring consistency without performing a deep validation of object contents or metadata. This helps identify any disconnected or dangling objects that may impact the integrity of the repository.'
        dangling: '[AI] `git fsck --dangling` is a Git command used to check the local repository for potentially loose or dangling objects, which are not reachable from any ref (branch, tag, or commit). These objects may result from various operations like deleting a branch before force-pushing it, or accidentally dropping a reference. The command scans through all reachable and unreachable objects in the repository, reporting any dangling ones for further investigation or cleanup if needed. It''s generally recommended to run this command periodically as part of Git repository maintenance to ensure its integrity.'
        full: '[AI] `git fsck --full` is a Git command used to check the integrity of the Git objects in the local repository. The `--full` option tells Git to perform a more exhaustive check, verifying not only the pack files but also all loose objects and their references. It reports any found errors or inconsistencies and can help prevent data loss and ensure a healthy Git repository.'
        lost-found: '[AI] `git fsck --lost-found` is a Git command used to check the integrity of the pack files in the local repository. The `--lost-found` option tells Git to also check for and report any unreachable objects that Garbage Collection has moved to the `.git/lost-found` directory. Unreachable objects are those that no longer have any references pointing to them, but have not yet been automatically deleted by Git''s garbage collector. Running this command can help identify potentially recoverable data that may have been accidentally lost or deleted from the repository.'
        name-objects: '[AI] `git fsck --name-objects` is a Git command used to check the integrity of the object database. The `--name-objects` option makes Git output the names (i.e., hashes) of all reachable objects, allowing you to verify their correctness by comparing against known good versions or checking for duplicates. This command helps ensure data consistency and prevent potential issues with your Git repository.'
        no-dangling: '[AI] `git fsck --no-dangling` is a Git command used to check the integrity of the Git object database. The `--no-dangling` option specifically checks for and reports any "dangling" commits or objects that are not reachable from any branch or ref in the repository. These objects may no longer be needed, but could potentially cause issues if they''re accidentally deleted later on. The command outputs a list of these dangling objects and commits, allowing you to decide whether to keep or remove them.'
        no-full: '[AI] `git fsck --no-full` is a Git command used to check the integrity of the packed Git repository objects. The `--no-full` option instructs Git not to perform an exhaustive full check, which can be resource-intensive and time-consuming for large repositories. Instead, it performs a shallow check that only verifies the local pack files and their indexes. It''s useful when you suspect corruption in your repository but want to save time compared to running a full check.'
        no-progress: '[AI] `git fsck --no-progress` is a Git command used to check the integrity of the Git objects in the local repository. The `--no-progress` option disables progress messages during the check. If any issues are found, Git will print an error message indicating the type and location of the problem. It''s commonly used for troubleshooting or after file system corruption to ensure the consistency and integrity of the Git objects.'
        no-reflogs: '[AI] `git fsck --no-reflogs` is a Git command used to check the integrity of the local repository''s packed Git objects and names database (also known as the Shallow Manifest), without checking the ref logs. This command scans for various issues, such as missing or damaged objects, dangling commits, and other inconsistencies in the Git object database. By using the `--no-reflogs` option, it skips the check of the ref logs, which can help speed up the process if the repository has a large number of commits.'
        progress: '[AI] `git fsck --progress` is a Git command used to check the integrity of the Git objects in the local repository. The `--progress` option displays progress information during the check process, making it useful for large repositories or when running the command in the background. It performs a shallow verification of all reachable Git objects and reports any errors found such as missing or corrupted objects. If no issues are detected, it will simply exit with a success status.'
        root: '[AI] `git fsck --root` is a Git command used to check the integrity of the Git object database starting from the root tree (i.e., the top-most commit in the repository). It performs an extensive verification process on all reachable objects and their references, ensuring there are no dangling pointers, corrupt objects or inconsistent data structures within the database. This command helps detect and prevent potential data loss and maintain a healthy Git repository.'
        strict: '[AI] `git fsck --strict` is a Git command used to check the integrity of the Git object database. The `--strict` option makes Git enforce more strict checks compared to running `git fsck` without it. It will report and refuse to continue if it detects any inconsistencies or errors in the Git objects, such as invalid object types or missing metadata. This command is commonly used to ensure the Git repository is healthy and consistent before performing important operations like cloning, checking out a new branch, or making critical changes.'
        tags: '[AI] `git fsck --tags` is a Git command used to check the integrity of all local tags in a repository. It verifies that each tag points to a valid commit and that no tags have dangling pointers, meaning they are not connected to any branches or commits. If any issues are found, Git will print an error message indicating which tags have problems. This command helps ensure the accuracy and consistency of the repository''s tagged history.'
        unreachable: '[AI] `git fsck --unreachable` is a Git command used to verify the integrity and reachability of all objects in the local Git repository. The `--unreachable` option specifically checks for objects that are not reachable from any branch or commit in the repository, meaning they have been accidentally or intentionally detached from the rest of the Git history. This command can help prevent data loss by identifying and reporting such objects, allowing the user to decide whether to delete them or keep them as dangling commits.'
        verbose: '[AI] `git fsck --verbose` is a Git command used to check the integrity of the Git repository''s object database. The command performs an extensive check on every object in the repository, ensuring that all references to objects are valid and that no objects are missing or damaged. The `--verbose` option increases the output''s detail level, providing additional information about each object checked. This can help identify potential issues and maintain a healthy Git repository.'
