# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: file
description: determine file type
flags:
    --apple: output the Apple CREATOR/TYPE
    --exclude-quiet=: like exclude, but ignore unknown tests
    --extension: output a slash-separated list of extensions
    --help: display this help and exit
    --mime-encoding: output the MIME encoding
    --mime-type: output the MIME type
    -0, --print0: terminate filenames with ASCII NUL
    -C, --compile: compile file specified by -m
    -F, --separator=: use string as separator instead of `:'
    -L, --dereference: follow symlinks
    -N, --no-pad: do not pad output
    -P, --parameter: set file engine parameter limits
    -S, --no-sandbox: disable system call sandboxing
    -Z, --uncompress-noreport: only print the contents of compressed files
    -b, --brief: do not prepend filenames to output lines
    -c, --checking-printout: print the parsed form of the magic file
    -d, --debug: print debugging messages
    -e, --exclude=: exclude TEST from the list of test to be performed for file
    -f, --files-from=: read the filenames to be examined from FILE
    -h, --no-dereference: don't follow symlinks (default)
    -i, --mime: output MIME type strings
    -k, --keep-going: don't stop at the first match
    -l, --list: list magic strength
    -m, --magic-file=: use LIST as a colon-separated list of magic number files
    -n, --no-buffer: do not buffer output
    -p, --preserve-date: preserve access times on files
    -r, --raw: don't translate unprintable chars to \ooo
    -s, --special-files: treat special (block/char devices) files as ordinary ones
    -v, --version: output version information and exit
    -z, --uncompress: try to look inside compressed files
documentation:
    command: '[AI] The `file` command is a utility in Unix and Unix-like operating systems used to identify the type of files based on their contents or magically. It provides information about the file format, such as its file type (e.g., ELF executable, PDF document), encoding, and sometimes even the package or version information. By default, it displays the file name followed by the file type description. Users often employ this command to determine the nature of a given file without having to open it manually or rely on its filename extension alone.'
    flag:
        apple: '[AI] The `file` command with the `--apple` option is not a valid combination in common Unix-based operating systems like Linux or macOS. The `file` command is used to identify the type of data stored in a file based on its magic numbers or byte sequence at the beginning. The `--apple` option is not recognized by the standard implementation of this command.'
        brief: '[AI] The `file --brief` command is a utility in Unix-like operating systems, including Linux and macOS. It''s used to identify the type of data or file based on its content. With the `--brief` option, it provides a succinct output with just the file type description instead of the more verbose full output. For example, `file --brief /path/to/file` might return something like "ASCII text" or "ELF 64-bit executable".'
        checking-printout: '[AI] The `file --checking-printout` command is a feature of the `file` utility in Unix and Linux systems. When used with this option, the `file` command prints out detailed information about the file format identification process it goes through for each given file, showing the probabilities of different file types and sometimes even providing additional data like magic numbers or encoding type. This can be useful for debugging or understanding why a particular file is being identified as a specific format.'
        compile: |-
            [AI] The `file --compile` command is not a standalone command but rather an option or subcommand under the `file` utility in Unix-like operating systems. Its primary function is to compile or merge multiple file type identification results into a single output.

            When you have a set of files with different formats, and you want to get a comprehensive identification report for all of them at once, you can use the `--compile` option. It takes as an argument a list of files to be processed, and it generates a unified output that indicates the file type and other relevant information for each file in the list.

            For example, to identify the types of multiple files using the `file` command with the `--compile` option, you would run:
            ```bash
            $ file --mime-type *.{txt,pdf,jpg}
            ```
            This command will output separate lines for each file indicating its file type. If you then want to compile the results into a single line or output, use the `--compile` option as follows:
            ```bash
            $ file --mime-type --brief --compile < list_of_files.txt
            ```
            Here, replace `< list_of_files.txt >` with an actual file containing a list of paths to files separated by newlines or spaces. The output will be a single line containing the file type information for all the specified files.
        debug: |-
            [AI] The `file --debug` command is a feature of the `file` utility in Unix-like operating systems. This command is used to run the `file` program with increased verbosity, which can be helpful for debugging or understanding its internal workings.

            When you run `file --debug filename`, it prints out extensive information about the file, including its magic numbers, mime type, and any additional probes or tests that are performed. This detailed output can provide valuable insight into how the `file` command identifies different file types. However, keep in mind that using this option generates a lot of output, so it might not be suitable for everyday use but rather for specific debugging purposes.
        dereference: '[AI] The `--dereference` option in the `file` command is used to follow symbolic links and report the type of the file that is being pointed to, rather than the link itself. This can be useful when investigating file types in a directory containing symbolic links. For instance, if you have a directory with both regular files and symbolic links, using `file` with the `--dereference` option will show the actual type of each file being referred to. In contrast, without the `--dereference` option, `file` would only report the type of the link itself.'
        exclude: "[AI] `find` command's `-exec` or `-name` options can be used to process files based on specific criteria. However, when you want to exclude certain files or directories from being processed, you can use the `--exclude` option with the `find` command.\n\nThe `--exclude` option followed by a pattern allows you to exclude files or directories that match the given pattern while searching for other files or directories. It is an effective way to refine search results and avoid unnecessary processing of unwanted files. For instance, if you want to find all C++ source files (`.cpp` or `.cc`) except those in a specific directory, you can use the command:\n\n```bash\nfind /path/to/search -type f \\( -iname \"*.cpp\" -o -iname \"*.cc\" \\) -not -path \"/path/to/exclude/*\"\n``` \n\nReplace `/path/to/search` with the directory you want to search, and `/path/to/exclude` with the path of the directory you want to exclude. This command will find all C++ source files under `/path/to/search`, excluding those in `/path/to/exclude`."
        exclude-quiet: '[AI] The `--exclude-quiet` option in the `find` or `file` command is used to exclude specific files or directories from being processed without displaying an exclusion message for each excluded item. It''s a quieter version of the standard `--exclude` option, which only prints the matched patterns as errors when they are encountered during the search or file analysis process.'
        extension: '[AI] The `file --extension` command is a feature of the `file` utility in Unix and Linux operating systems. It returns the file extension (the part after the period in the filename) based on the file''s content type detection. For example, `file --extension myfile.txt` would output ".txt". This can be useful for programmatically identifying file extensions based on their contents.'
        files-from: '[AI] The `--files-from` option in the `file` command is used to read the list of files to be checked from an external file instead of specifying them individually on the command line. The external file should contain one file path per line. This option can be useful when dealing with large numbers of files or when the files are stored in a file list generated by other means.'
        help: '[AI] `file --help` is a command-line utility in Unix-like operating systems that provides information about the nature of a file based on its contents. When used with the `--help` option, it displays a brief help message explaining how to use the `file` command effectively. This includes details about available options, usage examples, and contact information for reporting bugs or requesting additional features.'
        keep-going: '[AI] The `--keep-going` option in the `file` command is used to instruct it to continue processing other files even if an error occurs while analyzing a file. When this option is not set, `file` will stop processing and display an error message once it encounters a file that cannot be identified properly. With `--keep-going`, the analysis of the current file will stop but the command will continue with the next file in the list.'
        list: '[AI] `file --list` is a command used with the `find` utility in Unix-like operating systems. It produces a output listing each file under the given directory hierarchy in the format `[filename]\t[file type]`. The `--list` option causes `find` to only print the name of each file and its type information, as a single tab-delimited string, rather than printing the full path or performing any actions on the files. This output can be easily processed by other commands using I/O redirection.'
        magic-file: '[AI] `file --magnic-file` is a command-line utility in Unix-like operating systems, used to identify the type of data stored in a file based on its magic numbers. Magic numbers are unique binary signatures present at the beginning or within the file''s header that indicate the file format. The `--magic-file` option specifies an alternate file containing the magic number database to use instead of the default one, enabling customized identification and handling of specific file formats.'
        mime: '[AI] The `file --mime` command is a utility in Unix-like operating systems, including Linux and MacOS, used to identify the MIME type of a file based on its contents. MIME (Multipurpose Internet Mail Extensions) types are used to define the format or type of data contained in a file for transfer over the internet. By running `file --mime <filename>`, you can quickly determine the specific MIME type of that file. This information is often useful when dealing with files of various formats, especially for web developers or system administrators working with email attachments or transferring files between systems.'
        mime-encoding: '[AI] The `file --mime-encoding` command is a utility in Unix-like operating systems used to identify the MIME type and encoding of a file based on its contents. MIME (Multipurpose Internet Mail Extensions) types specify the format of data being transmitted, while encodings describe how that data should be transformed before transmission. The output of this command includes the MIME type and the encoding if present. For example, `text/plain; charset=us-ascii` represents a plain text file encoded in US-ASCII.'
        mime-type: '[AI] The `file --mime-type` command is a utility in Unix-like operating systems used to identify the MIME type of a file based on its contents. MIME (Multipurpose Internet Mail Extensions) types are used to determine the type of data a file contains, enabling correct handling by applications. The tool reads the binary or text data from a file and compares it against a database of known signatures to determine the corresponding MIME type, which is then displayed in output.'
        no-buffer: '[AI] The `file` command with the option `--no-buffering` or `-u` reads the input one line at a time instead of buffering the entire input before making a diagnosis. This can be useful when dealing with large files or data streams that may exhaust the default buffer size. However, it might increase the command''s processing time due to more frequent I/O operations.'
        no-dereference: '[AI] The `file --no-dereference` command is a utility in Unix-like operating systems used to identify the type of files based on their contents. By default, `file` follows symbolic links and examines the file that the link points to. However, when using the `--no-dereference` option, `file` reports the type of the symbolic link itself instead of the target file. This can be useful in cases where you want to identify the nature of a symbolic link rather than its destination.'
        no-pad: '[AI] The `file` command with the option `--no-pad` (or simply `-N`) disables the padding of output lines to a fixed width. By default, `file` displays file types and their descriptions right-aligned in columns of width 31. With `--no-pad`, this padding is turned off, making the output more compact and easier to parse when dealing with long filenames or multiple files in a listing.'
        no-sandbox: |-
            [AI] The `--no-sandbox` flag is a command-line option used with Google Chrome's built-in `file` utility, not to be confused with the Unix `file` command. It disables the Chrome Sandboxing mechanism during automated tests or scripted file processing.

            Sandboxing is a security feature that isolates each tab, extension, and other components of the browser from each other to prevent potential malware from affecting the whole system. However, it might cause compatibility issues with some automated testing frameworks and scripts that need direct file access outside the sandboxed environment. The `--no-sandbox` flag bypasses this restriction for such use cases.

            It's important to note that disabling sandboxing comes with potential security risks, as it may expose your system to malicious code or attacks. Therefore, using this flag should be restricted to trusted environments and applications.
        parameter: '[AI] The `file` command in Unix-based systems is used to identify the type of a file based on its contents or magical numbers. The `--parameter` option is not a standard option for this command, but some implementations may support it for advanced usage. When used with `--parameter`, the user can specify a particular test or analysis to be performed on the file. For instance, `file --mime-type filename.ext` can be used to determine the MIME type of a file. Always refer to the specific `file` implementation documentation for supported options and usage.'
        preserve-date: '[AI] The `--preserve-date` option in the `file` command is used to preserve the original modification time and file name when copying or moving files between different systems that may have different file modification time formats. It ensures that the original timestamp information is kept intact during the transfer, preventing any unintended changes to the timestamps. This can be crucial in certain data transfer scenarios where maintaining the original file metadata is essential.'
        print0: '[AI] The `file --print0` command is a feature of the File utility in Unix-like operating systems. It''s used to identify the file type of multiple files passed as arguments, separated by null characters instead of newlines. This allows processing these strings in other commands using the null character as a delimiter. It''s particularly useful when dealing with large sets of files or integrating with other tools that can handle null-delimited output.'
        raw: '[AI] The `file --raw` command is a utility in Unix-like operating systems used to identify the type of data stored in a file based on its content. The `--raw` option disables any automatic encoding detection and treats the file as raw binary data, making it suitable for analyzing files with specific formats that may not have a standard encoding. When you run this command followed by the file path, it outputs a human-readable description of the file type based on its content.'
        separator: '[AI] The `--separator` option in the `file` command is used to specify a custom character or string to be used as a delimiter between fields when identifying the file type based on its magic numbers. By default, `file` uses whitespace characters (spaces or tabs) as separators. Setting `--separator` allows the user to analyze files with non-standard field delimiters.'
        special-files: |-
            [AI] The `file` command with the `--special-files` option is used to identify and display information about files with special file types in Linux or Unix systems. These special files include device files, sockets, pipes, and other types of files that don't hold conventional data but have specific functions.

            When you run the command as `file --special-files <filename>`, it displays detailed information about the file type and its special characteristics if any, such as a device file's major and minor numbers or a socket file's protocol and address.
        uncompress: '[AI] The `file --uncompress` command is a utility in Unix-like operating systems, including Linux, that analyzes file types based on their contents or magnetic signatures. When used with the `--uncompress` option, it specifically identifies compressed files and extracts their contents without changing the original files. In simpler terms, this command displays the type of a file and, if it is a compressed file (like gzip, bzip2, or xz), it extracts the uncompressed data to standard output, leaving the original compressed file intact.'
        uncompress-noreport: '[AI] The `file` command with the option `--uncompress-noreport` is used to test the file type of compressed files without extracting or reporting their contents. This means that the `file` command will identify whether the given file is compressed (e.g., gzip, zip) and provide information about its compression format, but it won''t attempt to extract or display the contents inside. The `--noreport` option further suppresses any informational output from the command, leaving only the file type determination in the terminal.'
        version: '[AI] The `file --version` command is used to check the version information of the File utility, which is a command-line data classification tool in Unix and Unix-like operating systems. When executed with this argument, it prints out the version number and other relevant information such as the operating system it was built for and the compiler used to build it. It helps users ensure they have the latest version of the File utility and is compatible with their system.'
