# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: textfmt
description: convert coverage data to textual format
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -o=: Output text format to file
    -pkg=: Restrict output to package(s) matching specified package pattern
    -v=: Verbose trace output level
documentation:
    command: '[AI] `go-tool-cov data textfmt` is a command provided by Go''s `gcov` tool used for generating and processing code coverage data. Specifically, this command formats the generated `.gcov` files using the `textfmt` output format, which is human-readable and easy to parse, making it suitable for further analysis using various tools or scripts.'
    flag:
        cpuprofile: '[AI] `go-tool-covdata` is a Go tool used to process and generate code coverage data for Go programs. The command `go-tool-covdata textfmt -cpuprofile <profile_file>` processes a CPU profile file (specified by `<profile_file>`) using the "textfmt" output format with the `go-tool-covdata` tool. This results in generating human-readable textual representation of code coverage data, including information about the percentage of executed lines and branches in each source file.'
        hw: |-
            [AI] The command `go-tool-covdata textfmt -hw` is used in Go programming language for generating human-readable HTML reports from test coverage data. Here's a brief explanation of each part:

            1. `go-tool-covdata`: This is the Go tool for extracting test coverage data from Go test results.
            2. `textfmt`: This is a text formatter that converts raw data into human-readable output in this case, an HTML report.
            3. `-hw`: These are flags indicating that the output should be in human-readable (`-h`) format and that it should produce an HTML file (`-w`) instead of standard output.
        i: |-
            [AI] The command `go-tool-covdata textfmt -i` is a part of the Go toolchain used for generating and processing test coverage data.

            The `go-tool-covdata` is a tool that processes Go test coverage data, produced by the `go test` command, into a human-readable format. The `textfmt` argument specifies the output format as plain text.

            The `-i` flag stands for "input files," which means this command reads input from files specified on the command line or through standard input. Therefore, this command processes Go test coverage data (from .cover files) and outputs human-readable text representation of the coverage information.
        memprofile: |-
            [AI] The command `go-tool-covdata textfmt -memprof` is used in Go programming language to generate a human-readable memory profile from the coverage data. Here's a brief explanation of each part:

            1. `go-tool-covdata`: This is a Go tool that reads and writes GC covariance data files. It is used for analyzing memory usage patterns in Go programs.
            2. `textfmt`: This is an optional argument to format the output as plain text, making it easier to read and analyze manually.
            3. `-memprof`: This flag indicates that the tool should generate a memory profile. The output will include information about the number of allocations, total size allocated, and allocation rates for each function or package in the program.
        memprofilerate: '[AI] `go-tool-covdata` is a command-line tool provided by Go programming language for generating and managing test coverage data. The specific command `go-tool-covdata textfmt -memprofilerate` processes the generated test coverage data using the text format and generates memory profiling reports. It shows the memory usage statistics of individual functions or packages during the test execution, which can help identify memory inefficiencies and optimize code.'
        o: '[AI] The `go-tool-covdata textfmt -o` command is used in Go programming language to generate a human-readable text format output of code coverage data produced by Go''s built-in testing tool `go test -cover`. The `textfmt` argument specifies the use of this text formatter for producing the output, while `-o` followed by a file name argument writes the result into that file instead of printing it to stdout.'
        pkg: '[AI] The `go-tool-covdata textfmt -pkg` command is used in Go programming language to generate a textual representation of code coverage data for a specific package, using the `covdata` tool and its text output formatter (`textfmt`). This command reads the binary code coverage data files generated by the `go test` command, processes it, and outputs the coverage information for the specified Go package in plain text format. This information can then be used to analyze the code coverage of individual packages within a larger project.'
        v: |-
            [AI] The command `go-tool-covdata textfmt -v` is used in Go programming language to generate and display human-readable test coverage data from previously run tests, formatted as plain text.

            The `go-tool-cov` is a part of the Go toolchain used for generating test coverage reports. The `covdata` subcommand is responsible for reading and processing coverage data files (generated by running tests with `-coverprofile` flag).

            In this command, we use the `textfmt` argument to format the output as plain text instead of HTML or JSON formats. The `-v` flag is used to enable verbose output, showing additional details about the coverage data processing.
