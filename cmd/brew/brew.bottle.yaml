# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: bottle
description: Generate a bottle (binary package) from a formula that was installed with `--build-bottle`
group: developer
flags:
    --committer: Specify a committer name and email in `git`'s standard author format.
    --debug: Display any debugging information.
    --force-core-tap: Build a bottle even if <formula> is not in `homebrew/core` or any installed taps.
    --help: Show this message.
    --json: Write bottle information to a JSON file, which can be used as the value for `--merge`.
    --keep-old: If the formula specifies a rebuild version, attempt to preserve its value in the generated DSL.
    --merge: Generate an updated bottle block for a formula and optionally merge it into the formula file. Instead of a formula name, requires the path to a JSON file generated with `brew bottle --json` <formula>.
    --no-all-checks: Don't try to create an `all` bottle or stop a no-change upload.
    --no-commit: When passed with `--write`, a new commit will not generated after writing changes to the formula file.
    --no-rebuild: If the formula specifies a rebuild version, remove it from the generated DSL.
    --only-json-tab: When passed with `--json`, the tab will be written to the JSON file but not the bottle.
    --quiet: Make some output more quiet.
    --root-url: Use the specified <URL> as the root of the bottle's URL instead of Homebrew's default.
    --root-url-using: Use the specified download strategy class for downloading the bottle's URL instead of Homebrew's default.
    --skip-relocation: Do not check if the bottle can be marked as relocatable.
    --verbose: Make some output more verbose.
    --write: Write changes to the formula file. A new commit will be generated unless `--no-commit` is passed.
documentation:
    command: '[AI] `brew bottle` is a Homebrew command used to build and save bottle (pre-compiled) versions of installed packages, including their dependencies, for offline use or to share with others. It creates a self-contained directory containing the binary files, which can be easily moved or copied between systems without requiring an active internet connection or installing dependencies from scratch again.'
    flag:
        committer: '[AI] The `--committer` flag in Homebrew, a popular package manager for macOS and Linux, is used to specify a different name or email address for the commit messages when installing or updating software packages. It does not affect the actual installation or functionality of the software, but rather changes the author information in the version control history of the Homebrew repository. This can be useful for organizations with specific committer policies or for maintaining clear records of Homebrew management within a team environment.'
        debug: '[AI] The `--debug` flag used with the `brew bottle` command in Homebrew is an option that enables detailed debugging information while installing a formula using the Bottles feature of Homebrew. This can be useful for troubleshooting installation issues or gaining insight into the bottle creation process. When you run `brew bottle --debug <formula>`, it will output extensive logs providing more information about each step involved in creating and installing the bottle.'
        force-core-tap: '[AI] `brew bottle --force-core-tap` is a command used in Homebrew, a popular package manager for macOS. This command forces Homebrew to use the latest version of an already installed bottle (a self-contained, ready-to-run container for software) from the Homebrew Core tap (repository), overwriting the currently installed version if it exists. It is used when you want to ensure you have the most recent version of a specific software package.'
        help: '[AI] The `--help` option when used with the `brew bottler` command in Homebrew, a package manager for macOS, displays detailed help information about that specific command. It lists all possible options and their usage to help users understand how to effectively utilize the command to bottle software packages for offline installation or distribution. The flag provides clear instructions on how to use `brew bottler` along with examples and additional context where necessary.'
        json: '[AI] `brew bottle --json` is a command used with Homebrew, a popular package manager for macOS. This command generates a JSON (JavaScript Object Notation) file containing metadata about the bottles (pre-compiled binaries) installed via Homebrew''s `cask` installation method. The output includes details such as bottle name, version, download size, and SHA256 checksums. This can be useful for tracking changes in installed software or automating installation processes.'
        keep-old: '[AI] The `--keep-old` flag in Homebrew, a popular package manager for macOS and Linux, is used to keep previously installed versions of packages or dependencies that have since been upgraded or removed. When you run an upgrade command like `brew upgrade`, Homebrew by default will remove older versions of packages to save disk space. However, if you use the `--keep-old` flag, Homebrew will instead keep those older versions and make them available for reinstallation using their original version number. This can be useful for testing or rolling back to previous versions of software.'
        merge: '[AI] `brew bottle --merge` is a command used with Homebrew, a popular package manager for macOS. This command merges installed bottled packages, which are pre-compiled and ready-to-install software packages, into the main Homebrew installation. It combines any updates or new versions of the bottles with the existing ones in the Homebrew cellar directory. The result is a unified set of installed packages without redundancies or conflicts.'
        no-all-checks: '[AI] `brew bottle --no-all-checks` is a command used with Homebrew, a popular package manager for macOS. This command builds and installs a specific Homebrew formula into a bottle (a self-contained package), bypassing all checks for the formula''s dependencies and checks against known vulnerabilities. It can be useful when dealing with outdated or unsupported dependencies or formulas, allowing users to install software that may not pass standard checks.'
        no-commit: '[AI] The `brew bottle --no-commit` command is a function in Homebrew, a popular package manager for macOS, that creates a bottle (a self-contained, pre-built bottle of dependencies and software) without committing any changes to the Homebrew repository. This command allows users to build and test bottles locally without affecting other users or the main repository. If the local bottle is working as expected, the user can then choose to share it with others by committing the new bottle recipe to Homebrew.'
        no-rebuild: '[AI] The `brew bottle --no-rebuild` command is used with Homebrew, a popular package manager for macOS. This command creates a container (a "bottle") that includes all dependencies and their versions specified in the Homebrew recipe, then installs and runs the formula without making any changes to the system''s installed software or environment variables. The `--no-rebuild` flag instructs Homebrew not to rebuild or update the formula during this process, ensuring a consistent installation.'
        only-json-tab: '[AI] `brew bottle --only-formula-json` is a command used with Homebrew, a popular package manager for macOS. This command generates a JSON file containing metadata about the specified formula only. In other words, it extracts and saves the formula details as JSON data without downloading or installing anything.'
        quiet: '[AI] The command `brew bottle --quiet` is a function in Homebrew, a package manager for macOS, used to build and install software bottles (self-contained packages with all dependencies included) silently without displaying any informational messages during the installation process.'
        root-url: '[AI] The `brew bottle --root-url` command is a utility provided by Homebrew, a popular package manager for macOS. It sets or displays the URL from which Homebrew downloads the bottled versions of its packages, i.e., precompiled binaries. By default, Homebrew uses the Apple Store CDN, but you can change it to another trusted CDN if needed. The command `brew bottle --root-url <new_url>` sets the new root URL, while `brew bottle --root-url` displays the current one.'
        root-url-using: |-
            [AI] The `--root-url-using` flag in Homebrew, a package manager for macOS, is used to specify how the root URL for Homebrew's formulae and taps should be set up.

            With this flag, you can choose between three options:

            1. `--root-url=<URL>`: Set the root URL explicitly to a given URL.
            2. `--no-root-url`: Disable the use of a root URL, meaning Homebrew will look for formulae and taps in the default locations.
            3. `--default-namespaces`: Use the default namespaces, which means Homebrew will consult multiple URLs based on the namespace specified in the tap name (e.g., github.com and homebrew.org). This is the default behavior when no root URL flag is provided.

            By using this flag, you can customize how Homebrew locates its resources to ensure compatibility with specific versions or custom repositories.
        skip-relocation: '[AI] The `--skip-relocation` flag in Homebrew, a popular package manager for macOS, is used during the installation or upgrade of a formula to bypass the relocation of installed libraries and executables. This flag can be helpful when dealing with dependencies that have relocatable libraries or if you encounter issues related to library versions or paths. By skipping the relocation process, Homebrew will not attempt to adjust the library and executable paths, allowing you to manually manage these settings. However, using this flag may lead to potential conflicts or compatibility issues, depending on the specific dependencies involved.'
        verbose: '[AI] The `brew bottle --verbose` command is used in Homebrew, a popular package manager for macOS. This command creates and manages isolatedHomebrew environments called bottles, which are self-contained, ready-to-run packages. The `--verbose` flag increases the level of output to provide more detailed information about the bottle creation process. This can be helpful for debugging or understanding the inner workings of Homebrew and its bottles.'
        write: '[AI] `brew bottle --write` is a command used in Homebrew, a popular package manager for macOS. This command generates a bottle file for a specific Homebrew formula, which is an archive containing the formula''s dependencies and the pre-built binary, enabling installation without needing to fetch or build those components from source. The `--write` flag instructs Homebrew to save the generated bottle file locally in the `/Users/{username}/.Homebrew/Cellar` directory by default.'
