# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ttyd
description: ttyd is a tool for sharing terminal over the web
flags:
    -6, --ipv6: Enable IPv6 support
    -A, --ssl-ca=: SSL CA file path for client certificate verification
    -B, --browser: Open terminal with the default system browser
    -C, --ssl-cert=: SSL certificate file path
    -H, --auth-header=: HTTP Header name for auth proxy
    -I, --index=: Custom index.html path
    -K, --ssl-key=: SSL key file path
    -O, --check-origin: Do not allow websocket connection from different origin
    -P, --ping-interval=: Websocket ping interval(sec)
    -R, --readonly: Do not allow clients to write to the TTY
    -S, --ssl: Enable SSL
    -T, --terminal-type=: Terminal type to report
    -a, --url-arg=: Allow client to send command line arguments in URL
    -b, --base-path=: Expected base path for requests coming from a reverse proxy
    -c, --credential=: Credential for basic authentication
    -d, --debug=: Set log level
    -g, --gid=: Group id to run with
    -h, --help: Print this text and exit
    -i, --interface=: Network interface to bind
    -m, --max-clients=: Maximum clients to support
    -o, --once: Accept only one client and exit on disconnection
    -p, --port=: Port to listen
    -s, --signal=: Signal to send to the command when exit it
    -t, --client-option=: Send option to client
    -u, --uid=: User id to run with
    -v, --version: Print the version and exit
    -w, --cwd=: Working directory to be set for the child program
documentation:
    command: '[AI] `ttyd` is a lightweight SSH reverse tunnel daemon for Unix-based systems. It creates an Secure Shell (SSH) tunnel from a remote server to a local machine, enabling secure access to local services or applications over the internet. By starting `ttyd`, you can create a listening port on your local machine and forward traffic through an encrypted SSH connection to another host. This tool is particularly useful for managing services or applications in secure environments with limited direct access.'
    flag:
        auth-header: '[AI] `ttyd` is a reverse SSH tunneling tool for Unix-based systems. The option `--auth-header` is used to send custom headers with the authentication request in the SSH connection. This can be useful when dealing with more complex authentication mechanisms, such as two-factor authentication or proxied connections, where additional authentication information needs to be sent alongside the standard username and password. By including the `--auth-header` flag and specifying the header name and value, `ttyd` will include that information in its SSH connection request, allowing the remote server to properly authenticate the client.'
        base-path: '[AI] The `ttyd` flag `--base-path` specifies the directory that will serve as the base path for `ttyd`, a terminal multiplexer and reverse SSH tunnel creator. It allows users to run multiple terminal sessions from a single port, forwarding each session over an encrypted connection. By setting the base path, users can organize their sessions in a specific directory structure when they are started or restarted.'
        browser: '[AI] The `ttyd` command in Linux is a daemon that allows running interactive TTY applications in the background as background services. The `--browser` option is used to open the output of the application in a web browser, making it possible to interact with the application remotely through a browser. This can be useful when you want to run a GUI application on a headless server or from a remote terminal session. The flag does not open the browser automatically but provides a way to access the application''s output in a web interface.'
        check-origin: '[AI] `ttyd` is a terminal server for Unix systems that allows users to access and interact with the system through SSH sessions. The option `--check-origin` is a security feature in `ttyd`. When enabled, it ensures that incoming connections are initiated from trusted sources by checking the IP address or hostname against a predefined allowlist. This helps prevent unauthorized access to the server and strengthens its overall security posture.'
        client-option: '[AI] `ttyd` is a background SSH terminal server written in Rust. The `--client-option` is an optional argument for the `ttyd` command when starting a new session. It allows passing additional options directly to the client (in this case, SSH) that will be used when establishing a connection. These options can include things like specifying a different user or port number, using keys for authentication, or setting up proxies. By providing `--client-option`, you can customize the behavior of your remote sessions in a fine-grained way and tailor them to your specific use case.'
        credential: '[AI] The `ttyd` flag `--credential` is used to specify a file containing credentials for an SSH or TELNET server when running `ttyd` as a reverse proxy. This allows secure access to remote services from the local terminal without exposing the credentials in plain text. The file should be in format supported by SSH or TELNET key/password files (e.g., private key file for SSH, or .netrc file for TELNET).'
        cwd: '[AI] The `ttyd` is a terminal multiplexer written in Go language. The `--cwd` option is a flag used with this command that sets the working directory for newly started processes or sessions within `ttyd`. In simple terms, it means that when you start a new terminal session using `ttyd`, the specified directory will be the default working directory for any commands executed within that session.'
        debug: '[AI] `ttyd` is a terminal multiplexer written in Rust, similar to `screen` or `tmux`. The `--debug` flag is an option that can be passed when starting the `ttyd` server. It enables debug mode, which provides more detailed output and diagnostics during the execution of the `ttyd` command. This can be useful for troubleshooting issues or gaining a better understanding of how `ttyd` works internally.'
        gid: '[AI] `ttyd` is a terminal server for Unix-based systems that allows users to access text-based shell sessions over SSH. The option `--gid` sets the primary group ID (GID) of the new processes created by `ttyd`. This can be useful when managing user permissions in a system with multiple groups. By specifying a GID, all new sessions started through that instance of `ttyd` will belong to that group, making it easier to manage access and permissions for those users.'
        help: |-
            [AI] `ttyd` is a Unix utility that creates new TTY sessions and manages them as background processes. The command `ttyd --help` displays the usage information for this tool, including:

            1. A brief description of what `ttyd` does.
            2. Syntax and usage instructions for starting a new TTY session in the background.
            3. Options to customize the behavior of `ttyd`, such as setting a title or specifying a command to run in the session.
            4. Information on how to connect to the created TTY sessions using SSH.
            5. Examples of common use cases for `ttyd`.
        index: '[AI] `ttyd` is a reverse SSH tunneling tool that allows creating and managing persistent terminal sessions over SSH. The option `--index <num>` specifies which indexed session to connect or manage. For instance, if you have multiple sessions named `ssh1`, `ssh2`, ..., using `ttyd --index 3` will connect to the session with index `3`, i.e., `ssh3`.'
        interface: '[AI] `ttyd` is a terminal server for Unix-based systems, allowing secure SSH access to a local terminal session from remote devices. The `--interface` option specifies the network interface on which `ttyd` should listen for incoming SSH connections. For example, `ttyd --interface eth0` sets up the daemon to listen on the Ethernet interface (eth0) for incoming SSH connections.'
        ipv6: '[AI] `ttyd` is a terminal multiplexer for Unix-like operating systems, written in Rust. The `--ipv6` flag enables IPv6 support in the daemonized version of the application. With this option, `ttyd` can accept and forward connections using IPv6 addresses instead of or in addition to IPv4 addresses.'
        max-clients: '[AI] The `ttyd` flag `--max-clients` sets a limit on the number of SSH sessions that can be run concurrently through the `ttyd` daemon. This is useful for limiting resource usage or controlling access to a system. When a new SSH connection attempt is made, `ttyd` will reject it if the maximum number of clients has already been reached.'
        once: '[AI] `ttyd` is a terminal multiplexer for Wayland and Weston compositors, allowing multiple TTY sessions to be run in a single terminal or GUI window. The `--once` option tells `ttyd` to start only one session instead of the default behavior of starting multiple sessions. This can be useful when you want to start a single command or application in a new TTY environment.'
        ping-interval: '[AI] The `ttyd` flag `--ping-interval` sets the interval at which `ttyd` sends a keepalive ping message to the SSH session it manages. This helps ensure that the remote server does not terminate an idle connection and keeps the session active. The value following `--ping-interval` specifies the duration between two successive pings in seconds. For example, `--ping-interval 60s` sets the interval to one minute.'
        port: |-
            [AI] The `ttyd --port` flag is used with the `ttyd` (TTY daemon) command in Unix-based systems for managing persistent, secure, and accessible SSH sessions over a network.

            With this flag, you can specify the port number for the TTY server to listen on. For example, `ttyd --port 2222` starts the TTY server and binds it to listen on port number 2222. This allows remote connections to be made using an SSH client by connecting to that specific port (e.g., `ssh user@server -p 2222`).

            Overall, the flag helps manage and secure remote access through a dedicated SSH server.
        readonly: '[AI] The `ttyd` command with the `--readonly` flag creates a new terminal session in the background and sets it to read-only mode. This means that any user connected to this session cannot make modifications to the terminal or the files on the system, making it useful for displaying logs or other read-only content.'
        signal: '[AI] The `ttyd` is a terminal multiplexer written in Go language. The `--signal` option is used to send a signal to a specific terminal session managed by `ttyd`. When you run a command with `ttyd`, it creates and manages a new terminal session in the background. You can use the `--signal` option followed by the signal name to send a predefined signal to that particular session. For example, `ttyd --signal <session_id> TERM` will send a termination signal (SIGTERM) to the specified session. Other common signals include HUP (SIGHUP), INT (SIGINT), and QUIT (SIGQUIT).'
        ssl: '[AI] `ttyd` is a simple, secure, reverse SSH tunnel creator for Unix-based systems. The `--ssl` option in `ttyd` configures it to use SSL (Secure Sockets Layer) encryption for the communication between the local and remote servers. This adds an additional layer of security by encrypting the data transmitted over the SSH tunnel.'
        ssl-ca: |-
            [AI] The `ttyd` command with the option `--ssl-ca` is used to create a secure reverse SSH tunnel with SSL/TLS certificate authentication for the client connection.

            When you run `ttyd` with this flag, it sets up a secure tunnel using an SSL/TLS certificate for authentication of the client trying to connect. This is particularly useful when you want to restrict access to your server to specific clients, while ensuring encrypted communication over SSH. The CA (Certificate Authority) file provided with `--ssl-ca` option must be a trusted CA for the client's system to establish the secure connection.
        ssl-cert: '[AI] The `ttyd` command is a terminal multiplexer for Unix systems. The option `--ssl-cert` is used to specify the path to an SSL certificate file when running `ttyd` with Secure Sockets Layer (SSL) support enabled. This certificate will be used to secure communications between clients connecting to the `ttyd` server. By providing a certificate, you can encrypt data transmitted between the client and server, ensuring confidentiality and integrity of the information exchanged.'
        ssl-key: '[AI] The `ttyd` is a terminal multiplexer written in Go. The option `--ssl-key` is used to specify an SSL key file for securing SSH connections created by `ttyd`. When this flag is provided, `ttyd` sets up an SSL termination proxy for each new SSH session it creates, encrypting the connection between the client and the proxy while keeping the communication between the proxy and the server unencrypted. This adds an extra layer of security for remote access sessions managed by `ttyd`.'
        terminal-type: '[AI] The `--terminal-type` option in the `ttyd` command is used to specify the terminal type for the TTY (Teletype) server that `ttyd` creates. This option helps ensure that applications running inside the TTY session have correct terminal settings, such as character size and options like line wrapping or local echo. It takes a string argument, often in the format of `xterm-256color`, indicating a specific terminal type and its capabilities. Correctly setting this option can improve application compatibility and user experience within remote TTY sessions.'
        uid: '[AI] The `ttyd` is a terminal multiplexer written in Go language. The `--uid` option is used to specify the User ID (UID) under which `ttyd` should run. By running as a specific user, you can control access and permissions for processes managed by `ttyd`. This can be useful for security reasons or resource management. For example, if you want `ttyd` to manage sessions with restricted access, you can run it as a non-privileged user.'
        url-arg: '[AI] The `ttyd` is a command-line tool that creates and manages screen sessions for Unix-based systems. The `--url-arg` flag is an option used with `ttyd`. When this flag is provided, it sets the argument value passed to the URL when starting a new screen session via a web interface. This can be useful for configuring the application or service running inside the screen session based on the received URL argument.'
        version: '[AI] `ttyd` is a terminal multiplexer written in Rust, allowing users to create and manage multiple terminal sessions from a single terminal window. The command `ttyd --version` is used to display the version information of the installed `ttyd` software, including its name, version number, and compilation details such as the Rust compiler version and build date. This command helps users check if they have the latest version of `ttyd`, or troubleshoot any potential compatibility issues with other applications.'
