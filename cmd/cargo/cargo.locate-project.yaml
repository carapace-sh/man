# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: locate-project
description: Print a JSON representation of a Cargo.toml file's location
flags:
    --manifest-path=: Path to Cargo.toml
    --message-format=: 'Output representation [possible values: json, plain]'
    --workspace: Locate Cargo.toml of the workspace root
    -h, --help: Print help
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo locate-project` is a command provided by Cargo, Rust''s package manager. Its main function is to search for and display information about existing Cargo projects within the current directory or file system hierarchy. This command can be useful when navigating between multiple projects or when trying to find a specific project in a large workspace. The output usually includes the project path and name, as well as some metadata like the project''s version number.'
    flag:
        help: '[AI] `cargo locate-project` is a Cargo subcommand used to help find the root directory of a Rust project based on the location of its `Cargo.toml` file or the current working directory. The `--help` flag provides information about how to use this command, including available options such as `--path` (to specify the path to the `Cargo.toml` file) and `--quiet` (to suppress output other than the project path). This command is useful when navigating through a Rust project''s directory structure or working on multiple projects with similar names.'
        manifest-path: '[AI] `cargo locate-project` is a command provided by Cargo, Rust''s package manager. The `--manifest-path` option is used to specify the path to the specific Cargo manifest file (i.e., `Cargo.toml`) that you want to work with. By providing this argument, `cargo locate-project` will search for and identify the project directory associated with the given manifest file, helping you navigate between multi-repository projects more efficiently.'
        message-format: |-
            [AI] `cargo locate-project` is a command-line utility provided by Rust's package manager, Cargo. This command helps find the location of the root directory of a Cargo project based on the current working directory.

            The option `--message-format` determines how the output message is formatted when a project is found or not. By default, it prints just the path to the root directory. However, you can use this option with other strings to customize the output message:

            1. `json`: The output is in JSON format.
            2. `plain-with-os`: Outputs the project path using the operating system's conventions (e.g., '/path/to/project' on Unix or 'C:\path\to\project' on Windows).
            3. `verbose`: Provides detailed information about the project, including its name, version, and Git URL if it is a Git repository.

            For example, `cargo locate-project --message-format=json` will return output in JSON format like this:
            ```json
            {
              "manifest_path": "/path/to/Cargo.toml",
              "root_dir": "/path/to/project"
            }
            ```
        quiet: '[AI] The command `cargo locate-project --quiet` is a Cargo subcommand used to locate a Cargo project by searching for its manifest file in the current directory and its parent directories up to the root of the file system. The `--quiet` flag instructs Cargo to run quietly, meaning it will only print the path of the found project if one exists, otherwise it will exit with an error code without any output. This command is useful when you want to programmatically determine the location of a Cargo project without displaying any intermediate messages.'
        workspace: '[AI] `cargo locate-project --workspace` is a command used in Rust programming language''s package manager, Cargo. It searches for the workspace root of a Cargo project based on the given location. The `--workspace` flag indicates that the command should search for the workspace definition file (i.e., `Cargo.toml`) instead of looking for an individual project''s configuration file (`Cargo.toml` or `Cargo.lock`). This command returns the path to the workspace root, which can be useful when working with multiple projects that share dependencies and build scripts.'
