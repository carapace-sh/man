# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])
description: Delete resources by file names, stdin, resources and names, or by resources and label selector
group: basic intermediate
flags:
    --all: Delete all resources, in the namespace of the specified resource types.
    --cascade?: Must be "background", "orphan", or "foreground". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-selector=: Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
    --force: If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
    --grace-period=: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
    --ignore-not-found: Treat "resource not found" as a successful delete. Defaults to "true" when --all is specified.
    --now: If true, resources are signaled for immediate shutdown (same as --grace-period=1).
    --raw=: Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.
    --timeout=: The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object
    --wait: If true, wait for resources to be gone before returning. This waits for finalizers.
    -A, --all-namespaces: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: containing the resource to delete.
    -k, --kustomize=: Process a kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: Output mode. Use "-o name" for shorter output (resource/name).
documentation:
    command: '[AI] `kubectl delete` is a command used to remove Kubernetes resources, such as pods, services, or deployments, from a running cluster. The specific resource and its associated identifier (for example, the name of a pod) are provided as arguments. For instance, `kubectl delete pod my-pod`. When executed, it will send a request to the Kubernetes API server to delete the specified resource, and once deleted, the cluster state will be updated accordingly.'
    flag:
        all: '[AI] The `kubectl delete --all` command is used to delete all resources of a specific kind in a Kubernetes cluster. When you run this command, it will delete all resources of that kind without confirmation, making it a potentially dangerous operation. It is important to double-check before executing this command as deleting resources may cause unintended consequences, such as taking down applications or services running on those resources. To avoid accidental deletion, it''s a good practice to use labels and selectors to target specific resources for deletion instead of using the `--all` flag.'
        all-namespaces: '[AI] `kubectl delete --all-namespaces` is a command used with Kubernetes to delete all resources in all namespaces. This command sends a request to the Kubernetes cluster to remove every resource, including deployments, services, pods, and config maps, among others, across all namespaces. It''s essential to use this command with caution as it can lead to unintended deletion of valuable resources if used incorrectly.'
        cascade: '[AI] `kubectl delete --cascade` is a command used in Kubernetes to delete resources and their dependent resources recursively. The `--cascade` flag ensures that if there are dependent resources (such as replica sets, services, or ingresses) for the resource being deleted, they will also be deleted automatically along with the main resource. This can help prevent orphaned resources in Kubernetes clusters and simplify management.'
        dry-run: '[AI] `kubectl delete --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool to simulate the deletion of resources without actually executing the operation. The `--dry-run` flag causes `kubectl` to output the deletion YAML manifests that would be applied if the command were run without this flag. This can be used to review the changes before performing an actual delete, helping to avoid unintended consequences.'
        field-selector: '[AI] `kubectl delete --field- selector` is a command used in Kubernetes to delete resources based on specific field selectors. This means you can delete only certain fields or labels of a resource instead of the entire resource. The `--field-selector` option filters the objects to be deleted by their labels or annotations, and only the specified fields are removed from those objects. This can be useful in managing complex Kubernetes environments where selective deletion is desired.'
        filename: '[AI] `kubectl delete --filename` is a command used to delete Kubernetes resources specified in a file. The `--filename` option argues the path to the YAML or JSON file containing the definition of the resource(s) to be deleted. When you run this command, Kubernetes client `kubectl` will read the file, create objects from the file content, and send deletion requests for those objects to the API server. The resources are then removed from the cluster.'
        force: '[AI] `kubectl delete --force` is a command used to permanently delete Kubernetes resources, bypassing the normal confirmation prompts. When you run this command, Kubernetes will delete the specified resource immediately without asking for confirmation. Use it with caution as once deleted, the resource and its data may not be recoverable.'
        grace-period: '[AI] `kubectl delete --grace-period` is a command used to delete Kubernetes resources, such as pods or services, but with a delay before they are actually removed from the cluster. The flag `--grace-period` specifies a time duration during which the system will wait before removing the resource. This allows for any related components, such as replica sets or statefulsets, to perform graceful termination of the resource before it is permanently deleted. Once the grace period elapses, Kubernetes will proceed with deleting the resource.'
        ignore-not-found: |-
            [AI] `kubectl delete --ignore-not-found` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to delete Kubernetes resources in a cluster. The `--ignore-not-found` flag modifies the behavior of this command:

            * Without `--ignore-not-found`, if you try to delete a resource that does not exist, an error message will be displayed.
            * With `--ignore-not-found`, if you try to delete a resource that does not exist, the command will continue execution without raising an error and return a success status. This flag is useful when you want to automate the deletion of resources that may or may not exist in a cluster, such as during testing or deployment scripts.
        kustomize: '[AI] `kubectl delete --kustomize` is a command used in Kubernetes to delete resources based on customization definitions provided in a Kustomize file. Kustomize is a tool for managing and deploying Kubernetes applications, allowing for declarative configuration and incremental updates. With `kubectl delete --kustomize`, you can specify the path to a Kustomize directory or file containing patches that modify the metadata of the resources to be deleted, providing a flexible and consistent way to manage complex deletions in your Kubernetes cluster.'
        now: '[AI] `kubectl delete --now` is a command used in Kubernetes to permanently remove a resource from a cluster. The `--now` flag option signifies that deletion should be immediate, meaning the resource will be deleted from the cluster state right away instead of just marking it for deletion in the future. This command sends a DELETE request to the Kubernetes API server to remove the specified resource, such as a pod or deployment. Once deleted, any associated resources like services and persistent volumes are also typically cleaned up unless they have been configured differently.'
        output: |-
            [AI] `kubectl delete` is a command used to remove Kubernetes resources, such as pods, services, or deployments, from a cluster. The `--output` option specifies the output format for the command.

            When using `--output`, you can choose different formats like json, yaml, go-template, and more, to receive the deleted resource information in the desired format instead of the default standard output. This feature is useful when automating or scripting Kubernetes resource management tasks. For example: `kubectl delete deployment myapp --output=yaml`.
        raw: '[AI] `kubectl delete --raw` is a command used with Kubernetes to delete resources, specifically in raw format. This means that the command outputs the deletion YAML manifest instead of just executing the deletion silently. It''s often used when you want to understand or verify the changes before they are applied to your cluster. The raw output can be further processed (for instance, saved in a file for later use) before being applied using `kubectl apply`.'
        recursive: '[AI] `kubectl delete --recursive` is a command used in Kubernetes to delete resources and their dependent child resources in a cascading manner. The `--recursive` flag enables the deletion of not only the specified resource, but also its related resources that are linked by references such as `Pods`, `Services`, or `ConfigMaps`. This can be useful when you want to remove an entire application stack from your Kubernetes cluster in one step.'
        selector: '[AI] `kubectl delete` is a command used to delete Kubernetes resources, such as pods or services. The `--selector` option filters the resources to be deleted based on their labels. When you provide a label selector, only the resources with matching labels will be affected by the delete command. This allows for selective deletion of specific resources in a cluster.'
        timeout: '[AI] `kubectl delete` is a command used to delete resources in Kubernetes clusters. The `--timeout` flag sets the time limit for the deletion of a resource. If the deletion process takes longer than the specified timeout, `kubectl` will display an error and cancel the operation. This flag can be useful when dealing with large or complex resources that may take a long time to delete, preventing potential indefinite delays. The syntax is: `kubectl delete <resource> --timeout=<duration>`.'
        wait: '[AI] `kubectl delete --wait` is a command used in Kubernetes to delete a resource and wait for its deletion to be confirmed by the cluster before exiting. The `--wait` option causes `kubectl` to block until the deletion is complete, providing feedback on the status of the deletion process. This can be useful when you want to ensure that a resource has been fully deleted before continuing with other tasks.'
