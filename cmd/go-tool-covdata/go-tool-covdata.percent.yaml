# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: percent
description: output total percentage of statements covered
flags:
    -cpuprofile=: Write CPU profile to specified file
    -hw: Panic on warnings (for stack trace)
    -i=: Input dirs to examine (comma separated)
    -memprofile=: Write memory profile to specified file
    -memprofilerate=: Set memprofile sampling rate to value
    -o=: Output text format to file
    -pkg=: Restrict output to package(s) matching specified package pattern
    -v=: Verbose trace output level
documentation:
    command: '[AI] The `go-tool-cov` is a Go tool used for computing and displaying coverage data for Go source files. The `go-tool-cov data percentage <file>` command generates a tabular output showing the percentage of lines, branches, and functions covered by tests in the specified file. This information can be useful for identifying areas of the codebase that require more testing attention.'
    flag:
        cpuprofile: |-
            [AI] The `go-tool-cov` command with the `-%cpuprofile` and `percent` flags is used for CPU profiling and generating a coverage profile report in Go programming language.

            Here's a brief explanation of each flag:

            1. `-%cpuprofile`: This flag enables the creation of a CPU profile file, which records the execution time of various functions and methods during program execution. The output is saved as a binary profile file (`.cpuprofile`) that can be later processed by other tools like `pprof`.

            2. `percent`: This flag instructs the tool to output coverage data in percentage format instead of raw counts, making it easier for developers to interpret and understand the code coverage results. The output is usually printed on the console or saved as a text file (`.cover`) that can be processed by other tools like `lcov` or `gocov`.

            In summary, this command helps Go developers identify performance bottlenecks and improve code coverage by generating CPU profiles and coverage reports.
        hw: |-
            [AI] The `go-tool-cov` is a command-line tool provided by Go programming language for generating test coverage reports. The specific command `go-tool-cov data % -hw` does the following:

            1. `data`: Generates a coverage profile data file based on running tests in the current directory or specified package.
            2. `%`: Indicates that the percentage of coverage for each source file should be printed to standard output, along with a summary of total coverage.
            3. `-hw`: This flag is used to format the output as human-readable text with percentages displayed for each source file.
        i: '[AI] `go-tool-cov` is a command-line tool from the Go programming language''s standard library used for computing test coverage reports. The `go-tool-cov data` command generates or writes coverage data to files, while the `-%i` flag instructs it to output the percentage of covered lines and branches for each source file. The `percent` subcommand calculates and displays these percentages. In summary, `go-tool-covdata %-i` generates and shows test coverage percentages for individual Go source files.'
        memprofile: '[AI] The `go-tool-cov` is a command-line tool in Go programming language for computing and reporting test coverage data. The specific command `go-tool-cov data % -memprofile` generates memory profiles in percentage format along with the test coverage data. This can help developers analyze memory usage of their Go code during testing to identify and improve memory-intensive areas.'
        memprofilerate: '[AI] `go-tool-covdata` is a command-line tool from the Go programming language''s standard library, used for generating coverage profiles of Go programs during testing. The `percent` subcommand calculates and displays the percentage of covered lines in source files based on test results. The option `--memprofilerate` sets the memory profiling rate (in Hz) for the profiler when taking memory samples while running tests. By default, there is no memory profiling. With this flag, you can enable and configure memory profiling alongside coverage reporting during testing.'
        o: '[AI] The `go-tool-cov` command with the `percent` subcommand and the `-o` option is used to generate a report of source code coverage statistics for Go programs. The `percent` subcommand calculates the percentage of lines, branches, and functions covered by tests, while the `-o` option specifies the output file where the results will be saved. In summary, this command generates a coverage report in a specified output file format (e.g., HTML or XML).'
        pkg: '[AI] The `go-tool-cov` is a Go tool used for computing test coverage for Go source files. The command `go-tool-cov data % -pkg` generates a coverage data file for the specified package(s) based on the most recent test results in the percentage format. This output shows the percentage of lines, branches, and functions covered by tests within each file belonging to the given package(s).'
        v: |-
            [AI] The `go-tool-cov` is a command-line tool from the Go programming language's standard library, used for computing and visualizing test coverage data. The specific command `go-tool-cov data %` followed by `percent -v` does two things:

            1. `go-tool-cov data %`: This generates a coverage profile in binary format (`.cover`) from the test binary output, using the test percentage as the input `%`. The test percentage can be obtained from the Go testing framework or from other sources like environment variables.

            2. `go-tool-cov percent -v`: This command reads a previously generated coverage profile file (not shown here), calculates the percentage of lines, branches, and functions covered by tests, then prints out these percentages with the `-v` flag for verbose output.
