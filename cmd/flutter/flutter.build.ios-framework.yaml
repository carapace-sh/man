# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ios-framework
description: Produces .xcframeworks for a Flutter project and its plugins for integration into existing, plain Xcode projects
flags:
    --cocoapods: Produce a Flutter.podspec instead of an engine Flutter.xcframework (recommended if host app uses CocoaPods).
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Produce a framework for the debug build configuration.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-cocoapods: Do not produce a Flutter.podspec instead of an engine Flutter.xcframework (recommended if host app uses CocoaPods).
    --no-debug: Do not produce a framework for the debug build configuration.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-profile: Do not produce a framework for the profile build configuration.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-release: Do not produce a framework for the release build configuration.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Produce a framework for the profile build configuration.
    --pub: Run "flutter pub get" before executing this command.
    --release: Produce a framework for the release build configuration.
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -o, --output=: Location to write the frameworks.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] The `flutter build ios-framework` command is used to create an iOS framework from a Flutter project. This is typically done for library projects that are meant to be consumed as frameworks by other Xcode projects. It generates the necessary Swift and header files, creates the framework structure with the given scheme and builds it. The output can then be located in `ios/build/outputs/framework`.'
    flag:
        cocoapods: '[AI] `flutter build ios-framework --cocoapods` is a command used in Flutter development for generating native iOS frameworks instead of building an app as a whole. This process creates a static library, which is then wrapped using CocoaPods to simplify its integration into other Xcode projects. The resulting framework can be imported and utilized like any other framework within the target project.'
        dart-define: '[AI] `flutter build ios-framework` is a command used in Flutter development to build native iOS frameworks. The `--dart-define` option is an argument passed with this command. It''s used to define constants in Swift or Objective-C files within the framework, which can be accessed by other Swift or Objective-C projects using the framework. This is helpful for sharing common configuration across multiple projects.'
        debug: '[AI] `flutter build ios-framework --debug` is a command used in Flutter development for building and generating an iOS framework for app extension or plugin projects. This framework can be integrated into Xcode projects and reused across multiple apps, reducing the need to rebuild the entire app each time the framework''s code changes. The `--debug` flag allows for a debug symbol file to be generated along with the framework, which is useful during the development and testing process as it facilitates effective error reporting and debugging in Xcode.'
        flavor: '[AI] The `flutter build ios-framework --flavor` command is used in Flutter development to generate native iOS frameworks for specific application flavors. A flavor is a named build variant, allowing you to create multiple builds of your app from the same codebase. By running this command with a certain flavor name, it generates a framework (a dynamic library bundle) containing only the Swift and Objective-C files corresponding to that particular flavor. This allows for easier integration of the generated framework into other iOS projects or CI/CD systems, as they don''t need to include all the unnecessary code associated with other flavors.'
        help: |-
            [AI] `flutter build ios-framework` is a command used in Flutter development to create an iOS framework from the existing Flutter project. The `--help` option is provided to display detailed information about how to use this command effectively. Here's what it entails:

            1. It builds the iOS library channel: This step downloads and prepares the required iOS libraries for the framework build.
            2. It generates an iOS framework: The `flutter build ios-framework` command compiles Swift or Objective-C sources (if used), creates the framework structure, and packages it into a .framework file.
            3. It provides various options: You can customize your framework build using several options:
               - `--output <directory>`: Specify the output directory for the generated framework. By default, it is built in the 'ios/build/outputs/framework' folder.
               - `--define <macro>=<value>`: Define preprocessor macros to be used during the build process.
               - `--strip`: Strip the framework from debug symbols for a smaller binary size when distributing your framework.
            4. It displays usage examples: The help message includes practical usage examples, showcasing how to run the command with and without options.
        no-cocoapods: '[AI] `flutter build ios-framework --no-cocoapods` is a command used in Flutter development to create an iOS static framework. The "--no-cocoapods" option indicates that the build process should not use CocoaPods for dependency management. Instead, it packages all the required dependencies into the generated framework file. This command generates a single framework file that can be imported into other Xcode projects as a library.'
        no-debug: '[AI] The `flutter build ios-framework` command is used to create an iOS framework from a Flutter project. The `--no-debug` option is passed to disable the inclusion of debug symbols in the framework, which can help reduce its size and improve build times for downstream projects that use it. This flag does not affect the functionality or performance of the framework itself.'
        no-null-assertions: '[AI] The `flutter build ios-framework --no-null-assertions` command is used to build an iOS framework from a Flutter project. This process generates a static library that can be imported into other Xcode projects as a framework. The `--no-null-assertions` option disables null safety checks during the build process, which allows the use of nullable types and potential null exceptions. This flag is sometimes used when working with third-party libraries or older codebases that may not be null-safe yet.'
        no-obfuscate: '[AI] `flutter build ios-framework --no-obfuscate` is a command used in Flutter development to create an iOS framework. This command generates a static library (.framework file) containing Swift or Objective-C code, resources, and headers, which can be imported into other Xcode projects. The `--no-obfuscate` option disables obfuscation during the build process, ensuring that the source code remains readable for easier debugging and maintenance.'
        no-profile: '[AI] The `flutter build ios-framework --no-profile` command is used to create an iOS Framework from a Flutter project without generating any profile reports. This command builds the iOS library, which can be integrated into other Xcode projects as a static library, rather than building and running an app with profiling enabled. The `--no-profile` flag ensures that no profiling data is generated during the build process.'
        no-pub: '[AI] `flutter build ios-framework --no-pub` is a command used in Flutter development to create an iOS framework. This command builds and compiles your Flutter project into a static framework, which can be imported and used in other Xcode projects. The `--no-pub` flag disables the publishing of packages to the Flutter package registry during the build process. This is useful when you want to create a local framework for use in a specific development environment or project without making it publicly available via pub.dev.'
        no-release: '[AI] `flutter build ios-framework` is a command used in Flutter development to create an iOS framework instead of an app bundle. The `--no-release` option is passed to prevent the creation of a release build, which means the framework will be built in debug mode instead. This can be useful for testing and development purposes as it allows easier debugging and access to symbols and debug information.'
        no-tree-shake-icons: '[AI] The `flutter build ios-framework` command is used to create an iOS framework from a Flutter project. The `--no-tree-shake-icons` option disables tree shaking for icons during the build process. Tree shaking is a technique used in Flutter and other compilers to eliminate unused code, but it can unintentionally remove referenced icons leading to missing or broken UI elements in the resulting framework. By disabling tree shaking for icons with `--no-tree-shake-icons`, you ensure that all necessary icons are included in the framework.'
        null-assertions: '[AI] `flutter build ios-framework --null-assertions` is a command used in Flutter development to build an iOS framework. The framework is a library or set of libraries that can be imported and used in other Xcode projects as static libraries. This command with the `--null-assertions` option disables null safety checks during the build process. Disabling null safety checks allows older Objective-C code, which doesn''t support null safety, to be included in a new Swift or Flutter project. This can be useful when working on legacy projects that rely on Objective-C libraries but are being migrated to Flutter or Swift with null safety.'
        obfuscate: '[AI] `flutter build ios-framework --obfuscate` is a command used in Flutter development to build an iOS framework archive with code obfuscation enabled. Obfuscation is the process of making code harder to read and reverse engineer, improving app security by hiding logic and making it more difficult for unauthorized users to understand or manipulate the code. By using this command, Flutter generates a single, static framework file containing your application''s codebase, optimized for use within other iOS projects while keeping the actual implementation details hidden.'
        output: '[AI] The `flutter build ios-framework --output` command is used to create an iOS Framework using Flutter. This command compiles the Swift and Objective-C code generated by Flutter into a static library, which is then packaged into a framework. The `--output` option specifies the output directory for the generated framework file. When you want to integrate your Flutter app with an existing native iOS project, this command helps in creating the required framework that can be imported and used in the native project.'
        profile: '[AI] `flutter build ios-framework --profile` is a command used in Flutter development for creating static iOS frameworks instead of building an app bundle or IPA file. This command generates a single framework file containing the necessary Swift and Objective-C code, resources, and headers from your Flutter project. Using this command with `--profile` enables the creation of a slimmed-down framework, which excludes unused code and resources based on the active scheme in Xcode, leading to smaller framework size and faster build times.'
        pub: |-
            [AI] The `flutter build ios-framework --pub` command is used in Flutter development to create an iOS framework from the existing project. This framework can be integrated into other Xcode projects, allowing the use of the published Flutter library as a static framework instead of as a dynamic one.

            When this command is run, Flutter compiles and builds the Swift and Objective-C source code in the `ios/Classes` directory, creating a static library in `ios/build/build/intermediates/iOSIntermediateBuildFiles/SwiftModuleM.m`. It then generates an `.framework` file by packaging this library along with its dependencies into a single bundle using Xcode's `FrameworkManager`.

            Finally, the resulting framework file will be located in `ios/build/outputs/flutter_for_web/Release-iphonesimulator/your_project_name.framework`, where `your_project_name` is the name of your Flutter project. This framework can then be imported and used in other Xcode projects with ease.
        release: '[AI] `flutter build ios-framework --release` is a command used in Flutter development for creating native iOS frameworks from the Flutter project sources for release builds. It compiles the Swift and Objective-C code produced by the Dart-to-Swift (D2S) compiler, bundles them into a framework, and optimizes it for deployment. This command is typically used when preparing an app for submission to the App Store or for inclusion in other iOS projects as a static library.'
        split-debug-info: '[AI] `flutter build ios-framework --split-debug-info` is a command used in Flutter, a mobile application development framework. This specific command generates an iOS static library (framework) from the Swift or Objective-C code within your Flutter project. The `--split-debug-info` option enables source file level debug symbol splitting during the build process, which can help reduce the size of the resulting framework and improve app start-up time. By default, Flutter bundles all debug symbols into a single file. With this flag set, each source file will have its own debug symbols file, making it easier for external libraries or tools to find and use specific symbols when needed.'
        target: |-
            [AI] The `flutter build ios-framework --target` command is used to create an iOS framework using Flutter. This can be useful for integrating Flutter code into native iOS projects or for distributing a reusable library as a framework.

            The command builds the Flutter project and packages it as an iOS framework, which includes the Swift interface bindings that enable communication between Swift code and Dart code. The resulting framework can then be imported and used within other Xcode projects.

            Here's a brief summary of the steps involved:

            1. Compiles Flutter project into machine code (libraries and binaries) for iOS.
            2. Generates Swift interface bindings to facilitate communication between Dart and Swift code.
            3. Packages the compiled code and interface bindings into an iOS framework format (`.xcframework`).
            4. The resulting `.xcframework` file can be imported into Xcode projects for use as a dependency.
        tree-shake-icons: '[AI] `flutter build ios-framework` is a command used in Flutter to create an iOS framework for distribution or embedding into other projects. The `--tree-shake-icons` option is specific to icon files and instructs the builder to perform tree shaking during the framework creation process. Tree shaking is a technique for eliminating unused code from the final build, including icons that are not being used in the project. By applying tree shaking to icons, the resulting framework will be smaller in size, reducing the download and install time for end users.'
