# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cvsimport
description: Salvage your data out of another SCM people love to hate
group: interaction
flags:
    -A=: CVS by default uses the Unix username when writing its commit logs
    -C=: The Git repository to import to
    -L=: Limit the number of commits imported
    -M=: Attempt to detect merges based on the commit message with a custom regex
    -P=: Instead of calling cvsps, read the provided cvsps output file
    -R: Generate a $GIT_DIR/cvs-revisions file containing a mapping from CVS revision numbers to newly-created Git commit IDs
    -S=: Skip paths matching the regex
    -a: Import all commits, including recent ones
    -d=: The root of the CVS archive
    -h: Print a short usage message and exit
    -i: 'Import-only: donâ€™t perform a checkout after importing'
    -k: 'Kill keywords: will extract files with -kk from the CVS archive to avoid noisy changesets'
    -m: Attempt to detect merges based on the commit message
    -o=: Import into a different branch
    -p=: Additional options for cvsps
    -r=: The Git remote to import this CVS repository into
    -s=: Substitute the character "/" in branch names with <subst>
    -u: Convert underscores in tag and branch names to dots
    -v: 'Verbosity: let cvsimport report what it is doing'
    -z=: Pass the timestamp fuzz factor to cvsps, in seconds
documentation:
    command: '[AI] `git cvsimport` is a Git command used for importing version history from a Concurrent Versions System (CVS) repository into a Git repository. It reads CVS data via a CVS server or locally stored CVS dumps, and creates new Git commits based on the imported CVS revisions. The `git cvsimport` command facilitates migrating history from CVS to Git while preserving commit messages and author information.'
    flag:
        A: '[AI] `git cvsimport` is a Git command used to import versions of files managed by a Concurrent Versions System (CVS) repository into a Git repository. The `-A` option stands for "import all." When used, it imports all the revisions and branches in the CVS repository as Git commits with preserving the commit history. This command helps migrate a project from CVS to Git while keeping the entire version history.'
        C: |-
            [AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into a Git repository. The `-C` option sets the Git fast-import format for the imported data, which provides more efficient storage and faster cloning times compared to the standard Git format.

            When you run `git cvsimport <repository_url> [<path>] ... -C`, it does the following:

            1. Connects to the specified Subversion repository using the Apache Subversion (SVN) protocol.
            2. Fetches all available revisions and their contents from the Subversion repository.
            3. Converts the fetched data into Git fast-import format.
            4. Imports the data as new commits in your local Git repository, creating a new branch if no branch is specified.
            5. Sets the current branch to the imported one.

            Using `git cvsimport -C` can be beneficial when dealing with large repositories or frequent checkouts/clones, as it reduces the size of your Git repository and improves cloning performance.
        L: '[AI] `git cvsimport` is a Git command used to import version history from a Concurrent Versions System (CVS) repository into Git. The `-L` option stands for "local" and specifies that the CVS repository to be imported is located on the local file system, rather than over a network. The full command `git cvsimport -L <local_CVS_directory> <new_git_repository>` imports the entire CVS history into the new Git repository.'
        M: '[AI] `git cvsimport` is a Git command used to import version history from a Concurrent Versions System (CVS) repository into a Git repository. The `-M` option stands for "create or update branches and tags." With this flag, Git will create new Git branches and tags based on the CVS branch and tag names. It assumes that each CVS branch corresponds to a Git branch, and each CVS tag corresponds to a Git tag. Additionally, it will import the entire CVS history into the corresponding Git branches and keep them in sync with future CVS imports or local commits.'
        P: '[AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into a Git repository. The `-P` option stands for "promote-heads", which means that when importing, Git will create new Git branches for each imported SVN branch or tag. Each imported branch or tag will have the same name as its corresponding SVN counterpart, with the prefix `svn/` added to distinguish them from local Git branches. This command is useful when migrating a project from SVN to Git while keeping the commit history.'
        R: '[AI] `git cvsimport` is a Git command for importing versions of files from a Concurrent Versions System (CVS) repository into Git. The `-R` option stands for recursive, which means that the entire directory hierarchy under the given CVS root will be imported as subdirectories in the new Git repository. For example, if you run `git cvsimport -R <cvshost>:<repo> <new_git_repo>`, Git will import all files and directories under the specified CVS root into the new Git repository as subdirectories with their respective history preserved.'
        S: '[AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into a Git repository. The `-S` option stands for `--set-url`, which sets the URL of the original SVN repository in the imported Git repository''s history. This can be useful to maintain the connection between the two systems, allowing Git users to push changes back to the SVN repository if needed. So, using `git cvsimport -S` imports files from an SVN repository and sets the URL of that repository for future reference in the Git history.'
        a: '[AI] `git cvsimport` is a Git command used to import version history from a Concurrent Versions System (CVS) repository into a Git repository. The `-a` option stands for "import all branches and tags." When you use this option, Git will attempt to import not just the default branch (usually named ''HEAD'' or ''main'') but also all branches and tags present in the CVS repository. This can be useful if you want to preserve the entire history of multiple branches or tags when migrating from CVS to Git.'
        d: '[AI] `git cvsimport` is a Git command for importing version history from a Concurrent Versions System (CVS) repository into a Git repository. The `-d` option stands for "import with empty commits." This means that the Git import process will create new commits in the Git repository, but the commit messages will be empty. Instead of importing each CVS revision as a separate Git commit with a meaningful message, an empty commit is created to represent the imported revision. This option is useful when you want to keep the CVS history intact but don''t care about the commit messages in the Git repository.'
        h: '[AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into a Git repository. The `-h` option is used to display help information about this command. So, running `git cvsimport -h` will show you the usage syntax, available options, and brief descriptions for each one, as well as some examples of how to use it effectively.'
        i: '[AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into a Git repository. The `-i` option specifies that the import should be done interactively. During the interactive import, Git prompts the user to confirm each file''s import history item by item. This way, users have control over which parts of the SVN history they want to include in their Git repository.'
        k: '[AI] `git cvsimport` is a Git command for importing version history from a Concurrent Versions System (CVS) repository into Git. The `-k` option stands for "keep source history." With this flag, the imported commits will include not only their Git messages but also their original CVS commit messages. This helps preserve the history of the project when migrating from CVS to Git.'
        m: '[AI] `git cvsimport` is a Git command used to import versions of files under Subversion (SVN) control into Git repository, preserving their history. The `-m` option stands for `--message`. It allows you to provide a commit message for the imported revisions. For example, `git cvsimport <path_to_svn> <repo_local_path> --message="Commit message"` will import the Subversion repository at `<path_to_svn>` into the local Git repository at `<repo_local_path>`, creating a new commit for each imported revision with the provided message.'
        o: '[AI] `git cvsimport` is a Git command used to import data from a Concurrent Versions System (CVS) repository into a Git repository. The `-o` option stands for "--output-directory." This flag specifies the local directory where Git should store the imported files after the import process has completed. For example, if you run `git cvsimport <URL> <LOCAL_DIRECTORY> --output-directory=/imported`, Git will import the data from the specified CVS URL into the Git repository and save all the files in the /imported directory within the local directory.'
        p: '[AI] `git cvsimport` is a Git command for importing versions from an Concurrent Versions System (CVS) repository into a Git repository. The `-p` option stands for "interactive prompt mode." It means that before each file import, Git will show an interactive prompt asking for the import strategy: "ours," "theirs," or "merge" for each conflicted file. This allows fine-grained control over the merging process to resolve any conflicts between CVS and Git history.'
        r: '[AI] `git cvsimport` is a Git command used to import versions of files managed by Concurrent Versions System (CVS) into Git repository. The `-r` option specifies the name of the CVS repository to be imported. So, `git cvsimport -r <reposity_name>` imports the specified CVS repository into the current Git repository.'
        s: '[AI] `git cvsimport` is a Git command used to import versions of files from a Concurrent Versions System (CVS) repository into a Git repository. The `-s` option stands for "shared", meaning that the imported history will be accessible as a networked branch in the Git repository. With this option, you can keep both repositories in sync by pushing and pulling changes between them.'
        u: '[AI] `git cvsimport` is a Git command used to import versions of a project that were managed with another version control system, such as CVS. The `-u` option stands for "user" or "username". It''s used to specify the username of the author of the imported commits in Git. This information is essential for maintaining an accurate commit history and proper attribution in the Git repository.'
        v: '[AI] `git cvsimport` is a Git command for importing versions of files from a Concurrent Versions System (CVS) repository into a Git repository. The `-v` option is used with this command to enable verbose output, which means that more detailed information about the import process will be printed to the console. So, running `git cvsimpor -v` would result in Git displaying comprehensive messages and logs while it performs the CVS to Git import.'
        z: '[AI] `git cvsimport` is a Git command used to import versions of files from a Concurrent Versions System (CVS) repository into a Git repository. The `-z` option is used specifically to import data in a compressed format, which can significantly reduce the amount of data transferred during the import process. This can be particularly useful when dealing with large repositories or slow networks. The imported data is uncompressed and written to files in the working directory as part of the import process.'
