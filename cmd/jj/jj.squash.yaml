# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: squash [OPTIONS] [PATHS]...
aliases:
    - amend
description: Move changes from a revision into its parent
flags:
    -h, --help: Print help (see more with '--help')
    -i, --interactive: Interactively choose which parts to squash
    -m, --message*=: The description to use for squashed revision (don't open editor)
    -r, --revision=: ""
documentation:
    command: |-
        [AI] The `jj` squash command is a Git interactive rebase tool. It allows you to combine multiple commits into a single one, effectively flattening or "squashing" them. This results in a cleaner commit history and simplifies the message for each new commit. To use it:

        1. Start an interactive rebase with `git rebase -i <commit-hash>^`, where `<commit-hash>` is the hash of the commit before which you want to start squashing.
        2. In the text editor that opens, change the words "pick" in front of the commits you want to squash into "squash". Save and exit the editor.
        3. Git will open a new editor with the messages from all the commits that were marked for squashing. Write a single message describing all the changes made during those commits. Save and exit the editor.
        4. The commits are now combined into one, preserving their individual changes but presenting them as a single commit in your Git history.
    flag:
        help: '[AI] `jj squash --help` is a command used in Jira, specifically with the Jira CLI (Command Line Interface) tool called "jj." This command displays help information about the "squash" feature of jj. The "squash" function allows merging multiple commits into one, often used for simplifying commit history in a Git repository integrated with Jira. The `--help` option provides detailed explanation on how to use this command, including available options and their meanings.'
        interactive: '[AI] `jj squash --interactive` is a command used in the Jupyter Notebook environment for interactively applying cell magics to modify and optimize notebook cells for submission as a single cohesive unit, such as a reproducible analysis or a presentation slide deck. The `--interactive` flag enables this feature with user interaction. The `jj squash` command aggregates selected cells into a new cell that preserves their original output, metadata, and dependencies, allowing for easier management and sharing of complex Jupyter Notebook projects.'
        message: '[AI] The command `jj squash --message` is used with the Git tool JJ (an interactive rebase graph editor) to create a new commit by squashing multiple commits into one. The `--message` option allows you to provide a message for the new commit, making it clear what changes were introduced in that commit.'
        revision: '[AI] The `jj squash --revition` command is used in Git to interactively rebase and squash multiple commits into a single one. The `--revision` option specifies the range of commits to be squashed. It takes a commit SHA or a branch name as an argument, allowing you to select the commits you want to modify before executing the squashing process. This command can help keep your Git history clean and organized by reducing the number of commits while preserving their changes.'
