# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: http
description: command-line HTTP client for the API era
flags:
    --all: Show any intermediary requests/responses as well.
    --boundary=: Specify a custom boundary string for multipart/form-data requests.
    --cert-key=: The private key to use with SSL.
    --cert=: You can specify a local cert to use as client side SSL certificate.
    --check-status: By default, HTTPie exits with 0 when no network or other fatal errors occur.
    --chunked: ""
    --ciphers=: A string in the OpenSSL cipher list format.
    --debug: Prints the exception traceback should one occur.
    --default-scheme=: The default scheme to use if not specified in the URL.
    --format-options=: Controls output formatting.
    --help: Show this help message and exit.
    --ignore-netrc: Ignore credentials from .netrc.
    --max-headers=: The maximum number of response headers to be read before giving up.
    --max-redirects=: By default, requests have a limit of 30 redirects (works with --follow).
    --multipart: Similar to --form, but always sends a multipart/form-data request.
    --offline: Build the request and print it but donâ€™t actually send it.
    --path-as-is: Bypass dot segment (/../ or /./) URL squashing.
    --pretty=: Controls output processing.
    --proxy=: String mapping protocol to the URL of the proxy.
    --session-read-only=: Create or read a session without updating it form the request/response exchange.
    --session=: Create, or reuse and update a session.
    --sorted: Re-enables all sorting options while formatting output.
    --ssl=: The desired protocol version to use.
    --timeout=: The connection timeout of the request in seconds.
    --traceback: Prints the exception traceback should one occur.
    --unsorted: Disables all sorting while formatting output.
    --verify=: Set to "no" (or "false") to skip checking the host's SSL certificate.
    --version: Show version and exit.
    -A, --auth-type=: The authentication mechanism to be used.
    -F, --follow: Follow 30x Location redirects.
    -I, --ignore-stdin: Do not attempt to read stdin.
    -P, --history-print=: The same as --print, -p but applies only to intermediary requests/responses.
    -S, --stream: Always stream the response body by line, i.e., behave like `tail -f'.
    -a, --auth=: If only the username is provided (-a username), HTTPie will prompt for the password.
    -b, --body: Print only the response body.
    -c, --continue: Resume an interrupted download.
    -d, --download: Do not print the response body to stdout.
    -f, --form: Data items from the command line are serialized as form fields.
    -h, --headers: Print only the response headers.
    -j, --json: Data items from the command line are serialized as a JSON object.
    -o, --output=: Save output to FILE instead of stdout.
    -p, --print=: String specifying what the output should contain.
    -q, --quiet: Do not print to stdout or stderr.
    -s, --style=: ""
    -v, --verbose: Verbose output.
    -x, --compress: Content compressed (encoded) with Deflate algorithm.
documentation:
    command: '[AI] The `http` command is not a standard command in computer systems or programming as it is commonly misunderstood. Instead, `http` refers to the Hypertext Transfer Protocol, which is a protocol used for transmitting hypertext requests and data on the World Wide Web. It defines how messages are formatted and transmitted, how web servers and browsers should respond to various commands, and how different components of a web page are identified and requested. Clients (usually web browsers) use HTTP to request resources from servers, and servers respond using HTTP with the requested data.'
    flag:
        all: '[AI] The `--all` option in an `http` command, typically used with tools like `curl` or `httpie`, requests that all possible data is returned in the response. It''s often used for verbose output or to capture headers, cookies, and other metadata alongside the response body. However, it can result in large amounts of data being transferred and parsed.'
        auth: '[AI] The `--auth` option in the `HTTP` command of tools like `curl` or `httpie` is used to specify authentication credentials for accessing protected resources over HTTP or HTTPS. It takes one or two arguments: the authentication method and the credential data. For example, `--auth basic username:password` sets the authentication header to "Basic" followed by base64-encoded `username:password`. Other common methods include Digest (`--auth digest username:password:realm:`), NTLM (`--auth ntlm username:password@domain:`), and Bearer for OAuth tokens (`--auth bearer token`).'
        auth-type: '[AI] The `--auth-type` option in the `HTTP` command of tools like `curl` or `httpie` specifies the type of authentication to use when making requests to protected resources over HTTP or HTTPS. It can be set to various values such as "Basic", "Bearer", "Digest", or "NTLM". The value indicates the specific authentication mechanism to be used, and is typically provided along with a token, key, or username/password combination.'
        body: |-
            [AI] The `--body` option in the `HTTP` command using a tool like `httpie` or `curl`, is used to send request data along with the request, effectively making it a part of the HTTP request message body. This can be useful when making requests that require data to be sent as part of the request, such as POST and PUT requests. The data can be provided in various ways like using a file, string, or inline using `--` followed by the data. For example:

            ```bash
            http :example.com/api POST '{"key":"value"}' --header "Content-Type: application/json" --body '{"key":"value"}'
            ```

            This command sends a POST request to `example.com/api` with the specified JSON data as the body of the request.
        boundary: '[AI] The `--boundary` option in the `http` command-line tool is used to send multipart forms or files as request entities. Multipart forms allow sending multiple parts in a single HTTP request, such as a file and form data. The `--boundary` flag specifies the boundary string for separating each part in the request body. This option is useful when dealing with file uploads and complex forms that include multiple parts.'
        cert: '[AI] The `--cert` option in the `http` command (often used with tools like `curl`) specifies a PEM-encoded SSL certificate file to be used for SSL/TLS communication. It''s part of securing an HTTPS connection between a client and a server, ensuring data transmitted is encrypted and protected against eavesdropping or man-in-the-middle attacks.'
        cert-key: '[AI] `http --cert-key` is an option used with the `http` command in tools like `curl` or `httpuv` for making secure HTTPS requests. It specifies the path to a file containing the private key that corresponds to the public certificate used for authentication and encryption in SSL/TLS communication. This key file should be in a format such as PEM or PKCS12, and its use helps ensure secure data transfer between the client and server during the HTTPS session.'
        check-status: '[AI] The `http --check-status` command is a feature of the `httpie` library, an easy-to-use command-line HTTP client for humans. This specific command is used to quickly check the HTTP status code of a given URL without having to send a request body or deal with response content. By running `http GET [URL] --status`, you can verify if the server responds with the expected status code, indicating a successful or error response, making it a useful tool for monitoring and troubleshooting web applications and APIs.'
        chunked: '[AI] The `HTTP --chunked` flag is used in the HTTP protocol to enable chunked transfer encoding. This encoding method allows sending a message body in one or more chunks of varying sizes, with each chunk being preceded by its size indication. Chunked transfer encoding is useful when the size of the message body is not known beforehand, such as in streaming data or during partial content updates. It''s important to note that using chunked transfer encoding requires careful handling on both client and server sides to ensure proper parsing and interpretation of the incoming/outgoing chunks.'
        ciphers: '[AI] `--ciphers` is a flag used in HTTP tools like `curl` or `haproxy`. It specifies the list of SSL/TLS encryption ciphers to use during secure communication. The goal is to enhance security by limiting the available cipher suites to only those considered strong and resilient against attacks, such as BEAST, POODLE, or other vulnerabilities. By defining preferred ciphersonly the client can help ensure a more secure connection. For example, `--ciphers "HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!RC4"` is a common setting that excludes several weak or outdated encryption methods.'
        compress: '[AI] `http --compress` is a command-line option used with tools like `curl` or `wget` for transferring data over HTTP or HTTPS. It enables compression of data during the transfer to reduce the size of the data being sent and received. This can lead to faster download times and reduced bandwidth usage. The flag instructs the client to accept compressed responses from the server, saving both time and resources.'
        continue: '[AI] The `--continue` flag in the `HTTP` command of `curl` is used to resume interrupted file transfers. When an HTTP download is paused or interrupted, the file may be only partially saved. By using the `--continue` option followed by a byte offset, `curl` will resume the download from that point instead of starting over. This can save time and bandwidth when large files are being transferred.'
        debug: '[AI] `http --debug` is a command-line tool used in various HTTP client libraries, such as `httpy` or `requests` in Python, to run an HTTP request with extended output. The `--debug` flag enables the client to print detailed information about the request and response process, including headers, data sent and received, timestamps, and any error messages. This can be helpful for debugging network issues, inspecting requests and responses, or understanding the low-level details of an HTTP transaction.'
        default-scheme: '[AI] The `--default-scheme` option in HTTP (Hypertext Transfer Protocol) commands, such as `http`, `https`, or `httpie`, is used to specify a default scheme for the URLs provided. This means that when you don''t include a scheme (such as "http:" or "https:") in your command or configuration file, this option determines which one to use by default. For example, using `--default-scheme http` will cause all URLs without an explicit scheme to be treated as HTTP, while using `--default-scheme https` would treat them as HTTPS. This can be useful for ensuring that you''re always making secure connections when possible or simplifying the syntax of your commands.'
        download: '[AI] The `--download` option in the `http` command of a terminal or command line tool is used to download files from a URL instead of just displaying their content on the screen. When you run an `http get` command with the `--download` flag, the file will be saved locally on your system with its original name, unless specified otherwise using a file name argument. For example: `http get --download https://example.com/file.jpg`. This can be useful when working in a terminal-based environment or for automating downloads of multiple files from the command line.'
        follow: '[AI] The `--follow` or `-L` flag in `HTTP` commands, such as those used with tools like `curl` or `wget`, is used to follow redirections automatically. This means that if the initial request returns a status code indicating a redirection (e.g., 301 for permanent redirects, 302 for temporary redirects), the client will automatically issue a new request with the location provided in the response headers and repeat this process until the final destination is reached. This can be useful when downloading files that may be hosted at multiple URLs or accessing websites with complex redirection rules.'
        form: |-
            [AI] `http --form` is a command used in tools like `curl` or `httpie`, which allows sending HTTP requests with form data as part of the body. Form data is typically submitted through HTML forms in web browsers, but it can also be sent programmatically using tools like these.

            The syntax for using `--form` varies slightly between different tools, but generally involves specifying key-value pairs for each form field, and optionally including files by using the `@filename` syntax. For example:

            ```bash
            $ curl --location --request POST 'https://example.com/api' \
            --form 'username=myusername' \
            --form 'password=mypassword' \
            --form 'file=@/path/to/image.jpg'
            ```

            This command sends an HTTP POST request to `https://example.com/api`, with the form data containing a username and password, as well as an image file upload. The tool will automatically encode the form data according to the appropriate MIME type (application/x-www-form-urlencoded by default), and handle any necessary multipart encoding for file uploads.
        format-options: '[AI] `http --format-options` is a command-line option used with the HTTP client library `httpc` in Node.js. This option is used to display available output formats for an HTTP response. It does not affect the request or response data itself, but only provides information about the supported output formats. When invoked with this option, `httpc` will print a list of available format names and their corresponding mimetypes, allowing users to choose the desired output format for further processing of the response data.'
        headers: '[AI] `http --headers` is a command used in tools like `curl` or `HTTPie` to send custom HTTP headers along with an HTTP request. The flags `--header`, `-H`, or multiple `--set` options are used to specify key-value pairs for the headers. For example, `--header "Content-Type: application/json"` sets the Content-Type header to JSON format. Multiple headers can be set using `--set` with a json object like `--set ''{"Authorization: Bearer mytoken", "Accept: application/json"}''`. The headers are transmitted in the request and may be required or useful for certain API endpoints to understand and process the request correctly.'
        help: '[AI] `http --help` is a command used with the HTTP (Hypertext Transfer Protocol) client library, such as `httpie`. It displays comprehensive help information about available commands, their usage, and options when interacting with HTTP servers. This command assists users in understanding how to effectively utilize the tool for tasks like making requests, sending files, setting headers, and more, enabling them to send well-constructed and informed HTTP requests.'
        history-print: '[AI] `http --history-print` is a command used in tools like `curl` and `Libcurl` for printing out the HTTP request and response headers history of a transfer. It allows users to view detailed information about each step (request and response) in the communication between a client and server during an HTTP transaction. This can be useful for debugging, network traffic analysis, or just understanding the underlying details of an HTTP interaction.'
        ignore-netrc: '[AI] The `--ignore-netrc` option in the `HTTP` command of the `http` tool in Unix-based systems is used to disable loading the NetRC file for authentication purposes. This means that HTTP commands executed with this flag will not automatically retrieve or use credentials stored in the system''s NetRC files (typically located at ~/.netrc). This can be useful when you want to manually provide authentication details or prevent unintended access using cached credentials.'
        ignore-stdin: '[AI] `http --ignore-stdin` is a command-line option used with the `http` tool in tools like `curl` and `httpeasier`. This option is used to suppress the default behavior of reading input from standard input (STDIN) for HTTP requests. With this flag, any data that would have been sent as part of the request body will be ignored. This can be useful when making automated or scripted HTTP requests where no user input is required or desired.'
        json: '[AI] `http --json` is a command-line tool, specifically a part of the `httpproxy` or `httpie` library. It''s used to send custom HTTP requests and receive responses in JSON format. The flag `--json` tells the tool to parse and display the response data as JSON instead of the default format. It can help process, manipulate, and analyze JSON data more efficiently for further usage in scripts or automation tools.'
        max-headers: '[AI] The `--max-headers` option in HTTP requests using tools like `http` or `curl`, sets a limit on the number of headers that can be sent in a single request. This is to prevent excessive header data, which could lead to increased network traffic and potential server overload. By default, most tools have a limit of around 100 headers per request, but this limit can be adjusted using the `--max-headers` option.'
        max-redirects: '[AI] The `--max-redirects` option in HTTP requests using tools like `http` or `curl`, sets a limit on the number of times a redirect can be followed. By default, most HTTP clients follow redirects up to 5 times. Setting this option to a value greater than or equal to zero allows specifying a custom maximum number of redirections to follow before giving up and reporting an error. This can help prevent infinite loops or other issues caused by excessive redirects during network communication.'
        multipart: '[AI] `--multipart` is an option used with the `HTTP` command in tools like `curl` or `httpie`. It is used to send multipart form data in HTTP requests. In a multipart request, multiple parts can be sent as part of the same request body, each containing different key-value pairs and possibly other data like files. This option is particularly useful when submitting forms that include file uploads or complex data.'
        offline: '[AI] The `--offline` flag in the `HTTP` command of a tool like `curl` or `httpie` is used to simulate an offline mode, where the tool tries to retrieve data from local cached files instead of making requests to remote servers. This can be useful for testing purposes or when working offline, as it allows you to access previously downloaded data without requiring an internet connection.'
        output: '[AI] `http --output` is a command-line option for tools like `httpie`, a modern HTTP client for terminal, used to save the output of an HTTP request in a file instead of displaying it on the console by default. The `--output` flag followed by a filename specifies where to write the response data. For example, `http GET ''https://example.com'' --output output.txt` would save the response from `GET https://example.com` into a file named `output.txt`.'
        path-as-is: '[AI] The `--path-as-is` flag in the `HTTP` command of tools like `curl` or `httpie` instructs the tool to send the HTTP request with the provided path exactly as it is, without interpreting special characters or treating it as a local file path. This is useful when sending requests with paths containing special characters or long URLs.'
        pretty: '[AI] `http --pretty` is a command-line option or filter for the `http` package in tools like `curl` and `httpie`. It modifies the output format of HTTP responses, making it more human-readable by formatting JSON data with indentation and proper line breaks. This makes it easier to understand and work with the response content in scripts or interactive usage.'
        print: '[AI] The `http --print` command is a utility from the `httptool` package in Go language. It prints out the raw details of an HTTP request or response, including headers, status code, and body (if present). When used with a request, it displays the constructed request message based on given inputs like URL, method, headers, and body. Conversely, when used with a response, it shows the received headers, status code, and the entire response body. This command is useful for debugging or analyzing HTTP communications in detail.'
        proxy: '[AI] The `--proxy` option in `http` commands is used to specify a proxy server. Proxy servers act as intermediaries between clients and target servers, allowing requests to be forwarded through them before reaching their destination. By using the `--proxy` flag, you can configure your HTTP client to use a specified proxy server, which can be useful for accessing resources on a network that require authentication or have restrictive access policies in place. The format of the argument is usually `<host>:<port>`, where `<host>` is the IP address or hostname of the proxy server and `<port>` is the listening port number.'
        quiet: '[AI] The `http --quiet` command is a part of the `HTTPie` tool, which is a simple yet powerful command-line HTTP client. The `--quiet` option silences progress output during an HTTP request or response. It means that HTTPie will not print out detailed status information, such as transfer speeds or percentage completed, for each request or response. This can be useful when working in scripts or automation environments where you only need to see the raw response data.'
        session: '[AI] `http --session` is a command-line tool provided by the `httpie` library, an easy-to-use HTTP client for CLI users. This command creates and manages sessions, allowing you to persist cookies across multiple requests. In other words, it helps maintain stateful interactions with servers by storing cookies and automatically sending them in subsequent HTTP requests. It''s useful when dealing with websites that require login or when dealing with complex interactions where maintaining session data is essential.'
        session-read-only: '[AI] The `--session-read-only` flag in the `HTTP` command of `hpack`, a popular HPACK implementation, signifies that the given session is read-only. This means that any data sent to this session can only be received and processed, but no data can be transmitted back from the client to the server. It''s often used when implementing caching proxies or intermediary servers where you want to preserve the original request/response flow without modifying it.'
        sorted: '[AI] `http --sorted` is a command used in the `httpie` tool, an easy-to-use HTTP client for CLI. The `--sorted` option sorts the output of an HTTP request by various keys such as status code, response headers, or elapsed time. This helps to easily identify and compare responses from multiple requests. For instance, when making several API calls, you can use this flag to have the results ordered in a human-readable way.'
        ssl: '[AI] The `http --ssl` command is typically used with tools like `curl` or `wget` in the Unix terminal environment for transferring data over secure Hypertext Transfer Protocol (HTTPS) connections. The `--ssl` option ensures that SSL/TLS protocols are enabled to encrypt the data being transferred between the client and the server, providing enhanced security. HTTPS is the secure version of HTTP, which adds an additional layer of encryption to protect the exchanged information from being intercepted or modified during transmission.'
        stream: '[AI] The `--stream` option in the `http` command of tools like `curl` or `wget` enables streaming mode during a transfer. In this mode, data is written to the output file as it is received instead of waiting for the entire download to finish first. This can be useful for handling large files or live streams. The data is typically buffered in chunks before being written to the file, allowing for efficient and seamless data transfer.'
        style: '[AI] The `--style` flag in the `http` command, which is typically used with tools like `curl` or `httpie`, specifies the format of the response data. It can be used to instruct the tool to parse and handle the response differently based on the specified format. For instance, `--style plain` will print the raw response body without any additional formatting, while `--style json` will parse and output the JSON response as an associative array or dictionary in most programming languages. Other common styles include XML and table formats.'
        timeout: '[AI] `--timeout` is an option used with the `HTTP` command in tools like `curl` and `httpie`. It sets a time limit for the command to wait for a response from the server before considering it as a failed request. The option takes a value in seconds, and if the server does not respond within that time, the command will return an error. This can be useful in cases where network issues or slow servers may cause delays in response.'
        traceback: '[AI] `http --traceback` is a command-line tool provided by the `httpie` library, which is used for making HTTP requests in a human-friendly way. The `--traceback` option specifically is used to provide a detailed error message or response when an HTTP request fails. This includes the status code, headers, and sometimes even the cause of the failure. It helps developers debug their code quickly and effectively by providing valuable information about what went wrong during the HTTP request.'
        unsorted: '[AI] The `--unsorted` option in the `http` command of `curl` or other tools like `httperf` is used to disable the sorting of HTTP headers'' output. By default, these tools display headers in alphabetical order for better readability. However, when dealing with large amounts of data or specific use cases, it might be desirable to keep the headers in their original order. The `--unsorted` flag achieves this by suppressing the sorting process and maintaining the headers'' original sequence in the output.'
        verbose: '[AI] The `http --verbose` command is used with tools like `curl` or `wget` to make an HTTP request with increased output verbosity. This means that the command will print out more detailed information about the request and response, including headers, timestamps, and other debugging information. It''s useful for troubleshooting network issues, examining server responses, or understanding the flow of data during an HTTP transfer.'
        verify: '[AI] `http --verify` is a command used in tools like `curl` and `libcurl` for HTTP transfers. It''s an option that enables SSL certificate verification during secure communications. In other words, it ensures that the server''s SSL certificate presented to the client matches the one expected by the application or user. This helps prevent man-in-the-middle attacks where an attacker could intercept and impersonate a secure connection.'
        version: '[AI] The `http --version` command is used with the HTTP client library, such as `httping`, `hreq`, or `httpie`, to check for the installed version of the library. When executed in a terminal or command prompt, it returns the current version number and build information, allowing users to ensure they have the latest version or check the compatibility with other software.'
