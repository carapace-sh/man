# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cat-file
description: Provide content or type and size information for repository objects
group: low-level interrogator
flags:
    --allow-unknown-type: allow -s and -t to work with broken/corrupt objects
    --batch-all-objects: show all objects with --batch or --batch-check
    --batch-check=: show info about objects fed from the standard input
    --batch=: show info and content of objects fed from the standard input
    --buffer: buffer --batch output
    --filters: for blob objects, run filters on object's content
    --follow-symlinks: follow in-tree symlinks (used with --batch or --batch-check)
    --path=: use a specific path for --textconv/--filters
    --textconv: for blob objects, run textconv on object's content
    --unordered: do not order --batch-all-objects output
    -e: exit with zero when there's no error
    -p: pretty-print object's content
    -s: show object size
    -t: show object type
documentation:
    command: '[AI] `git cat-file` is a Git command used to read the contents of specific Git objects such as commits, trees, or blobs stored in the Git repository. It displays the raw data represented by the given object. The command takes an argument which is the SHA-1 hash identifier of the object. For example, `git cat-file -p <hash>` will display the contents of the specified object.'
    flag:
        allow-unknown-type: '[AI] `git cat-file --allow-unknown-type` is a Git command used to read the contents of a Git object by its name or hash. The `--allow-unknown-type` option allows Git to handle objects with unknown types, which can be useful when working with custom or non-standard Git objects. When this option is used, Git will attempt to parse the object data as if it were a known type, even if it''s not officially recognized by Git. This command can be helpful in certain edge cases or when dealing with experimental Git features.'
        batch: '[AI] `git cat-file --batch` is a Git command used to retrieve multiple object types (commits, trees, or blobs) in batch mode. This command reads objects'' SHA-1 hashes from its standard input stream and writes their corresponding type and contents to the standard output stream. The flag `--batch` enables this batch processing behavior. It is often used in Git scripts or custom tools to efficiently retrieve multiple Git object data.'
        batch-all-objects: '[AI] `git cat-file --batch-all-objects` is a Git command used to output a list of object names and their corresponding object types in batches, separated by a newline character. The `--batch` option enables this behavior, while the `--all-objects` option instructs Git to include all reachable objects (commits, trees, and blobs) in the repository. This command is often used in scripts or automated workflows for processing large Git repositories.'
        batch-check: '[AI] `git cat-file --batch- check` is a Git command used to verify the validity of a list of object names without fetching or checking them out. It reads objects from standard input, one SHA-1 hash per line, and checks if each object exists and is a valid commit, tree, tag, or blob. If an object is invalid, its name is printed followed by an error message. The command exits with zero status if all objects are valid, and non-zero otherwise. It''s useful for automated scripts that need to validate Git repository integrity.'
        buffer: '[AI] `git cat-file --buffer` is a Git command used to read the raw contents of a specific Git object (commit, tree, or blob) stored in the Git database without decoding or interpreting it. The `--buffer` option returns the output as binary data instead of pretty-printed format. This command is often used when dealing with large binaries, such as files in a Git repository, to inspect their raw contents directly.'
        e: '[AI] `git cat-file -e` is a Git command used to display the object''s metadata, specifically for a commit or tree object. The `-e` flag stands for "raw output in the format of an ANSI-escaped string". This command can be useful for inspecting the contents of a Git object without having to check out the entire history or working directory associated with that object. It provides a human-readable representation of the object''s data, including its parent commits and commit message.'
        filters: '[AI] `git cat-file --filters` is a command used in Git, a version control system. This command is used to retrieve the type and optional filters of a Git object, such as a commit or a tree. The `--filters` option requests that Git outputs any registered filters for the given object, if present. Filters are external scripts or programs that can modify the contents of objects before they are stored in the Git repository. These filters can be used to manipulate data before it''s committed, such as converting text to a different format or compressing files.'
        follow-symlinks: '[AI] `git cat-file --follow-symlinks` is a Git command used to show the type and content of a specific Git object. With the `--follow-symlinks` option, it will also resolve any symbolic links (symlinks) pointed by the given object before displaying its content. This can be useful when investigating the history or inspecting complex Git structures involving symlinks.'
        p: '[AI] `git cat-file` is a Git command used to show the contents of various types of Git objects, such as commits, trees, and blobs. The `-p` option is used with this command to display the object''s data in its raw, delta-encoded format. In essence, it prints the contents of the specified Git object.'
        path: '[AI] `git cat-file --path` is a Git command used to display the path of a specific tree or blob object in a Git repository. When you run this command followed by an object name, Git will look up the type and size of the object, then output the file path where this object''s data is stored if it is a tree or a commit with a tree as its parent. If the object is not a tree, no file path will be displayed. This command helps you to understand the file system structure in your Git repository and find the actual files corresponding to specific objects.'
        s: '[AI] `git cat-file -s` is a command used in Git version control system to display the size of a specific object (commit, tree, or blob) in bytes. The "-s" option stands for "show size only." When you run this command followed by an object hash, Git will return the object size as output. This command can be helpful when you want to check the size of an object without fully displaying its contents.'
        t: '[AI] `git cat-file -t` is a command used in Git version control system to determine the type of a given Git object. The object can be specified by its name or hash value. The command outputs the type of the object, which can be one of "commit", "tree", "blob", or other types such as tag or annotated tag. This information can be useful for scripting and automated tasks in Git.'
        textconv: '[AI] `git cat-file --textconv` is a Git command used to retrieve the contents of a specific object in a Git repository, such as a commit or a tree, applying a specified text conversion filter on its content before printing it out. The `--textconv` option enables this behavior and can be followed by an optional custom conversion filter to apply. This command is particularly useful for dealing with binary files stored in Git, as it allows processing their contents according to certain rules or conversions (e.g., decoding a compressed or encoded file) before viewing or manipulating them further.'
        unordered: '[AI] `git cat-file --unordered` is a Git command used to display the contents of named objects (commits, trees, or blobs) in an unordered list format. It''s primarily used for checking the status of multiple objects in a repository without having to manually inspect each one individually. The `--unordered` option results in the output being displayed without any hierarchical organization.'
