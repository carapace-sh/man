# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: coredumpctl
description: List or retrieve coredumps from the journal
flags:
    --all: Look at all journal files instead of local ones
    --debugger=: Use the given debugger
    --file=: Use journal file
    --json=: Generate JSON output
    --no-legend: Do not print the column headers
    --no-pager: Do not pipe output into a pager
    --version: Print version string
    "-1": Show information about most recent entry only
    -A, --debugger-arguments=: Pass the given arguments to the debugger
    -D, --directory=: Use journal files from directory
    -F, --field=: List all values a certain field takes
    -S, --since=: Only print coredumps since the date
    -U, --until=: Only print coredumps until the date
    -h, --help: Show this help
    -n=: Show maximum number of rows
    -o, --output=: Write output to FILE
    -q, --quiet: Do not show info messages and privilege warning
    -r, --reverse: Show the newest entries first
documentation:
    command: '[AI] `coredumpctl` is a system utility tool in Linux used to manage and control core dumps generated by various processes due to crashes or signals such as SEGV (Segmentation Violation) or ABRT (Abort). It allows viewing, deleting, or saving the core dump files, which can be useful for debugging and analysis. The tool interacts with the `systemd-coredump` service to perform these actions.'
    flag:
        "1": '[AI] `coredumpctl` is a system utility in Linux for managing and controlling core dumps. The option `-1` is used to display information about the most recent core dump, if one exists. It provides details like the process ID (PID) that generated the core dump, location of the file, and timestamp of creation. In summary, `coredumpctl -1` commands the tool to show the details of the latest core dump available in the system.'
        all: '[AI] `coredumpctl --all` is a command used in Linux systems to list all core dumps present in the system. The `coredumpctl` utility is part of the glibc package and is used for managing and controlling core dumps. The `--all` option tells the command to show information about all available core dumps, including their process IDs, sizes, and locations.'
        debugger: |-
            [AI] `coredumpctl` is a system utility in Linux for handling core dumps, which are memory snapshots taken when a process crashes. The `--debugger` option is used to start a debugging session for the process that created the core dump.

            When you run `coredumpctl --debugger <pid>`, it will attach a debugger (usually GDB) to the core dump of the specified process ID (PID). This allows you to analyze the state of the process at the time of crash, inspect variables and memory, set breakpoints, step through code, etc.

            In summary, `coredumpctl --debugger` is a command used to initiate a debugging session on a core dump with the GNU Debugger (GDB) tool.
        debugger-arguments: |-
            [AI] `coredumpctl` is a system utility in Linux for handling core dumps, which are memory snapshots taken during a process crash. The option `--debugger-arguments` is used to specify arguments that will be passed to a debugger when using `coredumpctl` to attach to and debug a crashed process.

            For instance, if you have a crashed process with a core dump, you can use the command `coredumpctl attach <pid>.<session_id> -- <debugger-arguments>`, where `<pid>.<session_id>` is the unique identifier for the core dump and `<debugger-arguments>` are the arguments you want to pass to your preferred debugger, like gdb.

            So, `coredumpctl --debugger-arguments="<args1> <args2> ..."` sets up the arguments that will be used when invoking the debugger through `coredumpctl attach`. This can help ensure consistent debugging environments and configurations.
        directory: '[AI] `coredumpctl --directory` is a command used in systemd, a popular system and service manager for Linux operating systems. This command returns the directory path where core dumps are stored by default for processes managed by systemd. It does not create or manage core dumps but only reveals their storage location. The directory can be changed using the `/etc/systemd/coredump.conf` configuration file.'
        field: '[AI] `coredumpctl` is a system utility in Linux for managing core dumps generated during program crashes. The command `coredumpctl --field` is used to display the contents of specific fields in the core dump file. The flag `--field` followed by the field name is used to filter and output only that particular field''s data from the core dump file. For example, `coredumpctl --field=registers <pid>` will display the register values of the process with the given PID from its core dump file.'
        file: '[AI] `coredumpctl --file` is a command in Linux used to manage and control core dumps. The `--file` option specifies the file path where the core dump should be written or from which it should be read. When writing a core dump, this option tells the system to save the core dump into the specified file instead of the default location. Conversely, when reading a core dump, this option indicates the file containing the core dump data that will be used for analysis.'
        help: |-
            [AI] `coredumpctl` is a system utility for Linux used to manage core dumps, which are memory snapshots generated when a process crashes or receives a signal like SIGSEGV or SIGABRT. The command `coredumpctl --help` provides information about the available options and usage of this tool. Here's a brief summary:

            `coredumpctl` is typically used by system administrators to view, delete, and save core dumps. It offers various options such as:

            - Listing existing core dumps with `--list` or just using `coredumpctl`.
            - Viewing the contents of a core dump with `<pid> <corefile>`.
            - Deleting core dumps using `--remove <pid>` or `--remove <corefile>`.
            - Saving the standard output, standard error and a core file to a specific file when starting a program with `--init=<command> --append=<append> -- <arguments>`.

            The help command itself (`--help`) provides detailed information about each option and their usage. It also explains how to use the tool in interactive mode by simply invoking it without any arguments.
        json: '[AI] `coredumpctl` is a system utility in Linux for managing core dumps generated during program crashes. The command `coredumpctl --json` is used to retrieve information about core dumps in JSON format. It returns metadata such as process ID, timestamp, size, and location of the core file, enabling automated processing and analysis of core dumps by scripts or other tools.'
        "n": '[AI] `coredumpctl` is a system utility in Linux used to manage and control core dumps generated by processes. The command `coredumpctl -n` is used to display the names of all current core dumps stored in the default core dump directory without any additional output or formatting. It simply lists the filenames of the core dumps, one per line.'
        no-legend: '[AI] `coredumpctl` is a system utility in Linux for managing and analyzing core dumps of crashed processes. The command `coredumpctl --no-legend` is used to display the list of available core dumps without printing the legend or header information. This can be useful when automating scripts or processing large numbers of core dumps, as it saves time by avoiding the unnecessary display of repeated headers.'
        no-pager: '[AI] `coredumpctl` is a Linux system utility for managing and handling core dumps generated during program execution when they encounter fatal errors. The command `coredumpctl --no-pager` is used to list all available core dumps without displaying the contents in paginated format (i.e., one page at a time). In other words, it simply lists the names and locations of the core files without any paging intervention.'
        output: |-
            [AI] `coredumpctl --output` is a command from the systemd utility in Linux systems. It's used to interact with core dumps, which are memory snapshots of a crashed or terminated process. The `--output` option specifies how the output should be produced.

            It can take various formats such as raw binary, minidump, gdb, or exec. For example, `coredumpctl --output=raw /path/to/core.pid` will produce a raw binary core dump at the specified path. By default, it outputs to stdout if no format is specified.

            This command provides system administrators and developers with a tool to examine the state of a crashed process for debugging purposes.
        quiet: '[AI] `coredumpctl` is a system utility in Linux used to manage and handle core dumps, which are memory snapshots of a crashed or terminated process. The `--quiet` option is used to suppress all output except error messages. So, when you run `coredumpctl --quiet`, it will not display any normal output or status messages. It only shows errors if any occur during the core dump handling process.'
        reverse: '[AI] `coredumpctl` is a system utility in Linux used to manage core dumps, which are files containing the memory content of a process at the time of its termination due to an error or a signal. The command `coredumpctl --reverse` is used to list core dumps in reverse order based on their creation time. In other words, it displays the oldest core dump first and the most recent one last.'
        since: '[AI] `coredumpctl --since` is a command in the Systemd debugging and crash report analysis toolkit. It is used to list core dumps generated by a system since a specific point in time. The `--since` option takes a date or a duration as an argument, and returns information about core dumps that have been created after the specified time. This command can help administrators identify and analyze crash reports for troubleshooting purposes.'
        until: |-
            [AI] `coredumpctl` is a system utility in Linux for managing core dumps. The command `coredumpctl --until` follows this format: `coredumpctl [OPTIONS] --until [TIME]`.

            This command lists core dumps that were created before the specified time. The `--until` option takes a time argument, which can be in various formats such as absolute timestamp (e.g., 2021-03-16 14:28:57), relative duration (e.g., -1h), or an absolute file path with a timestamp appended to it (e.g., /var/core/my_app_`<timestamp>`).

            When used, the command returns information about each core dump that matches the condition, including the process ID and the time of creation. If no core dumps are found, an empty output is returned.
        version: '[AI] `coredumpctl` is a system utility in Linux for managing core dumps, which are memory snapshots of a running process at the time of a crash or termination. The command `coredumpctl --version` is used to display the version information of the installed `coredumpctl` tool. It provides details such as the name, version number, and other relevant information like the Git commit hash and build date. This helps in identifying the specific version of the tool that''s being used for debugging or troubleshooting purposes.'
