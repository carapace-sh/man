# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: compile
description: Generates executable SQL from source, model, test, and analysis files
flags:
    --defer: Defer to the state variable for resolving unselected nodes
    --exclude*=: Specify the models to exclude
    --favor-state: Defer to the state variable for resolving unselected nodes
    --log-path=: Configure the 'log-path'
    --no-defer: Do not defer to the state variable for resolving unselected nodes
    --no-favor-state: If defer is set, expect standard defer behaviour
    --no-version-check: Skip ensuring dbt's version matches the one specified in the dbt_project.yml
    --parse-only: Only parse
    --profile=: Which profile to load. Overrides setting in dbt_project.yml
    --project-dir=: Which directory to look in for the dbt_project.yml file
    --selector=: The selector name to use
    --state=: Use the given directory as the source for json files to compare
    --target-path=: Configure the 'target-path'
    --threads=: Specify number of threads to use while executing models
    --vars=: Supply variables to the project
    -f, --full-refresh: Dbt will drop incremental models and fully-recalculate
    -h, --help: show this help message and exit
    -m, --models*=: Specify the nodes to include
    -s, --select*=: Specify the nodes to include
    -t, --target=: Which target to load for the given profile
documentation:
    command: '[AI] `dbt compile` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. It compiles your dbt project by running the data tests defined in each model file, ensuring data correctness before generating the output artifacts for downstream consumption. The resulting materialized views are stored in the specified target database or files, ready for querying and further analysis.'
    flag:
        defer: '[AI] `dbt compile --defer` is a command in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command instructs dbt to compile your models, but not run them. The `--defer` flag means that the results of the compilation will be stored as metadata, but not physically materialized into output files. This allows you to inspect any errors or warnings that may have occurred during compilation without affecting your production data. You can then choose to manually run affected models or use dbt''s built-in error handling features to automatically retry failed runs.'
        exclude: '[AI] `dbt compile --exclude` is a command used in dbt (data build tool) to compile your data models but exclude specific models or artifacts from being built. The `--exclude` option takes a list of model or artifact names or a globs pattern as an argument, and these items are excluded from the compilation process. This can be useful when you want to quickly test changes to certain models without affecting the entire dataset or when dealing with conflicts between dependent models.'
        favor-state: '[AI] `dbt compile --favor-state` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This specific command tells dbt to prioritize using the existing materialized results (also known as "states") of queries instead of re-running them during the compilation process. By doing so, it can save time and resources, especially when working with large datasets or complex transformations. Additionally, this flag ensures that the latest state is used even if the corresponding SQL scripts have not changed, providing consistency across runs.'
        full-refresh: '[AI] `dbt compile --full-refresh` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This command triggers a full refresh of the data model, which involves recompiling all models from scratch, running all tests again, and then materializing the results into the specified output locations. This process ensures that any changes made to the models or tests are reflected in the final output, providing a complete and up-to-date data model for downstream consumption.'
        help: '[AI] `dbt compile --help` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command, when run, displays detailed help information about the `dbt compile` functionality. The `compile` process in dbt is responsible for building and materializing models defined in your dbt project into their target database schema. With this command, users can understand how to use the `compile` function effectively, including available options such as specifying a particular profile or selecting specific models to be compiled.'
        log-path: '[AI] The `dbt compile --log-path` command in dbt (Data Build Tool) is used to compile your dbt project and write the log output to a specified file path instead of the console or standard error stream. This can be helpful for large projects where the log output might be extensive, or when you want to save and review the logs later. The flag `--log-path` followed by the desired file path is passed as an argument to the command. For example: `dbt compile --log-path=/path/to/logs.txt`.'
        models: '[AI] `dbt compile --models` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command triggers the compilation of dbt models, which are SQL scripts that define data transformations, into executable SQL files. The output is stored as artifacts, allowing for efficient and consistent execution of downstream tasks such as testing, documentation generation, and production deployment.'
        no-defer: '[AI] `dbt compile --no-defer` is a command used in dbt (Data Build Tool), an open-source data transformation and testing tool. This command instructs dbt to compile all models (data transformations) synchronously without deferring the execution of any downstream models. In other words, it runs each model''s compilation independently and waits for each one to complete before moving on to the next, ensuring that any errors or failures are reported immediately.'
        no-favor-state: '[AI] `dbt compile --no-favor-state` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This specific command instructs dbt to perform a compile operation without using the last known good state of the profiles. In other words, it compiles all models from scratch instead of trying to use previously successful states. This can be useful for debugging issues or when making significant changes to your data pipeline.'
        no-version-check: |-
            [AI] The `dbt compile` command is used in dbt (Data Build Tool), an open-source data transformation and testing toolkit, to build and compile your data models defined using SQL or other supported languages.

            The `--no-version-check` flag is an optional argument that can be passed with the `compile` command to disable version checking during compilation. This means that dbt will not check if the database schema matches the defined model versions before running the builds. It may lead to data inconsistencies, data loss or other unexpected results if used carelessly. Therefore, it should only be used when you're sure about the consequences and prefer to bypass this safety feature.
        parse-only: '[AI] `dbt compile --parse-only` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command instructs dbt to only parse the given dbt projects and models without executing any transformations or materializing results into files. The primary use cases for `--parse-only` include checking syntax errors, verifying model dependencies, and generating documentation in formats like Markdown or HTML.'
        profile: '[AI] `dbt compile --profile` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command triggers the compilation of dbt projects into executable SQL files using the specified profile. Profiles define various settings, such as target database connection details and selective model execution. Using `--profile` allows users to configure different environments, making it easier to manage and maintain data pipelines across multiple systems.'
        project-dir: '[AI] `dbt compile --project-dir` is a command used in dbt (data build tool), an open-source data transformation and testing toolkit. This command instructs dbt to compile all models, snapshots, and tests present in the specified project directory into SQL files and artifacts. The output will be written to the `_dbt/compiled` subdirectory within the project directory. Compilation checks for any errors or discrepancies between the model definitions and the database schema. Once compiled successfully, data can be materialized (run) using the `dbt run` command.'
        select: '[AI] `dbt compile --select` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command instructs dbt to only compile models (data transformations) that match the given selection criteria. The arguments for selection can be model names, tags, or a combination of both. For example, `--select my_model` will compile only the model named "my\_model". This feature is useful for incremental development and testing of specific models within the dbt project without affecting the entire dataset.'
        selector: '[AI] `dbt compile --selector` is a command used in dbt (Data Build Tool), an open-source data transformation toolkit. This specific command triggers the compilation of only the models or artefacts (defined by selectors) that match the given criteria, instead of compiling all models in the project. Selector is a filter to specify which models or artefacts should be compiled based on their names, tags, or other metadata. It helps improve the development cycle efficiency by enabling incremental compilation and reducing unnecessary recompilation time.'
        state: '[AI] `dbt compile --state` is a command used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This specific command triggers the compilation of dbt projects, applying all the defined data transformations, and producing output files. The `--state` option enables saving and loading the state of a compile operation. In other words, it allows you to resume partially completed compiles from where they left off. If no error occurs during the compilation process, the state file will be updated as well, so that subsequent compiles can start from the last successful point.'
        target: '[AI] `dbt compile --target` is a command used in dbt (Data Build Tool), an open-source data transformation and orchestration tool. This command triggers the compilation of dbt models, scripts, and materializations into executable SQL queries against the specified target database. The resulting output is written to the `_dbt_output` folder. By default, this command compiles all models in the project, but using the `--target` flag allows specifying a particular database schema or environment as the target for the compiled output.'
        target-path: '[AI] `dbt compile --target-path` is a command used in dbt (data build tool), an open-source data transformation and orchestration tool. This command compiles your dbt projects, meaning it converts your SQL scripts into materialized tables or snapshots based on the defined profiles. The `--target-path` flag specifies the location where the output files will be saved after compilation.'
        threads: '[AI] The `dbt compile --threads` command is used in dbt (Data Build Tool), an open-source data transformation and testing toolkit. This specific command instructs dbt to run the compilation of your data models and tests concurrently using multiple threads for improved build times. By default, dbt compiles each artifact sequentially. However, specifying `--threads` followed by a number allows you to compile multiple artifacts in parallel using that many threads, up to the number of available system threads. This can significantly reduce the overall time it takes to complete the data transformation and testing process.'
        vars: '[AI] `dbt compile --vars` is a command used in dbt (Data Build Tool), an open-source data transformation and testing tool for data engineering teams. This command compiles dbt projects, applying and evaluating defined variables passed through the `--vars` option before running any tests or materializing any outputs. It allows users to set values for dynamic variables, overriding their default definitions in the project''s `profiles.yml` file. This way, users can customize their data transformations without changing the source code directly.'
