# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: rustdoc
description: Build a package's documentation, using specified custom flags.
flags:
    --all-features: Activate all available features
    --all-targets: Build all targets
    --bench*=: Build only the specified bench target
    --benches: Build all benches
    --bin*=: Build only the specified binary
    --bins: Build all binaries
    --example*=: Build only the specified example
    --examples: Build all examples
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Build only this package's library
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --open: Opens the docs in a browser after the operation
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Build only the specified test target
    --tests: Build all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package=: Package to document
    -q, --quiet: Do not print cargo log messages
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo rustdoc` is a command used in Rust programming language projects built with Cargo build system. It generates documentation for the project using Rust''s integrated documentation commenting style (also known as `//!* doc comments`). The generated documentation is saved in HTML format inside the `docs/target/docs` directory, which can be served locally or published online. This command helps developers and users to explore the public interfaces of a Rust library or executable, including functions, structs, traits, and modules.'
    flag:
        all-features: '[AI] `cargo rustdoc --all-features` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for all the crates (Rust libraries or binaries) and their dependencies in a project, including all their public and private features. The `--all-features` flag ensures that all features are documented, even if they are marked as private. The generated documentation is written in Markdown format and saved in the `docs` directory within each crate''s source folder.'
        all-targets: '[AI] The `cargo rustdoc` command with the `--all-targets` flag is used in Rust programming language to generate documentation for all target platforms and configurations defined in a Cargo project''s `Cargo.toml` file. It invokes the Rust documentation generator, Rustdoc, for every target in your project, resulting in a comprehensive set of up-to-date documentation being generated.'
        bench: '[AI] `cargo rustdoc --bench` is a command used in Rust programming language to generate documentation for the project (using `rustdoc`) and run benchmarks (using `--bench` option). This command will compile your Rust code, generate the documentation files, and then execute the specified benches to measure their performance. The results of the benchmarks are printed in the terminal.'
        benches: '[AI] `cargo rustdoc --benches` is a command used in Rust programming language to generate documentation and run benchmarks for a specific crate or project. The `cargo` part is the build tool for Rust projects, and `rustdoc` is the documentation generator. The `--benches` flag instructs `rustdoc` to also build and test any provided benchmarks in the project''s source code.'
        bin: '[AI] `cargo rustdoc --bin` is a command used in Rust programming language''s build system, Cargo. It generates documentation for a binary target. The `--bin` argument specifies which binary target to document. This command generates HTML files containing the documentation, which can be found in the `target/docs` directory.'
        bins: '[AI] `cargo rustdoc --bins` is a command used in Rust programming language''s Cargo build tool. It generates documentation for the executable (binary) targets defined in the project, using Rust''s integrated documentation generator called `rustdoc`. This command produces HTML files containing the docs under the `target/docs` directory.'
        example: '[AI] The `cargo rustdoc --example` command is used to generate documentation for a specific Rust library example using Cargo, Rust''s package manager. This command invokes the Rust Documentator (Rustdoc) tool with the `--example` flag to document an example provided in a Cargo project. The generated HTML files will be located in the `target/docs` directory.'
        examples: '[AI] `cargo rustdoc --examples` is a command used in Rust programming language''s Cargo build system. It generates documentation for the examples that come with your Rust library or binary crate. The flag `--examples` specifically instructs Cargo to include and document any example files during the documentation generation process. This allows users to easily understand how to use your library or binary by providing working code snippets along with their descriptions.'
        features: '[AI] `cargo rustdoc --features` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for the source code using Rust''s integrated document generator, `rustdoc`. The `--features` flag is optional and specifies which crate features should be documented. When specified, only the documentation for the selected features will be generated. This can help reduce the size of the generated documentation if only certain parts are needed.'
        help: '[AI] `cargo rustdoc` is a command-line tool provided by Rust''s package manager, Cargo. It generates documentation for Rust libraries and binaries using Rust''s built-in documentation comment macros (`#[doc]`). The `--help` flag is used to display help information about this specific command. It provides an overview of the command''s usage, available options, and their descriptions. This can be helpful for understanding how to use `cargo rustdoc` correctly and effectively when working on Rust projects.'
        ignore-rust-version: '[AI] `cargo rustdoc` is a command in Rust programming language''s Cargo build system used to generate documentation for Rust libraries or binaries. The `--ignore-rust-version` flag is an option that tells `cargo rustdoc` not to check the version of the Rust compiler (rustc) used to build the project against the version specified in the project''s Cargo.toml file. This can be useful when generating documentation for a project built with a different compiler version than the one originally intended, ensuring that the generated documentation remains consistent regardless of the rustc version used.'
        jobs: '[AI] `cargo rustdoc` is a Rust command used to generate documentation for your project using the `rustdoc` tool. The `--jobs` flag specifies the number of parallel jobs to run when generating documentation. This can help reduce the total time it takes to generate the docs, especially for larger projects. For example, `cargo rustdoc --jobs 4` would tell Rust to use 4 jobs in parallel during the documentation generation process.'
        keep-going: '[AI] `cargo rustdoc` is a Rust command used to generate documentation for a Rust project. The `--keep-going` flag is an option that instructs Cargo to continue processing the remaining targets even if an error occurs while generating documentation for one of them. In other words, it prevents the build process from stopping after encountering an error in documenting a single target and allows documentation generation for the rest of the targets to continue.'
        lib: '[AI] `cargo rustdoc --lib` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for library targets using Rust''s built-in documentation generator, rustdoc. The `--lib` flag indicates that the documentation should be generated for a library project, as opposed to an executable project.'
        manifest-path: '[AI] The `cargo rustdoc` command is a tool used in Rust programming for generating documentation for projects using Rust''s built-in documentation system. The option `--manifest-path <PATH>` specifies the location of the Cargo manifest file (usually named `Cargo.toml`) in the project directory. This path is required to locate and build the project''s documentation.'
        message-format: |-
            [AI] The `cargo rustdoc` command is a tool in Rust's package manager Cargo for generating documentation for Rust libraries and binaries. The `--message-format` flag is used to specify the format of the messages produced during documentation generation.

            When this flag is not provided, the default message format is simple text messages. However, by providing a value such as `json`, `xml`, or `markdown`, the corresponding format will be used for the messages, making it easier to consume the output programmatically or in a more structured way.
        no-default-features: '[AI] The `cargo rustdoc` command is a Rust tool used to generate documentation for a Rust project. The flag `--no-default-features` is used to disable the inclusion of default features when generating documentation. This means that only explicitly listed features will be documented, providing more fine-grained control over which parts of the codebase are documented.'
        open: '[AI] `cargo rustdoc` is a command-line tool for Rust projects using Cargo build system. The `--open` flag is an option to this command, which opens the generated documentation in your default web browser after building and documenting the project. It makes it easy to explore and navigate the API of the documented Rust library or executable.'
        package: '[AI] The `cargo rustdoc --package` command is used in Rust programming language''s Cargo build system to generate documentation for a specific package. The `rustdoc` tool extracts and formats documentation comments from the source code, creating HTML files that document the API and usage of the package. The `--package` flag specifies which package in the project to document.'
        profile: '[AI] `cargo rustdoc --profile` is a command used in Rust programming language''s build system, Cargo. This command generates documentation for the crate using Rust''s integrated documentation generator, `rustdoc`. The `--profile` flag enables profiling during the documentation generation process. This can help identify performance bottlenecks and memory leaks in the codebase, providing valuable insights into the crate''s implementation.'
        quiet: '[AI] `cargo rustdoc` is a command used in Rust programming language to generate documentation for crates (libraries or executables) using the built-in Rust documentation generator, `rustdoc`. The `--quiet` flag is an option that suppresses informational messages during the execution of this command. In other words, it runs the command with minimal output, only displaying errors or warnings if any occur during the documentation generation process.'
        release: '[AI] `cargo rustdoc --release` is a command used in Rust programming language''s build system, Cargo. This command generates the HTML documentation for the crate (Rust project) using the release configuration. It builds the project artifacts under `target/release`, then uses the `rustdoc` tool to document those artifacts and generate HTML files under `target/docs/`. The result is high-quality, release-ready documentation that''s optimized for readability and accessibility.'
        target: '[AI] `cargo rustdoc --target` is a command used in Rust programming language''s Cargo build tool. This command generates documentation for a specific target within a project using the Rustdoc documentator. The `--target` option specifies the name of the target for which to generate documentation (e.g., `lib`, `bin`, or a test suite). This output can be used to create or update the HTML, Markdown, or other formats of the project''s documentation.'
        target-dir: '[AI] `cargo rustdoc` is a Rust command used to generate documentation for a Rust project using the integrated Rust documentation system. The `--target-dir` flag specifies the output directory where the generated HTML documentation files will be saved after running the command. In summary, this flag tells `cargo rustdoc` to write the generated documentation to the specified directory.'
        test: |-
            [AI] `cargo rustdoc --test` is a command used in Rust programming language's build system, Cargo. This command combines two actions:

            1. Generating documentation for your project using `rustdoc`. It collects and processes the comments within your source code to create HTML or other document formats.
            2. Running tests for your project. The `--test` flag triggers Cargo's test runner, which compiles and executes all test functions in your project.

            So, this command does two things: it generates documentation and runs tests, providing both documentation and feedback on the correctness of your code in one go.
        tests: |-
            [AI] `cargo rustdoc --tests` is a command used in Rust programming language's build system, Cargo. This command combines two functionalities: generating documentation (`rustdoc`) and running tests (`--tests`).

            When executed, it will first generate the HTML documentation for your project using `rustdoc`. Then, it will compile and run all tests defined in the project. If any tests fail, the build process will stop with an error message.

            This command is particularly useful when you want to make sure that your documentation is up-to-date and that all tests are passing before publishing or sharing your library or application.
        timings: '[AI] `cargo rustdoc` is a Rust tool for generating documentation for your project using the `rustdoc` command. The `--timings` flag is an option provided with this command to generate detailed performance timings during the documentation build process. These timings can be useful for analyzing and optimizing documentation generation time, especially for larger projects or those with complex dependency graphs.'
        unit-graph: '[AI] `cargo rustdoc` is a Rust command-line tool that generates documentation for Rust projects. The `--unit-graph` flag generates an interactive unit test coverage graph using the `html-Report` format. It shows each tested Rust source file as a node, and the connections between nodes represent tests that cover multiple files or parts of files. This graph helps developers to quickly understand which parts of their codebase are well-tested and where further testing efforts are needed.'
