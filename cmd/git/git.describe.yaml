# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: describe
description: Give an object a human readable name based on an available ref
group: main
flags:
    --abbrev?: use <n> digits to display object names
    --all: use any ref
    --always: show abbreviated commit object as fallback
    --broken?: 'append <mark> on broken working tree (default: "-broken")'
    --candidates=: 'consider <n> most recent tags (default: 10)'
    --contains: find the tag that comes after the commit
    --debug: debug search strategy on stderr
    --dirty?: 'append <mark> on dirty working tree (default: "-dirty")'
    --exact-match: only output exact matches
    --exclude=: do not consider tags matching <pattern>
    --first-parent: only follow first parent
    --long: always use long format
    --match=: only consider tags matching <pattern>
    --tags: use any tag, even unannotated
documentation:
    command: '[AI] `git describe` is a Git command that generates a shorthand commit message for the current HEAD, including the number of commits since the nearest tag. The output includes the ref name, the tag if it exists, and the number of commits since that tag in the format `<refname>@{<num>}` where `<num>` is the number of commits since the last tag. If the current branch has no tags, it will print `(no tags)`. This command can be useful for getting a quick reference to the state of your repository based on its commit history.'
    flag:
        abbrev: '[AI] `git describe --abbrev` is a Git command that returns a short, abbreviated description of the current commit or tag in Git repositories. The output consists of the number of recent commits (count) and their abbreviated hashes (prefix), separated by a hyphen (-). For example: `4-gitsubcommand` would represent the 5th commit starting from the most recent one, with its hash being the first 7 characters of that commit''s SHA-1. This command is particularly useful when working with multiple branches and quickly wanting to identify the current state in terms of commits.'
        all: '[AI] `git describe --all` is a Git command that returns a refname and a commit message or abbreviated commit hash, representing the most recent tag and its associated commit in the current repository. It displays the full history of the branch or tag, showing each tag and its corresponding commit with the number of intermediate commits since that tag. This command can be useful for getting detailed information about the project''s historical tags and their respective commits.'
        always: '[AI] `git describe --always` is a Git command used to generate a descriptive tag for the current commit. The `--always` option ensures that an abbreviated commit hash is always included in the output, preceded by the tag prefix and the number of commits since the specified tag (if any). For example, if the latest tag is ''v1.2.3'' and there have been two commits since then, the output will be ''v1.2.3-2''. This command helps in quickly getting a descriptive reference to the current commit''s history.'
        broken: '[AI] `git describe --broken` is a Git command that returns the abbreviated commit hash and a message describing the number of unmerged changes in the current branch relative to its upstream branch. The `--broken` flag specifically indicates that there are unmerged changes and appends a suffix "(`<number>` broken)". For instance, if there are 3 unmerged changes, it would display as "[abc123] 3 broken" or "[abc123] 3 merged commit(s)" if all changes were merged.'
        candidates: '[AI] `git describe --candidates` is a Git command that returns a list of possible tags for the current commit, up to the most recent tag. The output includes a list of tag names prefixed with the number of commits between each tag and the current one. The `--candidates` option provides multiple tag suggestions, allowing users to choose the desired tag based on their needs. It''s often used when you want to check out an older tag but are not exactly sure which one to use.'
        contains: '[AI] `git describe --contains` is a Git command used to find the tag that is most recent and contains a given commit. This command combines the functionality of both `git describe` and `git tag` commands. The `git describe` command shows the annotated tag message for the current commit or a specified commit, while `git tag` lists all tags that match a given pattern. By using `--contains`, Git will return the most recent tag whose tree matches the given commit. This is useful when you want to find the specific tag associated with a particular commit in a repository.'
        debug: '[AI] `git describe --debug` is a Git command that generates a more detailed and debug-level description of the current commit or tag. It outputs not only the abbreviated commit hash, tag name (if applicable), and annotated tag message but also various debug information such as ref names, parent hashes, and tagger information. This command can be useful for debugging Git workflows and understanding commit history in more detail.'
        dirty: '[AI] `git describe --dirty` is a Git command that returns the abbreviated commit hash and a message describing the number of uncommitted changes in the working directory, appended with "(detached, dirty)". The "dirty" part signifies the presence of local modifications or unstaged changes. This command provides an easy way to identify the current branch status along with any uncommitted work.'
        exact-match: '[AI] `git describe --exact-match` is a Git command used to find and output the exact tag name that matches a given commit SHA. It searches for the nearest tag in the past of the current branch or commit, starting from the first tag that is reachable from the given commit. This command can be useful when you need to reference a specific tag associated with a commit while performing other Git operations.'
        exclude: '[AI] `git describe --exclude` is a Git command used to get the tag name and the number of commits before a given commit, but excludes certain tags from consideration. The `--exclude` option takes one or more tag names as arguments, and those tags will be ignored when determining the description. For example, `git describe --exclude=v1.0` would give you the commit message and number of commits up to the most recent commit that is not tagged with "v1.0".'
        first-parent: '[AI] `git describe --first-parent` is a Git command that produces a shorthand commit tag based on the most recent common ancestor of the current branch and the current commit, following only the first-parent commits. It provides a more precise and shorter tag compared to the default `git describe` command which includes more tags along the entire history. This is useful when you need to reference the specific position in the commit history, especially with topic branches or when working on a feature that is frequently merged back into the mainline development branch.'
        long: '[AI] `git describe --long` is a Git command used to retrieve the abbreviated and annotated tag with a detailed message associated with that tag. The output includes the ref name prefix (e.g., ''refs/tags/''), the full tag name, and the tag message. It provides a more human-readable description compared to the short or exact format.'
        match: '[AI] `git describe --match` is a Git command used to retrieve the annotated tag or short commit hash that most closely matches a given input, such as a specific number of tags or a regular expression pattern. The `--match` option allows specifying a regex pattern for filtering the matching Tags. For instance, `git describe --tags --match="v*[0-9]\.*" HEAD` would return the most recent tag starting with "v" and containing numeric characters.'
        tags: '[AI] `git describe --tags` is a Git command used to retrieve the annotated tag name and the number of commits before a given commit, with the tags being part of the output. This means it shows you the most recent tag that can be applied to the current commit, along with the number of commits leading up to that tag. This is useful for quickly identifying the tag associated with a specific commit in a Git repository.'
