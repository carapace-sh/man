# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: preview
aliases:
    - pre
description: Show a preview of updates to a stack's resources
flags:
    --show-secrets: Emit secrets in plaintext in the plan file. Defaults to `false`
    -j, --json: Serialize the preview diffs, operations, and overall output as JSON
persistentflags:
    --client=: The address of an existing language runtime host to connect to
    --config-file=: Use the configuration values in the specified file rather than detecting the file name
    --config-path: Config keys contain a path to a property in a map or list to set
    --diff: Display operation as a rich diff showing the overall change
    --exec-agent=: ""
    --exec-kind=: ""
    --expect-no-changes: Return an error if any changes are proposed by this preview
    --policy-pack*=: Run one or more policy packs as part of this update
    --policy-pack-config*=: Path to JSON file containing the config for the policy pack of the corresponding "--policy-pack" flag
    --replace*=: Specify resources to replace. Multiple resources can be specified using --replace urn1 --replace urn2
    --save-plan=: '[EXPERIMENTAL] Save the operations proposed by the preview to a plan file at the given path'
    --show-config: Show configuration keys and variables
    --show-reads: Show resources that are being read in, alongside those being managed directly in the stack
    --show-replacement-steps: Show detailed resource replacement creates and deletes instead of a single step
    --show-sames: Show resources that needn't be updated because they haven't changed, alongside those that do
    --suppress-outputs: Suppress display of stack outputs (in case they contain sensitive values)
    --suppress-permalink?: Suppress display of the state permalink
    --target-dependents: Allows updating of dependent targets discovered but not specified in --target list
    --target-replace*=: Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn.
    -c, --config*=: Config to use during the preview
    -d, --debug: Print detailed debugging output during resource operations
    -m, --message=: Optional message to associate with the preview operation
    -p, --parallel=: Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded.
    -r, --refresh?: Refresh the state of the stack's resources before this update
    -s, --stack=: The name of the stack to operate on. Defaults to the current stack
    -t, --target*=: Specify a single resource URN to update. Other resources will not be updated. Multiple resources can be specified using --target urn1 --target urn2
documentation:
    command: '[AI] `pulumi preview` is a command provided by Pulumi, an infrastructure as code platform, used to check your proposed changes before applying them. It generates an executable plan that describes the intended state transformation and lets you review the impacts of the changes before deployment, including resource names, types, properties, and their desired values. This helps ensure that your intended changes align with what you want in your infrastructure.'
    flag:
        json: '[AI] `pulumi preview --json` is a command used in Pulumi, an infrastructure as code platform, to perform a dry run of your deployment. This means it simulates the changes that would be made if you were to actually deploy the current configuration. The `--json` flag specifically tells Pulumi to output the changes in JSON format, making it easier for automation and further processing. This can help you review proposed infrastructure modifications before applying them to your live environment.'
        show-secrets: '[AI] `pulumi preview --show-secsrets` is a command used in Pulumi, an infrastructure as code platform. It allows users to preview changes to their cloud infrastructure stack before deploying, with an additional feature of showing the values of the sensitive secrets that will be deployed or modified. This helps ensure that the correct values are being used and minimizes the risk of accidental exposure of sensitive information during deployment.'
