# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: Install the project dependencies
group: general
flags:
    --check-cache: Always refetch the packages and ensure that their checksums are consistent
    --immutable: Abort with an error exit code if the lockfile was to be modified
    --immutable-cache: Abort with an error exit code if the cache folder was to be modified
    --inline-builds: Verbosely print the output of the build steps of dependencies
    --json: Format the output as an NDJSON stream
    --mode=: Change what artifacts installs generate
documentation:
    command: '[AI] "yarn install" is a command used with Yarn, a popular JavaScript package manager. It downloads and installs all the required dependencies mentioned in the project''s yarn.lock or package.json file into the node_modules directory. This ensures that the project has access to the correct versions of its dependencies for consistent development environment.'
    flag:
        check-cache: '[AI] `yarn install --check-cache` is a command used in Yarn package manager for managing dependencies of a JavaScript project. This specific command checks if the current project has up-to-date cached packages before installing new ones. By doing so, it reduces download time and bandwidth usage as it leverages previously installed and cached packages. If all required packages are already present in the cache, Yarn will skip re-downloading them from the registry, thus improving the installation process efficiency.'
        immutable: '[AI] `yarn install --immutable` is a command used with Yarn, a popular JavaScript package manager. This command performs a deterministic installation of packages defined in a project''s `yarn.lock` file or `package-lock.json` (if using npm). The `--immutable` flag ensures that once the packages are installed with their specified versions, they cannot be updated or replaced by newer versions, even if there are updates available in the package registry. This is helpful for maintaining a consistent environment across different development environments and ensuring that the project runs reliably.'
        immutable-cache: '[AI] `yarn install --immutable-cache` is a command used with Yarn, a popular JavaScript package manager. This command performs a standard installation of project dependencies using Yarn, but with an added flag `--immutable-cache`. This flag ensures that once the dependencies are installed, their versions do not change unless explicitly specified in the `package.json` file or by manually running `yarn install` again. The immutable cache helps maintain a consistent environment for development and reduces the risk of unintended dependency version changes.'
        inline-builds: |-
            [AI] `yarn install --inline-builds` is a command used with Yarn, a popular package manager for JavaScript projects. This command does two things:

            1. Installs all the required dependencies listed in a project's `package.json` file.
            2. Enables inline builds which means that during the installation process, Yarn will also compile and bundle the source code of dependencies that have build scripts defined. These built files are then saved in `node_modules/.cache/yarn-builds`.

            This command can be useful when dealing with monorepos or projects where multiple packages depend on each other and need to be built together. It saves time by avoiding the need for multiple separate builds.
        json: '[AI] `yarn install --json` is a command used in Yarn package manager for installing and managing project dependencies. The `--json` flag generates a `yarn.lock` file in JSON format, providing more detailed information about the installed packages and their versions compared to the plain text format in the regular `yarn.lock` file. This option is useful for developers who need or prefer working with JSON data for versioning or other purposes.'
        mode: '[AI] `yarn install --mode` is a command used with Yarn, a popular package manager for JavaScript projects. This command is used to install all the project dependencies specified in the `package.json` file with a specific mode. The `--mode production` is the most commonly used mode. It instructs Yarn to install only the production dependencies and optimize the builds for better performance in a production environment. In contrast, the default mode is development, where all dependencies including development-only packages are installed.'
