# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: commits [<query>]
description: Search for commits
flags:
    --author-date=: Filter based on authored `date`
    --author-email=: Filter on author email
    --author-name=: Filter on author name
    --author=: Filter by author
    --committer-date=: Filter based on committed `date`
    --committer-email=: Filter on committer email
    --committer-name=: Filter on committer name
    --committer=: Filter by committer
    --hash=: Filter by commit hash
    --json*=: Output JSON with the specified `fields`
    --merge: Filter on merge commits
    --order=: 'Order of commits returned, ignored unless ''--sort'' flag is specified: {asc|desc}'
    --owner*=: Filter on repository owner
    --parent=: Filter by parent hash
    --sort=: 'Sort fetched commits: {author-date|committer-date}'
    --tree=: Filter by tree hash
    --visibility*=: 'Filter based on repository visibility: {public|private|internal}'
    -L, --limit=: Maximum number of commits to fetch
    -R, --repo*=: Filter on repository
    -q, --jq=: Filter JSON output using a jq `expression`
    -t, --template=: Format JSON output using a Go template; see "gh help formatting"
    -w, --web: Open the search query in the web browser
documentation:
    command: '[AI] The `gh search commits` command is a GitHub CLI (Command Line Interface) tool used to search for specific commit messages or commit authors across repositories you have access to in your GitHub account. Simply put, it helps you quickly find the commits that match your query without having to manually navigate through multiple repositories using keywords related to the commit message or author.'
    flag:
        author: '[AI] The `gh search commits` command is a GitHub CLI (Command Line Interface) tool used to search for commits on GitHub. The `--author` option filters the search results to only show commits made by a specific author. For example, `gh search commits --author="username"`, where "username" is the name or email address of the author, will return a list of commits made by that author.'
        author-date: '[AI] The `gh search commits` is a GitHub CLI command used to search for commits based on given filters. The `--author-date` option refines the search by looking for commits with specific author dates in the YYYY-MM-DD format. For instance, `gh search commits --author-date="2021-10-01"` will return a list of commits authored on October 1, 2021.'
        author-email: '[AI] The `gh search commits` command with the `--author-email` option is used in GitHub''s git-cli (Command Line Interface) tool, called `gh`, to search for GitHub commit records based on the specified author email address. This enables users to easily locate commits made by a specific contributor within a repository or across multiple repositories under their control.'
        author-name: '[AI] `gh search commits` is a GitHub CLI command used to query commit history with specific filters. The `--author-name` flag limits the search results to commits authored by a particular author name. For instance, `gh search commits --author-name="John Doe"` will return all commits made by "John Doe" in the user''s repositories or organizations.'
        committer: '[AI] The `gh search commits` command is a GitHub CLI (Command Line Interface) tool provided by GitHub to search for specific commits. The `--committer` flag is an option used with this command, which allows you to filter the search results based on the committers name or email address. This helps in finding all the commits made by a particular person within a repository, making it useful for various use cases such as code reviews, bug fixing, or understanding contribution history.'
        committer-date: '[AI] The `gh search commits` command with the `--committer-date` option is a GitHub CLI (Command Line Interface) query used to find Git commits based on their committer date. This command takes a date or date range as an argument and returns commits that match the specified criteria. For example, `gh search commits --committer-date "2021-03-01"` would return all commits that were committed on March 1, 2021. The results can be further filtered or manipulated using additional options and piping to other commands.'
        committer-email: '[AI] `gh search commits` is a GitHub command used to query commit messages or committers based on given criteria. The `--committer-email` option filters the results to only show commits with a specified email address as the committer. For instance, `gh search commits --committer-email=example@email.com` returns all commits made by an author with that email address.'
        committer-name: '[AI] The `gh search commits` command with the `--committer-name` option is a GitHub CLI (gh) tool used to search for Git commit records based on the specified committer name. This command allows users to quickly find commits made by a specific developer or author without needing to browse through repositories or use other search engines directly on GitHub.com. The result will include information such as the commit hash, message, date, and number of files changed in each commit.'
        hash: '[AI] `gh search commits` is a command from GitHub''s CLI tool (gh), used to search for commits in a repository. The `--hash` option specifies that you want the output to include the commit hashes, in addition to other standard information like author name, date, and message. So, running `gh search commits --hash <query>` will return a list of commits matching your query with their corresponding hashes included.'
        jq: |-
            [AI] `gh search commits` is a command from the GitHub CLI (gh) tool used to search for commits in a repository or across multiple repositories. The `--jq` option tells gh to pipe the search results to the `jq` query language processor for further processing and filtering of JSON data.

            Therefore, `gh search commits --jq` is used to perform a commit search with custom JSON-based output formatting or filtering based on specific commit message content, author, or other criteria. The exact usage depends on the specific `jq` query.
        json: '[AI] The command `gh search commits --json` is a GitHub CLI (Command Line Interface) command used to search for specific commit messages or other metadata across repositories. The `--json` option returns the search results in JSON format, making it easier to parse and process automatically using scripts or other tools. This command can help find commits based on various criteria such as author name, message content, timestamp, etc., enabling efficient batch processing of GitHub commit data.'
        limit: '[AI] `gh search commits` is a command used in GitHub''s git-cli (Command Line Interface) tool, gh, to search for commits based on given criteria. The `--limit` option sets the maximum number of results returned by the command. For instance, `gh search commits --author "John Doe" --limit 5` would display the most recent 5 commits made by "John Doe".'
        merge: '[AI] The `gh search commits --merge` command is a GitHub CLI (Command-Line Interface) command used to search for commits that have been merged into a specific branch or repository. The `--merge` flag filters the results to only show commits where the merge commit exists, indicating that the changes from another branch have been successfully incorporated into the target branch. This is useful when looking for commits representing completed work, as merged commits typically mark the end of a development cycle for a particular feature or bug fix.'
        order: |-
            [AI] The `gh search commits --order` command is a GitHub CLI (Command-Line Interface) command used to search for specific commits in a repository based on certain criteria, and it orders the results according to a specified parameter.

            Here's a breakdown of each part of the command:

            * `gh`: This refers to the GitHub CLI tool, which is used to interact with GitHub from the command line.
            * `search`: This is the subcommand used for searching GitHub repositories or specific projects.
            * `commits`: This specifies that you're looking for commits in a repository.
            * `--order`: This option is used to sort the search results by a specific criterion, such as date (`created`), author (`author`), or number of comments (`comments`). For example, if you use `--order=created`, it will display the commits in reverse chronological order (newest first).

            So, the complete command `gh search commits --order created` will look for commits and return them ordered by their creation date (newest first).
        owner: '[AI] The `gh search commits` command is a GitHub CLI (Command Line Interface) tool used to search for commits on GitHub. The `--owner` option specifies the GitHub username of the repository''s owner whose commits you want to search. So, `gh search commits --owner <username>` will return a list of commits made by that particular user.'
        parent: '[AI] The `gh search commits` command with the `--parent` option is used in GitHub''s git-cli (git-hub) tool to search for commits that share a particular parent commit hash. In other words, it helps find commits that are the children of a specific commit. This can be useful when trying to trace down the history of changes made to a project or identifying related commits. The output displays the commit message, author, and other relevant information for each matching commit.'
        repo: |-
            [AI] `gh search commits` is a command from GitHub's CLI (Command Line Interface) tool, called Git Hub for Desktop or gh, which allows users to perform various actions related to GitHub repositories and projects.

            The option `--repo <repository>` specifies the name of the repository to be searched. The entire command `gh search commits --repo <repository>` is used to find specific commits in a given repository. This command returns commit messages, authors, and other details related to each commit that matches the search query.
        sort: |-
            [AI] The `gh search commits --sort` command is a GitHub CLI (Command Line Interface) command used to search for commits in a specific repository on GitHub based on certain criteria, and sorts the results in ascending or descending order by default.

            The `search commits` part of the command indicates that we are searching for commits. The `--sort` flag specifies how to sort the search results. By default, it sorts the results by `recent`, which means the most recent commits will appear first in the list. However, you can also use other options such as `author-date`, `contributors`, or `relevance`.

            For example, if you want to search for commits made by a particular author and sort them by descending order of author date, you could use the following command:

            ```bash
            gh search commits author:username --sort author-date:desc
            ```

            This will return a list of commits authored by "username" sorted in reverse chronological order.
        template: |-
            [AI] `gh search commits` is a GitHub CLI command used to search for commits based on specific criteria. The `--template` option is used to customize the output format of the search results. With this option, you can define how the data should be displayed using Mustache templates. For example, you could request the author name, commit message, and sha in the output using a template like:

            ```bash
            gh search commits --template '{{range .Items}}{{.Author.Name}}: {{.Message}|trunc 40}{\n}{{end}}'
            ```

            This command would display the author name followed by their commit message, truncated to 40 characters, for each search result.
        tree: '[AI] `gh search commits --tree` is a GitHub command used to search for commits in a repository based on specific criteria, and then displays the commit tree or hierarchy for the selected commit. The `--tree` option requests the output in tree format that shows the parent-child relationships between commits, representing the commit history as a directed acyclic graph (DAG). This command is helpful when analyzing the relationship between commits, identifying the evolution of the codebase, or understanding the development process for a particular feature.'
        visibility: '[AI] The `gh search commits` command is a GitHub CLI (Command Line Interface) tool used to query GitHub for specific commit data based on given parameters. The `--visibility` option filters the search results to show only publicly visible commits, meaning commits that are part of public repositories and can be accessed by anyone. This is useful when you want to search for commits in public repositories without having to authenticate or access private repositories.'
        web: '[AI] `gh search commits --web` is a GitHub command used to search for specific commit messages or authors across multiple repositories in the GitHub platform. The `--web` flag opens the search results directly in your web browser instead of outputting them to the terminal. The `search commits` sub-command looks for commits that match the given query, which can include keywords from commit messages, author names, or other relevant information.'
