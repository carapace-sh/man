# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: test
aliases:
    - t
description: Execute all unit and integration tests and build examples of a local package
group: build
flags:
    --all: Alias for --workspace (deprecated)
    --all-features: Activate all available features
    --all-targets: Test all targets
    --bench*=: Test only the specified bench target
    --benches: Test all benches
    --bin*=: Test only the specified binary
    --bins: Test all binaries
    --doc: Test only this library's documentation
    --example*=: Test only the specified example
    --examples: Test all examples
    --exclude*=: Exclude packages from the test
    --future-incompat-report: Outputs a future incompatibility report at the end of the build
    --ignore-rust-version: Ignore `rust-version` specification in packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --lib: Test only this package's library unit tests
    --manifest-path=: Path to Cargo.toml
    --message-format*=: Error format
    --no-default-features: Do not activate the `default` feature
    --no-fail-fast: Run all tests regardless of failure
    --no-run: Compile, but don't run tests
    --profile=: Build artifacts with the specified profile
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --test*=: Test only the specified test target
    --tests: Test all tests
    --timings?: 'Timing output formats (unstable) (comma separated): html, json'
    --unit-graph: Output build graph in JSON (unstable)
    --workspace: Test all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -p, --package*=: Package to run tests for
    -q, --quiet: Display one character per test instead of one line
    -r, --release: Build artifacts in release mode, with optimizations
documentation:
    command: '[AI] `cargo test` is a command used in Rust programming language''s build system, Cargo. It runs all tests defined in the project''s `Cargo.toml` file using Rust''s testing framework. The output provides details about each test case, including whether it passed or failed along with any relevant error messages. It automatically discovers tests based on filenames and annotations in Rust source files within the project directory.'
    flag:
        all: '[AI] `cargo test --all` is a command used in Rust programming language''s build system, Cargo. It runs all tests present in the current project or sub-projects recursively. The `--all` flag ensures that tests from every module and sub-module are executed, providing comprehensive coverage for the codebase.'
        all-features: '[AI] `cargo test --all-features` is a command used in Rust programming language''s build system, Cargo. It runs all tests for all features of a project. Each feature is a separate component that may have its own tests. The `--all-features` flag ensures every test suite within the project is executed.'
        all-targets: '[AI] `cargo test --all-targets` is a command used in Rust programming language''s Cargo build tool. It runs all tests for every target in the project. A target represents a crate (library or executable) within the Cargo project. The `--all-targets` flag ensures that tests for each target are executed, providing comprehensive test coverage for the entire project.'
        bench: '[AI] `cargo test --bench` is a command used in Rust programming language for running benchmarks defined within a project using Cargo, its build tool. The `--bench` flag tells Cargo to run only the benchmarks, while `test` is the default command that runs tests and benches if both exist. These benchmarks can help measure and optimize the performance of Rust code.'
        benches: '[AI] `cargo test --benches` is a command used in Rust programming language''s Cargo build system to run tests with focus on benchmarks. Benchmarks are code snippets designed to measure the performance of specific parts of your code. With this command, only the benchmark tests within your project''s `tests` directory are executed. The output includes details about the number of iterations, minimum, maximum, and average durations for each test case.'
        bin: '[AI] `cargo test --bin` is a command used in Rust programming language''s build system, Cargo. This command runs unit tests and benchmarks specified in the current directory or project, but specifically for the binary target identified by the `--bin` flag. It executes the tests under the hood with a test runner, producing results for each test case. The goal is to ensure code correctness and functionality of the binary before deployment or further development.'
        bins: '[AI] `cargo test --bins` is a command used in Rust programming language''s build system, Cargo. It runs unit tests (`cargo test`) for all binaries (executable programs) defined in the current project using multiple threads for parallel execution. The `--bins` flag ensures that only the tests for the binaries are run, and not tests for libraries.'
        doc: '[AI] `cargo test --doc` is a command used in Rust programming language''s Cargo build tool. This command runs unit tests (`cargo test`) and generates or updates the documentation for those tests (`--doc`). The generated documentation is typically written in HTML format and can be found in the `target/docs` directory after a successful run.'
        example: '[AI] `cargo test --example` is a command used in Rust programming language''s build system, Cargo. This command runs tests for a specific example within a crate (Rust project). An example is a small, self-contained Rust program that demonstrates some functionality of the crate. The `--example` flag specifies which example to run tests for. Cargo will compile and run only the specified example''s tests.'
        examples: '[AI] `cargo test --examples` is a command used in Rust programming language''s Cargo build tool. It runs tests for only the examples present in a Rust project. Examples are typically small, self-contained units of code that demonstrate specific features or use cases of a library. By running `--examples` with `cargo test`, you are instructing Cargo to execute the tests for these demonstrative snippets, providing a quick way to verify their functionality.'
        exclude: '[AI] `--exclude` is a flag used with Cargo, Rust''s package manager. It is used to exclude certain directories or files from being tested during the `cargo test` command. For example, if you have a directory named `tests_ignored` that you don''t want to include in your tests, you can use `--exclude tests_ignored` when running `cargo test`. This flag helps in running tests only on specific parts of the codebase while ignoring others.'
        features: '[AI] `cargo test --features` is a command used in Rust programming language''s build system, Cargo. This command runs unit tests (`test`) for the current project using all the specified features (`--features`). Features are optional components of a Rust library or executable that can be enabled or disabled during compilation by passing them as arguments to `cargo build` or `cargo test`. Enabling a feature may activate additional code, dependencies, and tests related to that feature.'
        future-incompat-report: '[AI] `cargo test --flag future-incompat-report` is a command used in Rust programming language''s Cargo build tool. This flag is used to run tests with minimal compatibility, meaning it allows the use of new language features that are not yet stable and may break existing code. The `--future-incompat-report` option specifically generates a report of any potential future incompatibilities encountered during the test run. It helps developers keep track of code that needs adjustments as they adopt new Rust language features, ensuring a smoother transition towards using them in their projects.'
        help: '[AI] `cargo test --help` is a command used in Rust programming language''s Cargo build tool. It displays detailed help information about the `test` sub-command. This command runs and reports on unit tests for your project. When you use `--help`, Cargo provides a clear explanation of the various options that can be passed to the `test` command, including specifying test filters or running tests in parallel.'
        ignore-rust-version: '[AI] `cargo test --ignore-rust-version` is a command used in Rust programming language to run unit tests defined in a Cargo project, bypassing any version checks for Rust and its dependencies. This command is useful when testing an older project or when encountering issues with newer Rust or dependency versions. By adding `--ignore-rust-version` flag, Cargo will not check for updates before running the tests, ensuring a consistent testing environment with previously used Rust and dependency versions.'
        jobs: '[AI] `cargo test --jobs` is a command used in Rust programming language''s Cargo build tool. The `test` subcommand runs tests for the current project, while the `--jobs` flag enables running multiple tests concurrently using the specified number of jobs. By default, it uses the number of CPUs available on the system to determine the number of jobs. This command can help reduce total test execution time.'
        keep-going: '[AI] `cargo test --keep-going` is a command used in Rust programming language''s Cargo build tool. It runs tests in the project, but unlike regular testing, it does not stop at the first failure. Instead, it continues running all remaining tests, providing a comprehensive report on their outcomes even if some of them fail. This can be useful for identifying test cases that interfere with each other or finding edge cases in complex testing scenarios.'
        lib: '[AI] `cargo test --lib` is a command used in Rust programming language''s Cargo build system. It instructs Cargo to run unit tests defined in a library project, rather than testing the binary target. This command is useful when you want to test specific functionality within your library without building and running the associated binary.'
        manifest-path: '[AI] `cargo test --manifest-path` is a command used in Rust programming language''s Cargo build system. It runs tests defined in the given manifest file path instead of the current one. This can be useful when working with multiple projects or when testing a library outside its main project. The `--manifest-path` flag specifies the absolute or relative path to the test''s associated Cargo.toml file.'
        message-format: '[AI] `cargo test --message-format` is a command used in Rust programming language''s Cargo build tool. It runs tests defined in the project and specifies the format of test output messages. By default, Cargo displays test results in a verbose format, but using `--message-format` allows specifying alternative formats such as "short", "json" or "human-friendly" for more customized display.'
        no-default-features: |-
            [AI] `cargo test --no-default-features` is a command used in Rust programming language's Cargo build tool. This command runs unit tests (`test`) for a Rust project, but with the `--no-default-features` flag, it disables the use of default features when building and testing the project.

            Default features are optional dependencies that come enabled by default when creating a new Rust project using Cargo. With `--no-default-features`, these dependencies will not be included in the test build, allowing for more fine-grained control over the testing environment and potential performance improvements during the test run.
        no-fail-fast: '[AI] `cargo test --no-fail-fast` is a command used in Rust programming language for running tests with modified test behavior. The `--no-fail-fast` flag disables the default fail-fast mode, which halts the test run as soon as the first test fails. With this flag, all tests continue to run even if some tests have already failed, allowing users to inspect the results of all tests for potential correlations or deeper issues in their codebase.'
        no-run: |-
            [AI] The `cargo test --no-run` command is used in Rust programming language to execute unit tests defined in a project without actually running the tests. Instead, it only checks if the test code compiles and reports any build errors or issues related to dependencies.

            When you run `cargo test`, by default it runs all the tests in your project. But with `--no-run` flag, Cargo skips the execution of the tests and focuses solely on the compilation phase. This can be useful when you want to quickly check if any changes in your codebase have affected the test setup or dependencies without having to wait for the tests to run.

            Keep in mind that even though the tests are not executed, the report generated will still show information about the tests including their names and whether they passed or failed during the last execution (if applicable).
        package: '[AI] The `cargo test --package` command is used in Rust programming language''s build system, Cargo. It runs tests for a specific package listed in the project''s `Cargo.toml` file. The `--package` flag specifies which package to test. When executed, it compiles the code, sets up the test environment, and runs all tests defined in that package''s `tests` directory or other test sources (like integrated tests) defined in its `Cargo.toml`. The output will report the success or failure of each test along with any error messages.'
        profile: '[AI] `cargo test --profile` is a command used in Rust programming language''s build system, Cargo. This command runs unit tests defined in the source code using the specified profile. Profiles are configurations that allow customizing the compilation process, such as enabling or disabling features, optimizing for different targets, or setting environment variables. By running `cargo test` with a specific profile, you''re instructing Cargo to execute the tests with the settings defined in that profile.'
        quiet: '[AI] `cargo test --quiet` is a command used in Rust programming language''s Cargo build tool to run unit tests with minimum output. The `--quiet` flag suppresses all output except for test names and their outcomes (passed or failed). This can be useful when running tests automatically or in the background where detailed output is not desired.'
        release: '[AI] `cargo test --release` is a command used in Rust programming language''s build system, Cargo. It runs tests defined in the `[tests]` section of a project''s `Cargo.toml` file with the release configuration. The release configuration optimizes the code for size and speed without debugging information. This results in faster test execution and smaller binary files, making it suitable for continuous integration environments or production testing.'
        target: '[AI] `cargo test --target` is a command used in Rust programming language''s build system, Cargo. This command executes unit tests for a specific target within a project. The `--target` option specifies the name of the target to test. A target can be a binary or a library, and testing it ensures its correctness by running its tests.'
        target-dir: '[AI] `cargo test --target-dir` is a command used in Rust programming language''s build system, Cargo. It runs unit tests and integrates tests for all target configurations within the specified directory (--target-dir). The tests are executed in isolation, meaning that no inter-test interaction occurs. The results include test summary reports and exit status indicating success or failure.'
        test: '[AI] `cargo test --test` is a command used in Rust programming language''s build system, Cargo. It runs unit tests defined in the source code using the given test file or directory (implicitly `--test` flag specifies a test target). The `--test` option can be followed by a test name or path to run only that specific test. If no test is specified, all tests under the current target will be executed.'
        tests: '[AI] `cargo test --tests` is a command used in Rust programming language''s build system, Cargo. It runs the unit tests specified in the Rust source code files under the `tests` directory or the `[tests]` section of the `Cargo.toml` file. The `--tests` flag instructs Cargo to only run these tests and report their results separately from the integration tests and doc tests.'
        timings: '[AI] `cargo test --timings` is a command used in Rust programming language''s Cargo build tool to execute tests with timing information. The `--timings` flag instructs Cargo to output detailed test run statistics, including the time taken for each test case to run and any test harness setup or teardown actions. This data can be useful for performance analysis and identifying bottlenecks in your testing process.'
        unit-graph: '[AI] `cargo test --unit-graph` is a command used in Rust programming language''s Cargo build tool to run tests and generate a graph showing the inter-dependencies between individual test units during test execution. This can help identify which tests depend on others, and how changes in one test might impact other tests. It provides visualization of testing structure and can aid in understanding and improving test reliability.'
        workspace: '[AI] `cargo test --workspace` is a command used in Rust programming language''s build system, Cargo. This command runs tests for all projects defined in the current workspace specified by the `Cargo.toml` file using the `--workspace` flag. It searches for tests defined under the `[test]` section in each project''s `Cargo.toml`, and executes them in order. This command can save time when working on multiple projects within a workspace as it automates running tests across all of them.'
