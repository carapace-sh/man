# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: fetch
group: build
flags:
    --manifest-path=: Path to Cargo.toml
    --target*=: Fetch dependencies for the target triple
    -h, --help: Print help
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo fetch` is a Cargo subcommand used to download and update dependencies listed in a Rust project''s `Cargo.toml` file. It does not modify the source code or build artifacts, only downloads and saves the latest versions of the required crates. This command can be useful when working on a new machine, syncing projects with multiple developers, or ensuring that dependencies are up-to-date before building an application.'
    flag:
        help: '[AI] `cargo fetch --help` is a command used with Cargo, Rust''s package manager. This specific command is for downloading or updating dependencies specified in a Cargo project''s `Cargo.toml` file. The `--help` flag is used to display detailed information about how to use this command effectively. It provides usage instructions, flags description, and examples.'
        manifest-path: '[AI] `cargo fetch` is a command-line tool for Cargo, Rust''s package manager. The `--manifest-path` option specifies the path to the `Cargo.toml` manifest file in your project, which contains metadata about the project and its dependencies. By providing this option, `cargo fetch` will download and install only the specified project''s dependencies.'
        quiet: '[AI] `cargo fetch --quiet` is a command used in Rust programming language''s build system, Cargo. This command fetches and downloads any missing dependencies listed in the project''s `Cargo.toml` file without displaying progress messages or other output, making it quiet or silent. This can be useful when running automated tests or continuous integration workflows where excessive output may not be desired.'
        target: '[AI] `cargo fetch --target` is a command used in Rust programming language''s build system, Cargo. This command initiates a dependency update and download of the source code for the specified target(s). The `--target` option allows specifying one or more target triplets to limit the dependencies fetched to those required by the mentioned targets only. This can be useful when working on multiple projects with different dependencies, to avoid unnecessary downloads and keep the project''s dependencies up-to-date.'
