# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: refresh
description: Refresh stored authentication credentials
flags:
    --insecure-storage: Save authentication credentials in plain text instead of credential store
    --reset-scopes: Reset authentication scopes to the default minimum set of scopes
    --secure-storage&: Save authentication credentials in secure credential store
    -h, --hostname=: The GitHub host to use for authentication
    -r, --remove-scopes*=: Authentication scopes to remove from gh
    -s, --scopes*=: Additional authentication scopes for gh to have
documentation:
    command: '[AI] `gh auth refresh` is a GitHub CLI (Command Line Interface) command used to authenticate and update your local machine''s GitHub access token. This command interacts with your default browser to authorize the request, then saves the new token in your GitHub configuration file. It helps maintain secure and updated access for your GitHub operations.'
    flag:
        hostname: '[AI] The command `gh auth refresh --hostname` is used in GitHub for Desktop or Command Line interface (CLI) to authenticate and update the SSH keys stored in your GitHub account with the current machine''s hostname. This ensures that any new or updated SSH keys are associated with the correct hostname for proper identification during Git operations, improving security and reducing potential authentication issues.'
        insecure-storage: |-
            [AI] `gh auth refresh --insecure-statement` is a GitHub CLI (Command Line Interface) command used to refresh an existing GitHub authentication token, specifically using an insecure storage method for storing the authentication data.

            The `--insecure-storage` option tells GitHub CLI that it's okay to store the authentication data in a location that is less secure than the recommended ways (like environment variables or GitHub's own secure tokens). This could include saving the information in plain text files, or other similarly unsecured locations.

            This command refreshes an existing token, meaning it updates the current token with a new one, which can be useful when an existing token is about to expire, or if you suspect that it has been compromised. The command typically requires no additional user interaction beyond providing your GitHub username and password, or using a previously generated personal access token, when prompted.
        remove-scopes: '[AI] `gh auth refresh --remove-scopes` is a GitHub CLI (Command Line Interface) command used to authenticate and manage your GitHub access tokens. Specifically, this command removes previously granted scopes from the current access token without requiring you to create a new one. By doing so, it limits the permissions associated with the token, enhancing security by reducing the potential attack surface.'
        reset-scopes: '[AI] `gh auth refresh --reset-scopes` is a command used with GitHub''s gh (git-hub) CLI tool for managing authentication and authorization. This command forces a new OAuth token refresh, resetting the scopes in the process. It''s particularly useful when you suspect your token has been compromised or when the access scopes need to be changed. After executing this command, you will be prompted to authenticate with GitHub and grant the necessary permissions based on the new defined scopes.'
        scopes: '[AI] The `gh auth refresh --scopes` command is used in GitHub''s Git Command Line Tool (git-hub) to authorize and update an existing OAuth token. The `--scopes` option allows you to specify the access scopes for the new token, such as `repo`, `user:read`, or `admin:org_hook`. This command refreshes your current authentication session and gets a new token with the given scopes, enhancing the access permissions of your GitHub actions or applications.'
        secure-storage: '[AI] The `gh auth refresh --secure-storage` command is used in GitHub''s `git-hub` client to authenticate and refresh an existing authentication token stored securely in the system keyring or cache. This command allows users to continue using GitHub services without having to enter their username and password each time they use the GitHub CLI. It also ensures that sensitive data is not exposed by storing the token as plain text in config files or environment variables. The `--secure-storage` option specifies that the authentication token should be stored using the operating system''s native keyring or cache mechanism for added security.'
