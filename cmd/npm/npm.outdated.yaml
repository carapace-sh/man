# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: outdated
description: Check for outdated packages
flags:
    --json: output as json
    --workspaces: Enable running a command in the context fo all workspaces
    -a, --all: show all
    -g, --global: operate globally
    -l, --long: show extended information
    -p, --parseable: output parseable results
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] The `npm outdated` command is used to check for available updates for installed packages in a Node.js project managed with npm (Node Package Manager). It displays a list of packages with new versions, and the user can choose to update them using other npm commands like `npm install` or `npm update`. This helps keep dependencies up-to-date and maintain a healthy project environment.'
    flag:
        all: |-
            [AI] The `npm outdated --all` command is a popular operation in Node.js package management using npm (Node Package Manager). This command scans the current project's `package.json` file and lists all packages with updated versions available in the npm registry that have higher semver (versioning) numbers than those currently installed.

            The output includes the name of each outdated package, the current version, and the latest available version. It does not automatically install or update the packages but provides you with the necessary information to make informed decisions about updating your project's dependencies.
        global: '[AI] `npm outdated --global` is a command used in Node.js package management with npm (Node Package Manager). This command checks for updates to the globally installed packages in your system. The `--global` flag specifies that you want to check updates for packages installed for global use, such as those used to manage and develop Node.js projects. By running this command in your terminal or command prompt, you can identify which packages have newer versions available and update them accordingly using the `npm install --save-g <package>` command with the desired package name and version number. This helps ensure that you have the latest features and security updates for your Node.js projects.'
        json: '[AI] `npm outdated --json` is a command used in Node.js package management with npm (Node Package Manager). This command generates a JSON output showing a list of packages and their current version, as well as the latest available version and the difference between the two. This information can be useful for identifying and managing outdated packages in your project''s dependencies, helping to keep your Node.js environment up-to-date and secure.'
        long: '[AI] `npm outdated --long` is a command used in Node.js package management with npm (Node Package Manager). This command displays an extensive list of packages and their current version, as well as the latest available version and the difference between them. The `--long` option provides more detailed output that includes the name, version, and status (such as outdated or not) for each package in a project''s `package.json` file. This information can help users identify packages that need updating to keep their projects current with the latest dependencies.'
        parseable: '[AI] The `npm outdated --parseable` command is a feature in Node Package Manager (npm) that generates output in a machine-parsable format when checking for package updates. It scans your current project''s package.json file and lists the packages with available updates, their current versions, and the latest version numbers along with their corresponding Git URLs or registry links. This output can be easily parsed by scripts or other tools to automate updating processes, making it an essential tool for managing dependencies in Node.js projects.'
        workspace: '[AI] `npm outdated --workspace` is a command used in Node.js projects managed with npm (Node Package Manager). This command checks for updated versions of packages listed in the `package-lock.json` or `package.json` files within the current workspace (multi-packaged projects), and outputs information about any available package updates, including the new version number and the name of the package to be updated. It''s often used to keep the project dependencies up-to-date.'
        workspaces: '[AI] `npm outdated --workspaces` is a command used in Node.js projects with multiple packages managed under one root directory using npm workspaces feature. This command checks for updated versions of all the dependencies across all the packages in the monorepo and displays a list of outdated packages along with their newer available versions. It helps developers keep their projects up-to-date with the latest package versions while managing multiple packages within one project structure.'
