# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: package
description: Assemble the local package into a distributable tarball
flags:
    --all-features: Activate all available features
    --allow-dirty: Allow dirty working directories to be packaged
    --exclude*=: Don't assemble specified packages
    --keep-going: Do not abort the build as soon as there is an error (unstable)
    --manifest-path=: Path to Cargo.toml
    --no-default-features: Do not activate the `default` feature
    --no-metadata: Ignore warnings about a lack of human-usable metadata
    --no-verify: Don't verify the contents by building them
    --target*=: Build for the target triple
    --target-dir=: Directory for all generated artifacts
    --workspace: Assemble all packages in the workspace
    -F, --features*=: Space or comma separated list of features to activate
    -h, --help: Print help
    -j, --jobs=: 'Number of parallel jobs, defaults to # of CPUs'
    -l, --list: Print files included in a package without making one
    -p, --package*=: Package(s) to assemble
    -q, --quiet: Do not print cargo log messages
documentation:
    command: '[AI] `cargo package` is a Rust programming language command used to create and publish new crates (Rust libraries or binaries) on the Crate Registry, which is the default registry for Rust packages. The command builds the crate and generates metadata, then publishes it using your Rust user account or an access token for an organization. The `cargo package` command takes various options, such as specifying a new name, version number, and Git repository URL to create a new crate based on existing source code.'
    flag:
        all-features: '[AI] `cargo` is a package manager for the Rust programming language. The `--all-features` argument is used with the `cargo build` or `cargo install` commands to include all available features of a Rust project in the build process or package installation, respectively. In other words, it enables and compiles all optional features defined in the project''s `Cargo.toml` file, ensuring that the built artifact includes all desired functionality.'
        allow-dirty: |-
            [AI] `cargo` is a build tool for the Rust programming language. The `--allow-dirty` flag is used with the `cargo package` subcommand, which is used to publish a new version of a Rust crate (a reusable library or component) to the crates.io registry.

            When you run `cargo package`, it performs several checks to ensure that the source code, documentation, and other metadata meet certain standards before publishing. The `--allow-dirty` flag disables these checks, allowing you to publish a new version even if it has unresolved issues or inconsistencies. This is generally not recommended, as it may lead to problems for other users who depend on your crate. However, it can be useful in certain situations where quick publication is necessary, such as during development or when fixing an urgent bug.
        exclude: '[AI] The `--exclude` option in Cargo, Rust''s package manager, is used to exclude specific directories or crates (Rust libraries) from being included in a package''s dependency tree during build. It helps control the dependencies that are brought into your project and can help manage the size and complexity of your project by excluding unnecessary or redundant dependencies. The syntax is `--exclude <path>` for directories or `--exclude <package>=<version>` for specific crates with version number.'
        features: |-
            [AI] `cargo feature` is a command used in Rust programming language's build system, Cargo. It is used to manage optional compiler features and dependencies called "features" for a crate (Rust library or executable).

            When defining a new crate, you can specify features as part of the `[lib]`, `[package]`, or `[dependencies]` sections in the `Cargo.toml` manifest file. These features are enabled or disabled when building the crate with the `--features` flag followed by a list of feature names:

            ```sh
            $ cargo build --features my_feature
            ```

            This command will enable the 'my_feature' during the build process. When a feature is enabled, it may activate additional dependencies or compiler flags that are not required for the basic functionality of the crate. This allows customization and fine-grained control over the built artifacts.
        help: '[AI] `cargo package --help` is a command used in Rust programming language''s Cargo build tool. It displays help information about the `cargo package` subcommand. This command is used for creating and managing Rust packages, including publishing them to crates.io registry. With this command, you can see available options and their descriptions for creating a new package, building package artifacts, or interacting with existing ones.'
        jobs: '[AI] `cargo` is a build tool for the Rust programming language. The command `cargo jobs` lists all current and past background jobs created by `cargo`. The `--flag` option is used to pass flags to `cargo`. So, the command `cargo package --jobs` would list the jobs related to packing a Rust project using Cargo. It does not actually run the packing process but only shows the available jobs.'
        keep-going: '[AI] The `--keep-going` flag in Cargo, Rust''s package manager, is used to instruct it to continue building and testing a project even if an error occurs during the process. Instead of halting the entire build after encountering the first failure, Cargo will move on to the next target and attempt to build and test it. This can be useful for projects with multiple components or dependencies where one error doesn''t necessarily mean that the entire project is broken. However, keep in mind that this flag may hide important issues if a critical part of your codebase fails to build or test.'
        list: '[AI] `cargo list` is a command in Rust''s Cargo build tool used to display information about the packages (crates) and their dependencies specified in the project''s `Cargo.toml` file. The output includes the name, version, and git URL or registry location of each crate, as well as the target triple for cross-compilation. It provides an overview of the project''s external dependencies.'
        manifest-path: '[AI] The `cargo` command with the subcommand `package` and the option `--manifest-path` is used in Rust programming language to specify the path to the `Cargo.toml` file, which is the configuration manifest for a Rust project. This command is typically invoked to build, test, or publish the project. For example, `cargo package --manifest-path=/path/to/project/Cargo.toml`.'
        no-default-features: '[AI] The `--no-default-features` flag in Rust''s Cargo build tool is used to prevent the inclusion of default features when building a package. When a dependency is added to a Cargo project, it may come with some default features that are not needed for your specific use case. By using `--no-default-features`, you explicitly opt out of these unwanted features, which can help reduce the size and complexity of your final binary or library. This can lead to improved build times, reduced memory usage during compilation, and a more streamlined project setup.'
        no-metadata: '[AI] `cargo` is a popular build tool for Rust programming language projects. The command `cargo package --no-metadata` is used to create or publish a new Rust package to the crates.io registry without including any metadata files in the package archive. These metadata files, such as `CARGAD.toml` or `README.md`, are optional and can be generated separately. This command only creates the source code archive for the package.'
        no-verify: '[AI] `cargo` is a popular build tool used in Rust programming language projects. The command `cargo package --no-verify` is used to create a source distribution (SRC) package of a Rust project without running any checks or verifications on the code, including typechecking and format checking. This flag is useful when creating packages for local use or for manually building and distributing packages outside the Rust package registry. However, using this command may result in distributing potentially invalid or non-compliant code, so it should be used with caution.'
        package: '[AI] The `cargo` command with the `package` subcommand is a popular tool used in Rust programming for managing and building projects. Specifically, the `--package` option is used to specify the name of the Rust package to be built or managed. It takes a string argument that corresponds to the package''s name as defined in its `Cargo.toml` file. This allows you to work with multiple projects within the same directory or build-specific packages for different targets.'
        quiet: '[AI] The `cargo` command with the `package` subcommand and the `--quiet` flag is used for building Rust projects while suppressing most of the output. This means that only essential information, such as errors or warnings, will be displayed during the build process. It''s often employed when running automated builds or continuous integration systems where a clutter-free output is desired.'
        target: '[AI] The `--target` option in the Rust programming language''s `cargo` command specifies which target triple to build for when running `cargo build` or `cargo run`. A target triple consists of the host operating system, the host architecture, and the target architecture or OS. For example, `x86_64-pc-windows-msvc` is a valid target triple for building Rust projects on a 64-bit Windows machine using Microsoft Visual Studio as the compiler. The default target triple depends on your system configuration. Using `--target` allows you to build for other targets, such as running tests on a different platform or creating cross-compiled binaries.'
        target-dir: |-
            [AI] `cargo` is a build tool for the Rust programming language. The `--target-dir` flag is used with the `cargo build` or `cargo run` commands to specify the directory where the output artifacts of the build process should be placed, rather than having them automatically written to the current directory or the default `target` directory.

            For example:
            ```bash
            $ cargo build --release --target-dir my_custom_directory
            ```
            This command will build the Rust project in release mode and put the resulting binary and other artifacts in the `my_custom_directory` instead of the default `target/release`. This can be useful for deploying or sharing the compiled artifacts with others, as you can easily control which files are included and where they are placed.
        workspace: '[AI] The `cargo workspace` command is a feature in Rust''s Cargo build system used to manage multiple crates (libraries or executables) that share common dependencies and code. When you run `cargo workspace`, it activates the workspace mode, allowing you to navigate between the different member crates of your workspace using relative paths from the current crate''s directory. This command does not build anything by itself but sets up the environment for building, testing, or checking dependencies across all crates in the workspace.'
