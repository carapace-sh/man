# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: pr
description: convert text files for printing
flags:
    --columns=: output COLUMN columns and print columns down
    --help: display this help and exit
    --pages=: begin [stop] printing with page
    --version: output version information and exit
    -D, --date-format=: use FORMAT for the header date
    -F=: use form feeds instead of newlines to separate pages
    -J, --join-lines: merge full lines, turns off -W line truncation, no column
    -N=: start counting with NUMBER at 1st line of first page printed
    -S, --sep-string=: separate columns by STRING
    -T, --omit-pagination: omit page headers and trailers, eliminate any pagination
    -W, --page-width=: set page width to PAGE_WIDTH (72) characters alway
    -a, --across: print columns across rather than down, used together
    -c, --show-control-chars: use hat notation (^G) and octal backslash notation
    -d, --double-space: double space the output
    -e, --expand=: expand input CHARs (TABs) to tab WIDTH (8)
    -f, --form-feed=: use form feeds instead of newlines to separate pages
    -h, --header=: use a centered HEADER instead of filename in page header
    -i, --output-tabs=: replace spaces with CHARs (TABs) to tab WIDTH (8)
    -l, --length=: set the page length to PAGE_LENGTH (66) lines
    -m, --merge: print all files in parallel, one in each column,
    -n, --number-lines=: number lines, use DIGITS (5) digits
    -o, --indent=: offset each line with MARGIN (zero) spaces,
    -r, --no-file-warnings: omit warning when a file cannot be opened
    -s, --separator=: separate columns by a single character
    -t, --omit-header: omit page headers and trailers;
    -v, --show-nonprinting: use octal backslash notation
    -w, --width=: set page width to PAGE_WIDTH (72) characters
documentation:
    command: '[AI] The `pr` command is a text formatting and filtering utility in Unix-like operating systems. It reads input files, one page at a time, and applies various actions such as numbering pages, side-by-side comparison, merging differences, or printing specified ranges of pages. It''s often used for comparing and reviewing files with differences (e.g., after using `diff`), creating listings with page numbers, or combining multiple files into one output.'
    flag:
        F: '[AI] The `pr` command with the option `-F` is used to format and merge input files into a single output stream in a customizable way, following a given template or format file (specified with the `-f` option). This flag enables users to define their own format instructions to control the layout of data in the output. It provides advanced formatting capabilities beyond simple text merging, such as conditional inclusion and suppression of lines based on regular expressions.'
        "N": '[AI] The `pr` command with the option `-N` in Unix-based systems is used to paginate and format text input for printing or viewing on the terminal or other output devices. The `-N` option specifies the number of lines per page, allowing users to control how much data is displayed on each page. For example, using `pr -N 20 file.txt` would display 20 lines at a time from the given file (`file.txt`) in the output.'
        across: '[AI] The `--across` option in the `par` function of R statistical software is used to specify the number of threads or cores to use for parallel processing of tasks. When set, the tasks will be distributed across the specified number of threads or cores to improve computation speed. For example, `par(mfrow = c(2, 3), core = LOGICAL(1)("TRUE"))` sets the number of cores to use for parallel processing to all available cores (TRUE for all). `par(mfrow = c(2, 3), cores = 4)` sets the number of cores to use to 4.'
        columns: |-
            [AI] The `pr --columns` option is used with the Progit (git-pw) merge tool in Git for reviewing and applying differences between branches or commits. It specifies the number and order of columns to be displayed when viewing the hunks (differences).

            For example, `pr --columns=30` will display each hunk with a maximum context line length of 30 characters. The default value is usually `80`, but you can customize it according to your preferences or terminal width.
        date-format: '[AI] The `pr` command in Git is used to submit and manage changes to a repository as pull requests. The `--date-format` option modifies the output format of the date displayed with each commit message in the diff output. For example, `--date-format="%Y-%m-%d %H:%M"` would display dates as "YYYY-MM-DD HH:MM". This can be helpful for understanding when changes were made and in what order they occurred during a review.'
        double-space: '[AI] The `--double-space` flag is a option used with the `git diff` and `git format-patch` commands in Git version control system. It instructs Git to display or generate patch files with two blank lines between each hunk, making them more visually distinct when applied to a project. This can be helpful for understanding the changes made across multiple files or large code blocks.'
        expand: '[AI] The `pr` command with the `--expand` flag is used in version control systems like Git to apply a patch file and expand it into multiple commits. Each commit represents an individual hunk or change from the patch, making it easier to review and understand the changes. This can be particularly useful when dealing with large or complex patches.'
        form-feed: |-
            [AI] The `pr --form-feed` option is used in Git, specifically with the `git pr` command for Pull Request handling, such as with GitHub or GitLab. This option is set to control how newlines are handled in text files that are committed during a pull request.

            Setting `--form-feed` to `\r\n` (CRLF) will make Git commit the text file using CRLF line endings, whereas setting it to LF (Unix-style line endings) will make Git use LF for line endings when committing. This option helps ensure consistency in line endings across different operating systems and text editors when working on a project collaboratively via pull requests.
        header: '[AI] The `pr --header` flag is used with the Git tool `git pull request`, specifically when creating or editing a pull request. It sets custom headers in the commit message of the new branch being created from the pull request. These headers provide context and summary information about the changes in the pull request, making it easier for reviewers to understand the proposed modifications. The flag follows the format `--header="<custom-header-text>"` and can include multiple headers separated by a newline character (`\n`).'
        help: '[AI] The `--help` option, when used with the `git pr` command, displays detailed help information about git-pull-request (git-pr), a Git extension for creating and managing pull requests in a Git repository. It explains how to use git-pr to create, view, update, and merge pull requests. The output includes options for configuring git-pr with various Git hosts and authentication methods.'
        indent: '[AI] The `pr --indent` command in Unix-based systems is used to format and edit text files, specifically for indenting text by a certain number of columns. When you use the `pr` command with the `--indent` option followed by a value, it automatically indents each line in the input file by that many columns, making the code or text easier to read, especially when dealing with structured data like source code.'
        join-lines: '[AI] The `pr` command with the `--join-lines` option is used in Unix and Unix-like operating systems for comparing and merging differences between two or more text files. When this flag is given, it merges the changes into a single text block instead of keeping them as separate hunks. This can be useful when dealing with files where the differences consist of simple insertions or deletions without complex context changes. The result is a single patch file containing all the changes joined into a single unit.'
        length: '[AI] The `pr --length` flag is used with the `git` command line tool for handling merge requests or patches. It specifies that only the length of each patch should be displayed, in the number of lines added or deleted. The output will not include the actual diff content or commit messages. This can be useful for quickly assessing the size of multiple patches without having to review their contents in detail.'
        merge: '[AI] The `--merge` flag in Git is used when merging two branches or commits together. It performs a fast, automatic merge where Git attempts to automatically resolve any conflicts between the files being merged. If there are any conflicts, they will be marked for the user to manually resolve. This is often the preferred method when merging branches that have only had minor changes. However, if there are significant differences between the branches, it may be necessary to use a more manual merge strategy.'
        no-file-warnings: '[AI] The `pr` command with the option `--no-file-warnings` is used in diff and merge tools, typically within version control systems like Git. This option disables the display of warning messages when files not under version control are encountered during a diff or merge operation. By suppressing these warnings, the output focuses solely on the differences between managed files, making it easier to review and apply changes.'
        number-lines: '[AI] The `pr` command with the `--number-lines` option is used in version control systems like Git to apply a patch file interactively. This means that instead of applying the entire patch at once, each hunk (a logical chunk of changes) is applied one by one, and the user can review the changes line by line before committing them permanently. The `--number-lines` option causes Git to display the number of lines that are added or deleted in each hunk, making it easier for users to understand the impact of each change before deciding whether to apply it.'
        omit-header: '[AI] The `pr --omit-header` flag is used with the `git` `pr` command in the context of merging pull requests. It instructs Git to ignore any changes made in the first committed file, which is typically the header or metadata file (e.g., CHANGELOG or .md files) when comparing and merging changes between branches. This can be useful to exclude such non-code changes from the merge process if desired.'
        omit-pagination: '[AI] The `--omit-pagination` flag is a command-line option used with the `grep` utility in Unix-like operating systems. This option is used to suppress or hide the pagination of output, meaning that the output will not be broken up into pages and instead will be displayed all at once, without interruptions caused by page breaks. By default, if the output is larger than what can fit on a single terminal screen, `grep` will display it in pages, making it harder to read or process the information sequentially. The `--omit-pagination` flag allows users to see the entire output continuously and without interruptions.'
        output-tabs: '[AI] The `pr --output-tabs` option is a command-line argument for the `pr` text filtering utility in Unix-like operating systems. This option instructs `pr` to output tab characters as tabs (instead of expanding them into spaces) when formatting input text for printing or further processing. For instance, if you have a file with mixed tabs and spaces in the columns alignment and want to preserve tabs, you can use `pr --output-tabs` to format the output while keeping the original tab characters.'
        page-width: '[AI] The `pr` command with the option `--page-width` is used in Git to control the output width of diff and patch files. Specifically, it sets the maximum line length for formatting the difference between two versions of a file. By default, this value is set to 80 characters, but you can adjust it with this flag to any other desired value, such as 120 or 72 characters, depending on your preference or the requirements of your project.'
        pages: '[AI] The `pr --pages` flag is a command used in GitHub''s `git pr` (Pull Request) tool. This flag displays only the diffs for specific pages of a pull request instead of the entire changeset. It allows developers to focus on smaller, more manageable chunks of changes, making it easier to review and provide feedback. The number of pages can be specified with an argument, such as `pr --pages 3`.'
        sep-string: '[AI] The `pr` command with the option `--sep-string` is used in Unix-based systems for merging and editing files. This specific option sets a custom separator string that will be used to mark the differences between lines or blocks of text when generating the merge output. By default, `pr` uses the `''>''` character as a separator, but with `--sep-string`, you can provide a different string, for example, `"---"` or `"<<<<<"`, to make it clearer where modifications were made in the merged file.'
        separator: '[AI] The `--separator` option in the `parsely` library''s `parse` command (`pr --`) is used to specify a custom delimiter for parsing CSV data. Instead of using a comma as the default separator, you can provide your own character or string with this option. For example, `--separator=";\"` would parse CSV data using a semicolon as the separator.'
        show-control-chars: '[AI] The `pr --show-control-chars` option is used with the `pr` command in Unix-based systems for printing formatted text. With this option, control characters are displayed as escaped sequences instead of being interpreted and having their effects on the output. This can be useful for debugging or understanding the format of a file. For example, if you have a text file with non-printable characters or special formatting instructions, using `pr --show-control-chars` will show those characters as they are, making it easier to identify and address any issues.'
        show-nonprinting: '[AI] The `pr` command with the option `--show-nonprinting` is used in Unix-like operating systems to format and filter text files. This option causes `pr` to display non-printing characters, such as tabs and spaces, using their respective escape sequences instead of hiding them. It''s useful when debugging formatting issues or examining how certain characters might affect the output.'
        version: |-
            [AI] The `pr` flag `--version` is used to display version information about the Git tool `git-pvcs`, more commonly known as `git-porcelain`. This command returns the version number of the installed porcelain library within Git. For example, running `pr --version` in a Git Bash terminal might display an output similar to:

            ```
            porcelain v0.4.12
            ```

            This indicates that the version of Git's porcelain library is 0.4.12.
        width: '[AI] The `pr` command with the flag `--width` is used in version control systems like Git to control the width of the output text column when displaying differences between files or commits. By default, `pr` uses a relatively wide column width for its output. However, you can use the `--width` option followed by an integer value to set a specific column width, making the output more suitable for narrower terminals or displays. For instance, `pr --width 80 <file>` sets the output width to 80 characters. This helps to make the patch output more readable and easier to review when working on text-based user interfaces.'
