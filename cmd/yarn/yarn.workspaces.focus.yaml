# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: focus
description: Install a single workspace and its dependencies
flags:
    --json: Format the output as an NDJSON stream
    --production: Only install regular dependencies by omitting dev dependencies
    -A, --all: Install the entire project
documentation:
    command: '[AI] `yarn workspaces focus` is a command used in Yarn workspaces projects. It allows you to switch your working directory to a specific workspace within the project, making it the active workspace. All subsequent yarn commands will then be executed in the context of that workspace. This command helps to manage and work on multiple related projects as part of a larger monorepo.'
    flag:
        all: '[AI] `yarn workspaces focus --all` is a command used in Yarn, a popular package manager for JavaScript projects. This command is used to set the focus on all the projects within a Yarn workspace. In other words, it selects and activates the root package.json file as well as all the other package.json files in subdirectories, making them ready to install or build dependencies using Yarn. By setting focus on all projects, you can ensure that they share the same global and dev dependencies across the workspace.'
        json: '[AI] `yarn workspaces focus --json` is a command used with Yarn, a popular JavaScript package manager. This command sets the focus on a specific workspace within a Yarn Workspace project and generates a JSON output containing metadata about that workspace, such as its name, version, dependencies, and scripts. The generated JSON can be further processed or analyzed for various purposes.'
        production: |-
            [AI] `yarn workspaces focus --production` is a command used in Yarn, a popular JavaScript package manager. This command is utilized within a workspace setup where multiple projects share common dependencies managed by Yarn.

            The primary goal of this command is to prepare the specified project or workspace for production deployment by focusing on its production-specific dependencies and configurations. It does this by setting the `yarn.lock` file to only include those dependencies listed in the `package.json`'s `dependencies` section, rather than including development dependencies listed under `devDependencies`. This ensures that only necessary packages for running the application in a production environment are installed.
