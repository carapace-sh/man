# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: checkout-index
description: Copy files from the index to the working tree
group: low-level manipulator
flags:
    --ignore-skip-worktree-bits: do not skip files with skip-worktree set
    --prefix=: when creating files, prepend <string>
    --stage=: copy out the files from named stage
    --stdin: read list of paths from the standard input
    --temp: write the content to temporary files
    -a, --all: check out all files in the index
    -f, --force: force overwrite of existing files
    -n, --no-create: don't checkout new files
    -q, --quiet: no warning for existing files and files not in index
    -u, --index: update stat information in the index file
    -z: paths are separated with NUL character
documentation:
    command: '[AI] `git checkout-index` is a Git command used to copy file contents from the index (staging area) to the working directory. It can be used with specific files or recursively for an entire directory. This command is often used when you want to discard changes made in the working directory and restore the version of the file as it is in the index. By default, this command does not modify the Git history. To use it, run `git checkout-index <file>` or `git checkout-index -r <directory>`.'
    flag:
        all: '[AI] `git checkout-index --all` is a Git command used to update the working directory with the current state of the files in the index (staging area). When you run this command, it resets all tracked files in your working directory to match their current state in the index. This can be useful when you want to discard changes in the working directory and get back to the last committed version of those files.'
        force: '[AI] `git checkout-index --force` is a Git command used to update the working directory files with the current index state, overwriting any changes in the working directory. The `--force` option allows this operation to be performed even if there are unmerged changes or untracked files in the working directory that would normally prevent the checkout. Be careful when using this command as it can discard local modifications.'
        ignore-skip-worktree-bits: '[AI] `git checkout-index --ignore-skip-worktree-bits` is a Git command used to update the working directory files with their corresponding committed state, overriding the skip-worktree bits that were set in the index using `git add --skip-worktree`. This command is often used when the desired changes in the working directory conflict with the changes tracked by Git. By ignoring the skip-worktree bits, this command forces Git to update the files in the working directory according to the committed state.'
        index: '[AI] `git checkout-index` is a Git command used to update the working directory files with the current index state, overriding any changes made in the working directory. The "--index" option implies that only the named paths or files are affected by the command, leaving other files untouched in the working directory. This command can be useful when you want to discard local modifications and restore the files to their last committed version before making new changes.'
        no-create: '[AI] `git checkout-index --no-create` is a Git command used to update the working directory files with the content from the index without creating new files if they do not already exist. If the specified file does not exist in the working directory, this command will not create it. Instead, it will return an error message. This command can be useful when you want to ensure that only existing files are modified and no new files are created unintentionally.'
        prefix: '[AI] `git checkout-index` is a Git command used to update the working directory files with the content from the index (staging area). The `--prefix` option specifies a prefix string that will be added to the names of the files being checked out. This can be useful when dealing with multiple files or directories in the same operation. When you run `git checkout-index --prefix=<prefix> <file>...`, Git will update only the files whose names match the specified prefix pattern, leaving other files untouched.'
        quiet: '[AI] `git checkout-index --quiet` is a Git command used to update the working directory files with the contents from the index without any output or confirmation messages. It''s often used in scripts or automated workflows when you want to ensure that certain files are updated to match the state in the repository, but don''t need to see any additional information during the process.'
        stage: '[AI] `git checkout-index -- <file>` is a Git command used to remove a file from the staging area (preparing it for the next commit) and restore its state in the working directory from the latest commit. If no file is specified, this command affects all files in the current directory. In summary, it unstages a file or multiple files.'
        stdin: '[AI] `git checkout-index --stdin` is a Git command used to update the index (staging area) with changes from the working directory. The "--stdin" option reads the changes from standard input, making it suitable for applying changes from scripts or pipes, like the output of diff tools. It doesn''t modify the working directory or the local branch, but only updates the index.'
        temp: '[AI] `git checkout-index --temp` is a Git command used to create a new, untracked file or update an existing untracked file in the working directory from the current index state. The `--temp` option causes Git to use a temporary filename with a `.gitcheckout` extension for the file. This can be useful when you want to temporarily store the current index state of a file without committing it, or when you need to compare the differences between the index and working directory versions of a file.'
        z: '[AI] `git checkout-index --zero-directory <path>` is a Git command used to set the index state of files in a specific directory to match the latest committed version, with all working directory files being removed if they don''t correspond to the current commit. In essence, it resets the specified directory to its committed state and discards any uncommitted changes.'
