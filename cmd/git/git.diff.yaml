# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: diff
description: Show changes between commits
group: main
flags:
    --abbrev=: show only a partial prefix
    --anchored=: Generate a diff using the "anchored diff" algorithm
    --binary: output a binary diff
    --cached: View the changes you staged in the index/cache
    --check: Warn if changes introduce conflict markers or whitespace errors
    --color-moved-ws?: This configures how whitespace is ignored when performing the move detection
    --color-moved?: Moved lines of code are colored differently
    --color-words=: Equivalent to --word-diff=color plus (if a regex was specified)
    --color=: Show colored diff
    --compact-summary: Output a condensed summary of extended header information
    --cumulative: Synonym for --dirstat=cumulative
    --diff-algorithm=: ""
    --diff-filter=: filter files
    --dirstat-by-file=: Synonym for --dirstat=files,param1,param2...
    --dst-prefix=: Show the given destination prefix instead of "b/"
    --exit-code: Make the program exit with codes similar to diff(1)
    --ext-diff: Allow an external diff helper to be executed
    --find-copies-harder: inspect unmodified files as candidates for the source of copy
    --find-object=: Look for differences that change the number of occurrences of the specified object
    --full-index: show the full pre- and post-image blob object names
    --histogram: Generate a diff using the "histogram diff" algorithm
    --ignore-blank-lines: Ignore changes whose lines are all blank
    --ignore-cr-at-eol: Ignore carriage-return at the end of line when doing a comparison
    --ignore-space-at-eol: Ignore changes in whitespace at EOL
    --ignore-submodules=: Ignore changes to submodules in the diff generation
    --indent-heuristic: Enable the heuristic that shifts diff hunk boundaries to make patches easier to read
    --inter-hunk-context=: Show the context between diff hunks
    --ita-invisible-in-index: this option makes the entry appear as a new file
    --line-prefix=: Prepend an additional prefix to every line of output
    --minimal: Spend extra time to make sure the smallest possible diff is produced
    --name-only: Show only names of changed files
    --name-status: Show only names and status of changed files
    --no-color: Turn off colored diff
    --no-color-moved: Turn off move detection
    --no-color-moved-ws: Do not ignore whitespace when performing move detection
    --no-ext-diff: Disallow external diff drivers
    --no-indent-heuristic: Disable the indent heuristic
    --no-index: Compare paths on the file system
    --no-prefix: Do not show any source or destination prefix
    --no-rename-empty: Whether to use empty blobs as rename source
    --no-renames: Turn off rename detection
    --numstat: Similar to --stat, but shows number of added and deleted lines in decimal notation
    --output-indicator-context=: Specify the character used to indicate context lines in the generated patch
    --output-indicator-new=: Specify the character used to indicate new lines in the generated patch
    --output-indicator-old=: Specify the character used to indicate old lines in the generated patch
    --output=: Output to a specific file instead of stdout
    --patch-with-raw: Synonym for -p --raw
    --patch-with-stat: Synonym for -p --stat
    --patience: Generate a diff using the "patience diff" algorithm
    --pickaxe-all: When -S or -G finds a change, show all the changes in that changeset
    --pickaxe-regex: Treat the <string> given to -S as an extended POSIX regular expression to match
    --raw: Generate the diff in raw format
    --relative,=: exclude changes outside the directory
    --rename-empty: Whether to use empty blobs as rename source
    --shortstat: Output only the last line of the --stat format
    --src-prefix=: Show the given source prefix instead of "a/"
    --stat-count=: Generate diffstat with limited lines
    --stat-graph-width=: Generate diffstat with a given graph width
    --stat-name-width=: Generate diffstat with a given filename width
    --stat-width=: Generate diffstat with a given width
    --stat=: Generate a diffstat
    --submodule=: Specify how differences in submodules are shown
    --summary: Output a condensed summary of extended header information
    --textconv=: Allow (or disallow) external text conversion filters to be run when comparing binary files
    --word-diff-regex=: Use <regex> to decide what a word is
    --word-diff?: Show a word diff, using the <mode> to delimit changed words
    --ws-error-highlight=: Highlight whitespace errors in the context, old or new lines of the diff
    "-0": Omit diff output for unmerged entries
    -1, --base: compare with base
    -2, --ours: compare with our branch
    -3, --theirs: compare with their branch
    -B, --break-rewrites=: Break complete rewrite changes into pairs of delete and create
    -C, --find-copies=: Detect copies as well as renames
    -D, --irreversible-delete: Omit the preimage for deletes
    -M, --find-renames=: Detect renames
    -O=: Control the order in which files appear in the output
    -R: Swap two inputs
    -S=: Look for differences that change the number of occurrences of the specified string
    -U, --unified=: Generate diffs with <n> lines of context instead of the usual three
    -W, --function-context: Show whole surrounding functions of changes
    -X, --dirstat=: Output the distribution of relative amount of changes for each sub-directory
    -a, --text: Treat all files as text
    -b, --ignore-space-change: Ignore changes in amount of whitespace
    -l=: prevent rename/copy detection from running if the number of rename/copy targets exceeds the specified number
    -p, --patch: Generate patch
    -s, --no-patch: Suppress diff output
    -u: Generate patch
    -w, --ignore-all-space: Ignore whitespace when comparing lines
    -z: do not munge pathnames and use NULs as output field terminators
documentation:
    command: '[AI] `git diff` is a Git command that shows the differences between the working directory and the last commit, or between two specific commits in the current repository. It provides a textual representation of the changes made to the files. By default, it displays the difference for each file with changed content, as well as added or deleted files. You can also use `git diff --cached` to see the differences between your latest commit and the next one before making the commit.'
    flag:
        "0": |-
            [AI] `git diff --cached --ignore-space-at-eol` and `git diff --staged --ignore-space-at-eol` are common ways to view differences between the current state of the files in the index (staging area) and the last commit.

            The flag `--ignore-space-at-eol` is used to ignore whitespace differences at the end of lines.

            `git diff -0` is a different way to show the differences between the current index state and the last commit, but it does not include any hunk (context) information in the output. Instead, it shows only the raw binary differences between the files. This can be useful when dealing with large binary files or when you want to compare the files without the context information.
        O: '[AI] `git diff -O` is a Git command that generates a patch file in the "context diff" format, showing the difference between two branches or commits in a more visual and human-readable way. Instead of displaying the differences side by side or in the unified format, it displays a context of multiple lines before and after each change. This is useful when dealing with larger files or complex changes. The output can be saved as a .patch file for easy application to other projects.'
        R: '[AI] `git diff -R` is a Git command that shows the differences between the current state of the entire working directory and its corresponding commit or branch. The `-R` flag stands for recursive, meaning it will display differences not only in the current file but also in subdirectories. It provides a tree view of differences, allowing users to easily compare and review changes across multiple files and directories within a project.'
        S: '[AI] `git diff -S` is a Git command used to show the differences between two branches or commits with emphasis on lines that have been added, modified, or deleted. The `-S` option causes Git to output the total number of added, modified, and deleted lines for each file in the difference. This can provide a quick overview of the changes made between the specified commits or branches.'
        abbrev: '[AI] `git diff --abbrev` is a Git command that shows the differences between the heads of two branches or commits in a compact, abbreviated format. It displays only the filenames with the number of added or deleted lines for each file. This can be useful when you want to quickly check which files have been modified and by how much without seeing the detailed changes.'
        anchored: '[AI] `git diff --anchored` is a Git command used to show the differences between the current branch and its upstream counterpart. The `--anchored` option specifically highlights merged branches or commits by anchoring the hunks of changed lines at their base, making it easier to visualize where changes were made during a merge conflict resolution.'
        base: '[AI] `git diff --base` is a Git command used to show the differences between the current branch and the base branch (usually the remote-tracking branch) before any local commits. It provides a three-way merge diff, showing the changes introduced in both branches and the merged result. This command helps in resolving conflicts before merging branches or reviewing the changes that will be merged.'
        binary: '[AI] `git diff --binary` is a Git command used to display a binary diff between two tree objects in a Git repository. Unlike regular text-based diffs, this command shows the differences as binary data, primarily used for files with no text component or when comparing binary files. It highlights added bytes (plus sign), deleted bytes (minus sign), and common bytes (no sign).'
        break-rewrites: '[AI] `git diff --break-rewrites` is a Git command used to show the differences between two commits in the repository. The `--break-rewrites` option is added to prevent Git from collapsing rebase-friendly changes into a single hunk when displaying the difference. This means that each changed line will be shown as a separate hunk, making it easier for developers to understand and handle complex changes made via rebase or other rewrite operations.'
        cached: '[AI] `git diff --cached` is a Git command that shows the differences between the files in the current Git index (staging area) and the last commit. It does not include changes that have not been staged yet. The output is a textual diff that allows you to review and decide which changes to commit.'
        check: '[AI] `git diff --check` is a Git command used to perform a soft check for differences between the current branch and its upstream. It does not show the differences themselves, but instead checks if there are any new commits on the local branch that are not present in the upstream branch. If such commits exist, it will alert the user with an error message, indicating the need to pull the latest changes before pushing local commits to the remote repository to avoid potential merge conflicts.'
        color: '[AI] `git diff --color` is a Git command used to show the difference between current file changes and the last commit in a colored format. The `--color` option enables syntax-highlighting for easier visualization of added, modified, or deleted code. It helps developers quickly identify and understand the changes made during a coding session or review the differences before committing new changes.'
        color-moved: '[AI] `git diff --color-moved` is a Git command that shows the differences between two commits in color-coded format, specifically highlighting moved or rearranged lines of code. The `--color-moved` option makes Git display moved lines with a different color to help identify where code has been relocated within the file. This can be useful when merging branches or tracking down refactoring changes.'
        color-moved-ws: '[AI] `git diff --color-moved-ws` is a Git command that shows the difference between two commits with colored output, specifically highlighting moved or changed whitespace characters (spaces and tabs) between the files. It can help identify and resolve whitespace inconsistencies during code merging or collaboration.'
        color-words: '[AI] `git diff --color-words` is a Git command used to show the differences between two commits in a colorized format, with each word that has been changed highlighted in a different color. This can make it easier to identify which words have been modified when comparing text files. The `--color-words` option specifically colors each word instead of just the lines or hunks.'
        compact-summary: '[AI] `git diff --compact-summary` is a Git command that provides a compact summary of the differences between the current branch and the specified branch or commit. It lists each hunk with its file name, the number of added and deleted lines, and a shortened version of the commit message. The output is more succinct than the full `git diff` output, making it useful for quickly reviewing multiple changes.'
        cumulative: '[AI] `git diff --cumulative` is a Git command that displays the difference between two branches or commits in a cumulative way. The output shows each hunk of changed lines, with the total net change for each file displayed at the bottom. This format makes it easy to see the overall differences and how they accumulate across multiple commits.'
        diff-algorithm: |-
            [AI] `git diff` is a Git command used to show the differences between two branches or commits. The `--diff-algorithm` option specifies which difference algorithm to use when displaying these differences.

            By default, Git uses the "minimal" difference algorithm for text files and the "patch" algorithm for binary files. However, you can force Git to use other algorithms, such as:

            1. `--diff=histogram`: Displays a histogram of added and deleted lines.
            2. `--diff=unicode-diff`: Shows Unicode character by character differences.
            3. `--diff=side-by-side`: Shows changes side-by-side.
            4. `--diff=context`: Shows context around the changes.
            5. `--diff=minediff`: Outputs raw hunk header lines and patch data.

            The "git diff --diff-algorithm" command itself doesn't change the default algorithm but sets the algorithm for the next Git diff command. For example, you could use it as follows:

            ```bash
            git config --global merge.tool.mine 'git mergetool --no-prompt'
            git config --global merge.conflictstyle merge
            git diff --diff-algorithm=context <branch1> <branch2>
            ```

            This command will use the "context" algorithm to display the differences between `<branch1>` and `<branch2>`.
        diff-filter: '[AI] `git diff --diff-filter` is a Git command used to show the differences between two specific tree objects or commits in your repository. The `--diff-filter` option allows you to select which types of changes to display, such as `A` (added files), `D` (deleted files), `M` (modified files), or `AM` (added or modified files). For example, `git diff --diff-filter=d HEAD^ HEAD` will show only the deleted files between the previous and current commits.'
        dirstat: |-
            [AI] `git diff --dirstat` is a Git command that generates a summary of a file or folder difference between two branches or commits in the repository. It provides statistics about which parts of the files or directories have been added, modified, or deleted. The output is displayed in three columns representing:

            1. `total`: the total number of files and subdirectories.
            2. `new`: the number of new files or subdirectories.
            3. `modified`: the number of modified files or subdirectories.
            4. `deleted`: the number of deleted files or subdirectories.

            This command is useful when you want to get an overview of the changes in terms of files and directories, rather than individual lines within those files.
        dirstat-by-file: '[AI] `git diff --dirstat-by-file` is a Git command that displays a statistics summary of changed files in a three-way format during a merge conflict or when comparing two branches. The output is organized by file, showing the number of added, modified, and deleted files, as well as the total number of bytes added, modified, and deleted. This command helps developers quickly assess the differences between two revisions at a granular level and focus on specific files.'
        dst-prefix: '[AI] `git diff --dst-prefix` is a Git command used to show the differences between the working directory and the index or between the index and the head commit. The `--dst-prefix` option modifies how the output file names are displayed in the context of a rename or move operation, prefixing the names with "d/". This helps distinguish renamed files from new or deleted ones when examining the diff output.'
        exit-code: |-
            [AI] `git diff --exit-code` is a Git command used to show the differences between the current branch's HEAD and the last commit, similar to the regular `git diff` command. However, it sets an exit code after running:

            1. With no changes: Exit code 0
            2. With changes: Exit code 1

            This makes it useful in scripts or automated workflows where you want to check if there are any differences between branches before merging, and take appropriate actions based on the exit code.
        ext-diff: '[AI] `git diff --ext-diff` is a Git command used to perform external three-way merges during a merge conflict resolution. The external diff format allows merging tools like vimdiff, p4merge, or kdiff3 to handle the merging process. Instead of using Git''s default text-based merger, you can use an external tool that offers better visualization and editing capabilities. This command instructs Git to output the changes in a format suitable for those external merge tools.'
        find-copies: '[AI] `git diff --find-copies` is a Git command used to show the differences between two commit versions, including copies of files that have been modified or moved between them. This option makes Git track and display changes to the actual file paths, not just their contents. It helps in identifying file renames, moves, and copies during the comparison process.'
        find-copies-harder: |-
            [AI] `git diff --find-copies-harder` is a Git command used to show the differences between two commits with special attention given to copied files or fragments. It is an extension of the standard `git diff` command, which only shows changes within files.

            The `--find-copies-harder` option makes Git work harder to detect and display copies or renames of entire files or fragments between the two commits. This is particularly useful when working with large projects where files are frequently copied or moved. It helps developers understand the context and impact of changes, especially in complex merge scenarios.
        find-object: '[AI] `git diff --find-objects` is a Git command used to find and display the differences between two object trees or commits in a Git repository. It shows the SHA-1 hashes of the objects that have been added, modified, or deleted, rather than the changes themselves. The output includes columns indicating whether each object was added (+), deleted (-), or both (+/-). This command is particularly useful when working with large files or binary data where it''s more efficient to compare object hashes instead of the actual file contents.'
        find-renames: '[AI] `git diff --find-renames` is a Git command used to display the differences between two branches or commits with emphasis on detected renamed files and their new names. It shows both the rename operation itself and the resulting file content differences in the output. This command is helpful when you need to understand how file names have changed between two versions in your Git repository.'
        full-index: '[AI] `git diff --full-index` is a Git command that displays the difference between two commit versions in a more detailed format than the default output. The `--full-index` option includes the full indexdiff output, which shows the changes to all files in the difference, including additions, deletions, and modifications. Each file''s change information is presented as a separate hunk with its author date, commit message, and a series of addition and deletion lines indicating the specific changes.'
        function-context: '[AI] `git diff --function-context` is a Git command used to display the difference between two branches or commits with additional context around each function or method definition in the changed files. The context includes the function name, its opening and closing braces, and a few lines of code before and after it. This helps provide more meaningful context when comparing changes that involve functions or methods.'
        histogram: '[AI] `git diff --histogram` is a Git command that displays a histogram of the number of added and deleted lines in each commit during a given range. It provides a graphical representation of the changes made across multiple commits, allowing for quick identification of commits with large additions or deletions. The output consists of horizontal bars representing each commit, where the length of each bar corresponds to the number of lines added or removed in that commit.'
        ignore-all-space: '[AI] `git diff --ignore-all-space` is a Git command used to show the differences between two branches or commits, ignoring any whitespace differences. This option is particularly useful when working on text files and dealing with inconsistent indentation or white spaces between teams or developers. By running this command, Git will filter out changes in white spaces and focus only on the modifications made to the code logic or structure.'
        ignore-blank-lines: '[AI] `git diff --ignore-blank-lines` is a Git command used to show the differences between two commits or branches, ignoring any changes that only consist of blank lines. It helps in focusing on non-trivial code changes and filters out irrelevant modifications due to formatting differences such as line breaks or indentation.'
        ignore-cr-at-eol: '[AI] `git diff --ignore-whitespace --ignore-space-at-eol` is a Git command used to show the differences between two commits or branches. The `--ignore-cr-at-eol` (short for "ignore carriage returns at end-of-lines") option is an additional flag that tells Git to ignore changes in line endings (specifically, carriage returns) when comparing files. This can be useful when working on projects that involve files with different line ending styles, such as those created on Windows and Unix systems. Without this flag, Git would treat these differences as modifications, which could cause unnecessary conflicts during merging or pulling.'
        ignore-space-at-eol: '[AI] `git diff --ignore-space-at-eol` is a Git command used to show the differences between two commits or branches. The `--ignore-space-at-eol` option tells Git to ignore changes in whitespace at the end of lines when displaying the difference. This can be useful when dealing with files that have different formatting styles for indentation or trailing spaces without any semantic meaning changes.'
        ignore-space-change: '[AI] `git diff --ignore-space-change` is a Git command used to show the differences between two commits or branches, ignoring any changes in whitespace formatting such as indentation and trailing spaces. It helps to focus on the semantic changes in the code rather than insignificant formatting differences.'
        ignore-submodules: '[AI] `git diff --ignore-submodules` is a Git command used to show the differences between the current branch and the last commit, but it ignores any changes made in submodules. Submodules are separate Git repositories that can be stored within another Git repository. By using the `--ignore-submodules` option, the output of the `git diff` command will only display changes in the main project files, excluding any modifications made to the submodules themselves.'
        indent-heuristic: '[AI] `git diff --indent-heuristic` is a Git command used to show the differences between two branches or commits. The `--indent-heuristic` option is a hint to Git''s diff algorithm, requesting it to apply an automatic indentation adjustment when displaying hunks (chunks) of added or modified code. This helps ensure consistent formatting in the output, especially when dealing with code changes that include significant line length differences or complex indentations.'
        inter-hunk-context: '[AI] `git diff --inter-hunk-context` is a Git command that shows the difference between two commit versions with an extra context, specifically the context of each hunk (a chunk of changed lines). The output includes the file path, the hunk number, and the context before and after each hunk change. It''s useful when working with large or complex changes where understanding the context of individual hunks is important.'
        irreversible-delete: '[AI] `git diff --irreversible-delete` is a Git command that shows the differences between the current branch and the last commit on it, focusing on the files that have been permanently deleted from the repository using `git rm --cached -f`. The `--irreversible-delete` option highlights only those deletions that cannot be undone with `git reset` or other Git commands, making it useful when you need to carefully review and confirm the removal of critical files.'
        ita-invisible-in-index: '[AI] The `git diff --cached-invisible-in-index` command displays the differences between the index and the working directory, but it also shows changes that are not tracked by Git. The `--ita-invisible-in-index` is an extended option which makes these untracked changes invisible in the output. This means only the differences between the indexed files will be shown, making it useful for reviewing staged changes before committing.'
        l: '[AI] `git diff -l` is a Git command used to show the differences between the current working directory and the last commit in a text format, using the Unified Diff format (also known as Limit or Context diff). The `-l` option stands for "show only the differences between files" without showing the context or the changed lines numbers within the files. In other words, it displays only the added, deleted, or modified lines in the difference output.'
        line-prefix: '[AI] `git diff --line-prefix` is a Git command used to show the differences between two commit versions of a file in the working directory. The `--line-prefix` option adds a prefix (usually ''+'' or ''-'') to each line that indicates whether it has been added (+) or deleted (-) in the difference. This helps to better understand which lines have changed and where they appear in the context of the file.'
        minimal: '[AI] `git diff --minimal` is a Git command used to display the minimal difference between two branches or commits. The `--minimal` option produces the smallest possible patch that still makes the change, focusing only on the differences in lines added or deleted. It excludes changes in whitespace and commenting, making it suitable for merging binary files or non-text files.'
        name-only: '[AI] `git diff --name-only` is a Git command that shows only the names of the files that have been modified between the current branch and the last commit. It does not display the differences inside those files, just the filenames. This can be useful for quickly identifying which files have changed without having to look through the output of a regular `git diff`.'
        name-status: '[AI] `git diff --name-status` is a Git command used to show the differences between the current branch and the last commit, displaying only the file status changes: deleted files (listed under "D"), new files (listed under "A"), and modified files (listed under "M"). It provides a quick overview of what files have been added, removed, or changed during the last commit.'
        no-color: '[AI] `git diff --no-color` is a Git command used to show the differences between the current branch and the last commit on that branch or between two branches. The `--no-color` option disables the use of colored output, making it monochrome for users who prefer it or for scripts that don''t handle colors well. It displays the changes in a unified format with context information (added lines are marked with ''+'' and deleted lines with ''-'').'
        no-color-moved: '[AI] `git diff --no-color-moved` is a Git command used to show the differences between two commits in text format, without coloring or special symbols for moved lines. It''s useful when you prefer a plain text representation of the changes and don''t need the visual cues provided by the default colored output.'
        no-color-moved-ws: |-
            [AI] `git diff --no-color-moved-ws` is a Git command that shows the differences between the current branch and the last commit on it, with certain formatting options.

            The `--no-color` option disables colored output in the terminal. The `--moved-ws` (short for "white space") option causes Git to highlight any changes in whitespace, such as tab versus space indentation or trailing spaces. By appending `--no-color-moved-ws`, we disable the coloring of whitespace differences but still show the differences themselves.
        no-ext-diff: '[AI] `git diff --no-ext-diff` is a Git command used to show the differences between the current branch and the last commit on that branch, or between two branches. The `--no-ext-diff` option disables the use of external diff tools, instead using Git''s internal diff engine for displaying the differences. This can be useful when working with text files where external tools might introduce unwanted formatting changes or when dealing with a large number of files.'
        no-indent-heuristic: |-
            [AI] `git diff --no-indent-heuristic` is a Git command that shows the differences between two commits or branches in text format. The `--no-indent-heuristic` option disables Git's automatic detection and handling of indentation changes.

            When comparing files with complex indentation structures, Git may sometimes incorrectly mark indentation changes as text changes instead of formatting changes. By using this flag, users can explicitly control how they want Git to treat indentation differences, allowing for more accurate and fine-grained comparison results.
        no-index: '[AI] `git diff --no-index` is a Git command used to display the differences between the current branch and the last commit, but without taking into account file renamings or changes in the files that are not tracked by Git. The `--no-index` option tells Git to not consider the index (staging area) when computing the difference. This can be useful when you want to compare your working directory with the latest commit and focus only on untracked files or local modifications to tracked files.'
        no-patch: '[AI] `git diff --no-patch` is a Git command used to show the differences between the current branch and the last commit on the same branch or another branch, without displaying the patch format. The output will only include the changed lines with addition ''+'' signs for new code and ''-'' signs for deleted code, making it easier to quickly review the changes in plain text format.'
        no-prefix: '[AI] `git diff --no-prefix` is a Git command used to show the differences between the files in the current repository, but without including the hunk headers (prefixes) in the output. These hunks represent chunks of code or changes within each file. By using `--no-prefix`, only the changed lines are displayed, making it useful for quickly reviewing small textual modifications without the extra context provided by the hunk information.'
        no-rename-empty: '[AI] `git diff --no-rename-empty` is a Git command that shows the differences between the current branch and the last commit on it. The `--no-rename-empty` option disables the renaming of empty directories or files in the output. This means that if an empty directory or file has been deleted or moved, Git will show it as a deletion instead of a rename, maintaining a clearer and more accurate representation of the changes made.'
        no-renames: '[AI] `git diff --no-renames` is a Git command used to show the differences between two commit versions in text format, but it excludes renamed files or renamed parts of files from the output. This means that only new, deleted, and modified lines within the same file names will be shown, making it useful for reviewing changes focused on code modifications rather than renaming or moving files.'
        numstat: '[AI] `git diff --numstat` is a Git command used to display a summarized difference statistics between the current branch and the selected commit or another branch in a numeric format. It lists the number of added and deleted lines for each file, followed by the file path. This command helps provide an overview of the changes made at a file level without showing the actual difference lines.'
        ours: '[AI] `git diff --ours` is a Git command that displays the differences between the current state of the working directory files and the version in the local branch''s index (staging area). In other words, it shows the differences between your local changes and the changes you have staged for commit. This command allows you to compare and review your local modifications against the versions in the index before deciding whether to keep, discard, or modify them further.'
        output: '[AI] `git diff --output` is a Git command used to generate a file containing the difference between the current branch and the specified commit or branch, instead of printing the differences in the terminal. The output file will be saved with a name defined by the user, by default named "patch" with the extension ".diff". This command can be useful when you want to save the differences as files for further processing or review.'
        output-indicator-context: '[AI] `git diff --output-indicator-context` is a Git command used to show the difference between two file versions with context. The context refers to the surrounding lines around the changed lines in each hunk (a chunk of changes). By default, Git shows 3 lines before and after the change. You can customize this number by adding `<num>` after `--output-indicator-context`, where `<num>` is the number of context lines to display. For instance, `git diff --output-indicator-context=5` would show 5 lines before and after each change in the output.'
        output-indicator-new: '[AI] The `git diff --output-indicator-new` command displays the difference between the current branch and the selected commit, with a newline character (''\n'') preceding each hunk of new code added in the commit. The "--output-indicator-new" option adds an ''>'' symbol at the start of lines that are new in the commit, making it easier to identify which parts of the diff represent new additions.'
        output-indicator-old: '[AI] `git diff --output-indicator-old` is a Git command that displays the difference between the current branch and the last commit on it. The `--output-indicator-old` option adds an indicator before the hunks in the output, denoting which side of the difference (old or new) the hunk comes from. For example, ''>'' denotes new changes and ''<'' denotes old changes. This can help visually distinguish between additions and deletions when reviewing the differences.'
        patch: '[AI] `git diff --patch` is a Git command used to display the difference between two commits in a format called "patch format." This format represents the differences as a series of additions and deletions (hunks), along with context information, that can be applied to recreate the changes made. The output starts with `---` for the older version and ends with `---` for the newer version. Each hunk contains `+` for added lines and `-` for deleted lines. This format is useful when applying or reviewing changes across multiple commits in a text editor or when sending patches to others for review or inclusion into a project.'
        patch-with-raw: '[AI] `git diff --patch-with-raw` is a Git command used to display the difference between two commits in a patch format with raw binary differences included. The `--patch` option enables Git to show the difference as a series of hunks, or chunks, of changed code, while the `--patch-with-raw` extension instructs Git to include the raw binary data for each hunk, allowing you to inspect and handle binary changes directly, such as images or binary files. This can be helpful when dealing with complex file modifications or when working on projects with non-textual data.'
        patch-with-stat: |-
            [AI] `git diff --patch-with-stat` is a Git command used to display the difference between two commits in a patch format with an added statistic summary for each hunk (a contiguous, logically related change in the source code).

            When you run this command, Git generates a patch file showing the differences between the files in the two commits. The `--patch` option enables the output of the patch format, while `--stat` adds a statistical summary for each hunk. This summary includes the number of added and deleted lines for that hunk.

            This command is helpful when you want to review the changes made between two commits in detail while having an overview of how many lines were added or removed for each change.
        patience: '[AI] `git diff --patience` is a Git command used to display the difference between two branches or commits in a more readable and organized way. The `--patience` option formats the diff output with "patches" - Hunks that represent logical changes, grouped by context. This makes it easier to review and apply the differences, especially when dealing with large or complex code changes.'
        pickaxe-all: '[AI] `git diff --pickaxe-all` is a Git command used to display the differences between the working directory and the last commit in a patch format. The `--pickaxe-all` option tells Git to include the pickaxe rebase message with each hunk, which begins with "pick" followed by the commit hash. This allows you to easily apply or cherry-pick selected hunks from the diff output into another branch or commit them directly using an interactive rebase session.'
        pickaxe-regex: |-
            [AI] `git diff --pickaxe-regex` is a Git command used to show the differences between the current branch and the selected commit, with an added functionality of matching changes that affect specific regex patterns in the commit message.

            The "--pickaxe-regex" option causes Git to only output hunks (chunks) of changed code where the first line of the commit message matches the given regular expression. The output includes the file name and the hunks with the added, removed or modified lines, allowing you to easily review the changes related to your search pattern in the commit messages.
        raw: '[AI] `git diff --raw` is a Git command used to show the difference between the current state of your files and the changes staged for commitment, expressed as raw text patch format. This means it displays the differences in a format that can be directly applied as patches with the `patch` utility or other similar tools. The output shows the file name, the type of change (addition or deletion indicated by ''+'' and ''-'' respectively), and the actual difference between the versions of the code.'
        relative,: '[AI] `git diff --relative` is a Git command that displays the differences between two file versions in a relative format using forward slash (/) notation for added paths and a minus (-) sign for removed paths. It is often used when working with multiple files or directories to easily identify changes in file structures during a Git commit or merge.'
        rename-empty: '[AI] The `git diff --rename-empty` command displays the differences between the current branch and the selected commit, focusing on renamed files and empty directories. With this option, empty directories that have been removed or renamed are shown as rename events in the output. This can be useful when tracking complex file renames or directory structures during a Git project''s evolution.'
        shortstat: '[AI] `git diff --shortstat` is a Git command used to display a summarized difference between two commit versions in a repository. The output is presented as a series of short statistics, with each stat line representing a file and showing the number of added lines (+''''), deleted lines (''-''), and changed lines (''\ '') for that file. This command helps provide an overview of the changes made between the two revisions in terms of lines added, deleted, or modified.'
        src-prefix: '[AI] `git diff --src-prefix` is a Git command used to display the differences between the working directory and the index or between any two commits, with an added prefix indicating the source of each hunk. The `--src-prefix` option causes Git to add a label, usually beginning with "@@", to each chunk''s header line, specifying where the changes originated. This can be useful when merging branches or dealing with complex changes to better understand which parts came from which sources.'
        stat: '[AI] `git diff --stat` is a Git command that provides a summary of changes between the current branch and the last commit, or between two specified branches. The output is displayed in a tabular format with three columns: "File", "+" for added lines, "-" for deleted lines, and "?" for changed lines. The number next to each symbol represents the number of affected lines. This command is useful to quickly view the changes at a glance without having to open individual files.'
        stat-count: '[AI] `git diff --stat-count` is a Git command that provides a summary of changes between two commits or branches in the form of a statistics output. It shows the number of added, modified, and deleted files, as well as the total number of additions, deletions, and changes. The output is displayed in a tabular format with columns for files, changes (additions/deletions), and context (hunks). This command helps quickly assess the scope and impact of differences between revisions without having to examine each file individually.'
        stat-graph-width: '[AI] `git diff --stat` by default displays a statistic summary for each hunk in a diff. The `--stat-graph-width` option adjusts the width of this graph-like display. It''s used to make the output more readable when the terminal window is narrow, preventing truncation of the stat information.'
        stat-name-width: |-
            [AI] `git diff --stat` is a command used to compare and show the differences between two commits or branches in Git. The `--stat` option generates a statistic about the changes, showing the number of added, modified, and deleted files and lines.

            The `--stat-name-width` option is a modifier for the `--stat` output that sets the maximum width for the filename display in the stat output. By default, Git assumes a terminal window width of 80 characters for the filenames in the stat output. With `--stat-name-width`, you can specify a different width to accommodate longer filenames or customize the output format according to your terminal width. For instance, `git diff --stat --stat-name-width=50` sets the filename width to 50 characters.
        stat-width: |-
            [AI] `git diff --stat` is a Git command that provides an overview of changes between two commits. The `--stat` option generates a statistic output, which includes the number of added and deleted lines in each file, as well as a summary of the changes at the hunk level.

            The `--stat-width` option, when used with `git diff --stat`, sets the maximum width for the stat output. By default, this value is 80 characters. If you have long filenames or large terminal windows, you may want to increase this width to make the output more readable.

            For example, `git diff HEAD^ HEAD --stat-width=120` would display the statistic output with a maximum width of 120 characters. This can help ensure that the entire output fits nicely on your terminal screen without getting truncated or wrapped to the next line.
        submodule: '[AI] `git diff --submodule` is a Git command used to show the differences between the current committed state and the working directory of one or more submodules. The `--submodule` option tells Git to include differences for all submodules in the output. It provides a summary of added, modified, and deleted submodules and their specific changes within each submodule. This command is particularly useful when making changes to submodules and wanting to see the differences before committing them.'
        summary: '[AI] `git diff --summary` is a Git command that provides a summary of the changes between two commit versions in the repository. It does not show the difference between files line by line, but rather gives an overview of which files have been added, modified, or deleted. This command helps users to quickly assess what has changed without diving into individual file differences.'
        text: '[AI] `git diff --text` is a Git command that shows the difference between the text of two file versions in a git repository. It provides a side-by-side comparison of the changes made to the files, displaying each line with additions or deletions indicated by the ''+'' and ''-'' symbols respectively. The output is formatted as plain text, making it suitable for processing by other tools or for reviewing the differences in a terminal or text editor.'
        textconv: '[AI] `git diff --text-converter` is a Git command used to show the difference between two commits or branches with a custom text converter applied to the output. The text converter can be used to format the difference output in various ways, such as pretty-printing patches or converting them into other formats like HTML or Unified Diff with Tabs. This command does not change the working directory or create any new files but only outputs the formatted difference between the commits or branches to the console or a file.'
        theirs: '[AI] `git diff --theirs` is a Git command that shows the differences between your working directory and the changes made in the other branch or commit, with the changes from that other commit or branch favored in the output. In other words, it highlights the differences where the other side (their changes) introduced new or modified content. This command can be useful for understanding the changes made by someone else before merging their work into your project.'
        u: '[AI] `git diff -u` is a Git command used to display the difference between two branches or commits in an unified format. The `-u` option makes Git output the patch in the "unified format," which is a standardized way of representing the differences between files, showing common context and added/deleted lines with symbols. This format is widely supported by various version control systems and text editors, making it easy to review and apply changes across different platforms.'
        unified: '[AI] `git diff --unified` is a Git command that shows the difference between two commits or branches in an easy-to-read and merged format. The `--unified` option merges the changes from both sides into three sections: common lines, added lines unique to the first commit, and deleted lines unique to the second commit. Each section is preceded by a context header indicating the number of context lines displayed. This format allows developers to quickly review the differences and decide which changes to keep.'
        word-diff: '[AI] `git diff --word-diff` is a Git command that displays the differences between two commits or branches in the text format, using colorized and underlined syntax to highlight added, deleted, or changed words. This command provides a more readable way of viewing the changes made to specific files in a Git repository. It''s particularly useful when working on text-heavy files like configuration files or code files with minimal context changes.'
        word-diff-regex: '[AI] `git diff --word-diff` is a Git command used to show the differences between two commits or branches. The `--word-diff` option enables word-based difference viewing, which highlights entire words that have changed. The `--word-diff-regex` (short form: `--wd`) option extends this functionality by using a regular expression pattern to define what is considered as a "word" for the diff output. This can be useful when dealing with code that includes long identifiers or complex text patterns, where plain word differencing might not accurately capture the changes.'
        ws-error-highlight: '[AI] `git diff --ws-error-highlight` is a Git command used to show the differences between the working directory and the index or between the index and the head, with an added feature to highlight merge conflicts and other error messages in red color. This command is particularly useful when dealing with files containing merged changes from multiple branches or when resolving merge conflicts. The option `--ws-error-highlight` enables the display of conflict markers and error messages in a more visually distinct way, which can help in quickly identifying and resolving these issues.'
        z: '[AI] `git diff --cached --diff-filter=Z` is a Git command used to show the differences between the files in the index (staging area) and the last commit in a zero-sized format. The `--cached` option shows the changes that are staged for the next commit, while `--diff-filter=Z` shows only the differences where both files have been added or deleted. The zero-sized output is used by other Git commands or scripts to process the differences without displaying them in a human-readable format.'
