# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: ipa
description: Build an iOS archive bundle (Mac OS X host only)
flags:
    --analyze-size: Produce additional profile information for artifact output size.
    --build-name=: A "x.y.z" string used as the version number shown to users.
    --build-number=: An identifier used as an internal version number.
    --dart-define*=: Additional key-value pairs that will be available as constants.
    --debug: Build a debug version of your app.
    --export-options-plist=: Optionally export an IPA with these options.
    --flavor: Build a custom app flavor as defined by platform-specific build setup.
    --no-analyze-size: Do not produce additional profile information for artifact output size.
    --no-null-assertions: Do not perform additional null assertions on the boundaries of migrated and un-migrated code.
    --no-obfuscate: In a release build, this flag does not removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --no-pub: Do not run "flutter pub get" before executing this command.
    --no-tree-shake-icons: Do not tree shake icon fonts so that only glyphs used by the application remain.
    --null-assertions: Perform additional null assertions on the boundaries of migrated and un-migrated code.
    --obfuscate: In a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation.
    --profile: Build a version of your app specialized for performance profiling.
    --pub: Run "flutter pub get" before executing this command.
    --release: Build a release version of your app (default mode).
    --split-debug-info=: In a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application.
    --tree-shake-icons: Tree shake icon fonts so that only glyphs used by the application remain.
    -h, --help: Print this usage information.
    -t, --target=: The main entry-point file of the application, as run on the device.
documentation:
    command: '[AI] `flutter build ipa` is a command used in Flutter development for building an iOS application package (an .ipa file) for submission to the App Store or testing on physical devices. This process bundles your app''s code, resources, and required dependencies into a single archive that can be installed via Xcode or other Apple tools.'
    flag:
        analyze-size: '[AI] `flutter build ipa --analyze-size` is a command used in Flutter development for generating an IPA file (for iOS app distribution) with size analysis. The `--analyze-size` option enables the Flutter Analyzer tool to generate reports on the size of the generated IPA, including total binary size, code size, resources size, and other detailed breakdowns. These reports help developers optimize their apps for smaller binary sizes, reducing app download times and storage requirements for end-users.'
        build-name: '[AI] `flutter build ipa` is a command used in Flutter, a mobile app development framework, to create an archived installable package (IPA file) for iOS apps. The `--build-name` option allows you to specify a custom name for the IPA file instead of using the default project name. So, `flutter build ipa --build-name MyCustomAppName` will generate an IPA file named "MyCustomAppName.ipa" instead of the default project name.'
        build-number: '[AI] `flutter build ipa --build-number` is a command used in Flutter development to create an archived (`.ipa` file) for iOS app distribution. The `--build-number` argument specifies the custom build number for the IPA file. This command builds, tests, codesigns, and packages the app into a distributable format for submission to the App Store or for internal testing.'
        dart-define: '[AI] `flutter build ipa --dart-define` is a command used in Flutter development to generate an IPA file for iOS app distribution. The `--dart-define` option allows you to define key-value pairs as constants in your Dart code before building the IPA. This can be useful for passing custom configuration values or variables to the app at build time. For example, you might use it to set a specific API key for network requests or enable/disable certain features based on the build environment.'
        debug: '[AI] `flutter build ipa --debug` is a command used in Flutter development to create an IPA file for distributing an app to testing platforms like TestFlight or Xcode Simulator for debugging on iOS devices. The `--debug` flag signifies building the app with debug mode enabled, which includes symbols and other data necessary for effective debugging during the testing process.'
        export-options-plist: '[AI] `flutter build ipa` is a command used in Flutter development to create an IPA (iOS Application Package) file for submitting or testing an iOS app. The `--export-options-plist` option generates and specifies the location of an export options plist file, which includes metadata like app version, bundle identifier, and signing information required by Apple''s App Store Connect platform to upload and manage your app.'
        flavor: '[AI] The `flutter build ipa --flavor` command is used to create an IPA file (for iOS app distribution) using Flutter, specifically for a particular app flavor or build type. It compiles and packages the Swift and Objective-C code generated by Flutter, along with associated resources and metadata, into a single IPA archive file suitable for submission to the App Store.'
        help: |-
            [AI] `flutter build ipa` is a command used in Flutter, a mobile app development framework, to create an IPA (iOS Application Package) file. The `--help` option is provided for displaying detailed help information about this command. When you run `flutter build ipa --help`, it shows the following:

            - It explains that `flutter build ipa` builds an iOS app for distribution, and creates an .ipa file in the `build/exports/ipas` directory.
            - It lists optional arguments like `--obsolete-device-support` and `--release`, which can be used to include support for older devices or build a release version, respectively.
            - It specifies that the command accepts zero arguments, as it takes its input from the current directory, where your Flutter project resides.
            - Finally, it provides an example usage: `flutter build ipa --obsolete-device-support` to create an IPA file with obsolete device support.
        no-analyze-size: '[AI] `flutter build ipa --no-analyze-size` is a command used in Flutter development for building an IPA (iOS Application Package) without performing size analysis during the build process. The `--no-analyze-size` option is passed to suppress the generation of size reports, which can help save time during continuous integration or large-scale builds. This command assumes that you have already set up your Apple Developer account and configured your Flutter project accordingly for iOS development.'
        no-null-assertions: '[AI] `flutter build ipa` is a command used in Flutter to create an IPA file for distributing an app on the iOS platform. The option `--no-null-assertions` disables null safety checks during the build process. This means that Flutter will not throw an error if it detects potential null reference issues at runtime, and instead allows the app to continue running with a warning. Enabling this flag can help bypass certain errors, but it may also introduce potential null pointer exceptions in the app. Therefore, it should be used carefully and only when necessary.'
        no-obfuscate: '[AI] `flutter build ipa --no-obfuscate` is a command used in Flutter development to generate an IPA (iOS Application Package) file for submitting an app to the App Store or testing on physical iOS devices. The `--no-obfuscate` flag prevents code obfuscation during the build process, meaning that the source code structure and names will remain readable in the compiled binary. This can be useful for debugging and understanding the app''s logic without requiring access to the original source code.'
        no-pub: '[AI] `flutter build ipa --no-pub` is a command used in Flutter development to create an Intellectual Property (IPA) file for iOS app distribution. The `--no-pub` flag indicates that Flutter should not publish the app to the Apple App Store or any other public repository. Instead, it generates the IPA file locally for manual distribution through Xcode, TestFlight, or other means. This command compiles the application code, integrates all necessary resources, and packages the IPA file ready for submission to Apple''s App Store Connect platform.'
        no-tree-shake-icons: '[AI] The `flutter build ipa --no-tree-shake-icons` command is used to create an IPA file for distribution on the App Store, specifically for iOS devices, using Flutter. The `--no-tree-shake-icons` option disables tree shaking for icons during the build process. Tree shaking is a technique that eliminates unused code from the app bundle to reduce its size and improve performance. However, this optimization does not apply to icons, which are image files and not code, hence the need for `--no-tree-shake-icons` to ensure all icon files are included in the IPA file during the build process.'
        null-assertions: '[AI] `flutter build ipa --null-assertions` is a command used in Flutter development to create an IPA (iOS Application Package) for submission to the App Store or testing on a physical iOS device. The `--null-assertions` flag enables null safety, a new feature introduced in Dart 2.12, but allows suppression of "unchecked use of a null value" warnings during the build process. This means that the codebase can still contain nullable references and null checks will not fail at compile time, but any null reference issues encountered at runtime on iOS devices will cause the app to crash.'
        obfuscate: '[AI] `flutter build ipa --obfuscate` is a command used in Flutter development to generate an IPA file (for iOS distribution) with code obfuscation enabled. Obfuscation is a process that makes it harder for someone to reverse-engineer the code by renaming variables, changing class names, and adding unnecessary code, thereby increasing app security and making it more difficult for others to understand or modify the code. This command automates the build process of an iOS app with Flutter and applies obfuscation using a tool like ProGuard (bundled in Android Studio) or Dart ObFusCate for Dart code.'
        profile: '[AI] The `flutter build ipa --profile` command is used to build an iOS app package (`.ipa`) using Flutter, with the inclusion of custom provisioning profiles. This command integrates specific provisioning profiles into the app building process, which are necessary for overriding Apple''s App Store or Ad-hoc distribution certificates, ensuring that your app can be tested and distributed outside of the App Store.'
        pub: '[AI] `flutter build ipa --pub` is a command used in Flutter development to create an IPA file for distributing an app on the Apple App Store. This command builds the iOS application using the `--release` mode and publishes the archive to an Apple Developer account via Xcode Organizer or Authenticator, assuming that these services are properly configured. The generated IPA file can be uploaded directly to App Store Connect for submission.'
        release: '[AI] `flutter build ipa --release` is a command used in Flutter development to create an archived (`.ipa`) file for distributing an iOS app for release. The `--release` flag indicates that this is a release build, meaning it optimizes the code for size and performance, while providing the necessary symbols for crash reporting tools like Xcode and Crashlytics. This command generates a ready-to-upload package containing your compiled app code, resources, and metadata.'
        split-debug-info: '[AI] `flutter build ipa --split-debug-info` is a command used in Flutter, a mobile app development framework. This specific command builds an IPA file (for iOS apps) with the `--split-debug-info` option enabled. This option instructs Flutter to split the debug symbol information from the main IPA file into separate files for each individual library or package used in the app. These separate files are important for effective debugging when using Xcode''s Debugger on iOS devices and simulators.'
        target: '[AI] The `flutter build ipa --target` command is used to create an IPA (iOS Application Package) file from a Flutter project. This command targets the iOS platform, builds and tests the application, then packages it for submission to the App Store or for local testing on an iPhone or iPad using Xcode. The resulting IPA file can be installed directly onto an Apple device or uploaded to App Store Connect for distribution.'
        tree-shake-icons: '[AI] `flutter build ipa --tree-shake-icons` is a command used in Flutter development to create an IPA file for iOS app distribution, with tree shaking for icon images enabled. Tree shaking is an optimization process that eliminates unused code and assets from the final app bundle, reducing its size. In this specific command, tree shaking is also applied to icon images to include only the necessary ones in the IPA file.'
