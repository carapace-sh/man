# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: join
description: Run this on any machine you wish to join an existing cluster
flags:
    --apiserver-advertise-address=: If the node should host a new control plane instance, the IP address the API Server will advertise it's listening on. If not set the default network interface will be used.
    --apiserver-bind-port=: If the node should host a new control plane instance, the port for the API Server to bind to.
    --certificate-key=: Use this key to decrypt the certificate secrets uploaded by init.
    --config=: Path to kubeadm config file.
    --control-plane: Create a new control plane instance on this node
    --cri-socket=: Path to the CRI socket to connect. If empty kubeadm will try to auto-detect this value; use this option only if you have more than one CRI installed or if you have non-standard CRI socket.
    --discovery-file=: For file-based discovery, a file or URL from which to load cluster information.
    --discovery-token-ca-cert-hash*=: 'For token-based discovery, validate that the root CA public key matches this hash (format: "<type>:<value>").'
    --discovery-token-unsafe-skip-ca-verification: For token-based discovery, allow joining without --discovery-token-ca-cert-hash pinning.
    --discovery-token=: For token-based discovery, the token used to validate cluster information fetched from the API server.
    --dry-run: Don't apply any changes; just output what would be done.
    --ignore-preflight-errors*=: 'A list of checks whose errors will be shown as warnings. Example: ''IsPrivilegedUser,Swap''. Value ''all'' ignores errors from all checks.'
    --node-name=: Specify the node name.
    --patches=: Path to a directory that contains files named "target[suffix][+patchtype].extension".
    --skip-phases*=: List of phases to be skipped
    --tls-bootstrap-token=: Specify the token used to temporarily authenticate with the Kubernetes Control Plane while joining the node.
    --token=: Use this token for both discovery-token and tls-bootstrap-token when those values are not provided.
documentation:
    command: '[AI] `kubeadm join` is a command used to add a new worker node to an existing Kubernetes cluster managed by Kubeadm. It installs and configures the necessary components, such as kubelet, kubeadm, and kube-proxy, on the new node to enable it to join the cluster. The command requires the node''s IP address or hostname, the cluster''s token, and the location of the certificate authority (CA) file for authentication. After running this command, the new node will register itself with the cluster and start working as a part of it.'
    flag:
        apiserver-advertise-address: '[AI] `kubeadm join --apiserver-advertise-address` is a command used to join a worker node to a Kubernetes cluster managed by `kubeadm`. The flag `--apiserver-advertise-address` specifies the IP address or hostname of the master node where the Kubernetes control plane components are running. This allows the worker node to discover and register with the correct master node when joining the cluster.'
        apiserver-bind-port: '[AI] `kubeadm join --apiserver-bind-port` is a command used when adding a new node to a Kubernetes cluster managed by Kubeadm. The option `--apiserver-bind-port` specifies the port number that the Kubernetes API server should listen on in the master node. This command enables communication between the joining node and the Kubernetes master, allowing the new node to register itself with the cluster and begin running workloads.'
        certificate-key: '[AI] `kubeadm join --certificate-key` is a command used to join a worker node to a Kubernetes cluster managed by `kubeadm`. The `--certificate-key` flag specifies the path to the private key file for the certificate authority (CA) that signed the cluster''s certification. This command allows the worker node to communicate securely with the cluster and establish trust between them. The node will validate the CA certificate against the one stored in its local trust store before joining the cluster.'
        config: '[AI] `kubeadm join` is a command-line tool used to join worker nodes to a Kubernetes cluster managed by `kubeadm`. The `--config` option specifies the path to a configuration file, which contains essential information such as the address of the master node and the token to be used for joining the node to the cluster. This file is typically generated during the initial setup of the master node using `kubeadm init` command. When you run `kubeadm join --config <path-to-config>`, it uses this information to add the worker node to the cluster, installing necessary Kubernetes components and configuring the node for joining the cluster.'
        control-plane: '[AI] `kubeadm join --control-plane` is a command used to join worker nodes to a Kubernetes cluster managed by `kubeadm` on a control plane node. This command sets up the node as a control plane node, which means it will become part of the master components managing and orchestrating the cluster. By default, this command installs and configures etcd, kube-apiserver, kube-controller-manager, and kube-scheduler components. The control plane node is responsible for maintaining the overall state of the cluster and coordinating the activities of other nodes.'
        cri-socket: '[AI] `kubeadm join --cri-socket` is a command used when joining worker nodes to a Kubernetes cluster managed by Kubeadm. The `--cri-socket` option specifies the Unix domain socket for the Container Runtime Interface (CRI) of the container runtime installed on the worker node. This information allows the join process to communicate with the CRI, enabling the worker node to run containers in the cluster.'
        discovery-file: '[AI] The `kubeadm join --discovery-file` command is used to join a worker node to a Kubernetes cluster that uses the Bootstrap Token Proving (BTP) or Token Rotation using a Discovery File method for node discovery and joining. This method allows you to avoid manually specifying the token and other join details in the `kubeadm join` command. Instead, the `discovery-file.yaml` contains all the necessary information about the cluster and the node''s join token. The file can be obtained from the master node or another worker node that already joined the cluster using `kubeadm init --print-join-config > discovery-file.yaml`. Once you have the discovery file, you can use it to add new nodes to your Kubernetes cluster by running `kubeadm join --discovery-file=<path-to-discovery-file> [--token <token>] [--client-cert <client-cert>] [--client-key <client-key>]`.'
        discovery-token: '[AI] `kubeadm join` is a command-line tool used to join worker nodes to a Kubernetes cluster. The option `--discovery-token` is used to provide a token for joining the cluster using the token-based discovery method. This method allows adding new nodes without managing certificates and configuring a static join command on each node. Instead, the master node generates a token that can be retrieved from the etcd server or from the `kubeadm` configuration file. The worker node then uses this token to join the cluster by providing it with the `--discovery-token` flag when running `kubeadm join`. This method simplifies cluster management, but it requires a secure way of sharing the token between nodes and ensuring that only authorized nodes can access it.'
        discovery-token-ca-cert-hash: '[AI] `kubeadm join --discovery-token-ca-cert-hash` is a command used in Kubernetes to join worker nodes to a cluster using token-based discovery. The flag `--discovery-token-ca-cert-hash` specifies the SHA256 hash value of the certificate for the CA (Certificate Authority) that signed the service account token used for joining the cluster. This information is required on the worker node to authenticate and join the cluster during the initialization process. The command line usually includes additional flags such as the IP address or hostname of the master node, the token itself, and other options depending on your setup.'
        discovery-token-unsafe-skip-ca-verification: '[AI] `kubeadm join` is a command used to join worker nodes to a Kubernetes cluster. The option `--discovery-token-unsafe-skip-ca-verification` is used when joining a node to a cluster using token discovery, but with this flag, the system will skip the CA certificate verification during the process. This can be risky as it bypasses an important security check, and thus it should only be used in trusted environments or for testing purposes. Always ensure that you take necessary precautions while using this option to avoid potential security risks.'
        dry-run: '[AI] `kubeadm join --dry-run` is a command used to simulate the process of joining a worker node to a Kubernetes cluster managed by `kubeadm`. It generates a join token and prints out the required `kubelet` configuration file without actually applying those changes to the system. This can be useful for verifying the correctness of the command before executing it in a production environment.'
        ignore-preflight-errors: '[AI] The `kubeadm join` command with the `--ignore-preflight-errors` flag is used to join a worker node to a Kubernetes cluster even if some pre-flight checks fail. These checks ensure that the node meets certain requirements, such as having an up-to-date OS or sufficient resources. Ignoring these errors can pose potential risks and may lead to unstable or insecure clusters. It is recommended to use this flag only when necessary and with caution.'
        node-name: '[AI] `kubeadm join` is a command used to add a new node to an existing Kubernetes cluster. The `--node-name` flag specifies the name or hostname of the new node that you want to join to the cluster. This flag is required when using `kubeadm join` to add a new node manually, and it allows you to identify the node uniquely within the cluster environment.'
        patches: |-
            [AI] `kubeadm join --patches` is a command-line option used when initializing a worker node in a Kubernetes cluster using `kubeadm`. This option allows you to apply custom patches, such as Kubernetes admissions plugins or other modifications, during the join process.

            Instead of using the standard image for the worker nodes, `--patches` takes a file containing one or more JSON-encoded patches, which are applied to the node's kubelet configuration and other relevant files. This enables you to customize the behavior of your cluster based on specific use cases or requirements.

            It is important to note that using this option requires careful handling and testing, as misconfigurations could result in instability or security vulnerabilities within your Kubernetes cluster.
        skip-phases: |-
            [AI] The `kubeadm join` command is used to add a new node to a Kubernetes cluster. The `--skip-phases` flag allows you to skip certain phases of the node joining process.

            By default, `kubeadm join` performs several tasks automatically during node setup:

            1. Initializes the system with required packages and tools.
            2. Configures the Kubernetes client and sets up `kubeconfig`.
            3. Registers the new node in the etcd cluster.
            4. Installs a Kubernetes control plane component on the new node, if it is set up as a master or worker node with control plane components.
            5. Joins the node to the Kubernetes cluster by updating its `kubelet` configuration.

            Using the `--skip-phases` flag lets you omit specific phases during node setup:

            1. To skip installing the control plane components on a worker node, use: `kubeadm join <master>:<port> --node-labels <labels> --token <token> --discovery-token-ca-cert-hash <sha256_hash> --skip-phases=init`
            2. To skip configuring the Kubernetes client and setting up `kubeconfig`, use: `kubeadm join <master>:<port> --node-labels <labels> --token <token> --discovery-token-ca-cert-hash <sha256_hash> --skip-phases=flannel` (assuming Flannel network plugin is being used)

            Using the `--skip-phases` flag can be useful when you want to perform additional customization or setup tasks on your node before joining it to the cluster. Be cautious with using this flag, as skipping critical phases could potentially lead to issues with your Kubernetes installation.
        tls-bootstrap-token: '[AI] `kubeadm join --tls-bootstrap-token` is a command used to join worker nodes to a Kubernetes cluster using a TLS bootstrap token for secure communication. The token is automatically generated when setting up a new master node with `kubeadm init`. Worker nodes use this token during the join process to authenticate and encrypt the connection between the nodes in the cluster. This ensures secure communication between the master and worker nodes and maintains the integrity of the Kubernetes cluster.'
        token: '[AI] `kubeadm join --token` is a command used to join worker nodes to a Kubernetes cluster that was initialized using `kubeadm init`. The command takes as an argument a token, which is a secure random string generated during the initialization of the master node. This token serves as an authentication mechanism allowing worker nodes to join the cluster safely and securely. Once joined, the worker nodes become part of the Kubernetes cluster and can be managed using tools like `kubectl`.'
