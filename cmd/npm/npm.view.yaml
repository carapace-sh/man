# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: view
description: View registry info
flags:
    --json: output as json
    --workspaces: Enable running a command in the context fo all workspaces
    -w, --workspace*=: Enable running a command in the context of the given workspace
documentation:
    command: '[AI] `npm view` is a command used in Node.js package management with npm (Node Package Manager). It''s used to display various metadata about a specific package, such as its version number, description, repository URL, or dependencies. You can use it to get quick information about a package without having to inspect the `package.json` file directly. The command is typically used in the terminal or command prompt, and takes the name of the package as an argument: `npm view <package-name>`.'
    flag:
        json: '[AI] `npm view` is a command-line tool provided by Node Package Manager (npm) for retrieving metadata about a package or its versions. The `--json` option is used to output the metadata in JSON format instead of the default tabular text format. So, running `npm view <package-name> --json` will display the requested package''s metadata as a JSON object.'
        workspace: '[AI] `npm view --workspace` is a command used in Node.js package management with npm (Node Package Manager). This command provides information about the current workspace, specifically about the workspaces property in the package.json file. It lists all the named workspaces and their respective versions within the scoped registry location defined in the root package.json file.'
        workspaces: '[AI] `npm view --workspaces` is a command used in Node.js package management with npm to retrieve information about the workspaces configuration in a monorepo (multi-package) project. It returns JSON data containing details about the root package and all the nested packages within the workspaces, including their names, versions, and dependencies. This command helps in understanding the relationships between packages in a complex project structure with multiple packages sharing common dependencies.'
