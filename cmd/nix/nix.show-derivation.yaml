# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: show-derivation
description: show the contents of a store derivation
group: utility
flags:
    --arg*=: Pass the value expr as the argument name to Nix functions
    --argstr*=: Pass the string string as the argument name to Nix functions
    --commit-lock-file: Commit changes to the flake's lock file
    --debug: Set the logging verbosity level to 'debug'
    --debugger: Start an interactive environment if evaluation fail
    --eval-store=: The Nix store to use for evaluations
    --impure: Allow access to mutable paths and repositories
    --inputs-from=: Use the inputs of the specified flake as registry entries
    --log-format=: Set the format of log output
    --no-registries: Don't allow lookups in the flake registries
    --no-update-lock-file: Do not allow any updates to the flake's lock file
    --no-write-lock-file: Do not write the flake's newly generated lock file
    --override-flake=: Override the flake registries, redirecting original-ref to resolved-ref
    --override-input=: Override a specific flake input (e.g. dwarffs/nixpkgs)
    --quiet: Decrease the logging verbosity level
    --recreate-lock-file: Recreate the flake's lock file from scratch
    --update-input=: Update a specific flake input (ignoring its previous entry in the lock file
    -I, --include: Add path to the list of locations used to look up <...> file names
    -L, --print-build-logs: Print full build logs on standard error
    -r, --recursive: Include the dependencies of the specified derivations
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] `nix show-derivation` is a Nix package manager command used to display detailed information about a specific derived output or build artifact in a Nix expression or configuration file. It takes the path to a derivation as an argument and prints out various details such as inputs, build outputs, source code URLs, and build commands. This command is helpful for debugging and understanding the dependencies and build process of Nix packages.'
    flag:
        arg: |-
            [AI] The `nix-show-derivation --arg` command is a utility from Nix, a package manager for Linux and other Unix systems. It's used to display the build steps and dependencies of a specific Nix expression or package.

            The command takes an argument which represents the name or path of the expression or package. For example: `nix-show-derivation myPackage`. This will display detailed information about how that package is built, including its input files, build outputs, and dependencies.

            The `--arg` option is used to pass this argument to a Nix expression when it's being called as a command. So in summary, `nix-show-derivation --arg myPackage` will display the build information for the package named 'myPackage'.
        argstr: '[AI] `nix-show-derivation` is a command from Nix, a package manager for Linux and other Unix systems. The `--argstr` option is used to pass arguments as strings to the derivation being displayed. With this option, you can see the build and configuration details of a specific Nix derivation along with the passed arguments. This can be useful for debugging or understanding how a particular package is built in the Nix environment.'
        commit-lock-file: '[AI] `nix-show-derivation` is a command provided by Nix, a package manager for Linux and other systems. The `--commit-lock-file` option tells the command to display information about the Nix expressions that build or modify a specific file or files, along with their corresponding lockfiles. These lockfiles ensure that multiple builds do not overwrite each other''s outputs when using parallel builds or multiple developers on a project. By showing the derivation and associated lockfile information, users can understand how changes to their codebase are being built within Nix''s managed environment.'
        debug: '[AI] `nix-show-derivation --debug` is a command from Nix, a package manager for Linux and other Unix systems. The `--debug` option enables detailed debug output while using the `nix-show-derivation` command. This command is used to display the build and derivation details of a specific package or expression in the Nix expressions language. It helps developers understand the dependencies, build inputs, and other relevant information related to the package or expression. By providing this debug output, it can aid in troubleshooting, auditing, and learning more about how Nix manages packages and builds them from their sources.'
        debugger: '[AI] `nix-show-derivation --debugger` is a command from Nix, a package manager for Linux and other Unix systems. This command displays detailed build and dependency information for a specific Nix expression or package in a debuggable format. The output includes a tree representation of the build graph, which can be useful for understanding complex dependencies and troubleshooting build issues. The `--debugger` flag enables advanced features like interactive exploration and manipulation of the build graph using external tools such as GDB or LLDB.'
        eval-store: '[AI] The `nix-show-derivation --eval-store` command is a part of Nix, a package manager for Linux and other Unix systems. This command displays information about the derivation tree of a specific Nix expression or configuration, evaluated against the current Nix expression evaluation store (also known as the build store). The store holds the results of previous evaluations, allowing the system to efficiently reuse previously built packages instead of rebuilding them from source every time. By using `--eval-store`, the command shows how those previously built packages relate to the given expression or configuration.'
        impure: |-
            [AI] The `nix-show-derivation --impure` command is a part of Nix, a package manager for Linux and other Unix systems. It generates a human-readable derivation description for an Nix expression or build input in an impure mode.

            An Nix derivation describes the construction process of a software package or system from its sources, dependencies, and configuration settings. In this impure mode, the command displays all the intermediate steps and commands used to construct the derivation, including those not explicitly stated in the original Nix expression or input file. This information can be useful for debugging, understanding the build process, or modifying the construction steps manually.
        include: '[AI] `nix-show-derivation --include` is a command from Nix, a package manager for Linux and other Unix systems. This command displays the build derivation of a specific package, including its dependencies and their respective build derivations in a tree format. The `--include` option expands the output to include all indirect dependencies as well, making it useful for understanding the complete build graph for a given package.'
        inputs-from: '[AI] `nix-show-derivation` is a command in Nix Package Manager used to display build and derivation information for a specific package or project. The option `--inputs-from` specifies that the input files for the derivation should be read from a given Nix expression instead of the default file `default.nix`. This can be useful when working with complex builds, where inputs come from multiple sources or need to be computed dynamically. By providing an expression as argument, you control precisely which files are used in the build process.'
        log-format: |-
            [AI] The `nix-show-derivation` command is a utility in Nix, a package manager for Linux and other operating systems. It's used to display metadata about a specific Nix expression or derivation (a build configuration). The `--log-format` option specifies the format of the output logs.

            With no log format specified, `nix-show-derivation` will print out the derivation in a human-readable format by default. However, when using `--log-format`, you can request the logs to be outputted in different formats such as JSON or YAML for easier machine processing. This option allows more control and flexibility over the log output format, enabling better integration with other tools or workflows.
        no-registries: |-
            [AI] `nix-show-derivation` is a command from Nix, a package manager for Linux and other Unix systems. The command `nix show-derivation --no-registries` displays information about a specific derived Nix expression, which is the output of building or modifying an existing configuration.

            The `--no-registries` option disables the consultation of remote Nixpkgs registry and other user registries while displaying the derivation's details. This means that only local information about the derivation will be shown, without any external dependencies from online repositories.
        no-update-lock-file: |-
            [AI] `nix-show-derivation` is a command from Nix, a package manager for Linux and other systems. The `--no-update-lock-file` flag is an option that can be passed to this command.

            When using `nix-show-derivation` without any flags, it displays information about the build derivations of a specific Nix expression or package. By default, `nix-show-derivation` updates the lock file before showing the derivation information to ensure consistency between the state of the system and the information displayed.

            However, when using the `--no-update-lock-file` flag, this update step is skipped. This can be useful when working offline or when dealing with unstable systems, as it allows you to view the derivation information without requiring an up-to-date lock file.

            In summary, `nix-show-derivation --no-update-lock-file` is a command used in Nix that displays derivation information without updating the lock file first. This can be useful for offline work or when dealing with unstable systems.
        no-write-lock-file: |-
            [AI] The `nix-show-derivation` command is a utility in Nix, a package manager for Linux and other Unix systems. It's used to display information about the build trees of Nix expressions, which are defined using Nix language.

            The option `--no-write-lock-file` prevents `nix-show-derivation` from creating or updating a write lock file when it is run. This lock file is used by other instances of `nix-build` and related commands to prevent concurrent builds or queries on the same expression. Using `--no-write-lock-file` can speed up repeated calls to `nix-show-derivation`, but it may also lead to conflicts if multiple processes try to access the same build tree at the same time.
        override-flake: '[AI] `nix-build` or `nix-expression` with the flag `--show-derivation` displays the build and derivation tree of a Nix expression. The flag `--override-flake` tells Nix to override the flake configuration (if any) in the current directory, allowing you to test builds against a specific version of the project''s dependencies or customize them. This can be useful for debugging issues with your project and its dependencies.'
        override-input: |-
            [AI] The `nix-build` or `nix-command` command with the option `--show-derivation` followed by `nix show-derivation` displays information about the build derivations in the Nix expression language's output format.

            The `--override-input` option modifies the inputs of a specific build derivative. When you provide a path to an input file or its hash, it forces the build to use that specific version instead of the default one defined in the package configuration. This can be useful for testing custom changes without affecting the original package.
        print-build-logs: '[AI] `nix show-derivation --print-build-logs` is a Nix command used to display detailed build logs for a specific derived output in a Nix expression or configuration. The command takes the path to the derivation as its argument and outputs the build logs, which include the standard error and output streams of the build process. This can be useful for debugging build issues or gaining insight into the build process itself.'
        quiet: '[AI] `nix-show-derivation` is a command provided by Nix, a package manager for Linux and other systems. The `--quiet` option is used to suppress output from the command, making it run with minimal or no human-readable messages. The main purpose of using `nix-show-derivation --quiet` is to silently display build derivations (intermediates or dependencies) in Nix builds without any extraneous information.'
        recreate-lock-file: '[AI] `nix-show-derivation` is a command from Nix, a package manager for Linux and other Unix systems. The `--recreate-lock-file` option tells the command to create or update the Nix expression lock file. This file ensures that multiple processes building the same Nix expression do not clobber each other''s build artifacts. When using this option, `nix-show-derivation` will display detailed information about the derived objects in the Nix expression and their corresponding build inputs.'
        recursive: |-
            [AI] `nix-show-derivation` is a command from Nix, a powerful package manager for Linux and other Unix systems. The command with the options `--recursive` shows the build and derivation information of a specific package or an entire project recursively.

            In simpler terms, it generates a human-readable output describing how each component in a project is built from its sources. This can be helpful for understanding complex builds, debugging issues, and getting a better grasp of the dependencies involved.
        update-input: |-
            [AI] The `nix-show-derivation --update-input` command is a utility provided by Nix, a package manager for Linux and other Unix systems. This command displays the build derivations for a specific package and updates the input files of those derivations if they have changed.

            A derivation in Nix represents a build process and its associated outputs. When you build a package with Nix, it creates a derivation tree that records all the steps involved in building the package and their dependencies.

            The `--update-input` flag tells the command to check whether the input files for the derivations have been modified since they were last built. If so, the command will update the build derivations accordingly. This ensures that Nix rebuilds the affected packages when their input files change, which helps maintain a consistent and up-to-date system.
        verbose: '[AI] The `nix-show-derivation --verbose` command is a Nix expression evaluation tool used to display detailed build derivation information for a specific package or expression in the Nix Package Manager. When run with the `--verbose` flag, it outputs extensive information about the dependency graph, including the full path of each build input and output file, the commands used to construct the derivations, and the environment variables set during the build process. This level of detail can be helpful for debugging build issues or understanding complex dependencies in a Nix environment.'
