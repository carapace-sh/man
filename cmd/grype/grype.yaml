# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: grype [IMAGE]
description: A vulnerability scanner for container images, filesystems, and SBOMs
flags:
    --add-cpes-if-none: generate CPEs for packages with no CPE data
    --by-cve: orient results by CVE instead of the original vulnerability ID when possible
    --distro=: 'distro to match against in the format: <distro>:<version>'
    --exclude*=: exclude paths from being scanned using a glob expression
    --file=: file to write the report output to (default is STDOUT)
    --only-fixed: ignore matches for vulnerabilities that are not fixed
    --only-notfixed: ignore matches for vulnerabilities that are fixed
    --platform=: an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux')
    --show-suppressed: show suppressed/ignored vulnerabilities in the output (only supported with table output format)
    -f, --fail-on=: set the return code to 1 if a vulnerability is found with a severity >= the given severity
    -o, --output=: report output formatter
    -s, --scope=: selection of layers to analyze
    -t, --template=: specify the path to a Go template file (requires 'template' output to be selected)
persistentflags:
    -c, --config=: application config file
    -q, --quiet: suppress all logging output
    -v, --verbose*: increase verbosity
documentation:
    command: '[AI] "Grype" is a static application security testing tool written in Go language. It performs vulnerability scanning on container images and Dockerfiles, checking them against a curated set of CVEs and security best practices. Grype provides an easy-to-use command line interface for integrating security checks into continuous integration and deployment pipelines.'
    flag:
        add-cpes-if-none: '[AI] The `--add-cpes-if-none` flag in the Grype vulnerability scanning tool is used to automatically add Common Vulnerabilities and Exposures (CPE) definitions if they do not already exist in the local CPE database during a scan. This option can help ensure that all vulnerabilities are correctly identified during the scan, even if new or previously unseen CVEs are encountered. It enhances the comprehensiveness of Grype''s scanning capabilities by extending its knowledge base with missing CPE definitions.'
        by-cve: '[AI] The `grype --by-cve` command is a feature of Grype, an open-source tool for analyzing container images for vulnerabilities using Common Vulnerabilities and Exposures (CVE) database. This specific command returns the analysis report showing only vulnerabilities with their corresponding CVE identifiers. It helps security teams to quickly identify and prioritize known vulnerabilities in their container image inventories based on the widely adopted CVE standard.'
        distro: '[AI] `grype --distro` is a command-line tool used in the Linux security ecosystem for analyzing container images and VMs for known vulnerabilities, misconfigurations, and other cybersecurity risks. The `--distro` flag is specifically used to filter the output of Grype based on a particular Linux distribution. This allows users to focus on vulnerabilities that are relevant to their specific distribution, reducing noise and improving the effectiveness of security scans.'
        exclude: '[AI] `grype --exclude` is a command-line option used with Grype, an open-source vulnerability scanner for container images. This option allows excluding specific directories or files from being scanned during the vulnerability assessment process. By doing this, it reduces the overall scan time and focuses only on the relevant parts of the image, potentially improving scan results accuracy while minimizing unnecessary findings.'
        fail-on: '[AI] The `--fail-on` flag for the `grype` security scanning tool indicates that any detected vulnerabilities or errors should cause the scan to fail immediately. This option is useful when running automated pipelines or continuous integration workflows, as it ensures that known security issues are addressed before further processing or deployment of code occurs.'
        file: '[AI] The `--file` flag for the `grype` tool is used to specify a file or a list of files to be scanned for security vulnerabilities. When this option is provided, grype reads the specified files and checks them against its database of known vulnerabilities to report any potential issues. This can be useful for analyzing individual files or a small set of files as part of a broader security assessment.'
        only-fixed: '[AI] `grype` is a static analysis tool for container images. The flag `--only-fix` or `-f` instructs it to only show the vulnerabilities that have available fixes, and apply those fixes if possible. This flag can help streamline the process of addressing known security issues in container images.'
        only-notfixed: '[AI] The `grype --only-notfixed` command in Grype, a vulnerability scanner for container images, returns information about unresolved vulnerabilities in an image or scan result. This command filters out any already addressed (i.e., fixed) vulnerabilities and only shows the ones that still require attention.'
        output: '[AI] The `--output` flag in Grype, a vulnerability scanner for container images, specifies the output format for the scan results. It can be set to various formats such as JSON, YAML, or STDOUT (for human-readable output). When using this flag, the scan output will be generated in the specified format instead of the default one. For example, `grype image myimage --output json > output.json` would save the scan results in a JSON file named `output.json`.'
        platform: '[AI] `grype --platform` is a command-line flag used with Grype, an open-source vulnerability scanner for container images and OCI artifacts. This flag specifies the target platform of the image or artifact to be scanned. It helps Grype to filter the vulnerabilities based on the platform, ensuring that only the relevant vulnerabilities are reported for the specified platform. This can help reduce false positives and make the remediation process more efficient.'
        scope: '[AI] The `grype --scope` flag is used with Grype, an open-source vulnerability scanner for container images. It specifies the Kubernetes resource or namespace scope for the scan. A valid scope can be a Kubernetes resource like `pod`, `deployment`, or `namespace`. Scanning within a specific scope limits the analysis to only those resources and their descendants, reducing false positives and improving scan efficiency.'
        show-suppressed: '[AI] `grype` is a static analysis tool for container images. The `--show-suppressed` flag modifies the output of `grype analyze` by displaying suppressed results, which are issues that have been marked as known false positives or benign by the Grype ruleset but still detected during the scan. This flag can be useful when investigating specific issues and wanting to see all detected vulnerabilities, even those that are considered non-critical.'
        template: '[AI] `grype --template` is a command used in Grype, an open-source vulnerability scanner for container images. This specific usage of the command generates or outputs a template that can be used to customize Grype reports. The template is written using Go''s text/template package and allows users to define the structure and format of their desired report output.'
