# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gc
description: perform garbage collection on a Nix store
flags:
    --debug: Set the logging verbosity level to 'debug'
    --dry-run: Show what this command would do without doing it
    --log-format=: Set the format of log output
    --max=: Stop after freeing n bytes of disk space
    --quiet: Decrease the logging verbosity level
    -L, --print-build-logs: Print full build logs on standard error
    -v, --verbose: Increase the logging verbosity level
documentation:
    command: '[AI] The `nix store gc` command is used to trigger Garbage Collection (GC) in Nix, a package manager for Linux and other Unix systems. The GC helps manage the Nix store, which is a large repository of packages and their dependencies, by removing unused or unreachable data. This process can help save disk space and improve performance over time.'
    flag:
        debug: '[AI] The `nix store gc --debug` command is a garbage collection operation for Nix, a package manager for Linux and other Unix systems. It triggers a low-level garbage collection process in the background Nix expression evaluation cache (store), which helps to keep disk space usage at an optimal level by removing unused or unreachable data. The `--debug` flag enables detailed debugging information during this operation, allowing users to troubleshoot any issues that might arise.'
        dry-run: '[AI] The `nix store gc --dry-run` command is a Nix expression that triggers a dry run of the Nix Store garbage collection process. It does not actually perform any deletions, but instead displays what files would be deleted if the command were executed without the `--dry-run` flag. This can be useful for reviewing proposed changes before executing the garbage collection in production.'
        log-format: '[AI] `nix store gc` is a command from the Nix Package Manager used to clean up unused data in the Nix store, which is where Nix stores built packages. The option `--log-format` determines the format of the output logged during the garbage collection process. By default, it''s verbose but you can change it to JSON or none by using ''--log-format=json'' or ''--log-format=none'', respectively. This command helps manage disk space and improve performance by removing old data no longer in use.'
        max: '[AI] `nix store gc --max` is a command in Nix, a package manager for Linux and other systems. This command triggers a garbage collection process in the Nix store, which is the central repository of packages managed by Nix. The `--max` flag specifies that Nix should perform a full garbage collection, meaning it will delete any unused or unreachable data, resulting in a more efficient and cleaner store. This operation can take significant time and resources, but ensures optimal performance for future package installations.'
        print-build-logs: '[AI] `nix store gc --print-build-logs` is a command in Nix, a package manager for Linux and other Unix systems. This command initiates a garbage collection process to clean up unused data in the Nix store, which is the central repository for all Nix packages. The `--print-build-logs` option instructs Nix to print the build logs of the garbage collected packages to the terminal. This can be useful for debugging or tracking down issues related to package builds.'
        quiet: '[AI] The `nix store gc --quiet` command is a Nix expression that runs the Garbage Collector (GC) for the Nix package manager in quiet mode. The GC process helps manage the Nix store, which is where all installed packages and their derivations are stored. By running it with the `--quiet` flag, the output of the command is suppressed, making the operation run in the background without any visible feedback.'
        verbose: |-
            [AI] `nix store gc --verbose` is a command used in Nix, a package manager for Linux and other Unix systems. This command triggers a garbage collection (GC) process in the Nix store, which is a central part of the Nix packaging system.

            The Nix store stores all the built packages and their dependencies as immutable files. Over time, unnecessary data accumulates due to failed builds or other reasons. To free up disk space and maintain efficiency, it's essential to periodically run garbage collection in the Nix store.

            The `--verbose` flag makes the GC process print more detailed information about which stores are being deleted during the collection. This can be helpful for debugging and understanding what files are being removed from the Nix store.
