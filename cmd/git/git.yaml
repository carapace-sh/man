# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: git
description: the stupid content tracker
flags:
    --bare: use $PWD as repository
    --exec-path=: path containing core git-programs
    --git-dir=: path to repository
    --help: display help message
    --html-path: display path to HTML documentation and exit
    --info-path: print the path where the info files are installed and exit
    --list-cmds?: list commands
    --literal-pathspecs: treat pathspecs literally, rather than as glob patterns
    --man-path: print the manpath for the man pages for this version of Git and exit
    --namespace=: set the Git namespace
    --no-replace-objects: do not use replacement refs to replace git objects
    --version: display version information
    --work-tree=: path to working tree
    -C=: run as if git was started in given path
    -P, --no-pager: don't pipe git output into a pager
    -c=: pass configuration parameter to command
    -p, --paginate: pipe output into a pager
documentation:
    command: |-
        [AI] `git` is a popular version control system for managing and tracking changes in source code or other types of files. It allows multiple people to collaborate on a project by merging their individual changes, maintaining a history of all modifications, and facilitating rollbacks if necessary. Key features include:

        - Add (stage): prepare files to be committed
        - Commit: save changes permanently
        - Push: send commits to a remote repository
        - Pull: get updates from a remote repository
        - Branch: create new lines of development
        - Merge: combine changes from different branches or commits
        - Status: view the current state of files and staging area
        - Log: display commit history.
    flag:
        C: '[AI] The `git -C <path-to-repo>` command is used to change the current working directory of Git to a new repository without checking out any branch or committing any changes. This is useful when working with multiple repositories and wanting to perform certain Git operations, like fetching or resetting, on a specific repository while keeping the working directory of another repository unaltered. It''s essential to note that this command does not affect the system''s working directory but only the Git working directory, so the files outside the Git-managed area remain unchanged.'
        bare: |-
            [AI] `git --bare` is a Git command used to initialize a bare repository, which is a Git repository without a working directory. Bare repositories are often used for creating and managing remote repositories on a server or for setting up Git servers like GitLab or GitHub.

            When you run `git init --bare` in a directory, it initializes the Git repository structure with only the necessary files such as `HEAD`, `refs`, and `hooks`, without creating a working directory. This makes the repository read-only for clients that clone it, since they don't have write permissions to the working directory.

            Bare repositories are commonly used in production environments where you want to secure your codebase or restrict access to specific users.
        c: '[AI] `git config` is a Git command used to set or configure various options and variables for a local or system-wide Git installation. The `-c` option is used with `git config` to modify or create configuration files, specifically the core.autocrlf file that handles automatic line ending conversions between Windows and Unix systems. For example, you can set it to true (auto) or false (no auto) for different repositories. It doesn''t change any currently checked-out files or affect any ongoing Git operations directly. The main goal is to configure your Git environment for better compatibility with specific projects or operating systems.'
        exec-path: '[AI] `git --exec-path` is a Git command that returns the path to the executable used by Git. In other words, it provides the location of the Git executable in the file system. This information can be useful for scripts or configurations that need to reference the Git executable directly. For example, you might want to run a script using `git --exec-path` to ensure that it''s always using the latest version of Git installed on the system.'
        git-dir: '[AI] The `git --git-dir` command is a Git utility that returns the filesystem path to the Git directory (.git), which contains all of the metadata and object database for a Git repository. This command can be useful when working with nested repositories or when setting up scripts that require access to the Git directory structure. It does not affect the current working directory or branches, only returns the location of the .git directory.'
        help: '[AI] `git --help` is a command used in Git version control system to display detailed help information about Git and its various commands. When executed, it prints out a comprehensive list of all Git commands with brief explanations of what each one does. This command is helpful for users who want to quickly learn about Git or need a refresher on specific Git functions. It provides an interactive experience, allowing users to type the name of a Git command followed by `--help` for more detailed information about that specific command.'
        html-path: '[AI] The `git --html-path` command is not a standard Git command. However, some Git extensions or plugins might use this option. It''s used to specify the path to an HTML file that will be used as a template for generating HTML documents from Git data. This can be useful for creating web-based interfaces for Git repositories or tools that need to display Git information in an HTML format. When you run this command, you would typically provide a file path as the argument. For example: `git --html-path=path/to/template.html`.'
        info-path: '[AI] The `git --info-path` command is used to display the file path of Git''s information directory, which contains files like the `config` file and the `refs` directory, among others. This directory holds various metadata related to a Git repository, including information about the currently checked out branches and remote repositories. The output of this command is simply the file path of this directory.'
        list-cmds: '[AI] `git --list-commands` is a Git command that displays a list of available Git sub-commands and aliases. It provides a quick reference for users to check what actions they can perform with Git, without having to remember or search through the documentation. The output shows the command name followed by its corresponding alias (if defined), along with a brief description.'
        literal-pathspecs: |-
            [AI] `git --literal-pathspecs` is a Git command line option that affects how Git interprets pathspecs (specifications of file paths or patterns) in certain Git commands like `git checkout` and `git restore`.

            When this flag is used, Git treats pathspecs as literal strings instead of expanding them based on the current working directory or other context. This means that the exact specified files or directories will be operated on, regardless of their location relative to the working directory.

            In simple terms, `git --literal-pathspecs` is used to prevent Git from resolving pathspecs based on context and ensures that only explicitly mentioned files or directories are affected by the command.
        man-path: '[AI] The `git --man-path` is an option used in Git, a popular version control system. It sets the path to the directory where Git will look for its manual pages (`.man` files) when using commands like `git help` or `git --help`. For example, if you set `git --man-path=/usr/local/share/man`, Git will search for manual pages in that directory. This can be useful when you have custom manual pages installed in a non-standard location.'
        namespace: '[AI] The `git --namespace` command is not a valid Git command. The `--namespace` option is specific to Kubernetes and other container orchestration platforms, which use Gitops workflows for managing infrastructure as code. In this context, the `--namespace` flag specifies the namespace in a Git repository that contains the Kubernetes manifests. This allows users to manage multiple environments (namespaces) using a single Git repository. For Git commands related to version control and source code management with Git, you should refer to other flags and commands such as `git clone`, `git push`, or `git pull`.'
        no-pager: '[AI] The `git --no-pager` command is used to disable the pager feature in Git. When you run a Git command that generates output longer than your terminal window, by default, Git uses a pager (like Less or More) to scroll through the output. However, if you want to see the entire output in the terminal without using a pager, you can use `git --no-pager`. This option instructs Git not to use a pager when displaying long outputs.'
        no-replace-objects: |-
            [AI] The `git --no-replace-objects` command is a Git configuration option used during cloning or pulling repositories over Network File System (NFS) or other similar file systems that may have poor performance or data integrity issues when dealing with large binary files, such as Git objects.

            By using this flag, Git will not replace existing objects in the local repository with their delta-compressed counterparts during the fetch or pull operation. Instead, it will keep the full versions of all objects. This can help ensure data integrity and prevent potential data loss issues that may arise from the file system's poor handling of large binary files. However, this comes at the cost of increased disk space usage, as the same objects are stored multiple times with different hashes.
        paginate: '[AI] `git --paginate` is a Git command used to display long output, such as log messages or diff changes, in a more manageable format by sending each page to a new file. When you run `git log --paginate`, for example, instead of seeing one very long scrolling terminal output, you''ll get multiple files with the extension ''.txt'', each containing a single page of output. This makes it easier to review and navigate through the information.'
        version: |-
            [AI] The `git --version` command is used to display the version information of Git, which is a popular distributed version control system. When you run this command in your terminal or command prompt, Git will return a message that includes its version number, compilation date, and operating system it was built for. For example:

            ```
            git version 2.31.0
            Commit date: Wed Sep 28 15:14:32 2022 -0700
            Build date: Thu Oct 6 11:32:32 2022
            ```

            This output tells you that the Git version being used is 2.31.0, and it was last compiled on September 28, 2022, and built on October 6, 2022. The operating system information is not shown by default but can be obtained using `git --version --help` or other options.
        work-tree: |-
            [AI] The `git work-tree` command is used to show or manage the working directories associated with a Git repository. Each branch or commit in Git corresponds to a specific tree state and a working directory where you can make modifications.

            With the `git work-tree` command, you can create, remove, or switch between different working directories linked to branches or commits within your repository. It is particularly useful when dealing with large or distributed projects where multiple working directories are required. For example, `git work-tree add <branch> <path/to/working/directory>` adds a new working directory for the specified branch at the given path, while `git work-tree list` shows a list of all current working directories and their associated branches or commits.
