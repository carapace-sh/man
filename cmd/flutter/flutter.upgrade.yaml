# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: upgrade
description: Upgrade your copy of Flutter
flags:
    --verify-only: Checks for any new flutter updates, without actually fetching them.
    -f, --force: Force upgrade the flutter branch, potentially discarding local changes.
    -h, --help: Print this usage information.
documentation:
    command: '[AI] `flutter upgrade` is a command used in Flutter development to update the Flutter and Dart dependencies in your project to their latest versions. It automatically manages the required updates in your `pubspec.yaml` file, and it''s recommended to use this command regularly to keep up with the latest features and bug fixes. Running `flutter upgrade` also installs any new dependencies that might be added.'
    flag:
        force: '[AI] `flutter upgrade --force` is a command used in Flutter development to update the project''s dependencies and the Flutter engine to their latest versions forcefully. It bypasses any version compatibility checks that might prevent the update, potentially resolving dependency conflicts manually. It''s useful when dealing with outdated packages or when encountering issues during the standard upgrade process. However, using this command should be done cautiously as it may introduce breaking changes that require manual adjustments in your code.'
        help: '[AI] `flutter upgrade --help` is a command used in the Flutter framework for Dart programming language. It upgrades the current Flutter project to the latest stable or specified channel version. The `--help` option displays detailed usage information about this specific command. This includes the syntax, available options, and their descriptions. Using `--help` ensures that you have the correct information to properly execute the command for your intended upgrade scenario.'
        verify-only: '[AI] `flutter upgrade --verify-only` is a command used in the Flutter development framework. It performs a check for available upgrades for your current project without actually applying those upgrades or making any changes to your codebase. This is useful when you want to review the list of pending package updates before deciding whether to apply them, ensuring compatibility and minimizing potential risks to your project.'
