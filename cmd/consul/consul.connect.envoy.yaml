# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: envoy
description: Runs or Configures Envoy as a Connect proxy
flags:
    --address=: LAN address to advertise in the gateway service registration
    --admin-access-log-path=: The path to write the access log for the administration server.
    --admin-bind=: The address:port to start envoy's admin server on.
    --bind-address=: Bind address to use instead of the default binding rules given as `<name>=<ip>:<port>` pairs.
    --bootstrap: Generate the bootstrap.json but don't exec envoy
    --ca-file=: Path to a CA file to use for TLS when communicating with Consul.
    --ca-path=: Path to a directory of CA certificates to use for TLS when communicating with Consul.
    --client-cert=: Path to a client cert file to use for TLS when 'verify_incoming' is enabled.
    --client-key=: Path to a client key file to use for TLS when 'verify_incoming' is enabled.
    --deregister-after-critical=: The amount of time the gateway services health check can be failing before being deregistered
    --envoy-binary=: The full path to the envoy binary to run.
    --envoy-version=: Sets the envoy-version that the envoy binary has.
    --expose-servers: Expose the servers for WAN federation via this mesh gateway
    --gateway=: The type of gateway to register.
    --grpc-addr=: Set the agent's gRPC address and port (in http(s)://host:port format).
    --http-addr=: The `address` and port of the Consul HTTP agent.
    --mesh-gateway: Configure Envoy as a Mesh Gateway.
    --namespace=: Specifies the namespace to query.
    --no-central-config: Require that the command run on the same agent as the proxy will.
    --omit-deprecated-tags: Disable deprecated tags.
    --proxy-id=: The proxy's ID on the local agent.
    --register: Register a new gateway service before configuring and starting Envoy
    --service=: Service name to use for the registration
    --sidecar-for=: The ID of a service instance on the local agent that this proxy should become a sidecar for.
    --tls-server-name=: The server name to use as the SNI host when connecting via TLS.
    --token-file=: File containing the ACL token to use in the request.
    --token=: ACL token to use in the request.
    --wan-address=: WAN address to advertise in the gateway service registration.
documentation:
    command: '[AI] `consul connect envoy` is a command used with Consul, a Connect service mesh, to configure and deploy Envoy as a sidecar proxy in a Kubernetes environment. This command sets up the Connect proxy, which manages traffic between services using Envoy as the data plane, enabling features like traffic management, security, and observability.'
    flag:
        address: '[AI] The `consul connect envoy --address` command is used in the Consul service mesh to configure Envoy, the data plane proxy, with its own listening address. When running Envoy as a sidecar or standalone process within a Consul-managed cluster, this flag sets the IP address and port number for Envoy to listen on and receive traffic to be forwarded to other services in the mesh. This helps ensure proper communication between services and enables features like automatic retries, circuit breaking, and traffic management provided by the Consul service mesh.'
        admin-access-log-path: '[AI] The `--admin-access-log-path` flag in the `consul connect envoy` command is used to specify the file path where Consul Connect''s Envoy proxy stores its admin access logs. Admin access logs record events related to administrative actions performed on the Envoy proxy, such as creating or modifying listeners or filters. The logs provide valuable information for troubleshooting and auditing purposes.'
        admin-bind: '[AI] The `consul connect envoy --admin-bind` flag is used with Consul, a distributed computing platform for service discovery, configuration, and orchestration. With this flag, Envoy, a high-performance C++ distributed proxy server, is run as an admin process within the Consul Connect framework. This setup enables Envoy to be managed by Consul and allows for fine-grained traffic control and security policies through the Consul service mesh.'
        bind-address: '[AI] The `consul connect envoy --bind-address` flag is used when configuring Consul Connect, a service mesh solution from Hashicorp, to run Envoy as a sidecar proxy. The `--bind-address` flag specifies the IP address and port number where Envoy should listen for incoming traffic. This allows you to control how Envoy is accessed by other services in your network and helps ensure proper routing of traffic within your service mesh.'
        bootstrap: |-
            [AI] The `consul connect envoy --bootstrap` command is used to configure and deploy Envoy as a sidecar proxy in a Consul service mesh using the Consul Connect tooling.

            The `--bootstrap` flag indicates that this is the initial deployment of the proxy, and Consul will generate the necessary encryption keys and certificates for secure communication between services. The Envoy proxy is configured to communicate with the Consul agent for service discovery, traffic management, and telemetry reporting.

            This command sets up the initial state of the Envoy proxy within a containerized environment, allowing you to easily connect your services in a Consul-managed service mesh.
        ca-file: '[AI] `consul connect envoy --ca-file` is a command used to configure Envoy, a popular service proxy and L3-L7 data plane, in a Consul service mesh environment. The `--ca-file` flag specifies the location of a CA (Certificate Authority) file for secure communication between Envoy and the Consul server. This ensures that only trusted entities can join and communicate within the Consul service mesh.'
        ca-path: '[AI] The `consul connect envoy --ca-path` flag is used with Consul Connect, a service mesh solution from Hashicorp. It specifies the path to a directory containing the CA (Certificate Authority) certificates for the Envoy proxy, which Consul Connect uses for secure communication between services in the mesh. The `--ca-path` option ensures that the Envoy proxy trusts only the Certificate Authorities specified in the provided directory.'
        client-cert: |-
            [AI] The `consul connect envoy --client-cert` flag is used with Consul, a popular service discovery and configuration management tool. This specific flag is related to the Envoy proxy, which is used for intermediary networking in the Consul service mesh.

            The flag instructs Consul to generate and provide an SSL client certificate for Envoy during the registration of a new sidecar proxy. This certificate ensures secure communication between the proxy and the Consul server as well as with other services within the service mesh. The client-certificate is automatically rotated and renewed by Consul, ensuring secure communication at all times.
        client-key: '[AI] The `--client-key` flag in the `consul connect envoy` command is used to specify the path to a client TLS certificate file when creating or configuring an Envoy proxy as a Consul Connect service mesh sidecar. This certificate file is used for secure communication between the Envoy proxy and the Consul Connect server. By providing this flag, you ensure that the Envoy proxy can authenticate itself to the Consul Connect server and participate in the service mesh network securely.'
        deregister-after-critical: '[AI] The `consul connect envoy --deregister-after-critical` flag is used with the Consul Connect Envoy service mesh component. It configures Envoy to deregister a proxy from the Consul service registry once its health check status falls below "critical". This helps ensure that unhealthy proxies are removed from the service discovery and traffic management, improving overall system reliability and resilience.'
        envoy-binary: |-
            [AI] The `consul connect envoy --envoy-binary` is a command used in the Consul service discovery and connecting microservices ecosystem. This command sets up Envoy as a sidecar proxy with Consul Connect.

            Here's a brief explanation of each part:

            1. `consul connect`: A feature in Consul that enables communication between services through a mesh network, which can be configured dynamically without needing to modify infrastructure or application code.

            2. `envoy`: An open-source edge and service proxy designed for both handling proxying of upstream services as well as providing extensive filtering, interception, and transformation capabilities via its powerful filter chain model.

            3. `--envoy-binary`: This option indicates that the Envoy binary is provided locally, instead of downloading it from a remote source during the installation process. The path to this binary should be available in your environment.
        envoy-version: '[AI] The `consul connect envoy --envoy-version` command is used to configure and deploy Envoy as a sidecar proxy in a Consul Connect service mesh. The `--envoy-version` argument specifies the specific version of Envoy that should be used for this deployment. Consul Connect manages communication between services in a distributed environment, and Envoy is one of its data planes which handles intercepting, filtering, and routing traffic between services. By specifying a version number, you ensure consistent behavior and compatibility with other components in your infrastructure.'
        expose-servers: |-
            [AI] The `consul connect envoy --expose-servers` flag is used with Consul, a popular service discovery, configuration, and orchestration tool. This specific flag configuration sets up Envoy as a sidecar proxy in the Consul Connect mesh mode.

            When this flag is used, Consul deploys an Envoy proxy alongside each service instance in the mesh. The `--expose-servers` flag instructs Consul to publish the listening addresses of these proxies to the Consul service registry. As a result, other services in the mesh can then locate and connect to these proxies directly, enabling dynamic sidecar injection and traffic routing within the Consul Connect network.
        gateway: '[AI] The `consul connect envoy --gateway` flag is used with Consul, a popular service discovery and configuration management tool. This specific flag setup configures Consul to use Envoy as a sidecar proxy and act as a gateway for the Connect networking feature. This setup enables automated service-to-service communication and proxying of traffic between services in a Consul-connected cluster.'
        grpc-addr: '[AI] The `consul connect envoy --grpc-addr` flag is used with the Consul Connect service mesh to configure the Envoy proxy, which is used as a sidecar in the containerized services for communication between them. The flag sets the GRPC address that Envoy should use to communicate with the Consul Connect server using gRPC protocol. This allows Envoy to discover and register services with Consul, enabling dynamic service discovery, traffic management, and security features provided by Consul Connect.'
        http-addr: '[AI] The `consul connect envoy --http-addr` flag is used with the Consul Connect service mesh to configure the Envoy proxy''s listening HTTP address. When starting or managing an Envoy proxy with Consul Connect, you can pass this flag to specify the interface and port number for Envoy to listen on for incoming HTTP traffic. For example, `--http-addr 0.0.0.0:1502` sets the Envoy proxy to listen on all available network interfaces at port 1502 for HTTP traffic.'
        mesh-gateway: '[AI] The `consul connect envoy --mesh-gateway` flag is used to configure Consul Connect, a service mesh solution provided by Hashicorp''s Consul, to use Envoy as the proxy and enable its gateway functionality. With this setup, Envoy acts as both a sidecar proxy for workloads in the mesh and a gateway that exposes those services externally over HTTP or gRPC. This allows for advanced traffic management, security features like mutual TLS authentication, and integration with Consul''s service discovery and configuration capabilities.'
        namespace: |-
            [AI] The `consul connect envoy --namespace` command is used to configure and deploy Envoy as a sidecar proxy with Consul Connect in Kubernetes. Consul Connect is a service mesh solution provided by Hashicorp, while Envoy is an open-source edge and service proxy.

            The `--namespace` flag specifies the Kubernetes namespace where the Consul server and the Envoy proxies will be deployed. This command helps to secure communication between microservices in the Kubernetes cluster using Consul Connect's service mesh functionality, allowing for advanced features such as traffic encryption, circuit breaking, and canary deployments.
        no-central-config: |-
            [AI] The `consul connect envoy --no-central-config` flag is used to configure Envoy, a modern load balancing and service proxy, in a Consul Connect environment.

            Consul Connect is a service mesh solution provided by Hashicorp that enables secure communication between services using various proxies like Envoy. With this flag, we disable the use of central config for Envoy, meaning that it will not fetch any configuration from a central Consul server. Instead, Envoy will rely solely on local configurations which are typically injected as sidecar containers when deploying services in a Consul Connect environment. This can be useful in specific scenarios where decentralized configuration is preferred or required for security reasons.
        omit-deprecated-tags: '[AI] The `consul connect envoy --omit-deprecated-tags` flag is used with Consul Connect, a service mesh solution from Hashicorp, to configure Envoy proxy with the `--omit-deprecated-tags` option. This option instructs Consul Connect not to include any deprecated Envoy tags in the sidecar container manifest. By using this flag, operators can ensure that their Envoy deployments are running the latest and most up-to-date version of the proxy, free from deprecated features.'
        proxy-id: '[AI] The `consul connect envoy --proxy-id` flag is used with Consul Connect, a service mesh solution provided by Hashicorp. When setting up Envoy as a sidecar proxy in a pod managed by Consul Connect, the `--proxy-id` flag assigns a unique identifier to that particular proxy instance. This ID is crucial for Consul Connect''s internal communication and service discovery. It enables efficient communication between proxies, ensuring proper routing of traffic and managing the health status of services within the mesh.'
        register: |-
            [AI] `consul connect envoy --register` is a command used in the Consul service discovery and connect system. The Envoy proxy is configured as a sidecar in this setup to provide a data plane for service communication.

            The `--register` flag is passed when starting the Envoy proxy. It instructs the Envoy proxy to register itself with the Consul service registry. This allows Consul to discover and catalog the Envoy proxy as a registered service, enabling other services to connect to it using Consul's DNS or HTTP API.
        service: '[AI] The `consul connect envoy --service` flag is used in the context of the Consul service discovery and connectivity toolkit. With this flag, you specify the name of a service that Envoy, a data plane proxy, should connect to. Envoy acts as a sidecar container in Kubernetes or other environments, and it uses the Consul service registry to locate and communicate with other services. By specifying `--service` followed by the name of a registered service, you instruct Envoy to establish connections to instances of that service and forward traffic to them.'
        sidecar-for: '[AI] The `consul connect envoy --sidecar-for` flag is used in the context of Consul Connect, a service mesh solution provided by Hashicorp''s Consul platform. This flag instructs Consul to deploy Envoy as a sidecar container alongside the target application container in a Kubernetes environment. Sidecar containers run in the same pod and share the same network namespace with the primary container, enabling traffic management and interception between services within the mesh. By using `--sidecar-for` flag, you can specify the label selector of the target application, allowing Consul to automatically deploy Envoy as a sidecar for the selected applications, simplifying deployment and configuration of your service mesh.'
        tls-server-name: '[AI] The `consul connect envoy --tls-server-name` flag is used in the Consul service mesh with Envoy as a sidecar proxy. It specifies the TLS server name that Envoy should present during TLS handshakes when acting as a proxy. This value helps ensure that communication between services is secure and correctly identified, preventing potential man-in-the-middle attacks.'
        token: '[AI] The `consul connect envoy --token` command is used to configure Envoy, a popular open-source edge and service proxy, to securely communicate with Consul, a distributed service discovery, configuration, and orchestration platform. The `--token` option specifies an authentication token that is required for secure communication between the two systems. When Consul and Envoy are configured together using this command, they can discover and communicate with each other automatically, enabling traffic management, load balancing, and service security.'
        token-file: '[AI] The `consul connect envoy --token-file` flag is used with the Consul Connect Envoy service mesh sidecar in a Kubernetes environment. This flag specifies the path to a file containing an Envoy access token for secure communication between the Envoy proxies and the Consul Connect service discovery server. The token ensures that only authenticated and authorized Envoy instances can join the service mesh, maintaining security and controlling access to the network.'
        wan-address: '[AI] The `consul connect envoy --wan-address` flag is used in the Consul service mesh to configure the Envoy sidecar proxy with its WAN (Wide Area Network) address. This address is necessary for routing external traffic to the appropriate service within the Consul service mesh. When setting up a Consul Connect environment, specifying this flag helps ensure that the Envoy proxy can correctly receive and handle incoming traffic from outside the cluster.'
