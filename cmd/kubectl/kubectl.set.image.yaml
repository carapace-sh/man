# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N
description: Update the image of a pod template
flags:
    --all: Select all resources, in the namespace of the specified resource types
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --local: If true, set image will NOT contact api-server but run locally.
    --record&: Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    -R, --recursive: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
    -f, --filename*=: Filename, directory, or URL to files identifying the resource to get from a server.
    -k, --kustomize=: Process the kustomization directory. This flag can't be used together with -f or -R.
    -l, --selector=: Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl set image` is a command used with the Kubernetes command-line interface (CLI) tool to update the container image in an existing Kubernetes deployment or daemonset without creating a new YAML manifest file. The syntax is: `kubectl set image <deployment/daemonset-name> <container-name>=<new-image:tag>`. This command retrieves the current configuration, replaces the specified container image with the new one and applies the changes to the running cluster.'
    flag:
        all: '[AI] `kubectl set image --all` is a command used with Kubernetes to update the container images for all running Pods in a cluster with a single command. The `--all` flag indicates that this update should be applied to all matching resources, such as ReplicaSets or Deployments, across the entire cluster. This command helps maintain consistent image versions and keep your deployment up-to-date.'
        allow-missing-template-keys: '[AI] The `kubectl set image` command is used to update an image reference in a Kubernetes configuration file, such as a Deployment or ReplicaSet YAML manifest. The option `--allow-missing-template-keys` allows the update to proceed even if some template keys (i.e., placeholders for values) are missing from the YAML document. In other words, it disables the validation of the entire document and only updates the specified image field. This can be useful when you need to quickly update an image reference without worrying about the completeness of the configuration file. However, using this option may introduce potential issues or inconsistencies if parts of the configuration file are missing.'
        dry-run: '[AI] `kubectl set image --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command is used to test the effect of updating the container image for a specific Kubernetes resource without actually applying the changes. The `--dry-run` option causes `kubectl` to print out the Kubernetes manifest files that would be generated by the update, allowing you to review and verify the changes before applying them in a production environment.'
        field-manager: |-
            [AI] `kubectl set image` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command allows you to update an image reference in a Kubernetes resource, such as a Deployment or a Pod, without modifying the entire YAML file.

            The `--field-manager` flag is an optional argument that can be used with `kubectl set image` to specify which strategy to use for managing the field. There are two strategies: "Recreate" and "RollingUpdate".

            - "Recreate": When using the "Recreate" strategy, Kubernetes will delete the existing resource and create a new one with the updated image reference. This is faster, but it may cause downtime if the resource being updated is a stateful service or a long-running process.
            - "RollingUpdate": With the "RollingUpdate" strategy, Kubernetes will update the images for each replica of the resource in a rolling fashion, ensuring that no more than a specified percentage (default 25%) of the replicas are updated at any given time to minimize downtime and ensure service continuity.

            The `kubectl set image <resource-kind> <resource-name> --container=<container-name> --image=<new-image> --field-manager=RollingUpdate/Recreate` command will update the container image for the specified resource with the new image while using either rolling update or recreate strategy.
        filename: |-
            [AI] The `kubectl set image --filename` command is used to update the container image of a Kubernetes resource, such as a Deployment or a ReplicaSet, by loading the new image name from an external file. The `--filename` option specifies the path to the file containing the new image name. For example:

            ```bash
            kubectl set image deployment/my-deployment --filename my-image-update.yaml
            ```

            This command will read the new container image name from the `my-image-update.yaml` file and update the `my-deployment` Deployment with the new image. This can be useful for large or complex manifests, where it's easier to maintain a separate file for image updates rather than editing the manifest directly.
        kustomize: '[AI] `kubectl set image --kustomize` is a command used with the Kubernetes command-line tool, `kubectl`, to update an image reference in a Kubernetes YAML file or configuration object without having to edit the file directly. The `--kustomize` flag instructs `kubectl` to use the Kustomize framework for managing and deploying declarative applications at scale. With this command, you can modify the image tag or repository in a Kustomization file, which will be applied to the specified resource(s) when the configuration is synchronized with the cluster using `kubectl apply`. This simplifies the process of updating images in complex Kubernetes deployments while minimizing manual YAML editing.'
        local: '[AI] `kubectl set image --local` is a command used with Kubernetes'' `kubectl` tool for managing container clusters. This command allows updating the Docker image name for a specific container in a local Kubernetes configuration file without pushing changes to the remote Kubernetes cluster. The `--local` flag specifies that only the local configuration will be updated, not the live cluster. After running this command, you can apply the changed configuration using `kubectl apply -f <file>`.'
        output: |-
            [AI] `kubectl set image` is a command used to update the container image for a Kubernetes resource, such as a Pod or Deployment. The `--output` flag specifies the format of the output. For example, you can use `json` or `yaml` to receive the updated configuration in that specific format. Here's an example using `json`:

            ```bash
            kubectl set image deployment/my-deployment container1=mynewimage:v1 --output json > new-manifest.json
            ```

            This command updates the container image for `container1` in `my-deployment` to `mynewimage:v1`, and saves the updated configuration in a file named `new-manifest.json`.
        record: '[AI] `kubectl set image --record` is a command used with Kubernetes'' `kubectl` tool to update an image reference in a YAML manifest file or deployed resource record, while keeping a record of the change in the cluster''s reconciliation history. This allows for tracking and managing version updates over time, making it easier for rollbacks or future analysis.'
        recursive: '[AI] `kubectl set image --recursive` is a command used with Kubernetes'' `kubectl` tool for managing container clusters. This command allows you to update the specified container images across all replicas and pods in a deployment or DaemonSet recursively, without having to edit individual YAML files. The `--recursive` flag ensures that all dependent containers with the updated image are also updated in their respective Kubernetes manifests. This command is useful for applying image updates consistently across the cluster.'
        selector: '[AI] `kubectl set image` is a command used with Kubernetes'' `kubectl` tool to update the container image for one or more pods based on selectors. The `--selector` option specifies label keys and values identifying which pods to be updated. For example, `kubectl set image deployment/my-deployment --selector=app=myApp --image=new:registry/image`. This command will replace the old container image for all pods labeled with ''app=myApp'' with the new one specified by ''new:registry/image''.'
        show-managed-fields: '[AI] `kubectl set image` is a command used to update an image reference in Kubernetes manifests. The `--show-managed-fields` flag is an optional argument that displays the fields managed by Kubectl when performing the update. It helps to understand which parts of the manifest file will be changed by this command, providing transparency and enabling users to review and confirm the changes before applying them.'
        template: |-
            [AI] `kubectl set image --template` is a command used with Kubernetes' `kubectl` tool for managing container clusters. This command allows you to update the container images of running Kubernetes resources, such as pods or deployments, using a templating syntax.

            The `--template` flag follows a Go text template that defines how to find and replace the old image tag with a new one. The syntax includes placeholders enclosed in curly braces like `${VAR_NAME}`. By providing a valid YAML or JSON file as an argument, you can update the image references across multiple resources at once while ensuring proper formatting is maintained.

            For example: `kubectl set image deployment myapp --template='{{.spec.template.spec.containers[0].image}}=new-image:v1'` will change the image of the first container in 'myapp' deployment to 'new-image:v1'.
