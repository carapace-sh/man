# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: destroy [options]
description: Destroy previously-created infrastructure
group: main
flags:
    -compact-warnings: Show warnings in a more compact form that includes only the summary messages.
    -destroy: Select the "destroy" planning mode.
    -detailed-exitcode: Return detailed exit codes when the command exits.
    -input?: Ask for input for variables if not directly set.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
    -no-color: If specified, output won't contain any color.
    -out?: Write a plan file to the given path.
    -parallelism?: Limit the number of concurrent operations.
    -refresh: Skip checking for external changes to remote objects while creating the plan.
    -refresh-only: Select the "refresh only" planning mode.
    -replace?: Force replacement of a particular resource instance using its resource address.
    -state?: A legacy option used for the local backend only.
    -target?: Limit the planning operation to only the given module, resource.
    -var-file?: Load variable values from the given file.
    -var=: Set a value for one of the input variables in the root module of the configuration.
documentation:
    command: '[AI] `terraform destroy` is a Terraform command used to delete infrastructure resources configured in your Terraform configuration files. It applies the necessary reverse actions, defined in the configuration files, to remove the managed infrastructure, including deleting empty data stores or terminating instances. Once executed, it confirms that you want to proceed with the destruction and removes the corresponding state from the local Terraform state file. Be cautious when using this command as destructive actions are irreversible.'
    flag:
        compact-warnings: '[AI] The `terraform destroy` command with the `-compact-warnings` flag is used to destroy infrastructure configurations managed by Terraform, while minimizing the output of destruction warnings. By default, Terraform will show detailed destruction warnings for each resource, which can be overwhelming when destroying large or complex infrastructures. With the `-compact-warnings` flag, these warnings are consolidated into a single warning message per resource type, making the output easier to read and manage.'
        destroy: |-
            [AI] The `terraform destroy` command with the `-destroy` flag is used in Terraform, an open-source infrastructure as code software tool. This combination of commands is used to deliberately and safely destroy all the infrastructure resources that were previously created with Terraform.

            The `-destroy` flag tells Terraform to perform a plan for the destruction operation but not actually destroy anything yet. This allows users to review the proposed changes before executing them. If the user confirms the destructive actions, they can then run `terraform apply` with no arguments or an empty workdir to approve the plan and execute the actual destruction.

            This command is essential for managing infrastructure resources in a controlled manner and ensures that unwanted resources are not left running unnecessarily or accidentally. It also helps prevent potential misconfigurations or security risks associated with unused resources.
        detailed-exitcode: '[AI] The `terraform destroy` command is used to plan and apply the destruction of infrastructure resources managed by Terraform. The `-detailed-exitcode` option is a flag that can be passed with this command to increase the level of output detail when the destruction process completes. With this flag, Terraform will print a detailed exit code along with an error message if any resource destruction fails, providing more information for debugging and troubleshooting.'
        input: '[AI] `terraform destroy` is a command used in Terraform, an open-source infrastructure as code software tool, to delete managed resources created by previous `terraform apply` commands. The `-input` option is used with this command to prevent the destruction of resources without confirmation. With `-input`, Terraform will prompt for confirmation before executing each destructive action, allowing users to review and confirm each destruction step before it is carried out.'
        lock: '[AI] `terraform destroy -lock` is a command used in Terraform, an open-source Infrastructure as Code software tool. This command initiates a destructive action to delete previously created infrastructure resources in a safe and orderly manner. The `-lock` flag introduces a locking mechanism that prevents other concurrent Terraform runs from making changes to the same resources, ensuring consistency during the destruction process. This is particularly important when multiple team members are working on the same infrastructure or when destroying resources could have significant impacts. By using `terraform destroy -lock`, you can confidently destroy your infrastructure knowing that no other Terraform processes will interfere with it.'
        lock-timeout: '[AI] The `terraform destroy` command is used to destroy infrastructure resources managed by Terraform. The `-lock-timeout` option sets a timeout duration for Terrform''s state lock. This means that if a destructive operation is initiated and there is an ongoing lock on the state file, Terraform will wait for the specified time before giving up and allowing another instance to acquire the lock. The default value is 10 minutes (5 minutes in AWS Marketplace Terraform Images), but you can specify a different duration with this flag. This helps prevent conflicts when multiple instances try to destroy resources at the same time.'
        no-color: '[AI] `terraform destroy -no-color` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates the destruction of all resources managed by Terraform in the current working directory, but it does so without displaying any colored output. The `-no-color` flag is used to suppress colored messages that would normally be displayed during the operation. This can be useful for running Terraform commands in environments where color output is not supported or preferred.'
        out: '[AI] `terraform destroy -out` is a command used in Terraform, an open-source infrastructure as code software tool. This command initiates the destruction of infrastructure resources managed by Terraform based on the configuration files. The `-out` option generates an output file containing the proposed actions to be taken during the destruction process. This file can then be reviewed before applying the changes with `terraform apply -out file`. This workflow allows for a safe and deliberate approach to infrastructure changes, including destruction.'
        parallelism: '[AI] `terraform destroy` is a command in Hashicorp''s Terraform infrastructure configuration tool to delete resources that were created with Terraform. The `-parallelism` option specifies the maximum number of concurrent parallel actions Terraform should perform during the destruction process. This can help speed up the destruction process by allowing multiple resources to be destroyed in parallel instead of one after another. However, using too many parallel tasks may increase the risk of errors or resource contention. It''s important to use this option with caution and consider the potential impact on your infrastructure.'
        refresh: |-
            [AI] `terraform destroy -refresh` is a command in Terraform, an open-source infrastructure as code software tool. This command initiates the destruction of previously created infrastructure resources managed by Terraform, but with an additional flag `-refresh`.

            The `-refresh` option triggers Terraform to perform a refresh operation before the actual destroy action. Refreshing means Terraform re-reads the current state of the remote infrastructure and updates the local Terraform state file accordingly. This is necessary when there have been changes in the infrastructure outside of Terraform management, as the `terraform destroy` command will not run if there are differences between the desired configuration (in your Terraform files) and the actual current state.

            With the `-refresh` flag, you ensure that both the local state and the remote infrastructure are synchronized before initiating the destruction process. This helps prevent unintended consequences by ensuring that only the intended resources will be destroyed.
        refresh-only: '[AI] `terraform destroy -refresh-only` is a command in Hashicorp''s Terraform infrastructure as code tool. It triggers the destruction of resources marked for deletion in your configured Terraform state file, but without actually applying any changes to the underlying infrastructure yet. This allows you to review the planned destruction and make any necessary adjustments before proceeding with the actual destruction. The `-refresh-only` argument is used to perform this preview without making any changes to the real resources or the state file, but only updating the Terraform state based on the current configuration.'
        replace: |-
            [AI] `terraform destroy -replace` is a command used in Terraform, an open-source Infrastructure as Code software tool. This command is used to destroy and replace infrastructure resources with new ones, while keeping their Terraform state file.

            When you run `terraform init` to configure your working directory, Terraform stores the current state of your infrastructure in a file named `terraform.tfstate`. When you make changes to your configuration files and run `terraform apply`, Terraform compares the desired state in the configuration files with the current state in the `terraform.tfstate` file and applies the necessary changes to reach the new desired state.

            However, there are situations where you might want to completely destroy the existing infrastructure and replace it with new resources. For example, when making significant changes that affect multiple resources or when migrating from one environment to another. This is where `terraform destroy -replace` comes in.

            The `-replace` flag tells Terraform to destroy the current infrastructure resources and then create new ones based on your configuration files. This action results in a new `terraform.tfstate` file that describes the new infrastructure state.

            It is important to note that using this command will permanently delete the existing infrastructure, so always make sure you have proper backups or snapshots if necessary. Additionally, running `terraform plan -destroy -replace` before executing the command will help you preview the changes and understand the implications of your actions.
        state: '[AI] `terraform destroy -state` is a command used in Terraform, an open-source infrastructure as code software tool. This command is used to destroy resources that were previously created with Terraform, based on the state file. The state file contains the current configuration of your infrastructure, including the IDs and other attributes of the resources. By using `terraform destroy`, you are instructing Terraform to delete these resources, while preserving the state file for future usage. This is useful when you need to clean up a test environment or when making changes that require destroying and recreating resources with new configurations.'
        target: '[AI] The `terraform destroy` command with the `-target` option is used to destroy only specific resources marked by the argument in Terraform configuration files. It allows selective destruction of resources without affecting the entire infrastructure configured in the Terraform project, reducing potential risks and downtime during destruction. This is particularly useful when you want to keep certain resources intact while removing others.'
        var: '[AI] The `terraform destroy` command is used in Terraform, an open-source infrastructure as code software tool, to delete previously created infrastructure resources according to the current configuration. The `-var` option follows it and is used to pass variables to the Terraform configuration files during the execution of this destructive operation. This can be useful when certain resources need selective destruction based on variable values. For example, you might have multiple instances of a resource type but only want to destroy specific ones based on certain conditions. The `-var` option allows you to pass those conditions as variables in the form `name=value`.'
        var-file: '[AI] The `terraform destroy` command is used in Terraform, an open-source infrastructure as code software tool, to destroy (remove) previously created resources. The `-var-file` option specifies a file where variables and their values are stored in Key=Value format. This can be useful for managing sensitive information, such as access keys or passwords, by keeping them outside the Terraform configuration files. When using this option, make sure the file is encrypted or otherwise secured to protect the data it contains.'
