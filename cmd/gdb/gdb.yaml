# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: gdb
description: This is the GNU debugger
flags:
    --args: Arguments after executable-file are passed to inferior.
    --batch: Exit after processing options.
    --batch-silent: Like --batch, but suppress all gdb stdout output.
    --cd=: Change current directory to DIR.
    --configuration: Print details about GDB configuration and then exit.
    --core=: Analyze the core dump COREFILE.
    --dbx: DBX compatibility mode.
    --directory=: Search for source files in DIR.
    --eval-command=: Execute a single GDB command.
    --exec=: Use EXECFILE as the executable.
    --fullname: Output information used by emacs-GDB interface.
    --help: Print this message and then exit.
    --init-command=: Like -x but execute commands before loading inferior.
    --init-eval-command=: Like -ex but before loading inferior.
    --interpreter=: Select a specific interpreter / user interface.
    --nh: Do not read ~/.gdbinit.
    --nw: Do not use the GUI interface.
    --nx: Do not read any .gdbinit files in any directory.
    --pid=: Attach to running process PID.
    --readnever: Do not read symbol files.
    --readnow: Fully read symbol files on first access.
    --return-child-result: GDB exit code will be the child's exit code.
    --se=: Use FILE as symbol file and executable file.
    --silent: Do not print version number on startup.
    --symbols=: Read symbols from SYMFILE.
    --tty=: Use TTY for input/output by the program being debugged.
    --tui: Use a terminal user interface.
    --version: Print version information and then exit.
    --write: Set writing into executable and core files.
    -D, --data-directory=: Set GDB's data-directory to DIR.
    -b=: Set serial port baud rate used for remote debugging.
    -l=: Set timeout in seconds for remote debugging.
    -q, --quiet: Do not print version number on startup.
    -w: Use the GUI interface.
    -x, --command=: Execute GDB commands from FILE.
documentation:
    command: '[AI] `gdb` is a popular debugging tool for C, C++, and other languages. Its name stands for GNU Debugger. It allows developers to inspect the state of their program during execution, step through code line by line, set breakpoints, examine variables, and analyze call stacks. GDB provides an interactive interface to analyze and solve issues in the compiled code.'
    flag:
        args: '[AI] `gdb` is a debugging tool used in software development. The argument `--args` is not a separate flag but rather an option to provide arguments to the program being debugged when launching it from GDB. For instance, `gdb --args my_program arg1 arg2` will start GDB and pass `arg1` and `arg2` as command-line arguments to `my_program`. This is useful for debugging complex applications with various input parameters.'
        b: |-
            [AI] The `gdb` command with the option `-b` is used to specify which binary file to be debugged when launching the GNU Debugger (GDB) tool. For instance, if you have a program named `myprogram`, you can start GDB and attach it to this program as follows:

            ```sh
            gdb -b myprogram
            ```

            This command launches GDB and sets up the debugging session for the `myprogram` binary file. From there, you can use other GDB commands to perform various debugging tasks, such as setting breakpoints or inspecting variables.
        batch: '[AI] `gdb` is a debugging tool used in software development for inspecting and modifying the execution of a program. The `--batch` option is passed to `gdb` when you want it to run in non-interactive mode, where it processes commands from a script file instead of taking user input. This allows for automation of repetitive debugging tasks or for integrating `gdb` into other scripts and tools.'
        batch-silent: '[AI] `gdb` is a debugger tool used in software development for diagnosing and fixing errors in compiled programs. The option `--batch-silent` is used when running `gdb` in non-interactive mode, meaning it suppresses any output or interaction with the terminal, making it run in the background and only producing error messages or specific results as required. It''s often utilized in automated testing scripts or continuous integration workflows for debugging and analyzing software builds.'
        cd: '[AI] The `gdb` command `--cd <directory>` is an option used with the GNU Debugger (GDB) tool. It sets the working directory for GDB to the specified `<directory>`. This means that when you start GDB from the terminal or command prompt, it will change its current directory to the given one before beginning debugging. This can be useful when you want GDB to look for source files and other project-related files in a specific location.'
        command: |-
            [AI] The `gdb` (GNU Debugger) command-line option `--command=FILE` allows specifying a script file as an argument, which is then executed when GDB starts up. The script can contain various GDB commands to configure the debugging environment or perform automated tasks. For example:

            ```bash
            gdb --command=my_script.gdb my_program
            ```

            This would start `gdb` and execute the commands defined in the file `my_script.gdb`. This can be useful for setting breakpoints, loading symbols, or performing other repetitive tasks when debugging multiple instances of a program.
        configuration: '[AI] `gdb --config` is a command used with the GNU Debugger (GDB) tool to display or modify its configuration settings. The `--config` option specifies that GDB should operate in config mode, either by printing out the current configuration or by allowing the user to edit it interactively. This can be useful for debugging complex issues or customizing GDB''s behavior to suit specific development environments.'
        core: '[AI] The `gdb` command with the `--core` option is used in GNU Debugger (GDB) to specify that the debugging session should be started from a core file instead of an executable. A core file is a snapshot of a program''s memory at the moment of its termination, and it can be generated using various signals or by explicitly creating one using the `gcore` command. By starting GDB with this option and specifying the path to a core file as an argument, you can perform post-mortem debugging on that particular instance of the program.'
        data-directory: '[AI] The `--data-directory` option in GDB (GNU Debugger) specifies the directory where GDB will look for its data files, such as core files, symbol files, and other debugging information. It overrides the default system location and allows users to set a custom path. This can be useful when working on projects with specific data directories or when using GDB in different environments.'
        dbx: '[AI] The `gdb --dbx` command is used to invoke the GNU Debugger (GDB) with the DBX (Data Browser and Express) extension enabled. DBX provides a graphical user interface (GUI) for GDB, making it easier to use for debugging graphically-intensive applications, especially in a X Window System environment. The `gdb` command is the executable name for the debugger itself, and `--dbx` is an option that tells GDB to start with the DBX extension enabled.'
        directory: '[AI] The `--directory` option in GDB (GNU Debugger) is used to specify a working directory for GDB when it starts up. It allows you to set the current working directory to a specific location, which can be useful when debugging projects with complex build systems or when using GDB from a script. The flag takes the path of the working directory as an argument. For example: `gdb --directory /path/to/working/directory`.'
        eval-command: |-
            [AI] `gdb` is a debugger tool used in software development for inspecting and modifying the execution of a program. The `--eval-command` option is used to specify a GDB command that will be executed as soon as the debugger is started. The format is:

            ```bash
            gdb <executable> --eval-command="<GDB-commands>"
            ```

            For example, if you want to run a C program named `myprogram` and set a breakpoint at line 10, you could use the following command:

            ```bash
            gdb myprogram --eval-command="break main; break 10"
            ```

            This would open the debugger, load the specified executable, and immediately set the breakpoints without any further interaction.
        exec: |-
            [AI] The `gdb` command with the `--exec` argument is used to execute a specific command in GDB (GNU Debugger) without entering the interactive debugging mode. This is often used for automated or batch processing of compiled programs, where detailed debugging is not required. The command following `--exec` is passed directly to GDB and executed without user interaction. For example:

            ```bash
            gdb --exec "run; bt" myprogram
            ```

            This command will execute the `run` command (which starts the program) followed by the `bt` (backtrace) command, generating a backtrace upon program termination. This can be useful for automatically gathering information about crashes or other issues in a scripted workflow.
        fullname: '[AI] The `gdb` command with the option `--fullname` is used in GNU Debugger (GDB), a debugging tool, to display the full name of each symbol during debugging. When you run `gdb --fullname <executable> <args>`, GDB will provide the fully qualified names for all symbols (functions, variables, etc.) during the debugging session. This option can be useful when dealing with complex projects or when trying to understand the relationship between different parts of a codebase.'
        help: '[AI] `gdb --help` is a command used in the GNU Debugger (GDB) tool to display comprehensive help information. When executed, it shows a detailed list of GDB''s commands and their usage along with brief descriptions. This can be helpful for users who want to learn about the various features and capabilities of GDB or for experienced users looking to refresh their memory on specific commands. By providing the `--help` flag, GDB offers an easily accessible reference guide for its functionality.'
        init-command: |-
            [AI] The `gdb` (GNU Debugger) `--init-command` flag is used to specify a custom command that will be executed when GDB starts up. This can be useful for setting up environments, defining aliases, or configuring GDB for specific projects. The command is typically written in Python or Tcl scripts and is passed as an argument to the `--init-file` option. For example:

            ```sh
            gdb --core=core_file --init-file=my_gdb_init.py
            ```

            Here, `my_gdb_init.py` is a custom Python script that contains commands to be executed when GDB starts up.
        init-eval-command: '[AI] The `gdb` (GNU Debugger) command `--init-file` or `--init-eval-command` is used to specify a script file or inline commands that will be executed when the debugger starts. This can include setting breakpoints, loading symbols, defining aliases, and configuring other aspects of the debugging environment. The goal is to automate repetitive tasks or set up a consistent debugging configuration across multiple projects.'
        interpreter: '[AI] The `gdb` command with the `--interpreter` argument is used to specify the interpreter or the dynamic linker that should be used when debugging a program with GDB (GNU Debugger). The interpreter is responsible for resolving shared library dependencies and loading them during program execution. By specifying an alternative interpreter, you can handle cases where the default interpreter might not correctly load required libraries, or when dealing with non-standard environments such as cross-compilation targets or custom runtime configurations.'
        l: '[AI] The command `gdb -l` is used in GNU Debugger (GDB) to display a list of available data bases and targets for GDB. It does not load or attach to any specific process or core file, but simply prints out the information about the possible debugging sessions that can be started with GDB based on the configuration files located in the system or user-defined directories. This command is helpful when setting up a new environment and wanting to know which debugging configurations are available.'
        nh: '[AI] The command `gdb --nh` is used in GNU Debugger (GDB) to start a debugging session without entering the interactive shell by default. The `--nh` flag stands for "no interactively" or "non-interactive," indicating that GDB should not present its command-line interface after starting up. Instead, it will only perform the actions specified in the script or commands passed to it, making it useful when integrating GDB with other tools or automation workflows.'
        nw: '[AI] The command `gdb --nw` launches the GNU Debugger (GDB) in a non-interactive mode, specifically with the "--no-wait" or "--nw" option. In this mode, GDB starts executing the debugged program immediately after it has been loaded without waiting for user input. This can be useful for automating testing and other continuous integration workflows.'
        nx: '[AI] The `gdb` command with the flag `--nx` is used in the context of the GNU Debugger (GDB) tool. This flag enables No Execution (NX) protection during debugging, which is a security feature that prevents the execution of code from memory areas marked as non-executable. When GDB starts, it sets the specified memory regions as read-write but does not change the execute bit by default with this flag, ensuring that no unwanted code can be executed while debugging.'
        pid: '[AI] The `gdb` command with the `--pid` option is used to launch the GNU Debugger (GDB) and attach it to a already running process identified by its Process ID (PID). This allows debugging the process without needing to start it from GDB initially. For example, `gdb --pid 12345` would attach GDB to the process with PID 12345.'
        quiet: '[AI] The command `gdb --quiet` is used to launch the GNU Debugger (GDB) in quiet mode. In this mode, GDB suppresses most of its output, displaying only essential information during debugging sessions. This can be useful when working with automated testing tools or scripts where excessive console output might interfere.'
        readnever: '[AI] The `--readnever` flag is a command-line option for GNU Debugger (GDB). It instructs GDB not to read symbols from any shared libraries or core files, even if they are marked as executable. This can be useful in situations where you want to prevent GDB from loading additional symbols, perhaps for security reasons or to minimize memory usage. By default, GDB will attempt to load symbols from these files during debugging sessions.'
        readnow: '[AI] The `gdb` command with the argument `--readnow` is used in the GNU Debugger (GDB) tool to instruct it to read core files or memory dumps immediately upon loading, without waiting for a signal or an explicit `gdb` command to do so. This option can be useful when analyzing a system crash or a segmentation fault, as it allows GDB to begin debugging with the most recent state of the program or process.'
        return-child-result: '[AI] The `--return-child-result` flag is used in gdb (GNU Debugger), a debugging tool, to configure child processes launched from gdb to return their exit status and standard output or standard error to the parent gdb session. When this option is set, gdb collects the output of the child process and makes it available for further inspection, allowing you to examine both the child''s exit status and its stdio streams in the debugging environment. This can be helpful when working with complex applications or multi-process systems, where understanding the interactions between processes is essential.'
        se: '[AI] `gdb` is a debugging tool for C and C++ programs. The option `--se` passed to `gdb` stands for "Source Exchange Format." It enables or disables the Source Exchange Protocol in GDB, which allows external debuggers or IDEs to exchange source code information with GDB during debugging sessions. This protocol improves the efficiency and effectiveness of remote debugging by minimizing the need to send large amounts of source code over the network.'
        silent: '[AI] The `gdb` command with the `--silent` flag is used to run GDB (GNU Debugger) in silent mode. This means that GDB will not display any output or messages on the terminal, unless an error occurs or specified by other commands. It''s often used for automated testing and batch processing scripts where you don''t need to see the debugging output.'
        symbols: '[AI] The `gdb` (GNU Debugger) command `--symbols` is an option used to instruct GDB to load additional symbol information from files while debugging. This information includes function and variable names, which can be invaluable for understanding and debugging complex code. When you use this option, GDB will read .sym or .dSYM files (on different platforms) containing the symbols. This helps developers to navigate through their code more effectively during debugging sessions.'
        tty: '[AI] The `gdb --tty` command is used to launch the GNU Debugger (GDB) with a specific terminal (TTY) device as its input and output. The `--tty` option specifies the TTY device file name, such as `/dev/pts/0`, which GDB will use for communication. This can be useful when debugging remotely over SSH or when working in a multi-terminal setup. By default, GDB uses standard input, output, and error streams, but using the `--tty` option ensures that GDB communicates only through the specified TTY device.'
        tui: '[AI] `gdb --tui` is a command-line option for the GNU Debugger (GDB) tool, which invokes the Text User Interface (TUI) mode instead of the default Graphical User Interface (GUI). This option is particularly useful when using GDB in non-graphical environments like terminal sessions or remote debugging. The TUI provides a text-based interface with similar functionality as the GUI, allowing users to control and interact with GDB for debugging purposes.'
        version: '[AI] The command `gdb --version` is used to display the version information of the GNU Debugger (GDB) installed on your system. When executed, GDB prints out its name, version number, and other relevant build information such as operating system, compiler, and build date. This command helps users ensure they have the latest version of GDB installed and provides a way to check for compatibility with other software or development environments.'
        w: |-
            [AI] The `gdb` command with the option `-w` is used to request GDB (GNU Debugger) to attach to a running process with the specified core file or pid, and to make that process become the foreground process in its terminal.

            In simpler terms, `gdb -w <pid>` allows you to attach the GDB debugger to a specific running process identified by its Process ID (PID), and then takes control of that terminal session for debugging purposes.
        write: '[AI] The `gdb --write` command is used in the GNU Debugger (GDB) tool to modify the memory content of a process being debugged. This command line option allows GDB to save changes made during debugging sessions back to the target process or file. Without this option, any modifications would not be persisted after the debugging session ends. It is important to note that using `--write` can potentially introduce security vulnerabilities if used improperly, as it grants write access to the target process or file.'
