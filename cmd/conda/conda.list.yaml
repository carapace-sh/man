# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list
description: List linked packages in a conda environment
flags:
    --explicit: List explicitly all installed conda packaged with URL
    --json: Report all output as json.
    --md5: Add MD5 hashsum when using --explicit
    --no-pip: Do not include pip-only installed packages.
    --show-channel-urls: Show channel urls.
    -c, --canonical: Output canonical names of packages only.
    -e, --export: Output requirement string only
    -f, --full-name: Only search for full names.
    -h, --help: Show this help message and exit.
    -n, --name=: Name of environment.
    -p, --prefix=: Full path to environment location (i.e. prefix).
    -q, --quiet: Do not display progress bar.
    -r, --revisions: List the revision history and exit.
    -v, --verbose: Use once for info, twice for debug, three times for trace.
documentation:
    command: '[AI] `conda list` is a command used in Anaconda and Miniconda environments to display a list of installed packages, including their versions and other related information such as build number and build date. It shows the name, version, build number, and build date for each package, as well as the location of the environment where the packages are installed. This command is useful for checking which packages are currently installed in your Anaconda or Miniconda environment and for creating reproducible environments by recording exact package versions.'
    flag:
        canonical: '[AI] The `conda list --canonical` command is used in Anaconda and Miniconda environments to generate a minimal and consistent output of installed packages and their versions. It filters out duplicated packages, meta-packages, and other non-essential information, providing only the canonical names and versions. This output can be easily shared or saved for reproducibility and comparison across different systems.'
        explicit: '[AI] `conda list --explicit` is a command used in Anaconda or Miniconda environments to generate a detailed output of installed packages and their specific versions. The `--explicit` option ensures that only the exact package names and versions are displayed, with no implicit dependencies or metadata included. This output can be useful for recreating environments or for troubleshooting dependency conflicts.'
        export: '[AI] `conda list --export` is a command in Anaconda or Miniconda distribution of Python that generates an output in the format of a text file describing the current conda environment, including package versions and other dependencies. The exported file can be used to recreate the environment on other systems by importing it with `conda env create -f <filename.yml/json>`.'
        full-name: '[AI] `conda list --full-name` is a command used in Anaconda and Miniconda environments to display a list of installed packages with their full names, including the version number and build number. It provides a comprehensive view of all installed packages, their sources, and dependencies within the current environment.'
        help: '[AI] `conda list --help` is a command used in Anaconda or Miniconda environments to display help information about the "conda list" subcommand. It provides a detailed explanation of how to use the "conda list" command to generate a list of installed packages and their versions, along with other options that can be used to filter or modify the output. For example, you can use `--excluded` to exclude certain packages from the list or `--file` to save the output to a file.'
        json: '[AI] `conda list --json` is a command used in Anaconda or Miniconda environments to generate a JSON-formatted output of the current installed packages, their versions, and other related information. This can be useful for creating reproducible environments, sharing package configurations with others, or using scripts to automate environment management tasks.'
        md5: '[AI] `conda list --md5` is a command used in Anaconda or Miniconda distribution of Python and R data science environments. It generates an MD5 checksum for each package listed, allowing users to verify the integrity of their installed packages. This command displays the name, version, build number, file size, installation path, and MD5 checksum for each package. The MD5 checksums can be compared against those provided by the distribution maintainers to ensure that the installed packages have not been tampered with or corrupted during download or installation.'
        name: '[AI] The `conda list --name` command is used in Anaconda and Miniconda environments to display the current name of the active conda environment. The output will simply show the name of the environment, for example `myenv`. This command can be helpful when working with multiple environments and need to confirm which one is currently active.'
        no-pip: '[AI] `conda list --no-pip` is a command used in Anaconda or Miniconda environments to generate a list of installed packages, excluding those installed with pip (Python Package Index). The option `--no-pip` filters out packages managed by pip, providing a list of only the Conda-managed packages and their corresponding versions.'
        prefix: '[AI] The `conda list --prefix` command is used in Anaconda and Miniconda distributions of the Conda package manager. It returns a list of packages installed in the given Conda environment, with the prefix path (the base installation directory) indicated for each package. The output includes the name, version, build number, and the install location, which starts with the specified prefix. For example: `--prefix C:\Users\user\anaconda3` would display the list of packages installed in that environment with the path `C:\Users\user\anaconda3` as a prefix.'
        quiet: '[AI] The `conda list --quiet` command is used in Anaconda or Miniconda environments to display a minimal output of the installed packages and their versions. It lists the name, version, and build number of each package, separated by tabs. This can be useful for scripting or automated analysis where detailed information is not necessary.'
        revisions: '[AI] The `conda list --revisions` command in Anaconda or Miniconda is used to display a list of available revisions (snapshots) for each package installed in the current environment. Each revision has a unique identifier and represents a specific version of the package at a particular point in time. This information can be useful for tracking changes made to packages over time or for rolling back to a previous state if needed.'
        show-channel-urls: '[AI] `conda list --show-channel-urls` is a command used in Anaconda or Miniconda distribution of Python and R data sciences environments. This command displays the URLs of the Conda channels that are currently active in your environment. Conda channels are remote repositories where packages are stored for installation via Conda. By knowing which channels are being used, you can manage your environment''s dependencies effectively and ensure that you have access to the latest package versions from trusted sources.'
        verbose: '[AI] The `conda list --verbose` command is used in Anaconda or Miniconda environments to display a detailed and verbose output of all installed packages, their versions, build numbers, and other related information. This includes dependencies and channels from which the packages were installed. It helps users to check the current state of their environment, troubleshoot issues, and compare different environments.'
