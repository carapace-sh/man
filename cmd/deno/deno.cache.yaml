# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cache
description: Cache the dependencies
flags:
    --cert=: Load certificate authority from PEM encoded file
    --import-map=: Load import map file
    --lock-write: Write lock file (use with --lock)
    --lock=: Check the specified lock file
    --no-check: Skip type checking modules
    --no-remote: Do not resolve remote modules
    -c, --config=: Load configuration file
    -r, --reload?: Reload source code cache (recompile TypeScript)
documentation:
    command: |-
        [AI] The `deno cache` command in Deno, a modern JavaScript runtime, is used to manage and control the built-in caching feature. It allows you to inspect, clear, or update the cache for your Deno projects. Here's a brief overview of what you can do with this command:

        1. `deno cache --inspect`: Shows detailed information about the current cache, including its size, cached modules, and their versions.
        2. `deno cache --clear`: Removes all cached modules and dependencies from your project's Deno cache. This can help you start with a clean slate when working on a new version or fixes issues related to stale cache data.
        3. `deno cache <module>`: Caches or updates the specified module in your project, ensuring it is available for future use without needing to download it again during runtime.

        Keep in mind that Deno uses an incremental and on-demand caching strategy, meaning that only the dependencies required by your code will be cached, which can help reduce overall cache size and improve performance.
    flag:
        cert: '[AI] `deno cache --cert` is a command in Deno, a modern JavaScript runtime. It''s used to manage and store downloaded packages for faster build times in Deno projects. The `--cert` option specifically refers to handling SSL certificates for HTTPS modules. With this flag, Deno caches the SSL certificates along with the other dependencies, enabling secure connections during the execution of the Deno application without having to download them every time.'
        config: '[AI] `deno cache --config` is a command-line tool used in Deno, a modern and secure runtime for JavaScript and TypeScript. This specific command is used to manage Deno''s cache, with the `--config` flag indicating that it should use or update the configuration file for the cache. The cache is used to store compiled code for faster execution. Updating the config file allows users to customize settings like the cache location and maximum size.'
        import-map: '[AI] The `deno cache --import-map` command is a utility provided by Deno, a modern and secure runtime for JavaScript and TypeScript. This command generates an import map file that defines custom module resolution rules for Deno projects. By using this flag in conjunction with the Deno cache command, developers can efficiently manage imported dependencies and their versions without having to modify the `deno.json` or `deno.jsonc` files directly. Ultimately, it helps streamline the process of importing local and remote packages, ensuring optimal performance and up-to-date module versions within a Deno application.'
        lock: '[AI] `deno cache --lock` is a command in Deno, a modern and secure TypeScript runtime. This command is used to manage Deno''s cache and lock files. More specifically, it generates or updates a lock file based on the current cache. A lock file records the exact versions of the dependencies that were used when a project was built or last ran. Using `deno cache --lock` helps ensure consistency and reproducibility by preventing unexpected version changes in your Deno projects.'
        lock-write: '[AI] `deno cache --lock-write` is a Deno command used to write and update a lockfile in the Deno cache. A lockfile ensures that multiple processes or users cannot modify the same package at the same time, preventing potential version conflicts and ensuring reproducibility of builds. The flag updates the lockfile with the latest versions of dependencies listed in the `deno.jsonc` file or the project''s `package.json` file if it exists.'
        no-check: '[AI] `deno cache --no-check` is a command in Deno, a modern runtime for JavaScript and TypeScript. This command is used to write or update cached modules without checking if their content has changed first. By using the `--no-check` flag, Deno bypasses the verification step of the cached module''s integrity and content, allowing for faster write operations at the cost of potentially using stale or incorrect module versions.'
        no-remote: '[AI] `deno cache --no-remote` is a command used in Deno, a modern and secure TypeScript runtime. This command instructs Deno not to use remote caches when saving or restoring modules from the file system. Instead, it only uses the local cache. This can be useful in cases where you want to have full control over which modules are cached and isolate your project from external dependencies.'
        reload: '[AI] `deno cache --reload` is a command in Deno, a modern runtime for JavaScript and TypeScript. This command is used to update the local cache with the latest version of the dependencies mentioned in the project''s `deno.jsonc` file. When you modify your project or add new dependencies, running this command will ensure that Deno uses the latest versions when executing your code. It helps maintain a consistent and up-to-date development environment.'
