# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: job NAME --image=image [--from=cronjob/name] -- [COMMAND] [args...]
description: Create a job with the specified name
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --from=: The name of the resource to create a Job from (only cronjob is supported).
    --image=: Image name to run.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] `kubectl create job` is a command used in Kubernetes to create a new Job object. A Job manages the creation of one or more Pods with a specific container image and desired number of replicas. When a Job is created, Kubernetes ensures that the specified number of Pods are running at any given time by creating new Pods as needed to replace those that terminate. This command takes the following format: `kubectl create job <job-name> --image=<container-image>:<tag> --replicas=<number> [--namespace=<namespace>]`. Here, `<job-name>` is the name given to the Job, `<container-image>:<tag>` specifies the container image and tag, and `<number>` represents the number of replica Pods to create. The optional `[--namespace=<namespace>]` argument can be used to specify a particular namespace for the Job.'
    flag:
        allow-missing-template-keys: |-
            [AI] `kubectl create job` is a command used to create a new Kubernetes Job object. The `--allow-missing-template-keys` flag is an optional argument that allows the creation of a Job even if some required keys are missing from the YAML file defining the Job.

            Normally, if a required key is missing in a Kubernetes manifest file, Kubectl will not create the object and will return an error. However, with this flag, Kubectl will ignore those missing keys and proceed with creating the Job anyway. This can be useful when creating or updating a Job configuration in progress, as it allows for incremental updates without having to wait for all required keys to be present before making any changes.

            It's important to note that using this flag may result in an incomplete or incorrectly configured Job, which could impact its behavior or functionality. It's recommended to use this flag with caution and only when necessary.
        dry-run: '[AI] `kubectl create job --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool, `kubectl`. This command creates a Job object in the Kubernetes cluster but does not actually apply or execute the creation. Instead, it outputs the YAML definition of what the Job would look like if created, allowing users to review and modify the configuration before running it with `kubectl create -f filename.yaml`. This is particularly useful for testing and validating configurations before deployment.'
        field-manager: '[AI] `kubectl create job` is a command used in Kubernetes to create a new Job object. A Job manages the creation of one or more Pods, ensuring a specified number of replicas are running at any given time. The `--field-manager` flag is an optional argument that can be used with `kubectl create` and other similar commands to manage fields that change over time, such as a Job''s replica count or container image tag. It allows you to specify the manager of the field, which in this case would be the Job itself, ensuring that any changes made to these fields are applied only to this specific Job and not affecting others in the cluster.'
        from: '[AI] `kubectl create job` is a command used to create Kubernetes jobs in the cluster managed by `kubectl`. The `--from` flag is an optional argument that specifies the creation of a new job from an existing one. This means that a new job will be created with the same template, i.e., PodSpec and metadata, as the specified source job. The resulting job may have different UID, generation, and name, but its PodSpec and metadata will match those of the source job.'
        image: '[AI] `kubectl create job` is a command used to create a new Kubernetes Job in a cluster. A Job runs one or more replicas of a Pod with a specific container image, ensuring a desired number of replicas are running at any given time. The `--image` flag specifies the name of the Docker registry and the image tag to be used for the container in the newly created Job. For example, `kubectl create job my-job --image=myregistry/myimage:v1`.'
        output: '[AI] `kubectl create job` is a command used in Kubernetes to create a new Job object. A Job runs one or more replicas of a specified Pod, and ensures that a specified number of them are running at any given time by replacing failed Pods. The `--output` flag modifies the output format of the command''s response. Possible values include ''json'', ''yaml'', ''wide'', and ''table''. For example, `kubectl create job myjob --image=nginx --replicas=3 --output yaml > myjob.yaml` creates a new Job named "myjob" using the Nginx image, sets the desired number of replicas to 3, and saves the output in YAML format for later use.'
        save-config: '[AI] `kubectl create job` is a command used in Kubernetes to create a new job, which represents a batch workload. The `--save-config` flag saves the configuration of this specific command into a file named `job.yaml` in the current working directory. This allows users to apply the same configuration repeatedly using `kubectl apply`. In summary, `kubectl create job --save-config` creates a new Kubernetes job and saves its configuration for future use.'
        show-managed-fields: '[AI] `kubectl create job` is a command used to create a new Kubernetes Job in a cluster. The `--show-managed-fields` flag is an optional argument that provides more detailed output about the changes made during the creation of the Job object. Specifically, it shows the fields that were managed by the Kubernetes API and the differences between the desired state specified in the command and the existing state of the Job before creation. This can be helpful for understanding what changes were made and ensuring that the desired state was achieved.'
        template: |-
            [AI] `kubectl create job` is a command used to create a new Kubernetes Job in a cluster managed by `kubectl`. The `--template` option is a way to create the Job definition using a custom template file instead of inline YAML.

            This command creates a new Job based on the specified Kubernetes template file, which may include placeholders for values that are replaced with actual values at runtime. After creating the Job, `kubectl` will apply the template and create the necessary resources (Job and its associated Pods) according to the definitions in the template. This method can be useful when managing complex or repeated deployments of similar workloads.
        validate: '[AI] `kubectl create job` is a command used to create a new Kubernetes Job in a cluster. The `--validate` flag that can be added to this command is an optional argument that instructs the Kubernetes API server to perform validation checks on the provided YAML manifest before creating the Job object. This helps ensure that the manifest meets the required schema and syntax before being applied to the cluster, reducing potential errors. If validation passes, the Job will be created; otherwise, an error message will be returned.'
