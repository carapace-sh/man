# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: mkcert
description: simple tool for making locally-trusted development certificates
flags:
    -CAROOT: Print the CA certificate and key storage location
    -cert-file=: Customize the output paths
    -client: Generate a certificate for client authentication
    -csr=: Generate a certificate based on the supplied CSR
    -ecdsa: Generate a certificate with an ECDSA key
    -install=: Install the local CA in the system trust store
    -key-file=: Customize the output paths
    -p12-file=: Customize the output paths
    -pkcs12: 'Generate a ".p12" PKCS #12 file, also know as a ".pfx" file'
    -uninstall=: Uninstall the local CA (but do not delete it)
documentation:
    command: '[AI] `mkcert` is a simple tool for creating a Public Key Infrastructure (PKI) and generating locally-trusted SSL certificates for websites, without needing to use a Certificate Authority (CA). It''s written in Go and uses the Let''s Encrypt ACME protocol for domain validation during certificate generation. By running `mkcert` with a domain name as an argument, it will generate both a private key and a certificate file for that domain, suitable for self-signed SSL/TLS usage. The resulting certificates can be used to secure HTTPS communication between the local server and web browsers, without needing to pay for a certificate from a CA or deal with complex CA setup processes.'
    flag:
        CAROOT: '[AI] `mkcert` is a simple tool used to create a local CA (Certifying Authority) and generate SSL certificates for websites. The option `-CAROOT` specifies the root directory for storing the generated certificate authorities, keys, and certificates. No CA or root certificates are provided by default with mkcert, so this flag is necessary to create them when using mkcert for the first time in a new directory.'
        cert-file: '[AI] `mkcert` is a simple tool to create a local CA and generate SSL certificates for websites. The `-cert-file` option specifies the output file where the root certificate (CA) will be saved. This certificate can then be used to sign other certificates, allowing secure communication between servers and clients within your local network.'
        client: '[AI] `mkcert` is a simple tool to create a public key certificate authority and generate SSL certificates for local development and testing. The `-client` flag is used when generating a client certificate, in addition to a CA certificate. This flag ensures that the generated certificate pair (private key and public certificate) includes both the CA and client certificates. The client certificate can then be installed on a client system to secure communications between the client and the server using the generated SSL certificates.'
        csr: '[AI] `mkcert` is a simple tool for creating a local Certificate Authority (CA) and generating SSL certificates for websites. The command `mkcert -csr` is used to generate a Certificate Signing Request (CSR). A CSR is a file containing cryptographic key data that can be used to apply for an SSL certificate from a trusted CA or to create a self-signed certificate using the local CA created by `mkcert`. The output of this command includes both a private key and the CSR, which can be used as input when generating a new SSL certificate.'
        ecdsa: '[AI] `mkcert` is a simple tool to create a local CA and generate SSL certificates for websites, enabling HTTPS over custom domains. The `-ecdsa` option specifies that Elliptic Curve Digital Signature Algorithm (ECDSA) should be used for the private key generation when creating or renewing SSL certificates with mkcert. ECDSA is considered more secure than the older RSA algorithm and provides better encryption for smaller key sizes, making it a recommended choice for modern SSL certificate implementation.'
        install: '[AI] `mkcert` is a simple tool to create a local CA and generate SSL certificates for websites. The `-install` flag is used to install the local Certificate Authority (CA) certificate into the system''s Trusted Root Certification Authorities store on macOS, Windows or Linux systems. This enables the operating system to trust the locally generated certificates. After installation, you can use `mkcert` to generate SSL/TLS certificates for your local websites without having to purchase them from a Certificate Authority.'
        key-file: '[AI] `mkcert` is a simple tool to create a local CA and generate SSL certificates for websites. The `-key-file` option specifies the path to an existing private key file which will be used for the root CA or intermediate CA instead of creating a new one during certificate generation. This can be useful when managing certificates for multiple domains or environments, allowing you to reuse an existing key while generating new certificates.'
        p12-file: '[AI] `mkcert` is a simple tool to create a local CA and generate SSL certificates for websites. The option `-p12-file` specifies that an output file in Personal Information Exchange (PFX or P12) format should be generated, which includes the private key and certificate bundled together into a single password-protected file, suitable for importing into various applications and web servers that require both the private key and certificate.'
        pkcs12: '[AI] `mkcert` is a simple tool to create a public key certificate authority and generate SSL/TLS certificates for websites. The `-pkcs12` flag is an option used when creating a PKCS12 file, which is a password-protected archive containing an x.509 certificate chain and a private key. With this flag, mkcert generates not only the certificate but also wraps it into a PKCS12 file for secure storage and usage in various applications or web servers that support this format.'
        uninstall: '[AI] `mkcert` is a simple tool used to create a local Certificate Authority (CA) and generate SSL certificates for websites, all self-contained in the filesystem. The command `mkcert uninstall` is used to remove the previously installed CA and certificates from your system. It deletes the files related to mkCert in the default configuration directory which typically includes the CA key and certificate files. This operation should be performed with caution as it will revoke any existing certificates issued by that CA.'
