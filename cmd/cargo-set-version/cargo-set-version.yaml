# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: cargo-set-version
description: Change a package's version in the local manifest file
flags:
    --all: '[deprecated in favor of `--workspace`]'
    --bump=: Increment manifest version
    --dry-run: Print changes to be made without making them
    --exclude=: Crates to exclude and not modify
    --manifest-path=: Path to the manifest to upgrade
    --workspace: Modify all packages in the workspace
    -V, --version: Prints version information
    -h, --help: Prints help information
    -m, --metadata=: Specify the version metadata field (e.g. a wrapped libraries version)
    -p, --package=: Package id of the crate to change the version of
documentation:
    command: '[AI] `cargo-set-version` is a Cargo subcommand used to update the version number in a Rust project''s `Cargo.toml` file. It accepts a new version number as an argument and modifies the corresponding fields (major, minor, patch) accordingly based on semantic versioning rules. This command is particularly helpful when releasing a new version of your Rust library or executable. Using it ensures that all relevant version numbers are updated in one place, making it easier to manage dependencies and keep track of changes throughout your project''s development lifecycle.'
    flag:
        all: '[AI] `cargo-set-version` is a Cargo subcommand used to manage project versions in Rust projects. The command `cargo set-version --all` sets the major, minor, and patch version numbers of all packages in a multi-package workspace to the next version based on Semantic Versioning rules (i.e., increments major for breaking changes, minor for new features, and patch for bug fixes). It updates the Cargo.toml files accordingly.'
        bump: '[AI] `cargo-set-version` is a Cargo subcommand used to manage the version numbers of Rust projects. The command `--bump` followed by a specific semantic label such as `major`, `minor`, or `patch` increments the specified version number accordingly and updates the `Cargo.toml` file. For example, running `cargo set-version --bump major` will increment the major version number in `Cargo.toml`.'
        dry-run: '[AI] `cargo-set-version` is a Cargo subcommand used to manage the version numbers of your Rust projects. The `--dry-run` flag is an option that provides a preview of what would be done without actually executing any changes. When you run `cargo set-version --dry-run`, it will display the new versions that would be applied based on the configured versioning strategy, but it won''t update any files or make any other modifications to your project.'
        exclude: '[AI] `cargo-set-version` is a Cargo subcommand used to manage project versions in Rust programming language projects. The `--exclude` option is used to exclude specific directories or packages when setting the version number. For instance, if you have multiple crates within your project and only want to update the version of one, you can use `--exclude` to avoid affecting the other crates'' versions unintentionally. The argument to `--exclude` is a path or a package name.'
        help: |-
            [AI] `cargo-set-version` is a Cargo subcommand that helps manage and update the version number in a Rust project's `Cargo.toml`. The command comes with an optional argument, `--help`, which provides detailed information about how to use this command. Here's a brief summary of what you can find in the help text:

            - It explains that `cargo-set-version` is used to "Set version numbers for Crates in Cargo.toml."
            - It describes the command syntax and available subcommands: `[command] -- [version] | reset`, where `--` separates the command arguments from the Rust version number or the `reset` subcommand argument.
            - It lists a few examples of how to use the command:
              - To set the version number for the current crate, run `cargo cargo-set-version [version]`.
              - To update the dependencies' version numbers, run `cargo cargo-set-version -- [dependency_name] [version]`.
            - It explains that `reset` can be used as an alternative to setting individual versions, and it will reset all version numbers in `Cargo.toml` to their latest available values from the `package.index`.
            - It provides some useful tips, such as checking which dependencies need updates with `cargo outdated`.
            - Finally, it mentions that if no arguments are provided, `cargo cargo-set-version` will display a list of all crates and their current version numbers in the project's `Cargo.toml`.
        manifest-path: '[AI] `cargo-set-version` is a Cargo subcommand used to manage and update project version numbers in a Rust project''s `Cargo.toml` file. The `--manifest-path` option specifies the path to the manifest file, which by default is located in the current directory as `Cargo.toml`. This command reads the version number from the manifest and sets it to the new value provided, either explicitly or by interactively prompting for input.'
        metadata: '[AI] `cargo-set-version` is a Cargo subcommand used to manage project version numbers in Rust programming projects. The `--metadata` option modifies the `Cargo.toml` file metadata, specifically updating the given key with a new value for the project version number. Therefore, running `cargo-set-version --metadata version X.Y.Z` sets the version number to `X.Y.Z` in the project''s metadata.'
        package: '[AI] `cargo-set-version` is a Cargo subcommand used to manage and update the version number of Rust packages. The `--package` option specifies the name or path of the package for which the version will be updated. For example, `cargo set-version --package my_project 0.1.0` sets the version of `my_project` to `0.1.0`. The command can also be used with `--major`, `--minor`, and `--patch` flags to increment the major, minor, or patch components of the version number respectively.'
        version: '[AI] `cargo-set-version` is a command-line tool for managing Cargo.toml version numbers in Rust projects. The command `cargo-set-version --version` prints the current version number specified in the project''s Cargo.toml file. It is often used to check the version before publishing or releasing a new update.'
        workspace: '[AI] `cargo-set-version` is a Cargo subcommand used to manage the version numbers of Rust projects within a multi-project workspace. The `--workspace` flag indicates that the command should be run in the context of the entire workspace, rather than just the current project. This allows you to update the version number consistently across all projects within the workspace.'
