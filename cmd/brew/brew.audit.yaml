# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: audit
description: Check <formula> for Homebrew coding style violations
group: developer
flags:
    --arch: Audit the given CPU architecture
    --audit-debug: Enable debugging and profiling of audit methods
    --cask: Treat all named arguments as casks
    --debug: Display any debugging information
    --display-filename: Prefix every line of output with the file or formula name being audited
    --eval-all: Evaluate all available formulae and casks
    --except-cops=: Specify a comma-separated <cops> list to skip checking
    --except=: Specify a comma-separated <method> list to skip
    --fix: Fix style violations automatically using RuboCop's auto-correct feature
    --formula: Treat all named arguments as formulae
    --git: Run additional, slower style checks that navigate the Git repository
    --help: Show this message
    --installed: Only check formulae and casks that are currently installed
    --new: Run various additional style checks
    --no-signing: Audit for signed apps, which are required on ARM
    --online: Run additional, slower style checks that require a network connection
    --only-cops=: Specify a comma-separated <cops> list to check
    --only=: Specify a comma-separated <method> list to only run
    --os=: Audit the given operating system
    --quiet: Make some output more quiet
    --signing: Audit for signed apps, which are required on ARM
    --skip-style: Skip running non-RuboCop style checks
    --strict: Run additional, stricter style checks
    --tap=: Check the formulae within the given tap, specified as <user>`/`<repo>
    --token-conflicts: Audit for token conflicts
    --verbose: Make some output more verbose
documentation:
    command: '[AI] `brew audit` is a Homebrew command that checks for outdated, unused, or duplicate Formulas and Casks in your system. It scans your installed packages against the latest versions available on the Homebrew repository and provides suggestions to update, remove, or merge them to optimize your installation and maintain good system hygiene.'
    flag:
        arch: '[AI] `brew audit --arch` is a command used in Homebrew, a popular package manager for macOS. This specific command performs an arch audit, which checks your installed Homebrew packages against Apple''s official M1 and Intel silicon compatibility list (called the "Archives" or simply "Arches") to ensure that only compatible packages are running on your system based on its processor architecture. The goal is to maintain system stability and avoid potential issues with incompatible software.'
        audit-debug: '[AI] `brew audit --audit-debug` is a command used in Homebrew, a popular package manager for macOS, to perform an advanced security audit of installed packages and their dependencies. The `--audit-debug` flag enables more detailed debugging output, which can be useful for troubleshooting or gaining a deeper understanding of the audit process. This command checks for known vulnerabilities in formulae (Homebrew''s recipe files), outdated software versions, and any potential issues with dependencies. The output provides information on affected packages, their current version, available updates, and relevant CVE (Common Vulnerabilities and Exposures) numbers.'
        cask: '[AI] `brew audit --cask` is a command used in Homebrew, a popular package manager for macOS. This command performs an security analysis on installed Homebrew Cask (`--cask`) formulas (packages), which are used for installing GUI applications and other large, non-Portable files, checking them against the latest checksums from their original sources to ensure the integrity of the downloaded packages. It also checks if any of the cask formulas have known vulnerabilities or outdated versions, helping to keep your system secure and up-to-date.'
        debug: '[AI] `brew audit --debug` is a command used in Homebrew, a popular package manager for macOS. This command runs an audit of all installed Homebrew packages with enhanced debug output. The debug output provides more detailed information about each package, including its dependencies and installation details. This can be useful for troubleshooting issues or gaining a better understanding of the Homebrew installations on a system.'
        display-filename: '[AI] `brew audit --display-filename` is a command used in Homebrew, a popular package manager for macOS and Linux. This command is used to display the original filename of installed packages or dependencies that have known vulnerabilities. The output provides the formula name (e.g., `formula@version`) and the original filename (e.g., `package-name.tar.gz` or `package-name-1.0.0.bottle.tar.gz`) for each potentially vulnerable package, helping users identify where to focus their security updates.'
        eval-all: '[AI] `brew audit --eval-all` is a command used in Homebrew, a popular package manager for macOS and Linux, to evaluate the security of installed formulas (packages) and their dependencies against known vulnerabilities. The `--eval-all` flag instructs Homebrew to check all installed packages and their dependencies recursively, meaning it will evaluate not only directly installed packages but also those that are indirectly installed through dependencies. This command helps users keep their system secure by identifying and suggesting updates for packages with known security vulnerabilities.'
        except: '[AI] `brew audit --except` is a command used with Homebrew, a package manager for macOS. This command is used to check for outdated or insecure dependencies in installed packages, but excludes the checking of specific packages mentioned after the `--except` flag. For instance, `brew audit --except package1 package2` would run an audit on all packages except for `package1` and `package2`. This can be useful when wanting to check for issues in most packages while excluding certain ones that may not require attention or are known to have no vulnerabilities.'
        except-cops: '[AI] The `brew audit --except-cops` command is a function in Homebrew, a popular package manager for macOS, that checks installed formulas and casks (packages) for potential security vulnerabilities or outdated dependencies. The `--except-cops` flag excludes checking the Homebrew Core Packages Only (COPS), which are packages maintained by Homebrew''s core team and considered trusted and safe. By using this command, you will only receive an audit report on your installed formulas and casks that aren''t part of the COPS, allowing you to focus on potentially risky installations outside of Homebrew''s trusted sources.'
        fix: '[AI] `brew audit --fix` is a command used in Homebrew, a popular package manager for macOS. This command performs an analysis of installed packages and their dependencies to identify potential vulnerabilities or outdated formulas. The `--fix` flag enables automatic resolutions of identified issues by downloading and installing updated versions of the affected packages and their dependencies. It helps maintain a secure and up-to-date system.'
        formula: '[AI] The `brew audit --formula` command is a function provided by Homebrew, a popular package manager for macOS, to help evaluate the security and maintainability of installed Homebrew formulas. It scans each formula''s dependencies, checks their vulnerabilities against known databases like CVE and NVD, and displays potential issues along with recommended updates if available. This command helps users keep their systems secure and up-to-date while using Homebrew.'
        git: '[AI] `brew audit --git` is a command used with Homebrew, a popular package manager for macOS and Linux. This specific command initiates an audit of the installed formulas (software packages) against their upstream Git repositories to check for potential security vulnerabilities or outdated versions. By running this command, you can ensure that your system is using the most recent and secure versions of the installed packages.'
        help: '[AI] `brew audit --help` is a command used in Homebrew, a package manager for macOS. This command displays help information about the `brew audit` tool. It is designed to check installed formulas (Homebrew packages) and their dependencies for known vulnerabilities and outdated versions. Using `brew audit --help` provides details on how to use this command, including available options and arguments to customize the scan and output format.'
        installed: '[AI] `brew audit --installed` is a command provided by Homebrew, a popular package manager for macOS and Linux. This command performs a security vulnerability analysis on the installed packages in your Homebrew system, checking for known vulnerabilities and outdated versions. The output provides detailed information on each package, including its name, version, and any identified vulnerabilities along with their severity level and recommended mitigation. By running this command regularly, you can help ensure that your system''s software is up-to-date and secure.'
        new: '[AI] `brew audit --new` is a command used with Homebrew, a popular package manager for macOS. This specific command initiates a new audit scan of your installed Homebrew packages and their dependencies. The output will show any known vulnerabilities or outdated packages and provide recommended actions to update or remove them for security reasons.'
        no-signing: '[AI] `brew audit --no-signing` is a command used with Homebrew, a popular package manager for macOS. This command performs a security vulnerability check on installed packages without verifying their signatures. It scans the installed formulas and their dependencies against known vulnerabilities in various databases. By using `--no-signing`, the verification of the digital signatures of the Homebrew Formulae is bypassed, making the audit process faster but less secure, as it may install potentially malicious packages that have been tampered with. It''s important to note that running this command should be done with caution and only when you trust the sources from which you are installing packages.'
        online: '[AI] `brew audit --online` is a command used in Homebrew, a popular package manager for macOS. This command performs an online check of installed formulas and casks against Apple''s official macOS security policy called the XProtect and Gatekeeper. The goal is to ensure that no outdated or potentially harmful packages are present on your system. If any issues are found, they will be reported for your review and action. It helps maintain a secure environment for your Mac by keeping its software up-to-date with Apple''s approved list of packages.'
        only: '[AI] `brew audit --only` is a command used in Homebrew, a popular package manager for macOS. This specific command runs an audit check on all installed Homebrew packages to identify any known vulnerabilities or outdated dependencies. The "--only" flag limits the output to just the names of the packages with issues, without displaying additional details or suggestions for updates.'
        only-cops: '[AI] `brew audit --only-cops` is a command used in Homebrew, a popular package manager for macOS. The command performs an security audit on installed formulas (packages) and checks if any of them have known vulnerabilities or misconfigurations. The `--only-cops` option filters the output to only show formulas that have known Compatibility Issues (COPS). COPS are issues related to deprecated libraries or incompatible dependencies, which could potentially cause compatibility problems in future software updates. By using this command, users can proactively identify and address any potential issues with their installed packages for better system security and stability.'
        os: '[AI] The `brew audit --os` command is a function in Homebrew, a popular package manager for macOS, that checks installed packages for potential security vulnerabilities and compatibility issues with the current operating system (macOS) version. It scans through the list of installed packages and their dependencies to identify any outdated or insecure software. The output displays each issue with relevant information such as the affected package, its vulnerable version, the latest available secure version, and a link to more details. Using this command helps maintain a secure and up-to-date Homebrew installation.'
        quiet: '[AI] `brew audit --quiet` is a command used in Homebrew, a popular package manager for macOS. This command performs an security vulnerability check on all installed packages and their dependencies. The `--quiet` option suppresses the output of informational messages, only displaying error messages if any insecure packages are found.'
        signing: '[AI] `brew audit --signing` is a command used in Homebrew, a popular package manager for macOS and Linux systems. This command checks the signing status of installed Homebrew formulae, which are the recipes used to build and install software packages. It ensures that only officially signed formulae from the Homebrew project are installed to maintain security and authenticity of the software dependencies in your system. If any unsigned or outdated signatures are detected, `brew audit --signing` will notify you for further action.'
        skip-style: '[AI] `brew audit --skip-style` is a command used in Homebrew, a popular package manager for macOS, to check for potential security vulnerabilities and outdated packages in your system''s installed software. The `--skip-style` option instructs the command to exclude checks related to style guides and coding standards, making it faster by focusing only on more critical security checks.'
        strict: '[AI] `brew audit --strict` is a command used in Homebrew, a popular package manager for macOS. This command performs an strict inspection of installed packages and their dependencies against Apple''s official macOS software repository (the Mac App Store) and Homebrew''s own formulae to ensure they are up-to-date, secure, and free from known vulnerabilities. It flagged outdated or potentially problematic packages for manual review or removal.'
        tap: '[AI] `brew audit --tap` is a command used with Homebrew, a popular package manager for macOS and Linux. This command is used to review the formulae (packages) in a specific Homebrew Tap (repository), which can be located on GitHub or another source. The goal is to ensure the security and validity of these formulae before adding them to your local Homebrew installation. The output will display any potential vulnerabilities, outdated dependencies, or other issues with the formulae.'
        token-conflicts: '[AI] `brew audit --token-conflicts` is a command used in Homebrew, a popular package manager for macOS. This command performs an analysis of installed formulas and their dependencies to identify potential token conflicts between GitHub Personal Access Tokens (PATs) and repositories. A token conflict occurs when two or more formulas use the same PAT with write permissions, increasing the risk of unintended changes in the repository. By running `brew audit --token-conflicts`, Homebrew helps users maintain better security practices and reduce potential risks associated with managing multiple formulas using the same GitHub token.'
        verbose: '[AI] `brew audit --verbose` is a command used in Homebrew, a popular package manager for macOS. This command performs an analysis of installed formulas (Homebrew packages) checking for potential security vulnerabilities and outdated versions. The `--verbose` flag increases the amount of output displayed during the audit process, providing more detailed information about each check.'
