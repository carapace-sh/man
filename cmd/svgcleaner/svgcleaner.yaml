# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: svgcleaner <in-file> <out-file>
description: clean up your SVG files from the unnecessary data
flags:
    --allow-bigger-file: Allow bigger file
    --apply-transform-to-gradients=: Apply transformations to gradients
    --apply-transform-to-paths=: Apply transformations to paths
    --apply-transform-to-shapes=: Apply transformations to shapes
    --convert-segments=: Convert path segments into shorter ones
    --convert-shapes=: Convert basic shapes into paths
    --coordinates-precision=: Set coordinates numeric precision
    --copy-on-error: Copy an original file to the destination on error
    --group-by-style=: Group elements by equal styles
    --indent=: Set XML nodes indent
    --join-arcto-flags=: Join ArcTo flags
    --join-style-attributes=: Join presentational attributes
    --list-separator=: Set number list separator
    --merge-gradients=: Merge gradients
    --multipass: Clean a file multiple times
    --no-defaults: Reset default flags to 'no'
    --paths-coordinates-precision=: Set path's coordinates numeric precision
    --paths-to-relative=: Convert path segments into relative ones
    --properties-precision=: Set properties numeric precision
    --quiet: Show only warnings and errors
    --regroup-gradient-stops=: Regroup gradient 'stop' elements
    --remove-comments=: Remove XML comments
    --remove-declarations=: Remove XML declarations
    --remove-default-attributes=: Remove attributes with default values
    --remove-desc=: Remove 'desc' element
    --remove-dupl-cmd-in-paths=: Remove subsequent segments command from paths
    --remove-dupl-fegaussianblur=: Remove duplicated 'feGaussianBlur' elements
    --remove-dupl-lineargradient=: Remove duplicated 'linearGradient' elements
    --remove-dupl-radialgradient=: Remove duplicated 'radialGradient' elements
    --remove-gradient-attributes=: Remove inheritable gradient attributes
    --remove-invalid-stops=: Remove invalid 'stop' elements
    --remove-invisible-elements=: Remove invisible elements
    --remove-metadata=: Remove 'metadata' element
    --remove-needless-attributes=: Remove attributes that doesn't belong to this element
    --remove-nonsvg-attributes=: Remove non-SVG attributes
    --remove-nonsvg-elements=: Remove non-SVG elements
    --remove-text-attributes=: Remove text-related attributes if there is no text
    --remove-title=: Remove 'title' element
    --remove-unreferenced-ids=: Remove unreferenced 'id' attributes
    --remove-unresolved-classes=: Remove unresolved classes from 'class' attributes
    --remove-unused-coordinates=: Remove unused coordinate attributes
    --remove-unused-defs=: Remove unused referenced elements
    --remove-unused-segments=: Remove unused path segments
    --remove-version=: Remove 'version' and 'baseProfile' attributes
    --remove-xmlns-xlink-attribute=: Remove an unused 'xmlns:xlink' attribute
    --resolve-use=: Resolve 'use' elements
    --simplify-transforms=: Simplify transform matrices
    --transforms-precision=: Set transform values numeric precision
    --trim-colors=: 'Use #RGB notation'
    --trim-ids=: Trim 'id' attributes
    --trim-paths=: Use compact notation for paths
    --ungroup-defs=: Ungroup 'defs' element
    --ungroup-groups=: Ungroup groups
    --use-implicit-cmds=: Use implicit LineTo commands
    -V, --version: Print version information
    -c, --stdout: Print result to the standard output
    -h, --help: Print help information
documentation:
    command: '[AI] `svgcleaner` is a command-line tool for cleaning and optimizing Scalable Vector Graphics (SVG) files. It removes unnecessary metadata, comments, and other non-essential data from SVG files to reduce file size and improve performance in web applications or other projects. The tool supports multiple input formats, including SVG, SVGZ, and XML, and produces cleaned output as SVG.'
    flag:
        allow-bigger-file: '[AI] `svgcleaner` is a command-line tool used for cleaning and optimizing Scalable Vector Graphics (SVG) files by removing unnecessary metadata, comments, and other non-essential elements to reduce file size and improve performance. The option `--allow-bigger-file` allows the user to process SVG files larger than the default limit set by `svgcleaner`. By using this flag, one can clean even oversized SVG files without encountering errors due to file size restrictions.'
        apply-transform-to-gradients: '[AI] `svgcleaner` is a command-line tool for simplifying and cleaning SVG (Scalable Vector Graphics) files. The option `--apply-transform-to-gradients` instructs the tool to apply any transformations defined in the parent element to the fill or stroke gradients within the SVG file. In simpler terms, this flag ensures that any transformations applied to the container of a gradient also get applied to the gradient itself. This results in consistent rendering and positioning of the gradients within the overall SVG design.'
        apply-transform-to-paths: |-
            [AI] `svgholder` is a popular SVG (Scalable Vector Graphics) library for Vue.js, used to render SVG symbols in components. `svgcleaner` is a utility used with `svgholder`, which helps optimize and clean up SVG code.

            The command `--apply-transform-to-paths` is one of the transformations offered by `svgcleaner`. It applies matrix transformations (translate, rotate, scale) directly to path data in an SVG file instead of defining them as separate `<g>` or `<matrix>` elements. This can lead to smaller and more efficient SVG code.
        apply-transform-to-shapes: '[AI] `svggenerator --apply-transform-to-shapes` is a command used with SVGCleaner, an SVG optimization tool. This option applies matrix transformations defined in the SVG file to the shapes within the file. The purpose is to simplify and optimize the SVG by removing redundant transformations and combining transformations whenever possible. This results in smaller file size and improved performance for rendering the SVG.'
        convert-segments: '[AI] `svgexport --convert-segments` is a command from the SVG cleaner library that converts path data in an SVG file into its segmented form. Segmented paths are broken down into individual straight lines, curves, and other basic shapes, making the SVG file easier to edit and more compatible with some software and devices. This command does not change the visual representation of the graphics but simplifies their underlying structure.'
        convert-shapes: '[AI] `svgbob-parser` or `svgnormalize` with the command `--convert-shapes` is a utility used in SVG (Scalable Vector Graphics) processing. It cleans up and optimizes SVG files by removing unnecessary data, converting complex shapes to simpler paths, and standardizing the structure of the SVG code. The output is often smaller in file size yet retains visual fidelity. This makes the processed SVG more efficient for web usage, while still maintaining compatibility with various browsers.'
        coordinates-precision: '[AI] `svgcleaner` is a command-line tool for cleaning, optimizing and transforming Scalable Vector Graphics (SVG) files. The option `--coordinates-precision` specifies the desired precision of SVG coordinate values. By default, `svgcleaner` rounds coordinates to two decimal places. With this option, you can adjust the precision level up or down by providing a number as an argument: a positive value increases the number of decimal places, while a negative value decreases it. For instance, using `--coordinates-precision 4` will round coordinates to four decimal places, which might be useful for high-precision applications or when importing SVG files into other software that requires more decimal places than the default setting provides.'
        copy-on-error: '[AI] `svgscheduler` is a command-line tool used for optimizing and cleaning SVG files. The option `--copy-on-error` is a feature that allows Svgcleaner to make copies of input SVG files with the original filename suffixed by "_backup" when an error occurs during the optimization process. This way, users can keep their original files safe while trying to fix any issues that prevented successful optimization.'
        group-by-style: |-
            [AI] `svgcleaner` is a command-line tool for cleaning and optimizing SVG (Scalable Vector Graphics) files. The `--group-by-style` option is one of its features.

            When this flag is used, `svgcleaner` groups together elements with identical style properties into a single parent group in the output SVG file. This can help reduce file size and improve rendering performance by minimizing redundant data. The resulting structure may be easier to work with for some applications as well.
        help: |-
            [AI] `svgheracle --help` is a command-line tool used for parsing, cleaning, and transforming Scalable Vector Graphics (SVG) files. The `--help` option provides information about how to use the tool effectively. Here's a brief summary of the output:

            - It explains that 'svgheracle' is an SVG parser and cleaner.
            - It lists available commands or subcommands, such as 'parse', 'clean', 'transform', etc., with brief descriptions for each.
            - It provides usage examples and options for each command. For instance, `svgheracle parse input.svg > output.xml` to parse an SVG file into an XML format.
            - It also explains how to get help on a specific command or option by using the `--help` flag followed by the command name, e.g., `svgheracle clean --help`.
            - Additional options like version checking, quiet mode, and others are mentioned with their descriptions.
        indent: '[AI] `svginline` and `svghtm` are popular command-line tools used for minimizing the size of Scalable Vector Graphics (SVG) files by inlining the data for embedded images and removing unnecessary metadata. Among these two, `svgtm` specifically focuses on cleaning up the indentation and formatting of an SVG file without modifying its structure or content. The `--indent` flag is a command-line option available with `svgtm`. It is used to control the level of indentation applied during the cleaning process. By default, it sets the indentation to the minimum possible, aiming at maximally compacted output. Using this flag helps achieve smaller SVG file sizes by removing excess white spaces.'
        join-arcto-flags: '[AI] `svgcleaner` is a command-line tool used for optimizing and cleaning SVG (Scalable Vector Graphics) files. The option `--join-arcto-flags` is one of its features that helps in merging adjacent `<arcTo>` elements into a single `<path>` element, which can reduce the file size and improve rendering performance by minimizing the number of commands sent to the rendering engine. This optimization can be particularly useful for complex SVG shapes with numerous `<arcTo>` segments.'
        join-style-attributes: '[AI] `svghost svgcleaner` is a popular command-line tool used to optimize and clean SVG (Scalable Vector Graphics) files by removing unnecessary data and metadata. The option `--join-style-attributes` merges inline style attributes with their corresponding elements in an SVG file. This can help minimize file size by reducing the number of attributes, ultimately resulting in a more streamlined and efficient file.'
        list-separator: '[AI] `svgbob-mvg-transformer`''s `svgcleaner` command is a tool used for cleaning and optimizing Scalable Vector Graphics (SVG) files. The option `--list-separator` specifies the separator to use between entries in an SVG list, such as the fill or stroke property of a path element. By default, it uses semicolon `;`, but you can set this option to another character like comma `,` by providing the flag `--list-separator=<character>`. For example, `svgcleaner --list-separator=, input.svg > output.svg`.'
        merge-gradients: '[AI] `svgsymbols svgcleaner` is a command-line tool for cleaning and optimizing SVG (Scalable Vector Graphics) files. The `--merge-gradients` option instructs the tool to merge identical gradient definitions within an SVG document into a single definition, reducing the file size by eliminating redundancy. This can be especially beneficial when dealing with complex SVG graphics that contain multiple occurrences of similar gradients.'
        multipass: |-
            [AI] `svganimate` is a tool for creating SVG animations from an SVG file and a JavaScript file defining the animation keyframes. `svgcleaner` is another SVG processing tool, specifically designed to remove unnecessary data from SVG files for better file size optimization.

            The `--multipass` option in `svgcleaner` is used for applying multiple cleaning passes. In each pass, different types of optimizations are performed:

            1. Removal of unused elements and styles, such as empty groups, invisible shapes, and unnecessary attributes.
            2. Simplification of paths by combining, merging, and eliminating redundant path data.
            3. Transformation optimization that reduces the number of transformations applied to each element in the SVG document.
            4. Attribute grouping to combine multiple similar attributes into a single `<style>` block or an attribute set.
            5. Style normalization for consistent application of styles across the entire document.

            The `--multipass` option applies these cleaning passes sequentially, allowing for more thorough SVG optimization and potentially significant file size reduction.
        no-defaults: '[AI] `svghanimation svgcleaner --no-defaults` is a command-line tool used to clean and optimize Scalable Vector Graphics (SVG) files for better performance and smaller file size. The `--no-defaults` option disables the application of default settings or rules, allowing users to manually configure cleaning options according to their specific needs.'
        paths-coordinates-precision: |-
            [AI] `svgcleaner` is a command-line tool used for cleaning and optimizing Scalable Vector Graphics (SVG) files. The option `--paths-coordinates-precision` controls the level of precision in reporting and storing the coordinates of path commands in the SVG file.

            By default, `svgcleaner` maintains the original coordinates in the SVG file with high precision, but this can result in larger file sizes and longer processing times. The `--paths-coordinates-precision` option allows you to specify a lower level of precision for reporting and storing path commands' coordinates.

            For example, using `--paths-coordinates-precision=2` will round the reported and stored coordinates to the nearest two decimal places. This can significantly reduce file size and improve processing performance without visibly altering the appearance of the graphic. However, setting a precision level that is too low could potentially result in loss of accuracy or visual distortion.

            In summary, the `--paths-coordinates-precision` option allows you to trade off between file size, processing time, and accuracy by controlling the precision of path commands' coordinates reporting and storage when using `svgcleaner`.
        paths-to-relative: '[AI] `svgsimple` is a command-line tool for simplifying and cleaning up SVG (Scalable Vector Graphics) files. The `--paths-to-absolute` option, when used with `svgsimple`, converts all absolute path references in the SVG file to relative paths based on the document element''s ''viewBox''. This change can reduce the file size of complex SVG graphics by minimizing the amount of data needed for the absolute path references. The resulting file is easier to include in other projects and has a smaller payload, making it faster to load and more efficient overall.'
        properties-precision: |-
            [AI] `svgcleaner` is a command-line tool used to clean and optimize SVG (Scalable Vector Graphics) files. The `--properties-precision` option relates to the level of precision in handling floating point properties like width, height, or transform values in an SVG file.

            The default behavior of `svgcleaner` is to round off these properties to the nearest pixel value (single precision). However, with `--properties-precision` set to a higher value like double or decimal number, it maintains the original floating point values during cleaning and optimization processes for more accurate results. This option is useful when dealing with complex SVG graphics that require high level of precision.
        quiet: '[AI] `svghanize` is a library for converting SVG (Scalable Vector Graphics) files to inline CSS and HTML, making it easier to include SVG graphics in web projects. The command `svgcleaner --quiet` is used with this library for cleaning and optimizing SVG files, specifically silencing the verbose output. This means that no messages or progress reports will be displayed during the process. So, using `svghanize svgfile.svg --quiet` would quietly convert and clean the given SVG file, producing only the generated HTML and CSS code without any extra console output.'
        regroup-gradient-stops: '[AI] `svghonor --regroup-gradient-stops` is a command in SVGCleaner, an SVG optimization tool. This option reorganizes the gradient stops within a single gradient element into contiguous groups based on their color values, thereby reducing the number of gradient elements and simplifying the SVG file for more efficient rendering and smaller file size.'
        remove-comments: '[AI] `svgcleaner --remove-comments` is a command used with the SVG cleaning tool, `svgcleaner`. This specific option instructs the tool to remove all comments from an SVG (Scalable Vector Graphics) file during the cleaning process. Comments in SVG files are optional and do not affect the graphical representation of the image; they''re mainly for human-readability, used by developers or designers to add descriptions, instructions, or notes within the code. By using this command, the output SVG will have a cleaner, more streamlined code without any comments included.'
        remove-declarations: '[AI] `svgcleaner --remove-declarations` is a command-line tool used to clean and optimize Scalable Vector Graphics (SVG) files. The specific option `--remove-declarations` instructs the tool to eliminate all unused SVG declarations, including styles, shapes defined using <path>, <rect>, <ellipse>, <polygon>, <polyline>, and custom elements that are not referenced anywhere in the document. This results in a smaller and more efficient SVG file.'
        remove-default-attributes: '[AI] `svgbob-mupuf''s svgcleaner is a command-line tool used to clean and minimize SVG files by removing unnecessary data and default attributes. The option `--remove-default-attributes` instructs the tool to eliminate default attributes, which are attributes whose values are predefined for certain elements. By doing this, the output file can be smaller in size since these attributes are not required for rendering but add unnecessary data. It is important to note that removing such attributes might affect accessibility or other functionalities depending on the context of the SVG file.'
        remove-desc: '[AI] `svganimate` is a popular library for creating SVG animations using JavaScript. The `svgcleaner` command line tool is often used in conjunction with it to optimize and clean SVG files. The specific flag `--remove-desc` instructs `svgcleaner` to delete all description elements (`<desc>`) from the input SVG file, which are typically used for providing documentation about the content of an SVG image. By removing them, the size of the SVG file can be slightly reduced without affecting its visual appearance or functionality.'
        remove-dupl-cmd-in-paths: |-
            [AI] `svghub svgcleaner` is a command-line tool used for cleaning, optimizing and transforming Scalable Vector Graphics (SVG) files. The specific option `--remove-dupl-cmd-in-paths` instructs the tool to remove duplicate "command" instructions in the SVG path data.

            Path data in SVG consist of a series of commands like "M" for move, "L" for line and "C" for curve, followed by their respective coordinates or control points. When multiple identical commands appear consecutively, they can be merged to reduce file size and improve rendering performance without affecting the visual representation. This option helps achieve that optimization.
        remove-dupl-fegaussianblur: '[AI] `svgcleaner` is a command-line tool for cleaning and optimizing Scalable Vector Graphics (SVG) files. The given option `--remove-dupl-feGaussianBlur` instructs the tool to remove duplicate instances of the `feGaussianBlur` filter in an SVG document, resulting in smaller file size and improved performance without losing the visual effect when only one instance is needed.'
        remove-dupl-lineargradient: '[AI] `svgcleaner` is a command-line tool used to optimize and clean SVG (Scalable Vector Graphics) files. The option `--remove-dupl-lineargradient` instructs the tool to eliminate duplicate linear gradient definitions in the SVG file. This helps reduce the file size by eliminating redundant data.'
        remove-dupl-radialgradient: '[AI] `svgcleaner` is a command-line tool used to optimize and clean SVG (Scalable Vector Graphics) files. The option `--remove-dupl-radialgradient` is used to eliminate duplicate radial gradient definitions within an SVG document. Radial gradients define the distribution of colors in a circular or elliptical shape. When multiple elements in an SVG file share the same radial gradient definition, it can lead to increased file size and unnecessary complexity. The `--remove-dupl-radialgradient` flag allows you to remove those duplicate definitions and simplify the SVG file for more efficient rendering and smaller file sizes.'
        remove-gradient-attributes: '[AI] `svghippie svgcleaner` is a command-line tool for parsing, cleaning, and transforming Scalable Vector Graphics (SVG) files. The specific command `--remove-gradient-attributes` instructs it to delete all attributes related to SVG gradient definitions within the input file. This results in a simplified SVG with only the basic shapes and colors remaining.'
        remove-invalid-stops: '[AI] `svgzcleaner` is a command-line tool used for optimizing and cleaning SVG (Scalable Vector Graphics) files. The specific option `--remove-invalid-stops` instructs the tool to eliminate any Stop elements in the SVG that have an invalid color value or index. These Stop elements can cause rendering issues or errors, so removing them can improve the overall quality and consistency of the SVG file.'
        remove-invisible-elements: '[AI] `svgcleaner` is a command-line tool for optimizing and cleaning Scalable Vector Graphics (SVG) files. The `--remove-invisible-elements` option is used to eliminate invisible elements from the SVG data, reducing file size without affecting visible content or structure of the image. By removing empty groups, hidden shapes with no fill or stroke, and other unnecessary data, this option enhances the efficiency of the SVG document, making it lighter and faster to load.'
        remove-metadata: '[AI] `svginline` and `svgcleaner` are popular SVG optimization tools used to minimize file size by removing unnecessary data, such as metadata and comments from Scalable Vector Graphics (SVG) files. The command `svgcleaner --remove-metadata` specifically instructs the tool to eliminate metadata information from the input SVG file while cleaning it. Metadata contains data about the SVG document, like its title, author, description, etc., and is not essential for rendering the graphic. By removing metadata, the output SVG file becomes smaller in size.'
        remove-needless-attributes: '[AI] `svgcleaner --remove-needless-attributes` is a command-line tool for optimizing and cleaning SVG (Scalable Vector Graphics) files. This specific option, `--remove-needless-attributes`, instructs the tool to eliminate unnecessary attributes from the SVG code, making it more streamlined without affecting the visual appearance. This results in smaller file size and improved performance in various applications.'
        remove-nonsvg-attributes: '[AI] `svghoses svgcleaner` is a command-line tool used to clean, optimize and convert SVG (Scalable Vector Graphics) files. The option `--remove-nonsvg-attributes` instructs the tool to eliminate all non-SVG attributes from the input file, leaving only the SVG code behind. This results in a cleaner and more efficient SVG file by removing any unwanted or redundant data that is not essential for vector graphics rendering.'
        remove-nonsvg-elements: '[AI] `svginline` and `svgcleaner` are command-line tools used for optimizing Scalable Vector Graphics (SVG) files. The `--remove-nonsvg-elements` option in `svgcleaner` is used to remove all non-SVG elements from an SVG file, effectively converting it into a pure SVG. This results in a smaller file size and improved performance for rendering the graphic as SVG only contains vector data, which can be more efficiently processed by web browsers or other SVG-rendering engines.'
        remove-text-attributes: '[AI] `svgcleaner --remove-text-attributes` is a command used in SVG (Scalable Vector Graphics) image processing with a specific focus on text attributes. The flag removes all text elements'' attributes except for their content, transformations, and styling within the SVG markup. This operation can help simplify or optimize SVG files by reducing unnecessary data and potentially improving rendering performance without affecting the displayed text itself.'
        remove-title: '[AI] `svgbob-cli` is a command-line tool for optimizing and cleaning SVG (Scalable Vector Graphics) files. The specific command `svgcleaner --remove-title` is used to remove the title element from an SVG file. This can be useful for reducing file size or when the title is not needed in the final output. The flag `--remove-title` instructs `svgbob-cli` to exclude the title during the cleaning process.'
        remove-unreferenced-ids: '[AI] `svgtopjs` is a popular library for converting Scalable Vector Graphics (SVG) files to JavaScript for web use. `svgcleaner` is a utility used in conjunction with `svgtopjs`, specifically to clean and optimize SVG files before conversion. The command `--remove-unreferenced-ids` removes IDs from elements in the SVG file that are not referenced elsewhere, reducing the size of the resulting JavaScript file without impacting the rendered output. This can lead to faster loading times for web pages.'
        remove-unresolved-classes: '[AI] `svgcleaner` is a command-line tool used to clean and optimize Scalable Vector Graphics (SVG) files. The option `--remove-unresolved-classes` instructs the tool to eliminate any SVG classes that are not referenced within the specified file, thereby reducing unnecessary data and potentially improving file size and load times.'
        remove-unused-coordinates: '[AI] `svghanize` is a tool used to convert Inkscape''s native .svg files into scalable Vector Graphics (SVG) format suitable for web use. The command `svgcleaner --remove-unused-coordinates` is used with the `svghanize` output. It removes unnecessary coordinate data from the SVG file, reducing its size and complexity without affecting the visual representation of the graphic. This optimization is beneficial when sharing or distributing SVG files online, as smaller files load faster and use fewer resources.'
        remove-unused-defs: '[AI] `svgtoplan-svgcleaner` is a command-line tool used to optimize and clean SVG (Scalable Vector Graphics) files. The option `--remove-unused-defs` instructs the tool to eliminate unused definition blocks, such as unreferenced symbols or styles, from the SVG file. By doing so, it helps reduce the overall file size without affecting the visual representation of the graphical content in the SVG document. This optimization can contribute to faster rendering and download times for web applications.'
        remove-unused-segments: '[AI] `svgcleaner --remove-unused-segments` is a command used with SVGCleaner, an SVG (Scalable Vector Graphics) optimization tool. This specific option instructs the tool to remove unused path data segments from the SVG file. Unused segments are those that do not contribute to rendering visible parts of the image, thus reducing its size and improving its loading time without affecting the appearance.'
        remove-version: '[AI] `svgcleaner` is a command-line tool used for cleaning and optimizing Scalable Vector Graphics (SVG) files. The option `--remove-version` instructs the tool to eliminate metadata, specifically SVG version information, from the input SVG file during the cleanup process. This can help reduce file size and improve compatibility across various software applications that may not support or require the specified version of SVG.'
        remove-xmlns-xlink-attribute: '[AI] `svgsimple` is a command-line tool for simplifying and cleaning SVG (Scalable Vector Graphics) files. The specific option `--remove-xmlns-xlink-attribute` instructs it to eliminate the XML namespace attributes for "xlink" from the cleaned SVG data. These attributes are used to define external links within an SVG document, but removing them might be desirable in certain cases to minimize file size or simplify the code structure.'
        resolve-use: '[AI] `svgcleaner` is a command-line tool for cleaning and optimizing Scalable Vector Graphics (SVG) files. The option `--resolve-use` resolves all imported SVG documents, fonts, and other resources referenced in the input SVG file(s), making them embedded within the output SVG file(s). This can reduce the number of external requests required for rendering and improve overall performance.'
        simplify-transforms: |-
            [AI] `svgbob-cli` is a popular SVG optimization tool that includes a utility called `svgcleaner`. The `--simplify-transforms` option is one of its features.

            When this option is used, `svgcleaner` simplifies transformations applied to paths and shapes in an SVG file. It aims to reduce the number of transformation operations by combining them into a single one if possible, making the resulting SVG data smaller and easier to parse. This can be especially beneficial for large or complex SVG files.
        stdout: '[AI] `svgsimmer --stdout` is a command-line tool for optimizing and cleaning Simple Vector Graphics (SVG) files. The "--stdout" option indicates that the output of the tool should be written to standard output stream instead of saving it to a file. In summary, this command processes SVG input in the standard input and outputs the cleaned and optimized result directly to the console.'
        transforms-precision: |-
            [AI] `svgcleaner` is a command-line tool used for optimizing and cleaning SVG (Scalable Vector Graphics) files. The option `--transforms-precision` controls the precision of transform matrix calculations during the optimization process.

            By default, `svgcleaner` performs transform calculations with double precision to ensure maximum accuracy. However, in some cases, you might want to reduce the precision level to save file size or processing time. Setting a lower value for this option will result in single-precision or even floating-point rounded transform matrix calculations.

            Keep in mind that decreasing the precision may lead to slight visual differences or accuracy loss in complex transformations. Therefore, it's essential to test your optimized SVG files thoroughly after using a lower precision level.
        trim-colors: '[AI] `svgzcleaner` is a command-line tool used for optimizing and cleaning SVG (Scalable Vector Graphics) files. The `--trim-colors` option is one of its features. This option removes unused colors from the SVG file, reducing the file size by eliminating unnecessary data. As a result, it enhances the overall performance and efficiency of the SVG without affecting the visual appearance of the graphic.'
        trim-ids: |-
            [AI] `svgbob-compressor` is a popular SVG (Scalable Vector Graphics) optimization tool with several command line options. The `--trim-ids` flag is one of them.

            When an SVG document is created, each element within it is assigned a unique ID. These IDs are used for referencing other elements within the document. However, in some cases, these IDs may not be necessary or can be simplified without affecting the functionality of the SVG.

            The `--trim-ids` option in `svgbob-compressor` is used to automatically remove unused or redundant IDs from the SVG file, resulting in a cleaner and more efficient document. By doing so, it reduces the size of the SVG file without affecting its appearance or functionality.
        trim-paths: '[AI] `svgsimmer --trim-paths` is a command-line tool used to optimize and clean Scalable Vector Graphics (SVG) files. The `--trim-paths` option specifically refers to the process of simplifying and removing unnecessary points from SVG path data, reducing file size and improving rendering performance without losing significant visual quality. This results in smaller and more efficient SVG files for web usage.'
        ungroup-defs: |-
            [AI] `svgtopng` or `svgcleaner` is a command-line tool used to convert Scalable Vector Graphics (SVG) files to other formats like PNG or optimize SVG files. The `--ungroup-defs` option is one of its features.

            When an SVG file contains symbol definitions, grouping these symbols within another group, the resulting SVG file size can be increased due to redundant data. The `--ungroup-defs` flag in `svgtopng` or `svgcleaner` command untgroups these defs, removing the unnecessary nesting and thus reducing the file size. This results in a cleaner, more optimized SVG file.
        ungroup-groups: '[AI] `svgcleaner` is a command-line tool for optimizing and cleaning Scalable Vector Graphics (SVG) files. The `--ungroup-groups` option is used to flatten all groups in an SVG file. In other words, it breaks down each group (a collection of graphical elements) into individual elements, so that each element can be selectively edited or manipulated independently. This can be useful for converting complex SVGs into simpler ones with easier-to-understand structures.'
        use-implicit-cmds: |-
            [AI] `svgcleaner` is a command-line tool for cleaning and optimizing Scalable Vector Graphics (SVG) files. The option `--use-implicit-cmds` is used to enable the execution of implicit commands in the SVG file.

            Implicit commands are SVG processing instructions that do not require a corresponding XML tag or attribute to be present in the file. These commands can affect various aspects of the rendering and behavior of the SVG graphics, such as viewBox settings, transformations, or filter effects.

            By default, `svgcleaner` removes implicit commands because they are not part of the SVG document's structure but rather instructions for the rendering engine. However, some implicit commands are essential for preserving the correct rendering and functionality of certain complex SVG files. The `--use-implicit-cmds` option allows you to include these implicit commands in the cleaned output.
        version: '[AI] `svgcleaner --version` is a command used in the terminal or command prompt to check for the current version of the SVGCleaner tool. SVGCleaner is an open-source SVG (Scalable Vector Graphics) cleaning and optimization tool, which removes unnecessary metadata, comments, and other redundant data from SVG files without altering their visual appearance, making them smaller in size for faster rendering and easier transmission over the web. This command displays the version number of the installed SVGCleaner application.'
