# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: invoke
description: Invoke an OpenFaaS function
flags:
    --content-type=: The content-type HTTP header such as application/json
    --envsubst: Substitute environment variables in stack.yml file
    --key=: key to be used to sign the request (must be used with --sign)
    --name=: Name of the deployed function
    --query*=: pass query-string options
    --sign=: name of HTTP request header to hold the signature
    --tls-no-verify: Disable TLS validation
    -H, --header*=: pass HTTP request header
    -a, --async: Invoke the function asynchronously
    -g, --gateway=: Gateway URL starting with http(s)://
    -m, --method=: pass HTTP request method
    -n, --namespace=: Namespace of the deployed function
documentation:
    command: '[AI] `faas-cli invoke` is a command used in the FaaS (Function-as-a-Service) ecosystem with the FaaS CLI tool. This command is responsible for triggering the execution of a specific function by passing required data as input. When invoked, the FaaS runtime environment processes the request and returns the output of the executed function. In simpler terms, it''s used to call a serverless function and get the response.'
    flag:
        async: '[AI] `faas-cli invoke --async` is a command used in the FaaS (Function-as-a-Service) context with the Faas-cli tool. This command is used to invoke a specific function asynchronously, meaning that the call does not block the execution of further commands or scripts. The result of the function execution is returned in an event object that can be processed later, making it suitable for background tasks and non-blocking workflows.'
        content-type: |-
            [AI] The `faas-cli invoke` command is a tool provided by FaaS (Function-as-a-Service) frameworks like OpenFaas and Fusaka, which allows users to trigger the execution of a function locally or in the cloud.

            The `--content-type` option specifies the MIME type of the input data that will be passed as the request body when invoking the function. For example, if your input is JSON, you would use `application/json`. Other common content types include `application/xml`, `text/plain`, and `application/octet-stream` for binary data.
        envsubst: '[AI] `faas-cli invoke` is a command provided by the FaaS (Function-as-a-Service) CLI tool to execute a FaaS function locally or in the cloud. The `--envsubst` flag is an optional argument that performs environment variable substitution in the request body or script before invoking the function. This allows passing dynamic values as environment variables from the command line to the function.'
        gateway: |-
            [AI] The `faas-cli invoke --gateway` command is a part of the FaaS (Function-as-a-Service) CLI tool for the OpenFaaS platform. This command invokes a function using a specific gateway URL.

            When you run this command, it sends an HTTP request to the specified gateway URL, passing any required input data as the request body. The gateway then routes the request to the appropriate function, which is executed in a serverless environment. The output of the function is returned in the response to the original HTTP request.

            This command is particularly useful when working with distributed deployments of OpenFaaS or when accessing functions through a dedicated API gateway. It allows you to easily invoke specific functions from your application without worrying about the underlying infrastructure details.
        header: '[AI] The `faas-cli invoke --header` command is used in Faas (Function as a Service) technology with the FaaS CLI tool to send HTTP requests to a specific function. The `--header` option allows users to define custom headers for the request. These headers can be key-value pairs and are added to the HTTP request header section. This option helps in testing and debugging functions that require specific header configurations, ultimately enhancing the development experience.'
        key: |-
            [AI] The `faas-cli invoke --key` command is a part of the FaaS-CLI (Function as a Service Command Line Interface) tool used to deploy, manage, and execute serverless functions. This specific command invokes a deployed function using an API key for authentication.

            When you run `faas-cli invoke --key <function-name> <request-body>`, it sends a request to the serverless function with the given name (`<function-name>`) and passes the specified request body as data (`<request-body>`). Additionally, it includes the provided API key (implicitly or explicitly through `--key <api-key>` flag) in the HTTP Authorization header for authentication purposes. This allows secure access to the function based on predefined permissions associated with the API key.
        method: '[AI] The `faas-cli invoke --method` command is used in FaaS (Function as a Service) environments to trigger the execution of a specific function method defined in a FaaS application, using the Faas-cli tool. The `--method` option specifies the name of the function and the name of the method within that function to be invoked. For example, if you have an API Gateway handling requests for your FaaS application, and the application includes a function with two methods (`handleRequest1` and `handleRequest2`), you can invoke one of them using a command like `faas-cli invoke myfunction --method handleRequest1`. This sends a request to the FaaS runtime to execute the specified method, returning the response from that execution.'
        name: '[AI] The `faas-cli invoke` command is used to trigger a function defined in a FaaS (Function-as-a-Service) platform, such as OpenFaaS or Fission. The `--name` flag specifies the name of the function to be invoked. When you execute `faas-cli invoke --name <function_name>`, it sends a request to the FaaS platform to run the specified function with the given input data (if provided), and returns the output of the executed function.'
        namespace: '[AI] The `faas-cli invoke` command is a tool provided by FaaS (Function-as-a-Service) platforms, such as OpenFaaS or Cloud Events Faas, to trigger the execution of a specific function using its unique identifier or path. The `--namespace` flag is an optional argument that specifies the namespace where the function resides. It helps in cases where multiple functions with the same name exist across different namespaces within the FaaS cluster. By including this flag, you ensure that the correct function is invoked based on its defined namespace.'
        query: '[AI] `faas-cli invoke --query` is a command in FaaS (Function as a Service) development using the Faas-cli tool. This command invokes a specific function deployed with Faas and returns the response in a format that can be processed further. The `--query` option allows filtering or transforming the JSON response returned by the function before printing it out, using JQ query language syntax. So, the whole command call retrieves the result of an Faas function execution and processes it according to the specified query, which can be useful for extracting specific data from the response.'
        sign: '[AI] `faas-cli invoke --sign` is a command used in Faas (Function as a Service) technology to invoke a specific function with a provided input, while also signing and encrypting the request for secure communication between client and server. The `--sign` flag activates the OpenFAAS built-in JWT signing mechanism to sign the request header before sending it, which is essential when interacting with secured FaasGateways or services that require authenticated requests.'
        tls-no-verify: '[AI] The `faas-cli invoke --tls-no-verify` command is used with the FaaS (Function-as-a-Service) CLI tool to call a specific function without verifying the TLS certificate of the target server. This option can be useful in certain situations where you trust the server and want to bypass the certificate verification process for convenience or when dealing with self-signed certificates. However, it''s essential to understand that disabling certificate verification increases potential security risks, as you would be ignoring any potential man-in-the-middle attacks. Always exercise caution when using this command and ensure you have a valid reason to do so.'
