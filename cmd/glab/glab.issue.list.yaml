# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: list [flags]
aliases:
    - ls
description: List project issues
flags:
    --author=: Filter issue by author <username>
    --in=: search in {title|description}
    --not-assignee*=: Filter issue by not being assigneed to <username>
    --not-author*=: Filter by not being by author(s) <username>
    --not-label*=: Filter issue by lack of label <name>
    --search=: Search <string> in the fields defined by --in
    -A, --all: Get all issues
    -C, --confidential: Filter by confidential issues
    -F, --output-format=: One of 'details', 'ids', or 'urls'
    -M, --mine&: Filter only issues assigned to me
    -P, --per-page=: Number of items to list per page.
    -a, --assignee=: Filter issue by assignee <username>
    -c, --closed: Get only closed issues
    -l, --label*=: Filter issue by label <name>
    -m, --milestone=: Filter issue by milestone <id>
    -o, --opened&: Get only open issues
    -p, --page=: Page number
    -t, --issue-type=: Filter issue by its type {issue|incident|test_case}
persistentflags:
    -R, --repo=: Select another repository using the `OWNER/REPO` or `GROUP/NAMESPACE/REPO` format or full URL or git URL
    -g, --group=: Select a group/subgroup. This option is ignored if a repo argument is set.
documentation:
    command: '[AI] The `glab` command `issue list` is used to list issues from a GitLab repository. It fetches and displays information about open and closed issues, including their titles, numbers, assignees, labels, and statuses. This command is typically used by developers to quickly view and manage the issues in their project without having to access the web interface directly.'
    flag:
        all: '[AI] `glab issue list --all` is a GitLab CLI command used to display a list of all issues in a GitLab project. The `--all` flag indicates that issues from all merged and unfixed branches should be included in the output. This can help provide a more comprehensive view of all open issues across different branches.'
        assignee: '[AI] `glab issue list --assignee` is a GitLab CLI command used to display a list of issues assigned to a specific user in a GitLab project. The `issue list` subcommand lists all the issues, while the `--assignee` option filters the results to only show issues that have been assigned to the specified user. This command helps users quickly check on the issues they are responsible for without having to navigate to the GitLab web interface directly.'
        author: '[AI] The `glab issue list --author` command is a GitLab CLI (Command Line Interface) command used to display a list of issues with their details, filtered by a specific author. This can help users quickly view issues created or commented on by particular team members within a project.'
        closed: '[AI] The `glab issue list --closed` command is a GitLab CLI (Command Line Interface) tool used to fetch a list of closed issues in a specific GitLab project. The "--closed" flag filters the results to display only those issues that have been resolved and are no longer open. This command helps developers, project managers, or anyone interested in the project status, to quickly review the past work, learn from it, and keep track of the progress made towards resolving previous issues.'
        confidential: '[AI] `glab` is a GitLab CLI tool used to interact with GitLab repositories and projects. The command `glab issue list --confidential` is used to list confidential issues in a GitLab project. Confidential issues are issues that contain sensitive information which should not be publicly accessible. By running this command, you can view the details of these confidential issues within your local environment without exposing them outside of your local machine or to unauthorized users. It requires appropriate authentication and access permissions to view confidential issues in a GitLab project.'
        in: '[AI] `glab issue list --in` is a GitLab CLI command used to filter and list issues based on specific input. The `--in` option takes one or more arguments in the format of issue numbers, refnames (e.g., branches or tags), or search queries. The command retrieves information about these selected issues, displaying details such as ID, title, assignee, labels, and status.'
        issue-type: '[AI] The `glab issue list --issue-type` command is used in GitLab''s CLI (Command Line Interface) tool, Glab, to list issues with a specific issue type from a project. The "--issue-type" option filters the results to show only issues of that particular issue type, such as "bug", "enhancement", or "task". This command helps users quickly view and manage relevant issues in their GitLab projects.'
        label: |-
            [AI] The `glab issue list --label` command is used to list issues from a GitLab repository based on a specific label. The `glab` tool is a CLI (Command Line Interface) tool for interacting with GitLab repositories, and this particular command retrieves information about issues that have been assigned the given label. To run it, simply provide the label name as an argument:

            ```bash
            glab issue list --label <LABEL_NAME>
            ```

            Replace `<LABEL_NAME>` with the desired label for your query. This command will display a table containing information about all issues that match the specified label, including their IDs, titles, and assignees (among other details).
        milestone: '[AI] `glab issue list --milestone` is a GitLab CLI command used to list issues within a specific milestone in a GitLab project. The command filters the output to show only issues that have been assigned to that milestone. It can help users manage and prioritize their work based on the current project goals or development roadmap represented by the milestones.'
        mine: '[AI] The `glab issue list --mine` command is a GitLab CLI (Command Line Interface) instruction used to display a list of issues assigned to the current user in a GitLab project. The flag `--mine` filters the results to only show issues where the user is listed as the assignee or author. This can be helpful for quickly viewing and managing your own open issues within a project.'
        not-assignee: '[AI] The `glab issue list --not-assignee` command is used with GitLab''s CLI (Command Line Interface) tool, Glab. It lists all issues in a project that don''t have any assignees assigned to them. By using the `--not-assignee` flag, you can quickly view and filter issues based on this condition. This can be helpful for project managers or developers who want to prioritize unassigned issues for resolution.'
        not-author: '[AI] The `glab issue list --not-author` command is a GitLab CLI (Command Line Interface) command used to list issues in a specific GitLab project, but excluding the ones raised by a specified author. This can be helpful for reviewing open issues raised by other team members or community members, and focusing on those that require attention from the current user.'
        not-label: '[AI] The `glab issue list --not-label <label_name>` command is used with GitLab''s glab tool to display a list of issues from a specific project that do not bear the specified label. For instance, if you run `glab issue list --not-label bug`, it will show you a list of all open issues in that repository which do not have the ''bug'' label assigned to them. This can be helpful when filtering and managing large numbers of issues in a GitLab project.'
        opened: '[AI] The `glab issue list --opened` command is used with Glab, a GitHub CLI tool, to list all the open issues in a specific repository or organization. The "--opened" option filters the results to only show the issues that have not been closed yet. By running this command, you can get an overview of the current issues that need attention and action from the development team or community.'
        output-format: |-
            [AI] `glab` is a Git client for the GitLab REST API. The `issue list` command fetches a list of issues from a specified project in GitLab. The `--output-format` option specifies the desired output format for the command.

            By default, `glab issue list` displays the issues in a table format. However, you can use various other formats like JSON, YAML, or CSV by passing the corresponding format name with `--output-format`. For instance, `glab issue list --output-format json` will return the issue data as a JSON object. This can be useful for parsing and processing the output using scripts or other tools.
        page: '[AI] `glab issue list --page` is a GitLab command used to display a list of issues from a specific project with pagination. This command retrieves the issues in a GitLab repository, and by using the `--page` option, it shows a particular page of results. It''s useful when dealing with large numbers of issues and allows you to navigate through them easily.'
        per-page: '[AI] `glab` is a GitLab CLI tool used to interact with GitLab repositories and projects. The command `glab issue list` lists issues of a specific project or repository. The option `--per-page` specifies the maximum number of issues displayed on each page of the output. For instance, if you set `--per-page 10`, only 10 issues will be shown per page and you can navigate through the pages using the arrow keys or the `glab issue list --next` or `glab issue list --prev` commands.'
        search: '[AI] `glab issue list --search` is a GitLab command used to search for issues in a specific project based on given keywords. The command lists down the issues that match the search query, displaying their titles, numbers, and other relevant information. It helps users quickly find issues related to specific topics or bugs without navigating through each issue page individually.'
