# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
description: install a chart
group: main
flags:
    --atomic: if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used
    --ca-file=: verify certificates of HTTPS-enabled servers using this CA bundle
    --cert-file=: identify HTTPS client using this SSL certificate file
    --create-namespace: create the release namespace if not present
    --dependency-update: update dependencies if they are missing before installing the chart
    --description=: add a custom description
    --devel: use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
    --disable-openapi-validation: if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
    --dry-run: simulate an install
    --insecure-skip-tls-verify: skip tls certificate checks for the chart download
    --key-file=: identify HTTPS client using this SSL key file
    --keyring=: location of public keys used for verification
    --name-template=: specify template used to name the release
    --no-hooks: prevent hooks from running during install
    --pass-credentials: pass credentials to all domains
    --password=: chart repository password where to locate the requested chart
    --post-renderer=: the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
    --render-subchart-notes: if set, render subchart notes along with the parent
    --replace: re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production
    --repo=: chart repository url where to locate the requested chart
    --set*=: 'set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --set-file*=: 'set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)'
    --set-string*=: 'set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)'
    --skip-crds: if set, no CRDs will be installed. By default, CRDs are installed if not already present
    --timeout=: time to wait for any individual Kubernetes operation (like Jobs for hooks)
    --username=: chart repository username where to locate the requested chart
    --verify: verify the package before using it
    --version=: specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used
    --wait: if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout
    --wait-for-jobs: if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout
    -f, --values*=: specify values in a YAML file or a URL (can specify multiple)
    -g, --generate-name: generate the name (and omit the NAME parameter)
    -o, --output=: 'prints the output in the specified format. Allowed values: table, json, yaml'
documentation:
    command: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes. It installs or upgrades a Helm chart, which is a collection of Kubernetes manifests and configuration files, into a Kubernetes cluster. The command takes the name of the Helm chart repository (if not local) and the release name as its arguments. For example: `helm install my-release-name stable/my-chart`. This will download the specified chart from the given repository and deploy it in the cluster with the specified release name. The command also supports various flags to configure the deployment, such as setting values for template variables or specifying resource limits.'
    flag:
        atomic: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy and manage applications. The `--atomic` flag is an optional argument that ensures the deployment of a Chart (Helm''s package format) is rolled out as a single, indivisible unit. This means that if any error occurs during installation, Helm will roll back the entire process, leaving the cluster in its previous state. In summary, `helm install --atomic` guarantees that either all resources of the Chart are installed successfully or none are installed at all.'
        ca-file: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes. The `--ca-file` option is a flag that specifies a custom CA (Certificate Authority) file to be used when establishing secure communication with the Tiller server, which is the component that manages Helm releases in a cluster. This flag enhances security by allowing users to trust only specific CAs and rejecting others, thereby preventing potential man-in-the-middle attacks on their Helm deployments.'
        cert-file: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes. The `--cert-file` option is one of its flags, specifying the path to a client certificate file to use for secure communication between Helm and the Kubernetes API server. This flag ensures that Helm can interact with the Kubernetes cluster using TLS (Transport Layer Security), which helps maintain security and confidentiality of data transmitted between the two systems.'
        create-namespace: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy applications. The `--create-namespace` flag instructs Helm to create a new namespace in your Kubernetes cluster before installing the chart. This can be useful when you want to isolate the resources of different applications from each other. The namespace acts as a logical container for all the related resources within a cluster.'
        dependency-update: '[AI] `helm install --dependency-update` is a command used in Helm, a popular Kubernetes package manager. This command performs an installation or upgrade of a Helm chart, while also updating any dependencies listed in the chart''s values file. Dependencies are other charts that the main chart relies on to function correctly. By using `--dependency-update`, Helm ensures that all required dependencies are up-to-date and installed alongside the main chart, guaranteeing a consistent deployment environment.'
        description: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy a chart (package) in a Kubernetes cluster. The `--description` flag provides a brief description or summary of the purpose of the installation when queried later. It''s an optional argument that helps with managing and maintaining the installed packages by providing clear and concise information about their intended use.'
        devel: '[AI] `helm install --devel` is a command used in Helm, a popular package manager for Kubernetes. The `--devel` (short for "development") flag enables the installation of development versions or pre-releases of Helm charts. This can provide access to new features and improvements before they are officially released. Note that using development versions comes with potential risks such as increased instability or compatibility issues. It''s generally recommended for testing and experimentation purposes only, not for production deployments.'
        disable-openapi-validation: |-
            [AI] The `helm install` command is used to deploy applications using Helm, a popular package manager for Kubernetes. The `--disable-openapi-validation` flag disables OpenAPI validation during the installation process.

            OpenAPI (formerly known as Swagger) is a standard for describing RESTful APIs. In the context of Helm, it refers to the use of an OpenAPI definition file to validate the structure and compatibility of the Kubernetes charts that Helm installs.

            By disabling OpenAPI validation with `--disable-openapi-validation`, you are opting out of this additional layer of checks during installation. This can save time, particularly if you trust the source of your charts or are in a development environment where rapid iteration is prioritized over strict validation. However, it also increases the risk of errors and inconsistencies that might not be caught until runtime. It's essential to understand the potential trade-offs and use this flag judiciously.
        dry-run: '[AI] `helm install --dry-run` is a command used in Helm, a popular package manager for Kubernetes, to perform a simulation of an installation without actually deploying any resources. The `--dry-run` flag tells Helm to show what resources would be created or modified if the installation were to be executed in real life. This can be useful for reviewing and planning changes before applying them in a production environment.'
        generate-name: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to install a chart (a collection of Kubernetes resources). The option `--generate-name` is used when you want Helm to automatically generate a unique name for the released values. In other words, instead of specifying a fixed release name with the `--name` flag, Helm will create a name based on the chart and current environment, making it easier to avoid naming conflicts in multi-tenant environments.'
        insecure-skip-tls-verify: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to install or upgrade charts (packages of pre-configured applications). The `--insecure-skip-tls-verify` flag disables TLS certificate verification during the installation process. This means that Helm will not check if the connection to the Tiller server (Helm''s REST API server) is secure, potentially allowing connections to servers with invalid or self-signed certificates. While this can bypass issues with untrusted certificates, it also opens up security risks, as communications may be intercepted or manipulated. Use this flag with caution and only when connecting to trusted sources.'
        key-file: '[AI] `helm install` is a command used in Helm, a popular Kubernetes Package Manager, to deploy applications from Helm charts. The `--key-file` option specifies the path to a TLS client certificate and key file for secure communication between Helm and a remote Tiller server, which is optional but recommended for securing communications during chart installations. It helps maintain security best practices by encrypting the communication channel.'
        keyring: |-
            [AI] The `helm install` command is used to deploy a Helm chart, which is a package of configuration files and Kubernetes resources, on a Kubernetes cluster using Helm, a popular packaging and deployment tool for Kubernetes.

            The `--keyring` option is related to Helm's support for authentication and access control using TLS-encrypted keyrings. A keyring is a file that contains one or more private keys used for signing Helm releases or values. By passing the `--keyring` option with the path to a valid keyring file, you authenticate yourself to Helm's repository servers and can install charts that require authentication.

            For example: `helm install my-chart --keyring /path/to/my-keyring.gpg`. This assumes that you have already added the public key associated with your private key to the chart repository's trusted keys.
        name-template: '[AI] `helm install` is a command from Helm, a popular package manager for Kubernetes. The `--name-template` option modifies how Helm names the released resources (such as deployments or services) created by installing a chart. This option accepts a Go template string that defines the desired naming scheme. For example, setting it to `myapp-{{ .Release.Name }}-{{ .Release.Version | trunc 7 }}` would result in resource names like `myapp-example-release-1.2.34567`. This can be useful when managing multiple releases of the same chart, as it helps avoid naming conflicts and makes the names more descriptive.'
        no-hooks: |-
            [AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy applications or charts. The `--no-hooks` flag modifies the installation process by disabling the execution of hooks.

            Helm uses hooks to automate tasks during the installation, upgrade, and deletion processes. These tasks can include creating or updating ConfigMaps, Secrets, Services, etc. When using `--no-values`, Helm will not apply any values or templates that define these hooks, effectively skipping them during the installation process. This flag is useful when you want to manually manage certain aspects of the deployment or when you don't need the additional functionality provided by the hooks.
        output: '[AI] `helm install` is a command used in Helm, a popular Kubernetes package manager, to install or upgrade charts (packages). The `--output` flag modifies the output format of Helm''s progress and result messages. It accepts values like "none", "json" or "yaml". By default, Helm displays human-readable progress messages and a summary of the deployed resources upon completion. With the `--output json` option, for instance, Helm returns the deployment''s Kubernetes YAML manifests as JSON instead. This can be useful when integrating Helm with other automation tools or for processing the output programmatically.'
        pass-credentials: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy applications from charts. The `--pass-credentials` option is a security feature that allows Helm to access Kubernetes clusters using a context with authentication details saved in your local `kubeconfig` file, without asking for interactive input. It''s important to note that this should be used with caution and only in trusted environments as it bypasses the standard security checks for accessing sensitive information from the `kubeconfig`.'
        password: '[AI] `helm install` is a command used to deploy applications managed by Helm, a popular Kubernetes packaging and deployment tool. The option `--password <password>` is used to specify a password for authentication when interacting with a Helm repository that requires it, such as a private Helm registry or chart repository. This ensures secure access to the repository and allows you to install or upgrade your Helm applications without exposing the password in plain text.'
        post-renderer: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy or upgrade applications. The `--post-renderer` option is not a common flag and it is used to specify a custom template engine or renderer after Helm''s default one (TFE/Go templates) has finished rendering the chart values. This can be useful when you need more complex rendering logic that cannot be achieved using standard templates alone. By providing a custom renderer, you have complete control over the final rendered output and configuration files for your Kubernetes deployments.'
        render-subchart-notes: '[AI] `helm install` is a command used by Helm, a popular package manager for Kubernetes, to deploy and manage applications as chart packages. The `--render-subchart-notes` option is a flag that can be passed with this command to generate and display the notes from any subcharts included in the main chart being installed. These notes typically provide additional installation instructions or other important information related to the specific subchart. This flag helps users understand the setup process for each subchart separately, enhancing the overall installation experience.'
        replace: '[AI] `helm install` is a command used by Helm, a popular package manager for Kubernetes, to deploy or update a chart (a collection of Kubernetes manifests and other files) in a Kubernetes cluster. The `--replace` flag modifies the behavior of this command: instead of installing a new instance of the chart if it already exists, it will replace the existing release with the new one. This means that any changes made to the new version of the chart will overwrite the previous deployment.'
        repo: '[AI] `helm install` is a command-line tool for deploying and managing applications using Helm, a popular package manager for Kubernetes. The `--repo` option specifies the Helm repository to use when searching for and installing charts. For example, `helm install my-app --repo https://my-chart-repository.com/charts/` would install the `my-app` chart from the specified repository. This allows users to easily deploy tested and trusted versions of applications within their Kubernetes clusters.'
        set: |-
            [AI] `helm install` is a command used to install or upgrade Helm charts on Kubernetes clusters. The `--set` option allows users to override or provide values for certain chart variables at installation time. This can be useful for customizing the behavior of the chart without modifying its source code.

            The format for using `--set` is `--set key=value`, where `key` is the name of the Helm value and `value` is the desired value to be set. Multiple values can be provided by chaining multiple `--set` flags together. For example:

            ```bash
            helm install mychart --set replicas=3 --set imageTag=v1.2.3
            ```

            This command would install the `mychart` Helm chart, setting its `replicas` value to 3 and its `imageTag` value to `v1.2.3`.
        set-file: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to install or upgrade chart applications. The `--set-file` option allows users to override specific values in the Helm chart by providing YAML or JSON files instead of inline values. This can be useful when managing complex configurations or when needing to pass sensitive data as environment variables. When using `--set-file`, the specified file is merged with the existing values in the chart, and any conflicting keys are overwritten.'
        set-string: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to install or upgrade charts, which are customizable packages of Kubernetes resources. The `--set-string` option is a value setter used with this command to override a specific string type value defined in the chart''s values.yaml file. This allows users to modify the value of a string variable without changing other parts of the chart configuration. For example, `helm install mychart --set-string app.name="myapp"` sets the value of the `app.name` variable to "myapp" in the installed chart.'
        skip-crds: '[AI] `helm install` is a command used by Helm, a popular Kubernetes package manager, to deploy or upgrade applications defined in Helm charts. The `--skip-crds` option is used to disable the installation of Custom Resource Definitions (CRDs) that come with some Helm charts. CRDs are Kubernetes API extensions that allow you to define custom resources and controllers. If you already have these CRDs installed in your Kubernetes cluster or do not need them, using `--skip-crds` can save installation time and reduce potential conflicts.'
        timeout: '[AI] `helm install` is a command used to deploy applications managed by Helm, a popular package manager for Kubernetes. The `--timeout` flag sets the maximum time in seconds that Helm will wait for the deployment to complete before considering it failed. If the deployment does not finish within this time, Helm will cancel the installation and report an error. This can be useful when deploying large or complex applications to ensure that resources are released if they take too long to install.'
        username: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes, to deploy applications or charts. The `--username` option is used to specify a particular Kubernetes service account username to use when authenticating and performing the installation. This can be useful in scenarios where you have multiple service accounts, each with different permissions, and you want to ensure that the correct one is being used for a specific installation. By providing this flag, Helm will authenticate using the specified username''s credentials to interact with the Kubernetes cluster and perform the desired operation.'
        values: '[AI] `helm install` is a command used by Helm, a popular package manager for Kubernetes, to deploy a chart (a collection of Kubernetes resources and configuration files) onto a Kubernetes cluster. The `--values` flag is an optional argument that specifies a YAML or HCL file containing override values for the chart''s configuration parameters. These overrides allow customization of the deployed resources beyond what''s defined in the base chart, making it easier to tailor the deployment to specific use cases.'
        verify: '[AI] `helm install --verify` is a command used in Helm, a popular package manager for Kubernetes, to install a chart and perform validation checks before applying the Chart''s resources to the Kubernetes cluster. The `--verify` flag does not actually apply or install the chart; instead, it validates the chart''s values and its Helm file structure for compliance with the Chart''s schema and Helm''s best practices. If the validation is successful, the command exits with a zero exit code, otherwise it will return an error message indicating the issues found. This can be useful when you want to ensure that a chart conforms to certain standards before installing it in a production environment.'
        version: '[AI] `helm install --version` is a command used in Helm, a popular package manager for Kubernetes. This specific command is used to display the version of Helm that is currently installed and being used for deployment tasks. It does not install or deploy anything, but only provides version information as output.'
        wait: '[AI] `helm install --wait` is a command used in Helm, a popular package manager for Kubernetes. This command installs a Helm chart and waits for the released resources to be fully deployed before exiting. The `--wait` flag tells Helm to block and return only after the release has finished deploying. It''s useful when you want to ensure that your application is fully deployed and ready to use before continuing with other tasks.'
        wait-for-jobs: '[AI] `helm install` is a command used in Helm, a popular package manager for Kubernetes. This command installs or upgrades Helm charts, which are pre-configured applications for Kubernetes. The `--wait-for-jobs` flag tells Helm to wait until all the created Kubernetes jobs have completed before exiting the installation process. In other words, it ensures that every component of the chart is fully deployed before acknowledging the successful execution of the command.'
