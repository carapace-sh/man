# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: replace-provider [options] FROM_PROVIDER_FQN TO_PROVIDER_FQN
description: Replace provider in the state
flags:
    -auto-approve: Skip interactive approval.
    -ignore-remote-version: A rare option used for the remote backend only.
    -lock: Don't hold a state lock during the operation.
    -lock-timeout?: Duration to retry a state lock.
documentation:
    command: '[AI] `terraform state replace-provider` is a Terraform CLI command used to update the provider configuration for a specific resource in the current state file. It''s essential when changing from one provider version to another, or switching to an alternative provider that implements the same interface. By using this command, you can modify the provider information without affecting other resources'' configurations. This way, Terraform will use the new provider configuration for the specified resource during future applies.'
    flag:
        auto-approve: |-
            [AI] The `terraform state replace-provider` command is used in Terraform, an open-source infrastructure as code software tool, to replace the provider configuration for a resource in the current state file. This command is often used when upgrading or downgrading provider versions.

            The `-auto-approve` flag is an optional argument for this command. It allows Terraform to automatically approve any differences between the old and new provider configurations without asking for confirmation. This can be useful in automated workflows where manual interaction is not desired. However, it's important to note that using `-auto-approve` can lead to unintended changes if the new provider configuration is not fully compatible with the existing infrastructure, so it should be used with caution.
        ignore-remote-version: '[AI] The `terraform state replace-provider` command is used in Terraform, an open-source infrastructure as code software tool, to update the configured provider for a specific resource or module in the state file. The `-ignore-remote-version` flag is an optional argument that tells Terraform to ignore any version differences between the locally configured provider and the remote provider''s version when making the replacement. This can be useful when you want to keep using an older local provider version for compatibility reasons but still manage your infrastructure with Terraform, without having Terraform complain about version discrepancies. However, it is important to note that using this flag may introduce potential risks, such as missing out on important provider updates and new features. Always ensure that you understand the implications of using this flag before applying it in your infrastructure management workflows.'
        lock: |-
            [AI] The `terraform state replace-provider` command is used with Terraform, an open-source infrastructure as code software tool. This command is specifically used to replace a provider configuration in the Terraform state file.

            The `-lock` option, when used, creates a lock file after the operation has completed. This locking mechanism is important in a multi-person development environment where multiple people may be working on the same infrastructure codebase. By using locks, you can prevent conflicts and ensure that only one person can make changes to the provider configuration at a time.

            In summary, `terraform state replace-provider -lock` command replaces the configuration of a Terraform provider in the state file and creates a lock file to ensure concurrent access is prevented.
        lock-timeout: |-
            [AI] The `terraform state replace-provider` command is used in Terraform, an open-source infrastructure as code software tool, to replace the data source or provider configuration for a resource in your Terraform state file.

            The `-lock-timeout` option sets the duration for which Terraform will hold a lock on the state file during this replacement operation. The default value is 1 minute (60 seconds). If you expect the replacement to take longer than the default timeout, or if you have multiple processes attempting to replace providers at the same time, increasing the lock timeout can prevent conflicts and ensure data consistency.

            For example: `terraform state replace-provider -new-provider "aws_provider.example" "<new_config>" -lock-timeout="2m"` replaces the provider for a resource with the new configuration and sets the lock-timeout to 2 minutes (120 seconds).
