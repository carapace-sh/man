# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: install
aliases:
    - i
description: Installs all dependencies of the project in the current working directory
group: manage
flags:
    --aggregate-output: Aggregate output from child processes that are run in parallel
    --changed-files-ignore-pattern=: Defines files to ignore when filtering for changed projects since the specified commit/branch
    --child-concurrency=: Controls the number of child processes run parallelly
    --color: Controls colors in the output
    --filter-prod=: Restricts the scope to package names matching the given pattern
    --filter=: set filter
    --fix-lockfile: Fix broken lockfile entries automatically
    --force: Force reinstall dependencies
    --frozen-lockfile: Don't generate a lockfile and fail if an update is needed
    --global-dir: Specify a custom directory to store global packages
    --hoist-pattern=: Hoist all dependencies matching the pattern to
    --ignore-pnpmfile: Disable pnpm hooks defined in .pnpmfile.cjs
    --ignore-scripts: Don't run lifecycle scripts
    --lockfile-dir=: The directory in which the pnpm-lock.yaml will be created
    --lockfile-only: Dependencies are not downloaded
    --loglevel=: What level of logs to report
    --modules-dir=: The directory in which dependencies will be installed
    --network-concurrency=: Maximum number of concurrent network requests
    --no-color: Controls colors in the output
    --no-frozen-lockfile: Don't generate a lockfile and fail if an update is needed
    --no-hoist: Dependencies inside the modules directory will have access only to their listed dependencies
    --no-lockfile: Don't read or generate a `pnpm-lock.yaml` file
    --no-optional: '`optionalDependencies` are not installed'
    --no-verify-store-integrity: If false, doesn't check whether packages in the store were mutated
    --offline: Trigger an error if any required dependencies are not available in local store
    --package-import-method=: configure import method
    --prefer-frozen-lockfile: If the available `pnpm-lock.yaml` satisfies the `package.json` then perform a headless installation
    --prefer-offline: Skip staleness checks for cached data, but request missing data from the server
    --public-hoist-pattern=: Hoist all dependencies matching the pattern to the root of the modules directory
    --reporter=: configure output
    --shamefully-hoist: All the subdeps will be hoisted into the root node_modules
    --side-effects-cache: Use or cache the results of (pre/post)install hooks
    --side-effects-cache-readonly: Only use the side effects cache if present, do not create it for new packages
    --store-dir=: The directory in which all the packages are saved on the disk
    --stream: Stream output from child processes immediately
    --strict-peer-dependencies: Fail on missing or invalid peer dependencies
    --test-pattern=: Defines files related to tests
    --use-running-store-server: Only allows installation with a store server
    --use-stderr: Divert all output to stderr
    --use-store-server: Starts a store server in the background
    --verify-store-integrity: If false, doesn't check whether packages in the store were mutated
    --virtual-store-dir=: The directory with links to the store
    -C, --dir=: Change to directory <dir>
    -D, --dev: Only `devDependencies` are installed regardless of the `NODE_ENV`
    -P, --prod: Packages in `devDependencies` won't be installed
    -h, --help: Output usage information
    -r, --recursive: Run installation recursively in every package found in subdirectories
    -s, --silent: No output is logged to the console, except fatal errors
    -w, --workspace-root: Run the command on the root workspace project
documentation:
    command: '[AI] `pnpm install` is a command used with PnPM (Parallel NPM), a package manager for JavaScript projects that installs or updates specified packages from the `package.json` or `pnpm-lock.yaml` file in parallel to improve installation speed. It retrieves the required packages and their dependencies recursively, saving the lockfile after installation.'
    flag:
        aggregate-output: '[AI] `pnpm install --aggregate-output` is a command used with the package manager, pnpm. This command installs dependencies for multiple projects at once while producing an aggregate output file, which lists all installed packages and their versions across the projects. This can be useful for tracking and managing dependencies across a larger project structure.'
        changed-files-ignore-pattern: '[AI] `pnpm install --changed-files-ignore-pattern` is a command used with pnpm (parallel npm), a package manager for JavaScript projects. This command instructs pnpm to only reinstall packages whose node modules or package-lock.json files have been modified since the last installation or commit. The `--changed-files-ignore-pattern` option allows specifying a regular expression pattern to ignore certain changed files from triggering the reinstallation process, which can help save time and resources by avoiding unnecessary installations. For example, you might want to exclude large files like images or fonts that don''t need to be reinstalled every time you make changes to your codebase.'
        child-concurrency: '[AI] `pnpm install --child-concurrency` is a command used with the Package Manager for Node.js projects called pnpm. This option enables parallel installation of child packages in an multi-package project, allowing multiple packages to install concurrently without interfering with each other. It improves the overall install process time by utilizing multiple CPU cores effectively.'
        color: '[AI] The command `pnpm install --color` is used with PNPM (Parallel NPM), a package manager for JavaScript projects, to install dependencies while enabling color output for progress and status messages in the terminal. It improves the readability and clarity of the installation process.'
        dev: '[AI] `pnpm install --dev` is a command used with the Package Manager for Node.js projects called pnpm. This command installs packages specified in the `devDependencies` section of a project''s `package.json` file. These are dependencies required only during development, such as testing frameworks or linters. The `--dev` flag ensures these packages get installed separately from the production dependencies.'
        dir: '[AI] `pnpm install --dir` is a command used with PnPM, a package manager for Node.js projects. This specific command instructs PnPM to install packages in a specific directory instead of the current one. The directory argument specifies the target location for installing dependencies. This can be useful when managing multiple projects sharing common dependencies, or when working on a project that has nested dependencies.'
        filter: '[AI] `pnpm install --filter` is a command used with the Package Manager for Node.js projects called pnpm. This command instructs pnpm to install only the specified packages from the project''s package.json file instead of installing all dependencies listed in that file. The ''--filter'' option allows you to specify a regular expression or a list of package names, which will be installed during the process. By doing this, you can save time and network bandwidth by avoiding unnecessary downloads for large projects where only specific packages need an update or installation.'
        filter-prod: '[AI] `pnpm install --filter-prod` is a command used with the package manager, pnpm. This command installs only the dependencies required for production builds in your Node.js project. The `--filter-prod` flag filters packages based on their `side-effects: false` field in the `package.json` file, meaning only those packages without side effects during runtime will be installed. This can lead to smaller bundle sizes and faster build times for production environments.'
        fix-lockfile: '[AI] `pnpm install --fix-lockfile` is a command used with npm or pnpm package managers. It installs and resolves dependencies in your project, and automatically generates or updates the `pnpm-lock.yaml` file to ensure consistent dependency versions across machines and builds. This can be particularly useful when collaborating on a project or dealing with version conflicts.'
        force: '[AI] `pnpm install --force` is a command used with the package manager, pnpm. It installs all the dependencies listed in a project''s `package.json` file with force updating. This means that pnpm will not check if local or global packages already exist with the same version and will install them again, potentially overwriting any changes made to those packages. This can be useful when dealing with dependency conflicts or issues where package versions need to be reset.'
        frozen-lockfile: '[AI] `pnpm install --frozen-lockfile` is a command used with PnPM, a package manager for Node.js projects. It installs packages specified in the `package.json` file with a "frozen" lockfile. A frozen lockfile prevents any version updates of installed packages during installation, ensuring that the exact same versions as listed in the lockfile are used across different machines or builds. This can help maintain consistency and prevent unexpected package version conflicts.'
        global-dir: |-
            [AI] `pnpm install --global-dir` is a command used with pnpm (Parallel NPM), a package manager for Node.js projects, to install packages globally and specify a custom directory for storing the installed packages.

            Instead of using the default global installation location (usually `/usr/local/bin` or `C:\Program Files\npm\node_modules`), `--global-dir` allows you to set a custom path, such as `~/.pnpm-global` or `C:\Users\YourName\.pnpm-global`, which can be useful for organizing multiple Node.js projects with different package versions or working on a project in development while keeping a production environment isolated.
        help: '[AI] `pnpm install --help` is a command used with the Package Manager for Node.js projects called pnpm. This command displays comprehensive help information about the "install" sub-command in pnpm. It lists all available options, their descriptions, and usage examples to help users understand how to use this command effectively for managing project dependencies.'
        hoist-pattern: '[AI] `pnpm install --hoist-pattern` is a command used with the package manager PnPM (Pluggable npm). The `--hoist-pattern` option enables automatic hoisting of dependencies across projects, meaning that if multiple projects within a workspace have identical dependency needs, PnPM will install and manage them as shared dependencies to save disk space and improve build performance. In other words, it allows for better reusability and efficiency when managing dependencies across multiple projects in a shared workspace.'
        ignore-pnpmfile: '[AI] `pnpm install --ignore-pnpmfile` is a command used with PnPM, a package manager for JavaScript projects. This command tells PnPM to ignore the presence of a `pnpm-lock.yaml` or `pnpm-workspace.yml` file in the current directory or any ancestor directories when installing packages. In other words, it bypasses using these files to manage dependency resolutions and locks, allowing manual control over which packages are installed and their versions.'
        ignore-scripts: '[AI] `pnpm install --ignore-scripts` is a command used in the package manager PnPM (Parallel NPM). It''s used to install project dependencies without executing any installed scripts, allowing for fine-grained control over which scripts get run. This can be useful when debugging or preparing a build environment where you don''t want unnecessary script executions.'
        lockfile-dir: '[AI] `pnpm install --lockfile-dir` is a command used with PnPM, a package manager for JavaScript projects. The option `--lockfile-dir` specifies a directory where PnPM should create or update the lockfiles (i.e., `package-lock.json` or `yarn.lock`) instead of in the project root. This can be useful when multiple projects share common dependencies and need to maintain separate lockfiles.'
        lockfile-only: '[AI] `pnpm install --lockfile-only` is a command used with npm package manager, specifically with pnpm which is a faster and more efficient alternative to npm. This command is used to update the lockfile (package-lock.json or pnm-lock.yaml) without actually installing or downloading any new packages. The locked file records the exact version of each dependency required for your project, ensuring consistency across different environments. Using `--lockfile-only` ensures that your lockfile is always up to date and reflects the latest dependencies declared in your package.json file.'
        loglevel: '[AI] `pnpm install --loglevel` is a command used with pnpm, a package manager for Node.js projects. This command installs the project dependencies with increased logging output. The `--loglevel` option sets the logging level to display more detailed information during the installation process. It can be useful for debugging and understanding the flow of dependency installations.'
        modules-dir: '[AI] `pnpm install --modules-dir` is a command used with npm package manager, particularly pnpm. This command installs packages specified in a project''s package.json file but directs where the installed modules will be stored. Instead of using node_modules as the default directory, it creates or points to a different directory named as an argument to `--modules-dir`. This can be useful when dealing with large projects, multiple repositories, or customizing the installation location for any specific reason.'
        network-concurrency: '[AI] `pnpm install` is a command used in package management with the npm or pnpm tool to install project dependencies. The `--network-concurrency` flag is an option that limits the number of packages being installed concurrently from npm registry over the network. By default, it allows up to 10 packages to be downloaded at once. Setting a higher value can speed up the installation process for larger projects with many dependencies. However, using too high a value may exceed your network bandwidth limit or saturate your internet connection. So, use this flag wisely based on your project size and network capacity.'
        no-color: '[AI] `pnpm install --no-color` is a command used with PnPM, a package manager for JavaScript projects. The `--no-color` option disables colored output in the terminal during the installation process. This can be helpful for users who prefer plain text or have specific terminal configurations that do not support colored output. The command itself installs all the required packages specified in the project''s `pnpm-lock.yaml` or `package-lock.json` file.'
        no-frozen-lockfile: '[AI] `pnpm install` is a command used with the package manager PnPM to install project dependencies based on the `package.json` file. The `--no-frozen-lockfile` flag disables the use of a frozen lockfile during installation. A frozen lockfile keeps the installed packages at specific versions, preventing any updates or version changes unless manually overridden. Without this flag, PnPM will install dependencies with the latest available versions by default.'
        no-hoist: '[AI] `pnpm install --no-hoist` is a command used with npm package manager, PnPM. This command instructs PnPM not to apply hoisting during the installation process. Hoisting is a feature that allows PnPM to deduplicate and share dependencies across multiple projects within a workspace. By using `--no-hoist`, each project will install its own independent set of packages without any dependency sharing or optimization, which can be useful in certain scenarios like working on independent but unrelated projects within the same workspace, or when dealing with sensitive versions that require isolation.'
        no-lockfile: '[AI] `pnpm install --no-lockfile` is a command used with the Parcel Package Manager (pnpm). This command instructs pnpm to install project dependencies without creating or using a lockfile (e.g., `package-lock.json` or `pnpm-lock.yaml`). The benefit of this approach is that it allows for more flexibility in managing dependencies and resolving conflicts as each installation results in a fresh dependency tree. However, it also means that the exact installed versions of dependencies are not recorded, potentially leading to inconsistencies between different development environments.'
        no-optional: '[AI] `pnpm install --no-optional` is a command used with the Package Manager for Node.js projects called pnpm. This command instructs pnpm to install only the specified dependencies listed in the package.json file, excluding the optional dependencies marked with the "optional" field. The "--no-optional" flag ensures that only essential packages are installed during the installation process.'
        no-verify-store-integrity: '[AI] The `pnpm install --no-verify-store-integrity` command is used when working with the Package Manager for Node.js called pnpm. This command instructs pnpm not to verify the integrity of downloaded packages before installing them. By default, pnpm checks the hash of the packages against those stored in its cache and in the `pnpm-store.yml` file to ensure the security and integrity of the installation process. However, when using this flag, this check is bypassed for faster installation, particularly useful when working offline or with a slow network connection. It''s essential to be aware that by skipping this verification step, there could be potential risks in terms of security and package authenticity.'
        offline: '[AI] `pnpm install --offline` is a command used with the Package Manager for Node.js projects called pnpm. This command instructs pnpm to install all dependencies listed in the package.json file without connecting to the internet. The --offline flag ensures that pnpm uses only the local cache to resolve and install dependencies, making it useful when working offline or when experiencing network connectivity issues.'
        package-import-method: |-
            [AI] `pnpm install` is a command used with the package manager PnPM for installing dependencies in a Node.js project. The `--package-import-method` option modifies how PnPM imports packages during installation.

            With this flag, you can specify the import method for a particular package (e.g., "auto", "require", or "esm"). By default, PnPM uses the "auto" method that tries to automatically detect the best import style based on your project's `package.json` and file extensions. However, using the `--package-import-method` flag allows you to override this behavior.

            For instance, if you prefer to use the "esm" (ES modules) import method throughout your project, you can set it for all packages by running:

            ```bash
            pnpm install --package-import-method esm
            ```
        prefer-frozen-lockfile: '[AI] `pnpm install --prefer-frozen-lockfile` is a command used with PnPM, a package manager for JavaScript projects. This command instructs PnPM to use the existing lockfile (package-lock.json or pnp-lock.json) instead of updating it during an installation or build process. This can be useful when collaborating on projects with others or in continuous integration environments where consistent dependencies are required. The frozen lockfile ensures that all team members or builds will have the same dependencies, reducing potential conflicts and inconsistencies.'
        prefer-offline: '[AI] `pnpm install --prefer-offline` is a command used with npm package manager, specifically with pnpm. It instructs pnpm to prioritize using locally cached packages instead of downloading them from the registry again. This can save time and bandwidth, especially when working on large projects or teams with slow internet connections. It''s also useful for offline development environments.'
        prod: '[AI] `pnpm install --prod` is a command used with the package manager, pnpm. It installs and compiles dependencies for a project with production-optimized settings. The `--prod` flag enables various optimization features like tree shaking, source map generation, and minification to reduce bundle size and improve performance for production deployment.'
        public-hoist-pattern: '[AI] `pnpm install --public-hoist-pattern` is a command used with PnPM, a package manager for JavaScript projects. This command instructs PnPM to place certain modules in the top level of the project directory during the installation process. The `--public-hoist-pattern` flag allows specifying a pattern or regular expression to determine which packages should be hoisted. This can improve performance by reducing the number of module requests when building for production.'
        recursive: '[AI] `pnpm install --recursive` is a command used with PnPM, a package manager for JavaScript projects. This specific command is used to install all dependencies of the current project and its sub-dependencies (i.e., dependencies of dependencies) recursively in a multi-project setup. It ensures that each project in the ecosystem has consistent and up-to-date dependencies by performing a depth-first installation strategy. This helps maintain a unified dependency tree across multiple projects, reducing potential version conflicts.'
        reporter: '[AI] `pnpm install` is a command used with the package manager PNPM to install dependencies for a JavaScript project. The `--reporter` option specifies which progress reporter to use during the installation process. Available reporters include "default", "dots", "progress" and "none". By default, pnpm uses the "default" reporter. Using `pnpm install --reporter progress`, for example, will display a more detailed progress report during the installation process.'
        shamefully-hoist: '[AI] `pnpm install --shamelessly-hoist` is a command used with npm package manager, PnPM. It''s an alternative to `--save` or `--save-dev` flags. With this flag, the dependencies are installed but not added to `package.json`''s `dependencies` or `devDependencies`. Instead, they are made available to all projects in the workspace. This can lead to a cleaner and more consistent dependency graph across multiple projects. However, it requires careful management as the dependencies might not be explicitly listed, which could potentially introduce security vulnerabilities or inconsistencies.'
        side-effects-cache: '[AI] `pnpm install --side-effects-cache` is a command used with PNPM, a package manager for JavaScript projects. This command is used to install project dependencies while enabling the side effects cache. The side effects cache is a feature that helps to improve the performance of the installation process by caching the results of any scripts or tasks that produce side effects (changes to the file system or output) during the installation of packages. By reusing these cached side effects, subsequent installations can be faster since they don''t need to repeat the same tasks.'
        side-effects-cache-readonly: |-
            [AI] `pnpm install` is a command used with the Package Manager for Node.js projects called pnpm. The `--side-effects-cache-readonly` flag is an option that can be passed to this command.

            This option makes pnpm read the side effects cache in a read-only mode during installation. Side effects are actions performed by a package other than returning a value when it is required to be called. These actions may modify the file system or environment variables, among other things.

            The read-only flag ensures that the side effects cache is not modified during the installation process. This can be useful when running tests or building projects where you want to ensure a consistent environment between builds. It also helps to prevent accidental modifications of the cache and potential conflicts with other processes using the same cache.
        silent: '[AI] `pnpm install --silent` is a command used with the Package Manager for Node.js projects named pnpm. This command initiates the installation of specified project dependencies using pnpm, with the `--silent` flag ensuring that the progress and output messages are suppressed during the process. It''s often employed when automating tasks or running scripts in a CI/CD pipeline where unnecessary console output might cause confusion.'
        store-dir: '[AI] `pnpm install --store-dir <directory>` is a command used with pnpm, a package manager for Node.js projects. This command installs project dependencies specified in `package.json` or other lock files and stores the global cache in the specified directory instead of the default one. It helps manage multiple projects with different dependency versions and save disk space by sharing the global cache among them.'
        stream: '[AI] `pnpm install --stream` is a command used with npm package manager, specifically the faster alternative pnpm. This command installs packages specified in a `package.json` file and streams the downloaded data to the output instead of saving it to disk first. It''s particularly useful for continuous integration environments and large projects where quick data transfer is essential.'
        strict-peer-dependencies: '[AI] `pnpm install --strict-peer-dependencies` is a command used with PnPM, a package manager for Node.js projects. This command installs dependencies specified in a project''s `package.json` file with an added strictness level for peerDependencies. Peer dependencies are packages that your project depends on but are not direct dependencies of the current package. With this flag enabled, PnPM will throw an error if any installed package has a required peer dependency that is not already present in the project''s `node_modules`. This helps to ensure that all necessary peer dependencies are installed and up-to-date for your project.'
        test-pattern: '[AI] `pnpm install --test-pattern` is a command used with PnPM, a package manager for Node.js projects. This command installs dependencies mentioned in the `package.json` file and runs tests specified by the given test pattern. The `--test-pattern` option allows specifying a glob pattern to match test files, which will then be run using the test runner configured in the `pnpm-test.js` file. This can help ensure that tests are run during development as well as production installation of dependencies.'
        use-running-store-server: |-
            [AI] `pnpm install --use-running-store-server` is a command used with pnpm, a package manager for Node.js projects. This specific command installs packages using pnpm with a special flag `--use-running-store-server`.

            When this flag is provided, pnpm will use the running store server to resolve and install dependencies. The store server is a caching service that can significantly improve installation speed by reusing previously downloaded packages from other projects. This is particularly useful when working on large or complex projects with many dependencies. By using `--use-running-store-server`, you leverage the collective benefits of your team's or community's previous installations to save time and network bandwidth.
        use-stderr: '[AI] `pnpm install --use-stderr` is a command used with npm or pnpm package managers to install project dependencies with error messages printed to the standard error stream instead of the standard output stream. This option, `--use-stderr`, helps distinguish installation errors from regular output during the build process, making it easier to identify and address issues.'
        use-store-server: '[AI] `pnpm install --use-store-server` is a command used with PNPM, a package manager for Node.js projects. This command instructs PNPM to install packages from its own cache server instead of fetching them from external registries like npm or Yarn. The flag `--use-store-server` enables this behavior, allowing for faster installation times if the desired packages are already in the local or remote store server''s cache.'
        verify-store-integrity: '[AI] `pnpm install --verify-store-integrity` is a command used with the package manager PnPM (Parallel NPM). It installs all project dependencies as usual, but also performs an integrity check on the local npm registry (the "store"). This ensures that the downloaded packages have not been tampered with during transfer. The `--verify-store-integrity` flag helps maintain security and authenticity of installed packages.'
        virtual-store-dir: '[AI] `pnpm install --virtual-store-dir` is a command used with PnPM, a package manager for JavaScript projects. This command instructs PnPM to install packages in a virtual store directory instead of the default global or local one. The specified `--virtual-store-dir` argument sets the path for this custom directory. This can be useful when working on multiple projects that require different package versions, allowing for better isolation and easier management of dependencies.'
        workspace-root: '[AI] `pnpm install --workspace-root` is a command used with PnPM, a package manager for JavaScript projects. This command installs packages in a multi-package project using a specific workspace root. The `--workspace-root` option specifies the directory where the `pnpm.lock` and `package-lock.json` files are located, indicating the project''s top-level packages. It ensures consistent dependencies across packages and avoids installing duplicate packages in each package individually.'
