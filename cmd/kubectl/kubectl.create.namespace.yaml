# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: namespace NAME [--dry-run=server|client|none]
aliases:
    - ns
description: Create a namespace with the specified name
flags:
    --allow-missing-template-keys: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
    --dry-run?: Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
    --field-manager=: Name of the manager used to track field ownership.
    --save-config: If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.
    --show-managed-fields: If true, keep the managedFields when printing objects in JSON or YAML format.
    --template=: Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
    --validate?: Validation mode.
    -o, --output=: 'Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).'
documentation:
    command: '[AI] The `kubectl create namespace` command is used to create a new namespace in a Kubernetes cluster. A namespace is an logical partitioning within a single cluster that helps manage resources and isolate environments. This command takes the name of the new namespace as its argument, for example: `kubectl create namespace my-namespace`. Once created, you can deploy and manage your applications within this namespace using other Kubernetes commands.'
    flag:
        allow-missing-template-keys: '[AI] `kubectl create namespace` is a command used to create a new Kubernetes namespaces in a cluster. The option `--allow-missing-template-keys` enables the creation of a namespace even if there are missing keys in the YAML manifest file. In other words, it allows for the creation of a namespace without validating the completeness of any contained objects or templates defined within that namespace. This can be useful when managing complex Kubernetes configurations where some objects might not be fully defined at the time of namespace creation. However, it''s important to note that using this flag may result in errors or unexpected behavior later on if the missing keys are essential for the proper functioning of your Kubernetes resources.'
        dry-run: '[AI] `kubectl create namespace --dry-run` is a command used with the Kubernetes command-line interface (CLI) tool `kubectl`. This command creates a new namespace in a dry-run mode. A dry run means that no actual resources are created or modified, but instead, Kubernetes will simulate the operation and display the manifests or changes that would be made if it were run with `--apply` instead of `--dry-run`. This can be useful for reviewing the effects of a command before executing it. In this specific case, the `create namespace` subcommand creates a new namespace and the `--dry-run` flag instructs `kubectl` to display the YAML manifest for creating that namespace without actually applying it to the cluster.'
        field-manager: |-
            [AI] `kubectl create namespace` is a command used to create a new Kubernetes Namespace in a cluster managed by the `kubectl` tool. The `--field-manager` flag is an optional argument that allows users to configure how the creation of resources (in this case, a Namespace) is managed by the Kubernetes API controllers.

            When used with `--field-manager`, this command instructs the API server to use a specific field manager for managing the Namespace resource. A field manager is an extension point that allows users to customize how certain resources are managed and updated. By default, Kubernetes uses its built-in controllers to manage most resources.

            Using `--field-manager` can be useful when you want to apply custom logic or additional validation rules during the creation or update of a Namespace (or other resources). However, it requires setting up and using a custom field manager in your cluster first.
        output: '[AI] `kubectl create namespace` is a command used to create a new namespace in a Kubernetes cluster. The `--output` flag specifies the output format for the command. If no output format is specified, the default is to display the status of the newly created namespace. With `--output=json`, the command returns the namespace object in JSON format, which can be used for further processing or automation. Other possible output formats include yaml and go-template.'
        save-config: '[AI] The `kubectl create namespace` command creates a new namespace in a Kubernetes cluster. The `--save-config` flag saves the configuration of the newly created namespace in the current working directory under a file named `<namespace-name>.yaml`. This can be useful for version control or reusing the same namespace configuration across different environments.'
        show-managed-fields: '[AI] `kubectl create namespace` is a command used to create a new Kubernetes Namespace in a cluster. The `--show-managed-fields` flag is an optional argument that, when used, will display the managed fields of the newly created Namespace object. Managed fields are the fields that were set by Kubernetes as a result of creating or updating the object, and they can be useful for understanding what changes were made behind the scenes by the Kubernetes API server. In summary, using `kubectl create namespace --show-managed-fields` will create a new Namespace and display the managed fields that were set during the creation process.'
        template: '[AI] `kubectl create namespace --template` is a command used in Kubernetes to create a new namespace with a given name using a template. The `--template` option instructs `kubectl` to generate the YAML definition for creating the namespace from a file or from a string provided as an argument, instead of requiring a pre-existing YAML file. This is useful when you want to create a namespace with specific properties or labels defined in a variable or generated dynamically.'
        validate: '[AI] The `kubectl create namespace` command is used to create a new Kubernetes namespace in a cluster. The `--validate` flag that can be passed with this command is an optional argument that instructs the Kubernetes API server to validate the request before creating the namespace. This means that the API server will check if the request conforms to the Kubernetes API schema and returns any validation errors without actually creating the namespace. If no validation errors are returned, then the namespace will be created as normal. In summary, using `--validate` helps ensure that the requested namespace meets the required Kubernetes standards before it is created.'
