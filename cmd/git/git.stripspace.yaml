# yaml-language-server: $schema=https://carapace.sh/schemas/command.json
name: stripspace
description: Remove unnecessary whitespace
group: low-level helper
flags:
    -c, --comment-lines: prepend comment character and space to each line
    -s, --strip-comments: skip and remove all lines starting with comment character
documentation:
    command: '[AI] `git strip-space` is not a Git command itself, but rather an alias or shorthand for `git config --global filter.strip.clean ''s/\s$//g''`, followed by `git config --global filter.stip-space.smudge ''0<&0 | sed -e "s/\s$//"'' and `git config --global filter.stip-space.reset ''cat''`. These configurations set up two filters called `strip` and `stip-space`. When you use the command `git strip-space <file>`, it applies the `strip` filter to remove trailing whitespaces from the file before committing, ensuring that your code is consistently formatted across your project.'
    flag:
        comment-lines: '[AI] `git strip-space` is a Git command used to remove trailing whitespaces from file changes before committing. The `--comment-lines` option tells Git not to touch comment lines, meaning lines that begin with a hash symbol (#) or a blank line are excluded from the white space stripping process. This can be useful when collaborating on code where preserving formatting and comments is important.'
        strip-comments: |-
            [AI] `git stripspace --strip-commit` is a Git command used to rewrite commit history by removing blank lines and comments at the beginning of commit messages. The `--strip-commits` option allows you to remove the specified commits from the current branch, in addition to rewriting their commit messages.

            In essence, this command helps to clean up unnecessary whitespace and redundant comments in commit history while preserving the actual changes made in each commit. This can be useful when collaborating on a project or preparing a project for submission, as it keeps the commit history more readable and consistent.
